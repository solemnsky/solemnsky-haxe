#include <hxcpp.h>

#include "hxMath.h"
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_nape_Config
#include <nape/Config.h>
#endif
#ifndef INCLUDED_nape_callbacks_BodyCallback
#include <nape/callbacks/BodyCallback.h>
#endif
#ifndef INCLUDED_nape_callbacks_Callback
#include <nape/callbacks/Callback.h>
#endif
#ifndef INCLUDED_nape_callbacks_ConstraintCallback
#include <nape/callbacks/ConstraintCallback.h>
#endif
#ifndef INCLUDED_nape_callbacks_InteractionCallback
#include <nape/callbacks/InteractionCallback.h>
#endif
#ifndef INCLUDED_nape_callbacks_Listener
#include <nape/callbacks/Listener.h>
#endif
#ifndef INCLUDED_nape_callbacks_ListenerList
#include <nape/callbacks/ListenerList.h>
#endif
#ifndef INCLUDED_nape_callbacks_PreCallback
#include <nape/callbacks/PreCallback.h>
#endif
#ifndef INCLUDED_nape_callbacks_PreFlag
#include <nape/callbacks/PreFlag.h>
#endif
#ifndef INCLUDED_nape_constraint_Constraint
#include <nape/constraint/Constraint.h>
#endif
#ifndef INCLUDED_nape_constraint_ConstraintList
#include <nape/constraint/ConstraintList.h>
#endif
#ifndef INCLUDED_nape_dynamics_ArbiterList
#include <nape/dynamics/ArbiterList.h>
#endif
#ifndef INCLUDED_nape_dynamics_ContactList
#include <nape/dynamics/ContactList.h>
#endif
#ifndef INCLUDED_nape_dynamics_InteractionFilter
#include <nape/dynamics/InteractionFilter.h>
#endif
#ifndef INCLUDED_nape_geom_AABB
#include <nape/geom/AABB.h>
#endif
#ifndef INCLUDED_nape_geom_ConvexResult
#include <nape/geom/ConvexResult.h>
#endif
#ifndef INCLUDED_nape_geom_ConvexResultList
#include <nape/geom/ConvexResultList.h>
#endif
#ifndef INCLUDED_nape_geom_Ray
#include <nape/geom/Ray.h>
#endif
#ifndef INCLUDED_nape_geom_RayResult
#include <nape/geom/RayResult.h>
#endif
#ifndef INCLUDED_nape_geom_RayResultList
#include <nape/geom/RayResultList.h>
#endif
#ifndef INCLUDED_nape_geom_Vec2
#include <nape/geom/Vec2.h>
#endif
#ifndef INCLUDED_nape_phys_Body
#include <nape/phys/Body.h>
#endif
#ifndef INCLUDED_nape_phys_BodyList
#include <nape/phys/BodyList.h>
#endif
#ifndef INCLUDED_nape_phys_Compound
#include <nape/phys/Compound.h>
#endif
#ifndef INCLUDED_nape_phys_CompoundList
#include <nape/phys/CompoundList.h>
#endif
#ifndef INCLUDED_nape_phys_Interactor
#include <nape/phys/Interactor.h>
#endif
#ifndef INCLUDED_nape_shape_Shape
#include <nape/shape/Shape.h>
#endif
#ifndef INCLUDED_nape_shape_ShapeIterator
#include <nape/shape/ShapeIterator.h>
#endif
#ifndef INCLUDED_nape_shape_ShapeList
#include <nape/shape/ShapeList.h>
#endif
#ifndef INCLUDED_nape_shape_ValidationResult
#include <nape/shape/ValidationResult.h>
#endif
#ifndef INCLUDED_nape_space_Broadphase
#include <nape/space/Broadphase.h>
#endif
#ifndef INCLUDED_nape_space_Space
#include <nape/space/Space.h>
#endif
#ifndef INCLUDED_zpp_nape_callbacks_ZPP_BodyListener
#include <zpp_nape/callbacks/ZPP_BodyListener.h>
#endif
#ifndef INCLUDED_zpp_nape_callbacks_ZPP_Callback
#include <zpp_nape/callbacks/ZPP_Callback.h>
#endif
#ifndef INCLUDED_zpp_nape_callbacks_ZPP_CbSet
#include <zpp_nape/callbacks/ZPP_CbSet.h>
#endif
#ifndef INCLUDED_zpp_nape_callbacks_ZPP_CbSetPair
#include <zpp_nape/callbacks/ZPP_CbSetPair.h>
#endif
#ifndef INCLUDED_zpp_nape_callbacks_ZPP_ConstraintListener
#include <zpp_nape/callbacks/ZPP_ConstraintListener.h>
#endif
#ifndef INCLUDED_zpp_nape_callbacks_ZPP_InteractionListener
#include <zpp_nape/callbacks/ZPP_InteractionListener.h>
#endif
#ifndef INCLUDED_zpp_nape_callbacks_ZPP_Listener
#include <zpp_nape/callbacks/ZPP_Listener.h>
#endif
#ifndef INCLUDED_zpp_nape_callbacks_ZPP_OptionType
#include <zpp_nape/callbacks/ZPP_OptionType.h>
#endif
#ifndef INCLUDED_zpp_nape_constraint_ZPP_Constraint
#include <zpp_nape/constraint/ZPP_Constraint.h>
#endif
#ifndef INCLUDED_zpp_nape_dynamics_ZPP_Arbiter
#include <zpp_nape/dynamics/ZPP_Arbiter.h>
#endif
#ifndef INCLUDED_zpp_nape_dynamics_ZPP_ColArbiter
#include <zpp_nape/dynamics/ZPP_ColArbiter.h>
#endif
#ifndef INCLUDED_zpp_nape_dynamics_ZPP_Contact
#include <zpp_nape/dynamics/ZPP_Contact.h>
#endif
#ifndef INCLUDED_zpp_nape_dynamics_ZPP_FluidArbiter
#include <zpp_nape/dynamics/ZPP_FluidArbiter.h>
#endif
#ifndef INCLUDED_zpp_nape_dynamics_ZPP_IContact
#include <zpp_nape/dynamics/ZPP_IContact.h>
#endif
#ifndef INCLUDED_zpp_nape_dynamics_ZPP_InteractionFilter
#include <zpp_nape/dynamics/ZPP_InteractionFilter.h>
#endif
#ifndef INCLUDED_zpp_nape_dynamics_ZPP_InteractionGroup
#include <zpp_nape/dynamics/ZPP_InteractionGroup.h>
#endif
#ifndef INCLUDED_zpp_nape_dynamics_ZPP_SensorArbiter
#include <zpp_nape/dynamics/ZPP_SensorArbiter.h>
#endif
#ifndef INCLUDED_zpp_nape_geom_ZPP_AABB
#include <zpp_nape/geom/ZPP_AABB.h>
#endif
#ifndef INCLUDED_zpp_nape_geom_ZPP_Collide
#include <zpp_nape/geom/ZPP_Collide.h>
#endif
#ifndef INCLUDED_zpp_nape_geom_ZPP_ConvexRayResult
#include <zpp_nape/geom/ZPP_ConvexRayResult.h>
#endif
#ifndef INCLUDED_zpp_nape_geom_ZPP_Ray
#include <zpp_nape/geom/ZPP_Ray.h>
#endif
#ifndef INCLUDED_zpp_nape_geom_ZPP_SweepDistance
#include <zpp_nape/geom/ZPP_SweepDistance.h>
#endif
#ifndef INCLUDED_zpp_nape_geom_ZPP_ToiEvent
#include <zpp_nape/geom/ZPP_ToiEvent.h>
#endif
#ifndef INCLUDED_zpp_nape_geom_ZPP_Vec2
#include <zpp_nape/geom/ZPP_Vec2.h>
#endif
#ifndef INCLUDED_zpp_nape_phys_ZPP_Body
#include <zpp_nape/phys/ZPP_Body.h>
#endif
#ifndef INCLUDED_zpp_nape_phys_ZPP_Compound
#include <zpp_nape/phys/ZPP_Compound.h>
#endif
#ifndef INCLUDED_zpp_nape_phys_ZPP_FluidProperties
#include <zpp_nape/phys/ZPP_FluidProperties.h>
#endif
#ifndef INCLUDED_zpp_nape_phys_ZPP_Interactor
#include <zpp_nape/phys/ZPP_Interactor.h>
#endif
#ifndef INCLUDED_zpp_nape_phys_ZPP_Material
#include <zpp_nape/phys/ZPP_Material.h>
#endif
#ifndef INCLUDED_zpp_nape_shape_ZPP_Circle
#include <zpp_nape/shape/ZPP_Circle.h>
#endif
#ifndef INCLUDED_zpp_nape_shape_ZPP_Edge
#include <zpp_nape/shape/ZPP_Edge.h>
#endif
#ifndef INCLUDED_zpp_nape_shape_ZPP_Polygon
#include <zpp_nape/shape/ZPP_Polygon.h>
#endif
#ifndef INCLUDED_zpp_nape_shape_ZPP_Shape
#include <zpp_nape/shape/ZPP_Shape.h>
#endif
#ifndef INCLUDED_zpp_nape_space_ZPP_AABBNode
#include <zpp_nape/space/ZPP_AABBNode.h>
#endif
#ifndef INCLUDED_zpp_nape_space_ZPP_AABBPair
#include <zpp_nape/space/ZPP_AABBPair.h>
#endif
#ifndef INCLUDED_zpp_nape_space_ZPP_Broadphase
#include <zpp_nape/space/ZPP_Broadphase.h>
#endif
#ifndef INCLUDED_zpp_nape_space_ZPP_CallbackSet
#include <zpp_nape/space/ZPP_CallbackSet.h>
#endif
#ifndef INCLUDED_zpp_nape_space_ZPP_CbSetManager
#include <zpp_nape/space/ZPP_CbSetManager.h>
#endif
#ifndef INCLUDED_zpp_nape_space_ZPP_Component
#include <zpp_nape/space/ZPP_Component.h>
#endif
#ifndef INCLUDED_zpp_nape_space_ZPP_DynAABBPhase
#include <zpp_nape/space/ZPP_DynAABBPhase.h>
#endif
#ifndef INCLUDED_zpp_nape_space_ZPP_Island
#include <zpp_nape/space/ZPP_Island.h>
#endif
#ifndef INCLUDED_zpp_nape_space_ZPP_Space
#include <zpp_nape/space/ZPP_Space.h>
#endif
#ifndef INCLUDED_zpp_nape_space_ZPP_SweepPhase
#include <zpp_nape/space/ZPP_SweepPhase.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPList_ConvexResult
#include <zpp_nape/util/ZNPList_ConvexResult.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPList_ZPP_Arbiter
#include <zpp_nape/util/ZNPList_ZPP_Arbiter.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPList_ZPP_Body
#include <zpp_nape/util/ZNPList_ZPP_Body.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPList_ZPP_BodyListener
#include <zpp_nape/util/ZNPList_ZPP_BodyListener.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPList_ZPP_CallbackSet
#include <zpp_nape/util/ZNPList_ZPP_CallbackSet.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPList_ZPP_CbSetPair
#include <zpp_nape/util/ZNPList_ZPP_CbSetPair.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPList_ZPP_CbType
#include <zpp_nape/util/ZNPList_ZPP_CbType.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPList_ZPP_ColArbiter
#include <zpp_nape/util/ZNPList_ZPP_ColArbiter.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPList_ZPP_Component
#include <zpp_nape/util/ZNPList_ZPP_Component.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPList_ZPP_Compound
#include <zpp_nape/util/ZNPList_ZPP_Compound.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPList_ZPP_Constraint
#include <zpp_nape/util/ZNPList_ZPP_Constraint.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPList_ZPP_ConstraintListener
#include <zpp_nape/util/ZNPList_ZPP_ConstraintListener.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPList_ZPP_Edge
#include <zpp_nape/util/ZNPList_ZPP_Edge.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPList_ZPP_FluidArbiter
#include <zpp_nape/util/ZNPList_ZPP_FluidArbiter.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPList_ZPP_InteractionListener
#include <zpp_nape/util/ZNPList_ZPP_InteractionListener.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPList_ZPP_Interactor
#include <zpp_nape/util/ZNPList_ZPP_Interactor.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPList_ZPP_Listener
#include <zpp_nape/util/ZNPList_ZPP_Listener.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPList_ZPP_SensorArbiter
#include <zpp_nape/util/ZNPList_ZPP_SensorArbiter.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPList_ZPP_Shape
#include <zpp_nape/util/ZNPList_ZPP_Shape.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPList_ZPP_ToiEvent
#include <zpp_nape/util/ZNPList_ZPP_ToiEvent.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPNode_ConvexResult
#include <zpp_nape/util/ZNPNode_ConvexResult.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPNode_ZPP_Arbiter
#include <zpp_nape/util/ZNPNode_ZPP_Arbiter.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPNode_ZPP_Body
#include <zpp_nape/util/ZNPNode_ZPP_Body.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPNode_ZPP_BodyListener
#include <zpp_nape/util/ZNPNode_ZPP_BodyListener.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPNode_ZPP_CallbackSet
#include <zpp_nape/util/ZNPNode_ZPP_CallbackSet.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPNode_ZPP_CbSetPair
#include <zpp_nape/util/ZNPNode_ZPP_CbSetPair.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPNode_ZPP_ColArbiter
#include <zpp_nape/util/ZNPNode_ZPP_ColArbiter.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPNode_ZPP_Component
#include <zpp_nape/util/ZNPNode_ZPP_Component.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPNode_ZPP_Compound
#include <zpp_nape/util/ZNPNode_ZPP_Compound.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPNode_ZPP_Constraint
#include <zpp_nape/util/ZNPNode_ZPP_Constraint.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPNode_ZPP_ConstraintListener
#include <zpp_nape/util/ZNPNode_ZPP_ConstraintListener.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPNode_ZPP_Edge
#include <zpp_nape/util/ZNPNode_ZPP_Edge.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPNode_ZPP_FluidArbiter
#include <zpp_nape/util/ZNPNode_ZPP_FluidArbiter.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPNode_ZPP_InteractionListener
#include <zpp_nape/util/ZNPNode_ZPP_InteractionListener.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPNode_ZPP_Interactor
#include <zpp_nape/util/ZNPNode_ZPP_Interactor.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPNode_ZPP_Listener
#include <zpp_nape/util/ZNPNode_ZPP_Listener.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPNode_ZPP_SensorArbiter
#include <zpp_nape/util/ZNPNode_ZPP_SensorArbiter.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPNode_ZPP_Shape
#include <zpp_nape/util/ZNPNode_ZPP_Shape.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPNode_ZPP_ToiEvent
#include <zpp_nape/util/ZNPNode_ZPP_ToiEvent.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZPP_ArbiterList
#include <zpp_nape/util/ZPP_ArbiterList.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZPP_BodyList
#include <zpp_nape/util/ZPP_BodyList.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZPP_CompoundList
#include <zpp_nape/util/ZPP_CompoundList.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZPP_ConstraintList
#include <zpp_nape/util/ZPP_ConstraintList.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZPP_ContactList
#include <zpp_nape/util/ZPP_ContactList.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZPP_ConvexResultList
#include <zpp_nape/util/ZPP_ConvexResultList.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZPP_Flags
#include <zpp_nape/util/ZPP_Flags.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZPP_ListenerList
#include <zpp_nape/util/ZPP_ListenerList.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZPP_PubPool
#include <zpp_nape/util/ZPP_PubPool.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZPP_Set_ZPP_CbSet
#include <zpp_nape/util/ZPP_Set_ZPP_CbSet.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZPP_ShapeList
#include <zpp_nape/util/ZPP_ShapeList.h>
#endif
namespace zpp_nape{
namespace space{

Void ZPP_Space_obj::__construct(::zpp_nape::geom::ZPP_Vec2 gravity,::nape::space::Broadphase broadphase)
{
HX_STACK_FRAME("zpp_nape.space.ZPP_Space","new",0xcd0d3aaa,"zpp_nape.space.ZPP_Space.new","zpp_nape/space/Space.hx",1379,0x2b65ed03)
HX_STACK_THIS(this)
HX_STACK_ARG(gravity,"gravity")
HX_STACK_ARG(broadphase,"broadphase")
{
	HX_STACK_LINE(5873)
	this->prelisteners = null();
	HX_STACK_LINE(5872)
	this->precb = null();
	HX_STACK_LINE(5361)
	this->continuous = false;
	HX_STACK_LINE(3353)
	this->toiEvents = null();
	HX_STACK_LINE(3013)
	this->pre_dt = ((Float)0.0);
	HX_STACK_LINE(2611)
	this->convexShapeList = null();
	HX_STACK_LINE(1555)
	this->cbsets = null();
	HX_STACK_LINE(1554)
	this->callbackset_list = null();
	HX_STACK_LINE(1553)
	this->callbacks = null();
	HX_STACK_LINE(1552)
	this->wrap_listeners = null();
	HX_STACK_LINE(1551)
	this->listeners = null();
	HX_STACK_LINE(1550)
	this->islands = null();
	HX_STACK_LINE(1549)
	this->staticsleep = null();
	HX_STACK_LINE(1548)
	this->wrap_livecon = null();
	HX_STACK_LINE(1547)
	this->live_constraints = null();
	HX_STACK_LINE(1546)
	this->wrap_live = null();
	HX_STACK_LINE(1545)
	this->live = null();
	HX_STACK_LINE(1544)
	this->wrap_arbiters = null();
	HX_STACK_LINE(1543)
	this->s_arbiters = null();
	HX_STACK_LINE(1542)
	this->f_arbiters = null();
	HX_STACK_LINE(1541)
	this->c_arbiters_false = null();
	HX_STACK_LINE(1540)
	this->c_arbiters_true = null();
	HX_STACK_LINE(1538)
	this->sortcontacts = false;
	HX_STACK_LINE(1537)
	this->time = ((Float)0.0);
	HX_STACK_LINE(1536)
	this->midstep = false;
	HX_STACK_LINE(1535)
	this->stamp = (int)0;
	HX_STACK_LINE(1534)
	this->global_ang_drag = ((Float)0.0);
	HX_STACK_LINE(1533)
	this->global_lin_drag = ((Float)0.0);
	HX_STACK_LINE(1532)
	this->__static = null();
	HX_STACK_LINE(1531)
	this->bphase = null();
	HX_STACK_LINE(1530)
	this->kinematics = null();
	HX_STACK_LINE(1529)
	this->wrap_constraints = null();
	HX_STACK_LINE(1528)
	this->constraints = null();
	HX_STACK_LINE(1527)
	this->wrap_compounds = null();
	HX_STACK_LINE(1526)
	this->compounds = null();
	HX_STACK_LINE(1525)
	this->wrap_bodies = null();
	HX_STACK_LINE(1524)
	this->bodies = null();
	HX_STACK_LINE(1384)
	this->wrap_gravity = null();
	HX_STACK_LINE(1383)
	this->gravityy = ((Float)0.0);
	HX_STACK_LINE(1382)
	this->gravityx = ((Float)0.0);
	HX_STACK_LINE(1381)
	this->userData = null();
	HX_STACK_LINE(1380)
	this->outer = null();
	HX_STACK_LINE(1889)
	::zpp_nape::util::ZNPList_ZPP_ToiEvent tmp = ::zpp_nape::util::ZNPList_ZPP_ToiEvent_obj::__new();		HX_STACK_VAR(tmp,"tmp");
	HX_STACK_LINE(1889)
	this->toiEvents = tmp;
	HX_STACK_LINE(1890)
	this->global_lin_drag = ((Float)0.015);
	HX_STACK_LINE(1891)
	this->global_ang_drag = ((Float)0.015);
	HX_STACK_LINE(1893)
	::zpp_nape::callbacks::ZPP_Callback_obj::internal = true;
	HX_STACK_LINE(1895)
	::nape::callbacks::PreCallback tmp1 = ::nape::callbacks::PreCallback_obj::__new();		HX_STACK_VAR(tmp1,"tmp1");
	HX_STACK_LINE(1895)
	this->precb = tmp1;
	HX_STACK_LINE(1896)
	::zpp_nape::callbacks::ZPP_Callback tmp2 = ::zpp_nape::callbacks::ZPP_Callback_obj::__new();		HX_STACK_VAR(tmp2,"tmp2");
	HX_STACK_LINE(1896)
	::nape::callbacks::PreCallback tmp3 = this->precb;		HX_STACK_VAR(tmp3,"tmp3");
	HX_STACK_LINE(1896)
	tmp3->zpp_inner = tmp2;
	HX_STACK_LINE(1898)
	::zpp_nape::callbacks::ZPP_Callback_obj::internal = false;
	HX_STACK_LINE(1900)
	this->sortcontacts = true;
	HX_STACK_LINE(1901)
	this->pre_dt = ((Float)0.0);
	HX_STACK_LINE(1902)
	bool tmp4 = (broadphase == null());		HX_STACK_VAR(tmp4,"tmp4");
	HX_STACK_LINE(1902)
	bool tmp5 = !(tmp4);		HX_STACK_VAR(tmp5,"tmp5");
	HX_STACK_LINE(1902)
	bool tmp6;		HX_STACK_VAR(tmp6,"tmp6");
	HX_STACK_LINE(1902)
	if ((tmp5)){
		HX_STACK_LINE(1902)
		::nape::space::Broadphase tmp7 = broadphase;		HX_STACK_VAR(tmp7,"tmp7");
		HX_STACK_LINE(1902)
		::nape::space::Broadphase tmp8;		HX_STACK_VAR(tmp8,"tmp8");
		HX_STACK_LINE(1902)
		{
			HX_STACK_LINE(1902)
			::nape::space::Broadphase tmp9 = ::zpp_nape::util::ZPP_Flags_obj::Broadphase_DYNAMIC_AABB_TREE;		HX_STACK_VAR(tmp9,"tmp9");
			HX_STACK_LINE(1902)
			::nape::space::Broadphase tmp10 = tmp9;		HX_STACK_VAR(tmp10,"tmp10");
			HX_STACK_LINE(1902)
			bool tmp11 = (tmp10 == null());		HX_STACK_VAR(tmp11,"tmp11");
			HX_STACK_LINE(1902)
			bool tmp12 = tmp11;		HX_STACK_VAR(tmp12,"tmp12");
			HX_STACK_LINE(1902)
			bool tmp13 = tmp12;		HX_STACK_VAR(tmp13,"tmp13");
			HX_STACK_LINE(1902)
			if ((tmp13)){
				HX_STACK_LINE(1902)
				::zpp_nape::util::ZPP_Flags_obj::internal = true;
				HX_STACK_LINE(1902)
				::nape::space::Broadphase tmp14 = ::nape::space::Broadphase_obj::__new();		HX_STACK_VAR(tmp14,"tmp14");
				HX_STACK_LINE(1902)
				::zpp_nape::util::ZPP_Flags_obj::Broadphase_DYNAMIC_AABB_TREE = tmp14;
				HX_STACK_LINE(1902)
				::zpp_nape::util::ZPP_Flags_obj::internal = false;
			}
			HX_STACK_LINE(1902)
			::nape::space::Broadphase tmp14 = ::zpp_nape::util::ZPP_Flags_obj::Broadphase_DYNAMIC_AABB_TREE;		HX_STACK_VAR(tmp14,"tmp14");
			HX_STACK_LINE(1902)
			tmp8 = tmp14;
		}
		HX_STACK_LINE(1902)
		tmp6 = (tmp7 == tmp8);
	}
	else{
		HX_STACK_LINE(1902)
		tmp6 = true;
	}
	HX_STACK_LINE(1902)
	if ((tmp6)){
		HX_STACK_LINE(1902)
		::zpp_nape::space::ZPP_DynAABBPhase tmp7 = ::zpp_nape::space::ZPP_DynAABBPhase_obj::__new(hx::ObjectPtr<OBJ_>(this));		HX_STACK_VAR(tmp7,"tmp7");
		HX_STACK_LINE(1902)
		this->bphase = tmp7;
	}
	else{
		HX_STACK_LINE(1903)
		::nape::space::Broadphase tmp7 = broadphase;		HX_STACK_VAR(tmp7,"tmp7");
		HX_STACK_LINE(1903)
		::nape::space::Broadphase tmp8;		HX_STACK_VAR(tmp8,"tmp8");
		HX_STACK_LINE(1903)
		{
			HX_STACK_LINE(1903)
			::nape::space::Broadphase tmp9 = ::zpp_nape::util::ZPP_Flags_obj::Broadphase_SWEEP_AND_PRUNE;		HX_STACK_VAR(tmp9,"tmp9");
			HX_STACK_LINE(1903)
			bool tmp10 = (tmp9 == null());		HX_STACK_VAR(tmp10,"tmp10");
			HX_STACK_LINE(1903)
			if ((tmp10)){
				HX_STACK_LINE(1903)
				::zpp_nape::util::ZPP_Flags_obj::internal = true;
				HX_STACK_LINE(1903)
				::nape::space::Broadphase tmp11 = ::nape::space::Broadphase_obj::__new();		HX_STACK_VAR(tmp11,"tmp11");
				HX_STACK_LINE(1903)
				::zpp_nape::util::ZPP_Flags_obj::Broadphase_SWEEP_AND_PRUNE = tmp11;
				HX_STACK_LINE(1903)
				::zpp_nape::util::ZPP_Flags_obj::internal = false;
			}
			HX_STACK_LINE(1903)
			tmp8 = ::zpp_nape::util::ZPP_Flags_obj::Broadphase_SWEEP_AND_PRUNE;
		}
		HX_STACK_LINE(1903)
		bool tmp9 = (tmp7 == tmp8);		HX_STACK_VAR(tmp9,"tmp9");
		HX_STACK_LINE(1903)
		if ((tmp9)){
			HX_STACK_LINE(1903)
			::zpp_nape::space::ZPP_SweepPhase tmp10 = ::zpp_nape::space::ZPP_SweepPhase_obj::__new(hx::ObjectPtr<OBJ_>(this));		HX_STACK_VAR(tmp10,"tmp10");
			HX_STACK_LINE(1903)
			this->bphase = tmp10;
		}
	}
	HX_STACK_LINE(1904)
	this->time = ((Float)0.0);
	HX_STACK_LINE(1905)
	::zpp_nape::space::ZPP_Space me = hx::ObjectPtr<OBJ_>(this);		HX_STACK_VAR(me,"me");
	HX_STACK_LINE(1906)
	bool tmp7 = (gravity != null());		HX_STACK_VAR(tmp7,"tmp7");
	HX_STACK_LINE(1906)
	if ((tmp7)){
		HX_STACK_LINE(1907)
		this->gravityx = gravity->x;
		HX_STACK_LINE(1908)
		this->gravityy = gravity->y;
		HX_STACK_LINE(1917)
		{
		}
	}
	else{
		HX_STACK_LINE(1927)
		this->gravityx = (int)0;
		HX_STACK_LINE(1928)
		this->gravityy = (int)0;
		HX_STACK_LINE(1937)
		{
		}
	}
	HX_STACK_LINE(1946)
	::zpp_nape::util::ZNPList_ZPP_Body tmp8 = ::zpp_nape::util::ZNPList_ZPP_Body_obj::__new();		HX_STACK_VAR(tmp8,"tmp8");
	HX_STACK_LINE(1946)
	this->bodies = tmp8;
	HX_STACK_LINE(1947)
	::zpp_nape::util::ZNPList_ZPP_Body tmp9 = this->bodies;		HX_STACK_VAR(tmp9,"tmp9");
	HX_STACK_LINE(1947)
	::nape::phys::BodyList tmp10 = ::zpp_nape::util::ZPP_BodyList_obj::get(tmp9,null());		HX_STACK_VAR(tmp10,"tmp10");
	HX_STACK_LINE(1947)
	this->wrap_bodies = tmp10;
	HX_STACK_LINE(1948)
	Dynamic tmp11 = this->bodies_adder_dyn();		HX_STACK_VAR(tmp11,"tmp11");
	HX_STACK_LINE(1948)
	::nape::phys::BodyList tmp12 = this->wrap_bodies;		HX_STACK_VAR(tmp12,"tmp12");
	HX_STACK_LINE(1948)
	tmp12->zpp_inner->adder = tmp11;
	HX_STACK_LINE(1949)
	Dynamic tmp13 = this->bodies_subber_dyn();		HX_STACK_VAR(tmp13,"tmp13");
	HX_STACK_LINE(1949)
	::nape::phys::BodyList tmp14 = this->wrap_bodies;		HX_STACK_VAR(tmp14,"tmp14");
	HX_STACK_LINE(1949)
	tmp14->zpp_inner->subber = tmp13;
	HX_STACK_LINE(1951)
	Dynamic tmp15 = this->bodies_modifiable_dyn();		HX_STACK_VAR(tmp15,"tmp15");
	HX_STACK_LINE(1951)
	::nape::phys::BodyList tmp16 = this->wrap_bodies;		HX_STACK_VAR(tmp16,"tmp16");
	HX_STACK_LINE(1951)
	tmp16->zpp_inner->_modifiable = tmp15;
	HX_STACK_LINE(1953)
	::zpp_nape::util::ZNPList_ZPP_Compound tmp17 = ::zpp_nape::util::ZNPList_ZPP_Compound_obj::__new();		HX_STACK_VAR(tmp17,"tmp17");
	HX_STACK_LINE(1953)
	this->compounds = tmp17;
	HX_STACK_LINE(1954)
	::zpp_nape::util::ZNPList_ZPP_Compound tmp18 = this->compounds;		HX_STACK_VAR(tmp18,"tmp18");
	HX_STACK_LINE(1954)
	::nape::phys::CompoundList tmp19 = ::zpp_nape::util::ZPP_CompoundList_obj::get(tmp18,null());		HX_STACK_VAR(tmp19,"tmp19");
	HX_STACK_LINE(1954)
	this->wrap_compounds = tmp19;
	HX_STACK_LINE(1955)
	Dynamic tmp20 = this->compounds_adder_dyn();		HX_STACK_VAR(tmp20,"tmp20");
	HX_STACK_LINE(1955)
	::nape::phys::CompoundList tmp21 = this->wrap_compounds;		HX_STACK_VAR(tmp21,"tmp21");
	HX_STACK_LINE(1955)
	tmp21->zpp_inner->adder = tmp20;
	HX_STACK_LINE(1956)
	Dynamic tmp22 = this->compounds_subber_dyn();		HX_STACK_VAR(tmp22,"tmp22");
	HX_STACK_LINE(1956)
	::nape::phys::CompoundList tmp23 = this->wrap_compounds;		HX_STACK_VAR(tmp23,"tmp23");
	HX_STACK_LINE(1956)
	tmp23->zpp_inner->subber = tmp22;
	HX_STACK_LINE(1958)
	Dynamic tmp24 = this->compounds_modifiable_dyn();		HX_STACK_VAR(tmp24,"tmp24");
	HX_STACK_LINE(1958)
	::nape::phys::CompoundList tmp25 = this->wrap_compounds;		HX_STACK_VAR(tmp25,"tmp25");
	HX_STACK_LINE(1958)
	tmp25->zpp_inner->_modifiable = tmp24;
	HX_STACK_LINE(1960)
	::zpp_nape::util::ZNPList_ZPP_Body tmp26 = ::zpp_nape::util::ZNPList_ZPP_Body_obj::__new();		HX_STACK_VAR(tmp26,"tmp26");
	HX_STACK_LINE(1960)
	this->kinematics = tmp26;
	HX_STACK_LINE(1961)
	::zpp_nape::util::ZNPList_ZPP_ColArbiter tmp27 = ::zpp_nape::util::ZNPList_ZPP_ColArbiter_obj::__new();		HX_STACK_VAR(tmp27,"tmp27");
	HX_STACK_LINE(1961)
	this->c_arbiters_true = tmp27;
	HX_STACK_LINE(1962)
	::zpp_nape::util::ZNPList_ZPP_ColArbiter tmp28 = ::zpp_nape::util::ZNPList_ZPP_ColArbiter_obj::__new();		HX_STACK_VAR(tmp28,"tmp28");
	HX_STACK_LINE(1962)
	this->c_arbiters_false = tmp28;
	HX_STACK_LINE(1963)
	::zpp_nape::util::ZNPList_ZPP_FluidArbiter tmp29 = ::zpp_nape::util::ZNPList_ZPP_FluidArbiter_obj::__new();		HX_STACK_VAR(tmp29,"tmp29");
	HX_STACK_LINE(1963)
	this->f_arbiters = tmp29;
	HX_STACK_LINE(1964)
	::zpp_nape::util::ZNPList_ZPP_SensorArbiter tmp30 = ::zpp_nape::util::ZNPList_ZPP_SensorArbiter_obj::__new();		HX_STACK_VAR(tmp30,"tmp30");
	HX_STACK_LINE(1964)
	this->s_arbiters = tmp30;
	HX_STACK_LINE(1965)
	::zpp_nape::space::ZPP_Island tmp31 = ::zpp_nape::space::ZPP_Island_obj::__new();		HX_STACK_VAR(tmp31,"tmp31");
	HX_STACK_LINE(1965)
	this->islands = tmp31;
	HX_STACK_LINE(1966)
	::zpp_nape::util::ZNPList_ZPP_Body tmp32 = ::zpp_nape::util::ZNPList_ZPP_Body_obj::__new();		HX_STACK_VAR(tmp32,"tmp32");
	HX_STACK_LINE(1966)
	this->live = tmp32;
	HX_STACK_LINE(1967)
	::zpp_nape::util::ZNPList_ZPP_Body tmp33 = this->live;		HX_STACK_VAR(tmp33,"tmp33");
	HX_STACK_LINE(1967)
	::nape::phys::BodyList tmp34 = ::zpp_nape::util::ZPP_BodyList_obj::get(tmp33,true);		HX_STACK_VAR(tmp34,"tmp34");
	HX_STACK_LINE(1967)
	this->wrap_live = tmp34;
	HX_STACK_LINE(1968)
	::zpp_nape::util::ZNPList_ZPP_Body tmp35 = ::zpp_nape::util::ZNPList_ZPP_Body_obj::__new();		HX_STACK_VAR(tmp35,"tmp35");
	HX_STACK_LINE(1968)
	this->staticsleep = tmp35;
	HX_STACK_LINE(1969)
	::zpp_nape::util::ZNPList_ZPP_Constraint tmp36 = ::zpp_nape::util::ZNPList_ZPP_Constraint_obj::__new();		HX_STACK_VAR(tmp36,"tmp36");
	HX_STACK_LINE(1969)
	this->constraints = tmp36;
	HX_STACK_LINE(1970)
	::zpp_nape::util::ZNPList_ZPP_Constraint tmp37 = this->constraints;		HX_STACK_VAR(tmp37,"tmp37");
	HX_STACK_LINE(1970)
	::nape::constraint::ConstraintList tmp38 = ::zpp_nape::util::ZPP_ConstraintList_obj::get(tmp37,null());		HX_STACK_VAR(tmp38,"tmp38");
	HX_STACK_LINE(1970)
	this->wrap_constraints = tmp38;
	HX_STACK_LINE(1971)
	Dynamic tmp39 = this->constraints_adder_dyn();		HX_STACK_VAR(tmp39,"tmp39");
	HX_STACK_LINE(1971)
	::nape::constraint::ConstraintList tmp40 = this->wrap_constraints;		HX_STACK_VAR(tmp40,"tmp40");
	HX_STACK_LINE(1971)
	tmp40->zpp_inner->adder = tmp39;
	HX_STACK_LINE(1972)
	Dynamic tmp41 = this->constraints_subber_dyn();		HX_STACK_VAR(tmp41,"tmp41");
	HX_STACK_LINE(1972)
	::nape::constraint::ConstraintList tmp42 = this->wrap_constraints;		HX_STACK_VAR(tmp42,"tmp42");
	HX_STACK_LINE(1972)
	tmp42->zpp_inner->subber = tmp41;
	HX_STACK_LINE(1974)
	Dynamic tmp43 = this->constraints_modifiable_dyn();		HX_STACK_VAR(tmp43,"tmp43");
	HX_STACK_LINE(1974)
	::nape::constraint::ConstraintList tmp44 = this->wrap_constraints;		HX_STACK_VAR(tmp44,"tmp44");
	HX_STACK_LINE(1974)
	tmp44->zpp_inner->_modifiable = tmp43;
	HX_STACK_LINE(1976)
	::zpp_nape::util::ZNPList_ZPP_Constraint tmp45 = ::zpp_nape::util::ZNPList_ZPP_Constraint_obj::__new();		HX_STACK_VAR(tmp45,"tmp45");
	HX_STACK_LINE(1976)
	this->live_constraints = tmp45;
	HX_STACK_LINE(1977)
	::zpp_nape::util::ZNPList_ZPP_Constraint tmp46 = this->live_constraints;		HX_STACK_VAR(tmp46,"tmp46");
	HX_STACK_LINE(1977)
	::nape::constraint::ConstraintList tmp47 = ::zpp_nape::util::ZPP_ConstraintList_obj::get(tmp46,true);		HX_STACK_VAR(tmp47,"tmp47");
	HX_STACK_LINE(1977)
	this->wrap_livecon = tmp47;
	HX_STACK_LINE(1978)
	::nape::phys::Body tmp48 = ::zpp_nape::phys::ZPP_Body_obj::__static();		HX_STACK_VAR(tmp48,"tmp48");
	HX_STACK_LINE(1978)
	this->__static = tmp48;
	HX_STACK_LINE(1979)
	::nape::phys::Body tmp49 = this->__static;		HX_STACK_VAR(tmp49,"tmp49");
	HX_STACK_LINE(1979)
	tmp49->zpp_inner->space = hx::ObjectPtr<OBJ_>(this);
	HX_STACK_LINE(1980)
	::zpp_nape::callbacks::ZPP_Callback tmp50 = ::zpp_nape::callbacks::ZPP_Callback_obj::__new();		HX_STACK_VAR(tmp50,"tmp50");
	HX_STACK_LINE(1980)
	this->callbacks = tmp50;
	HX_STACK_LINE(1981)
	this->midstep = false;
	HX_STACK_LINE(1982)
	::zpp_nape::util::ZNPList_ZPP_Listener tmp51 = ::zpp_nape::util::ZNPList_ZPP_Listener_obj::__new();		HX_STACK_VAR(tmp51,"tmp51");
	HX_STACK_LINE(1982)
	this->listeners = tmp51;
	HX_STACK_LINE(1983)
	::zpp_nape::util::ZNPList_ZPP_Listener tmp52 = this->listeners;		HX_STACK_VAR(tmp52,"tmp52");
	HX_STACK_LINE(1983)
	::nape::callbacks::ListenerList tmp53 = ::zpp_nape::util::ZPP_ListenerList_obj::get(tmp52,null());		HX_STACK_VAR(tmp53,"tmp53");
	HX_STACK_LINE(1983)
	this->wrap_listeners = tmp53;
	HX_STACK_LINE(1984)
	Dynamic tmp54 = this->listeners_adder_dyn();		HX_STACK_VAR(tmp54,"tmp54");
	HX_STACK_LINE(1984)
	::nape::callbacks::ListenerList tmp55 = this->wrap_listeners;		HX_STACK_VAR(tmp55,"tmp55");
	HX_STACK_LINE(1984)
	tmp55->zpp_inner->adder = tmp54;
	HX_STACK_LINE(1985)
	Dynamic tmp56 = this->listeners_subber_dyn();		HX_STACK_VAR(tmp56,"tmp56");
	HX_STACK_LINE(1985)
	::nape::callbacks::ListenerList tmp57 = this->wrap_listeners;		HX_STACK_VAR(tmp57,"tmp57");
	HX_STACK_LINE(1985)
	tmp57->zpp_inner->subber = tmp56;
	HX_STACK_LINE(1987)
	Dynamic tmp58 = this->listeners_modifiable_dyn();		HX_STACK_VAR(tmp58,"tmp58");
	HX_STACK_LINE(1987)
	::nape::callbacks::ListenerList tmp59 = this->wrap_listeners;		HX_STACK_VAR(tmp59,"tmp59");
	HX_STACK_LINE(1987)
	tmp59->zpp_inner->_modifiable = tmp58;
	HX_STACK_LINE(1989)
	::zpp_nape::space::ZPP_CallbackSet tmp60 = ::zpp_nape::space::ZPP_CallbackSet_obj::__new();		HX_STACK_VAR(tmp60,"tmp60");
	HX_STACK_LINE(1989)
	this->callbackset_list = tmp60;
	HX_STACK_LINE(1990)
	::zpp_nape::util::ZNPList_ZPP_Interactor tmp61 = ::zpp_nape::util::ZNPList_ZPP_Interactor_obj::__new();		HX_STACK_VAR(tmp61,"tmp61");
	HX_STACK_LINE(1990)
	this->mrca1 = tmp61;
	HX_STACK_LINE(1991)
	::zpp_nape::util::ZNPList_ZPP_Interactor tmp62 = ::zpp_nape::util::ZNPList_ZPP_Interactor_obj::__new();		HX_STACK_VAR(tmp62,"tmp62");
	HX_STACK_LINE(1991)
	this->mrca2 = tmp62;
	HX_STACK_LINE(1992)
	::zpp_nape::util::ZNPList_ZPP_InteractionListener tmp63 = ::zpp_nape::util::ZNPList_ZPP_InteractionListener_obj::__new();		HX_STACK_VAR(tmp63,"tmp63");
	HX_STACK_LINE(1992)
	this->prelisteners = tmp63;
	HX_STACK_LINE(1993)
	::zpp_nape::space::ZPP_CbSetManager tmp64 = ::zpp_nape::space::ZPP_CbSetManager_obj::__new(hx::ObjectPtr<OBJ_>(this));		HX_STACK_VAR(tmp64,"tmp64");
	HX_STACK_LINE(1993)
	this->cbsets = tmp64;
}
;
	return null();
}

//ZPP_Space_obj::~ZPP_Space_obj() { }

Dynamic ZPP_Space_obj::__CreateEmpty() { return  new ZPP_Space_obj; }
hx::ObjectPtr< ZPP_Space_obj > ZPP_Space_obj::__new(::zpp_nape::geom::ZPP_Vec2 gravity,::nape::space::Broadphase broadphase)
{  hx::ObjectPtr< ZPP_Space_obj > _result_ = new ZPP_Space_obj();
	_result_->__construct(gravity,broadphase);
	return _result_;}

Dynamic ZPP_Space_obj::__Create(hx::DynamicArray inArgs)
{  hx::ObjectPtr< ZPP_Space_obj > _result_ = new ZPP_Space_obj();
	_result_->__construct(inArgs[0],inArgs[1]);
	return _result_;}

Void ZPP_Space_obj::getgravity( ){
{
		HX_STACK_FRAME("zpp_nape.space.ZPP_Space","getgravity",0x924c9f6e,"zpp_nape.space.ZPP_Space.getgravity","zpp_nape/space/Space.hx",1385,0x2b65ed03)
		HX_STACK_THIS(this)
		HX_STACK_LINE(1386)
		::nape::geom::Vec2 tmp;		HX_STACK_VAR(tmp,"tmp");
		HX_STACK_LINE(1386)
		{
			HX_STACK_LINE(1386)
			Float tmp1 = this->gravityx;		HX_STACK_VAR(tmp1,"tmp1");
			HX_STACK_LINE(1386)
			Float x = tmp1;		HX_STACK_VAR(x,"x");
			HX_STACK_LINE(1386)
			Float tmp2 = this->gravityy;		HX_STACK_VAR(tmp2,"tmp2");
			HX_STACK_LINE(1386)
			Float y = tmp2;		HX_STACK_VAR(y,"y");
			HX_STACK_LINE(1386)
			bool weak = false;		HX_STACK_VAR(weak,"weak");
			HX_STACK_LINE(1386)
			bool tmp3 = (x != x);		HX_STACK_VAR(tmp3,"tmp3");
			HX_STACK_LINE(1386)
			bool tmp4 = !(tmp3);		HX_STACK_VAR(tmp4,"tmp4");
			HX_STACK_LINE(1386)
			bool tmp5;		HX_STACK_VAR(tmp5,"tmp5");
			HX_STACK_LINE(1386)
			if ((tmp4)){
				HX_STACK_LINE(1386)
				tmp5 = (y != y);
			}
			else{
				HX_STACK_LINE(1386)
				tmp5 = true;
			}
			HX_STACK_LINE(1386)
			if ((tmp5)){
				HX_STACK_LINE(1386)
				HX_STACK_DO_THROW(HX_HCSTRING("Error: Vec2 components cannot be NaN","\x85","\xba","\xd8","\xc1"));
			}
			HX_STACK_LINE(1386)
			::nape::geom::Vec2 ret;		HX_STACK_VAR(ret,"ret");
			HX_STACK_LINE(1386)
			{
				HX_STACK_LINE(1386)
				::nape::geom::Vec2 tmp6 = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;		HX_STACK_VAR(tmp6,"tmp6");
				HX_STACK_LINE(1386)
				bool tmp7 = (tmp6 == null());		HX_STACK_VAR(tmp7,"tmp7");
				HX_STACK_LINE(1386)
				if ((tmp7)){
					HX_STACK_LINE(1386)
					::nape::geom::Vec2 tmp8 = ::nape::geom::Vec2_obj::__new(null(),null());		HX_STACK_VAR(tmp8,"tmp8");
					HX_STACK_LINE(1386)
					ret = tmp8;
				}
				else{
					HX_STACK_LINE(1386)
					::nape::geom::Vec2 tmp8 = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;		HX_STACK_VAR(tmp8,"tmp8");
					HX_STACK_LINE(1386)
					ret = tmp8;
					HX_STACK_LINE(1386)
					::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
					HX_STACK_LINE(1386)
					ret->zpp_pool = null();
					HX_STACK_LINE(1386)
					ret->zpp_disp = false;
					HX_STACK_LINE(1386)
					::nape::geom::Vec2 tmp9 = ret;		HX_STACK_VAR(tmp9,"tmp9");
					HX_STACK_LINE(1386)
					::nape::geom::Vec2 tmp10 = ::zpp_nape::util::ZPP_PubPool_obj::nextVec2;		HX_STACK_VAR(tmp10,"tmp10");
					HX_STACK_LINE(1386)
					bool tmp11 = (tmp9 == tmp10);		HX_STACK_VAR(tmp11,"tmp11");
					HX_STACK_LINE(1386)
					if ((tmp11)){
						HX_STACK_LINE(1386)
						::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
					}
				}
			}
			HX_STACK_LINE(1386)
			bool tmp6 = (ret->zpp_inner == null());		HX_STACK_VAR(tmp6,"tmp6");
			HX_STACK_LINE(1386)
			if ((tmp6)){
				HX_STACK_LINE(1386)
				::zpp_nape::geom::ZPP_Vec2 tmp7;		HX_STACK_VAR(tmp7,"tmp7");
				HX_STACK_LINE(1386)
				{
					HX_STACK_LINE(1386)
					bool immutable = false;		HX_STACK_VAR(immutable,"immutable");
					HX_STACK_LINE(1386)
					::zpp_nape::geom::ZPP_Vec2 ret1;		HX_STACK_VAR(ret1,"ret1");
					HX_STACK_LINE(1386)
					{
						HX_STACK_LINE(1386)
						::zpp_nape::geom::ZPP_Vec2 tmp8 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;		HX_STACK_VAR(tmp8,"tmp8");
						HX_STACK_LINE(1386)
						bool tmp9 = (tmp8 == null());		HX_STACK_VAR(tmp9,"tmp9");
						HX_STACK_LINE(1386)
						if ((tmp9)){
							HX_STACK_LINE(1386)
							::zpp_nape::geom::ZPP_Vec2 tmp10 = ::zpp_nape::geom::ZPP_Vec2_obj::__new();		HX_STACK_VAR(tmp10,"tmp10");
							HX_STACK_LINE(1386)
							ret1 = tmp10;
						}
						else{
							HX_STACK_LINE(1386)
							::zpp_nape::geom::ZPP_Vec2 tmp10 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;		HX_STACK_VAR(tmp10,"tmp10");
							HX_STACK_LINE(1386)
							ret1 = tmp10;
							HX_STACK_LINE(1386)
							::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
							HX_STACK_LINE(1386)
							ret1->next = null();
						}
						HX_STACK_LINE(1386)
						ret1->weak = false;
					}
					HX_STACK_LINE(1386)
					ret1->_immutable = immutable;
					HX_STACK_LINE(1386)
					{
						HX_STACK_LINE(1386)
						ret1->x = x;
						HX_STACK_LINE(1386)
						ret1->y = y;
						HX_STACK_LINE(1386)
						{
						}
					}
					HX_STACK_LINE(1386)
					tmp7 = ret1;
				}
				HX_STACK_LINE(1386)
				ret->zpp_inner = tmp7;
				HX_STACK_LINE(1386)
				ret->zpp_inner->outer = ret;
			}
			else{
				HX_STACK_LINE(1386)
				{
					HX_STACK_LINE(1386)
					bool tmp7 = (ret != null());		HX_STACK_VAR(tmp7,"tmp7");
					HX_STACK_LINE(1386)
					bool tmp8;		HX_STACK_VAR(tmp8,"tmp8");
					HX_STACK_LINE(1386)
					if ((tmp7)){
						HX_STACK_LINE(1386)
						tmp8 = ret->zpp_disp;
					}
					else{
						HX_STACK_LINE(1386)
						tmp8 = false;
					}
					HX_STACK_LINE(1386)
					if ((tmp8)){
						HX_STACK_LINE(1386)
						::String tmp9 = HX_HCSTRING("Error: Vec2","\xcc","\x3a","\xb6","\x74");		HX_STACK_VAR(tmp9,"tmp9");
						HX_STACK_LINE(1386)
						::String tmp10 = (tmp9 + HX_HCSTRING(" has been disposed and cannot be used!","\x2e","\x07","\xae","\x74"));		HX_STACK_VAR(tmp10,"tmp10");
						HX_STACK_LINE(1386)
						HX_STACK_DO_THROW(tmp10);
					}
				}
				HX_STACK_LINE(1386)
				{
					HX_STACK_LINE(1386)
					::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
					HX_STACK_LINE(1386)
					bool tmp7 = _this->_immutable;		HX_STACK_VAR(tmp7,"tmp7");
					HX_STACK_LINE(1386)
					if ((tmp7)){
						HX_STACK_LINE(1386)
						HX_STACK_DO_THROW(HX_HCSTRING("Error: Vec2 is immutable","\x60","\xee","\x1f","\xbc"));
					}
					HX_STACK_LINE(1386)
					bool tmp8 = (_this->_isimmutable != null());		HX_STACK_VAR(tmp8,"tmp8");
					HX_STACK_LINE(1386)
					if ((tmp8)){
						HX_STACK_LINE(1386)
						_this->_isimmutable();
					}
				}
				HX_STACK_LINE(1386)
				bool tmp7 = (x != x);		HX_STACK_VAR(tmp7,"tmp7");
				HX_STACK_LINE(1386)
				bool tmp8 = !(tmp7);		HX_STACK_VAR(tmp8,"tmp8");
				HX_STACK_LINE(1386)
				bool tmp9;		HX_STACK_VAR(tmp9,"tmp9");
				HX_STACK_LINE(1386)
				if ((tmp8)){
					HX_STACK_LINE(1386)
					tmp9 = (y != y);
				}
				else{
					HX_STACK_LINE(1386)
					tmp9 = true;
				}
				HX_STACK_LINE(1386)
				if ((tmp9)){
					HX_STACK_LINE(1386)
					HX_STACK_DO_THROW(HX_HCSTRING("Error: Vec2 components cannot be NaN","\x85","\xba","\xd8","\xc1"));
				}
				HX_STACK_LINE(1386)
				Float tmp10;		HX_STACK_VAR(tmp10,"tmp10");
				HX_STACK_LINE(1386)
				{
					HX_STACK_LINE(1386)
					{
						HX_STACK_LINE(1386)
						bool tmp11 = (ret != null());		HX_STACK_VAR(tmp11,"tmp11");
						HX_STACK_LINE(1386)
						bool tmp12;		HX_STACK_VAR(tmp12,"tmp12");
						HX_STACK_LINE(1386)
						if ((tmp11)){
							HX_STACK_LINE(1386)
							tmp12 = ret->zpp_disp;
						}
						else{
							HX_STACK_LINE(1386)
							tmp12 = false;
						}
						HX_STACK_LINE(1386)
						if ((tmp12)){
							HX_STACK_LINE(1386)
							::String tmp13 = HX_HCSTRING("Error: Vec2","\xcc","\x3a","\xb6","\x74");		HX_STACK_VAR(tmp13,"tmp13");
							HX_STACK_LINE(1386)
							::String tmp14 = (tmp13 + HX_HCSTRING(" has been disposed and cannot be used!","\x2e","\x07","\xae","\x74"));		HX_STACK_VAR(tmp14,"tmp14");
							HX_STACK_LINE(1386)
							HX_STACK_DO_THROW(tmp14);
						}
					}
					HX_STACK_LINE(1386)
					{
						HX_STACK_LINE(1386)
						::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
						HX_STACK_LINE(1386)
						bool tmp11 = (_this->_validate != null());		HX_STACK_VAR(tmp11,"tmp11");
						HX_STACK_LINE(1386)
						if ((tmp11)){
							HX_STACK_LINE(1386)
							_this->_validate();
						}
					}
					HX_STACK_LINE(1386)
					tmp10 = ret->zpp_inner->x;
				}
				HX_STACK_LINE(1386)
				Float tmp11 = x;		HX_STACK_VAR(tmp11,"tmp11");
				HX_STACK_LINE(1386)
				bool tmp12 = (tmp10 == tmp11);		HX_STACK_VAR(tmp12,"tmp12");
				HX_STACK_LINE(1386)
				bool tmp13;		HX_STACK_VAR(tmp13,"tmp13");
				HX_STACK_LINE(1386)
				if ((tmp12)){
					HX_STACK_LINE(1386)
					Float tmp14;		HX_STACK_VAR(tmp14,"tmp14");
					HX_STACK_LINE(1386)
					{
						HX_STACK_LINE(1386)
						{
							HX_STACK_LINE(1386)
							bool tmp15 = (ret != null());		HX_STACK_VAR(tmp15,"tmp15");
							HX_STACK_LINE(1386)
							bool tmp16 = tmp15;		HX_STACK_VAR(tmp16,"tmp16");
							HX_STACK_LINE(1386)
							bool tmp17;		HX_STACK_VAR(tmp17,"tmp17");
							HX_STACK_LINE(1386)
							bool tmp18 = tmp16;		HX_STACK_VAR(tmp18,"tmp18");
							HX_STACK_LINE(1386)
							if ((tmp18)){
								HX_STACK_LINE(1386)
								tmp17 = ret->zpp_disp;
							}
							else{
								HX_STACK_LINE(1386)
								tmp17 = false;
							}
							HX_STACK_LINE(1386)
							bool tmp19 = tmp17;		HX_STACK_VAR(tmp19,"tmp19");
							HX_STACK_LINE(1386)
							if ((tmp19)){
								HX_STACK_LINE(1386)
								::String tmp20 = HX_HCSTRING("Error: Vec2","\xcc","\x3a","\xb6","\x74");		HX_STACK_VAR(tmp20,"tmp20");
								HX_STACK_LINE(1386)
								::String tmp21 = tmp20;		HX_STACK_VAR(tmp21,"tmp21");
								HX_STACK_LINE(1386)
								::String tmp22 = (tmp21 + HX_HCSTRING(" has been disposed and cannot be used!","\x2e","\x07","\xae","\x74"));		HX_STACK_VAR(tmp22,"tmp22");
								HX_STACK_LINE(1386)
								::String tmp23 = tmp22;		HX_STACK_VAR(tmp23,"tmp23");
								HX_STACK_LINE(1386)
								::String tmp24 = tmp23;		HX_STACK_VAR(tmp24,"tmp24");
								HX_STACK_LINE(1386)
								HX_STACK_DO_THROW(tmp24);
							}
						}
						HX_STACK_LINE(1386)
						{
							HX_STACK_LINE(1386)
							::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(1386)
							bool tmp15 = (_this->_validate != null());		HX_STACK_VAR(tmp15,"tmp15");
							HX_STACK_LINE(1386)
							bool tmp16 = tmp15;		HX_STACK_VAR(tmp16,"tmp16");
							HX_STACK_LINE(1386)
							bool tmp17 = tmp16;		HX_STACK_VAR(tmp17,"tmp17");
							HX_STACK_LINE(1386)
							if ((tmp17)){
								HX_STACK_LINE(1386)
								_this->_validate();
							}
						}
						HX_STACK_LINE(1386)
						Float tmp15 = ret->zpp_inner->y;		HX_STACK_VAR(tmp15,"tmp15");
						HX_STACK_LINE(1386)
						tmp14 = tmp15;
					}
					HX_STACK_LINE(1386)
					Float tmp15 = y;		HX_STACK_VAR(tmp15,"tmp15");
					HX_STACK_LINE(1386)
					tmp13 = (tmp14 == tmp15);
				}
				else{
					HX_STACK_LINE(1386)
					tmp13 = false;
				}
				HX_STACK_LINE(1386)
				bool tmp14 = !(tmp13);		HX_STACK_VAR(tmp14,"tmp14");
				HX_STACK_LINE(1386)
				if ((tmp14)){
					HX_STACK_LINE(1386)
					{
						HX_STACK_LINE(1386)
						ret->zpp_inner->x = x;
						HX_STACK_LINE(1386)
						ret->zpp_inner->y = y;
						HX_STACK_LINE(1386)
						{
						}
					}
					HX_STACK_LINE(1386)
					{
						HX_STACK_LINE(1386)
						::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
						HX_STACK_LINE(1386)
						bool tmp15 = (_this->_invalidate != null());		HX_STACK_VAR(tmp15,"tmp15");
						HX_STACK_LINE(1386)
						if ((tmp15)){
							HX_STACK_LINE(1386)
							::zpp_nape::geom::ZPP_Vec2 tmp16 = _this;		HX_STACK_VAR(tmp16,"tmp16");
							HX_STACK_LINE(1386)
							_this->_invalidate(tmp16);
						}
					}
				}
				HX_STACK_LINE(1386)
				ret;
			}
			HX_STACK_LINE(1386)
			ret->zpp_inner->weak = weak;
			HX_STACK_LINE(1386)
			tmp = ret;
		}
		HX_STACK_LINE(1386)
		this->wrap_gravity = tmp;
		HX_STACK_LINE(1387)
		::nape::geom::Vec2 tmp1 = this->wrap_gravity;		HX_STACK_VAR(tmp1,"tmp1");
		HX_STACK_LINE(1387)
		tmp1->zpp_inner->_inuse = true;
		HX_STACK_LINE(1388)
		Dynamic tmp2 = this->gravity_invalidate_dyn();		HX_STACK_VAR(tmp2,"tmp2");
		HX_STACK_LINE(1388)
		::nape::geom::Vec2 tmp3 = this->wrap_gravity;		HX_STACK_VAR(tmp3,"tmp3");
		HX_STACK_LINE(1388)
		tmp3->zpp_inner->_invalidate = tmp2;
		HX_STACK_LINE(1389)
		Dynamic tmp4 = this->gravity_validate_dyn();		HX_STACK_VAR(tmp4,"tmp4");
		HX_STACK_LINE(1389)
		::nape::geom::Vec2 tmp5 = this->wrap_gravity;		HX_STACK_VAR(tmp5,"tmp5");
		HX_STACK_LINE(1389)
		tmp5->zpp_inner->_validate = tmp4;
	}
return null();
}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Space_obj,getgravity,(void))

Void ZPP_Space_obj::gravity_invalidate( ::zpp_nape::geom::ZPP_Vec2 x){
{
		HX_STACK_FRAME("zpp_nape.space.ZPP_Space","gravity_invalidate",0xaddc5802,"zpp_nape.space.ZPP_Space.gravity_invalidate","zpp_nape/space/Space.hx",1391,0x2b65ed03)
		HX_STACK_THIS(this)
		HX_STACK_ARG(x,"x")
		HX_STACK_LINE(1393)
		bool tmp = this->midstep;		HX_STACK_VAR(tmp,"tmp");
		HX_STACK_LINE(1393)
		if ((tmp)){
			HX_STACK_LINE(1393)
			HX_STACK_DO_THROW(HX_HCSTRING("Error: Space::gravity cannot be set during space step","\x5d","\x50","\xcf","\x95"));
		}
		HX_STACK_LINE(1395)
		{
			HX_STACK_LINE(1396)
			this->gravityx = x->x;
			HX_STACK_LINE(1397)
			this->gravityy = x->y;
			HX_STACK_LINE(1406)
			{
			}
		}
		HX_STACK_LINE(1415)
		::zpp_nape::util::ZNPList_ZPP_Compound stack = ::zpp_nape::util::ZNPList_ZPP_Compound_obj::__new();		HX_STACK_VAR(stack,"stack");
		HX_STACK_LINE(1416)
		{
			HX_STACK_LINE(1417)
			::zpp_nape::util::ZNPList_ZPP_Body tmp1 = this->bodies;		HX_STACK_VAR(tmp1,"tmp1");
			HX_STACK_LINE(1417)
			::zpp_nape::util::ZNPNode_ZPP_Body cx_ite = tmp1->head;		HX_STACK_VAR(cx_ite,"cx_ite");
			HX_STACK_LINE(1418)
			while((true)){
				HX_STACK_LINE(1418)
				bool tmp2 = (cx_ite != null());		HX_STACK_VAR(tmp2,"tmp2");
				HX_STACK_LINE(1418)
				bool tmp3 = !(tmp2);		HX_STACK_VAR(tmp3,"tmp3");
				HX_STACK_LINE(1418)
				if ((tmp3)){
					HX_STACK_LINE(1418)
					break;
				}
				HX_STACK_LINE(1419)
				::zpp_nape::phys::ZPP_Body x1 = cx_ite->elt;		HX_STACK_VAR(x1,"x1");
				HX_STACK_LINE(1420)
				{
					HX_STACK_LINE(1421)
					::zpp_nape::phys::ZPP_Body o = x1;		HX_STACK_VAR(o,"o");
					HX_STACK_LINE(1430)
					bool tmp4 = o->world;		HX_STACK_VAR(tmp4,"tmp4");
					HX_STACK_LINE(1430)
					bool tmp5 = !(tmp4);		HX_STACK_VAR(tmp5,"tmp5");
					HX_STACK_LINE(1430)
					if ((tmp5)){
						HX_STACK_LINE(1439)
						int tmp6 = this->stamp;		HX_STACK_VAR(tmp6,"tmp6");
						HX_STACK_LINE(1439)
						bool tmp7 = this->midstep;		HX_STACK_VAR(tmp7,"tmp7");
						HX_STACK_LINE(1439)
						int tmp8;		HX_STACK_VAR(tmp8,"tmp8");
						HX_STACK_LINE(1439)
						if ((tmp7)){
							HX_STACK_LINE(1439)
							tmp8 = (int)0;
						}
						else{
							HX_STACK_LINE(1439)
							tmp8 = (int)1;
						}
						HX_STACK_LINE(1439)
						int tmp9 = (tmp6 + tmp8);		HX_STACK_VAR(tmp9,"tmp9");
						HX_STACK_LINE(1439)
						o->component->waket = tmp9;
						HX_STACK_LINE(1440)
						int tmp10 = o->type;		HX_STACK_VAR(tmp10,"tmp10");
						HX_STACK_LINE(1440)
						int tmp11 = ::zpp_nape::util::ZPP_Flags_obj::id_BodyType_KINEMATIC;		HX_STACK_VAR(tmp11,"tmp11");
						HX_STACK_LINE(1440)
						bool tmp12 = (tmp10 == tmp11);		HX_STACK_VAR(tmp12,"tmp12");
						HX_STACK_LINE(1440)
						if ((tmp12)){
							HX_STACK_LINE(1440)
							o->kinematicDelaySleep = true;
						}
						HX_STACK_LINE(1441)
						bool tmp13 = o->component->sleeping;		HX_STACK_VAR(tmp13,"tmp13");
						HX_STACK_LINE(1441)
						if ((tmp13)){
							HX_STACK_LINE(1442)
							::zpp_nape::phys::ZPP_Body tmp14 = o;		HX_STACK_VAR(tmp14,"tmp14");
							HX_STACK_LINE(1442)
							this->really_wake(tmp14,false);
						}
					}
				}
				HX_STACK_LINE(1446)
				cx_ite = cx_ite->next;
			}
		}
		HX_STACK_LINE(1449)
		{
			HX_STACK_LINE(1450)
			::zpp_nape::util::ZNPList_ZPP_Compound tmp1 = this->compounds;		HX_STACK_VAR(tmp1,"tmp1");
			HX_STACK_LINE(1450)
			::zpp_nape::util::ZNPNode_ZPP_Compound cx_ite = tmp1->head;		HX_STACK_VAR(cx_ite,"cx_ite");
			HX_STACK_LINE(1451)
			while((true)){
				HX_STACK_LINE(1451)
				bool tmp2 = (cx_ite != null());		HX_STACK_VAR(tmp2,"tmp2");
				HX_STACK_LINE(1451)
				bool tmp3 = !(tmp2);		HX_STACK_VAR(tmp3,"tmp3");
				HX_STACK_LINE(1451)
				if ((tmp3)){
					HX_STACK_LINE(1451)
					break;
				}
				HX_STACK_LINE(1452)
				::zpp_nape::phys::ZPP_Compound i = cx_ite->elt;		HX_STACK_VAR(i,"i");
				HX_STACK_LINE(1453)
				::zpp_nape::phys::ZPP_Compound tmp4 = i;		HX_STACK_VAR(tmp4,"tmp4");
				HX_STACK_LINE(1453)
				stack->add(tmp4);
				HX_STACK_LINE(1454)
				cx_ite = cx_ite->next;
			}
		}
		HX_STACK_LINE(1457)
		while((true)){
			HX_STACK_LINE(1457)
			bool tmp1 = (stack->head == null());		HX_STACK_VAR(tmp1,"tmp1");
			HX_STACK_LINE(1457)
			bool tmp2 = !(tmp1);		HX_STACK_VAR(tmp2,"tmp2");
			HX_STACK_LINE(1457)
			bool tmp3 = !(tmp2);		HX_STACK_VAR(tmp3,"tmp3");
			HX_STACK_LINE(1457)
			if ((tmp3)){
				HX_STACK_LINE(1457)
				break;
			}
			HX_STACK_LINE(1458)
			::zpp_nape::phys::ZPP_Compound tmp4 = stack->pop_unsafe();		HX_STACK_VAR(tmp4,"tmp4");
			HX_STACK_LINE(1458)
			::zpp_nape::phys::ZPP_Compound s = tmp4;		HX_STACK_VAR(s,"s");
			HX_STACK_LINE(1459)
			{
				HX_STACK_LINE(1460)
				::zpp_nape::util::ZNPNode_ZPP_Body tmp5 = s->bodies->head;		HX_STACK_VAR(tmp5,"tmp5");
				HX_STACK_LINE(1460)
				::zpp_nape::util::ZNPNode_ZPP_Body cx_ite = tmp5;		HX_STACK_VAR(cx_ite,"cx_ite");
				HX_STACK_LINE(1461)
				while((true)){
					HX_STACK_LINE(1461)
					bool tmp6 = (cx_ite != null());		HX_STACK_VAR(tmp6,"tmp6");
					HX_STACK_LINE(1461)
					bool tmp7 = !(tmp6);		HX_STACK_VAR(tmp7,"tmp7");
					HX_STACK_LINE(1461)
					if ((tmp7)){
						HX_STACK_LINE(1461)
						break;
					}
					HX_STACK_LINE(1462)
					::zpp_nape::phys::ZPP_Body x1 = cx_ite->elt;		HX_STACK_VAR(x1,"x1");
					HX_STACK_LINE(1463)
					{
						HX_STACK_LINE(1464)
						::zpp_nape::phys::ZPP_Body o = x1;		HX_STACK_VAR(o,"o");
						HX_STACK_LINE(1473)
						bool tmp8 = o->world;		HX_STACK_VAR(tmp8,"tmp8");
						HX_STACK_LINE(1473)
						bool tmp9 = !(tmp8);		HX_STACK_VAR(tmp9,"tmp9");
						HX_STACK_LINE(1473)
						if ((tmp9)){
							HX_STACK_LINE(1482)
							int tmp10 = this->stamp;		HX_STACK_VAR(tmp10,"tmp10");
							HX_STACK_LINE(1482)
							bool tmp11 = this->midstep;		HX_STACK_VAR(tmp11,"tmp11");
							HX_STACK_LINE(1482)
							int tmp12;		HX_STACK_VAR(tmp12,"tmp12");
							HX_STACK_LINE(1482)
							if ((tmp11)){
								HX_STACK_LINE(1482)
								tmp12 = (int)0;
							}
							else{
								HX_STACK_LINE(1482)
								tmp12 = (int)1;
							}
							HX_STACK_LINE(1482)
							int tmp13 = (tmp10 + tmp12);		HX_STACK_VAR(tmp13,"tmp13");
							HX_STACK_LINE(1482)
							o->component->waket = tmp13;
							HX_STACK_LINE(1483)
							int tmp14 = o->type;		HX_STACK_VAR(tmp14,"tmp14");
							HX_STACK_LINE(1483)
							int tmp15 = ::zpp_nape::util::ZPP_Flags_obj::id_BodyType_KINEMATIC;		HX_STACK_VAR(tmp15,"tmp15");
							HX_STACK_LINE(1483)
							bool tmp16 = (tmp14 == tmp15);		HX_STACK_VAR(tmp16,"tmp16");
							HX_STACK_LINE(1483)
							if ((tmp16)){
								HX_STACK_LINE(1483)
								o->kinematicDelaySleep = true;
							}
							HX_STACK_LINE(1484)
							bool tmp17 = o->component->sleeping;		HX_STACK_VAR(tmp17,"tmp17");
							HX_STACK_LINE(1484)
							if ((tmp17)){
								HX_STACK_LINE(1485)
								::zpp_nape::phys::ZPP_Body tmp18 = o;		HX_STACK_VAR(tmp18,"tmp18");
								HX_STACK_LINE(1485)
								this->really_wake(tmp18,false);
							}
						}
					}
					HX_STACK_LINE(1489)
					cx_ite = cx_ite->next;
				}
			}
			HX_STACK_LINE(1492)
			{
				HX_STACK_LINE(1493)
				::zpp_nape::util::ZNPNode_ZPP_Compound tmp5 = s->compounds->head;		HX_STACK_VAR(tmp5,"tmp5");
				HX_STACK_LINE(1493)
				::zpp_nape::util::ZNPNode_ZPP_Compound cx_ite = tmp5;		HX_STACK_VAR(cx_ite,"cx_ite");
				HX_STACK_LINE(1494)
				while((true)){
					HX_STACK_LINE(1494)
					bool tmp6 = (cx_ite != null());		HX_STACK_VAR(tmp6,"tmp6");
					HX_STACK_LINE(1494)
					bool tmp7 = !(tmp6);		HX_STACK_VAR(tmp7,"tmp7");
					HX_STACK_LINE(1494)
					if ((tmp7)){
						HX_STACK_LINE(1494)
						break;
					}
					HX_STACK_LINE(1495)
					::zpp_nape::phys::ZPP_Compound i = cx_ite->elt;		HX_STACK_VAR(i,"i");
					HX_STACK_LINE(1496)
					::zpp_nape::phys::ZPP_Compound tmp8 = i;		HX_STACK_VAR(tmp8,"tmp8");
					HX_STACK_LINE(1496)
					stack->add(tmp8);
					HX_STACK_LINE(1497)
					cx_ite = cx_ite->next;
				}
			}
		}
	}
return null();
}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Space_obj,gravity_invalidate,(void))

Void ZPP_Space_obj::gravity_validate( ){
{
		HX_STACK_FRAME("zpp_nape.space.ZPP_Space","gravity_validate",0xf1138f5d,"zpp_nape.space.ZPP_Space.gravity_validate","zpp_nape/space/Space.hx",1503,0x2b65ed03)
		HX_STACK_THIS(this)
		HX_STACK_LINE(1504)
		Float tmp = this->gravityx;		HX_STACK_VAR(tmp,"tmp");
		HX_STACK_LINE(1504)
		::nape::geom::Vec2 tmp1 = this->wrap_gravity;		HX_STACK_VAR(tmp1,"tmp1");
		HX_STACK_LINE(1504)
		tmp1->zpp_inner->x = tmp;
		HX_STACK_LINE(1505)
		Float tmp2 = this->gravityy;		HX_STACK_VAR(tmp2,"tmp2");
		HX_STACK_LINE(1505)
		::nape::geom::Vec2 tmp3 = this->wrap_gravity;		HX_STACK_VAR(tmp3,"tmp3");
		HX_STACK_LINE(1505)
		tmp3->zpp_inner->y = tmp2;
		HX_STACK_LINE(1514)
		{
		}
	}
return null();
}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Space_obj,gravity_validate,(void))

Void ZPP_Space_obj::clear( ){
{
		HX_STACK_FRAME("zpp_nape.space.ZPP_Space","clear",0xc5fb8257,"zpp_nape.space.ZPP_Space.clear","zpp_nape/space/Space.hx",1556,0x2b65ed03)
		HX_STACK_THIS(this)
		HX_STACK_LINE(1558)
		while((true)){
			HX_STACK_LINE(1558)
			::zpp_nape::util::ZNPList_ZPP_Listener tmp = this->listeners;		HX_STACK_VAR(tmp,"tmp");
			HX_STACK_LINE(1558)
			::zpp_nape::util::ZNPNode_ZPP_Listener tmp1 = tmp->head;		HX_STACK_VAR(tmp1,"tmp1");
			HX_STACK_LINE(1558)
			bool tmp2 = (tmp1 == null());		HX_STACK_VAR(tmp2,"tmp2");
			HX_STACK_LINE(1558)
			bool tmp3 = !(tmp2);		HX_STACK_VAR(tmp3,"tmp3");
			HX_STACK_LINE(1558)
			bool tmp4 = !(tmp3);		HX_STACK_VAR(tmp4,"tmp4");
			HX_STACK_LINE(1558)
			if ((tmp4)){
				HX_STACK_LINE(1558)
				break;
			}
			HX_STACK_LINE(1559)
			::zpp_nape::util::ZNPList_ZPP_Listener tmp5 = this->listeners;		HX_STACK_VAR(tmp5,"tmp5");
			HX_STACK_LINE(1559)
			::zpp_nape::callbacks::ZPP_Listener tmp6 = tmp5->pop_unsafe();		HX_STACK_VAR(tmp6,"tmp6");
			HX_STACK_LINE(1559)
			::zpp_nape::callbacks::ZPP_Listener c = tmp6;		HX_STACK_VAR(c,"c");
			HX_STACK_LINE(1560)
			::zpp_nape::callbacks::ZPP_Listener tmp7 = c;		HX_STACK_VAR(tmp7,"tmp7");
			HX_STACK_LINE(1560)
			this->remListener(tmp7);
		}
		HX_STACK_LINE(1564)
		while((true)){
			HX_STACK_LINE(1564)
			::zpp_nape::space::ZPP_CallbackSet tmp = this->callbackset_list;		HX_STACK_VAR(tmp,"tmp");
			HX_STACK_LINE(1564)
			::zpp_nape::space::ZPP_CallbackSet tmp1 = tmp->next;		HX_STACK_VAR(tmp1,"tmp1");
			HX_STACK_LINE(1564)
			bool tmp2 = (tmp1 == null());		HX_STACK_VAR(tmp2,"tmp2");
			HX_STACK_LINE(1564)
			bool tmp3 = !(tmp2);		HX_STACK_VAR(tmp3,"tmp3");
			HX_STACK_LINE(1564)
			bool tmp4 = !(tmp3);		HX_STACK_VAR(tmp4,"tmp4");
			HX_STACK_LINE(1564)
			if ((tmp4)){
				HX_STACK_LINE(1564)
				break;
			}
			HX_STACK_LINE(1565)
			::zpp_nape::space::ZPP_CallbackSet tmp5 = this->callbackset_list;		HX_STACK_VAR(tmp5,"tmp5");
			HX_STACK_LINE(1565)
			::zpp_nape::space::ZPP_CallbackSet tmp6 = tmp5->pop_unsafe();		HX_STACK_VAR(tmp6,"tmp6");
			HX_STACK_LINE(1565)
			::zpp_nape::space::ZPP_CallbackSet c = tmp6;		HX_STACK_VAR(c,"c");
			HX_STACK_LINE(1566)
			{
				HX_STACK_LINE(1567)
				c->arbiters->clear();
				HX_STACK_LINE(1568)
				{
					HX_STACK_LINE(1569)
					::zpp_nape::space::ZPP_CallbackSet o = c;		HX_STACK_VAR(o,"o");
					HX_STACK_LINE(1578)
					{
						HX_STACK_LINE(1578)
						::zpp_nape::phys::ZPP_Interactor tmp7 = o->int2 = null();		HX_STACK_VAR(tmp7,"tmp7");
						HX_STACK_LINE(1578)
						o->int1 = tmp7;
						HX_STACK_LINE(1578)
						int tmp8 = o->di = (int)-1;		HX_STACK_VAR(tmp8,"tmp8");
						HX_STACK_LINE(1578)
						o->id = tmp8;
						HX_STACK_LINE(1578)
						o->freed = true;
						HX_STACK_LINE(1578)
						Dynamic();
					}
					HX_STACK_LINE(1579)
					::zpp_nape::space::ZPP_CallbackSet tmp7 = ::zpp_nape::space::ZPP_CallbackSet_obj::zpp_pool;		HX_STACK_VAR(tmp7,"tmp7");
					HX_STACK_LINE(1579)
					o->next = tmp7;
					HX_STACK_LINE(1580)
					::zpp_nape::space::ZPP_CallbackSet_obj::zpp_pool = o;
				}
			}
		}
		HX_STACK_LINE(1589)
		while((true)){
			HX_STACK_LINE(1589)
			::zpp_nape::util::ZNPList_ZPP_ColArbiter tmp = this->c_arbiters_true;		HX_STACK_VAR(tmp,"tmp");
			HX_STACK_LINE(1589)
			::zpp_nape::util::ZNPNode_ZPP_ColArbiter tmp1 = tmp->head;		HX_STACK_VAR(tmp1,"tmp1");
			HX_STACK_LINE(1589)
			bool tmp2 = (tmp1 == null());		HX_STACK_VAR(tmp2,"tmp2");
			HX_STACK_LINE(1589)
			bool tmp3 = !(tmp2);		HX_STACK_VAR(tmp3,"tmp3");
			HX_STACK_LINE(1589)
			bool tmp4 = !(tmp3);		HX_STACK_VAR(tmp4,"tmp4");
			HX_STACK_LINE(1589)
			if ((tmp4)){
				HX_STACK_LINE(1589)
				break;
			}
			HX_STACK_LINE(1590)
			::zpp_nape::util::ZNPList_ZPP_ColArbiter tmp5 = this->c_arbiters_true;		HX_STACK_VAR(tmp5,"tmp5");
			HX_STACK_LINE(1590)
			::zpp_nape::dynamics::ZPP_ColArbiter tmp6 = tmp5->pop_unsafe();		HX_STACK_VAR(tmp6,"tmp6");
			HX_STACK_LINE(1590)
			::zpp_nape::dynamics::ZPP_ColArbiter arb = tmp6;		HX_STACK_VAR(arb,"arb");
			HX_STACK_LINE(1591)
			{
				HX_STACK_LINE(1591)
				{
					HX_STACK_LINE(1591)
					bool tmp7 = arb->cleared;		HX_STACK_VAR(tmp7,"tmp7");
					HX_STACK_LINE(1591)
					bool tmp8 = !(tmp7);		HX_STACK_VAR(tmp8,"tmp8");
					HX_STACK_LINE(1591)
					if ((tmp8)){
						HX_STACK_LINE(1591)
						{
							HX_STACK_LINE(1591)
							::zpp_nape::util::ZNPList_ZPP_Arbiter tmp9 = arb->b1->arbiters;		HX_STACK_VAR(tmp9,"tmp9");
							HX_STACK_LINE(1591)
							::zpp_nape::util::ZNPList_ZPP_Arbiter _this = tmp9;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(1591)
							{
								HX_STACK_LINE(1591)
								::zpp_nape::util::ZNPNode_ZPP_Arbiter pre = null();		HX_STACK_VAR(pre,"pre");
								HX_STACK_LINE(1591)
								::zpp_nape::util::ZNPNode_ZPP_Arbiter cur = _this->head;		HX_STACK_VAR(cur,"cur");
								HX_STACK_LINE(1591)
								bool ret = false;		HX_STACK_VAR(ret,"ret");
								HX_STACK_LINE(1591)
								while((true)){
									HX_STACK_LINE(1591)
									bool tmp10 = (cur != null());		HX_STACK_VAR(tmp10,"tmp10");
									HX_STACK_LINE(1591)
									bool tmp11 = !(tmp10);		HX_STACK_VAR(tmp11,"tmp11");
									HX_STACK_LINE(1591)
									if ((tmp11)){
										HX_STACK_LINE(1591)
										break;
									}
									HX_STACK_LINE(1591)
									bool tmp12 = (cur->elt == arb);		HX_STACK_VAR(tmp12,"tmp12");
									HX_STACK_LINE(1591)
									if ((tmp12)){
										HX_STACK_LINE(1591)
										{
											HX_STACK_LINE(1591)
											::zpp_nape::util::ZNPNode_ZPP_Arbiter old;		HX_STACK_VAR(old,"old");
											HX_STACK_LINE(1591)
											::zpp_nape::util::ZNPNode_ZPP_Arbiter ret1;		HX_STACK_VAR(ret1,"ret1");
											HX_STACK_LINE(1591)
											bool tmp13 = (pre == null());		HX_STACK_VAR(tmp13,"tmp13");
											HX_STACK_LINE(1591)
											if ((tmp13)){
												HX_STACK_LINE(1591)
												old = _this->head;
												HX_STACK_LINE(1591)
												ret1 = old->next;
												HX_STACK_LINE(1591)
												_this->head = ret1;
												HX_STACK_LINE(1591)
												bool tmp14 = (_this->head == null());		HX_STACK_VAR(tmp14,"tmp14");
												HX_STACK_LINE(1591)
												if ((tmp14)){
													HX_STACK_LINE(1591)
													_this->pushmod = true;
												}
											}
											else{
												HX_STACK_LINE(1591)
												old = pre->next;
												HX_STACK_LINE(1591)
												ret1 = old->next;
												HX_STACK_LINE(1591)
												pre->next = ret1;
												HX_STACK_LINE(1591)
												bool tmp14 = (ret1 == null());		HX_STACK_VAR(tmp14,"tmp14");
												HX_STACK_LINE(1591)
												if ((tmp14)){
													HX_STACK_LINE(1591)
													_this->pushmod = true;
												}
											}
											HX_STACK_LINE(1591)
											{
												HX_STACK_LINE(1591)
												::zpp_nape::util::ZNPNode_ZPP_Arbiter o = old;		HX_STACK_VAR(o,"o");
												HX_STACK_LINE(1591)
												o->elt = null();
												HX_STACK_LINE(1591)
												::zpp_nape::util::ZNPNode_ZPP_Arbiter tmp14 = ::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool;		HX_STACK_VAR(tmp14,"tmp14");
												HX_STACK_LINE(1591)
												o->next = tmp14;
												HX_STACK_LINE(1591)
												::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool = o;
											}
											HX_STACK_LINE(1591)
											_this->modified = true;
											HX_STACK_LINE(1591)
											(_this->length)--;
											HX_STACK_LINE(1591)
											_this->pushmod = true;
											HX_STACK_LINE(1591)
											ret1;
										}
										HX_STACK_LINE(1591)
										ret = true;
										HX_STACK_LINE(1591)
										break;
									}
									HX_STACK_LINE(1591)
									pre = cur;
									HX_STACK_LINE(1591)
									cur = cur->next;
								}
								HX_STACK_LINE(1591)
								ret;
							}
						}
						HX_STACK_LINE(1591)
						{
							HX_STACK_LINE(1591)
							::zpp_nape::util::ZNPList_ZPP_Arbiter tmp9 = arb->b2->arbiters;		HX_STACK_VAR(tmp9,"tmp9");
							HX_STACK_LINE(1591)
							::zpp_nape::util::ZNPList_ZPP_Arbiter _this = tmp9;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(1591)
							{
								HX_STACK_LINE(1591)
								::zpp_nape::util::ZNPNode_ZPP_Arbiter pre = null();		HX_STACK_VAR(pre,"pre");
								HX_STACK_LINE(1591)
								::zpp_nape::util::ZNPNode_ZPP_Arbiter cur = _this->head;		HX_STACK_VAR(cur,"cur");
								HX_STACK_LINE(1591)
								bool ret = false;		HX_STACK_VAR(ret,"ret");
								HX_STACK_LINE(1591)
								while((true)){
									HX_STACK_LINE(1591)
									bool tmp10 = (cur != null());		HX_STACK_VAR(tmp10,"tmp10");
									HX_STACK_LINE(1591)
									bool tmp11 = !(tmp10);		HX_STACK_VAR(tmp11,"tmp11");
									HX_STACK_LINE(1591)
									if ((tmp11)){
										HX_STACK_LINE(1591)
										break;
									}
									HX_STACK_LINE(1591)
									bool tmp12 = (cur->elt == arb);		HX_STACK_VAR(tmp12,"tmp12");
									HX_STACK_LINE(1591)
									if ((tmp12)){
										HX_STACK_LINE(1591)
										{
											HX_STACK_LINE(1591)
											::zpp_nape::util::ZNPNode_ZPP_Arbiter old;		HX_STACK_VAR(old,"old");
											HX_STACK_LINE(1591)
											::zpp_nape::util::ZNPNode_ZPP_Arbiter ret1;		HX_STACK_VAR(ret1,"ret1");
											HX_STACK_LINE(1591)
											bool tmp13 = (pre == null());		HX_STACK_VAR(tmp13,"tmp13");
											HX_STACK_LINE(1591)
											if ((tmp13)){
												HX_STACK_LINE(1591)
												old = _this->head;
												HX_STACK_LINE(1591)
												ret1 = old->next;
												HX_STACK_LINE(1591)
												_this->head = ret1;
												HX_STACK_LINE(1591)
												bool tmp14 = (_this->head == null());		HX_STACK_VAR(tmp14,"tmp14");
												HX_STACK_LINE(1591)
												if ((tmp14)){
													HX_STACK_LINE(1591)
													_this->pushmod = true;
												}
											}
											else{
												HX_STACK_LINE(1591)
												old = pre->next;
												HX_STACK_LINE(1591)
												ret1 = old->next;
												HX_STACK_LINE(1591)
												pre->next = ret1;
												HX_STACK_LINE(1591)
												bool tmp14 = (ret1 == null());		HX_STACK_VAR(tmp14,"tmp14");
												HX_STACK_LINE(1591)
												if ((tmp14)){
													HX_STACK_LINE(1591)
													_this->pushmod = true;
												}
											}
											HX_STACK_LINE(1591)
											{
												HX_STACK_LINE(1591)
												::zpp_nape::util::ZNPNode_ZPP_Arbiter o = old;		HX_STACK_VAR(o,"o");
												HX_STACK_LINE(1591)
												o->elt = null();
												HX_STACK_LINE(1591)
												::zpp_nape::util::ZNPNode_ZPP_Arbiter tmp14 = ::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool;		HX_STACK_VAR(tmp14,"tmp14");
												HX_STACK_LINE(1591)
												o->next = tmp14;
												HX_STACK_LINE(1591)
												::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool = o;
											}
											HX_STACK_LINE(1591)
											_this->modified = true;
											HX_STACK_LINE(1591)
											(_this->length)--;
											HX_STACK_LINE(1591)
											_this->pushmod = true;
											HX_STACK_LINE(1591)
											ret1;
										}
										HX_STACK_LINE(1591)
										ret = true;
										HX_STACK_LINE(1591)
										break;
									}
									HX_STACK_LINE(1591)
									pre = cur;
									HX_STACK_LINE(1591)
									cur = cur->next;
								}
								HX_STACK_LINE(1591)
								ret;
							}
						}
						HX_STACK_LINE(1591)
						bool tmp9 = (arb->pair != null());		HX_STACK_VAR(tmp9,"tmp9");
						HX_STACK_LINE(1591)
						if ((tmp9)){
							HX_STACK_LINE(1591)
							arb->pair->arb = null();
							HX_STACK_LINE(1591)
							arb->pair = null();
						}
					}
					HX_STACK_LINE(1591)
					::zpp_nape::phys::ZPP_Body tmp9 = arb->b2 = null();		HX_STACK_VAR(tmp9,"tmp9");
					HX_STACK_LINE(1591)
					arb->b1 = tmp9;
					HX_STACK_LINE(1591)
					arb->active = false;
					HX_STACK_LINE(1591)
					arb->intchange = false;
				}
				HX_STACK_LINE(1591)
				while((true)){
					HX_STACK_LINE(1591)
					::zpp_nape::dynamics::ZPP_Contact tmp7 = arb->contacts->next;		HX_STACK_VAR(tmp7,"tmp7");
					HX_STACK_LINE(1591)
					bool tmp8 = (tmp7 == null());		HX_STACK_VAR(tmp8,"tmp8");
					HX_STACK_LINE(1591)
					bool tmp9 = !(tmp8);		HX_STACK_VAR(tmp9,"tmp9");
					HX_STACK_LINE(1591)
					bool tmp10 = !(tmp9);		HX_STACK_VAR(tmp10,"tmp10");
					HX_STACK_LINE(1591)
					if ((tmp10)){
						HX_STACK_LINE(1591)
						break;
					}
					HX_STACK_LINE(1591)
					{
						HX_STACK_LINE(1591)
						::zpp_nape::dynamics::ZPP_Contact tmp11;		HX_STACK_VAR(tmp11,"tmp11");
						HX_STACK_LINE(1591)
						{
							HX_STACK_LINE(1591)
							::zpp_nape::dynamics::ZPP_Contact _this = arb->contacts;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(1591)
							::zpp_nape::dynamics::ZPP_Contact ret = _this->next;		HX_STACK_VAR(ret,"ret");
							HX_STACK_LINE(1591)
							_this->pop();
							HX_STACK_LINE(1591)
							tmp11 = ret;
						}
						HX_STACK_LINE(1591)
						::zpp_nape::dynamics::ZPP_Contact o = tmp11;		HX_STACK_VAR(o,"o");
						HX_STACK_LINE(1591)
						o->arbiter = null();
						HX_STACK_LINE(1591)
						::zpp_nape::dynamics::ZPP_Contact tmp12 = ::zpp_nape::dynamics::ZPP_Contact_obj::zpp_pool;		HX_STACK_VAR(tmp12,"tmp12");
						HX_STACK_LINE(1591)
						o->next = tmp12;
						HX_STACK_LINE(1591)
						::zpp_nape::dynamics::ZPP_Contact_obj::zpp_pool = o;
					}
					HX_STACK_LINE(1591)
					{
						HX_STACK_LINE(1591)
						::zpp_nape::dynamics::ZPP_IContact _this = arb->innards;		HX_STACK_VAR(_this,"_this");
						HX_STACK_LINE(1591)
						::zpp_nape::dynamics::ZPP_IContact ret = _this->next;		HX_STACK_VAR(ret,"ret");
						HX_STACK_LINE(1591)
						_this->next = ret->next;
						HX_STACK_LINE(1591)
						ret->_inuse = false;
						HX_STACK_LINE(1591)
						bool tmp11 = (_this->next == null());		HX_STACK_VAR(tmp11,"tmp11");
						HX_STACK_LINE(1591)
						if ((tmp11)){
							HX_STACK_LINE(1591)
							_this->pushmod = true;
						}
						HX_STACK_LINE(1591)
						_this->modified = true;
						HX_STACK_LINE(1591)
						(_this->length)--;
					}
				}
				HX_STACK_LINE(1591)
				{
					HX_STACK_LINE(1591)
					::zpp_nape::dynamics::ZPP_ColArbiter o = arb;		HX_STACK_VAR(o,"o");
					HX_STACK_LINE(1591)
					{
						HX_STACK_LINE(1591)
						o->userdef_dyn_fric = false;
						HX_STACK_LINE(1591)
						o->userdef_stat_fric = false;
						HX_STACK_LINE(1591)
						o->userdef_restitution = false;
						HX_STACK_LINE(1591)
						o->userdef_rfric = false;
						HX_STACK_LINE(1591)
						::zpp_nape::shape::ZPP_Edge tmp7 = o->__ref_edge2 = null();		HX_STACK_VAR(tmp7,"tmp7");
						HX_STACK_LINE(1591)
						o->__ref_edge1 = tmp7;
					}
					HX_STACK_LINE(1591)
					::zpp_nape::dynamics::ZPP_ColArbiter tmp7 = ::zpp_nape::dynamics::ZPP_ColArbiter_obj::zpp_pool;		HX_STACK_VAR(tmp7,"tmp7");
					HX_STACK_LINE(1591)
					o->next = tmp7;
					HX_STACK_LINE(1591)
					::zpp_nape::dynamics::ZPP_ColArbiter_obj::zpp_pool = o;
				}
				HX_STACK_LINE(1591)
				arb->pre_dt = ((Float)-1.0);
			}
		}
		HX_STACK_LINE(1595)
		while((true)){
			HX_STACK_LINE(1595)
			::zpp_nape::util::ZNPList_ZPP_ColArbiter tmp = this->c_arbiters_false;		HX_STACK_VAR(tmp,"tmp");
			HX_STACK_LINE(1595)
			::zpp_nape::util::ZNPNode_ZPP_ColArbiter tmp1 = tmp->head;		HX_STACK_VAR(tmp1,"tmp1");
			HX_STACK_LINE(1595)
			bool tmp2 = (tmp1 == null());		HX_STACK_VAR(tmp2,"tmp2");
			HX_STACK_LINE(1595)
			bool tmp3 = !(tmp2);		HX_STACK_VAR(tmp3,"tmp3");
			HX_STACK_LINE(1595)
			bool tmp4 = !(tmp3);		HX_STACK_VAR(tmp4,"tmp4");
			HX_STACK_LINE(1595)
			if ((tmp4)){
				HX_STACK_LINE(1595)
				break;
			}
			HX_STACK_LINE(1596)
			::zpp_nape::util::ZNPList_ZPP_ColArbiter tmp5 = this->c_arbiters_false;		HX_STACK_VAR(tmp5,"tmp5");
			HX_STACK_LINE(1596)
			::zpp_nape::dynamics::ZPP_ColArbiter tmp6 = tmp5->pop_unsafe();		HX_STACK_VAR(tmp6,"tmp6");
			HX_STACK_LINE(1596)
			::zpp_nape::dynamics::ZPP_ColArbiter arb = tmp6;		HX_STACK_VAR(arb,"arb");
			HX_STACK_LINE(1597)
			{
				HX_STACK_LINE(1597)
				{
					HX_STACK_LINE(1597)
					bool tmp7 = arb->cleared;		HX_STACK_VAR(tmp7,"tmp7");
					HX_STACK_LINE(1597)
					bool tmp8 = !(tmp7);		HX_STACK_VAR(tmp8,"tmp8");
					HX_STACK_LINE(1597)
					if ((tmp8)){
						HX_STACK_LINE(1597)
						{
							HX_STACK_LINE(1597)
							::zpp_nape::util::ZNPList_ZPP_Arbiter tmp9 = arb->b1->arbiters;		HX_STACK_VAR(tmp9,"tmp9");
							HX_STACK_LINE(1597)
							::zpp_nape::util::ZNPList_ZPP_Arbiter _this = tmp9;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(1597)
							{
								HX_STACK_LINE(1597)
								::zpp_nape::util::ZNPNode_ZPP_Arbiter pre = null();		HX_STACK_VAR(pre,"pre");
								HX_STACK_LINE(1597)
								::zpp_nape::util::ZNPNode_ZPP_Arbiter cur = _this->head;		HX_STACK_VAR(cur,"cur");
								HX_STACK_LINE(1597)
								bool ret = false;		HX_STACK_VAR(ret,"ret");
								HX_STACK_LINE(1597)
								while((true)){
									HX_STACK_LINE(1597)
									bool tmp10 = (cur != null());		HX_STACK_VAR(tmp10,"tmp10");
									HX_STACK_LINE(1597)
									bool tmp11 = !(tmp10);		HX_STACK_VAR(tmp11,"tmp11");
									HX_STACK_LINE(1597)
									if ((tmp11)){
										HX_STACK_LINE(1597)
										break;
									}
									HX_STACK_LINE(1597)
									bool tmp12 = (cur->elt == arb);		HX_STACK_VAR(tmp12,"tmp12");
									HX_STACK_LINE(1597)
									if ((tmp12)){
										HX_STACK_LINE(1597)
										{
											HX_STACK_LINE(1597)
											::zpp_nape::util::ZNPNode_ZPP_Arbiter old;		HX_STACK_VAR(old,"old");
											HX_STACK_LINE(1597)
											::zpp_nape::util::ZNPNode_ZPP_Arbiter ret1;		HX_STACK_VAR(ret1,"ret1");
											HX_STACK_LINE(1597)
											bool tmp13 = (pre == null());		HX_STACK_VAR(tmp13,"tmp13");
											HX_STACK_LINE(1597)
											if ((tmp13)){
												HX_STACK_LINE(1597)
												old = _this->head;
												HX_STACK_LINE(1597)
												ret1 = old->next;
												HX_STACK_LINE(1597)
												_this->head = ret1;
												HX_STACK_LINE(1597)
												bool tmp14 = (_this->head == null());		HX_STACK_VAR(tmp14,"tmp14");
												HX_STACK_LINE(1597)
												if ((tmp14)){
													HX_STACK_LINE(1597)
													_this->pushmod = true;
												}
											}
											else{
												HX_STACK_LINE(1597)
												old = pre->next;
												HX_STACK_LINE(1597)
												ret1 = old->next;
												HX_STACK_LINE(1597)
												pre->next = ret1;
												HX_STACK_LINE(1597)
												bool tmp14 = (ret1 == null());		HX_STACK_VAR(tmp14,"tmp14");
												HX_STACK_LINE(1597)
												if ((tmp14)){
													HX_STACK_LINE(1597)
													_this->pushmod = true;
												}
											}
											HX_STACK_LINE(1597)
											{
												HX_STACK_LINE(1597)
												::zpp_nape::util::ZNPNode_ZPP_Arbiter o = old;		HX_STACK_VAR(o,"o");
												HX_STACK_LINE(1597)
												o->elt = null();
												HX_STACK_LINE(1597)
												::zpp_nape::util::ZNPNode_ZPP_Arbiter tmp14 = ::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool;		HX_STACK_VAR(tmp14,"tmp14");
												HX_STACK_LINE(1597)
												o->next = tmp14;
												HX_STACK_LINE(1597)
												::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool = o;
											}
											HX_STACK_LINE(1597)
											_this->modified = true;
											HX_STACK_LINE(1597)
											(_this->length)--;
											HX_STACK_LINE(1597)
											_this->pushmod = true;
											HX_STACK_LINE(1597)
											ret1;
										}
										HX_STACK_LINE(1597)
										ret = true;
										HX_STACK_LINE(1597)
										break;
									}
									HX_STACK_LINE(1597)
									pre = cur;
									HX_STACK_LINE(1597)
									cur = cur->next;
								}
								HX_STACK_LINE(1597)
								ret;
							}
						}
						HX_STACK_LINE(1597)
						{
							HX_STACK_LINE(1597)
							::zpp_nape::util::ZNPList_ZPP_Arbiter tmp9 = arb->b2->arbiters;		HX_STACK_VAR(tmp9,"tmp9");
							HX_STACK_LINE(1597)
							::zpp_nape::util::ZNPList_ZPP_Arbiter _this = tmp9;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(1597)
							{
								HX_STACK_LINE(1597)
								::zpp_nape::util::ZNPNode_ZPP_Arbiter pre = null();		HX_STACK_VAR(pre,"pre");
								HX_STACK_LINE(1597)
								::zpp_nape::util::ZNPNode_ZPP_Arbiter cur = _this->head;		HX_STACK_VAR(cur,"cur");
								HX_STACK_LINE(1597)
								bool ret = false;		HX_STACK_VAR(ret,"ret");
								HX_STACK_LINE(1597)
								while((true)){
									HX_STACK_LINE(1597)
									bool tmp10 = (cur != null());		HX_STACK_VAR(tmp10,"tmp10");
									HX_STACK_LINE(1597)
									bool tmp11 = !(tmp10);		HX_STACK_VAR(tmp11,"tmp11");
									HX_STACK_LINE(1597)
									if ((tmp11)){
										HX_STACK_LINE(1597)
										break;
									}
									HX_STACK_LINE(1597)
									bool tmp12 = (cur->elt == arb);		HX_STACK_VAR(tmp12,"tmp12");
									HX_STACK_LINE(1597)
									if ((tmp12)){
										HX_STACK_LINE(1597)
										{
											HX_STACK_LINE(1597)
											::zpp_nape::util::ZNPNode_ZPP_Arbiter old;		HX_STACK_VAR(old,"old");
											HX_STACK_LINE(1597)
											::zpp_nape::util::ZNPNode_ZPP_Arbiter ret1;		HX_STACK_VAR(ret1,"ret1");
											HX_STACK_LINE(1597)
											bool tmp13 = (pre == null());		HX_STACK_VAR(tmp13,"tmp13");
											HX_STACK_LINE(1597)
											if ((tmp13)){
												HX_STACK_LINE(1597)
												old = _this->head;
												HX_STACK_LINE(1597)
												ret1 = old->next;
												HX_STACK_LINE(1597)
												_this->head = ret1;
												HX_STACK_LINE(1597)
												bool tmp14 = (_this->head == null());		HX_STACK_VAR(tmp14,"tmp14");
												HX_STACK_LINE(1597)
												if ((tmp14)){
													HX_STACK_LINE(1597)
													_this->pushmod = true;
												}
											}
											else{
												HX_STACK_LINE(1597)
												old = pre->next;
												HX_STACK_LINE(1597)
												ret1 = old->next;
												HX_STACK_LINE(1597)
												pre->next = ret1;
												HX_STACK_LINE(1597)
												bool tmp14 = (ret1 == null());		HX_STACK_VAR(tmp14,"tmp14");
												HX_STACK_LINE(1597)
												if ((tmp14)){
													HX_STACK_LINE(1597)
													_this->pushmod = true;
												}
											}
											HX_STACK_LINE(1597)
											{
												HX_STACK_LINE(1597)
												::zpp_nape::util::ZNPNode_ZPP_Arbiter o = old;		HX_STACK_VAR(o,"o");
												HX_STACK_LINE(1597)
												o->elt = null();
												HX_STACK_LINE(1597)
												::zpp_nape::util::ZNPNode_ZPP_Arbiter tmp14 = ::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool;		HX_STACK_VAR(tmp14,"tmp14");
												HX_STACK_LINE(1597)
												o->next = tmp14;
												HX_STACK_LINE(1597)
												::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool = o;
											}
											HX_STACK_LINE(1597)
											_this->modified = true;
											HX_STACK_LINE(1597)
											(_this->length)--;
											HX_STACK_LINE(1597)
											_this->pushmod = true;
											HX_STACK_LINE(1597)
											ret1;
										}
										HX_STACK_LINE(1597)
										ret = true;
										HX_STACK_LINE(1597)
										break;
									}
									HX_STACK_LINE(1597)
									pre = cur;
									HX_STACK_LINE(1597)
									cur = cur->next;
								}
								HX_STACK_LINE(1597)
								ret;
							}
						}
						HX_STACK_LINE(1597)
						bool tmp9 = (arb->pair != null());		HX_STACK_VAR(tmp9,"tmp9");
						HX_STACK_LINE(1597)
						if ((tmp9)){
							HX_STACK_LINE(1597)
							arb->pair->arb = null();
							HX_STACK_LINE(1597)
							arb->pair = null();
						}
					}
					HX_STACK_LINE(1597)
					::zpp_nape::phys::ZPP_Body tmp9 = arb->b2 = null();		HX_STACK_VAR(tmp9,"tmp9");
					HX_STACK_LINE(1597)
					arb->b1 = tmp9;
					HX_STACK_LINE(1597)
					arb->active = false;
					HX_STACK_LINE(1597)
					arb->intchange = false;
				}
				HX_STACK_LINE(1597)
				while((true)){
					HX_STACK_LINE(1597)
					::zpp_nape::dynamics::ZPP_Contact tmp7 = arb->contacts->next;		HX_STACK_VAR(tmp7,"tmp7");
					HX_STACK_LINE(1597)
					bool tmp8 = (tmp7 == null());		HX_STACK_VAR(tmp8,"tmp8");
					HX_STACK_LINE(1597)
					bool tmp9 = !(tmp8);		HX_STACK_VAR(tmp9,"tmp9");
					HX_STACK_LINE(1597)
					bool tmp10 = !(tmp9);		HX_STACK_VAR(tmp10,"tmp10");
					HX_STACK_LINE(1597)
					if ((tmp10)){
						HX_STACK_LINE(1597)
						break;
					}
					HX_STACK_LINE(1597)
					{
						HX_STACK_LINE(1597)
						::zpp_nape::dynamics::ZPP_Contact tmp11;		HX_STACK_VAR(tmp11,"tmp11");
						HX_STACK_LINE(1597)
						{
							HX_STACK_LINE(1597)
							::zpp_nape::dynamics::ZPP_Contact _this = arb->contacts;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(1597)
							::zpp_nape::dynamics::ZPP_Contact ret = _this->next;		HX_STACK_VAR(ret,"ret");
							HX_STACK_LINE(1597)
							_this->pop();
							HX_STACK_LINE(1597)
							tmp11 = ret;
						}
						HX_STACK_LINE(1597)
						::zpp_nape::dynamics::ZPP_Contact o = tmp11;		HX_STACK_VAR(o,"o");
						HX_STACK_LINE(1597)
						o->arbiter = null();
						HX_STACK_LINE(1597)
						::zpp_nape::dynamics::ZPP_Contact tmp12 = ::zpp_nape::dynamics::ZPP_Contact_obj::zpp_pool;		HX_STACK_VAR(tmp12,"tmp12");
						HX_STACK_LINE(1597)
						o->next = tmp12;
						HX_STACK_LINE(1597)
						::zpp_nape::dynamics::ZPP_Contact_obj::zpp_pool = o;
					}
					HX_STACK_LINE(1597)
					{
						HX_STACK_LINE(1597)
						::zpp_nape::dynamics::ZPP_IContact _this = arb->innards;		HX_STACK_VAR(_this,"_this");
						HX_STACK_LINE(1597)
						::zpp_nape::dynamics::ZPP_IContact ret = _this->next;		HX_STACK_VAR(ret,"ret");
						HX_STACK_LINE(1597)
						_this->next = ret->next;
						HX_STACK_LINE(1597)
						ret->_inuse = false;
						HX_STACK_LINE(1597)
						bool tmp11 = (_this->next == null());		HX_STACK_VAR(tmp11,"tmp11");
						HX_STACK_LINE(1597)
						if ((tmp11)){
							HX_STACK_LINE(1597)
							_this->pushmod = true;
						}
						HX_STACK_LINE(1597)
						_this->modified = true;
						HX_STACK_LINE(1597)
						(_this->length)--;
					}
				}
				HX_STACK_LINE(1597)
				{
					HX_STACK_LINE(1597)
					::zpp_nape::dynamics::ZPP_ColArbiter o = arb;		HX_STACK_VAR(o,"o");
					HX_STACK_LINE(1597)
					{
						HX_STACK_LINE(1597)
						o->userdef_dyn_fric = false;
						HX_STACK_LINE(1597)
						o->userdef_stat_fric = false;
						HX_STACK_LINE(1597)
						o->userdef_restitution = false;
						HX_STACK_LINE(1597)
						o->userdef_rfric = false;
						HX_STACK_LINE(1597)
						::zpp_nape::shape::ZPP_Edge tmp7 = o->__ref_edge2 = null();		HX_STACK_VAR(tmp7,"tmp7");
						HX_STACK_LINE(1597)
						o->__ref_edge1 = tmp7;
					}
					HX_STACK_LINE(1597)
					::zpp_nape::dynamics::ZPP_ColArbiter tmp7 = ::zpp_nape::dynamics::ZPP_ColArbiter_obj::zpp_pool;		HX_STACK_VAR(tmp7,"tmp7");
					HX_STACK_LINE(1597)
					o->next = tmp7;
					HX_STACK_LINE(1597)
					::zpp_nape::dynamics::ZPP_ColArbiter_obj::zpp_pool = o;
				}
				HX_STACK_LINE(1597)
				arb->pre_dt = ((Float)-1.0);
			}
		}
		HX_STACK_LINE(1601)
		while((true)){
			HX_STACK_LINE(1601)
			::zpp_nape::util::ZNPList_ZPP_SensorArbiter tmp = this->s_arbiters;		HX_STACK_VAR(tmp,"tmp");
			HX_STACK_LINE(1601)
			::zpp_nape::util::ZNPNode_ZPP_SensorArbiter tmp1 = tmp->head;		HX_STACK_VAR(tmp1,"tmp1");
			HX_STACK_LINE(1601)
			bool tmp2 = (tmp1 == null());		HX_STACK_VAR(tmp2,"tmp2");
			HX_STACK_LINE(1601)
			bool tmp3 = !(tmp2);		HX_STACK_VAR(tmp3,"tmp3");
			HX_STACK_LINE(1601)
			bool tmp4 = !(tmp3);		HX_STACK_VAR(tmp4,"tmp4");
			HX_STACK_LINE(1601)
			if ((tmp4)){
				HX_STACK_LINE(1601)
				break;
			}
			HX_STACK_LINE(1602)
			::zpp_nape::util::ZNPList_ZPP_SensorArbiter tmp5 = this->s_arbiters;		HX_STACK_VAR(tmp5,"tmp5");
			HX_STACK_LINE(1602)
			::zpp_nape::dynamics::ZPP_SensorArbiter tmp6 = tmp5->pop_unsafe();		HX_STACK_VAR(tmp6,"tmp6");
			HX_STACK_LINE(1602)
			::zpp_nape::dynamics::ZPP_SensorArbiter arb = tmp6;		HX_STACK_VAR(arb,"arb");
			HX_STACK_LINE(1603)
			{
				HX_STACK_LINE(1603)
				{
					HX_STACK_LINE(1603)
					bool tmp7 = arb->cleared;		HX_STACK_VAR(tmp7,"tmp7");
					HX_STACK_LINE(1603)
					bool tmp8 = !(tmp7);		HX_STACK_VAR(tmp8,"tmp8");
					HX_STACK_LINE(1603)
					if ((tmp8)){
						HX_STACK_LINE(1603)
						{
							HX_STACK_LINE(1603)
							::zpp_nape::util::ZNPList_ZPP_Arbiter tmp9 = arb->b1->arbiters;		HX_STACK_VAR(tmp9,"tmp9");
							HX_STACK_LINE(1603)
							::zpp_nape::util::ZNPList_ZPP_Arbiter _this = tmp9;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(1603)
							{
								HX_STACK_LINE(1603)
								::zpp_nape::util::ZNPNode_ZPP_Arbiter pre = null();		HX_STACK_VAR(pre,"pre");
								HX_STACK_LINE(1603)
								::zpp_nape::util::ZNPNode_ZPP_Arbiter cur = _this->head;		HX_STACK_VAR(cur,"cur");
								HX_STACK_LINE(1603)
								bool ret = false;		HX_STACK_VAR(ret,"ret");
								HX_STACK_LINE(1603)
								while((true)){
									HX_STACK_LINE(1603)
									bool tmp10 = (cur != null());		HX_STACK_VAR(tmp10,"tmp10");
									HX_STACK_LINE(1603)
									bool tmp11 = !(tmp10);		HX_STACK_VAR(tmp11,"tmp11");
									HX_STACK_LINE(1603)
									if ((tmp11)){
										HX_STACK_LINE(1603)
										break;
									}
									HX_STACK_LINE(1603)
									bool tmp12 = (cur->elt == arb);		HX_STACK_VAR(tmp12,"tmp12");
									HX_STACK_LINE(1603)
									if ((tmp12)){
										HX_STACK_LINE(1603)
										{
											HX_STACK_LINE(1603)
											::zpp_nape::util::ZNPNode_ZPP_Arbiter old;		HX_STACK_VAR(old,"old");
											HX_STACK_LINE(1603)
											::zpp_nape::util::ZNPNode_ZPP_Arbiter ret1;		HX_STACK_VAR(ret1,"ret1");
											HX_STACK_LINE(1603)
											bool tmp13 = (pre == null());		HX_STACK_VAR(tmp13,"tmp13");
											HX_STACK_LINE(1603)
											if ((tmp13)){
												HX_STACK_LINE(1603)
												old = _this->head;
												HX_STACK_LINE(1603)
												ret1 = old->next;
												HX_STACK_LINE(1603)
												_this->head = ret1;
												HX_STACK_LINE(1603)
												bool tmp14 = (_this->head == null());		HX_STACK_VAR(tmp14,"tmp14");
												HX_STACK_LINE(1603)
												if ((tmp14)){
													HX_STACK_LINE(1603)
													_this->pushmod = true;
												}
											}
											else{
												HX_STACK_LINE(1603)
												old = pre->next;
												HX_STACK_LINE(1603)
												ret1 = old->next;
												HX_STACK_LINE(1603)
												pre->next = ret1;
												HX_STACK_LINE(1603)
												bool tmp14 = (ret1 == null());		HX_STACK_VAR(tmp14,"tmp14");
												HX_STACK_LINE(1603)
												if ((tmp14)){
													HX_STACK_LINE(1603)
													_this->pushmod = true;
												}
											}
											HX_STACK_LINE(1603)
											{
												HX_STACK_LINE(1603)
												::zpp_nape::util::ZNPNode_ZPP_Arbiter o = old;		HX_STACK_VAR(o,"o");
												HX_STACK_LINE(1603)
												o->elt = null();
												HX_STACK_LINE(1603)
												::zpp_nape::util::ZNPNode_ZPP_Arbiter tmp14 = ::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool;		HX_STACK_VAR(tmp14,"tmp14");
												HX_STACK_LINE(1603)
												o->next = tmp14;
												HX_STACK_LINE(1603)
												::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool = o;
											}
											HX_STACK_LINE(1603)
											_this->modified = true;
											HX_STACK_LINE(1603)
											(_this->length)--;
											HX_STACK_LINE(1603)
											_this->pushmod = true;
											HX_STACK_LINE(1603)
											ret1;
										}
										HX_STACK_LINE(1603)
										ret = true;
										HX_STACK_LINE(1603)
										break;
									}
									HX_STACK_LINE(1603)
									pre = cur;
									HX_STACK_LINE(1603)
									cur = cur->next;
								}
								HX_STACK_LINE(1603)
								ret;
							}
						}
						HX_STACK_LINE(1603)
						{
							HX_STACK_LINE(1603)
							::zpp_nape::util::ZNPList_ZPP_Arbiter tmp9 = arb->b2->arbiters;		HX_STACK_VAR(tmp9,"tmp9");
							HX_STACK_LINE(1603)
							::zpp_nape::util::ZNPList_ZPP_Arbiter _this = tmp9;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(1603)
							{
								HX_STACK_LINE(1603)
								::zpp_nape::util::ZNPNode_ZPP_Arbiter pre = null();		HX_STACK_VAR(pre,"pre");
								HX_STACK_LINE(1603)
								::zpp_nape::util::ZNPNode_ZPP_Arbiter cur = _this->head;		HX_STACK_VAR(cur,"cur");
								HX_STACK_LINE(1603)
								bool ret = false;		HX_STACK_VAR(ret,"ret");
								HX_STACK_LINE(1603)
								while((true)){
									HX_STACK_LINE(1603)
									bool tmp10 = (cur != null());		HX_STACK_VAR(tmp10,"tmp10");
									HX_STACK_LINE(1603)
									bool tmp11 = !(tmp10);		HX_STACK_VAR(tmp11,"tmp11");
									HX_STACK_LINE(1603)
									if ((tmp11)){
										HX_STACK_LINE(1603)
										break;
									}
									HX_STACK_LINE(1603)
									bool tmp12 = (cur->elt == arb);		HX_STACK_VAR(tmp12,"tmp12");
									HX_STACK_LINE(1603)
									if ((tmp12)){
										HX_STACK_LINE(1603)
										{
											HX_STACK_LINE(1603)
											::zpp_nape::util::ZNPNode_ZPP_Arbiter old;		HX_STACK_VAR(old,"old");
											HX_STACK_LINE(1603)
											::zpp_nape::util::ZNPNode_ZPP_Arbiter ret1;		HX_STACK_VAR(ret1,"ret1");
											HX_STACK_LINE(1603)
											bool tmp13 = (pre == null());		HX_STACK_VAR(tmp13,"tmp13");
											HX_STACK_LINE(1603)
											if ((tmp13)){
												HX_STACK_LINE(1603)
												old = _this->head;
												HX_STACK_LINE(1603)
												ret1 = old->next;
												HX_STACK_LINE(1603)
												_this->head = ret1;
												HX_STACK_LINE(1603)
												bool tmp14 = (_this->head == null());		HX_STACK_VAR(tmp14,"tmp14");
												HX_STACK_LINE(1603)
												if ((tmp14)){
													HX_STACK_LINE(1603)
													_this->pushmod = true;
												}
											}
											else{
												HX_STACK_LINE(1603)
												old = pre->next;
												HX_STACK_LINE(1603)
												ret1 = old->next;
												HX_STACK_LINE(1603)
												pre->next = ret1;
												HX_STACK_LINE(1603)
												bool tmp14 = (ret1 == null());		HX_STACK_VAR(tmp14,"tmp14");
												HX_STACK_LINE(1603)
												if ((tmp14)){
													HX_STACK_LINE(1603)
													_this->pushmod = true;
												}
											}
											HX_STACK_LINE(1603)
											{
												HX_STACK_LINE(1603)
												::zpp_nape::util::ZNPNode_ZPP_Arbiter o = old;		HX_STACK_VAR(o,"o");
												HX_STACK_LINE(1603)
												o->elt = null();
												HX_STACK_LINE(1603)
												::zpp_nape::util::ZNPNode_ZPP_Arbiter tmp14 = ::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool;		HX_STACK_VAR(tmp14,"tmp14");
												HX_STACK_LINE(1603)
												o->next = tmp14;
												HX_STACK_LINE(1603)
												::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool = o;
											}
											HX_STACK_LINE(1603)
											_this->modified = true;
											HX_STACK_LINE(1603)
											(_this->length)--;
											HX_STACK_LINE(1603)
											_this->pushmod = true;
											HX_STACK_LINE(1603)
											ret1;
										}
										HX_STACK_LINE(1603)
										ret = true;
										HX_STACK_LINE(1603)
										break;
									}
									HX_STACK_LINE(1603)
									pre = cur;
									HX_STACK_LINE(1603)
									cur = cur->next;
								}
								HX_STACK_LINE(1603)
								ret;
							}
						}
						HX_STACK_LINE(1603)
						bool tmp9 = (arb->pair != null());		HX_STACK_VAR(tmp9,"tmp9");
						HX_STACK_LINE(1603)
						if ((tmp9)){
							HX_STACK_LINE(1603)
							arb->pair->arb = null();
							HX_STACK_LINE(1603)
							arb->pair = null();
						}
					}
					HX_STACK_LINE(1603)
					::zpp_nape::phys::ZPP_Body tmp9 = arb->b2 = null();		HX_STACK_VAR(tmp9,"tmp9");
					HX_STACK_LINE(1603)
					arb->b1 = tmp9;
					HX_STACK_LINE(1603)
					arb->active = false;
					HX_STACK_LINE(1603)
					arb->intchange = false;
				}
				HX_STACK_LINE(1603)
				{
					HX_STACK_LINE(1603)
					::zpp_nape::dynamics::ZPP_SensorArbiter o = arb;		HX_STACK_VAR(o,"o");
					HX_STACK_LINE(1603)
					::zpp_nape::dynamics::ZPP_SensorArbiter tmp7 = ::zpp_nape::dynamics::ZPP_SensorArbiter_obj::zpp_pool;		HX_STACK_VAR(tmp7,"tmp7");
					HX_STACK_LINE(1603)
					o->next = tmp7;
					HX_STACK_LINE(1603)
					::zpp_nape::dynamics::ZPP_SensorArbiter_obj::zpp_pool = o;
				}
			}
		}
		HX_STACK_LINE(1607)
		while((true)){
			HX_STACK_LINE(1607)
			::zpp_nape::util::ZNPList_ZPP_FluidArbiter tmp = this->f_arbiters;		HX_STACK_VAR(tmp,"tmp");
			HX_STACK_LINE(1607)
			::zpp_nape::util::ZNPNode_ZPP_FluidArbiter tmp1 = tmp->head;		HX_STACK_VAR(tmp1,"tmp1");
			HX_STACK_LINE(1607)
			bool tmp2 = (tmp1 == null());		HX_STACK_VAR(tmp2,"tmp2");
			HX_STACK_LINE(1607)
			bool tmp3 = !(tmp2);		HX_STACK_VAR(tmp3,"tmp3");
			HX_STACK_LINE(1607)
			bool tmp4 = !(tmp3);		HX_STACK_VAR(tmp4,"tmp4");
			HX_STACK_LINE(1607)
			if ((tmp4)){
				HX_STACK_LINE(1607)
				break;
			}
			HX_STACK_LINE(1608)
			::zpp_nape::util::ZNPList_ZPP_FluidArbiter tmp5 = this->f_arbiters;		HX_STACK_VAR(tmp5,"tmp5");
			HX_STACK_LINE(1608)
			::zpp_nape::dynamics::ZPP_FluidArbiter tmp6 = tmp5->pop_unsafe();		HX_STACK_VAR(tmp6,"tmp6");
			HX_STACK_LINE(1608)
			::zpp_nape::dynamics::ZPP_FluidArbiter arb = tmp6;		HX_STACK_VAR(arb,"arb");
			HX_STACK_LINE(1609)
			{
				HX_STACK_LINE(1609)
				{
					HX_STACK_LINE(1609)
					bool tmp7 = arb->cleared;		HX_STACK_VAR(tmp7,"tmp7");
					HX_STACK_LINE(1609)
					bool tmp8 = !(tmp7);		HX_STACK_VAR(tmp8,"tmp8");
					HX_STACK_LINE(1609)
					if ((tmp8)){
						HX_STACK_LINE(1609)
						{
							HX_STACK_LINE(1609)
							::zpp_nape::util::ZNPList_ZPP_Arbiter tmp9 = arb->b1->arbiters;		HX_STACK_VAR(tmp9,"tmp9");
							HX_STACK_LINE(1609)
							::zpp_nape::util::ZNPList_ZPP_Arbiter _this = tmp9;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(1609)
							{
								HX_STACK_LINE(1609)
								::zpp_nape::util::ZNPNode_ZPP_Arbiter pre = null();		HX_STACK_VAR(pre,"pre");
								HX_STACK_LINE(1609)
								::zpp_nape::util::ZNPNode_ZPP_Arbiter cur = _this->head;		HX_STACK_VAR(cur,"cur");
								HX_STACK_LINE(1609)
								bool ret = false;		HX_STACK_VAR(ret,"ret");
								HX_STACK_LINE(1609)
								while((true)){
									HX_STACK_LINE(1609)
									bool tmp10 = (cur != null());		HX_STACK_VAR(tmp10,"tmp10");
									HX_STACK_LINE(1609)
									bool tmp11 = !(tmp10);		HX_STACK_VAR(tmp11,"tmp11");
									HX_STACK_LINE(1609)
									if ((tmp11)){
										HX_STACK_LINE(1609)
										break;
									}
									HX_STACK_LINE(1609)
									bool tmp12 = (cur->elt == arb);		HX_STACK_VAR(tmp12,"tmp12");
									HX_STACK_LINE(1609)
									if ((tmp12)){
										HX_STACK_LINE(1609)
										{
											HX_STACK_LINE(1609)
											::zpp_nape::util::ZNPNode_ZPP_Arbiter old;		HX_STACK_VAR(old,"old");
											HX_STACK_LINE(1609)
											::zpp_nape::util::ZNPNode_ZPP_Arbiter ret1;		HX_STACK_VAR(ret1,"ret1");
											HX_STACK_LINE(1609)
											bool tmp13 = (pre == null());		HX_STACK_VAR(tmp13,"tmp13");
											HX_STACK_LINE(1609)
											if ((tmp13)){
												HX_STACK_LINE(1609)
												old = _this->head;
												HX_STACK_LINE(1609)
												ret1 = old->next;
												HX_STACK_LINE(1609)
												_this->head = ret1;
												HX_STACK_LINE(1609)
												bool tmp14 = (_this->head == null());		HX_STACK_VAR(tmp14,"tmp14");
												HX_STACK_LINE(1609)
												if ((tmp14)){
													HX_STACK_LINE(1609)
													_this->pushmod = true;
												}
											}
											else{
												HX_STACK_LINE(1609)
												old = pre->next;
												HX_STACK_LINE(1609)
												ret1 = old->next;
												HX_STACK_LINE(1609)
												pre->next = ret1;
												HX_STACK_LINE(1609)
												bool tmp14 = (ret1 == null());		HX_STACK_VAR(tmp14,"tmp14");
												HX_STACK_LINE(1609)
												if ((tmp14)){
													HX_STACK_LINE(1609)
													_this->pushmod = true;
												}
											}
											HX_STACK_LINE(1609)
											{
												HX_STACK_LINE(1609)
												::zpp_nape::util::ZNPNode_ZPP_Arbiter o = old;		HX_STACK_VAR(o,"o");
												HX_STACK_LINE(1609)
												o->elt = null();
												HX_STACK_LINE(1609)
												::zpp_nape::util::ZNPNode_ZPP_Arbiter tmp14 = ::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool;		HX_STACK_VAR(tmp14,"tmp14");
												HX_STACK_LINE(1609)
												o->next = tmp14;
												HX_STACK_LINE(1609)
												::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool = o;
											}
											HX_STACK_LINE(1609)
											_this->modified = true;
											HX_STACK_LINE(1609)
											(_this->length)--;
											HX_STACK_LINE(1609)
											_this->pushmod = true;
											HX_STACK_LINE(1609)
											ret1;
										}
										HX_STACK_LINE(1609)
										ret = true;
										HX_STACK_LINE(1609)
										break;
									}
									HX_STACK_LINE(1609)
									pre = cur;
									HX_STACK_LINE(1609)
									cur = cur->next;
								}
								HX_STACK_LINE(1609)
								ret;
							}
						}
						HX_STACK_LINE(1609)
						{
							HX_STACK_LINE(1609)
							::zpp_nape::util::ZNPList_ZPP_Arbiter tmp9 = arb->b2->arbiters;		HX_STACK_VAR(tmp9,"tmp9");
							HX_STACK_LINE(1609)
							::zpp_nape::util::ZNPList_ZPP_Arbiter _this = tmp9;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(1609)
							{
								HX_STACK_LINE(1609)
								::zpp_nape::util::ZNPNode_ZPP_Arbiter pre = null();		HX_STACK_VAR(pre,"pre");
								HX_STACK_LINE(1609)
								::zpp_nape::util::ZNPNode_ZPP_Arbiter cur = _this->head;		HX_STACK_VAR(cur,"cur");
								HX_STACK_LINE(1609)
								bool ret = false;		HX_STACK_VAR(ret,"ret");
								HX_STACK_LINE(1609)
								while((true)){
									HX_STACK_LINE(1609)
									bool tmp10 = (cur != null());		HX_STACK_VAR(tmp10,"tmp10");
									HX_STACK_LINE(1609)
									bool tmp11 = !(tmp10);		HX_STACK_VAR(tmp11,"tmp11");
									HX_STACK_LINE(1609)
									if ((tmp11)){
										HX_STACK_LINE(1609)
										break;
									}
									HX_STACK_LINE(1609)
									bool tmp12 = (cur->elt == arb);		HX_STACK_VAR(tmp12,"tmp12");
									HX_STACK_LINE(1609)
									if ((tmp12)){
										HX_STACK_LINE(1609)
										{
											HX_STACK_LINE(1609)
											::zpp_nape::util::ZNPNode_ZPP_Arbiter old;		HX_STACK_VAR(old,"old");
											HX_STACK_LINE(1609)
											::zpp_nape::util::ZNPNode_ZPP_Arbiter ret1;		HX_STACK_VAR(ret1,"ret1");
											HX_STACK_LINE(1609)
											bool tmp13 = (pre == null());		HX_STACK_VAR(tmp13,"tmp13");
											HX_STACK_LINE(1609)
											if ((tmp13)){
												HX_STACK_LINE(1609)
												old = _this->head;
												HX_STACK_LINE(1609)
												ret1 = old->next;
												HX_STACK_LINE(1609)
												_this->head = ret1;
												HX_STACK_LINE(1609)
												bool tmp14 = (_this->head == null());		HX_STACK_VAR(tmp14,"tmp14");
												HX_STACK_LINE(1609)
												if ((tmp14)){
													HX_STACK_LINE(1609)
													_this->pushmod = true;
												}
											}
											else{
												HX_STACK_LINE(1609)
												old = pre->next;
												HX_STACK_LINE(1609)
												ret1 = old->next;
												HX_STACK_LINE(1609)
												pre->next = ret1;
												HX_STACK_LINE(1609)
												bool tmp14 = (ret1 == null());		HX_STACK_VAR(tmp14,"tmp14");
												HX_STACK_LINE(1609)
												if ((tmp14)){
													HX_STACK_LINE(1609)
													_this->pushmod = true;
												}
											}
											HX_STACK_LINE(1609)
											{
												HX_STACK_LINE(1609)
												::zpp_nape::util::ZNPNode_ZPP_Arbiter o = old;		HX_STACK_VAR(o,"o");
												HX_STACK_LINE(1609)
												o->elt = null();
												HX_STACK_LINE(1609)
												::zpp_nape::util::ZNPNode_ZPP_Arbiter tmp14 = ::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool;		HX_STACK_VAR(tmp14,"tmp14");
												HX_STACK_LINE(1609)
												o->next = tmp14;
												HX_STACK_LINE(1609)
												::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool = o;
											}
											HX_STACK_LINE(1609)
											_this->modified = true;
											HX_STACK_LINE(1609)
											(_this->length)--;
											HX_STACK_LINE(1609)
											_this->pushmod = true;
											HX_STACK_LINE(1609)
											ret1;
										}
										HX_STACK_LINE(1609)
										ret = true;
										HX_STACK_LINE(1609)
										break;
									}
									HX_STACK_LINE(1609)
									pre = cur;
									HX_STACK_LINE(1609)
									cur = cur->next;
								}
								HX_STACK_LINE(1609)
								ret;
							}
						}
						HX_STACK_LINE(1609)
						bool tmp9 = (arb->pair != null());		HX_STACK_VAR(tmp9,"tmp9");
						HX_STACK_LINE(1609)
						if ((tmp9)){
							HX_STACK_LINE(1609)
							arb->pair->arb = null();
							HX_STACK_LINE(1609)
							arb->pair = null();
						}
					}
					HX_STACK_LINE(1609)
					::zpp_nape::phys::ZPP_Body tmp9 = arb->b2 = null();		HX_STACK_VAR(tmp9,"tmp9");
					HX_STACK_LINE(1609)
					arb->b1 = tmp9;
					HX_STACK_LINE(1609)
					arb->active = false;
					HX_STACK_LINE(1609)
					arb->intchange = false;
				}
				HX_STACK_LINE(1609)
				{
					HX_STACK_LINE(1609)
					::zpp_nape::dynamics::ZPP_FluidArbiter o = arb;		HX_STACK_VAR(o,"o");
					HX_STACK_LINE(1609)
					::zpp_nape::dynamics::ZPP_FluidArbiter tmp7 = ::zpp_nape::dynamics::ZPP_FluidArbiter_obj::zpp_pool;		HX_STACK_VAR(tmp7,"tmp7");
					HX_STACK_LINE(1609)
					o->next = tmp7;
					HX_STACK_LINE(1609)
					::zpp_nape::dynamics::ZPP_FluidArbiter_obj::zpp_pool = o;
				}
				HX_STACK_LINE(1609)
				arb->pre_dt = ((Float)-1.0);
			}
		}
		HX_STACK_LINE(1612)
		::zpp_nape::space::ZPP_Broadphase tmp = this->bphase;		HX_STACK_VAR(tmp,"tmp");
		HX_STACK_LINE(1612)
		tmp->clear();
		HX_STACK_LINE(1614)
		while((true)){
			HX_STACK_LINE(1614)
			::zpp_nape::util::ZNPList_ZPP_Body tmp1 = this->bodies;		HX_STACK_VAR(tmp1,"tmp1");
			HX_STACK_LINE(1614)
			::zpp_nape::util::ZNPNode_ZPP_Body tmp2 = tmp1->head;		HX_STACK_VAR(tmp2,"tmp2");
			HX_STACK_LINE(1614)
			bool tmp3 = (tmp2 == null());		HX_STACK_VAR(tmp3,"tmp3");
			HX_STACK_LINE(1614)
			bool tmp4 = !(tmp3);		HX_STACK_VAR(tmp4,"tmp4");
			HX_STACK_LINE(1614)
			bool tmp5 = !(tmp4);		HX_STACK_VAR(tmp5,"tmp5");
			HX_STACK_LINE(1614)
			if ((tmp5)){
				HX_STACK_LINE(1614)
				break;
			}
			HX_STACK_LINE(1615)
			::zpp_nape::util::ZNPList_ZPP_Body tmp6 = this->bodies;		HX_STACK_VAR(tmp6,"tmp6");
			HX_STACK_LINE(1615)
			::zpp_nape::phys::ZPP_Body tmp7 = tmp6->pop_unsafe();		HX_STACK_VAR(tmp7,"tmp7");
			HX_STACK_LINE(1615)
			::zpp_nape::phys::ZPP_Body b = tmp7;		HX_STACK_VAR(b,"b");
			HX_STACK_LINE(1616)
			{
				HX_STACK_LINE(1617)
				{
					HX_STACK_LINE(1618)
					bool tmp8 = (b->component != null());		HX_STACK_VAR(tmp8,"tmp8");
					HX_STACK_LINE(1618)
					if ((tmp8)){
						HX_STACK_LINE(1619)
						::zpp_nape::space::ZPP_Island tmp9 = b->component->island;		HX_STACK_VAR(tmp9,"tmp9");
						HX_STACK_LINE(1619)
						::zpp_nape::space::ZPP_Island i = tmp9;		HX_STACK_VAR(i,"i");
						HX_STACK_LINE(1620)
						bool tmp10 = (i != null());		HX_STACK_VAR(tmp10,"tmp10");
						HX_STACK_LINE(1620)
						if ((tmp10)){
							HX_STACK_LINE(1622)
							while((true)){
								HX_STACK_LINE(1622)
								::zpp_nape::util::ZNPNode_ZPP_Component tmp11 = i->comps->head;		HX_STACK_VAR(tmp11,"tmp11");
								HX_STACK_LINE(1622)
								bool tmp12 = (tmp11 == null());		HX_STACK_VAR(tmp12,"tmp12");
								HX_STACK_LINE(1622)
								bool tmp13 = !(tmp12);		HX_STACK_VAR(tmp13,"tmp13");
								HX_STACK_LINE(1622)
								bool tmp14 = !(tmp13);		HX_STACK_VAR(tmp14,"tmp14");
								HX_STACK_LINE(1622)
								if ((tmp14)){
									HX_STACK_LINE(1622)
									break;
								}
								HX_STACK_LINE(1623)
								::zpp_nape::space::ZPP_Component tmp15 = i->comps->pop_unsafe();		HX_STACK_VAR(tmp15,"tmp15");
								HX_STACK_LINE(1623)
								::zpp_nape::space::ZPP_Component c = tmp15;		HX_STACK_VAR(c,"c");
								HX_STACK_LINE(1624)
								{
									HX_STACK_LINE(1624)
									c->sleeping = false;
									HX_STACK_LINE(1624)
									c->island = null();
									HX_STACK_LINE(1624)
									c->parent = c;
									HX_STACK_LINE(1624)
									c->rank = (int)0;
								}
							}
							HX_STACK_LINE(1627)
							{
								HX_STACK_LINE(1628)
								::zpp_nape::space::ZPP_Island o = i;		HX_STACK_VAR(o,"o");
								HX_STACK_LINE(1638)
								::zpp_nape::space::ZPP_Island tmp11 = ::zpp_nape::space::ZPP_Island_obj::zpp_pool;		HX_STACK_VAR(tmp11,"tmp11");
								HX_STACK_LINE(1638)
								o->next = tmp11;
								HX_STACK_LINE(1639)
								::zpp_nape::space::ZPP_Island_obj::zpp_pool = o;
							}
						}
					}
				}
				HX_STACK_LINE(1647)
				b->removedFromSpace();
				HX_STACK_LINE(1648)
				b->space = null();
			}
		}
		HX_STACK_LINE(1653)
		while((true)){
			HX_STACK_LINE(1653)
			::zpp_nape::util::ZNPList_ZPP_Constraint tmp1 = this->constraints;		HX_STACK_VAR(tmp1,"tmp1");
			HX_STACK_LINE(1653)
			::zpp_nape::util::ZNPNode_ZPP_Constraint tmp2 = tmp1->head;		HX_STACK_VAR(tmp2,"tmp2");
			HX_STACK_LINE(1653)
			bool tmp3 = (tmp2 == null());		HX_STACK_VAR(tmp3,"tmp3");
			HX_STACK_LINE(1653)
			bool tmp4 = !(tmp3);		HX_STACK_VAR(tmp4,"tmp4");
			HX_STACK_LINE(1653)
			bool tmp5 = !(tmp4);		HX_STACK_VAR(tmp5,"tmp5");
			HX_STACK_LINE(1653)
			if ((tmp5)){
				HX_STACK_LINE(1653)
				break;
			}
			HX_STACK_LINE(1654)
			::zpp_nape::util::ZNPList_ZPP_Constraint tmp6 = this->constraints;		HX_STACK_VAR(tmp6,"tmp6");
			HX_STACK_LINE(1654)
			::zpp_nape::constraint::ZPP_Constraint tmp7 = tmp6->pop_unsafe();		HX_STACK_VAR(tmp7,"tmp7");
			HX_STACK_LINE(1654)
			::zpp_nape::constraint::ZPP_Constraint c = tmp7;		HX_STACK_VAR(c,"c");
			HX_STACK_LINE(1655)
			{
				HX_STACK_LINE(1656)
				{
					HX_STACK_LINE(1657)
					bool tmp8 = (c->component != null());		HX_STACK_VAR(tmp8,"tmp8");
					HX_STACK_LINE(1657)
					if ((tmp8)){
						HX_STACK_LINE(1658)
						::zpp_nape::space::ZPP_Island tmp9 = c->component->island;		HX_STACK_VAR(tmp9,"tmp9");
						HX_STACK_LINE(1658)
						::zpp_nape::space::ZPP_Island i = tmp9;		HX_STACK_VAR(i,"i");
						HX_STACK_LINE(1659)
						bool tmp10 = (i != null());		HX_STACK_VAR(tmp10,"tmp10");
						HX_STACK_LINE(1659)
						if ((tmp10)){
							HX_STACK_LINE(1661)
							while((true)){
								HX_STACK_LINE(1661)
								::zpp_nape::util::ZNPNode_ZPP_Component tmp11 = i->comps->head;		HX_STACK_VAR(tmp11,"tmp11");
								HX_STACK_LINE(1661)
								bool tmp12 = (tmp11 == null());		HX_STACK_VAR(tmp12,"tmp12");
								HX_STACK_LINE(1661)
								bool tmp13 = !(tmp12);		HX_STACK_VAR(tmp13,"tmp13");
								HX_STACK_LINE(1661)
								bool tmp14 = !(tmp13);		HX_STACK_VAR(tmp14,"tmp14");
								HX_STACK_LINE(1661)
								if ((tmp14)){
									HX_STACK_LINE(1661)
									break;
								}
								HX_STACK_LINE(1662)
								::zpp_nape::space::ZPP_Component tmp15 = i->comps->pop_unsafe();		HX_STACK_VAR(tmp15,"tmp15");
								HX_STACK_LINE(1662)
								::zpp_nape::space::ZPP_Component c1 = tmp15;		HX_STACK_VAR(c1,"c1");
								HX_STACK_LINE(1663)
								{
									HX_STACK_LINE(1663)
									c1->sleeping = false;
									HX_STACK_LINE(1663)
									c1->island = null();
									HX_STACK_LINE(1663)
									c1->parent = c1;
									HX_STACK_LINE(1663)
									c1->rank = (int)0;
								}
							}
							HX_STACK_LINE(1666)
							{
								HX_STACK_LINE(1667)
								::zpp_nape::space::ZPP_Island o = i;		HX_STACK_VAR(o,"o");
								HX_STACK_LINE(1677)
								::zpp_nape::space::ZPP_Island tmp11 = ::zpp_nape::space::ZPP_Island_obj::zpp_pool;		HX_STACK_VAR(tmp11,"tmp11");
								HX_STACK_LINE(1677)
								o->next = tmp11;
								HX_STACK_LINE(1678)
								::zpp_nape::space::ZPP_Island_obj::zpp_pool = o;
							}
						}
					}
				}
				HX_STACK_LINE(1686)
				c->removedFromSpace();
				HX_STACK_LINE(1687)
				c->space = null();
			}
		}
		HX_STACK_LINE(1691)
		::zpp_nape::util::ZNPList_ZPP_Body tmp1 = this->kinematics;		HX_STACK_VAR(tmp1,"tmp1");
		HX_STACK_LINE(1691)
		tmp1->clear();
		HX_STACK_LINE(1692)
		::zpp_nape::util::ZNPList_ZPP_Compound stack = ::zpp_nape::util::ZNPList_ZPP_Compound_obj::__new();		HX_STACK_VAR(stack,"stack");
		HX_STACK_LINE(1694)
		while((true)){
			HX_STACK_LINE(1694)
			::zpp_nape::util::ZNPList_ZPP_Compound tmp2 = this->compounds;		HX_STACK_VAR(tmp2,"tmp2");
			HX_STACK_LINE(1694)
			::zpp_nape::util::ZNPNode_ZPP_Compound tmp3 = tmp2->head;		HX_STACK_VAR(tmp3,"tmp3");
			HX_STACK_LINE(1694)
			bool tmp4 = (tmp3 == null());		HX_STACK_VAR(tmp4,"tmp4");
			HX_STACK_LINE(1694)
			bool tmp5 = !(tmp4);		HX_STACK_VAR(tmp5,"tmp5");
			HX_STACK_LINE(1694)
			bool tmp6 = !(tmp5);		HX_STACK_VAR(tmp6,"tmp6");
			HX_STACK_LINE(1694)
			if ((tmp6)){
				HX_STACK_LINE(1694)
				break;
			}
			HX_STACK_LINE(1695)
			::zpp_nape::util::ZNPList_ZPP_Compound tmp7 = this->compounds;		HX_STACK_VAR(tmp7,"tmp7");
			HX_STACK_LINE(1695)
			::zpp_nape::phys::ZPP_Compound tmp8 = tmp7->pop_unsafe();		HX_STACK_VAR(tmp8,"tmp8");
			HX_STACK_LINE(1695)
			::zpp_nape::phys::ZPP_Compound c = tmp8;		HX_STACK_VAR(c,"c");
			HX_STACK_LINE(1696)
			::zpp_nape::phys::ZPP_Compound tmp9 = c;		HX_STACK_VAR(tmp9,"tmp9");
			HX_STACK_LINE(1696)
			stack->add(tmp9);
		}
		HX_STACK_LINE(1699)
		while((true)){
			HX_STACK_LINE(1699)
			bool tmp2 = (stack->head == null());		HX_STACK_VAR(tmp2,"tmp2");
			HX_STACK_LINE(1699)
			bool tmp3 = !(tmp2);		HX_STACK_VAR(tmp3,"tmp3");
			HX_STACK_LINE(1699)
			bool tmp4 = !(tmp3);		HX_STACK_VAR(tmp4,"tmp4");
			HX_STACK_LINE(1699)
			if ((tmp4)){
				HX_STACK_LINE(1699)
				break;
			}
			HX_STACK_LINE(1700)
			::zpp_nape::phys::ZPP_Compound tmp5 = stack->pop_unsafe();		HX_STACK_VAR(tmp5,"tmp5");
			HX_STACK_LINE(1700)
			::zpp_nape::phys::ZPP_Compound comp = tmp5;		HX_STACK_VAR(comp,"comp");
			HX_STACK_LINE(1701)
			comp->removedFromSpace();
			HX_STACK_LINE(1702)
			comp->space = null();
			HX_STACK_LINE(1703)
			{
				HX_STACK_LINE(1704)
				::zpp_nape::util::ZNPNode_ZPP_Body tmp6 = comp->bodies->head;		HX_STACK_VAR(tmp6,"tmp6");
				HX_STACK_LINE(1704)
				::zpp_nape::util::ZNPNode_ZPP_Body cx_ite = tmp6;		HX_STACK_VAR(cx_ite,"cx_ite");
				HX_STACK_LINE(1705)
				while((true)){
					HX_STACK_LINE(1705)
					bool tmp7 = (cx_ite != null());		HX_STACK_VAR(tmp7,"tmp7");
					HX_STACK_LINE(1705)
					bool tmp8 = !(tmp7);		HX_STACK_VAR(tmp8,"tmp8");
					HX_STACK_LINE(1705)
					if ((tmp8)){
						HX_STACK_LINE(1705)
						break;
					}
					HX_STACK_LINE(1706)
					::zpp_nape::phys::ZPP_Body b = cx_ite->elt;		HX_STACK_VAR(b,"b");
					HX_STACK_LINE(1707)
					{
						HX_STACK_LINE(1708)
						{
							HX_STACK_LINE(1709)
							bool tmp9 = (b->component != null());		HX_STACK_VAR(tmp9,"tmp9");
							HX_STACK_LINE(1709)
							if ((tmp9)){
								HX_STACK_LINE(1710)
								::zpp_nape::space::ZPP_Island tmp10 = b->component->island;		HX_STACK_VAR(tmp10,"tmp10");
								HX_STACK_LINE(1710)
								::zpp_nape::space::ZPP_Island i = tmp10;		HX_STACK_VAR(i,"i");
								HX_STACK_LINE(1711)
								bool tmp11 = (i != null());		HX_STACK_VAR(tmp11,"tmp11");
								HX_STACK_LINE(1711)
								if ((tmp11)){
									HX_STACK_LINE(1713)
									while((true)){
										HX_STACK_LINE(1713)
										::zpp_nape::util::ZNPNode_ZPP_Component tmp12 = i->comps->head;		HX_STACK_VAR(tmp12,"tmp12");
										HX_STACK_LINE(1713)
										bool tmp13 = (tmp12 == null());		HX_STACK_VAR(tmp13,"tmp13");
										HX_STACK_LINE(1713)
										bool tmp14 = !(tmp13);		HX_STACK_VAR(tmp14,"tmp14");
										HX_STACK_LINE(1713)
										bool tmp15 = !(tmp14);		HX_STACK_VAR(tmp15,"tmp15");
										HX_STACK_LINE(1713)
										if ((tmp15)){
											HX_STACK_LINE(1713)
											break;
										}
										HX_STACK_LINE(1714)
										::zpp_nape::space::ZPP_Component tmp16 = i->comps->pop_unsafe();		HX_STACK_VAR(tmp16,"tmp16");
										HX_STACK_LINE(1714)
										::zpp_nape::space::ZPP_Component c = tmp16;		HX_STACK_VAR(c,"c");
										HX_STACK_LINE(1715)
										{
											HX_STACK_LINE(1715)
											c->sleeping = false;
											HX_STACK_LINE(1715)
											c->island = null();
											HX_STACK_LINE(1715)
											c->parent = c;
											HX_STACK_LINE(1715)
											c->rank = (int)0;
										}
									}
									HX_STACK_LINE(1718)
									{
										HX_STACK_LINE(1719)
										::zpp_nape::space::ZPP_Island o = i;		HX_STACK_VAR(o,"o");
										HX_STACK_LINE(1729)
										::zpp_nape::space::ZPP_Island tmp12 = ::zpp_nape::space::ZPP_Island_obj::zpp_pool;		HX_STACK_VAR(tmp12,"tmp12");
										HX_STACK_LINE(1729)
										o->next = tmp12;
										HX_STACK_LINE(1730)
										::zpp_nape::space::ZPP_Island_obj::zpp_pool = o;
									}
								}
							}
						}
						HX_STACK_LINE(1738)
						b->removedFromSpace();
						HX_STACK_LINE(1739)
						b->space = null();
					}
					HX_STACK_LINE(1741)
					cx_ite = cx_ite->next;
				}
			}
			HX_STACK_LINE(1744)
			{
				HX_STACK_LINE(1745)
				::zpp_nape::util::ZNPNode_ZPP_Constraint tmp6 = comp->constraints->head;		HX_STACK_VAR(tmp6,"tmp6");
				HX_STACK_LINE(1745)
				::zpp_nape::util::ZNPNode_ZPP_Constraint cx_ite = tmp6;		HX_STACK_VAR(cx_ite,"cx_ite");
				HX_STACK_LINE(1746)
				while((true)){
					HX_STACK_LINE(1746)
					bool tmp7 = (cx_ite != null());		HX_STACK_VAR(tmp7,"tmp7");
					HX_STACK_LINE(1746)
					bool tmp8 = !(tmp7);		HX_STACK_VAR(tmp8,"tmp8");
					HX_STACK_LINE(1746)
					if ((tmp8)){
						HX_STACK_LINE(1746)
						break;
					}
					HX_STACK_LINE(1747)
					::zpp_nape::constraint::ZPP_Constraint c = cx_ite->elt;		HX_STACK_VAR(c,"c");
					HX_STACK_LINE(1748)
					{
						HX_STACK_LINE(1749)
						{
							HX_STACK_LINE(1750)
							bool tmp9 = (c->component != null());		HX_STACK_VAR(tmp9,"tmp9");
							HX_STACK_LINE(1750)
							if ((tmp9)){
								HX_STACK_LINE(1751)
								::zpp_nape::space::ZPP_Island tmp10 = c->component->island;		HX_STACK_VAR(tmp10,"tmp10");
								HX_STACK_LINE(1751)
								::zpp_nape::space::ZPP_Island i = tmp10;		HX_STACK_VAR(i,"i");
								HX_STACK_LINE(1752)
								bool tmp11 = (i != null());		HX_STACK_VAR(tmp11,"tmp11");
								HX_STACK_LINE(1752)
								if ((tmp11)){
									HX_STACK_LINE(1754)
									while((true)){
										HX_STACK_LINE(1754)
										::zpp_nape::util::ZNPNode_ZPP_Component tmp12 = i->comps->head;		HX_STACK_VAR(tmp12,"tmp12");
										HX_STACK_LINE(1754)
										bool tmp13 = (tmp12 == null());		HX_STACK_VAR(tmp13,"tmp13");
										HX_STACK_LINE(1754)
										bool tmp14 = !(tmp13);		HX_STACK_VAR(tmp14,"tmp14");
										HX_STACK_LINE(1754)
										bool tmp15 = !(tmp14);		HX_STACK_VAR(tmp15,"tmp15");
										HX_STACK_LINE(1754)
										if ((tmp15)){
											HX_STACK_LINE(1754)
											break;
										}
										HX_STACK_LINE(1755)
										::zpp_nape::space::ZPP_Component tmp16 = i->comps->pop_unsafe();		HX_STACK_VAR(tmp16,"tmp16");
										HX_STACK_LINE(1755)
										::zpp_nape::space::ZPP_Component c1 = tmp16;		HX_STACK_VAR(c1,"c1");
										HX_STACK_LINE(1756)
										{
											HX_STACK_LINE(1756)
											c1->sleeping = false;
											HX_STACK_LINE(1756)
											c1->island = null();
											HX_STACK_LINE(1756)
											c1->parent = c1;
											HX_STACK_LINE(1756)
											c1->rank = (int)0;
										}
									}
									HX_STACK_LINE(1759)
									{
										HX_STACK_LINE(1760)
										::zpp_nape::space::ZPP_Island o = i;		HX_STACK_VAR(o,"o");
										HX_STACK_LINE(1770)
										::zpp_nape::space::ZPP_Island tmp12 = ::zpp_nape::space::ZPP_Island_obj::zpp_pool;		HX_STACK_VAR(tmp12,"tmp12");
										HX_STACK_LINE(1770)
										o->next = tmp12;
										HX_STACK_LINE(1771)
										::zpp_nape::space::ZPP_Island_obj::zpp_pool = o;
									}
								}
							}
						}
						HX_STACK_LINE(1779)
						c->removedFromSpace();
						HX_STACK_LINE(1780)
						c->space = null();
					}
					HX_STACK_LINE(1782)
					cx_ite = cx_ite->next;
				}
			}
			HX_STACK_LINE(1785)
			{
				HX_STACK_LINE(1786)
				::zpp_nape::util::ZNPNode_ZPP_Compound tmp6 = comp->compounds->head;		HX_STACK_VAR(tmp6,"tmp6");
				HX_STACK_LINE(1786)
				::zpp_nape::util::ZNPNode_ZPP_Compound cx_ite = tmp6;		HX_STACK_VAR(cx_ite,"cx_ite");
				HX_STACK_LINE(1787)
				while((true)){
					HX_STACK_LINE(1787)
					bool tmp7 = (cx_ite != null());		HX_STACK_VAR(tmp7,"tmp7");
					HX_STACK_LINE(1787)
					bool tmp8 = !(tmp7);		HX_STACK_VAR(tmp8,"tmp8");
					HX_STACK_LINE(1787)
					if ((tmp8)){
						HX_STACK_LINE(1787)
						break;
					}
					HX_STACK_LINE(1788)
					::zpp_nape::phys::ZPP_Compound i = cx_ite->elt;		HX_STACK_VAR(i,"i");
					HX_STACK_LINE(1789)
					::zpp_nape::phys::ZPP_Compound tmp9 = i;		HX_STACK_VAR(tmp9,"tmp9");
					HX_STACK_LINE(1789)
					stack->add(tmp9);
					HX_STACK_LINE(1790)
					cx_ite = cx_ite->next;
				}
			}
		}
		HX_STACK_LINE(1802)
		::zpp_nape::util::ZNPList_ZPP_Body tmp2 = this->staticsleep;		HX_STACK_VAR(tmp2,"tmp2");
		HX_STACK_LINE(1802)
		tmp2->clear();
		HX_STACK_LINE(1803)
		::zpp_nape::util::ZNPList_ZPP_Body tmp3 = this->live;		HX_STACK_VAR(tmp3,"tmp3");
		HX_STACK_LINE(1803)
		tmp3->clear();
		HX_STACK_LINE(1804)
		::zpp_nape::util::ZNPList_ZPP_Constraint tmp4 = this->live_constraints;		HX_STACK_VAR(tmp4,"tmp4");
		HX_STACK_LINE(1804)
		tmp4->clear();
		HX_STACK_LINE(1805)
		this->stamp = (int)0;
		HX_STACK_LINE(1806)
		this->time = ((Float)0.0);
		HX_STACK_LINE(1810)
		::zpp_nape::util::ZNPList_ZPP_Interactor tmp5 = this->mrca1;		HX_STACK_VAR(tmp5,"tmp5");
		HX_STACK_LINE(1810)
		tmp5->clear();
		HX_STACK_LINE(1811)
		::zpp_nape::util::ZNPList_ZPP_Interactor tmp6 = this->mrca2;		HX_STACK_VAR(tmp6,"tmp6");
		HX_STACK_LINE(1811)
		tmp6->clear();
		HX_STACK_LINE(1812)
		::zpp_nape::util::ZNPList_ZPP_InteractionListener tmp7 = this->prelisteners;		HX_STACK_VAR(tmp7,"tmp7");
		HX_STACK_LINE(1812)
		tmp7->clear();
		HX_STACK_LINE(1813)
		::zpp_nape::space::ZPP_CbSetManager tmp8 = this->cbsets;		HX_STACK_VAR(tmp8,"tmp8");
		HX_STACK_LINE(1813)
		tmp8->clear();
	}
return null();
}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Space_obj,clear,(void))

bool ZPP_Space_obj::bodies_adder( ::nape::phys::Body x){
	HX_STACK_FRAME("zpp_nape.space.ZPP_Space","bodies_adder",0xc459d405,"zpp_nape.space.ZPP_Space.bodies_adder","zpp_nape/space/Space.hx",1815,0x2b65ed03)
	HX_STACK_THIS(this)
	HX_STACK_ARG(x,"x")
	HX_STACK_LINE(1817)
	::zpp_nape::phys::ZPP_Compound tmp = x->zpp_inner->compound;		HX_STACK_VAR(tmp,"tmp");
	HX_STACK_LINE(1817)
	bool tmp1 = (tmp != null());		HX_STACK_VAR(tmp1,"tmp1");
	HX_STACK_LINE(1817)
	if ((tmp1)){
		HX_STACK_LINE(1817)
		HX_STACK_DO_THROW(HX_HCSTRING("Error: Cannot set the space of a Body belonging to a Compound, only the root Compound space can be set","\x2f","\x88","\x46","\xff"));
	}
	HX_STACK_LINE(1819)
	::zpp_nape::space::ZPP_Space tmp2 = x->zpp_inner->space;		HX_STACK_VAR(tmp2,"tmp2");
	HX_STACK_LINE(1819)
	bool tmp3 = (tmp2 != hx::ObjectPtr<OBJ_>(this));		HX_STACK_VAR(tmp3,"tmp3");
	HX_STACK_LINE(1819)
	if ((tmp3)){
		HX_STACK_LINE(1820)
		::zpp_nape::space::ZPP_Space tmp4 = x->zpp_inner->space;		HX_STACK_VAR(tmp4,"tmp4");
		HX_STACK_LINE(1820)
		bool tmp5 = (tmp4 != null());		HX_STACK_VAR(tmp5,"tmp5");
		HX_STACK_LINE(1820)
		if ((tmp5)){
			HX_STACK_LINE(1820)
			::zpp_nape::space::ZPP_Space tmp6 = x->zpp_inner->space;		HX_STACK_VAR(tmp6,"tmp6");
			HX_STACK_LINE(1820)
			::zpp_nape::space::ZPP_Space tmp7 = tmp6->outer->zpp_inner;		HX_STACK_VAR(tmp7,"tmp7");
			HX_STACK_LINE(1820)
			::nape::phys::Body tmp8 = x;		HX_STACK_VAR(tmp8,"tmp8");
			HX_STACK_LINE(1820)
			tmp7->wrap_bodies->remove(tmp8);
		}
		HX_STACK_LINE(1821)
		::zpp_nape::phys::ZPP_Body tmp6 = x->zpp_inner;		HX_STACK_VAR(tmp6,"tmp6");
		HX_STACK_LINE(1821)
		this->addBody(tmp6,null());
		HX_STACK_LINE(1822)
		return true;
	}
	else{
		HX_STACK_LINE(1824)
		return false;
	}
	HX_STACK_LINE(1819)
	return false;
}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Space_obj,bodies_adder,return )

Void ZPP_Space_obj::bodies_subber( ::nape::phys::Body x){
{
		HX_STACK_FRAME("zpp_nape.space.ZPP_Space","bodies_subber",0x05274cb8,"zpp_nape.space.ZPP_Space.bodies_subber","zpp_nape/space/Space.hx",1826,0x2b65ed03)
		HX_STACK_THIS(this)
		HX_STACK_ARG(x,"x")
		HX_STACK_LINE(1827)
		::zpp_nape::phys::ZPP_Body tmp = x->zpp_inner;		HX_STACK_VAR(tmp,"tmp");
		HX_STACK_LINE(1827)
		this->remBody(tmp,null());
	}
return null();
}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Space_obj,bodies_subber,(void))

Void ZPP_Space_obj::bodies_modifiable( ){
{
		HX_STACK_FRAME("zpp_nape.space.ZPP_Space","bodies_modifiable",0x24b4786d,"zpp_nape.space.ZPP_Space.bodies_modifiable","zpp_nape/space/Space.hx",1830,0x2b65ed03)
		HX_STACK_THIS(this)
		HX_STACK_LINE(1831)
		bool tmp = this->midstep;		HX_STACK_VAR(tmp,"tmp");
		HX_STACK_LINE(1831)
		if ((tmp)){
			HX_STACK_LINE(1831)
			HX_STACK_DO_THROW(HX_HCSTRING("Error: Space::bodies cannot be set during space step()","\x00","\x52","\x4b","\xf6"));
		}
	}
return null();
}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Space_obj,bodies_modifiable,(void))

bool ZPP_Space_obj::compounds_adder( ::nape::phys::Compound x){
	HX_STACK_FRAME("zpp_nape.space.ZPP_Space","compounds_adder",0x5d387601,"zpp_nape.space.ZPP_Space.compounds_adder","zpp_nape/space/Space.hx",1834,0x2b65ed03)
	HX_STACK_THIS(this)
	HX_STACK_ARG(x,"x")
	HX_STACK_LINE(1836)
	::zpp_nape::phys::ZPP_Compound tmp = x->zpp_inner->compound;		HX_STACK_VAR(tmp,"tmp");
	HX_STACK_LINE(1836)
	bool tmp1 = (tmp != null());		HX_STACK_VAR(tmp1,"tmp1");
	HX_STACK_LINE(1836)
	if ((tmp1)){
		HX_STACK_LINE(1836)
		HX_STACK_DO_THROW(HX_HCSTRING("Error: Cannot set the space of an inner Compound, only the root Compound space can be set","\xc0","\x8a","\x2d","\x1a"));
	}
	HX_STACK_LINE(1838)
	::zpp_nape::space::ZPP_Space tmp2 = x->zpp_inner->space;		HX_STACK_VAR(tmp2,"tmp2");
	HX_STACK_LINE(1838)
	bool tmp3 = (tmp2 != hx::ObjectPtr<OBJ_>(this));		HX_STACK_VAR(tmp3,"tmp3");
	HX_STACK_LINE(1838)
	if ((tmp3)){
		HX_STACK_LINE(1839)
		::zpp_nape::space::ZPP_Space tmp4 = x->zpp_inner->space;		HX_STACK_VAR(tmp4,"tmp4");
		HX_STACK_LINE(1839)
		bool tmp5 = (tmp4 != null());		HX_STACK_VAR(tmp5,"tmp5");
		HX_STACK_LINE(1839)
		if ((tmp5)){
			HX_STACK_LINE(1839)
			::zpp_nape::space::ZPP_Space tmp6 = x->zpp_inner->space;		HX_STACK_VAR(tmp6,"tmp6");
			HX_STACK_LINE(1839)
			::nape::phys::Compound tmp7 = x;		HX_STACK_VAR(tmp7,"tmp7");
			HX_STACK_LINE(1839)
			tmp6->wrap_compounds->remove(tmp7);
		}
		HX_STACK_LINE(1840)
		::zpp_nape::phys::ZPP_Compound tmp6 = x->zpp_inner;		HX_STACK_VAR(tmp6,"tmp6");
		HX_STACK_LINE(1840)
		this->addCompound(tmp6);
		HX_STACK_LINE(1841)
		return true;
	}
	else{
		HX_STACK_LINE(1843)
		return false;
	}
	HX_STACK_LINE(1838)
	return false;
}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Space_obj,compounds_adder,return )

Void ZPP_Space_obj::compounds_subber( ::nape::phys::Compound x){
{
		HX_STACK_FRAME("zpp_nape.space.ZPP_Space","compounds_subber",0x2f16673c,"zpp_nape.space.ZPP_Space.compounds_subber","zpp_nape/space/Space.hx",1845,0x2b65ed03)
		HX_STACK_THIS(this)
		HX_STACK_ARG(x,"x")
		HX_STACK_LINE(1846)
		::zpp_nape::phys::ZPP_Compound tmp = x->zpp_inner;		HX_STACK_VAR(tmp,"tmp");
		HX_STACK_LINE(1846)
		this->remCompound(tmp);
	}
return null();
}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Space_obj,compounds_subber,(void))

Void ZPP_Space_obj::compounds_modifiable( ){
{
		HX_STACK_FRAME("zpp_nape.space.ZPP_Space","compounds_modifiable",0xde1d24f1,"zpp_nape.space.ZPP_Space.compounds_modifiable","zpp_nape/space/Space.hx",1849,0x2b65ed03)
		HX_STACK_THIS(this)
		HX_STACK_LINE(1850)
		bool tmp = this->midstep;		HX_STACK_VAR(tmp,"tmp");
		HX_STACK_LINE(1850)
		if ((tmp)){
			HX_STACK_LINE(1850)
			HX_STACK_DO_THROW(HX_HCSTRING("Error: Space::compounds cannot be set during space step()","\x78","\xbd","\x0e","\xf1"));
		}
	}
return null();
}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Space_obj,compounds_modifiable,(void))

bool ZPP_Space_obj::constraints_adder( ::nape::constraint::Constraint x){
	HX_STACK_FRAME("zpp_nape.space.ZPP_Space","constraints_adder",0xe3b201cf,"zpp_nape.space.ZPP_Space.constraints_adder","zpp_nape/space/Space.hx",1853,0x2b65ed03)
	HX_STACK_THIS(this)
	HX_STACK_ARG(x,"x")
	HX_STACK_LINE(1855)
	::zpp_nape::phys::ZPP_Compound tmp = x->zpp_inner->compound;		HX_STACK_VAR(tmp,"tmp");
	HX_STACK_LINE(1855)
	bool tmp1 = (tmp != null());		HX_STACK_VAR(tmp1,"tmp1");
	HX_STACK_LINE(1855)
	if ((tmp1)){
		HX_STACK_LINE(1855)
		HX_STACK_DO_THROW(HX_HCSTRING("Error: Cannot set the space of a Constraint belonging to a Compound, only the root Compound space can be set","\x94","\x3c","\xa3","\x5d"));
	}
	HX_STACK_LINE(1857)
	::zpp_nape::space::ZPP_Space tmp2 = x->zpp_inner->space;		HX_STACK_VAR(tmp2,"tmp2");
	HX_STACK_LINE(1857)
	bool tmp3 = (tmp2 != hx::ObjectPtr<OBJ_>(this));		HX_STACK_VAR(tmp3,"tmp3");
	HX_STACK_LINE(1857)
	if ((tmp3)){
		HX_STACK_LINE(1858)
		::zpp_nape::space::ZPP_Space tmp4 = x->zpp_inner->space;		HX_STACK_VAR(tmp4,"tmp4");
		HX_STACK_LINE(1858)
		bool tmp5 = (tmp4 != null());		HX_STACK_VAR(tmp5,"tmp5");
		HX_STACK_LINE(1858)
		if ((tmp5)){
			HX_STACK_LINE(1858)
			::zpp_nape::space::ZPP_Space tmp6 = x->zpp_inner->space;		HX_STACK_VAR(tmp6,"tmp6");
			HX_STACK_LINE(1858)
			::zpp_nape::space::ZPP_Space tmp7 = tmp6->outer->zpp_inner;		HX_STACK_VAR(tmp7,"tmp7");
			HX_STACK_LINE(1858)
			::nape::constraint::Constraint tmp8 = x;		HX_STACK_VAR(tmp8,"tmp8");
			HX_STACK_LINE(1858)
			tmp7->wrap_constraints->remove(tmp8);
		}
		HX_STACK_LINE(1859)
		::zpp_nape::constraint::ZPP_Constraint tmp6 = x->zpp_inner;		HX_STACK_VAR(tmp6,"tmp6");
		HX_STACK_LINE(1859)
		this->addConstraint(tmp6);
		HX_STACK_LINE(1860)
		return true;
	}
	else{
		HX_STACK_LINE(1862)
		return false;
	}
	HX_STACK_LINE(1857)
	return false;
}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Space_obj,constraints_adder,return )

Void ZPP_Space_obj::constraints_subber( ::nape::constraint::Constraint x){
{
		HX_STACK_FRAME("zpp_nape.space.ZPP_Space","constraints_subber",0x52f72fae,"zpp_nape.space.ZPP_Space.constraints_subber","zpp_nape/space/Space.hx",1864,0x2b65ed03)
		HX_STACK_THIS(this)
		HX_STACK_ARG(x,"x")
		HX_STACK_LINE(1865)
		::zpp_nape::constraint::ZPP_Constraint tmp = x->zpp_inner;		HX_STACK_VAR(tmp,"tmp");
		HX_STACK_LINE(1865)
		this->remConstraint(tmp);
	}
return null();
}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Space_obj,constraints_subber,(void))

Void ZPP_Space_obj::constraints_modifiable( ){
{
		HX_STACK_FRAME("zpp_nape.space.ZPP_Space","constraints_modifiable",0x39b00e63,"zpp_nape.space.ZPP_Space.constraints_modifiable","zpp_nape/space/Space.hx",1868,0x2b65ed03)
		HX_STACK_THIS(this)
		HX_STACK_LINE(1869)
		bool tmp = this->midstep;		HX_STACK_VAR(tmp,"tmp");
		HX_STACK_LINE(1869)
		if ((tmp)){
			HX_STACK_LINE(1869)
			HX_STACK_DO_THROW(HX_HCSTRING("Error: Space::constraints cannot be set during space step()","\xc6","\x15","\xe4","\x11"));
		}
	}
return null();
}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Space_obj,constraints_modifiable,(void))

bool ZPP_Space_obj::listeners_adder( ::nape::callbacks::Listener x){
	HX_STACK_FRAME("zpp_nape.space.ZPP_Space","listeners_adder",0x1f0ddc18,"zpp_nape.space.ZPP_Space.listeners_adder","zpp_nape/space/Space.hx",1872,0x2b65ed03)
	HX_STACK_THIS(this)
	HX_STACK_ARG(x,"x")
	HX_STACK_LINE(1873)
	::zpp_nape::space::ZPP_Space tmp = x->zpp_inner->space;		HX_STACK_VAR(tmp,"tmp");
	HX_STACK_LINE(1873)
	bool tmp1 = (tmp != hx::ObjectPtr<OBJ_>(this));		HX_STACK_VAR(tmp1,"tmp1");
	HX_STACK_LINE(1873)
	if ((tmp1)){
		HX_STACK_LINE(1874)
		::zpp_nape::space::ZPP_Space tmp2 = x->zpp_inner->space;		HX_STACK_VAR(tmp2,"tmp2");
		HX_STACK_LINE(1874)
		bool tmp3 = (tmp2 != null());		HX_STACK_VAR(tmp3,"tmp3");
		HX_STACK_LINE(1874)
		if ((tmp3)){
			HX_STACK_LINE(1874)
			::zpp_nape::space::ZPP_Space tmp4 = x->zpp_inner->space;		HX_STACK_VAR(tmp4,"tmp4");
			HX_STACK_LINE(1874)
			::zpp_nape::space::ZPP_Space tmp5 = tmp4->outer->zpp_inner;		HX_STACK_VAR(tmp5,"tmp5");
			HX_STACK_LINE(1874)
			::nape::callbacks::Listener tmp6 = x;		HX_STACK_VAR(tmp6,"tmp6");
			HX_STACK_LINE(1874)
			tmp5->wrap_listeners->remove(tmp6);
		}
		HX_STACK_LINE(1875)
		::zpp_nape::callbacks::ZPP_Listener tmp4 = x->zpp_inner;		HX_STACK_VAR(tmp4,"tmp4");
		HX_STACK_LINE(1875)
		this->addListener(tmp4);
		HX_STACK_LINE(1876)
		return true;
	}
	else{
		HX_STACK_LINE(1878)
		return false;
	}
	HX_STACK_LINE(1873)
	return false;
}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Space_obj,listeners_adder,return )

Void ZPP_Space_obj::listeners_subber( ::nape::callbacks::Listener x){
{
		HX_STACK_FRAME("zpp_nape.space.ZPP_Space","listeners_subber",0x07fa5545,"zpp_nape.space.ZPP_Space.listeners_subber","zpp_nape/space/Space.hx",1880,0x2b65ed03)
		HX_STACK_THIS(this)
		HX_STACK_ARG(x,"x")
		HX_STACK_LINE(1881)
		::zpp_nape::callbacks::ZPP_Listener tmp = x->zpp_inner;		HX_STACK_VAR(tmp,"tmp");
		HX_STACK_LINE(1881)
		this->remListener(tmp);
	}
return null();
}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Space_obj,listeners_subber,(void))

Void ZPP_Space_obj::listeners_modifiable( ){
{
		HX_STACK_FRAME("zpp_nape.space.ZPP_Space","listeners_modifiable",0xf12b4b7a,"zpp_nape.space.ZPP_Space.listeners_modifiable","zpp_nape/space/Space.hx",1884,0x2b65ed03)
		HX_STACK_THIS(this)
		HX_STACK_LINE(1885)
		bool tmp = this->midstep;		HX_STACK_VAR(tmp,"tmp");
		HX_STACK_LINE(1885)
		if ((tmp)){
			HX_STACK_LINE(1885)
			HX_STACK_DO_THROW(HX_HCSTRING("Error: Space::listeners cannot be set during space step()","\x0f","\x48","\x99","\xb5"));
		}
	}
return null();
}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Space_obj,listeners_modifiable,(void))

Void ZPP_Space_obj::revoke_listener( ::zpp_nape::callbacks::ZPP_InteractionListener x){
{
		HX_STACK_FRAME("zpp_nape.space.ZPP_Space","revoke_listener",0x651e3217,"zpp_nape.space.ZPP_Space.revoke_listener","zpp_nape/space/Space.hx",1997,0x2b65ed03)
		HX_STACK_THIS(this)
		HX_STACK_ARG(x,"x")
	}
return null();
}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Space_obj,revoke_listener,(void))

Void ZPP_Space_obj::unrevoke_listener( ::zpp_nape::callbacks::ZPP_InteractionListener x){
{
		HX_STACK_FRAME("zpp_nape.space.ZPP_Space","unrevoke_listener",0xf8c53e5e,"zpp_nape.space.ZPP_Space.unrevoke_listener","zpp_nape/space/Space.hx",2000,0x2b65ed03)
		HX_STACK_THIS(this)
		HX_STACK_ARG(x,"x")
	}
return null();
}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Space_obj,unrevoke_listener,(void))

Void ZPP_Space_obj::addListener( ::zpp_nape::callbacks::ZPP_Listener x){
{
		HX_STACK_FRAME("zpp_nape.space.ZPP_Space","addListener",0x0689fbff,"zpp_nape.space.ZPP_Space.addListener","zpp_nape/space/Space.hx",2001,0x2b65ed03)
		HX_STACK_THIS(this)
		HX_STACK_ARG(x,"x")
		HX_STACK_LINE(2002)
		x->space = hx::ObjectPtr<OBJ_>(this);
		HX_STACK_LINE(2003)
		x->addedToSpace();
		HX_STACK_LINE(2004)
		bool tmp = (x->interaction != null());		HX_STACK_VAR(tmp,"tmp");
		HX_STACK_LINE(2004)
		if ((tmp)){
			HX_STACK_LINE(2005)
			Dynamic();
		}
	}
return null();
}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Space_obj,addListener,(void))

Void ZPP_Space_obj::remListener( ::zpp_nape::callbacks::ZPP_Listener x){
{
		HX_STACK_FRAME("zpp_nape.space.ZPP_Space","remListener",0xc0164438,"zpp_nape.space.ZPP_Space.remListener","zpp_nape/space/Space.hx",2008,0x2b65ed03)
		HX_STACK_THIS(this)
		HX_STACK_ARG(x,"x")
		HX_STACK_LINE(2009)
		bool tmp = (x->interaction != null());		HX_STACK_VAR(tmp,"tmp");
		HX_STACK_LINE(2009)
		if ((tmp)){
			HX_STACK_LINE(2010)
			Dynamic();
		}
		HX_STACK_LINE(2012)
		x->removedFromSpace();
		HX_STACK_LINE(2013)
		x->space = null();
	}
return null();
}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Space_obj,remListener,(void))

Void ZPP_Space_obj::add_callbackset( ::zpp_nape::space::ZPP_CallbackSet cb){
{
		HX_STACK_FRAME("zpp_nape.space.ZPP_Space","add_callbackset",0x4d0929e9,"zpp_nape.space.ZPP_Space.add_callbackset","zpp_nape/space/Space.hx",2015,0x2b65ed03)
		HX_STACK_THIS(this)
		HX_STACK_ARG(cb,"cb")
		HX_STACK_LINE(2024)
		{
			HX_STACK_LINE(2024)
			::zpp_nape::util::ZNPList_ZPP_CallbackSet tmp = cb->int1->cbsets;		HX_STACK_VAR(tmp,"tmp");
			HX_STACK_LINE(2024)
			::zpp_nape::util::ZNPList_ZPP_CallbackSet _this = tmp;		HX_STACK_VAR(_this,"_this");
			HX_STACK_LINE(2024)
			::zpp_nape::util::ZNPNode_ZPP_CallbackSet tmp1;		HX_STACK_VAR(tmp1,"tmp1");
			HX_STACK_LINE(2024)
			{
				HX_STACK_LINE(2024)
				::zpp_nape::util::ZNPNode_ZPP_CallbackSet ret;		HX_STACK_VAR(ret,"ret");
				HX_STACK_LINE(2024)
				{
					HX_STACK_LINE(2024)
					::zpp_nape::util::ZNPNode_ZPP_CallbackSet tmp2 = ::zpp_nape::util::ZNPNode_ZPP_CallbackSet_obj::zpp_pool;		HX_STACK_VAR(tmp2,"tmp2");
					HX_STACK_LINE(2024)
					bool tmp3 = (tmp2 == null());		HX_STACK_VAR(tmp3,"tmp3");
					HX_STACK_LINE(2024)
					if ((tmp3)){
						HX_STACK_LINE(2024)
						::zpp_nape::util::ZNPNode_ZPP_CallbackSet tmp4 = ::zpp_nape::util::ZNPNode_ZPP_CallbackSet_obj::__new();		HX_STACK_VAR(tmp4,"tmp4");
						HX_STACK_LINE(2024)
						ret = tmp4;
					}
					else{
						HX_STACK_LINE(2024)
						::zpp_nape::util::ZNPNode_ZPP_CallbackSet tmp4 = ::zpp_nape::util::ZNPNode_ZPP_CallbackSet_obj::zpp_pool;		HX_STACK_VAR(tmp4,"tmp4");
						HX_STACK_LINE(2024)
						ret = tmp4;
						HX_STACK_LINE(2024)
						::zpp_nape::util::ZNPNode_ZPP_CallbackSet_obj::zpp_pool = ret->next;
						HX_STACK_LINE(2024)
						ret->next = null();
					}
					HX_STACK_LINE(2024)
					Dynamic();
				}
				HX_STACK_LINE(2024)
				ret->elt = cb;
				HX_STACK_LINE(2024)
				tmp1 = ret;
			}
			HX_STACK_LINE(2024)
			::zpp_nape::util::ZNPNode_ZPP_CallbackSet temp = tmp1;		HX_STACK_VAR(temp,"temp");
			HX_STACK_LINE(2024)
			temp->next = _this->head;
			HX_STACK_LINE(2024)
			_this->head = temp;
			HX_STACK_LINE(2024)
			_this->modified = true;
			HX_STACK_LINE(2024)
			(_this->length)++;
			HX_STACK_LINE(2024)
			cb;
		}
		HX_STACK_LINE(2025)
		{
			HX_STACK_LINE(2025)
			::zpp_nape::util::ZNPList_ZPP_CallbackSet tmp = cb->int2->cbsets;		HX_STACK_VAR(tmp,"tmp");
			HX_STACK_LINE(2025)
			::zpp_nape::util::ZNPList_ZPP_CallbackSet _this = tmp;		HX_STACK_VAR(_this,"_this");
			HX_STACK_LINE(2025)
			::zpp_nape::util::ZNPNode_ZPP_CallbackSet tmp1;		HX_STACK_VAR(tmp1,"tmp1");
			HX_STACK_LINE(2025)
			{
				HX_STACK_LINE(2025)
				::zpp_nape::util::ZNPNode_ZPP_CallbackSet ret;		HX_STACK_VAR(ret,"ret");
				HX_STACK_LINE(2025)
				{
					HX_STACK_LINE(2025)
					::zpp_nape::util::ZNPNode_ZPP_CallbackSet tmp2 = ::zpp_nape::util::ZNPNode_ZPP_CallbackSet_obj::zpp_pool;		HX_STACK_VAR(tmp2,"tmp2");
					HX_STACK_LINE(2025)
					bool tmp3 = (tmp2 == null());		HX_STACK_VAR(tmp3,"tmp3");
					HX_STACK_LINE(2025)
					if ((tmp3)){
						HX_STACK_LINE(2025)
						::zpp_nape::util::ZNPNode_ZPP_CallbackSet tmp4 = ::zpp_nape::util::ZNPNode_ZPP_CallbackSet_obj::__new();		HX_STACK_VAR(tmp4,"tmp4");
						HX_STACK_LINE(2025)
						ret = tmp4;
					}
					else{
						HX_STACK_LINE(2025)
						::zpp_nape::util::ZNPNode_ZPP_CallbackSet tmp4 = ::zpp_nape::util::ZNPNode_ZPP_CallbackSet_obj::zpp_pool;		HX_STACK_VAR(tmp4,"tmp4");
						HX_STACK_LINE(2025)
						ret = tmp4;
						HX_STACK_LINE(2025)
						::zpp_nape::util::ZNPNode_ZPP_CallbackSet_obj::zpp_pool = ret->next;
						HX_STACK_LINE(2025)
						ret->next = null();
					}
					HX_STACK_LINE(2025)
					Dynamic();
				}
				HX_STACK_LINE(2025)
				ret->elt = cb;
				HX_STACK_LINE(2025)
				tmp1 = ret;
			}
			HX_STACK_LINE(2025)
			::zpp_nape::util::ZNPNode_ZPP_CallbackSet temp = tmp1;		HX_STACK_VAR(temp,"temp");
			HX_STACK_LINE(2025)
			temp->next = _this->head;
			HX_STACK_LINE(2025)
			_this->head = temp;
			HX_STACK_LINE(2025)
			_this->modified = true;
			HX_STACK_LINE(2025)
			(_this->length)++;
			HX_STACK_LINE(2025)
			cb;
		}
		HX_STACK_LINE(2026)
		{
			HX_STACK_LINE(2026)
			::zpp_nape::space::ZPP_CallbackSet tmp = this->callbackset_list;		HX_STACK_VAR(tmp,"tmp");
			HX_STACK_LINE(2026)
			::zpp_nape::space::ZPP_CallbackSet _this = tmp;		HX_STACK_VAR(_this,"_this");
			HX_STACK_LINE(2026)
			::zpp_nape::space::ZPP_CallbackSet tmp1;		HX_STACK_VAR(tmp1,"tmp1");
			HX_STACK_LINE(2026)
			{
				HX_STACK_LINE(2026)
				cb->_inuse = true;
				HX_STACK_LINE(2026)
				tmp1 = cb;
			}
			HX_STACK_LINE(2026)
			::zpp_nape::space::ZPP_CallbackSet temp = tmp1;		HX_STACK_VAR(temp,"temp");
			HX_STACK_LINE(2026)
			temp->next = _this->next;
			HX_STACK_LINE(2026)
			_this->next = temp;
			HX_STACK_LINE(2026)
			_this->modified = true;
			HX_STACK_LINE(2026)
			(_this->length)++;
			HX_STACK_LINE(2026)
			cb;
		}
	}
return null();
}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Space_obj,add_callbackset,(void))

Void ZPP_Space_obj::remove_callbackset( ::zpp_nape::space::ZPP_CallbackSet cb){
{
		HX_STACK_FRAME("zpp_nape.space.ZPP_Space","remove_callbackset",0xa7750438,"zpp_nape.space.ZPP_Space.remove_callbackset","zpp_nape/space/Space.hx",2028,0x2b65ed03)
		HX_STACK_THIS(this)
		HX_STACK_ARG(cb,"cb")
		HX_STACK_LINE(2029)
		cb->lazydel = true;
		HX_STACK_LINE(2030)
		{
			HX_STACK_LINE(2030)
			::zpp_nape::util::ZNPList_ZPP_CallbackSet tmp = cb->int1->cbsets;		HX_STACK_VAR(tmp,"tmp");
			HX_STACK_LINE(2030)
			::zpp_nape::util::ZNPList_ZPP_CallbackSet _this = tmp;		HX_STACK_VAR(_this,"_this");
			HX_STACK_LINE(2030)
			{
				HX_STACK_LINE(2030)
				::zpp_nape::util::ZNPNode_ZPP_CallbackSet pre = null();		HX_STACK_VAR(pre,"pre");
				HX_STACK_LINE(2030)
				::zpp_nape::util::ZNPNode_ZPP_CallbackSet cur = _this->head;		HX_STACK_VAR(cur,"cur");
				HX_STACK_LINE(2030)
				bool ret = false;		HX_STACK_VAR(ret,"ret");
				HX_STACK_LINE(2030)
				while((true)){
					HX_STACK_LINE(2030)
					bool tmp1 = (cur != null());		HX_STACK_VAR(tmp1,"tmp1");
					HX_STACK_LINE(2030)
					bool tmp2 = !(tmp1);		HX_STACK_VAR(tmp2,"tmp2");
					HX_STACK_LINE(2030)
					if ((tmp2)){
						HX_STACK_LINE(2030)
						break;
					}
					HX_STACK_LINE(2030)
					bool tmp3 = (cur->elt == cb);		HX_STACK_VAR(tmp3,"tmp3");
					HX_STACK_LINE(2030)
					if ((tmp3)){
						HX_STACK_LINE(2030)
						{
							HX_STACK_LINE(2030)
							::zpp_nape::util::ZNPNode_ZPP_CallbackSet old;		HX_STACK_VAR(old,"old");
							HX_STACK_LINE(2030)
							::zpp_nape::util::ZNPNode_ZPP_CallbackSet ret1;		HX_STACK_VAR(ret1,"ret1");
							HX_STACK_LINE(2030)
							bool tmp4 = (pre == null());		HX_STACK_VAR(tmp4,"tmp4");
							HX_STACK_LINE(2030)
							if ((tmp4)){
								HX_STACK_LINE(2030)
								old = _this->head;
								HX_STACK_LINE(2030)
								ret1 = old->next;
								HX_STACK_LINE(2030)
								_this->head = ret1;
								HX_STACK_LINE(2030)
								bool tmp5 = (_this->head == null());		HX_STACK_VAR(tmp5,"tmp5");
								HX_STACK_LINE(2030)
								if ((tmp5)){
									HX_STACK_LINE(2030)
									_this->pushmod = true;
								}
							}
							else{
								HX_STACK_LINE(2030)
								old = pre->next;
								HX_STACK_LINE(2030)
								ret1 = old->next;
								HX_STACK_LINE(2030)
								pre->next = ret1;
								HX_STACK_LINE(2030)
								bool tmp5 = (ret1 == null());		HX_STACK_VAR(tmp5,"tmp5");
								HX_STACK_LINE(2030)
								if ((tmp5)){
									HX_STACK_LINE(2030)
									_this->pushmod = true;
								}
							}
							HX_STACK_LINE(2030)
							{
								HX_STACK_LINE(2030)
								::zpp_nape::util::ZNPNode_ZPP_CallbackSet o = old;		HX_STACK_VAR(o,"o");
								HX_STACK_LINE(2030)
								o->elt = null();
								HX_STACK_LINE(2030)
								::zpp_nape::util::ZNPNode_ZPP_CallbackSet tmp5 = ::zpp_nape::util::ZNPNode_ZPP_CallbackSet_obj::zpp_pool;		HX_STACK_VAR(tmp5,"tmp5");
								HX_STACK_LINE(2030)
								o->next = tmp5;
								HX_STACK_LINE(2030)
								::zpp_nape::util::ZNPNode_ZPP_CallbackSet_obj::zpp_pool = o;
							}
							HX_STACK_LINE(2030)
							_this->modified = true;
							HX_STACK_LINE(2030)
							(_this->length)--;
							HX_STACK_LINE(2030)
							_this->pushmod = true;
							HX_STACK_LINE(2030)
							ret1;
						}
						HX_STACK_LINE(2030)
						ret = true;
						HX_STACK_LINE(2030)
						break;
					}
					HX_STACK_LINE(2030)
					pre = cur;
					HX_STACK_LINE(2030)
					cur = cur->next;
				}
				HX_STACK_LINE(2030)
				ret;
			}
		}
		HX_STACK_LINE(2031)
		{
			HX_STACK_LINE(2031)
			::zpp_nape::util::ZNPList_ZPP_CallbackSet tmp = cb->int2->cbsets;		HX_STACK_VAR(tmp,"tmp");
			HX_STACK_LINE(2031)
			::zpp_nape::util::ZNPList_ZPP_CallbackSet _this = tmp;		HX_STACK_VAR(_this,"_this");
			HX_STACK_LINE(2031)
			{
				HX_STACK_LINE(2031)
				::zpp_nape::util::ZNPNode_ZPP_CallbackSet pre = null();		HX_STACK_VAR(pre,"pre");
				HX_STACK_LINE(2031)
				::zpp_nape::util::ZNPNode_ZPP_CallbackSet cur = _this->head;		HX_STACK_VAR(cur,"cur");
				HX_STACK_LINE(2031)
				bool ret = false;		HX_STACK_VAR(ret,"ret");
				HX_STACK_LINE(2031)
				while((true)){
					HX_STACK_LINE(2031)
					bool tmp1 = (cur != null());		HX_STACK_VAR(tmp1,"tmp1");
					HX_STACK_LINE(2031)
					bool tmp2 = !(tmp1);		HX_STACK_VAR(tmp2,"tmp2");
					HX_STACK_LINE(2031)
					if ((tmp2)){
						HX_STACK_LINE(2031)
						break;
					}
					HX_STACK_LINE(2031)
					bool tmp3 = (cur->elt == cb);		HX_STACK_VAR(tmp3,"tmp3");
					HX_STACK_LINE(2031)
					if ((tmp3)){
						HX_STACK_LINE(2031)
						{
							HX_STACK_LINE(2031)
							::zpp_nape::util::ZNPNode_ZPP_CallbackSet old;		HX_STACK_VAR(old,"old");
							HX_STACK_LINE(2031)
							::zpp_nape::util::ZNPNode_ZPP_CallbackSet ret1;		HX_STACK_VAR(ret1,"ret1");
							HX_STACK_LINE(2031)
							bool tmp4 = (pre == null());		HX_STACK_VAR(tmp4,"tmp4");
							HX_STACK_LINE(2031)
							if ((tmp4)){
								HX_STACK_LINE(2031)
								old = _this->head;
								HX_STACK_LINE(2031)
								ret1 = old->next;
								HX_STACK_LINE(2031)
								_this->head = ret1;
								HX_STACK_LINE(2031)
								bool tmp5 = (_this->head == null());		HX_STACK_VAR(tmp5,"tmp5");
								HX_STACK_LINE(2031)
								if ((tmp5)){
									HX_STACK_LINE(2031)
									_this->pushmod = true;
								}
							}
							else{
								HX_STACK_LINE(2031)
								old = pre->next;
								HX_STACK_LINE(2031)
								ret1 = old->next;
								HX_STACK_LINE(2031)
								pre->next = ret1;
								HX_STACK_LINE(2031)
								bool tmp5 = (ret1 == null());		HX_STACK_VAR(tmp5,"tmp5");
								HX_STACK_LINE(2031)
								if ((tmp5)){
									HX_STACK_LINE(2031)
									_this->pushmod = true;
								}
							}
							HX_STACK_LINE(2031)
							{
								HX_STACK_LINE(2031)
								::zpp_nape::util::ZNPNode_ZPP_CallbackSet o = old;		HX_STACK_VAR(o,"o");
								HX_STACK_LINE(2031)
								o->elt = null();
								HX_STACK_LINE(2031)
								::zpp_nape::util::ZNPNode_ZPP_CallbackSet tmp5 = ::zpp_nape::util::ZNPNode_ZPP_CallbackSet_obj::zpp_pool;		HX_STACK_VAR(tmp5,"tmp5");
								HX_STACK_LINE(2031)
								o->next = tmp5;
								HX_STACK_LINE(2031)
								::zpp_nape::util::ZNPNode_ZPP_CallbackSet_obj::zpp_pool = o;
							}
							HX_STACK_LINE(2031)
							_this->modified = true;
							HX_STACK_LINE(2031)
							(_this->length)--;
							HX_STACK_LINE(2031)
							_this->pushmod = true;
							HX_STACK_LINE(2031)
							ret1;
						}
						HX_STACK_LINE(2031)
						ret = true;
						HX_STACK_LINE(2031)
						break;
					}
					HX_STACK_LINE(2031)
					pre = cur;
					HX_STACK_LINE(2031)
					cur = cur->next;
				}
				HX_STACK_LINE(2031)
				ret;
			}
		}
	}
return null();
}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Space_obj,remove_callbackset,(void))

Void ZPP_Space_obj::transmitType( ::zpp_nape::phys::ZPP_Body p,int new_type){
{
		HX_STACK_FRAME("zpp_nape.space.ZPP_Space","transmitType",0xd12f15c0,"zpp_nape.space.ZPP_Space.transmitType","zpp_nape/space/Space.hx",2033,0x2b65ed03)
		HX_STACK_THIS(this)
		HX_STACK_ARG(p,"p")
		HX_STACK_ARG(new_type,"new_type")
		HX_STACK_LINE(2034)
		{
			HX_STACK_LINE(2035)
			::zpp_nape::phys::ZPP_Body o = p;		HX_STACK_VAR(o,"o");
			HX_STACK_LINE(2044)
			bool tmp = o->world;		HX_STACK_VAR(tmp,"tmp");
			HX_STACK_LINE(2044)
			bool tmp1 = !(tmp);		HX_STACK_VAR(tmp1,"tmp1");
			HX_STACK_LINE(2044)
			if ((tmp1)){
				HX_STACK_LINE(2053)
				int tmp2 = this->stamp;		HX_STACK_VAR(tmp2,"tmp2");
				HX_STACK_LINE(2053)
				bool tmp3 = this->midstep;		HX_STACK_VAR(tmp3,"tmp3");
				HX_STACK_LINE(2053)
				int tmp4;		HX_STACK_VAR(tmp4,"tmp4");
				HX_STACK_LINE(2053)
				if ((tmp3)){
					HX_STACK_LINE(2053)
					tmp4 = (int)0;
				}
				else{
					HX_STACK_LINE(2053)
					tmp4 = (int)1;
				}
				HX_STACK_LINE(2053)
				int tmp5 = (tmp2 + tmp4);		HX_STACK_VAR(tmp5,"tmp5");
				HX_STACK_LINE(2053)
				o->component->waket = tmp5;
				HX_STACK_LINE(2054)
				int tmp6 = o->type;		HX_STACK_VAR(tmp6,"tmp6");
				HX_STACK_LINE(2054)
				int tmp7 = ::zpp_nape::util::ZPP_Flags_obj::id_BodyType_KINEMATIC;		HX_STACK_VAR(tmp7,"tmp7");
				HX_STACK_LINE(2054)
				bool tmp8 = (tmp6 == tmp7);		HX_STACK_VAR(tmp8,"tmp8");
				HX_STACK_LINE(2054)
				if ((tmp8)){
					HX_STACK_LINE(2054)
					o->kinematicDelaySleep = true;
				}
				HX_STACK_LINE(2055)
				bool tmp9 = o->component->sleeping;		HX_STACK_VAR(tmp9,"tmp9");
				HX_STACK_LINE(2055)
				if ((tmp9)){
					HX_STACK_LINE(2056)
					::zpp_nape::phys::ZPP_Body tmp10 = o;		HX_STACK_VAR(tmp10,"tmp10");
					HX_STACK_LINE(2056)
					this->really_wake(tmp10,false);
				}
			}
		}
		HX_STACK_LINE(2060)
		int tmp = p->type;		HX_STACK_VAR(tmp,"tmp");
		HX_STACK_LINE(2060)
		int tmp1 = ::zpp_nape::util::ZPP_Flags_obj::id_BodyType_DYNAMIC;		HX_STACK_VAR(tmp1,"tmp1");
		HX_STACK_LINE(2060)
		bool tmp2 = (tmp == tmp1);		HX_STACK_VAR(tmp2,"tmp2");
		HX_STACK_LINE(2060)
		if ((tmp2)){
			HX_STACK_LINE(2061)
			::zpp_nape::util::ZNPList_ZPP_Body tmp3 = this->live;		HX_STACK_VAR(tmp3,"tmp3");
			HX_STACK_LINE(2061)
			::zpp_nape::phys::ZPP_Body tmp4 = p;		HX_STACK_VAR(tmp4,"tmp4");
			HX_STACK_LINE(2061)
			tmp3->remove(tmp4);
		}
		else{
			HX_STACK_LINE(2063)
			int tmp3 = p->type;		HX_STACK_VAR(tmp3,"tmp3");
			HX_STACK_LINE(2063)
			int tmp4 = ::zpp_nape::util::ZPP_Flags_obj::id_BodyType_KINEMATIC;		HX_STACK_VAR(tmp4,"tmp4");
			HX_STACK_LINE(2063)
			bool tmp5 = (tmp3 == tmp4);		HX_STACK_VAR(tmp5,"tmp5");
			HX_STACK_LINE(2063)
			if ((tmp5)){
				HX_STACK_LINE(2064)
				::zpp_nape::util::ZNPList_ZPP_Body tmp6 = this->kinematics;		HX_STACK_VAR(tmp6,"tmp6");
				HX_STACK_LINE(2064)
				::zpp_nape::phys::ZPP_Body tmp7 = p;		HX_STACK_VAR(tmp7,"tmp7");
				HX_STACK_LINE(2064)
				tmp6->remove(tmp7);
				HX_STACK_LINE(2065)
				::zpp_nape::util::ZNPList_ZPP_Body tmp8 = this->staticsleep;		HX_STACK_VAR(tmp8,"tmp8");
				HX_STACK_LINE(2065)
				::zpp_nape::phys::ZPP_Body tmp9 = p;		HX_STACK_VAR(tmp9,"tmp9");
				HX_STACK_LINE(2065)
				tmp8->remove(tmp9);
			}
			else{
				HX_STACK_LINE(2067)
				int tmp6 = p->type;		HX_STACK_VAR(tmp6,"tmp6");
				HX_STACK_LINE(2067)
				int tmp7 = ::zpp_nape::util::ZPP_Flags_obj::id_BodyType_STATIC;		HX_STACK_VAR(tmp7,"tmp7");
				HX_STACK_LINE(2067)
				bool tmp8 = (tmp6 == tmp7);		HX_STACK_VAR(tmp8,"tmp8");
				HX_STACK_LINE(2067)
				if ((tmp8)){
					HX_STACK_LINE(2068)
					::zpp_nape::util::ZNPList_ZPP_Body tmp9 = this->staticsleep;		HX_STACK_VAR(tmp9,"tmp9");
					HX_STACK_LINE(2068)
					::zpp_nape::phys::ZPP_Body tmp10 = p;		HX_STACK_VAR(tmp10,"tmp10");
					HX_STACK_LINE(2068)
					tmp9->remove(tmp10);
				}
			}
		}
		HX_STACK_LINE(2070)
		p->type = new_type;
		HX_STACK_LINE(2071)
		int tmp3 = p->type;		HX_STACK_VAR(tmp3,"tmp3");
		HX_STACK_LINE(2071)
		int tmp4 = ::zpp_nape::util::ZPP_Flags_obj::id_BodyType_KINEMATIC;		HX_STACK_VAR(tmp4,"tmp4");
		HX_STACK_LINE(2071)
		bool tmp5 = (tmp3 == tmp4);		HX_STACK_VAR(tmp5,"tmp5");
		HX_STACK_LINE(2071)
		if ((tmp5)){
			HX_STACK_LINE(2071)
			::zpp_nape::util::ZNPList_ZPP_Body tmp6 = this->kinematics;		HX_STACK_VAR(tmp6,"tmp6");
			HX_STACK_LINE(2071)
			::zpp_nape::phys::ZPP_Body tmp7 = p;		HX_STACK_VAR(tmp7,"tmp7");
			HX_STACK_LINE(2071)
			tmp6->add(tmp7);
		}
		HX_STACK_LINE(2072)
		int tmp6 = p->type;		HX_STACK_VAR(tmp6,"tmp6");
		HX_STACK_LINE(2072)
		int tmp7 = ::zpp_nape::util::ZPP_Flags_obj::id_BodyType_STATIC;		HX_STACK_VAR(tmp7,"tmp7");
		HX_STACK_LINE(2072)
		bool tmp8 = (tmp6 == tmp7);		HX_STACK_VAR(tmp8,"tmp8");
		HX_STACK_LINE(2072)
		if ((tmp8)){
			HX_STACK_LINE(2072)
			::zpp_nape::phys::ZPP_Body tmp9 = p;		HX_STACK_VAR(tmp9,"tmp9");
			HX_STACK_LINE(2072)
			this->static_validation(tmp9);
		}
		HX_STACK_LINE(2073)
		p->component->sleeping = true;
		HX_STACK_LINE(2074)
		{
			HX_STACK_LINE(2075)
			::zpp_nape::phys::ZPP_Body o = p;		HX_STACK_VAR(o,"o");
			HX_STACK_LINE(2084)
			bool tmp9 = o->world;		HX_STACK_VAR(tmp9,"tmp9");
			HX_STACK_LINE(2084)
			bool tmp10 = !(tmp9);		HX_STACK_VAR(tmp10,"tmp10");
			HX_STACK_LINE(2084)
			if ((tmp10)){
				HX_STACK_LINE(2093)
				int tmp11 = this->stamp;		HX_STACK_VAR(tmp11,"tmp11");
				HX_STACK_LINE(2093)
				bool tmp12 = this->midstep;		HX_STACK_VAR(tmp12,"tmp12");
				HX_STACK_LINE(2093)
				int tmp13;		HX_STACK_VAR(tmp13,"tmp13");
				HX_STACK_LINE(2093)
				if ((tmp12)){
					HX_STACK_LINE(2093)
					tmp13 = (int)0;
				}
				else{
					HX_STACK_LINE(2093)
					tmp13 = (int)1;
				}
				HX_STACK_LINE(2093)
				int tmp14 = (tmp11 + tmp13);		HX_STACK_VAR(tmp14,"tmp14");
				HX_STACK_LINE(2093)
				o->component->waket = tmp14;
				HX_STACK_LINE(2094)
				int tmp15 = o->type;		HX_STACK_VAR(tmp15,"tmp15");
				HX_STACK_LINE(2094)
				int tmp16 = ::zpp_nape::util::ZPP_Flags_obj::id_BodyType_KINEMATIC;		HX_STACK_VAR(tmp16,"tmp16");
				HX_STACK_LINE(2094)
				bool tmp17 = (tmp15 == tmp16);		HX_STACK_VAR(tmp17,"tmp17");
				HX_STACK_LINE(2094)
				if ((tmp17)){
					HX_STACK_LINE(2094)
					o->kinematicDelaySleep = true;
				}
				HX_STACK_LINE(2095)
				bool tmp18 = o->component->sleeping;		HX_STACK_VAR(tmp18,"tmp18");
				HX_STACK_LINE(2095)
				if ((tmp18)){
					HX_STACK_LINE(2096)
					::zpp_nape::phys::ZPP_Body tmp19 = o;		HX_STACK_VAR(tmp19,"tmp19");
					HX_STACK_LINE(2096)
					this->really_wake(tmp19,true);
				}
			}
		}
	}
return null();
}


HX_DEFINE_DYNAMIC_FUNC2(ZPP_Space_obj,transmitType,(void))

Void ZPP_Space_obj::added_shape( ::zpp_nape::shape::ZPP_Shape s,hx::Null< bool >  __o_dontwake){
bool dontwake = __o_dontwake.Default(false);
	HX_STACK_FRAME("zpp_nape.space.ZPP_Space","added_shape",0x3bf3d36c,"zpp_nape.space.ZPP_Space.added_shape","zpp_nape/space/Space.hx",2102,0x2b65ed03)
	HX_STACK_THIS(this)
	HX_STACK_ARG(s,"s")
	HX_STACK_ARG(dontwake,"dontwake")
{
		HX_STACK_LINE(2103)
		bool tmp = dontwake;		HX_STACK_VAR(tmp,"tmp");
		HX_STACK_LINE(2103)
		bool tmp1 = !(tmp);		HX_STACK_VAR(tmp1,"tmp1");
		HX_STACK_LINE(2103)
		if ((tmp1)){
			HX_STACK_LINE(2105)
			::zpp_nape::phys::ZPP_Body o = s->body;		HX_STACK_VAR(o,"o");
			HX_STACK_LINE(2114)
			bool tmp2 = o->world;		HX_STACK_VAR(tmp2,"tmp2");
			HX_STACK_LINE(2114)
			bool tmp3 = !(tmp2);		HX_STACK_VAR(tmp3,"tmp3");
			HX_STACK_LINE(2114)
			if ((tmp3)){
				HX_STACK_LINE(2123)
				int tmp4 = this->stamp;		HX_STACK_VAR(tmp4,"tmp4");
				HX_STACK_LINE(2123)
				bool tmp5 = this->midstep;		HX_STACK_VAR(tmp5,"tmp5");
				HX_STACK_LINE(2123)
				int tmp6;		HX_STACK_VAR(tmp6,"tmp6");
				HX_STACK_LINE(2123)
				if ((tmp5)){
					HX_STACK_LINE(2123)
					tmp6 = (int)0;
				}
				else{
					HX_STACK_LINE(2123)
					tmp6 = (int)1;
				}
				HX_STACK_LINE(2123)
				int tmp7 = (tmp4 + tmp6);		HX_STACK_VAR(tmp7,"tmp7");
				HX_STACK_LINE(2123)
				o->component->waket = tmp7;
				HX_STACK_LINE(2124)
				int tmp8 = o->type;		HX_STACK_VAR(tmp8,"tmp8");
				HX_STACK_LINE(2124)
				int tmp9 = ::zpp_nape::util::ZPP_Flags_obj::id_BodyType_KINEMATIC;		HX_STACK_VAR(tmp9,"tmp9");
				HX_STACK_LINE(2124)
				bool tmp10 = (tmp8 == tmp9);		HX_STACK_VAR(tmp10,"tmp10");
				HX_STACK_LINE(2124)
				if ((tmp10)){
					HX_STACK_LINE(2124)
					o->kinematicDelaySleep = true;
				}
				HX_STACK_LINE(2125)
				bool tmp11 = o->component->sleeping;		HX_STACK_VAR(tmp11,"tmp11");
				HX_STACK_LINE(2125)
				if ((tmp11)){
					HX_STACK_LINE(2126)
					::zpp_nape::phys::ZPP_Body tmp12 = o;		HX_STACK_VAR(tmp12,"tmp12");
					HX_STACK_LINE(2126)
					this->really_wake(tmp12,false);
				}
			}
		}
		HX_STACK_LINE(2131)
		::zpp_nape::space::ZPP_Broadphase tmp2 = this->bphase;		HX_STACK_VAR(tmp2,"tmp2");
		HX_STACK_LINE(2131)
		::zpp_nape::shape::ZPP_Shape tmp3 = s;		HX_STACK_VAR(tmp3,"tmp3");
		HX_STACK_LINE(2131)
		tmp2->insert(tmp3);
		HX_STACK_LINE(2132)
		s->addedToSpace();
	}
return null();
}


HX_DEFINE_DYNAMIC_FUNC2(ZPP_Space_obj,added_shape,(void))

Void ZPP_Space_obj::removed_shape( ::zpp_nape::shape::ZPP_Shape s,hx::Null< bool >  __o_deleting){
bool deleting = __o_deleting.Default(false);
	HX_STACK_FRAME("zpp_nape.space.ZPP_Space","removed_shape",0x687caccc,"zpp_nape.space.ZPP_Space.removed_shape","zpp_nape/space/Space.hx",2134,0x2b65ed03)
	HX_STACK_THIS(this)
	HX_STACK_ARG(s,"s")
	HX_STACK_ARG(deleting,"deleting")
{
		HX_STACK_LINE(2134)
		::zpp_nape::space::ZPP_Space _g = hx::ObjectPtr<OBJ_>(this);		HX_STACK_VAR(_g,"_g");
		HX_STACK_LINE(2135)
		::zpp_nape::phys::ZPP_Body body = s->body;		HX_STACK_VAR(body,"body");
		HX_STACK_LINE(2136)
		bool tmp = deleting;		HX_STACK_VAR(tmp,"tmp");
		HX_STACK_LINE(2136)
		bool tmp1 = !(tmp);		HX_STACK_VAR(tmp1,"tmp1");
		HX_STACK_LINE(2136)
		if ((tmp1)){
			HX_STACK_LINE(2137)
			body->wake();
		}
		HX_STACK_LINE(2139)
		::zpp_nape::util::ZNPNode_ZPP_Arbiter pre = null();		HX_STACK_VAR(pre,"pre");
		HX_STACK_LINE(2140)
		{
			HX_STACK_LINE(2141)
			::zpp_nape::util::ZNPNode_ZPP_Arbiter tmp2 = body->arbiters->head;		HX_STACK_VAR(tmp2,"tmp2");
			HX_STACK_LINE(2141)
			::zpp_nape::util::ZNPNode_ZPP_Arbiter cx_ite = tmp2;		HX_STACK_VAR(cx_ite,"cx_ite");
			HX_STACK_LINE(2142)
			while((true)){
				HX_STACK_LINE(2142)
				bool tmp3 = (cx_ite != null());		HX_STACK_VAR(tmp3,"tmp3");
				HX_STACK_LINE(2142)
				bool tmp4 = !(tmp3);		HX_STACK_VAR(tmp4,"tmp4");
				HX_STACK_LINE(2142)
				if ((tmp4)){
					HX_STACK_LINE(2142)
					break;
				}
				HX_STACK_LINE(2143)
				::zpp_nape::dynamics::ZPP_Arbiter xarb = cx_ite->elt;		HX_STACK_VAR(xarb,"xarb");
				HX_STACK_LINE(2144)
				{
					HX_STACK_LINE(2145)
					bool tmp5 = (xarb->ws1 == s);		HX_STACK_VAR(tmp5,"tmp5");
					HX_STACK_LINE(2145)
					bool tmp6 = !(tmp5);		HX_STACK_VAR(tmp6,"tmp6");
					HX_STACK_LINE(2145)
					bool tmp7;		HX_STACK_VAR(tmp7,"tmp7");
					HX_STACK_LINE(2145)
					if ((tmp6)){
						HX_STACK_LINE(2145)
						tmp7 = (xarb->ws2 == s);
					}
					else{
						HX_STACK_LINE(2145)
						tmp7 = true;
					}
					HX_STACK_LINE(2145)
					bool rem = tmp7;		HX_STACK_VAR(rem,"rem");
					HX_STACK_LINE(2146)
					bool tmp8 = rem;		HX_STACK_VAR(tmp8,"tmp8");
					HX_STACK_LINE(2146)
					if ((tmp8)){
						HX_STACK_LINE(2147)
						bool tmp9 = (xarb->present != (int)0);		HX_STACK_VAR(tmp9,"tmp9");
						HX_STACK_LINE(2147)
						if ((tmp9)){
							HX_STACK_LINE(2148)
							::zpp_nape::shape::ZPP_Shape tmp10 = xarb->ws1;		HX_STACK_VAR(tmp10,"tmp10");
							HX_STACK_LINE(2148)
							::zpp_nape::shape::ZPP_Shape tmp11 = xarb->ws2;		HX_STACK_VAR(tmp11,"tmp11");
							HX_STACK_LINE(2148)
							this->MRCA_chains(tmp10,tmp11);
							HX_STACK_LINE(2149)
							{
								HX_STACK_LINE(2150)
								::zpp_nape::util::ZNPList_ZPP_Interactor tmp12 = this->mrca1;		HX_STACK_VAR(tmp12,"tmp12");
								HX_STACK_LINE(2150)
								::zpp_nape::util::ZNPNode_ZPP_Interactor cx_ite1 = tmp12->head;		HX_STACK_VAR(cx_ite1,"cx_ite1");
								HX_STACK_LINE(2151)
								while((true)){
									HX_STACK_LINE(2151)
									bool tmp13 = (cx_ite1 != null());		HX_STACK_VAR(tmp13,"tmp13");
									HX_STACK_LINE(2151)
									bool tmp14 = !(tmp13);		HX_STACK_VAR(tmp14,"tmp14");
									HX_STACK_LINE(2151)
									if ((tmp14)){
										HX_STACK_LINE(2151)
										break;
									}
									HX_STACK_LINE(2152)
									::zpp_nape::phys::ZPP_Interactor i1 = cx_ite1->elt;		HX_STACK_VAR(i1,"i1");
									HX_STACK_LINE(2154)
									{
										HX_STACK_LINE(2155)
										::zpp_nape::util::ZNPList_ZPP_Interactor tmp15 = this->mrca2;		HX_STACK_VAR(tmp15,"tmp15");
										HX_STACK_LINE(2155)
										::zpp_nape::util::ZNPNode_ZPP_Interactor cx_ite2 = tmp15->head;		HX_STACK_VAR(cx_ite2,"cx_ite2");
										HX_STACK_LINE(2156)
										while((true)){
											HX_STACK_LINE(2156)
											bool tmp16 = (cx_ite2 != null());		HX_STACK_VAR(tmp16,"tmp16");
											HX_STACK_LINE(2156)
											bool tmp17 = !(tmp16);		HX_STACK_VAR(tmp17,"tmp17");
											HX_STACK_LINE(2156)
											if ((tmp17)){
												HX_STACK_LINE(2156)
												break;
											}
											HX_STACK_LINE(2157)
											::zpp_nape::phys::ZPP_Interactor i2 = cx_ite2->elt;		HX_STACK_VAR(i2,"i2");
											HX_STACK_LINE(2158)
											{
												HX_STACK_LINE(2159)
												::zpp_nape::callbacks::ZPP_CbSet cb1 = i1->cbSet;		HX_STACK_VAR(cb1,"cb1");
												HX_STACK_LINE(2160)
												::zpp_nape::callbacks::ZPP_CbSet cb2 = i2->cbSet;		HX_STACK_VAR(cb2,"cb2");
												HX_STACK_LINE(2169)
												cb1->validate();
												HX_STACK_LINE(2170)
												cb2->validate();
												HX_STACK_LINE(2171)
												bool tmp18;		HX_STACK_VAR(tmp18,"tmp18");
												HX_STACK_LINE(2171)
												{
													HX_STACK_LINE(2171)
													::zpp_nape::callbacks::ZPP_CbSetPair tmp19;		HX_STACK_VAR(tmp19,"tmp19");
													HX_STACK_LINE(2171)
													{
														HX_STACK_LINE(2171)
														::zpp_nape::callbacks::ZPP_CbSetPair ret = null();		HX_STACK_VAR(ret,"ret");
														HX_STACK_LINE(2171)
														int tmp20 = cb1->cbpairs->length;		HX_STACK_VAR(tmp20,"tmp20");
														HX_STACK_LINE(2171)
														int tmp21 = cb2->cbpairs->length;		HX_STACK_VAR(tmp21,"tmp21");
														HX_STACK_LINE(2171)
														bool tmp22 = (tmp20 < tmp21);		HX_STACK_VAR(tmp22,"tmp22");
														HX_STACK_LINE(2171)
														::zpp_nape::util::ZNPList_ZPP_CbSetPair tmp23;		HX_STACK_VAR(tmp23,"tmp23");
														HX_STACK_LINE(2171)
														if ((tmp22)){
															HX_STACK_LINE(2171)
															tmp23 = cb1->cbpairs;
														}
														else{
															HX_STACK_LINE(2171)
															tmp23 = cb2->cbpairs;
														}
														HX_STACK_LINE(2171)
														::zpp_nape::util::ZNPList_ZPP_CbSetPair pairs = tmp23;		HX_STACK_VAR(pairs,"pairs");
														HX_STACK_LINE(2171)
														{
															HX_STACK_LINE(2171)
															::zpp_nape::util::ZNPNode_ZPP_CbSetPair cx_ite3 = pairs->head;		HX_STACK_VAR(cx_ite3,"cx_ite3");
															HX_STACK_LINE(2171)
															while((true)){
																HX_STACK_LINE(2171)
																bool tmp24 = (cx_ite3 != null());		HX_STACK_VAR(tmp24,"tmp24");
																HX_STACK_LINE(2171)
																bool tmp25 = !(tmp24);		HX_STACK_VAR(tmp25,"tmp25");
																HX_STACK_LINE(2171)
																if ((tmp25)){
																	HX_STACK_LINE(2171)
																	break;
																}
																HX_STACK_LINE(2171)
																::zpp_nape::callbacks::ZPP_CbSetPair p = cx_ite3->elt;		HX_STACK_VAR(p,"p");
																HX_STACK_LINE(2171)
																{
																	HX_STACK_LINE(2171)
																	bool tmp26 = (p->a == cb1);		HX_STACK_VAR(tmp26,"tmp26");
																	HX_STACK_LINE(2171)
																	bool tmp27 = tmp26;		HX_STACK_VAR(tmp27,"tmp27");
																	HX_STACK_LINE(2171)
																	bool tmp28;		HX_STACK_VAR(tmp28,"tmp28");
																	HX_STACK_LINE(2171)
																	if ((tmp27)){
																		HX_STACK_LINE(2171)
																		tmp28 = (p->b == cb2);
																	}
																	else{
																		HX_STACK_LINE(2171)
																		tmp28 = false;
																	}
																	HX_STACK_LINE(2171)
																	bool tmp29 = !(tmp28);		HX_STACK_VAR(tmp29,"tmp29");
																	HX_STACK_LINE(2171)
																	bool tmp30;		HX_STACK_VAR(tmp30,"tmp30");
																	HX_STACK_LINE(2171)
																	if ((tmp29)){
																		HX_STACK_LINE(2171)
																		bool tmp31 = (p->a == cb2);		HX_STACK_VAR(tmp31,"tmp31");
																		HX_STACK_LINE(2171)
																		bool tmp32 = tmp31;		HX_STACK_VAR(tmp32,"tmp32");
																		HX_STACK_LINE(2171)
																		bool tmp33 = tmp32;		HX_STACK_VAR(tmp33,"tmp33");
																		HX_STACK_LINE(2171)
																		if ((tmp33)){
																			HX_STACK_LINE(2171)
																			tmp30 = (p->b == cb1);
																		}
																		else{
																			HX_STACK_LINE(2171)
																			tmp30 = false;
																		}
																	}
																	else{
																		HX_STACK_LINE(2171)
																		tmp30 = true;
																	}
																	HX_STACK_LINE(2171)
																	if ((tmp30)){
																		HX_STACK_LINE(2171)
																		ret = p;
																		HX_STACK_LINE(2171)
																		break;
																	}
																}
																HX_STACK_LINE(2171)
																cx_ite3 = cx_ite3->next;
															}
														}
														HX_STACK_LINE(2171)
														bool tmp24 = (ret == null());		HX_STACK_VAR(tmp24,"tmp24");
														HX_STACK_LINE(2171)
														if ((tmp24)){
															HX_STACK_LINE(2171)
															::zpp_nape::callbacks::ZPP_CbSetPair tmp25;		HX_STACK_VAR(tmp25,"tmp25");
															HX_STACK_LINE(2171)
															{
																HX_STACK_LINE(2171)
																::zpp_nape::callbacks::ZPP_CbSetPair ret1;		HX_STACK_VAR(ret1,"ret1");
																HX_STACK_LINE(2171)
																{
																	HX_STACK_LINE(2171)
																	::zpp_nape::callbacks::ZPP_CbSetPair tmp26 = ::zpp_nape::callbacks::ZPP_CbSetPair_obj::zpp_pool;		HX_STACK_VAR(tmp26,"tmp26");
																	HX_STACK_LINE(2171)
																	bool tmp27 = (tmp26 == null());		HX_STACK_VAR(tmp27,"tmp27");
																	HX_STACK_LINE(2171)
																	if ((tmp27)){
																		HX_STACK_LINE(2171)
																		::zpp_nape::callbacks::ZPP_CbSetPair tmp28 = ::zpp_nape::callbacks::ZPP_CbSetPair_obj::__new();		HX_STACK_VAR(tmp28,"tmp28");
																		HX_STACK_LINE(2171)
																		ret1 = tmp28;
																	}
																	else{
																		HX_STACK_LINE(2171)
																		::zpp_nape::callbacks::ZPP_CbSetPair tmp28 = ::zpp_nape::callbacks::ZPP_CbSetPair_obj::zpp_pool;		HX_STACK_VAR(tmp28,"tmp28");
																		HX_STACK_LINE(2171)
																		ret1 = tmp28;
																		HX_STACK_LINE(2171)
																		::zpp_nape::callbacks::ZPP_CbSetPair_obj::zpp_pool = ret1->next;
																		HX_STACK_LINE(2171)
																		ret1->next = null();
																	}
																	HX_STACK_LINE(2171)
																	ret1->zip_listeners = true;
																}
																HX_STACK_LINE(2171)
																::zpp_nape::callbacks::ZPP_CbSet tmp26 = cb1;		HX_STACK_VAR(tmp26,"tmp26");
																HX_STACK_LINE(2171)
																::zpp_nape::callbacks::ZPP_CbSet tmp27 = cb2;		HX_STACK_VAR(tmp27,"tmp27");
																HX_STACK_LINE(2171)
																bool tmp28 = ::zpp_nape::callbacks::ZPP_CbSet_obj::setlt(tmp26,tmp27);		HX_STACK_VAR(tmp28,"tmp28");
																HX_STACK_LINE(2171)
																if ((tmp28)){
																	HX_STACK_LINE(2171)
																	ret1->a = cb1;
																	HX_STACK_LINE(2171)
																	ret1->b = cb2;
																}
																else{
																	HX_STACK_LINE(2171)
																	ret1->a = cb2;
																	HX_STACK_LINE(2171)
																	ret1->b = cb1;
																}
																HX_STACK_LINE(2171)
																tmp25 = ret1;
															}
															HX_STACK_LINE(2171)
															ret = tmp25;
															HX_STACK_LINE(2171)
															::zpp_nape::callbacks::ZPP_CbSetPair tmp26 = ret;		HX_STACK_VAR(tmp26,"tmp26");
															HX_STACK_LINE(2171)
															cb1->cbpairs->add(tmp26);
															HX_STACK_LINE(2171)
															bool tmp27 = (cb2 != cb1);		HX_STACK_VAR(tmp27,"tmp27");
															HX_STACK_LINE(2171)
															if ((tmp27)){
																HX_STACK_LINE(2171)
																::zpp_nape::callbacks::ZPP_CbSetPair tmp28 = ret;		HX_STACK_VAR(tmp28,"tmp28");
																HX_STACK_LINE(2171)
																cb2->cbpairs->add(tmp28);
															}
														}
														HX_STACK_LINE(2171)
														{
															HX_STACK_LINE(2171)
															bool tmp25 = ret->zip_listeners;		HX_STACK_VAR(tmp25,"tmp25");
															HX_STACK_LINE(2171)
															if ((tmp25)){
																HX_STACK_LINE(2171)
																ret->zip_listeners = false;
																HX_STACK_LINE(2171)
																ret->__validate();
															}
														}
														HX_STACK_LINE(2171)
														tmp19 = ret;
													}
													HX_STACK_LINE(2171)
													::zpp_nape::callbacks::ZPP_CbSetPair _this = tmp19;		HX_STACK_VAR(_this,"_this");
													HX_STACK_LINE(2171)
													::zpp_nape::util::ZNPNode_ZPP_InteractionListener tmp20 = _this->listeners->head;		HX_STACK_VAR(tmp20,"tmp20");
													HX_STACK_LINE(2171)
													tmp18 = (tmp20 == null());
												}
												HX_STACK_LINE(2171)
												if ((tmp18)){
													HX_STACK_LINE(2172)
													cx_ite2 = cx_ite2->next;
													HX_STACK_LINE(2173)
													continue;
												}
												HX_STACK_LINE(2175)
												::zpp_nape::phys::ZPP_Interactor tmp19 = i1;		HX_STACK_VAR(tmp19,"tmp19");
												HX_STACK_LINE(2175)
												::zpp_nape::phys::ZPP_Interactor tmp20 = i2;		HX_STACK_VAR(tmp20,"tmp20");
												HX_STACK_LINE(2175)
												::zpp_nape::space::ZPP_CallbackSet tmp21 = ::zpp_nape::phys::ZPP_Interactor_obj::get(tmp19,tmp20);		HX_STACK_VAR(tmp21,"tmp21");
												HX_STACK_LINE(2175)
												::zpp_nape::space::ZPP_CallbackSet callbackset = tmp21;		HX_STACK_VAR(callbackset,"callbackset");
												HX_STACK_LINE(2184)
												::zpp_nape::dynamics::ZPP_Arbiter tmp22 = xarb;		HX_STACK_VAR(tmp22,"tmp22");
												HX_STACK_LINE(2184)
												callbackset->remove_arb(tmp22);
												HX_STACK_LINE(2185)
												(xarb->present)--;
												HX_STACK_LINE(2186)
												{
													HX_STACK_LINE(2186)
													int tmp23 = ::zpp_nape::util::ZPP_Flags_obj::id_CbEvent_END;		HX_STACK_VAR(tmp23,"tmp23");
													HX_STACK_LINE(2186)
													int event = tmp23;		HX_STACK_VAR(event,"event");
													HX_STACK_LINE(2186)
													{
														HX_STACK_LINE(2186)
														::zpp_nape::callbacks::ZPP_CbSetPair tmp24;		HX_STACK_VAR(tmp24,"tmp24");
														HX_STACK_LINE(2186)
														{
															HX_STACK_LINE(2186)
															::zpp_nape::callbacks::ZPP_CbSetPair ret = null();		HX_STACK_VAR(ret,"ret");
															HX_STACK_LINE(2186)
															int tmp25 = cb1->cbpairs->length;		HX_STACK_VAR(tmp25,"tmp25");
															HX_STACK_LINE(2186)
															int tmp26 = cb2->cbpairs->length;		HX_STACK_VAR(tmp26,"tmp26");
															HX_STACK_LINE(2186)
															bool tmp27 = (tmp25 < tmp26);		HX_STACK_VAR(tmp27,"tmp27");
															HX_STACK_LINE(2186)
															::zpp_nape::util::ZNPList_ZPP_CbSetPair tmp28;		HX_STACK_VAR(tmp28,"tmp28");
															HX_STACK_LINE(2186)
															if ((tmp27)){
																HX_STACK_LINE(2186)
																tmp28 = cb1->cbpairs;
															}
															else{
																HX_STACK_LINE(2186)
																tmp28 = cb2->cbpairs;
															}
															HX_STACK_LINE(2186)
															::zpp_nape::util::ZNPList_ZPP_CbSetPair pairs = tmp28;		HX_STACK_VAR(pairs,"pairs");
															HX_STACK_LINE(2186)
															{
																HX_STACK_LINE(2186)
																::zpp_nape::util::ZNPNode_ZPP_CbSetPair cx_ite3 = pairs->head;		HX_STACK_VAR(cx_ite3,"cx_ite3");
																HX_STACK_LINE(2186)
																while((true)){
																	HX_STACK_LINE(2186)
																	bool tmp29 = (cx_ite3 != null());		HX_STACK_VAR(tmp29,"tmp29");
																	HX_STACK_LINE(2186)
																	bool tmp30 = !(tmp29);		HX_STACK_VAR(tmp30,"tmp30");
																	HX_STACK_LINE(2186)
																	if ((tmp30)){
																		HX_STACK_LINE(2186)
																		break;
																	}
																	HX_STACK_LINE(2186)
																	::zpp_nape::callbacks::ZPP_CbSetPair p = cx_ite3->elt;		HX_STACK_VAR(p,"p");
																	HX_STACK_LINE(2186)
																	{
																		HX_STACK_LINE(2186)
																		bool tmp31 = (p->a == cb1);		HX_STACK_VAR(tmp31,"tmp31");
																		HX_STACK_LINE(2186)
																		bool tmp32 = tmp31;		HX_STACK_VAR(tmp32,"tmp32");
																		HX_STACK_LINE(2186)
																		bool tmp33;		HX_STACK_VAR(tmp33,"tmp33");
																		HX_STACK_LINE(2186)
																		if ((tmp32)){
																			HX_STACK_LINE(2186)
																			tmp33 = (p->b == cb2);
																		}
																		else{
																			HX_STACK_LINE(2186)
																			tmp33 = false;
																		}
																		HX_STACK_LINE(2186)
																		bool tmp34 = !(tmp33);		HX_STACK_VAR(tmp34,"tmp34");
																		HX_STACK_LINE(2186)
																		bool tmp35;		HX_STACK_VAR(tmp35,"tmp35");
																		HX_STACK_LINE(2186)
																		if ((tmp34)){
																			HX_STACK_LINE(2186)
																			bool tmp36 = (p->a == cb2);		HX_STACK_VAR(tmp36,"tmp36");
																			HX_STACK_LINE(2186)
																			bool tmp37 = tmp36;		HX_STACK_VAR(tmp37,"tmp37");
																			HX_STACK_LINE(2186)
																			bool tmp38 = tmp37;		HX_STACK_VAR(tmp38,"tmp38");
																			HX_STACK_LINE(2186)
																			if ((tmp38)){
																				HX_STACK_LINE(2186)
																				tmp35 = (p->b == cb1);
																			}
																			else{
																				HX_STACK_LINE(2186)
																				tmp35 = false;
																			}
																		}
																		else{
																			HX_STACK_LINE(2186)
																			tmp35 = true;
																		}
																		HX_STACK_LINE(2186)
																		if ((tmp35)){
																			HX_STACK_LINE(2186)
																			ret = p;
																			HX_STACK_LINE(2186)
																			break;
																		}
																	}
																	HX_STACK_LINE(2186)
																	cx_ite3 = cx_ite3->next;
																}
															}
															HX_STACK_LINE(2186)
															bool tmp29 = (ret == null());		HX_STACK_VAR(tmp29,"tmp29");
															HX_STACK_LINE(2186)
															if ((tmp29)){
																HX_STACK_LINE(2186)
																::zpp_nape::callbacks::ZPP_CbSetPair tmp30;		HX_STACK_VAR(tmp30,"tmp30");
																HX_STACK_LINE(2186)
																{
																	HX_STACK_LINE(2186)
																	::zpp_nape::callbacks::ZPP_CbSetPair ret1;		HX_STACK_VAR(ret1,"ret1");
																	HX_STACK_LINE(2186)
																	{
																		HX_STACK_LINE(2186)
																		::zpp_nape::callbacks::ZPP_CbSetPair tmp31 = ::zpp_nape::callbacks::ZPP_CbSetPair_obj::zpp_pool;		HX_STACK_VAR(tmp31,"tmp31");
																		HX_STACK_LINE(2186)
																		bool tmp32 = (tmp31 == null());		HX_STACK_VAR(tmp32,"tmp32");
																		HX_STACK_LINE(2186)
																		if ((tmp32)){
																			HX_STACK_LINE(2186)
																			::zpp_nape::callbacks::ZPP_CbSetPair tmp33 = ::zpp_nape::callbacks::ZPP_CbSetPair_obj::__new();		HX_STACK_VAR(tmp33,"tmp33");
																			HX_STACK_LINE(2186)
																			ret1 = tmp33;
																		}
																		else{
																			HX_STACK_LINE(2186)
																			::zpp_nape::callbacks::ZPP_CbSetPair tmp33 = ::zpp_nape::callbacks::ZPP_CbSetPair_obj::zpp_pool;		HX_STACK_VAR(tmp33,"tmp33");
																			HX_STACK_LINE(2186)
																			ret1 = tmp33;
																			HX_STACK_LINE(2186)
																			::zpp_nape::callbacks::ZPP_CbSetPair_obj::zpp_pool = ret1->next;
																			HX_STACK_LINE(2186)
																			ret1->next = null();
																		}
																		HX_STACK_LINE(2186)
																		ret1->zip_listeners = true;
																	}
																	HX_STACK_LINE(2186)
																	::zpp_nape::callbacks::ZPP_CbSet tmp31 = cb1;		HX_STACK_VAR(tmp31,"tmp31");
																	HX_STACK_LINE(2186)
																	::zpp_nape::callbacks::ZPP_CbSet tmp32 = cb2;		HX_STACK_VAR(tmp32,"tmp32");
																	HX_STACK_LINE(2186)
																	bool tmp33 = ::zpp_nape::callbacks::ZPP_CbSet_obj::setlt(tmp31,tmp32);		HX_STACK_VAR(tmp33,"tmp33");
																	HX_STACK_LINE(2186)
																	if ((tmp33)){
																		HX_STACK_LINE(2186)
																		ret1->a = cb1;
																		HX_STACK_LINE(2186)
																		ret1->b = cb2;
																	}
																	else{
																		HX_STACK_LINE(2186)
																		ret1->a = cb2;
																		HX_STACK_LINE(2186)
																		ret1->b = cb1;
																	}
																	HX_STACK_LINE(2186)
																	tmp30 = ret1;
																}
																HX_STACK_LINE(2186)
																ret = tmp30;
																HX_STACK_LINE(2186)
																::zpp_nape::callbacks::ZPP_CbSetPair tmp31 = ret;		HX_STACK_VAR(tmp31,"tmp31");
																HX_STACK_LINE(2186)
																cb1->cbpairs->add(tmp31);
																HX_STACK_LINE(2186)
																bool tmp32 = (cb2 != cb1);		HX_STACK_VAR(tmp32,"tmp32");
																HX_STACK_LINE(2186)
																if ((tmp32)){
																	HX_STACK_LINE(2186)
																	::zpp_nape::callbacks::ZPP_CbSetPair tmp33 = ret;		HX_STACK_VAR(tmp33,"tmp33");
																	HX_STACK_LINE(2186)
																	cb2->cbpairs->add(tmp33);
																}
															}
															HX_STACK_LINE(2186)
															{
																HX_STACK_LINE(2186)
																bool tmp30 = ret->zip_listeners;		HX_STACK_VAR(tmp30,"tmp30");
																HX_STACK_LINE(2186)
																if ((tmp30)){
																	HX_STACK_LINE(2186)
																	ret->zip_listeners = false;
																	HX_STACK_LINE(2186)
																	ret->__validate();
																}
															}
															HX_STACK_LINE(2186)
															tmp24 = ret;
														}
														HX_STACK_LINE(2186)
														::zpp_nape::callbacks::ZPP_CbSetPair _this = tmp24;		HX_STACK_VAR(_this,"_this");
														HX_STACK_LINE(2186)
														{
															HX_STACK_LINE(2186)
															::zpp_nape::util::ZNPNode_ZPP_InteractionListener tmp25 = _this->listeners->head;		HX_STACK_VAR(tmp25,"tmp25");
															HX_STACK_LINE(2186)
															::zpp_nape::util::ZNPNode_ZPP_InteractionListener cx_ite3 = tmp25;		HX_STACK_VAR(cx_ite3,"cx_ite3");
															HX_STACK_LINE(2186)
															while((true)){
																HX_STACK_LINE(2186)
																bool tmp26 = (cx_ite3 != null());		HX_STACK_VAR(tmp26,"tmp26");
																HX_STACK_LINE(2186)
																bool tmp27 = !(tmp26);		HX_STACK_VAR(tmp27,"tmp27");
																HX_STACK_LINE(2186)
																if ((tmp27)){
																	HX_STACK_LINE(2186)
																	break;
																}
																HX_STACK_LINE(2186)
																::zpp_nape::callbacks::ZPP_InteractionListener x = cx_ite3->elt;		HX_STACK_VAR(x,"x");
																HX_STACK_LINE(2186)
																{
																	HX_STACK_LINE(2186)
																	bool tmp28 = (x->event == event);		HX_STACK_VAR(tmp28,"tmp28");
																	HX_STACK_LINE(2186)
																	if ((tmp28)){
																		HX_STACK_LINE(2186)
																		::zpp_nape::callbacks::ZPP_InteractionListener tmp29 = x;		HX_STACK_VAR(tmp29,"tmp29");
																		HX_STACK_LINE(2187)
																		{
																			HX_STACK_LINE(2187)
																			int tmp30 = (int(tmp29->itype) & int(xarb->type));		HX_STACK_VAR(tmp30,"tmp30");
																			HX_STACK_LINE(2187)
																			bool tmp31 = (tmp30 != (int)0);		HX_STACK_VAR(tmp31,"tmp31");
																			HX_STACK_LINE(2187)
																			bool tmp32;		HX_STACK_VAR(tmp32,"tmp32");
																			HX_STACK_LINE(2187)
																			if ((tmp31)){
																				HX_STACK_LINE(2187)
																				int tmp33 = tmp29->itype;		HX_STACK_VAR(tmp33,"tmp33");
																				HX_STACK_LINE(2187)
																				int tmp34 = tmp33;		HX_STACK_VAR(tmp34,"tmp34");
																				HX_STACK_LINE(2187)
																				tmp32 = callbackset->empty_arb(tmp34);
																			}
																			else{
																				HX_STACK_LINE(2187)
																				tmp32 = false;
																			}
																			HX_STACK_LINE(2187)
																			if ((tmp32)){
																				HX_STACK_LINE(2186)
																				::zpp_nape::callbacks::ZPP_InteractionListener tmp33 = tmp29;		HX_STACK_VAR(tmp33,"tmp33");
																				HX_STACK_LINE(2188)
																				::zpp_nape::callbacks::ZPP_Callback tmp34 = _g->push_callback(tmp33);		HX_STACK_VAR(tmp34,"tmp34");
																				HX_STACK_LINE(2188)
																				::zpp_nape::callbacks::ZPP_Callback cb = tmp34;		HX_STACK_VAR(cb,"cb");
																				HX_STACK_LINE(2189)
																				int tmp35 = ::zpp_nape::util::ZPP_Flags_obj::id_CbEvent_END;		HX_STACK_VAR(tmp35,"tmp35");
																				HX_STACK_LINE(2189)
																				cb->event = tmp35;
																				HX_STACK_LINE(2190)
																				{
																					HX_STACK_LINE(2190)
																					::zpp_nape::phys::ZPP_Interactor o1 = callbackset->int1;		HX_STACK_VAR(o1,"o1");
																					HX_STACK_LINE(2190)
																					::zpp_nape::phys::ZPP_Interactor o2 = callbackset->int2;		HX_STACK_VAR(o2,"o2");
																					HX_STACK_LINE(2190)
																					bool tmp36;		HX_STACK_VAR(tmp36,"tmp36");
																					HX_STACK_LINE(2190)
																					{
																						HX_STACK_LINE(2190)
																						::zpp_nape::callbacks::ZPP_OptionType _this1 = tmp29->options1;		HX_STACK_VAR(_this1,"_this1");
																						HX_STACK_LINE(2190)
																						::zpp_nape::util::ZNPList_ZPP_CbType xs = o1->cbTypes;		HX_STACK_VAR(xs,"xs");
																						HX_STACK_LINE(2190)
																						::zpp_nape::util::ZNPList_ZPP_CbType tmp37 = xs;		HX_STACK_VAR(tmp37,"tmp37");
																						HX_STACK_LINE(2190)
																						::zpp_nape::util::ZNPList_ZPP_CbType tmp38 = _this1->includes;		HX_STACK_VAR(tmp38,"tmp38");
																						HX_STACK_LINE(2190)
																						::zpp_nape::util::ZNPList_ZPP_CbType tmp39 = tmp37;		HX_STACK_VAR(tmp39,"tmp39");
																						HX_STACK_LINE(2190)
																						::zpp_nape::util::ZNPList_ZPP_CbType tmp40 = tmp38;		HX_STACK_VAR(tmp40,"tmp40");
																						HX_STACK_LINE(2190)
																						::zpp_nape::util::ZNPList_ZPP_CbType tmp41 = tmp39;		HX_STACK_VAR(tmp41,"tmp41");
																						HX_STACK_LINE(2190)
																						::zpp_nape::util::ZNPList_ZPP_CbType tmp42 = tmp40;		HX_STACK_VAR(tmp42,"tmp42");
																						HX_STACK_LINE(2190)
																						bool tmp43 = _this1->nonemptyintersection(tmp41,tmp42);		HX_STACK_VAR(tmp43,"tmp43");
																						HX_STACK_LINE(2190)
																						bool tmp44 = tmp43;		HX_STACK_VAR(tmp44,"tmp44");
																						HX_STACK_LINE(2190)
																						bool tmp45 = tmp44;		HX_STACK_VAR(tmp45,"tmp45");
																						HX_STACK_LINE(2190)
																						if ((tmp45)){
																							HX_STACK_LINE(2190)
																							::zpp_nape::util::ZNPList_ZPP_CbType tmp46 = xs;		HX_STACK_VAR(tmp46,"tmp46");
																							HX_STACK_LINE(2190)
																							::zpp_nape::util::ZNPList_ZPP_CbType tmp47 = _this1->excludes;		HX_STACK_VAR(tmp47,"tmp47");
																							HX_STACK_LINE(2190)
																							::zpp_nape::util::ZNPList_ZPP_CbType tmp48 = tmp46;		HX_STACK_VAR(tmp48,"tmp48");
																							HX_STACK_LINE(2190)
																							::zpp_nape::util::ZNPList_ZPP_CbType tmp49 = tmp47;		HX_STACK_VAR(tmp49,"tmp49");
																							HX_STACK_LINE(2190)
																							::zpp_nape::util::ZNPList_ZPP_CbType tmp50 = tmp48;		HX_STACK_VAR(tmp50,"tmp50");
																							HX_STACK_LINE(2190)
																							::zpp_nape::util::ZNPList_ZPP_CbType tmp51 = tmp49;		HX_STACK_VAR(tmp51,"tmp51");
																							HX_STACK_LINE(2190)
																							bool tmp52 = _this1->nonemptyintersection(tmp50,tmp51);		HX_STACK_VAR(tmp52,"tmp52");
																							HX_STACK_LINE(2190)
																							bool tmp53 = tmp52;		HX_STACK_VAR(tmp53,"tmp53");
																							HX_STACK_LINE(2190)
																							bool tmp54 = tmp53;		HX_STACK_VAR(tmp54,"tmp54");
																							HX_STACK_LINE(2190)
																							bool tmp55 = tmp54;		HX_STACK_VAR(tmp55,"tmp55");
																							HX_STACK_LINE(2190)
																							bool tmp56 = tmp55;		HX_STACK_VAR(tmp56,"tmp56");
																							HX_STACK_LINE(2190)
																							tmp36 = !(tmp56);
																						}
																						else{
																							HX_STACK_LINE(2190)
																							tmp36 = false;
																						}
																					}
																					HX_STACK_LINE(2190)
																					bool tmp37;		HX_STACK_VAR(tmp37,"tmp37");
																					HX_STACK_LINE(2190)
																					if ((tmp36)){
																						HX_STACK_LINE(2190)
																						::zpp_nape::callbacks::ZPP_OptionType _this1 = tmp29->options2;		HX_STACK_VAR(_this1,"_this1");
																						HX_STACK_LINE(2190)
																						::zpp_nape::util::ZNPList_ZPP_CbType xs = o2->cbTypes;		HX_STACK_VAR(xs,"xs");
																						HX_STACK_LINE(2190)
																						::zpp_nape::util::ZNPList_ZPP_CbType tmp38 = xs;		HX_STACK_VAR(tmp38,"tmp38");
																						HX_STACK_LINE(2190)
																						::zpp_nape::util::ZNPList_ZPP_CbType tmp39 = _this1->includes;		HX_STACK_VAR(tmp39,"tmp39");
																						HX_STACK_LINE(2190)
																						::zpp_nape::util::ZNPList_ZPP_CbType tmp40 = tmp38;		HX_STACK_VAR(tmp40,"tmp40");
																						HX_STACK_LINE(2190)
																						::zpp_nape::util::ZNPList_ZPP_CbType tmp41 = tmp39;		HX_STACK_VAR(tmp41,"tmp41");
																						HX_STACK_LINE(2190)
																						::zpp_nape::util::ZNPList_ZPP_CbType tmp42 = tmp40;		HX_STACK_VAR(tmp42,"tmp42");
																						HX_STACK_LINE(2190)
																						::zpp_nape::util::ZNPList_ZPP_CbType tmp43 = tmp41;		HX_STACK_VAR(tmp43,"tmp43");
																						HX_STACK_LINE(2190)
																						bool tmp44 = _this1->nonemptyintersection(tmp42,tmp43);		HX_STACK_VAR(tmp44,"tmp44");
																						HX_STACK_LINE(2190)
																						bool tmp45 = tmp44;		HX_STACK_VAR(tmp45,"tmp45");
																						HX_STACK_LINE(2190)
																						bool tmp46 = tmp45;		HX_STACK_VAR(tmp46,"tmp46");
																						HX_STACK_LINE(2190)
																						if ((tmp46)){
																							HX_STACK_LINE(2190)
																							::zpp_nape::util::ZNPList_ZPP_CbType tmp47 = xs;		HX_STACK_VAR(tmp47,"tmp47");
																							HX_STACK_LINE(2190)
																							::zpp_nape::util::ZNPList_ZPP_CbType tmp48 = _this1->excludes;		HX_STACK_VAR(tmp48,"tmp48");
																							HX_STACK_LINE(2190)
																							::zpp_nape::util::ZNPList_ZPP_CbType tmp49 = tmp47;		HX_STACK_VAR(tmp49,"tmp49");
																							HX_STACK_LINE(2190)
																							::zpp_nape::util::ZNPList_ZPP_CbType tmp50 = tmp48;		HX_STACK_VAR(tmp50,"tmp50");
																							HX_STACK_LINE(2190)
																							::zpp_nape::util::ZNPList_ZPP_CbType tmp51 = tmp49;		HX_STACK_VAR(tmp51,"tmp51");
																							HX_STACK_LINE(2190)
																							::zpp_nape::util::ZNPList_ZPP_CbType tmp52 = tmp50;		HX_STACK_VAR(tmp52,"tmp52");
																							HX_STACK_LINE(2190)
																							bool tmp53 = _this1->nonemptyintersection(tmp51,tmp52);		HX_STACK_VAR(tmp53,"tmp53");
																							HX_STACK_LINE(2190)
																							bool tmp54 = tmp53;		HX_STACK_VAR(tmp54,"tmp54");
																							HX_STACK_LINE(2190)
																							bool tmp55 = tmp54;		HX_STACK_VAR(tmp55,"tmp55");
																							HX_STACK_LINE(2190)
																							bool tmp56 = tmp55;		HX_STACK_VAR(tmp56,"tmp56");
																							HX_STACK_LINE(2190)
																							bool tmp57 = tmp56;		HX_STACK_VAR(tmp57,"tmp57");
																							HX_STACK_LINE(2190)
																							tmp37 = !(tmp57);
																						}
																						else{
																							HX_STACK_LINE(2190)
																							tmp37 = false;
																						}
																					}
																					else{
																						HX_STACK_LINE(2190)
																						tmp37 = false;
																					}
																					HX_STACK_LINE(2190)
																					if ((tmp37)){
																						HX_STACK_LINE(2190)
																						cb->int1 = o1;
																						HX_STACK_LINE(2190)
																						cb->int2 = o2;
																					}
																					else{
																						HX_STACK_LINE(2190)
																						cb->int1 = o2;
																						HX_STACK_LINE(2190)
																						cb->int2 = o1;
																					}
																				}
																				HX_STACK_LINE(2191)
																				cb->set = callbackset;
																			}
																		}
																	}
																}
																HX_STACK_LINE(2186)
																cx_ite3 = cx_ite3->next;
															}
														}
													}
												}
												HX_STACK_LINE(2194)
												::zpp_nape::util::ZNPNode_ZPP_Arbiter tmp23 = callbackset->arbiters->head;		HX_STACK_VAR(tmp23,"tmp23");
												HX_STACK_LINE(2194)
												bool tmp24 = (tmp23 == null());		HX_STACK_VAR(tmp24,"tmp24");
												HX_STACK_LINE(2194)
												if ((tmp24)){
													HX_STACK_LINE(2195)
													::zpp_nape::space::ZPP_CallbackSet tmp25 = callbackset;		HX_STACK_VAR(tmp25,"tmp25");
													HX_STACK_LINE(2195)
													this->remove_callbackset(tmp25);
												}
											}
											HX_STACK_LINE(2198)
											cx_ite2 = cx_ite2->next;
										}
									}
									HX_STACK_LINE(2202)
									cx_ite1 = cx_ite1->next;
								}
							}
							HX_STACK_LINE(2205)
							{
							}
						}
						HX_STACK_LINE(2214)
						bool tmp10 = (xarb->b1 != body);		HX_STACK_VAR(tmp10,"tmp10");
						HX_STACK_LINE(2214)
						bool tmp11;		HX_STACK_VAR(tmp11,"tmp11");
						HX_STACK_LINE(2214)
						if ((tmp10)){
							HX_STACK_LINE(2214)
							int tmp12 = xarb->b1->type;		HX_STACK_VAR(tmp12,"tmp12");
							HX_STACK_LINE(2214)
							int tmp13 = tmp12;		HX_STACK_VAR(tmp13,"tmp13");
							HX_STACK_LINE(2214)
							int tmp14 = ::zpp_nape::util::ZPP_Flags_obj::id_BodyType_DYNAMIC;		HX_STACK_VAR(tmp14,"tmp14");
							HX_STACK_LINE(2214)
							int tmp15 = tmp14;		HX_STACK_VAR(tmp15,"tmp15");
							HX_STACK_LINE(2214)
							tmp11 = (tmp13 == tmp15);
						}
						else{
							HX_STACK_LINE(2214)
							tmp11 = false;
						}
						HX_STACK_LINE(2214)
						if ((tmp11)){
							HX_STACK_LINE(2215)
							::zpp_nape::phys::ZPP_Body o = xarb->b1;		HX_STACK_VAR(o,"o");
							HX_STACK_LINE(2224)
							bool tmp12 = o->world;		HX_STACK_VAR(tmp12,"tmp12");
							HX_STACK_LINE(2224)
							bool tmp13 = !(tmp12);		HX_STACK_VAR(tmp13,"tmp13");
							HX_STACK_LINE(2224)
							if ((tmp13)){
								HX_STACK_LINE(2233)
								int tmp14 = this->stamp;		HX_STACK_VAR(tmp14,"tmp14");
								HX_STACK_LINE(2233)
								bool tmp15 = this->midstep;		HX_STACK_VAR(tmp15,"tmp15");
								HX_STACK_LINE(2233)
								int tmp16;		HX_STACK_VAR(tmp16,"tmp16");
								HX_STACK_LINE(2233)
								if ((tmp15)){
									HX_STACK_LINE(2233)
									tmp16 = (int)0;
								}
								else{
									HX_STACK_LINE(2233)
									tmp16 = (int)1;
								}
								HX_STACK_LINE(2233)
								int tmp17 = (tmp14 + tmp16);		HX_STACK_VAR(tmp17,"tmp17");
								HX_STACK_LINE(2233)
								o->component->waket = tmp17;
								HX_STACK_LINE(2234)
								int tmp18 = o->type;		HX_STACK_VAR(tmp18,"tmp18");
								HX_STACK_LINE(2234)
								int tmp19 = ::zpp_nape::util::ZPP_Flags_obj::id_BodyType_KINEMATIC;		HX_STACK_VAR(tmp19,"tmp19");
								HX_STACK_LINE(2234)
								bool tmp20 = (tmp18 == tmp19);		HX_STACK_VAR(tmp20,"tmp20");
								HX_STACK_LINE(2234)
								if ((tmp20)){
									HX_STACK_LINE(2234)
									o->kinematicDelaySleep = true;
								}
								HX_STACK_LINE(2235)
								bool tmp21 = o->component->sleeping;		HX_STACK_VAR(tmp21,"tmp21");
								HX_STACK_LINE(2235)
								if ((tmp21)){
									HX_STACK_LINE(2236)
									::zpp_nape::phys::ZPP_Body tmp22 = o;		HX_STACK_VAR(tmp22,"tmp22");
									HX_STACK_LINE(2236)
									this->really_wake(tmp22,false);
								}
							}
						}
						HX_STACK_LINE(2240)
						bool tmp12 = (xarb->b2 != body);		HX_STACK_VAR(tmp12,"tmp12");
						HX_STACK_LINE(2240)
						bool tmp13;		HX_STACK_VAR(tmp13,"tmp13");
						HX_STACK_LINE(2240)
						if ((tmp12)){
							HX_STACK_LINE(2240)
							int tmp14 = xarb->b2->type;		HX_STACK_VAR(tmp14,"tmp14");
							HX_STACK_LINE(2240)
							int tmp15 = tmp14;		HX_STACK_VAR(tmp15,"tmp15");
							HX_STACK_LINE(2240)
							int tmp16 = ::zpp_nape::util::ZPP_Flags_obj::id_BodyType_DYNAMIC;		HX_STACK_VAR(tmp16,"tmp16");
							HX_STACK_LINE(2240)
							int tmp17 = tmp16;		HX_STACK_VAR(tmp17,"tmp17");
							HX_STACK_LINE(2240)
							tmp13 = (tmp15 == tmp17);
						}
						else{
							HX_STACK_LINE(2240)
							tmp13 = false;
						}
						HX_STACK_LINE(2240)
						if ((tmp13)){
							HX_STACK_LINE(2241)
							::zpp_nape::phys::ZPP_Body o = xarb->b2;		HX_STACK_VAR(o,"o");
							HX_STACK_LINE(2250)
							bool tmp14 = o->world;		HX_STACK_VAR(tmp14,"tmp14");
							HX_STACK_LINE(2250)
							bool tmp15 = !(tmp14);		HX_STACK_VAR(tmp15,"tmp15");
							HX_STACK_LINE(2250)
							if ((tmp15)){
								HX_STACK_LINE(2259)
								int tmp16 = this->stamp;		HX_STACK_VAR(tmp16,"tmp16");
								HX_STACK_LINE(2259)
								bool tmp17 = this->midstep;		HX_STACK_VAR(tmp17,"tmp17");
								HX_STACK_LINE(2259)
								int tmp18;		HX_STACK_VAR(tmp18,"tmp18");
								HX_STACK_LINE(2259)
								if ((tmp17)){
									HX_STACK_LINE(2259)
									tmp18 = (int)0;
								}
								else{
									HX_STACK_LINE(2259)
									tmp18 = (int)1;
								}
								HX_STACK_LINE(2259)
								int tmp19 = (tmp16 + tmp18);		HX_STACK_VAR(tmp19,"tmp19");
								HX_STACK_LINE(2259)
								o->component->waket = tmp19;
								HX_STACK_LINE(2260)
								int tmp20 = o->type;		HX_STACK_VAR(tmp20,"tmp20");
								HX_STACK_LINE(2260)
								int tmp21 = ::zpp_nape::util::ZPP_Flags_obj::id_BodyType_KINEMATIC;		HX_STACK_VAR(tmp21,"tmp21");
								HX_STACK_LINE(2260)
								bool tmp22 = (tmp20 == tmp21);		HX_STACK_VAR(tmp22,"tmp22");
								HX_STACK_LINE(2260)
								if ((tmp22)){
									HX_STACK_LINE(2260)
									o->kinematicDelaySleep = true;
								}
								HX_STACK_LINE(2261)
								bool tmp23 = o->component->sleeping;		HX_STACK_VAR(tmp23,"tmp23");
								HX_STACK_LINE(2261)
								if ((tmp23)){
									HX_STACK_LINE(2262)
									::zpp_nape::phys::ZPP_Body tmp24 = o;		HX_STACK_VAR(tmp24,"tmp24");
									HX_STACK_LINE(2262)
									this->really_wake(tmp24,false);
								}
							}
						}
						HX_STACK_LINE(2266)
						{
							HX_STACK_LINE(2266)
							xarb->cleared = true;
							HX_STACK_LINE(2266)
							bool tmp14 = (body == null());		HX_STACK_VAR(tmp14,"tmp14");
							HX_STACK_LINE(2266)
							bool tmp15 = !(tmp14);		HX_STACK_VAR(tmp15,"tmp15");
							HX_STACK_LINE(2266)
							bool tmp16;		HX_STACK_VAR(tmp16,"tmp16");
							HX_STACK_LINE(2266)
							if ((tmp15)){
								HX_STACK_LINE(2266)
								tmp16 = (xarb->b2 == body);
							}
							else{
								HX_STACK_LINE(2266)
								tmp16 = true;
							}
							HX_STACK_LINE(2266)
							if ((tmp16)){
								HX_STACK_LINE(2266)
								::zpp_nape::util::ZNPList_ZPP_Arbiter tmp17 = xarb->b1->arbiters;		HX_STACK_VAR(tmp17,"tmp17");
								HX_STACK_LINE(2266)
								::zpp_nape::util::ZNPList_ZPP_Arbiter _this = tmp17;		HX_STACK_VAR(_this,"_this");
								HX_STACK_LINE(2266)
								{
									HX_STACK_LINE(2266)
									::zpp_nape::util::ZNPNode_ZPP_Arbiter pre1 = null();		HX_STACK_VAR(pre1,"pre1");
									HX_STACK_LINE(2266)
									::zpp_nape::util::ZNPNode_ZPP_Arbiter cur = _this->head;		HX_STACK_VAR(cur,"cur");
									HX_STACK_LINE(2266)
									bool ret = false;		HX_STACK_VAR(ret,"ret");
									HX_STACK_LINE(2266)
									while((true)){
										HX_STACK_LINE(2266)
										bool tmp18 = (cur != null());		HX_STACK_VAR(tmp18,"tmp18");
										HX_STACK_LINE(2266)
										bool tmp19 = !(tmp18);		HX_STACK_VAR(tmp19,"tmp19");
										HX_STACK_LINE(2266)
										if ((tmp19)){
											HX_STACK_LINE(2266)
											break;
										}
										HX_STACK_LINE(2266)
										bool tmp20 = (cur->elt == xarb);		HX_STACK_VAR(tmp20,"tmp20");
										HX_STACK_LINE(2266)
										if ((tmp20)){
											HX_STACK_LINE(2266)
											{
												HX_STACK_LINE(2266)
												::zpp_nape::util::ZNPNode_ZPP_Arbiter old;		HX_STACK_VAR(old,"old");
												HX_STACK_LINE(2266)
												::zpp_nape::util::ZNPNode_ZPP_Arbiter ret1;		HX_STACK_VAR(ret1,"ret1");
												HX_STACK_LINE(2266)
												bool tmp21 = (pre1 == null());		HX_STACK_VAR(tmp21,"tmp21");
												HX_STACK_LINE(2266)
												if ((tmp21)){
													HX_STACK_LINE(2266)
													old = _this->head;
													HX_STACK_LINE(2266)
													ret1 = old->next;
													HX_STACK_LINE(2266)
													_this->head = ret1;
													HX_STACK_LINE(2266)
													bool tmp22 = (_this->head == null());		HX_STACK_VAR(tmp22,"tmp22");
													HX_STACK_LINE(2266)
													if ((tmp22)){
														HX_STACK_LINE(2266)
														_this->pushmod = true;
													}
												}
												else{
													HX_STACK_LINE(2266)
													old = pre1->next;
													HX_STACK_LINE(2266)
													ret1 = old->next;
													HX_STACK_LINE(2266)
													pre1->next = ret1;
													HX_STACK_LINE(2266)
													bool tmp22 = (ret1 == null());		HX_STACK_VAR(tmp22,"tmp22");
													HX_STACK_LINE(2266)
													if ((tmp22)){
														HX_STACK_LINE(2266)
														_this->pushmod = true;
													}
												}
												HX_STACK_LINE(2266)
												{
													HX_STACK_LINE(2266)
													::zpp_nape::util::ZNPNode_ZPP_Arbiter o = old;		HX_STACK_VAR(o,"o");
													HX_STACK_LINE(2266)
													o->elt = null();
													HX_STACK_LINE(2266)
													::zpp_nape::util::ZNPNode_ZPP_Arbiter tmp22 = ::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool;		HX_STACK_VAR(tmp22,"tmp22");
													HX_STACK_LINE(2266)
													o->next = tmp22;
													HX_STACK_LINE(2266)
													::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool = o;
												}
												HX_STACK_LINE(2266)
												_this->modified = true;
												HX_STACK_LINE(2266)
												(_this->length)--;
												HX_STACK_LINE(2266)
												_this->pushmod = true;
												HX_STACK_LINE(2266)
												ret1;
											}
											HX_STACK_LINE(2266)
											ret = true;
											HX_STACK_LINE(2266)
											break;
										}
										HX_STACK_LINE(2266)
										pre1 = cur;
										HX_STACK_LINE(2266)
										cur = cur->next;
									}
									HX_STACK_LINE(2266)
									ret;
								}
							}
							HX_STACK_LINE(2266)
							bool tmp17 = (body == null());		HX_STACK_VAR(tmp17,"tmp17");
							HX_STACK_LINE(2266)
							bool tmp18 = !(tmp17);		HX_STACK_VAR(tmp18,"tmp18");
							HX_STACK_LINE(2266)
							bool tmp19;		HX_STACK_VAR(tmp19,"tmp19");
							HX_STACK_LINE(2266)
							if ((tmp18)){
								HX_STACK_LINE(2266)
								tmp19 = (xarb->b1 == body);
							}
							else{
								HX_STACK_LINE(2266)
								tmp19 = true;
							}
							HX_STACK_LINE(2266)
							if ((tmp19)){
								HX_STACK_LINE(2266)
								::zpp_nape::util::ZNPList_ZPP_Arbiter tmp20 = xarb->b2->arbiters;		HX_STACK_VAR(tmp20,"tmp20");
								HX_STACK_LINE(2266)
								::zpp_nape::util::ZNPList_ZPP_Arbiter _this = tmp20;		HX_STACK_VAR(_this,"_this");
								HX_STACK_LINE(2266)
								{
									HX_STACK_LINE(2266)
									::zpp_nape::util::ZNPNode_ZPP_Arbiter pre1 = null();		HX_STACK_VAR(pre1,"pre1");
									HX_STACK_LINE(2266)
									::zpp_nape::util::ZNPNode_ZPP_Arbiter cur = _this->head;		HX_STACK_VAR(cur,"cur");
									HX_STACK_LINE(2266)
									bool ret = false;		HX_STACK_VAR(ret,"ret");
									HX_STACK_LINE(2266)
									while((true)){
										HX_STACK_LINE(2266)
										bool tmp21 = (cur != null());		HX_STACK_VAR(tmp21,"tmp21");
										HX_STACK_LINE(2266)
										bool tmp22 = !(tmp21);		HX_STACK_VAR(tmp22,"tmp22");
										HX_STACK_LINE(2266)
										if ((tmp22)){
											HX_STACK_LINE(2266)
											break;
										}
										HX_STACK_LINE(2266)
										bool tmp23 = (cur->elt == xarb);		HX_STACK_VAR(tmp23,"tmp23");
										HX_STACK_LINE(2266)
										if ((tmp23)){
											HX_STACK_LINE(2266)
											{
												HX_STACK_LINE(2266)
												::zpp_nape::util::ZNPNode_ZPP_Arbiter old;		HX_STACK_VAR(old,"old");
												HX_STACK_LINE(2266)
												::zpp_nape::util::ZNPNode_ZPP_Arbiter ret1;		HX_STACK_VAR(ret1,"ret1");
												HX_STACK_LINE(2266)
												bool tmp24 = (pre1 == null());		HX_STACK_VAR(tmp24,"tmp24");
												HX_STACK_LINE(2266)
												if ((tmp24)){
													HX_STACK_LINE(2266)
													old = _this->head;
													HX_STACK_LINE(2266)
													ret1 = old->next;
													HX_STACK_LINE(2266)
													_this->head = ret1;
													HX_STACK_LINE(2266)
													bool tmp25 = (_this->head == null());		HX_STACK_VAR(tmp25,"tmp25");
													HX_STACK_LINE(2266)
													if ((tmp25)){
														HX_STACK_LINE(2266)
														_this->pushmod = true;
													}
												}
												else{
													HX_STACK_LINE(2266)
													old = pre1->next;
													HX_STACK_LINE(2266)
													ret1 = old->next;
													HX_STACK_LINE(2266)
													pre1->next = ret1;
													HX_STACK_LINE(2266)
													bool tmp25 = (ret1 == null());		HX_STACK_VAR(tmp25,"tmp25");
													HX_STACK_LINE(2266)
													if ((tmp25)){
														HX_STACK_LINE(2266)
														_this->pushmod = true;
													}
												}
												HX_STACK_LINE(2266)
												{
													HX_STACK_LINE(2266)
													::zpp_nape::util::ZNPNode_ZPP_Arbiter o = old;		HX_STACK_VAR(o,"o");
													HX_STACK_LINE(2266)
													o->elt = null();
													HX_STACK_LINE(2266)
													::zpp_nape::util::ZNPNode_ZPP_Arbiter tmp25 = ::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool;		HX_STACK_VAR(tmp25,"tmp25");
													HX_STACK_LINE(2266)
													o->next = tmp25;
													HX_STACK_LINE(2266)
													::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool = o;
												}
												HX_STACK_LINE(2266)
												_this->modified = true;
												HX_STACK_LINE(2266)
												(_this->length)--;
												HX_STACK_LINE(2266)
												_this->pushmod = true;
												HX_STACK_LINE(2266)
												ret1;
											}
											HX_STACK_LINE(2266)
											ret = true;
											HX_STACK_LINE(2266)
											break;
										}
										HX_STACK_LINE(2266)
										pre1 = cur;
										HX_STACK_LINE(2266)
										cur = cur->next;
									}
									HX_STACK_LINE(2266)
									ret;
								}
							}
							HX_STACK_LINE(2266)
							bool tmp20 = (xarb->pair != null());		HX_STACK_VAR(tmp20,"tmp20");
							HX_STACK_LINE(2266)
							if ((tmp20)){
								HX_STACK_LINE(2266)
								xarb->pair->arb = null();
								HX_STACK_LINE(2266)
								xarb->pair = null();
							}
							HX_STACK_LINE(2266)
							xarb->active = false;
							HX_STACK_LINE(2266)
							::zpp_nape::util::ZNPList_ZPP_FluidArbiter tmp21 = this->f_arbiters;		HX_STACK_VAR(tmp21,"tmp21");
							HX_STACK_LINE(2266)
							tmp21->modified = true;
						}
						HX_STACK_LINE(2267)
						::zpp_nape::util::ZNPNode_ZPP_Arbiter tmp14 = pre;		HX_STACK_VAR(tmp14,"tmp14");
						HX_STACK_LINE(2267)
						::zpp_nape::util::ZNPNode_ZPP_Arbiter tmp15 = body->arbiters->erase(tmp14);		HX_STACK_VAR(tmp15,"tmp15");
						HX_STACK_LINE(2267)
						cx_ite = tmp15;
						HX_STACK_LINE(2268)
						continue;
					}
					HX_STACK_LINE(2270)
					pre = cx_ite;
				}
				HX_STACK_LINE(2272)
				cx_ite = cx_ite->next;
			}
		}
		HX_STACK_LINE(2275)
		::zpp_nape::space::ZPP_Broadphase tmp2 = this->bphase;		HX_STACK_VAR(tmp2,"tmp2");
		HX_STACK_LINE(2275)
		::zpp_nape::shape::ZPP_Shape tmp3 = s;		HX_STACK_VAR(tmp3,"tmp3");
		HX_STACK_LINE(2275)
		tmp2->remove(tmp3);
		HX_STACK_LINE(2276)
		s->removedFromSpace();
	}
return null();
}


HX_DEFINE_DYNAMIC_FUNC2(ZPP_Space_obj,removed_shape,(void))

Void ZPP_Space_obj::addConstraint( ::zpp_nape::constraint::ZPP_Constraint con){
{
		HX_STACK_FRAME("zpp_nape.space.ZPP_Space","addConstraint",0x6bc234a8,"zpp_nape.space.ZPP_Space.addConstraint","zpp_nape/space/Space.hx",2278,0x2b65ed03)
		HX_STACK_THIS(this)
		HX_STACK_ARG(con,"con")
		HX_STACK_LINE(2279)
		con->space = hx::ObjectPtr<OBJ_>(this);
		HX_STACK_LINE(2280)
		con->addedToSpace();
		HX_STACK_LINE(2281)
		bool tmp = con->active;		HX_STACK_VAR(tmp,"tmp");
		HX_STACK_LINE(2281)
		if ((tmp)){
			HX_STACK_LINE(2290)
			con->component->sleeping = true;
			HX_STACK_LINE(2291)
			::zpp_nape::constraint::ZPP_Constraint tmp1 = con;		HX_STACK_VAR(tmp1,"tmp1");
			HX_STACK_LINE(2291)
			this->wake_constraint(tmp1,true);
		}
	}
return null();
}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Space_obj,addConstraint,(void))

Void ZPP_Space_obj::remConstraint( ::zpp_nape::constraint::ZPP_Constraint con){
{
		HX_STACK_FRAME("zpp_nape.space.ZPP_Space","remConstraint",0xd71bbd21,"zpp_nape.space.ZPP_Space.remConstraint","zpp_nape/space/Space.hx",2294,0x2b65ed03)
		HX_STACK_THIS(this)
		HX_STACK_ARG(con,"con")
		HX_STACK_LINE(2295)
		bool tmp = con->active;		HX_STACK_VAR(tmp,"tmp");
		HX_STACK_LINE(2295)
		if ((tmp)){
			HX_STACK_LINE(2296)
			::zpp_nape::constraint::ZPP_Constraint tmp1 = con;		HX_STACK_VAR(tmp1,"tmp1");
			HX_STACK_LINE(2296)
			this->wake_constraint(tmp1,true);
			HX_STACK_LINE(2297)
			::zpp_nape::util::ZNPList_ZPP_Constraint tmp2 = this->live_constraints;		HX_STACK_VAR(tmp2,"tmp2");
			HX_STACK_LINE(2297)
			::zpp_nape::constraint::ZPP_Constraint tmp3 = con;		HX_STACK_VAR(tmp3,"tmp3");
			HX_STACK_LINE(2297)
			tmp2->remove(tmp3);
		}
		HX_STACK_LINE(2299)
		con->removedFromSpace();
		HX_STACK_LINE(2300)
		con->space = null();
	}
return null();
}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Space_obj,remConstraint,(void))

Void ZPP_Space_obj::addCompound( ::zpp_nape::phys::ZPP_Compound x){
{
		HX_STACK_FRAME("zpp_nape.space.ZPP_Space","addCompound",0x5027bef6,"zpp_nape.space.ZPP_Space.addCompound","zpp_nape/space/Space.hx",2302,0x2b65ed03)
		HX_STACK_THIS(this)
		HX_STACK_ARG(x,"x")
		HX_STACK_LINE(2303)
		x->space = hx::ObjectPtr<OBJ_>(this);
		HX_STACK_LINE(2304)
		x->addedToSpace();
		HX_STACK_LINE(2305)
		{
			HX_STACK_LINE(2306)
			::zpp_nape::util::ZNPNode_ZPP_Body tmp = x->bodies->head;		HX_STACK_VAR(tmp,"tmp");
			HX_STACK_LINE(2306)
			::zpp_nape::util::ZNPNode_ZPP_Body cx_ite = tmp;		HX_STACK_VAR(cx_ite,"cx_ite");
			HX_STACK_LINE(2307)
			while((true)){
				HX_STACK_LINE(2307)
				bool tmp1 = (cx_ite != null());		HX_STACK_VAR(tmp1,"tmp1");
				HX_STACK_LINE(2307)
				bool tmp2 = !(tmp1);		HX_STACK_VAR(tmp2,"tmp2");
				HX_STACK_LINE(2307)
				if ((tmp2)){
					HX_STACK_LINE(2307)
					break;
				}
				HX_STACK_LINE(2308)
				::zpp_nape::phys::ZPP_Body i = cx_ite->elt;		HX_STACK_VAR(i,"i");
				HX_STACK_LINE(2309)
				::zpp_nape::phys::ZPP_Body tmp3 = i;		HX_STACK_VAR(tmp3,"tmp3");
				HX_STACK_LINE(2309)
				this->addBody(tmp3,null());
				HX_STACK_LINE(2310)
				cx_ite = cx_ite->next;
			}
		}
		HX_STACK_LINE(2313)
		{
			HX_STACK_LINE(2314)
			::zpp_nape::util::ZNPNode_ZPP_Constraint tmp = x->constraints->head;		HX_STACK_VAR(tmp,"tmp");
			HX_STACK_LINE(2314)
			::zpp_nape::util::ZNPNode_ZPP_Constraint cx_ite = tmp;		HX_STACK_VAR(cx_ite,"cx_ite");
			HX_STACK_LINE(2315)
			while((true)){
				HX_STACK_LINE(2315)
				bool tmp1 = (cx_ite != null());		HX_STACK_VAR(tmp1,"tmp1");
				HX_STACK_LINE(2315)
				bool tmp2 = !(tmp1);		HX_STACK_VAR(tmp2,"tmp2");
				HX_STACK_LINE(2315)
				if ((tmp2)){
					HX_STACK_LINE(2315)
					break;
				}
				HX_STACK_LINE(2316)
				::zpp_nape::constraint::ZPP_Constraint i = cx_ite->elt;		HX_STACK_VAR(i,"i");
				HX_STACK_LINE(2317)
				::zpp_nape::constraint::ZPP_Constraint tmp3 = i;		HX_STACK_VAR(tmp3,"tmp3");
				HX_STACK_LINE(2317)
				this->addConstraint(tmp3);
				HX_STACK_LINE(2318)
				cx_ite = cx_ite->next;
			}
		}
		HX_STACK_LINE(2321)
		{
			HX_STACK_LINE(2322)
			::zpp_nape::util::ZNPNode_ZPP_Compound tmp = x->compounds->head;		HX_STACK_VAR(tmp,"tmp");
			HX_STACK_LINE(2322)
			::zpp_nape::util::ZNPNode_ZPP_Compound cx_ite = tmp;		HX_STACK_VAR(cx_ite,"cx_ite");
			HX_STACK_LINE(2323)
			while((true)){
				HX_STACK_LINE(2323)
				bool tmp1 = (cx_ite != null());		HX_STACK_VAR(tmp1,"tmp1");
				HX_STACK_LINE(2323)
				bool tmp2 = !(tmp1);		HX_STACK_VAR(tmp2,"tmp2");
				HX_STACK_LINE(2323)
				if ((tmp2)){
					HX_STACK_LINE(2323)
					break;
				}
				HX_STACK_LINE(2324)
				::zpp_nape::phys::ZPP_Compound i = cx_ite->elt;		HX_STACK_VAR(i,"i");
				HX_STACK_LINE(2325)
				::zpp_nape::phys::ZPP_Compound tmp3 = i;		HX_STACK_VAR(tmp3,"tmp3");
				HX_STACK_LINE(2325)
				this->addCompound(tmp3);
				HX_STACK_LINE(2326)
				cx_ite = cx_ite->next;
			}
		}
	}
return null();
}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Space_obj,addCompound,(void))

Void ZPP_Space_obj::remCompound( ::zpp_nape::phys::ZPP_Compound x){
{
		HX_STACK_FRAME("zpp_nape.space.ZPP_Space","remCompound",0x09b4072f,"zpp_nape.space.ZPP_Space.remCompound","zpp_nape/space/Space.hx",2330,0x2b65ed03)
		HX_STACK_THIS(this)
		HX_STACK_ARG(x,"x")
		HX_STACK_LINE(2331)
		{
			HX_STACK_LINE(2332)
			::zpp_nape::util::ZNPNode_ZPP_Body tmp = x->bodies->head;		HX_STACK_VAR(tmp,"tmp");
			HX_STACK_LINE(2332)
			::zpp_nape::util::ZNPNode_ZPP_Body cx_ite = tmp;		HX_STACK_VAR(cx_ite,"cx_ite");
			HX_STACK_LINE(2333)
			while((true)){
				HX_STACK_LINE(2333)
				bool tmp1 = (cx_ite != null());		HX_STACK_VAR(tmp1,"tmp1");
				HX_STACK_LINE(2333)
				bool tmp2 = !(tmp1);		HX_STACK_VAR(tmp2,"tmp2");
				HX_STACK_LINE(2333)
				if ((tmp2)){
					HX_STACK_LINE(2333)
					break;
				}
				HX_STACK_LINE(2334)
				::zpp_nape::phys::ZPP_Body i = cx_ite->elt;		HX_STACK_VAR(i,"i");
				HX_STACK_LINE(2335)
				::zpp_nape::phys::ZPP_Body tmp3 = i;		HX_STACK_VAR(tmp3,"tmp3");
				HX_STACK_LINE(2335)
				this->remBody(tmp3,null());
				HX_STACK_LINE(2336)
				cx_ite = cx_ite->next;
			}
		}
		HX_STACK_LINE(2339)
		{
			HX_STACK_LINE(2340)
			::zpp_nape::util::ZNPNode_ZPP_Constraint tmp = x->constraints->head;		HX_STACK_VAR(tmp,"tmp");
			HX_STACK_LINE(2340)
			::zpp_nape::util::ZNPNode_ZPP_Constraint cx_ite = tmp;		HX_STACK_VAR(cx_ite,"cx_ite");
			HX_STACK_LINE(2341)
			while((true)){
				HX_STACK_LINE(2341)
				bool tmp1 = (cx_ite != null());		HX_STACK_VAR(tmp1,"tmp1");
				HX_STACK_LINE(2341)
				bool tmp2 = !(tmp1);		HX_STACK_VAR(tmp2,"tmp2");
				HX_STACK_LINE(2341)
				if ((tmp2)){
					HX_STACK_LINE(2341)
					break;
				}
				HX_STACK_LINE(2342)
				::zpp_nape::constraint::ZPP_Constraint i = cx_ite->elt;		HX_STACK_VAR(i,"i");
				HX_STACK_LINE(2343)
				::zpp_nape::constraint::ZPP_Constraint tmp3 = i;		HX_STACK_VAR(tmp3,"tmp3");
				HX_STACK_LINE(2343)
				this->remConstraint(tmp3);
				HX_STACK_LINE(2344)
				cx_ite = cx_ite->next;
			}
		}
		HX_STACK_LINE(2347)
		{
			HX_STACK_LINE(2348)
			::zpp_nape::util::ZNPNode_ZPP_Compound tmp = x->compounds->head;		HX_STACK_VAR(tmp,"tmp");
			HX_STACK_LINE(2348)
			::zpp_nape::util::ZNPNode_ZPP_Compound cx_ite = tmp;		HX_STACK_VAR(cx_ite,"cx_ite");
			HX_STACK_LINE(2349)
			while((true)){
				HX_STACK_LINE(2349)
				bool tmp1 = (cx_ite != null());		HX_STACK_VAR(tmp1,"tmp1");
				HX_STACK_LINE(2349)
				bool tmp2 = !(tmp1);		HX_STACK_VAR(tmp2,"tmp2");
				HX_STACK_LINE(2349)
				if ((tmp2)){
					HX_STACK_LINE(2349)
					break;
				}
				HX_STACK_LINE(2350)
				::zpp_nape::phys::ZPP_Compound i = cx_ite->elt;		HX_STACK_VAR(i,"i");
				HX_STACK_LINE(2351)
				::zpp_nape::phys::ZPP_Compound tmp3 = i;		HX_STACK_VAR(tmp3,"tmp3");
				HX_STACK_LINE(2351)
				this->remCompound(tmp3);
				HX_STACK_LINE(2352)
				cx_ite = cx_ite->next;
			}
		}
		HX_STACK_LINE(2355)
		x->removedFromSpace();
		HX_STACK_LINE(2356)
		x->space = null();
	}
return null();
}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Space_obj,remCompound,(void))

Void ZPP_Space_obj::addBody( ::zpp_nape::phys::ZPP_Body body,hx::Null< int >  __o_flag){
int flag = __o_flag.Default(-1);
	HX_STACK_FRAME("zpp_nape.space.ZPP_Space","addBody",0xafb614ad,"zpp_nape.space.ZPP_Space.addBody","zpp_nape/space/Space.hx",2358,0x2b65ed03)
	HX_STACK_THIS(this)
	HX_STACK_ARG(body,"body")
	HX_STACK_ARG(flag,"flag")
{
		HX_STACK_LINE(2359)
		body->space = hx::ObjectPtr<OBJ_>(this);
		HX_STACK_LINE(2360)
		body->addedToSpace();
		HX_STACK_LINE(2369)
		body->component->sleeping = true;
		HX_STACK_LINE(2370)
		{
			HX_STACK_LINE(2371)
			::zpp_nape::phys::ZPP_Body o = body;		HX_STACK_VAR(o,"o");
			HX_STACK_LINE(2380)
			bool tmp = o->world;		HX_STACK_VAR(tmp,"tmp");
			HX_STACK_LINE(2380)
			bool tmp1 = !(tmp);		HX_STACK_VAR(tmp1,"tmp1");
			HX_STACK_LINE(2380)
			if ((tmp1)){
				HX_STACK_LINE(2389)
				int tmp2 = this->stamp;		HX_STACK_VAR(tmp2,"tmp2");
				HX_STACK_LINE(2389)
				bool tmp3 = this->midstep;		HX_STACK_VAR(tmp3,"tmp3");
				HX_STACK_LINE(2389)
				int tmp4;		HX_STACK_VAR(tmp4,"tmp4");
				HX_STACK_LINE(2389)
				if ((tmp3)){
					HX_STACK_LINE(2389)
					tmp4 = (int)0;
				}
				else{
					HX_STACK_LINE(2389)
					tmp4 = (int)1;
				}
				HX_STACK_LINE(2389)
				int tmp5 = (tmp2 + tmp4);		HX_STACK_VAR(tmp5,"tmp5");
				HX_STACK_LINE(2389)
				o->component->waket = tmp5;
				HX_STACK_LINE(2390)
				int tmp6 = o->type;		HX_STACK_VAR(tmp6,"tmp6");
				HX_STACK_LINE(2390)
				int tmp7 = ::zpp_nape::util::ZPP_Flags_obj::id_BodyType_KINEMATIC;		HX_STACK_VAR(tmp7,"tmp7");
				HX_STACK_LINE(2390)
				bool tmp8 = (tmp6 == tmp7);		HX_STACK_VAR(tmp8,"tmp8");
				HX_STACK_LINE(2390)
				if ((tmp8)){
					HX_STACK_LINE(2390)
					o->kinematicDelaySleep = true;
				}
				HX_STACK_LINE(2391)
				bool tmp9 = o->component->sleeping;		HX_STACK_VAR(tmp9,"tmp9");
				HX_STACK_LINE(2391)
				if ((tmp9)){
					HX_STACK_LINE(2392)
					::zpp_nape::phys::ZPP_Body tmp10 = o;		HX_STACK_VAR(tmp10,"tmp10");
					HX_STACK_LINE(2392)
					this->really_wake(tmp10,true);
				}
			}
		}
		HX_STACK_LINE(2396)
		{
			HX_STACK_LINE(2397)
			::zpp_nape::util::ZNPNode_ZPP_Shape tmp = body->shapes->head;		HX_STACK_VAR(tmp,"tmp");
			HX_STACK_LINE(2397)
			::zpp_nape::util::ZNPNode_ZPP_Shape cx_ite = tmp;		HX_STACK_VAR(cx_ite,"cx_ite");
			HX_STACK_LINE(2398)
			while((true)){
				HX_STACK_LINE(2398)
				bool tmp1 = (cx_ite != null());		HX_STACK_VAR(tmp1,"tmp1");
				HX_STACK_LINE(2398)
				bool tmp2 = !(tmp1);		HX_STACK_VAR(tmp2,"tmp2");
				HX_STACK_LINE(2398)
				if ((tmp2)){
					HX_STACK_LINE(2398)
					break;
				}
				HX_STACK_LINE(2399)
				::zpp_nape::shape::ZPP_Shape shape = cx_ite->elt;		HX_STACK_VAR(shape,"shape");
				HX_STACK_LINE(2400)
				{
					HX_STACK_LINE(2400)
					bool tmp3 = false;		HX_STACK_VAR(tmp3,"tmp3");
					HX_STACK_LINE(2400)
					if ((tmp3)){
						HX_STACK_LINE(2400)
						::zpp_nape::phys::ZPP_Body o = shape->body;		HX_STACK_VAR(o,"o");
						HX_STACK_LINE(2400)
						bool tmp4 = o->world;		HX_STACK_VAR(tmp4,"tmp4");
						HX_STACK_LINE(2400)
						bool tmp5 = !(tmp4);		HX_STACK_VAR(tmp5,"tmp5");
						HX_STACK_LINE(2400)
						if ((tmp5)){
							HX_STACK_LINE(2400)
							int tmp6 = this->stamp;		HX_STACK_VAR(tmp6,"tmp6");
							HX_STACK_LINE(2400)
							bool tmp7 = this->midstep;		HX_STACK_VAR(tmp7,"tmp7");
							HX_STACK_LINE(2400)
							int tmp8;		HX_STACK_VAR(tmp8,"tmp8");
							HX_STACK_LINE(2400)
							if ((tmp7)){
								HX_STACK_LINE(2400)
								tmp8 = (int)0;
							}
							else{
								HX_STACK_LINE(2400)
								tmp8 = (int)1;
							}
							HX_STACK_LINE(2400)
							int tmp9 = (tmp6 + tmp8);		HX_STACK_VAR(tmp9,"tmp9");
							HX_STACK_LINE(2400)
							o->component->waket = tmp9;
							HX_STACK_LINE(2400)
							int tmp10 = o->type;		HX_STACK_VAR(tmp10,"tmp10");
							HX_STACK_LINE(2400)
							int tmp11 = ::zpp_nape::util::ZPP_Flags_obj::id_BodyType_KINEMATIC;		HX_STACK_VAR(tmp11,"tmp11");
							HX_STACK_LINE(2400)
							bool tmp12 = (tmp10 == tmp11);		HX_STACK_VAR(tmp12,"tmp12");
							HX_STACK_LINE(2400)
							if ((tmp12)){
								HX_STACK_LINE(2400)
								o->kinematicDelaySleep = true;
							}
							HX_STACK_LINE(2400)
							bool tmp13 = o->component->sleeping;		HX_STACK_VAR(tmp13,"tmp13");
							HX_STACK_LINE(2400)
							if ((tmp13)){
								HX_STACK_LINE(2400)
								::zpp_nape::phys::ZPP_Body tmp14 = o;		HX_STACK_VAR(tmp14,"tmp14");
								HX_STACK_LINE(2400)
								this->really_wake(tmp14,false);
							}
						}
					}
					HX_STACK_LINE(2400)
					::zpp_nape::space::ZPP_Broadphase tmp4 = this->bphase;		HX_STACK_VAR(tmp4,"tmp4");
					HX_STACK_LINE(2400)
					::zpp_nape::shape::ZPP_Shape tmp5 = shape;		HX_STACK_VAR(tmp5,"tmp5");
					HX_STACK_LINE(2400)
					tmp4->insert(tmp5);
					HX_STACK_LINE(2400)
					shape->addedToSpace();
				}
				HX_STACK_LINE(2401)
				cx_ite = cx_ite->next;
			}
		}
		HX_STACK_LINE(2404)
		int tmp = body->type;		HX_STACK_VAR(tmp,"tmp");
		HX_STACK_LINE(2404)
		int tmp1 = ::zpp_nape::util::ZPP_Flags_obj::id_BodyType_STATIC;		HX_STACK_VAR(tmp1,"tmp1");
		HX_STACK_LINE(2404)
		bool tmp2 = (tmp == tmp1);		HX_STACK_VAR(tmp2,"tmp2");
		HX_STACK_LINE(2404)
		if ((tmp2)){
			HX_STACK_LINE(2405)
			::zpp_nape::phys::ZPP_Body tmp3 = body;		HX_STACK_VAR(tmp3,"tmp3");
			HX_STACK_LINE(2405)
			this->static_validation(tmp3);
			HX_STACK_LINE(2406)
			{
			}
		}
		else{
			HX_STACK_LINE(2416)
			int tmp3 = body->type;		HX_STACK_VAR(tmp3,"tmp3");
			HX_STACK_LINE(2416)
			int tmp4 = ::zpp_nape::util::ZPP_Flags_obj::id_BodyType_DYNAMIC;		HX_STACK_VAR(tmp4,"tmp4");
			HX_STACK_LINE(2416)
			bool tmp5 = (tmp3 == tmp4);		HX_STACK_VAR(tmp5,"tmp5");
			HX_STACK_LINE(2416)
			if ((tmp5)){
			}
			else{
				HX_STACK_LINE(2427)
				int tmp6 = flag;		HX_STACK_VAR(tmp6,"tmp6");
				HX_STACK_LINE(2427)
				int tmp7 = ::zpp_nape::util::ZPP_Flags_obj::id_BodyType_KINEMATIC;		HX_STACK_VAR(tmp7,"tmp7");
				HX_STACK_LINE(2427)
				bool tmp8 = (tmp6 != tmp7);		HX_STACK_VAR(tmp8,"tmp8");
				HX_STACK_LINE(2427)
				if ((tmp8)){
					HX_STACK_LINE(2427)
					::zpp_nape::util::ZNPList_ZPP_Body tmp9 = this->kinematics;		HX_STACK_VAR(tmp9,"tmp9");
					HX_STACK_LINE(2427)
					::zpp_nape::phys::ZPP_Body tmp10 = body;		HX_STACK_VAR(tmp10,"tmp10");
					HX_STACK_LINE(2427)
					tmp9->add(tmp10);
				}
				HX_STACK_LINE(2428)
				{
				}
			}
		}
	}
return null();
}


HX_DEFINE_DYNAMIC_FUNC2(ZPP_Space_obj,addBody,(void))

Void ZPP_Space_obj::remBody( ::zpp_nape::phys::ZPP_Body body,hx::Null< int >  __o_flag){
int flag = __o_flag.Default(-1);
	HX_STACK_FRAME("zpp_nape.space.ZPP_Space","remBody",0x07998c66,"zpp_nape.space.ZPP_Space.remBody","zpp_nape/space/Space.hx",2439,0x2b65ed03)
	HX_STACK_THIS(this)
	HX_STACK_ARG(body,"body")
	HX_STACK_ARG(flag,"flag")
{
		HX_STACK_LINE(2440)
		int tmp = body->type;		HX_STACK_VAR(tmp,"tmp");
		HX_STACK_LINE(2440)
		int tmp1 = ::zpp_nape::util::ZPP_Flags_obj::id_BodyType_STATIC;		HX_STACK_VAR(tmp1,"tmp1");
		HX_STACK_LINE(2440)
		bool tmp2 = (tmp == tmp1);		HX_STACK_VAR(tmp2,"tmp2");
		HX_STACK_LINE(2440)
		if ((tmp2)){
			HX_STACK_LINE(2441)
			{
				HX_STACK_LINE(2442)
				::zpp_nape::phys::ZPP_Body o = body;		HX_STACK_VAR(o,"o");
				HX_STACK_LINE(2451)
				bool tmp3 = o->world;		HX_STACK_VAR(tmp3,"tmp3");
				HX_STACK_LINE(2451)
				bool tmp4 = !(tmp3);		HX_STACK_VAR(tmp4,"tmp4");
				HX_STACK_LINE(2451)
				if ((tmp4)){
					HX_STACK_LINE(2460)
					int tmp5 = this->stamp;		HX_STACK_VAR(tmp5,"tmp5");
					HX_STACK_LINE(2460)
					bool tmp6 = this->midstep;		HX_STACK_VAR(tmp6,"tmp6");
					HX_STACK_LINE(2460)
					int tmp7;		HX_STACK_VAR(tmp7,"tmp7");
					HX_STACK_LINE(2460)
					if ((tmp6)){
						HX_STACK_LINE(2460)
						tmp7 = (int)0;
					}
					else{
						HX_STACK_LINE(2460)
						tmp7 = (int)1;
					}
					HX_STACK_LINE(2460)
					int tmp8 = (tmp5 + tmp7);		HX_STACK_VAR(tmp8,"tmp8");
					HX_STACK_LINE(2460)
					o->component->waket = tmp8;
					HX_STACK_LINE(2461)
					int tmp9 = o->type;		HX_STACK_VAR(tmp9,"tmp9");
					HX_STACK_LINE(2461)
					int tmp10 = ::zpp_nape::util::ZPP_Flags_obj::id_BodyType_KINEMATIC;		HX_STACK_VAR(tmp10,"tmp10");
					HX_STACK_LINE(2461)
					bool tmp11 = (tmp9 == tmp10);		HX_STACK_VAR(tmp11,"tmp11");
					HX_STACK_LINE(2461)
					if ((tmp11)){
						HX_STACK_LINE(2461)
						o->kinematicDelaySleep = true;
					}
					HX_STACK_LINE(2462)
					bool tmp12 = o->component->sleeping;		HX_STACK_VAR(tmp12,"tmp12");
					HX_STACK_LINE(2462)
					if ((tmp12)){
						HX_STACK_LINE(2463)
						::zpp_nape::phys::ZPP_Body tmp13 = o;		HX_STACK_VAR(tmp13,"tmp13");
						HX_STACK_LINE(2463)
						this->really_wake(tmp13,true);
					}
				}
			}
			HX_STACK_LINE(2483)
			::zpp_nape::util::ZNPList_ZPP_Body tmp3 = this->staticsleep;		HX_STACK_VAR(tmp3,"tmp3");
			HX_STACK_LINE(2483)
			::zpp_nape::phys::ZPP_Body tmp4 = body;		HX_STACK_VAR(tmp4,"tmp4");
			HX_STACK_LINE(2483)
			tmp3->remove(tmp4);
			HX_STACK_LINE(2484)
			{
			}
		}
		else{
			HX_STACK_LINE(2494)
			int tmp3 = body->type;		HX_STACK_VAR(tmp3,"tmp3");
			HX_STACK_LINE(2494)
			int tmp4 = ::zpp_nape::util::ZPP_Flags_obj::id_BodyType_DYNAMIC;		HX_STACK_VAR(tmp4,"tmp4");
			HX_STACK_LINE(2494)
			bool tmp5 = (tmp3 == tmp4);		HX_STACK_VAR(tmp5,"tmp5");
			HX_STACK_LINE(2494)
			if ((tmp5)){
				HX_STACK_LINE(2495)
				{
					HX_STACK_LINE(2496)
					::zpp_nape::phys::ZPP_Body o = body;		HX_STACK_VAR(o,"o");
					HX_STACK_LINE(2505)
					bool tmp6 = o->world;		HX_STACK_VAR(tmp6,"tmp6");
					HX_STACK_LINE(2505)
					bool tmp7 = !(tmp6);		HX_STACK_VAR(tmp7,"tmp7");
					HX_STACK_LINE(2505)
					if ((tmp7)){
						HX_STACK_LINE(2514)
						int tmp8 = this->stamp;		HX_STACK_VAR(tmp8,"tmp8");
						HX_STACK_LINE(2514)
						bool tmp9 = this->midstep;		HX_STACK_VAR(tmp9,"tmp9");
						HX_STACK_LINE(2514)
						int tmp10;		HX_STACK_VAR(tmp10,"tmp10");
						HX_STACK_LINE(2514)
						if ((tmp9)){
							HX_STACK_LINE(2514)
							tmp10 = (int)0;
						}
						else{
							HX_STACK_LINE(2514)
							tmp10 = (int)1;
						}
						HX_STACK_LINE(2514)
						int tmp11 = (tmp8 + tmp10);		HX_STACK_VAR(tmp11,"tmp11");
						HX_STACK_LINE(2514)
						o->component->waket = tmp11;
						HX_STACK_LINE(2515)
						int tmp12 = o->type;		HX_STACK_VAR(tmp12,"tmp12");
						HX_STACK_LINE(2515)
						int tmp13 = ::zpp_nape::util::ZPP_Flags_obj::id_BodyType_KINEMATIC;		HX_STACK_VAR(tmp13,"tmp13");
						HX_STACK_LINE(2515)
						bool tmp14 = (tmp12 == tmp13);		HX_STACK_VAR(tmp14,"tmp14");
						HX_STACK_LINE(2515)
						if ((tmp14)){
							HX_STACK_LINE(2515)
							o->kinematicDelaySleep = true;
						}
						HX_STACK_LINE(2516)
						bool tmp15 = o->component->sleeping;		HX_STACK_VAR(tmp15,"tmp15");
						HX_STACK_LINE(2516)
						if ((tmp15)){
							HX_STACK_LINE(2517)
							::zpp_nape::phys::ZPP_Body tmp16 = o;		HX_STACK_VAR(tmp16,"tmp16");
							HX_STACK_LINE(2517)
							this->really_wake(tmp16,true);
						}
					}
				}
				HX_STACK_LINE(2521)
				::zpp_nape::util::ZNPList_ZPP_Body tmp6 = this->live;		HX_STACK_VAR(tmp6,"tmp6");
				HX_STACK_LINE(2521)
				::zpp_nape::phys::ZPP_Body tmp7 = body;		HX_STACK_VAR(tmp7,"tmp7");
				HX_STACK_LINE(2521)
				tmp6->remove(tmp7);
				HX_STACK_LINE(2522)
				{
				}
			}
			else{
				HX_STACK_LINE(2532)
				int tmp6 = flag;		HX_STACK_VAR(tmp6,"tmp6");
				HX_STACK_LINE(2532)
				int tmp7 = ::zpp_nape::util::ZPP_Flags_obj::id_BodyType_KINEMATIC;		HX_STACK_VAR(tmp7,"tmp7");
				HX_STACK_LINE(2532)
				bool tmp8 = (tmp6 != tmp7);		HX_STACK_VAR(tmp8,"tmp8");
				HX_STACK_LINE(2532)
				if ((tmp8)){
					HX_STACK_LINE(2532)
					::zpp_nape::util::ZNPList_ZPP_Body tmp9 = this->kinematics;		HX_STACK_VAR(tmp9,"tmp9");
					HX_STACK_LINE(2532)
					::zpp_nape::phys::ZPP_Body tmp10 = body;		HX_STACK_VAR(tmp10,"tmp10");
					HX_STACK_LINE(2532)
					tmp9->remove(tmp10);
				}
				HX_STACK_LINE(2533)
				{
					HX_STACK_LINE(2534)
					::zpp_nape::phys::ZPP_Body o = body;		HX_STACK_VAR(o,"o");
					HX_STACK_LINE(2543)
					bool tmp9 = o->world;		HX_STACK_VAR(tmp9,"tmp9");
					HX_STACK_LINE(2543)
					bool tmp10 = !(tmp9);		HX_STACK_VAR(tmp10,"tmp10");
					HX_STACK_LINE(2543)
					if ((tmp10)){
						HX_STACK_LINE(2552)
						int tmp11 = this->stamp;		HX_STACK_VAR(tmp11,"tmp11");
						HX_STACK_LINE(2552)
						bool tmp12 = this->midstep;		HX_STACK_VAR(tmp12,"tmp12");
						HX_STACK_LINE(2552)
						int tmp13;		HX_STACK_VAR(tmp13,"tmp13");
						HX_STACK_LINE(2552)
						if ((tmp12)){
							HX_STACK_LINE(2552)
							tmp13 = (int)0;
						}
						else{
							HX_STACK_LINE(2552)
							tmp13 = (int)1;
						}
						HX_STACK_LINE(2552)
						int tmp14 = (tmp11 + tmp13);		HX_STACK_VAR(tmp14,"tmp14");
						HX_STACK_LINE(2552)
						o->component->waket = tmp14;
						HX_STACK_LINE(2553)
						int tmp15 = o->type;		HX_STACK_VAR(tmp15,"tmp15");
						HX_STACK_LINE(2553)
						int tmp16 = ::zpp_nape::util::ZPP_Flags_obj::id_BodyType_KINEMATIC;		HX_STACK_VAR(tmp16,"tmp16");
						HX_STACK_LINE(2553)
						bool tmp17 = (tmp15 == tmp16);		HX_STACK_VAR(tmp17,"tmp17");
						HX_STACK_LINE(2553)
						if ((tmp17)){
							HX_STACK_LINE(2553)
							o->kinematicDelaySleep = true;
						}
						HX_STACK_LINE(2554)
						bool tmp18 = o->component->sleeping;		HX_STACK_VAR(tmp18,"tmp18");
						HX_STACK_LINE(2554)
						if ((tmp18)){
							HX_STACK_LINE(2555)
							::zpp_nape::phys::ZPP_Body tmp19 = o;		HX_STACK_VAR(tmp19,"tmp19");
							HX_STACK_LINE(2555)
							this->really_wake(tmp19,true);
						}
					}
				}
				HX_STACK_LINE(2559)
				::zpp_nape::util::ZNPList_ZPP_Body tmp9 = this->staticsleep;		HX_STACK_VAR(tmp9,"tmp9");
				HX_STACK_LINE(2559)
				::zpp_nape::phys::ZPP_Body tmp10 = body;		HX_STACK_VAR(tmp10,"tmp10");
				HX_STACK_LINE(2559)
				tmp9->remove(tmp10);
				HX_STACK_LINE(2560)
				{
				}
			}
		}
		HX_STACK_LINE(2570)
		{
			HX_STACK_LINE(2571)
			::zpp_nape::util::ZNPNode_ZPP_Shape tmp3 = body->shapes->head;		HX_STACK_VAR(tmp3,"tmp3");
			HX_STACK_LINE(2571)
			::zpp_nape::util::ZNPNode_ZPP_Shape cx_ite = tmp3;		HX_STACK_VAR(cx_ite,"cx_ite");
			HX_STACK_LINE(2572)
			while((true)){
				HX_STACK_LINE(2572)
				bool tmp4 = (cx_ite != null());		HX_STACK_VAR(tmp4,"tmp4");
				HX_STACK_LINE(2572)
				bool tmp5 = !(tmp4);		HX_STACK_VAR(tmp5,"tmp5");
				HX_STACK_LINE(2572)
				if ((tmp5)){
					HX_STACK_LINE(2572)
					break;
				}
				HX_STACK_LINE(2573)
				::zpp_nape::shape::ZPP_Shape shape = cx_ite->elt;		HX_STACK_VAR(shape,"shape");
				HX_STACK_LINE(2574)
				::zpp_nape::shape::ZPP_Shape tmp6 = shape;		HX_STACK_VAR(tmp6,"tmp6");
				HX_STACK_LINE(2574)
				this->removed_shape(tmp6,true);
				HX_STACK_LINE(2575)
				cx_ite = cx_ite->next;
			}
		}
		HX_STACK_LINE(2578)
		body->removedFromSpace();
		HX_STACK_LINE(2579)
		body->space = null();
	}
return null();
}


HX_DEFINE_DYNAMIC_FUNC2(ZPP_Space_obj,remBody,(void))

::nape::shape::ShapeList ZPP_Space_obj::shapesUnderPoint( Float x,Float y,::zpp_nape::dynamics::ZPP_InteractionFilter filter,::nape::shape::ShapeList output){
	HX_STACK_FRAME("zpp_nape.space.ZPP_Space","shapesUnderPoint",0x46035c60,"zpp_nape.space.ZPP_Space.shapesUnderPoint","zpp_nape/space/Space.hx",2581,0x2b65ed03)
	HX_STACK_THIS(this)
	HX_STACK_ARG(x,"x")
	HX_STACK_ARG(y,"y")
	HX_STACK_ARG(filter,"filter")
	HX_STACK_ARG(output,"output")
	HX_STACK_LINE(2582)
	::zpp_nape::space::ZPP_Broadphase tmp = this->bphase;		HX_STACK_VAR(tmp,"tmp");
	HX_STACK_LINE(2582)
	Float tmp1 = x;		HX_STACK_VAR(tmp1,"tmp1");
	HX_STACK_LINE(2582)
	Float tmp2 = y;		HX_STACK_VAR(tmp2,"tmp2");
	HX_STACK_LINE(2582)
	::zpp_nape::dynamics::ZPP_InteractionFilter tmp3 = filter;		HX_STACK_VAR(tmp3,"tmp3");
	HX_STACK_LINE(2582)
	::nape::shape::ShapeList tmp4 = output;		HX_STACK_VAR(tmp4,"tmp4");
	HX_STACK_LINE(2582)
	::nape::shape::ShapeList tmp5 = tmp->shapesUnderPoint(tmp1,tmp2,tmp3,tmp4);		HX_STACK_VAR(tmp5,"tmp5");
	HX_STACK_LINE(2582)
	return tmp5;
}


HX_DEFINE_DYNAMIC_FUNC4(ZPP_Space_obj,shapesUnderPoint,return )

::nape::phys::BodyList ZPP_Space_obj::bodiesUnderPoint( Float x,Float y,::zpp_nape::dynamics::ZPP_InteractionFilter filter,::nape::phys::BodyList output){
	HX_STACK_FRAME("zpp_nape.space.ZPP_Space","bodiesUnderPoint",0x7e768b2e,"zpp_nape.space.ZPP_Space.bodiesUnderPoint","zpp_nape/space/Space.hx",2584,0x2b65ed03)
	HX_STACK_THIS(this)
	HX_STACK_ARG(x,"x")
	HX_STACK_ARG(y,"y")
	HX_STACK_ARG(filter,"filter")
	HX_STACK_ARG(output,"output")
	HX_STACK_LINE(2585)
	::zpp_nape::space::ZPP_Broadphase tmp = this->bphase;		HX_STACK_VAR(tmp,"tmp");
	HX_STACK_LINE(2585)
	Float tmp1 = x;		HX_STACK_VAR(tmp1,"tmp1");
	HX_STACK_LINE(2585)
	Float tmp2 = y;		HX_STACK_VAR(tmp2,"tmp2");
	HX_STACK_LINE(2585)
	::zpp_nape::dynamics::ZPP_InteractionFilter tmp3 = filter;		HX_STACK_VAR(tmp3,"tmp3");
	HX_STACK_LINE(2585)
	::nape::phys::BodyList tmp4 = output;		HX_STACK_VAR(tmp4,"tmp4");
	HX_STACK_LINE(2585)
	::nape::phys::BodyList tmp5 = tmp->bodiesUnderPoint(tmp1,tmp2,tmp3,tmp4);		HX_STACK_VAR(tmp5,"tmp5");
	HX_STACK_LINE(2585)
	return tmp5;
}


HX_DEFINE_DYNAMIC_FUNC4(ZPP_Space_obj,bodiesUnderPoint,return )

::nape::shape::ShapeList ZPP_Space_obj::shapesInAABB( ::nape::geom::AABB aabb,bool strict,bool cont,::zpp_nape::dynamics::ZPP_InteractionFilter filter,::nape::shape::ShapeList output){
	HX_STACK_FRAME("zpp_nape.space.ZPP_Space","shapesInAABB",0xb8d4194d,"zpp_nape.space.ZPP_Space.shapesInAABB","zpp_nape/space/Space.hx",2587,0x2b65ed03)
	HX_STACK_THIS(this)
	HX_STACK_ARG(aabb,"aabb")
	HX_STACK_ARG(strict,"strict")
	HX_STACK_ARG(cont,"cont")
	HX_STACK_ARG(filter,"filter")
	HX_STACK_ARG(output,"output")
	HX_STACK_LINE(2588)
	::zpp_nape::space::ZPP_Broadphase tmp = this->bphase;		HX_STACK_VAR(tmp,"tmp");
	HX_STACK_LINE(2588)
	::zpp_nape::geom::ZPP_AABB tmp1 = aabb->zpp_inner;		HX_STACK_VAR(tmp1,"tmp1");
	HX_STACK_LINE(2588)
	bool tmp2 = strict;		HX_STACK_VAR(tmp2,"tmp2");
	HX_STACK_LINE(2588)
	bool tmp3 = cont;		HX_STACK_VAR(tmp3,"tmp3");
	HX_STACK_LINE(2588)
	::zpp_nape::dynamics::ZPP_InteractionFilter tmp4 = filter;		HX_STACK_VAR(tmp4,"tmp4");
	HX_STACK_LINE(2588)
	::nape::shape::ShapeList tmp5 = output;		HX_STACK_VAR(tmp5,"tmp5");
	HX_STACK_LINE(2588)
	::nape::shape::ShapeList tmp6 = tmp->shapesInAABB(tmp1,tmp2,tmp3,tmp4,tmp5);		HX_STACK_VAR(tmp6,"tmp6");
	HX_STACK_LINE(2588)
	return tmp6;
}


HX_DEFINE_DYNAMIC_FUNC5(ZPP_Space_obj,shapesInAABB,return )

::nape::phys::BodyList ZPP_Space_obj::bodiesInAABB( ::nape::geom::AABB aabb,bool strict,bool cont,::zpp_nape::dynamics::ZPP_InteractionFilter filter,::nape::phys::BodyList output){
	HX_STACK_FRAME("zpp_nape.space.ZPP_Space","bodiesInAABB",0x5d78491b,"zpp_nape.space.ZPP_Space.bodiesInAABB","zpp_nape/space/Space.hx",2590,0x2b65ed03)
	HX_STACK_THIS(this)
	HX_STACK_ARG(aabb,"aabb")
	HX_STACK_ARG(strict,"strict")
	HX_STACK_ARG(cont,"cont")
	HX_STACK_ARG(filter,"filter")
	HX_STACK_ARG(output,"output")
	HX_STACK_LINE(2591)
	::zpp_nape::space::ZPP_Broadphase tmp = this->bphase;		HX_STACK_VAR(tmp,"tmp");
	HX_STACK_LINE(2591)
	::zpp_nape::geom::ZPP_AABB tmp1 = aabb->zpp_inner;		HX_STACK_VAR(tmp1,"tmp1");
	HX_STACK_LINE(2591)
	bool tmp2 = strict;		HX_STACK_VAR(tmp2,"tmp2");
	HX_STACK_LINE(2591)
	bool tmp3 = cont;		HX_STACK_VAR(tmp3,"tmp3");
	HX_STACK_LINE(2591)
	::zpp_nape::dynamics::ZPP_InteractionFilter tmp4 = filter;		HX_STACK_VAR(tmp4,"tmp4");
	HX_STACK_LINE(2591)
	::nape::phys::BodyList tmp5 = output;		HX_STACK_VAR(tmp5,"tmp5");
	HX_STACK_LINE(2591)
	::nape::phys::BodyList tmp6 = tmp->bodiesInAABB(tmp1,tmp2,tmp3,tmp4,tmp5);		HX_STACK_VAR(tmp6,"tmp6");
	HX_STACK_LINE(2591)
	return tmp6;
}


HX_DEFINE_DYNAMIC_FUNC5(ZPP_Space_obj,bodiesInAABB,return )

::nape::shape::ShapeList ZPP_Space_obj::shapesInCircle( ::nape::geom::Vec2 pos,Float rad,bool cont,::zpp_nape::dynamics::ZPP_InteractionFilter filter,::nape::shape::ShapeList output){
	HX_STACK_FRAME("zpp_nape.space.ZPP_Space","shapesInCircle",0x9d985a1d,"zpp_nape.space.ZPP_Space.shapesInCircle","zpp_nape/space/Space.hx",2593,0x2b65ed03)
	HX_STACK_THIS(this)
	HX_STACK_ARG(pos,"pos")
	HX_STACK_ARG(rad,"rad")
	HX_STACK_ARG(cont,"cont")
	HX_STACK_ARG(filter,"filter")
	HX_STACK_ARG(output,"output")
	HX_STACK_LINE(2594)
	::zpp_nape::space::ZPP_Broadphase tmp = this->bphase;		HX_STACK_VAR(tmp,"tmp");
	HX_STACK_LINE(2594)
	Float tmp1;		HX_STACK_VAR(tmp1,"tmp1");
	HX_STACK_LINE(2594)
	{
		HX_STACK_LINE(2594)
		{
			HX_STACK_LINE(2594)
			bool tmp2 = (pos != null());		HX_STACK_VAR(tmp2,"tmp2");
			HX_STACK_LINE(2594)
			bool tmp3;		HX_STACK_VAR(tmp3,"tmp3");
			HX_STACK_LINE(2594)
			if ((tmp2)){
				HX_STACK_LINE(2594)
				tmp3 = pos->zpp_disp;
			}
			else{
				HX_STACK_LINE(2594)
				tmp3 = false;
			}
			HX_STACK_LINE(2594)
			if ((tmp3)){
				HX_STACK_LINE(2594)
				::String tmp4 = HX_HCSTRING("Error: Vec2","\xcc","\x3a","\xb6","\x74");		HX_STACK_VAR(tmp4,"tmp4");
				HX_STACK_LINE(2594)
				::String tmp5 = (tmp4 + HX_HCSTRING(" has been disposed and cannot be used!","\x2e","\x07","\xae","\x74"));		HX_STACK_VAR(tmp5,"tmp5");
				HX_STACK_LINE(2594)
				HX_STACK_DO_THROW(tmp5);
			}
		}
		HX_STACK_LINE(2594)
		{
			HX_STACK_LINE(2594)
			::zpp_nape::geom::ZPP_Vec2 _this = pos->zpp_inner;		HX_STACK_VAR(_this,"_this");
			HX_STACK_LINE(2594)
			bool tmp2 = (_this->_validate != null());		HX_STACK_VAR(tmp2,"tmp2");
			HX_STACK_LINE(2594)
			if ((tmp2)){
				HX_STACK_LINE(2594)
				_this->_validate();
			}
		}
		HX_STACK_LINE(2594)
		tmp1 = pos->zpp_inner->x;
	}
	HX_STACK_LINE(2594)
	Float tmp2;		HX_STACK_VAR(tmp2,"tmp2");
	HX_STACK_LINE(2594)
	{
		HX_STACK_LINE(2594)
		{
			HX_STACK_LINE(2594)
			bool tmp3 = (pos != null());		HX_STACK_VAR(tmp3,"tmp3");
			HX_STACK_LINE(2594)
			bool tmp4;		HX_STACK_VAR(tmp4,"tmp4");
			HX_STACK_LINE(2594)
			if ((tmp3)){
				HX_STACK_LINE(2594)
				tmp4 = pos->zpp_disp;
			}
			else{
				HX_STACK_LINE(2594)
				tmp4 = false;
			}
			HX_STACK_LINE(2594)
			if ((tmp4)){
				HX_STACK_LINE(2594)
				::String tmp5 = HX_HCSTRING("Error: Vec2","\xcc","\x3a","\xb6","\x74");		HX_STACK_VAR(tmp5,"tmp5");
				HX_STACK_LINE(2594)
				::String tmp6 = (tmp5 + HX_HCSTRING(" has been disposed and cannot be used!","\x2e","\x07","\xae","\x74"));		HX_STACK_VAR(tmp6,"tmp6");
				HX_STACK_LINE(2594)
				HX_STACK_DO_THROW(tmp6);
			}
		}
		HX_STACK_LINE(2594)
		{
			HX_STACK_LINE(2594)
			::zpp_nape::geom::ZPP_Vec2 _this = pos->zpp_inner;		HX_STACK_VAR(_this,"_this");
			HX_STACK_LINE(2594)
			bool tmp3 = (_this->_validate != null());		HX_STACK_VAR(tmp3,"tmp3");
			HX_STACK_LINE(2594)
			if ((tmp3)){
				HX_STACK_LINE(2594)
				_this->_validate();
			}
		}
		HX_STACK_LINE(2594)
		tmp2 = pos->zpp_inner->y;
	}
	HX_STACK_LINE(2594)
	Float tmp3 = rad;		HX_STACK_VAR(tmp3,"tmp3");
	HX_STACK_LINE(2594)
	bool tmp4 = cont;		HX_STACK_VAR(tmp4,"tmp4");
	HX_STACK_LINE(2594)
	::zpp_nape::dynamics::ZPP_InteractionFilter tmp5 = filter;		HX_STACK_VAR(tmp5,"tmp5");
	HX_STACK_LINE(2594)
	::nape::shape::ShapeList tmp6 = output;		HX_STACK_VAR(tmp6,"tmp6");
	HX_STACK_LINE(2594)
	::nape::shape::ShapeList tmp7 = tmp->shapesInCircle(tmp1,tmp2,tmp3,tmp4,tmp5,tmp6);		HX_STACK_VAR(tmp7,"tmp7");
	HX_STACK_LINE(2594)
	return tmp7;
}


HX_DEFINE_DYNAMIC_FUNC5(ZPP_Space_obj,shapesInCircle,return )

::nape::phys::BodyList ZPP_Space_obj::bodiesInCircle( ::nape::geom::Vec2 pos,Float rad,bool cont,::zpp_nape::dynamics::ZPP_InteractionFilter filter,::nape::phys::BodyList output){
	HX_STACK_FRAME("zpp_nape.space.ZPP_Space","bodiesInCircle",0xd782996b,"zpp_nape.space.ZPP_Space.bodiesInCircle","zpp_nape/space/Space.hx",2596,0x2b65ed03)
	HX_STACK_THIS(this)
	HX_STACK_ARG(pos,"pos")
	HX_STACK_ARG(rad,"rad")
	HX_STACK_ARG(cont,"cont")
	HX_STACK_ARG(filter,"filter")
	HX_STACK_ARG(output,"output")
	HX_STACK_LINE(2597)
	::zpp_nape::space::ZPP_Broadphase tmp = this->bphase;		HX_STACK_VAR(tmp,"tmp");
	HX_STACK_LINE(2597)
	Float tmp1;		HX_STACK_VAR(tmp1,"tmp1");
	HX_STACK_LINE(2597)
	{
		HX_STACK_LINE(2597)
		{
			HX_STACK_LINE(2597)
			bool tmp2 = (pos != null());		HX_STACK_VAR(tmp2,"tmp2");
			HX_STACK_LINE(2597)
			bool tmp3;		HX_STACK_VAR(tmp3,"tmp3");
			HX_STACK_LINE(2597)
			if ((tmp2)){
				HX_STACK_LINE(2597)
				tmp3 = pos->zpp_disp;
			}
			else{
				HX_STACK_LINE(2597)
				tmp3 = false;
			}
			HX_STACK_LINE(2597)
			if ((tmp3)){
				HX_STACK_LINE(2597)
				::String tmp4 = HX_HCSTRING("Error: Vec2","\xcc","\x3a","\xb6","\x74");		HX_STACK_VAR(tmp4,"tmp4");
				HX_STACK_LINE(2597)
				::String tmp5 = (tmp4 + HX_HCSTRING(" has been disposed and cannot be used!","\x2e","\x07","\xae","\x74"));		HX_STACK_VAR(tmp5,"tmp5");
				HX_STACK_LINE(2597)
				HX_STACK_DO_THROW(tmp5);
			}
		}
		HX_STACK_LINE(2597)
		{
			HX_STACK_LINE(2597)
			::zpp_nape::geom::ZPP_Vec2 _this = pos->zpp_inner;		HX_STACK_VAR(_this,"_this");
			HX_STACK_LINE(2597)
			bool tmp2 = (_this->_validate != null());		HX_STACK_VAR(tmp2,"tmp2");
			HX_STACK_LINE(2597)
			if ((tmp2)){
				HX_STACK_LINE(2597)
				_this->_validate();
			}
		}
		HX_STACK_LINE(2597)
		tmp1 = pos->zpp_inner->x;
	}
	HX_STACK_LINE(2597)
	Float tmp2;		HX_STACK_VAR(tmp2,"tmp2");
	HX_STACK_LINE(2597)
	{
		HX_STACK_LINE(2597)
		{
			HX_STACK_LINE(2597)
			bool tmp3 = (pos != null());		HX_STACK_VAR(tmp3,"tmp3");
			HX_STACK_LINE(2597)
			bool tmp4;		HX_STACK_VAR(tmp4,"tmp4");
			HX_STACK_LINE(2597)
			if ((tmp3)){
				HX_STACK_LINE(2597)
				tmp4 = pos->zpp_disp;
			}
			else{
				HX_STACK_LINE(2597)
				tmp4 = false;
			}
			HX_STACK_LINE(2597)
			if ((tmp4)){
				HX_STACK_LINE(2597)
				::String tmp5 = HX_HCSTRING("Error: Vec2","\xcc","\x3a","\xb6","\x74");		HX_STACK_VAR(tmp5,"tmp5");
				HX_STACK_LINE(2597)
				::String tmp6 = (tmp5 + HX_HCSTRING(" has been disposed and cannot be used!","\x2e","\x07","\xae","\x74"));		HX_STACK_VAR(tmp6,"tmp6");
				HX_STACK_LINE(2597)
				HX_STACK_DO_THROW(tmp6);
			}
		}
		HX_STACK_LINE(2597)
		{
			HX_STACK_LINE(2597)
			::zpp_nape::geom::ZPP_Vec2 _this = pos->zpp_inner;		HX_STACK_VAR(_this,"_this");
			HX_STACK_LINE(2597)
			bool tmp3 = (_this->_validate != null());		HX_STACK_VAR(tmp3,"tmp3");
			HX_STACK_LINE(2597)
			if ((tmp3)){
				HX_STACK_LINE(2597)
				_this->_validate();
			}
		}
		HX_STACK_LINE(2597)
		tmp2 = pos->zpp_inner->y;
	}
	HX_STACK_LINE(2597)
	Float tmp3 = rad;		HX_STACK_VAR(tmp3,"tmp3");
	HX_STACK_LINE(2597)
	bool tmp4 = cont;		HX_STACK_VAR(tmp4,"tmp4");
	HX_STACK_LINE(2597)
	::zpp_nape::dynamics::ZPP_InteractionFilter tmp5 = filter;		HX_STACK_VAR(tmp5,"tmp5");
	HX_STACK_LINE(2597)
	::nape::phys::BodyList tmp6 = output;		HX_STACK_VAR(tmp6,"tmp6");
	HX_STACK_LINE(2597)
	::nape::phys::BodyList tmp7 = tmp->bodiesInCircle(tmp1,tmp2,tmp3,tmp4,tmp5,tmp6);		HX_STACK_VAR(tmp7,"tmp7");
	HX_STACK_LINE(2597)
	return tmp7;
}


HX_DEFINE_DYNAMIC_FUNC5(ZPP_Space_obj,bodiesInCircle,return )

::nape::shape::ShapeList ZPP_Space_obj::shapesInShape( ::zpp_nape::shape::ZPP_Shape shape,bool cont,::zpp_nape::dynamics::ZPP_InteractionFilter filter,::nape::shape::ShapeList output){
	HX_STACK_FRAME("zpp_nape.space.ZPP_Space","shapesInShape",0x77d77bb4,"zpp_nape.space.ZPP_Space.shapesInShape","zpp_nape/space/Space.hx",2599,0x2b65ed03)
	HX_STACK_THIS(this)
	HX_STACK_ARG(shape,"shape")
	HX_STACK_ARG(cont,"cont")
	HX_STACK_ARG(filter,"filter")
	HX_STACK_ARG(output,"output")
	HX_STACK_LINE(2600)
	::zpp_nape::space::ZPP_Broadphase tmp = this->bphase;		HX_STACK_VAR(tmp,"tmp");
	HX_STACK_LINE(2600)
	::zpp_nape::shape::ZPP_Shape tmp1 = shape;		HX_STACK_VAR(tmp1,"tmp1");
	HX_STACK_LINE(2600)
	bool tmp2 = cont;		HX_STACK_VAR(tmp2,"tmp2");
	HX_STACK_LINE(2600)
	::zpp_nape::dynamics::ZPP_InteractionFilter tmp3 = filter;		HX_STACK_VAR(tmp3,"tmp3");
	HX_STACK_LINE(2600)
	::nape::shape::ShapeList tmp4 = output;		HX_STACK_VAR(tmp4,"tmp4");
	HX_STACK_LINE(2600)
	::nape::shape::ShapeList tmp5 = tmp->shapesInShape(tmp1,tmp2,tmp3,tmp4);		HX_STACK_VAR(tmp5,"tmp5");
	HX_STACK_LINE(2600)
	return tmp5;
}


HX_DEFINE_DYNAMIC_FUNC4(ZPP_Space_obj,shapesInShape,return )

::nape::phys::BodyList ZPP_Space_obj::bodiesInShape( ::zpp_nape::shape::ZPP_Shape shape,bool cont,::zpp_nape::dynamics::ZPP_InteractionFilter filter,::nape::phys::BodyList output){
	HX_STACK_FRAME("zpp_nape.space.ZPP_Space","bodiesInShape",0xe2dd2026,"zpp_nape.space.ZPP_Space.bodiesInShape","zpp_nape/space/Space.hx",2602,0x2b65ed03)
	HX_STACK_THIS(this)
	HX_STACK_ARG(shape,"shape")
	HX_STACK_ARG(cont,"cont")
	HX_STACK_ARG(filter,"filter")
	HX_STACK_ARG(output,"output")
	HX_STACK_LINE(2603)
	::zpp_nape::space::ZPP_Broadphase tmp = this->bphase;		HX_STACK_VAR(tmp,"tmp");
	HX_STACK_LINE(2603)
	::zpp_nape::shape::ZPP_Shape tmp1 = shape;		HX_STACK_VAR(tmp1,"tmp1");
	HX_STACK_LINE(2603)
	bool tmp2 = cont;		HX_STACK_VAR(tmp2,"tmp2");
	HX_STACK_LINE(2603)
	::zpp_nape::dynamics::ZPP_InteractionFilter tmp3 = filter;		HX_STACK_VAR(tmp3,"tmp3");
	HX_STACK_LINE(2603)
	::nape::phys::BodyList tmp4 = output;		HX_STACK_VAR(tmp4,"tmp4");
	HX_STACK_LINE(2603)
	::nape::phys::BodyList tmp5 = tmp->bodiesInShape(tmp1,tmp2,tmp3,tmp4);		HX_STACK_VAR(tmp5,"tmp5");
	HX_STACK_LINE(2603)
	return tmp5;
}


HX_DEFINE_DYNAMIC_FUNC4(ZPP_Space_obj,bodiesInShape,return )

::nape::geom::RayResult ZPP_Space_obj::rayCast( ::nape::geom::Ray ray,bool inner,::nape::dynamics::InteractionFilter filter){
	HX_STACK_FRAME("zpp_nape.space.ZPP_Space","rayCast",0x5799b513,"zpp_nape.space.ZPP_Space.rayCast","zpp_nape/space/Space.hx",2605,0x2b65ed03)
	HX_STACK_THIS(this)
	HX_STACK_ARG(ray,"ray")
	HX_STACK_ARG(inner,"inner")
	HX_STACK_ARG(filter,"filter")
	HX_STACK_LINE(2606)
	::zpp_nape::space::ZPP_Broadphase tmp = this->bphase;		HX_STACK_VAR(tmp,"tmp");
	HX_STACK_LINE(2606)
	::zpp_nape::geom::ZPP_Ray tmp1 = ray->zpp_inner;		HX_STACK_VAR(tmp1,"tmp1");
	HX_STACK_LINE(2606)
	bool tmp2 = inner;		HX_STACK_VAR(tmp2,"tmp2");
	HX_STACK_LINE(2606)
	bool tmp3 = (filter == null());		HX_STACK_VAR(tmp3,"tmp3");
	HX_STACK_LINE(2606)
	::zpp_nape::dynamics::ZPP_InteractionFilter tmp4;		HX_STACK_VAR(tmp4,"tmp4");
	HX_STACK_LINE(2606)
	if ((tmp3)){
		HX_STACK_LINE(2606)
		tmp4 = null();
	}
	else{
		HX_STACK_LINE(2606)
		tmp4 = filter->zpp_inner;
	}
	HX_STACK_LINE(2606)
	::nape::geom::RayResult tmp5 = tmp->rayCast(tmp1,tmp2,tmp4);		HX_STACK_VAR(tmp5,"tmp5");
	HX_STACK_LINE(2606)
	return tmp5;
}


HX_DEFINE_DYNAMIC_FUNC3(ZPP_Space_obj,rayCast,return )

::nape::geom::RayResultList ZPP_Space_obj::rayMultiCast( ::nape::geom::Ray ray,bool inner,::nape::dynamics::InteractionFilter filter,::nape::geom::RayResultList output){
	HX_STACK_FRAME("zpp_nape.space.ZPP_Space","rayMultiCast",0xe2ccff04,"zpp_nape.space.ZPP_Space.rayMultiCast","zpp_nape/space/Space.hx",2608,0x2b65ed03)
	HX_STACK_THIS(this)
	HX_STACK_ARG(ray,"ray")
	HX_STACK_ARG(inner,"inner")
	HX_STACK_ARG(filter,"filter")
	HX_STACK_ARG(output,"output")
	HX_STACK_LINE(2609)
	::zpp_nape::space::ZPP_Broadphase tmp = this->bphase;		HX_STACK_VAR(tmp,"tmp");
	HX_STACK_LINE(2609)
	::zpp_nape::geom::ZPP_Ray tmp1 = ray->zpp_inner;		HX_STACK_VAR(tmp1,"tmp1");
	HX_STACK_LINE(2609)
	bool tmp2 = inner;		HX_STACK_VAR(tmp2,"tmp2");
	HX_STACK_LINE(2609)
	bool tmp3 = (filter == null());		HX_STACK_VAR(tmp3,"tmp3");
	HX_STACK_LINE(2609)
	::zpp_nape::dynamics::ZPP_InteractionFilter tmp4;		HX_STACK_VAR(tmp4,"tmp4");
	HX_STACK_LINE(2609)
	if ((tmp3)){
		HX_STACK_LINE(2609)
		tmp4 = null();
	}
	else{
		HX_STACK_LINE(2609)
		tmp4 = filter->zpp_inner;
	}
	HX_STACK_LINE(2609)
	::nape::geom::RayResultList tmp5 = output;		HX_STACK_VAR(tmp5,"tmp5");
	HX_STACK_LINE(2609)
	::nape::geom::RayResultList tmp6 = tmp->rayMultiCast(tmp1,tmp2,tmp4,tmp5);		HX_STACK_VAR(tmp6,"tmp6");
	HX_STACK_LINE(2609)
	return tmp6;
}


HX_DEFINE_DYNAMIC_FUNC4(ZPP_Space_obj,rayMultiCast,return )

::nape::geom::ConvexResult ZPP_Space_obj::convexCast( ::zpp_nape::shape::ZPP_Shape shape,Float deltaTime,::nape::dynamics::InteractionFilter filter,bool dynamics){
	HX_STACK_FRAME("zpp_nape.space.ZPP_Space","convexCast",0xd0fbd4bc,"zpp_nape.space.ZPP_Space.convexCast","zpp_nape/space/Space.hx",2612,0x2b65ed03)
	HX_STACK_THIS(this)
	HX_STACK_ARG(shape,"shape")
	HX_STACK_ARG(deltaTime,"deltaTime")
	HX_STACK_ARG(filter,"filter")
	HX_STACK_ARG(dynamics,"dynamics")
	HX_STACK_LINE(2613)
	::zpp_nape::geom::ZPP_ToiEvent toi;		HX_STACK_VAR(toi,"toi");
	HX_STACK_LINE(2614)
	{
		HX_STACK_LINE(2615)
		::zpp_nape::geom::ZPP_ToiEvent tmp = ::zpp_nape::geom::ZPP_ToiEvent_obj::zpp_pool;		HX_STACK_VAR(tmp,"tmp");
		HX_STACK_LINE(2615)
		bool tmp1 = (tmp == null());		HX_STACK_VAR(tmp1,"tmp1");
		HX_STACK_LINE(2615)
		if ((tmp1)){
			HX_STACK_LINE(2616)
			::zpp_nape::geom::ZPP_ToiEvent tmp2 = ::zpp_nape::geom::ZPP_ToiEvent_obj::__new();		HX_STACK_VAR(tmp2,"tmp2");
			HX_STACK_LINE(2616)
			toi = tmp2;
		}
		else{
			HX_STACK_LINE(2622)
			::zpp_nape::geom::ZPP_ToiEvent tmp2 = ::zpp_nape::geom::ZPP_ToiEvent_obj::zpp_pool;		HX_STACK_VAR(tmp2,"tmp2");
			HX_STACK_LINE(2622)
			toi = tmp2;
			HX_STACK_LINE(2623)
			::zpp_nape::geom::ZPP_ToiEvent_obj::zpp_pool = toi->next;
			HX_STACK_LINE(2624)
			toi->next = null();
		}
		HX_STACK_LINE(2629)
		{
			HX_STACK_LINE(2629)
			toi->failed = false;
			HX_STACK_LINE(2629)
			::zpp_nape::shape::ZPP_Shape tmp2 = toi->s2 = null();		HX_STACK_VAR(tmp2,"tmp2");
			HX_STACK_LINE(2629)
			toi->s1 = tmp2;
			HX_STACK_LINE(2629)
			toi->arbiter = null();
		}
	}
	HX_STACK_LINE(2631)
	{
		HX_STACK_LINE(2631)
		int tmp = shape->type;		HX_STACK_VAR(tmp,"tmp");
		HX_STACK_LINE(2631)
		int tmp1 = ::zpp_nape::util::ZPP_Flags_obj::id_ShapeType_CIRCLE;		HX_STACK_VAR(tmp1,"tmp1");
		HX_STACK_LINE(2631)
		bool tmp2 = (tmp == tmp1);		HX_STACK_VAR(tmp2,"tmp2");
		HX_STACK_LINE(2631)
		if ((tmp2)){
			HX_STACK_LINE(2631)
			::zpp_nape::shape::ZPP_Circle _this = shape->circle;		HX_STACK_VAR(_this,"_this");
			HX_STACK_LINE(2631)
			bool tmp3 = _this->zip_worldCOM;		HX_STACK_VAR(tmp3,"tmp3");
			HX_STACK_LINE(2631)
			if ((tmp3)){
				HX_STACK_LINE(2631)
				bool tmp4 = (_this->body != null());		HX_STACK_VAR(tmp4,"tmp4");
				HX_STACK_LINE(2631)
				if ((tmp4)){
					HX_STACK_LINE(2631)
					_this->zip_worldCOM = false;
					HX_STACK_LINE(2631)
					{
						HX_STACK_LINE(2631)
						bool tmp5 = _this->zip_localCOM;		HX_STACK_VAR(tmp5,"tmp5");
						HX_STACK_LINE(2631)
						if ((tmp5)){
							HX_STACK_LINE(2631)
							_this->zip_localCOM = false;
							HX_STACK_LINE(2631)
							int tmp6 = _this->type;		HX_STACK_VAR(tmp6,"tmp6");
							HX_STACK_LINE(2631)
							int tmp7 = ::zpp_nape::util::ZPP_Flags_obj::id_ShapeType_POLYGON;		HX_STACK_VAR(tmp7,"tmp7");
							HX_STACK_LINE(2631)
							bool tmp8 = (tmp6 == tmp7);		HX_STACK_VAR(tmp8,"tmp8");
							HX_STACK_LINE(2631)
							if ((tmp8)){
								HX_STACK_LINE(2631)
								::zpp_nape::shape::ZPP_Polygon _this1 = _this->polygon;		HX_STACK_VAR(_this1,"_this1");
								HX_STACK_LINE(2631)
								::zpp_nape::geom::ZPP_Vec2 tmp9 = _this1->lverts->next;		HX_STACK_VAR(tmp9,"tmp9");
								HX_STACK_LINE(2631)
								bool tmp10 = (tmp9 == null());		HX_STACK_VAR(tmp10,"tmp10");
								HX_STACK_LINE(2631)
								if ((tmp10)){
									HX_STACK_LINE(2631)
									HX_STACK_DO_THROW(HX_HCSTRING("Error: An empty polygon has no meaningful localCOM","\x3b","\x8d","\x96","\xf3"));
								}
								HX_STACK_LINE(2631)
								::zpp_nape::geom::ZPP_Vec2 tmp11 = _this1->lverts->next;		HX_STACK_VAR(tmp11,"tmp11");
								HX_STACK_LINE(2631)
								::zpp_nape::geom::ZPP_Vec2 tmp12 = tmp11->next;		HX_STACK_VAR(tmp12,"tmp12");
								HX_STACK_LINE(2631)
								bool tmp13 = (tmp12 == null());		HX_STACK_VAR(tmp13,"tmp13");
								HX_STACK_LINE(2631)
								if ((tmp13)){
									HX_STACK_LINE(2631)
									::zpp_nape::geom::ZPP_Vec2 tmp14 = _this1->lverts->next;		HX_STACK_VAR(tmp14,"tmp14");
									HX_STACK_LINE(2631)
									_this1->localCOMx = tmp14->x;
									HX_STACK_LINE(2631)
									::zpp_nape::geom::ZPP_Vec2 tmp15 = _this1->lverts->next;		HX_STACK_VAR(tmp15,"tmp15");
									HX_STACK_LINE(2631)
									_this1->localCOMy = tmp15->y;
									HX_STACK_LINE(2631)
									Dynamic();
								}
								else{
									HX_STACK_LINE(2631)
									::zpp_nape::geom::ZPP_Vec2 tmp14 = _this1->lverts->next;		HX_STACK_VAR(tmp14,"tmp14");
									HX_STACK_LINE(2631)
									::zpp_nape::geom::ZPP_Vec2 tmp15 = tmp14->next->next;		HX_STACK_VAR(tmp15,"tmp15");
									HX_STACK_LINE(2631)
									bool tmp16 = (tmp15 == null());		HX_STACK_VAR(tmp16,"tmp16");
									HX_STACK_LINE(2631)
									if ((tmp16)){
										HX_STACK_LINE(2631)
										{
											HX_STACK_LINE(2631)
											::zpp_nape::geom::ZPP_Vec2 tmp17 = _this1->lverts->next;		HX_STACK_VAR(tmp17,"tmp17");
											HX_STACK_LINE(2631)
											_this1->localCOMx = tmp17->x;
											HX_STACK_LINE(2631)
											::zpp_nape::geom::ZPP_Vec2 tmp18 = _this1->lverts->next;		HX_STACK_VAR(tmp18,"tmp18");
											HX_STACK_LINE(2631)
											_this1->localCOMy = tmp18->y;
											HX_STACK_LINE(2631)
											{
											}
										}
										HX_STACK_LINE(2631)
										{
											HX_STACK_LINE(2631)
											Float t = ((Float)1.0);		HX_STACK_VAR(t,"t");
											HX_STACK_LINE(2631)
											::zpp_nape::geom::ZPP_Vec2 tmp17 = _this1->lverts->next;		HX_STACK_VAR(tmp17,"tmp17");
											HX_STACK_LINE(2631)
											Float tmp18 = tmp17->next->x;		HX_STACK_VAR(tmp18,"tmp18");
											HX_STACK_LINE(2631)
											Float tmp19 = t;		HX_STACK_VAR(tmp19,"tmp19");
											HX_STACK_LINE(2631)
											Float tmp20 = (tmp18 * tmp19);		HX_STACK_VAR(tmp20,"tmp20");
											HX_STACK_LINE(2631)
											hx::AddEq(_this1->localCOMx,tmp20);
											HX_STACK_LINE(2631)
											::zpp_nape::geom::ZPP_Vec2 tmp21 = _this1->lverts->next;		HX_STACK_VAR(tmp21,"tmp21");
											HX_STACK_LINE(2631)
											Float tmp22 = tmp21->next->y;		HX_STACK_VAR(tmp22,"tmp22");
											HX_STACK_LINE(2631)
											Float tmp23 = t;		HX_STACK_VAR(tmp23,"tmp23");
											HX_STACK_LINE(2631)
											Float tmp24 = (tmp22 * tmp23);		HX_STACK_VAR(tmp24,"tmp24");
											HX_STACK_LINE(2631)
											hx::AddEq(_this1->localCOMy,tmp24);
										}
										HX_STACK_LINE(2631)
										{
											HX_STACK_LINE(2631)
											Float t = ((Float)0.5);		HX_STACK_VAR(t,"t");
											HX_STACK_LINE(2631)
											hx::MultEq(_this1->localCOMx,t);
											HX_STACK_LINE(2631)
											hx::MultEq(_this1->localCOMy,t);
										}
									}
									else{
										HX_STACK_LINE(2631)
										{
											HX_STACK_LINE(2631)
											_this1->localCOMx = (int)0;
											HX_STACK_LINE(2631)
											_this1->localCOMy = (int)0;
											HX_STACK_LINE(2631)
											{
											}
										}
										HX_STACK_LINE(2631)
										Float area = ((Float)0.0);		HX_STACK_VAR(area,"area");
										HX_STACK_LINE(2631)
										{
											HX_STACK_LINE(2631)
											::zpp_nape::geom::ZPP_Vec2 tmp17 = _this1->lverts->next;		HX_STACK_VAR(tmp17,"tmp17");
											HX_STACK_LINE(2631)
											::zpp_nape::geom::ZPP_Vec2 cx_ite = tmp17;		HX_STACK_VAR(cx_ite,"cx_ite");
											HX_STACK_LINE(2631)
											::zpp_nape::geom::ZPP_Vec2 u = cx_ite;		HX_STACK_VAR(u,"u");
											HX_STACK_LINE(2631)
											cx_ite = cx_ite->next;
											HX_STACK_LINE(2631)
											::zpp_nape::geom::ZPP_Vec2 v = cx_ite;		HX_STACK_VAR(v,"v");
											HX_STACK_LINE(2631)
											cx_ite = cx_ite->next;
											HX_STACK_LINE(2631)
											while((true)){
												HX_STACK_LINE(2631)
												bool tmp18 = (cx_ite != null());		HX_STACK_VAR(tmp18,"tmp18");
												HX_STACK_LINE(2631)
												bool tmp19 = !(tmp18);		HX_STACK_VAR(tmp19,"tmp19");
												HX_STACK_LINE(2631)
												if ((tmp19)){
													HX_STACK_LINE(2631)
													break;
												}
												HX_STACK_LINE(2631)
												::zpp_nape::geom::ZPP_Vec2 w = cx_ite;		HX_STACK_VAR(w,"w");
												HX_STACK_LINE(2631)
												{
													HX_STACK_LINE(2631)
													Float tmp20 = v->x;		HX_STACK_VAR(tmp20,"tmp20");
													HX_STACK_LINE(2631)
													Float tmp21 = (w->y - u->y);		HX_STACK_VAR(tmp21,"tmp21");
													HX_STACK_LINE(2631)
													Float tmp22 = (tmp20 * tmp21);		HX_STACK_VAR(tmp22,"tmp22");
													HX_STACK_LINE(2631)
													hx::AddEq(area,tmp22);
													HX_STACK_LINE(2631)
													Float tmp23 = (w->y * v->x);		HX_STACK_VAR(tmp23,"tmp23");
													HX_STACK_LINE(2631)
													Float tmp24 = (w->x * v->y);		HX_STACK_VAR(tmp24,"tmp24");
													HX_STACK_LINE(2631)
													Float tmp25 = (tmp23 - tmp24);		HX_STACK_VAR(tmp25,"tmp25");
													HX_STACK_LINE(2631)
													Float cf = tmp25;		HX_STACK_VAR(cf,"cf");
													HX_STACK_LINE(2631)
													Float tmp26 = (v->x + w->x);		HX_STACK_VAR(tmp26,"tmp26");
													HX_STACK_LINE(2631)
													Float tmp27 = cf;		HX_STACK_VAR(tmp27,"tmp27");
													HX_STACK_LINE(2631)
													Float tmp28 = (tmp26 * tmp27);		HX_STACK_VAR(tmp28,"tmp28");
													HX_STACK_LINE(2631)
													hx::AddEq(_this1->localCOMx,tmp28);
													HX_STACK_LINE(2631)
													Float tmp29 = (v->y + w->y);		HX_STACK_VAR(tmp29,"tmp29");
													HX_STACK_LINE(2631)
													Float tmp30 = cf;		HX_STACK_VAR(tmp30,"tmp30");
													HX_STACK_LINE(2631)
													Float tmp31 = (tmp29 * tmp30);		HX_STACK_VAR(tmp31,"tmp31");
													HX_STACK_LINE(2631)
													hx::AddEq(_this1->localCOMy,tmp31);
												}
												HX_STACK_LINE(2631)
												u = v;
												HX_STACK_LINE(2631)
												v = w;
												HX_STACK_LINE(2631)
												cx_ite = cx_ite->next;
											}
											HX_STACK_LINE(2631)
											::zpp_nape::geom::ZPP_Vec2 tmp18 = _this1->lverts->next;		HX_STACK_VAR(tmp18,"tmp18");
											HX_STACK_LINE(2631)
											cx_ite = tmp18;
											HX_STACK_LINE(2631)
											::zpp_nape::geom::ZPP_Vec2 w = cx_ite;		HX_STACK_VAR(w,"w");
											HX_STACK_LINE(2631)
											{
												HX_STACK_LINE(2631)
												Float tmp19 = v->x;		HX_STACK_VAR(tmp19,"tmp19");
												HX_STACK_LINE(2631)
												Float tmp20 = (w->y - u->y);		HX_STACK_VAR(tmp20,"tmp20");
												HX_STACK_LINE(2631)
												Float tmp21 = (tmp19 * tmp20);		HX_STACK_VAR(tmp21,"tmp21");
												HX_STACK_LINE(2631)
												hx::AddEq(area,tmp21);
												HX_STACK_LINE(2631)
												Float tmp22 = (w->y * v->x);		HX_STACK_VAR(tmp22,"tmp22");
												HX_STACK_LINE(2631)
												Float tmp23 = (w->x * v->y);		HX_STACK_VAR(tmp23,"tmp23");
												HX_STACK_LINE(2631)
												Float tmp24 = (tmp22 - tmp23);		HX_STACK_VAR(tmp24,"tmp24");
												HX_STACK_LINE(2631)
												Float cf = tmp24;		HX_STACK_VAR(cf,"cf");
												HX_STACK_LINE(2631)
												Float tmp25 = (v->x + w->x);		HX_STACK_VAR(tmp25,"tmp25");
												HX_STACK_LINE(2631)
												Float tmp26 = cf;		HX_STACK_VAR(tmp26,"tmp26");
												HX_STACK_LINE(2631)
												Float tmp27 = (tmp25 * tmp26);		HX_STACK_VAR(tmp27,"tmp27");
												HX_STACK_LINE(2631)
												hx::AddEq(_this1->localCOMx,tmp27);
												HX_STACK_LINE(2631)
												Float tmp28 = (v->y + w->y);		HX_STACK_VAR(tmp28,"tmp28");
												HX_STACK_LINE(2631)
												Float tmp29 = cf;		HX_STACK_VAR(tmp29,"tmp29");
												HX_STACK_LINE(2631)
												Float tmp30 = (tmp28 * tmp29);		HX_STACK_VAR(tmp30,"tmp30");
												HX_STACK_LINE(2631)
												hx::AddEq(_this1->localCOMy,tmp30);
											}
											HX_STACK_LINE(2631)
											u = v;
											HX_STACK_LINE(2631)
											v = w;
											HX_STACK_LINE(2631)
											cx_ite = cx_ite->next;
											HX_STACK_LINE(2631)
											::zpp_nape::geom::ZPP_Vec2 w1 = cx_ite;		HX_STACK_VAR(w1,"w1");
											HX_STACK_LINE(2631)
											{
												HX_STACK_LINE(2631)
												Float tmp19 = v->x;		HX_STACK_VAR(tmp19,"tmp19");
												HX_STACK_LINE(2631)
												Float tmp20 = (w1->y - u->y);		HX_STACK_VAR(tmp20,"tmp20");
												HX_STACK_LINE(2631)
												Float tmp21 = (tmp19 * tmp20);		HX_STACK_VAR(tmp21,"tmp21");
												HX_STACK_LINE(2631)
												hx::AddEq(area,tmp21);
												HX_STACK_LINE(2631)
												Float tmp22 = (w1->y * v->x);		HX_STACK_VAR(tmp22,"tmp22");
												HX_STACK_LINE(2631)
												Float tmp23 = (w1->x * v->y);		HX_STACK_VAR(tmp23,"tmp23");
												HX_STACK_LINE(2631)
												Float tmp24 = (tmp22 - tmp23);		HX_STACK_VAR(tmp24,"tmp24");
												HX_STACK_LINE(2631)
												Float cf = tmp24;		HX_STACK_VAR(cf,"cf");
												HX_STACK_LINE(2631)
												Float tmp25 = (v->x + w1->x);		HX_STACK_VAR(tmp25,"tmp25");
												HX_STACK_LINE(2631)
												Float tmp26 = cf;		HX_STACK_VAR(tmp26,"tmp26");
												HX_STACK_LINE(2631)
												Float tmp27 = (tmp25 * tmp26);		HX_STACK_VAR(tmp27,"tmp27");
												HX_STACK_LINE(2631)
												hx::AddEq(_this1->localCOMx,tmp27);
												HX_STACK_LINE(2631)
												Float tmp28 = (v->y + w1->y);		HX_STACK_VAR(tmp28,"tmp28");
												HX_STACK_LINE(2631)
												Float tmp29 = cf;		HX_STACK_VAR(tmp29,"tmp29");
												HX_STACK_LINE(2631)
												Float tmp30 = (tmp28 * tmp29);		HX_STACK_VAR(tmp30,"tmp30");
												HX_STACK_LINE(2631)
												hx::AddEq(_this1->localCOMy,tmp30);
											}
										}
										HX_STACK_LINE(2631)
										Float tmp17 = ((int)3 * area);		HX_STACK_VAR(tmp17,"tmp17");
										HX_STACK_LINE(2631)
										Float tmp18 = (Float((int)1) / Float(tmp17));		HX_STACK_VAR(tmp18,"tmp18");
										HX_STACK_LINE(2631)
										area = tmp18;
										HX_STACK_LINE(2631)
										{
											HX_STACK_LINE(2631)
											Float t = area;		HX_STACK_VAR(t,"t");
											HX_STACK_LINE(2631)
											hx::MultEq(_this1->localCOMx,t);
											HX_STACK_LINE(2631)
											hx::MultEq(_this1->localCOMy,t);
										}
									}
								}
							}
							HX_STACK_LINE(2631)
							bool tmp9 = (_this->wrap_localCOM != null());		HX_STACK_VAR(tmp9,"tmp9");
							HX_STACK_LINE(2631)
							if ((tmp9)){
								HX_STACK_LINE(2631)
								::zpp_nape::geom::ZPP_Vec2 tmp10 = _this->wrap_localCOM->zpp_inner;		HX_STACK_VAR(tmp10,"tmp10");
								HX_STACK_LINE(2631)
								tmp10->x = _this->localCOMx;
								HX_STACK_LINE(2631)
								::zpp_nape::geom::ZPP_Vec2 tmp11 = _this->wrap_localCOM->zpp_inner;		HX_STACK_VAR(tmp11,"tmp11");
								HX_STACK_LINE(2631)
								tmp11->y = _this->localCOMy;
								HX_STACK_LINE(2631)
								{
								}
							}
						}
					}
					HX_STACK_LINE(2631)
					{
						HX_STACK_LINE(2631)
						::zpp_nape::phys::ZPP_Body _this1 = _this->body;		HX_STACK_VAR(_this1,"_this1");
						HX_STACK_LINE(2631)
						bool tmp5 = _this1->zip_axis;		HX_STACK_VAR(tmp5,"tmp5");
						HX_STACK_LINE(2631)
						if ((tmp5)){
							HX_STACK_LINE(2631)
							_this1->zip_axis = false;
							HX_STACK_LINE(2631)
							{
								HX_STACK_LINE(2631)
								Float tmp6 = _this1->rot;		HX_STACK_VAR(tmp6,"tmp6");
								HX_STACK_LINE(2631)
								Float tmp7 = ::Math_obj::sin(tmp6);		HX_STACK_VAR(tmp7,"tmp7");
								HX_STACK_LINE(2631)
								_this1->axisx = tmp7;
								HX_STACK_LINE(2631)
								Float tmp8 = _this1->rot;		HX_STACK_VAR(tmp8,"tmp8");
								HX_STACK_LINE(2631)
								Float tmp9 = ::Math_obj::cos(tmp8);		HX_STACK_VAR(tmp9,"tmp9");
								HX_STACK_LINE(2631)
								_this1->axisy = tmp9;
								HX_STACK_LINE(2631)
								Dynamic();
							}
						}
					}
					HX_STACK_LINE(2631)
					{
						HX_STACK_LINE(2631)
						Float tmp5 = _this->body->posx;		HX_STACK_VAR(tmp5,"tmp5");
						HX_STACK_LINE(2631)
						Float tmp6 = _this->body->axisy;		HX_STACK_VAR(tmp6,"tmp6");
						HX_STACK_LINE(2631)
						Float tmp7 = _this->localCOMx;		HX_STACK_VAR(tmp7,"tmp7");
						HX_STACK_LINE(2631)
						Float tmp8 = (tmp6 * tmp7);		HX_STACK_VAR(tmp8,"tmp8");
						HX_STACK_LINE(2631)
						Float tmp9 = _this->body->axisx;		HX_STACK_VAR(tmp9,"tmp9");
						HX_STACK_LINE(2631)
						Float tmp10 = _this->localCOMy;		HX_STACK_VAR(tmp10,"tmp10");
						HX_STACK_LINE(2631)
						Float tmp11 = (tmp9 * tmp10);		HX_STACK_VAR(tmp11,"tmp11");
						HX_STACK_LINE(2631)
						Float tmp12 = (tmp8 - tmp11);		HX_STACK_VAR(tmp12,"tmp12");
						HX_STACK_LINE(2631)
						Float tmp13 = (tmp5 + tmp12);		HX_STACK_VAR(tmp13,"tmp13");
						HX_STACK_LINE(2631)
						_this->worldCOMx = tmp13;
						HX_STACK_LINE(2631)
						Float tmp14 = _this->body->posy;		HX_STACK_VAR(tmp14,"tmp14");
						HX_STACK_LINE(2631)
						Float tmp15 = _this->localCOMx;		HX_STACK_VAR(tmp15,"tmp15");
						HX_STACK_LINE(2631)
						Float tmp16 = _this->body->axisx;		HX_STACK_VAR(tmp16,"tmp16");
						HX_STACK_LINE(2631)
						Float tmp17 = (tmp15 * tmp16);		HX_STACK_VAR(tmp17,"tmp17");
						HX_STACK_LINE(2631)
						Float tmp18 = _this->localCOMy;		HX_STACK_VAR(tmp18,"tmp18");
						HX_STACK_LINE(2631)
						Float tmp19 = _this->body->axisy;		HX_STACK_VAR(tmp19,"tmp19");
						HX_STACK_LINE(2631)
						Float tmp20 = (tmp18 * tmp19);		HX_STACK_VAR(tmp20,"tmp20");
						HX_STACK_LINE(2631)
						Float tmp21 = (tmp17 + tmp20);		HX_STACK_VAR(tmp21,"tmp21");
						HX_STACK_LINE(2631)
						Float tmp22 = (tmp14 + tmp21);		HX_STACK_VAR(tmp22,"tmp22");
						HX_STACK_LINE(2631)
						_this->worldCOMy = tmp22;
					}
				}
			}
		}
		else{
			HX_STACK_LINE(2631)
			::zpp_nape::shape::ZPP_Polygon _this = shape->polygon;		HX_STACK_VAR(_this,"_this");
			HX_STACK_LINE(2631)
			bool tmp3 = _this->zip_gaxi;		HX_STACK_VAR(tmp3,"tmp3");
			HX_STACK_LINE(2631)
			if ((tmp3)){
				HX_STACK_LINE(2631)
				bool tmp4 = (_this->body != null());		HX_STACK_VAR(tmp4,"tmp4");
				HX_STACK_LINE(2631)
				if ((tmp4)){
					HX_STACK_LINE(2631)
					_this->zip_gaxi = false;
					HX_STACK_LINE(2631)
					_this->validate_laxi();
					HX_STACK_LINE(2631)
					{
						HX_STACK_LINE(2631)
						::zpp_nape::phys::ZPP_Body _this1 = _this->body;		HX_STACK_VAR(_this1,"_this1");
						HX_STACK_LINE(2631)
						bool tmp5 = _this1->zip_axis;		HX_STACK_VAR(tmp5,"tmp5");
						HX_STACK_LINE(2631)
						if ((tmp5)){
							HX_STACK_LINE(2631)
							_this1->zip_axis = false;
							HX_STACK_LINE(2631)
							{
								HX_STACK_LINE(2631)
								Float tmp6 = _this1->rot;		HX_STACK_VAR(tmp6,"tmp6");
								HX_STACK_LINE(2631)
								Float tmp7 = ::Math_obj::sin(tmp6);		HX_STACK_VAR(tmp7,"tmp7");
								HX_STACK_LINE(2631)
								_this1->axisx = tmp7;
								HX_STACK_LINE(2631)
								Float tmp8 = _this1->rot;		HX_STACK_VAR(tmp8,"tmp8");
								HX_STACK_LINE(2631)
								Float tmp9 = ::Math_obj::cos(tmp8);		HX_STACK_VAR(tmp9,"tmp9");
								HX_STACK_LINE(2631)
								_this1->axisy = tmp9;
								HX_STACK_LINE(2631)
								Dynamic();
							}
						}
					}
					HX_STACK_LINE(2631)
					{
						HX_STACK_LINE(2631)
						bool tmp5 = _this->zip_gverts;		HX_STACK_VAR(tmp5,"tmp5");
						HX_STACK_LINE(2631)
						if ((tmp5)){
							HX_STACK_LINE(2631)
							bool tmp6 = (_this->body != null());		HX_STACK_VAR(tmp6,"tmp6");
							HX_STACK_LINE(2631)
							if ((tmp6)){
								HX_STACK_LINE(2631)
								_this->zip_gverts = false;
								HX_STACK_LINE(2631)
								_this->validate_lverts();
								HX_STACK_LINE(2631)
								{
									HX_STACK_LINE(2631)
									::zpp_nape::phys::ZPP_Body _this1 = _this->body;		HX_STACK_VAR(_this1,"_this1");
									HX_STACK_LINE(2631)
									bool tmp7 = _this1->zip_axis;		HX_STACK_VAR(tmp7,"tmp7");
									HX_STACK_LINE(2631)
									if ((tmp7)){
										HX_STACK_LINE(2631)
										_this1->zip_axis = false;
										HX_STACK_LINE(2631)
										{
											HX_STACK_LINE(2631)
											Float tmp8 = _this1->rot;		HX_STACK_VAR(tmp8,"tmp8");
											HX_STACK_LINE(2631)
											Float tmp9 = ::Math_obj::sin(tmp8);		HX_STACK_VAR(tmp9,"tmp9");
											HX_STACK_LINE(2631)
											_this1->axisx = tmp9;
											HX_STACK_LINE(2631)
											Float tmp10 = _this1->rot;		HX_STACK_VAR(tmp10,"tmp10");
											HX_STACK_LINE(2631)
											Float tmp11 = ::Math_obj::cos(tmp10);		HX_STACK_VAR(tmp11,"tmp11");
											HX_STACK_LINE(2631)
											_this1->axisy = tmp11;
											HX_STACK_LINE(2631)
											Dynamic();
										}
									}
								}
								HX_STACK_LINE(2631)
								::zpp_nape::geom::ZPP_Vec2 tmp7 = _this->lverts->next;		HX_STACK_VAR(tmp7,"tmp7");
								HX_STACK_LINE(2631)
								::zpp_nape::geom::ZPP_Vec2 li = tmp7;		HX_STACK_VAR(li,"li");
								HX_STACK_LINE(2631)
								{
									HX_STACK_LINE(2631)
									::zpp_nape::geom::ZPP_Vec2 tmp8 = _this->gverts->next;		HX_STACK_VAR(tmp8,"tmp8");
									HX_STACK_LINE(2631)
									::zpp_nape::geom::ZPP_Vec2 cx_ite = tmp8;		HX_STACK_VAR(cx_ite,"cx_ite");
									HX_STACK_LINE(2631)
									while((true)){
										HX_STACK_LINE(2631)
										bool tmp9 = (cx_ite != null());		HX_STACK_VAR(tmp9,"tmp9");
										HX_STACK_LINE(2631)
										bool tmp10 = !(tmp9);		HX_STACK_VAR(tmp10,"tmp10");
										HX_STACK_LINE(2631)
										if ((tmp10)){
											HX_STACK_LINE(2631)
											break;
										}
										HX_STACK_LINE(2631)
										::zpp_nape::geom::ZPP_Vec2 g = cx_ite;		HX_STACK_VAR(g,"g");
										HX_STACK_LINE(2631)
										{
											HX_STACK_LINE(2631)
											::zpp_nape::geom::ZPP_Vec2 l = li;		HX_STACK_VAR(l,"l");
											HX_STACK_LINE(2631)
											li = li->next;
											HX_STACK_LINE(2631)
											{
												HX_STACK_LINE(2631)
												Float tmp11 = _this->body->posx;		HX_STACK_VAR(tmp11,"tmp11");
												HX_STACK_LINE(2631)
												Float tmp12 = _this->body->axisy;		HX_STACK_VAR(tmp12,"tmp12");
												HX_STACK_LINE(2631)
												Float tmp13 = l->x;		HX_STACK_VAR(tmp13,"tmp13");
												HX_STACK_LINE(2631)
												Float tmp14 = (tmp12 * tmp13);		HX_STACK_VAR(tmp14,"tmp14");
												HX_STACK_LINE(2631)
												Float tmp15 = _this->body->axisx;		HX_STACK_VAR(tmp15,"tmp15");
												HX_STACK_LINE(2631)
												Float tmp16 = l->y;		HX_STACK_VAR(tmp16,"tmp16");
												HX_STACK_LINE(2631)
												Float tmp17 = (tmp15 * tmp16);		HX_STACK_VAR(tmp17,"tmp17");
												HX_STACK_LINE(2631)
												Float tmp18 = (tmp14 - tmp17);		HX_STACK_VAR(tmp18,"tmp18");
												HX_STACK_LINE(2631)
												Float tmp19 = (tmp11 + tmp18);		HX_STACK_VAR(tmp19,"tmp19");
												HX_STACK_LINE(2631)
												g->x = tmp19;
												HX_STACK_LINE(2631)
												Float tmp20 = _this->body->posy;		HX_STACK_VAR(tmp20,"tmp20");
												HX_STACK_LINE(2631)
												Float tmp21 = l->x;		HX_STACK_VAR(tmp21,"tmp21");
												HX_STACK_LINE(2631)
												Float tmp22 = _this->body->axisx;		HX_STACK_VAR(tmp22,"tmp22");
												HX_STACK_LINE(2631)
												Float tmp23 = (tmp21 * tmp22);		HX_STACK_VAR(tmp23,"tmp23");
												HX_STACK_LINE(2631)
												Float tmp24 = l->y;		HX_STACK_VAR(tmp24,"tmp24");
												HX_STACK_LINE(2631)
												Float tmp25 = _this->body->axisy;		HX_STACK_VAR(tmp25,"tmp25");
												HX_STACK_LINE(2631)
												Float tmp26 = (tmp24 * tmp25);		HX_STACK_VAR(tmp26,"tmp26");
												HX_STACK_LINE(2631)
												Float tmp27 = (tmp23 + tmp26);		HX_STACK_VAR(tmp27,"tmp27");
												HX_STACK_LINE(2631)
												Float tmp28 = (tmp20 + tmp27);		HX_STACK_VAR(tmp28,"tmp28");
												HX_STACK_LINE(2631)
												g->y = tmp28;
											}
										}
										HX_STACK_LINE(2631)
										cx_ite = cx_ite->next;
									}
								}
							}
						}
					}
					HX_STACK_LINE(2631)
					::zpp_nape::util::ZNPNode_ZPP_Edge tmp5 = _this->edges->head;		HX_STACK_VAR(tmp5,"tmp5");
					HX_STACK_LINE(2631)
					::zpp_nape::util::ZNPNode_ZPP_Edge ite = tmp5;		HX_STACK_VAR(ite,"ite");
					HX_STACK_LINE(2631)
					{
						HX_STACK_LINE(2631)
						::zpp_nape::geom::ZPP_Vec2 tmp6 = _this->gverts->next;		HX_STACK_VAR(tmp6,"tmp6");
						HX_STACK_LINE(2631)
						::zpp_nape::geom::ZPP_Vec2 cx_ite = tmp6;		HX_STACK_VAR(cx_ite,"cx_ite");
						HX_STACK_LINE(2631)
						::zpp_nape::geom::ZPP_Vec2 u = cx_ite;		HX_STACK_VAR(u,"u");
						HX_STACK_LINE(2631)
						cx_ite = cx_ite->next;
						HX_STACK_LINE(2631)
						while((true)){
							HX_STACK_LINE(2631)
							bool tmp7 = (cx_ite != null());		HX_STACK_VAR(tmp7,"tmp7");
							HX_STACK_LINE(2631)
							bool tmp8 = !(tmp7);		HX_STACK_VAR(tmp8,"tmp8");
							HX_STACK_LINE(2631)
							if ((tmp8)){
								HX_STACK_LINE(2631)
								break;
							}
							HX_STACK_LINE(2631)
							::zpp_nape::geom::ZPP_Vec2 v = cx_ite;		HX_STACK_VAR(v,"v");
							HX_STACK_LINE(2631)
							{
								HX_STACK_LINE(2631)
								::zpp_nape::shape::ZPP_Edge e = ite->elt;		HX_STACK_VAR(e,"e");
								HX_STACK_LINE(2631)
								ite = ite->next;
								HX_STACK_LINE(2631)
								e->gp0 = u;
								HX_STACK_LINE(2631)
								e->gp1 = v;
								HX_STACK_LINE(2631)
								{
									HX_STACK_LINE(2631)
									Float tmp9 = _this->body->axisy;		HX_STACK_VAR(tmp9,"tmp9");
									HX_STACK_LINE(2631)
									Float tmp10 = e->lnormx;		HX_STACK_VAR(tmp10,"tmp10");
									HX_STACK_LINE(2631)
									Float tmp11 = (tmp9 * tmp10);		HX_STACK_VAR(tmp11,"tmp11");
									HX_STACK_LINE(2631)
									Float tmp12 = _this->body->axisx;		HX_STACK_VAR(tmp12,"tmp12");
									HX_STACK_LINE(2631)
									Float tmp13 = e->lnormy;		HX_STACK_VAR(tmp13,"tmp13");
									HX_STACK_LINE(2631)
									Float tmp14 = (tmp12 * tmp13);		HX_STACK_VAR(tmp14,"tmp14");
									HX_STACK_LINE(2631)
									Float tmp15 = (tmp11 - tmp14);		HX_STACK_VAR(tmp15,"tmp15");
									HX_STACK_LINE(2631)
									e->gnormx = tmp15;
									HX_STACK_LINE(2631)
									Float tmp16 = e->lnormx;		HX_STACK_VAR(tmp16,"tmp16");
									HX_STACK_LINE(2631)
									Float tmp17 = _this->body->axisx;		HX_STACK_VAR(tmp17,"tmp17");
									HX_STACK_LINE(2631)
									Float tmp18 = (tmp16 * tmp17);		HX_STACK_VAR(tmp18,"tmp18");
									HX_STACK_LINE(2631)
									Float tmp19 = e->lnormy;		HX_STACK_VAR(tmp19,"tmp19");
									HX_STACK_LINE(2631)
									Float tmp20 = _this->body->axisy;		HX_STACK_VAR(tmp20,"tmp20");
									HX_STACK_LINE(2631)
									Float tmp21 = (tmp19 * tmp20);		HX_STACK_VAR(tmp21,"tmp21");
									HX_STACK_LINE(2631)
									Float tmp22 = (tmp18 + tmp21);		HX_STACK_VAR(tmp22,"tmp22");
									HX_STACK_LINE(2631)
									e->gnormy = tmp22;
								}
								HX_STACK_LINE(2631)
								Float tmp9 = _this->body->posx;		HX_STACK_VAR(tmp9,"tmp9");
								HX_STACK_LINE(2631)
								Float tmp10 = e->gnormx;		HX_STACK_VAR(tmp10,"tmp10");
								HX_STACK_LINE(2631)
								Float tmp11 = (tmp9 * tmp10);		HX_STACK_VAR(tmp11,"tmp11");
								HX_STACK_LINE(2631)
								Float tmp12 = _this->body->posy;		HX_STACK_VAR(tmp12,"tmp12");
								HX_STACK_LINE(2631)
								Float tmp13 = e->gnormy;		HX_STACK_VAR(tmp13,"tmp13");
								HX_STACK_LINE(2631)
								Float tmp14 = (tmp12 * tmp13);		HX_STACK_VAR(tmp14,"tmp14");
								HX_STACK_LINE(2631)
								Float tmp15 = (tmp11 + tmp14);		HX_STACK_VAR(tmp15,"tmp15");
								HX_STACK_LINE(2631)
								Float tmp16 = e->lprojection;		HX_STACK_VAR(tmp16,"tmp16");
								HX_STACK_LINE(2631)
								Float tmp17 = (tmp15 + tmp16);		HX_STACK_VAR(tmp17,"tmp17");
								HX_STACK_LINE(2631)
								e->gprojection = tmp17;
								HX_STACK_LINE(2631)
								bool tmp18 = (e->wrap_gnorm != null());		HX_STACK_VAR(tmp18,"tmp18");
								HX_STACK_LINE(2631)
								if ((tmp18)){
									HX_STACK_LINE(2631)
									::zpp_nape::geom::ZPP_Vec2 tmp19 = e->wrap_gnorm->zpp_inner;		HX_STACK_VAR(tmp19,"tmp19");
									HX_STACK_LINE(2631)
									tmp19->x = e->gnormx;
									HX_STACK_LINE(2631)
									::zpp_nape::geom::ZPP_Vec2 tmp20 = e->wrap_gnorm->zpp_inner;		HX_STACK_VAR(tmp20,"tmp20");
									HX_STACK_LINE(2631)
									tmp20->y = e->gnormy;
									HX_STACK_LINE(2631)
									{
									}
								}
								HX_STACK_LINE(2631)
								Float tmp19 = e->gp0->y;		HX_STACK_VAR(tmp19,"tmp19");
								HX_STACK_LINE(2631)
								Float tmp20 = e->gnormx;		HX_STACK_VAR(tmp20,"tmp20");
								HX_STACK_LINE(2631)
								Float tmp21 = (tmp19 * tmp20);		HX_STACK_VAR(tmp21,"tmp21");
								HX_STACK_LINE(2631)
								Float tmp22 = e->gp0->x;		HX_STACK_VAR(tmp22,"tmp22");
								HX_STACK_LINE(2631)
								Float tmp23 = e->gnormy;		HX_STACK_VAR(tmp23,"tmp23");
								HX_STACK_LINE(2631)
								Float tmp24 = (tmp22 * tmp23);		HX_STACK_VAR(tmp24,"tmp24");
								HX_STACK_LINE(2631)
								Float tmp25 = (tmp21 - tmp24);		HX_STACK_VAR(tmp25,"tmp25");
								HX_STACK_LINE(2631)
								e->tp0 = tmp25;
								HX_STACK_LINE(2631)
								Float tmp26 = e->gp1->y;		HX_STACK_VAR(tmp26,"tmp26");
								HX_STACK_LINE(2631)
								Float tmp27 = e->gnormx;		HX_STACK_VAR(tmp27,"tmp27");
								HX_STACK_LINE(2631)
								Float tmp28 = (tmp26 * tmp27);		HX_STACK_VAR(tmp28,"tmp28");
								HX_STACK_LINE(2631)
								Float tmp29 = e->gp1->x;		HX_STACK_VAR(tmp29,"tmp29");
								HX_STACK_LINE(2631)
								Float tmp30 = e->gnormy;		HX_STACK_VAR(tmp30,"tmp30");
								HX_STACK_LINE(2631)
								Float tmp31 = (tmp29 * tmp30);		HX_STACK_VAR(tmp31,"tmp31");
								HX_STACK_LINE(2631)
								Float tmp32 = (tmp28 - tmp31);		HX_STACK_VAR(tmp32,"tmp32");
								HX_STACK_LINE(2631)
								e->tp1 = tmp32;
							}
							HX_STACK_LINE(2631)
							u = v;
							HX_STACK_LINE(2631)
							cx_ite = cx_ite->next;
						}
						HX_STACK_LINE(2631)
						::zpp_nape::geom::ZPP_Vec2 tmp7 = _this->gverts->next;		HX_STACK_VAR(tmp7,"tmp7");
						HX_STACK_LINE(2631)
						::zpp_nape::geom::ZPP_Vec2 v = tmp7;		HX_STACK_VAR(v,"v");
						HX_STACK_LINE(2631)
						{
							HX_STACK_LINE(2631)
							::zpp_nape::shape::ZPP_Edge e = ite->elt;		HX_STACK_VAR(e,"e");
							HX_STACK_LINE(2631)
							ite = ite->next;
							HX_STACK_LINE(2631)
							e->gp0 = u;
							HX_STACK_LINE(2631)
							e->gp1 = v;
							HX_STACK_LINE(2631)
							{
								HX_STACK_LINE(2631)
								Float tmp8 = _this->body->axisy;		HX_STACK_VAR(tmp8,"tmp8");
								HX_STACK_LINE(2631)
								Float tmp9 = e->lnormx;		HX_STACK_VAR(tmp9,"tmp9");
								HX_STACK_LINE(2631)
								Float tmp10 = (tmp8 * tmp9);		HX_STACK_VAR(tmp10,"tmp10");
								HX_STACK_LINE(2631)
								Float tmp11 = _this->body->axisx;		HX_STACK_VAR(tmp11,"tmp11");
								HX_STACK_LINE(2631)
								Float tmp12 = e->lnormy;		HX_STACK_VAR(tmp12,"tmp12");
								HX_STACK_LINE(2631)
								Float tmp13 = (tmp11 * tmp12);		HX_STACK_VAR(tmp13,"tmp13");
								HX_STACK_LINE(2631)
								Float tmp14 = (tmp10 - tmp13);		HX_STACK_VAR(tmp14,"tmp14");
								HX_STACK_LINE(2631)
								e->gnormx = tmp14;
								HX_STACK_LINE(2631)
								Float tmp15 = e->lnormx;		HX_STACK_VAR(tmp15,"tmp15");
								HX_STACK_LINE(2631)
								Float tmp16 = _this->body->axisx;		HX_STACK_VAR(tmp16,"tmp16");
								HX_STACK_LINE(2631)
								Float tmp17 = (tmp15 * tmp16);		HX_STACK_VAR(tmp17,"tmp17");
								HX_STACK_LINE(2631)
								Float tmp18 = e->lnormy;		HX_STACK_VAR(tmp18,"tmp18");
								HX_STACK_LINE(2631)
								Float tmp19 = _this->body->axisy;		HX_STACK_VAR(tmp19,"tmp19");
								HX_STACK_LINE(2631)
								Float tmp20 = (tmp18 * tmp19);		HX_STACK_VAR(tmp20,"tmp20");
								HX_STACK_LINE(2631)
								Float tmp21 = (tmp17 + tmp20);		HX_STACK_VAR(tmp21,"tmp21");
								HX_STACK_LINE(2631)
								e->gnormy = tmp21;
							}
							HX_STACK_LINE(2631)
							Float tmp8 = _this->body->posx;		HX_STACK_VAR(tmp8,"tmp8");
							HX_STACK_LINE(2631)
							Float tmp9 = e->gnormx;		HX_STACK_VAR(tmp9,"tmp9");
							HX_STACK_LINE(2631)
							Float tmp10 = (tmp8 * tmp9);		HX_STACK_VAR(tmp10,"tmp10");
							HX_STACK_LINE(2631)
							Float tmp11 = _this->body->posy;		HX_STACK_VAR(tmp11,"tmp11");
							HX_STACK_LINE(2631)
							Float tmp12 = e->gnormy;		HX_STACK_VAR(tmp12,"tmp12");
							HX_STACK_LINE(2631)
							Float tmp13 = (tmp11 * tmp12);		HX_STACK_VAR(tmp13,"tmp13");
							HX_STACK_LINE(2631)
							Float tmp14 = (tmp10 + tmp13);		HX_STACK_VAR(tmp14,"tmp14");
							HX_STACK_LINE(2631)
							Float tmp15 = e->lprojection;		HX_STACK_VAR(tmp15,"tmp15");
							HX_STACK_LINE(2631)
							Float tmp16 = (tmp14 + tmp15);		HX_STACK_VAR(tmp16,"tmp16");
							HX_STACK_LINE(2631)
							e->gprojection = tmp16;
							HX_STACK_LINE(2631)
							bool tmp17 = (e->wrap_gnorm != null());		HX_STACK_VAR(tmp17,"tmp17");
							HX_STACK_LINE(2631)
							if ((tmp17)){
								HX_STACK_LINE(2631)
								::zpp_nape::geom::ZPP_Vec2 tmp18 = e->wrap_gnorm->zpp_inner;		HX_STACK_VAR(tmp18,"tmp18");
								HX_STACK_LINE(2631)
								tmp18->x = e->gnormx;
								HX_STACK_LINE(2631)
								::zpp_nape::geom::ZPP_Vec2 tmp19 = e->wrap_gnorm->zpp_inner;		HX_STACK_VAR(tmp19,"tmp19");
								HX_STACK_LINE(2631)
								tmp19->y = e->gnormy;
								HX_STACK_LINE(2631)
								{
								}
							}
							HX_STACK_LINE(2631)
							Float tmp18 = e->gp0->y;		HX_STACK_VAR(tmp18,"tmp18");
							HX_STACK_LINE(2631)
							Float tmp19 = e->gnormx;		HX_STACK_VAR(tmp19,"tmp19");
							HX_STACK_LINE(2631)
							Float tmp20 = (tmp18 * tmp19);		HX_STACK_VAR(tmp20,"tmp20");
							HX_STACK_LINE(2631)
							Float tmp21 = e->gp0->x;		HX_STACK_VAR(tmp21,"tmp21");
							HX_STACK_LINE(2631)
							Float tmp22 = e->gnormy;		HX_STACK_VAR(tmp22,"tmp22");
							HX_STACK_LINE(2631)
							Float tmp23 = (tmp21 * tmp22);		HX_STACK_VAR(tmp23,"tmp23");
							HX_STACK_LINE(2631)
							Float tmp24 = (tmp20 - tmp23);		HX_STACK_VAR(tmp24,"tmp24");
							HX_STACK_LINE(2631)
							e->tp0 = tmp24;
							HX_STACK_LINE(2631)
							Float tmp25 = e->gp1->y;		HX_STACK_VAR(tmp25,"tmp25");
							HX_STACK_LINE(2631)
							Float tmp26 = e->gnormx;		HX_STACK_VAR(tmp26,"tmp26");
							HX_STACK_LINE(2631)
							Float tmp27 = (tmp25 * tmp26);		HX_STACK_VAR(tmp27,"tmp27");
							HX_STACK_LINE(2631)
							Float tmp28 = e->gp1->x;		HX_STACK_VAR(tmp28,"tmp28");
							HX_STACK_LINE(2631)
							Float tmp29 = e->gnormy;		HX_STACK_VAR(tmp29,"tmp29");
							HX_STACK_LINE(2631)
							Float tmp30 = (tmp28 * tmp29);		HX_STACK_VAR(tmp30,"tmp30");
							HX_STACK_LINE(2631)
							Float tmp31 = (tmp27 - tmp30);		HX_STACK_VAR(tmp31,"tmp31");
							HX_STACK_LINE(2631)
							e->tp1 = tmp31;
						}
					}
				}
			}
		}
	}
	HX_STACK_LINE(2632)
	::zpp_nape::phys::ZPP_Body body = shape->body;		HX_STACK_VAR(body,"body");
	HX_STACK_LINE(2633)
	Float prex = body->posx;		HX_STACK_VAR(prex,"prex");
	HX_STACK_LINE(2634)
	Float prey = body->posy;		HX_STACK_VAR(prey,"prey");
	HX_STACK_LINE(2635)
	body->sweepTime = (int)0;
	HX_STACK_LINE(2636)
	body->sweep_angvel = body->angvel;
	HX_STACK_LINE(2637)
	{
		HX_STACK_LINE(2637)
		Float tmp = (deltaTime - body->sweepTime);		HX_STACK_VAR(tmp,"tmp");
		HX_STACK_LINE(2637)
		Float delta = tmp;		HX_STACK_VAR(delta,"delta");
		HX_STACK_LINE(2637)
		bool tmp1 = (delta != (int)0);		HX_STACK_VAR(tmp1,"tmp1");
		HX_STACK_LINE(2637)
		if ((tmp1)){
			HX_STACK_LINE(2637)
			body->sweepTime = deltaTime;
			HX_STACK_LINE(2637)
			{
				HX_STACK_LINE(2637)
				Float t = delta;		HX_STACK_VAR(t,"t");
				HX_STACK_LINE(2637)
				Float tmp2 = (body->velx * t);		HX_STACK_VAR(tmp2,"tmp2");
				HX_STACK_LINE(2637)
				hx::AddEq(body->posx,tmp2);
				HX_STACK_LINE(2637)
				Float tmp3 = (body->vely * t);		HX_STACK_VAR(tmp3,"tmp3");
				HX_STACK_LINE(2637)
				hx::AddEq(body->posy,tmp3);
			}
			HX_STACK_LINE(2637)
			bool tmp2 = (body->angvel != (int)0);		HX_STACK_VAR(tmp2,"tmp2");
			HX_STACK_LINE(2637)
			if ((tmp2)){
				HX_STACK_LINE(2637)
				Float tmp3 = (body->sweep_angvel * delta);		HX_STACK_VAR(tmp3,"tmp3");
				HX_STACK_LINE(2637)
				Float dr = tmp3;		HX_STACK_VAR(dr,"dr");
				HX_STACK_LINE(2637)
				hx::AddEq(body->rot,dr);
				HX_STACK_LINE(2637)
				Float tmp4 = (dr * dr);		HX_STACK_VAR(tmp4,"tmp4");
				HX_STACK_LINE(2637)
				bool tmp5 = (tmp4 > ((Float)0.0001));		HX_STACK_VAR(tmp5,"tmp5");
				HX_STACK_LINE(2637)
				if ((tmp5)){
					HX_STACK_LINE(2637)
					Float tmp6 = body->rot;		HX_STACK_VAR(tmp6,"tmp6");
					HX_STACK_LINE(2637)
					Float tmp7 = ::Math_obj::sin(tmp6);		HX_STACK_VAR(tmp7,"tmp7");
					HX_STACK_LINE(2637)
					body->axisx = tmp7;
					HX_STACK_LINE(2637)
					Float tmp8 = body->rot;		HX_STACK_VAR(tmp8,"tmp8");
					HX_STACK_LINE(2637)
					Float tmp9 = ::Math_obj::cos(tmp8);		HX_STACK_VAR(tmp9,"tmp9");
					HX_STACK_LINE(2637)
					body->axisy = tmp9;
					HX_STACK_LINE(2637)
					Dynamic();
				}
				else{
					HX_STACK_LINE(2637)
					Float tmp6 = (dr * dr);		HX_STACK_VAR(tmp6,"tmp6");
					HX_STACK_LINE(2637)
					Float d2 = tmp6;		HX_STACK_VAR(d2,"d2");
					HX_STACK_LINE(2637)
					Float tmp7 = (((Float)0.5) * d2);		HX_STACK_VAR(tmp7,"tmp7");
					HX_STACK_LINE(2637)
					Float tmp8 = ((int)1 - tmp7);		HX_STACK_VAR(tmp8,"tmp8");
					HX_STACK_LINE(2637)
					Float p = tmp8;		HX_STACK_VAR(p,"p");
					HX_STACK_LINE(2637)
					Float tmp9 = (d2 * d2);		HX_STACK_VAR(tmp9,"tmp9");
					HX_STACK_LINE(2637)
					Float tmp10 = (Float(tmp9) / Float((int)8));		HX_STACK_VAR(tmp10,"tmp10");
					HX_STACK_LINE(2637)
					Float tmp11 = ((int)1 - tmp10);		HX_STACK_VAR(tmp11,"tmp11");
					HX_STACK_LINE(2637)
					Float m = tmp11;		HX_STACK_VAR(m,"m");
					HX_STACK_LINE(2637)
					Float tmp12 = (p * body->axisx);		HX_STACK_VAR(tmp12,"tmp12");
					HX_STACK_LINE(2637)
					Float tmp13 = (dr * body->axisy);		HX_STACK_VAR(tmp13,"tmp13");
					HX_STACK_LINE(2637)
					Float tmp14 = (tmp12 + tmp13);		HX_STACK_VAR(tmp14,"tmp14");
					HX_STACK_LINE(2637)
					Float tmp15 = m;		HX_STACK_VAR(tmp15,"tmp15");
					HX_STACK_LINE(2637)
					Float tmp16 = (tmp14 * tmp15);		HX_STACK_VAR(tmp16,"tmp16");
					HX_STACK_LINE(2637)
					Float nx = tmp16;		HX_STACK_VAR(nx,"nx");
					HX_STACK_LINE(2637)
					Float tmp17 = (p * body->axisy);		HX_STACK_VAR(tmp17,"tmp17");
					HX_STACK_LINE(2637)
					Float tmp18 = (dr * body->axisx);		HX_STACK_VAR(tmp18,"tmp18");
					HX_STACK_LINE(2637)
					Float tmp19 = (tmp17 - tmp18);		HX_STACK_VAR(tmp19,"tmp19");
					HX_STACK_LINE(2637)
					Float tmp20 = m;		HX_STACK_VAR(tmp20,"tmp20");
					HX_STACK_LINE(2637)
					Float tmp21 = (tmp19 * tmp20);		HX_STACK_VAR(tmp21,"tmp21");
					HX_STACK_LINE(2637)
					body->axisy = tmp21;
					HX_STACK_LINE(2637)
					body->axisx = nx;
				}
			}
		}
	}
	HX_STACK_LINE(2638)
	Float postx = body->posx;		HX_STACK_VAR(postx,"postx");
	HX_STACK_LINE(2639)
	Float posty = body->posy;		HX_STACK_VAR(posty,"posty");
	HX_STACK_LINE(2640)
	shape->validate_sweepRadius();
	HX_STACK_LINE(2641)
	Float rad = shape->sweepRadius;		HX_STACK_VAR(rad,"rad");
	HX_STACK_LINE(2642)
	::zpp_nape::geom::ZPP_AABB aabb;		HX_STACK_VAR(aabb,"aabb");
	HX_STACK_LINE(2643)
	{
		HX_STACK_LINE(2644)
		::zpp_nape::geom::ZPP_AABB tmp = ::zpp_nape::geom::ZPP_AABB_obj::zpp_pool;		HX_STACK_VAR(tmp,"tmp");
		HX_STACK_LINE(2644)
		bool tmp1 = (tmp == null());		HX_STACK_VAR(tmp1,"tmp1");
		HX_STACK_LINE(2644)
		if ((tmp1)){
			HX_STACK_LINE(2645)
			::zpp_nape::geom::ZPP_AABB tmp2 = ::zpp_nape::geom::ZPP_AABB_obj::__new();		HX_STACK_VAR(tmp2,"tmp2");
			HX_STACK_LINE(2645)
			aabb = tmp2;
		}
		else{
			HX_STACK_LINE(2651)
			::zpp_nape::geom::ZPP_AABB tmp2 = ::zpp_nape::geom::ZPP_AABB_obj::zpp_pool;		HX_STACK_VAR(tmp2,"tmp2");
			HX_STACK_LINE(2651)
			aabb = tmp2;
			HX_STACK_LINE(2652)
			::zpp_nape::geom::ZPP_AABB_obj::zpp_pool = aabb->next;
			HX_STACK_LINE(2653)
			aabb->next = null();
		}
		HX_STACK_LINE(2658)
		Dynamic();
	}
	HX_STACK_LINE(2660)
	Float tmp;		HX_STACK_VAR(tmp,"tmp");
	HX_STACK_LINE(2660)
	{
		HX_STACK_LINE(2661)
		Float x = prex;		HX_STACK_VAR(x,"x");
		HX_STACK_LINE(2662)
		Float y = postx;		HX_STACK_VAR(y,"y");
		HX_STACK_LINE(2663)
		bool tmp1 = (x < y);		HX_STACK_VAR(tmp1,"tmp1");
		HX_STACK_LINE(2663)
		if ((tmp1)){
			HX_STACK_LINE(2663)
			tmp = x;
		}
		else{
			HX_STACK_LINE(2663)
			tmp = y;
		}
	}
	HX_STACK_LINE(2664)
	Float tmp1 = rad;		HX_STACK_VAR(tmp1,"tmp1");
	HX_STACK_LINE(2660)
	Float tmp2 = (tmp - tmp1);		HX_STACK_VAR(tmp2,"tmp2");
	HX_STACK_LINE(2660)
	aabb->minx = tmp2;
	HX_STACK_LINE(2665)
	Float tmp3;		HX_STACK_VAR(tmp3,"tmp3");
	HX_STACK_LINE(2665)
	{
		HX_STACK_LINE(2666)
		Float x = prex;		HX_STACK_VAR(x,"x");
		HX_STACK_LINE(2667)
		Float y = postx;		HX_STACK_VAR(y,"y");
		HX_STACK_LINE(2668)
		bool tmp4 = (x > y);		HX_STACK_VAR(tmp4,"tmp4");
		HX_STACK_LINE(2668)
		if ((tmp4)){
			HX_STACK_LINE(2668)
			tmp3 = x;
		}
		else{
			HX_STACK_LINE(2668)
			tmp3 = y;
		}
	}
	HX_STACK_LINE(2669)
	Float tmp4 = rad;		HX_STACK_VAR(tmp4,"tmp4");
	HX_STACK_LINE(2665)
	Float tmp5 = (tmp3 + tmp4);		HX_STACK_VAR(tmp5,"tmp5");
	HX_STACK_LINE(2665)
	aabb->maxx = tmp5;
	HX_STACK_LINE(2670)
	Float tmp6;		HX_STACK_VAR(tmp6,"tmp6");
	HX_STACK_LINE(2670)
	{
		HX_STACK_LINE(2671)
		Float x = prey;		HX_STACK_VAR(x,"x");
		HX_STACK_LINE(2672)
		Float y = posty;		HX_STACK_VAR(y,"y");
		HX_STACK_LINE(2673)
		bool tmp7 = (x < y);		HX_STACK_VAR(tmp7,"tmp7");
		HX_STACK_LINE(2673)
		if ((tmp7)){
			HX_STACK_LINE(2673)
			tmp6 = x;
		}
		else{
			HX_STACK_LINE(2673)
			tmp6 = y;
		}
	}
	HX_STACK_LINE(2674)
	Float tmp7 = rad;		HX_STACK_VAR(tmp7,"tmp7");
	HX_STACK_LINE(2670)
	Float tmp8 = (tmp6 - tmp7);		HX_STACK_VAR(tmp8,"tmp8");
	HX_STACK_LINE(2670)
	aabb->miny = tmp8;
	HX_STACK_LINE(2675)
	Float tmp9;		HX_STACK_VAR(tmp9,"tmp9");
	HX_STACK_LINE(2675)
	{
		HX_STACK_LINE(2676)
		Float x = prey;		HX_STACK_VAR(x,"x");
		HX_STACK_LINE(2677)
		Float y = posty;		HX_STACK_VAR(y,"y");
		HX_STACK_LINE(2678)
		bool tmp10 = (x > y);		HX_STACK_VAR(tmp10,"tmp10");
		HX_STACK_LINE(2678)
		if ((tmp10)){
			HX_STACK_LINE(2678)
			tmp9 = x;
		}
		else{
			HX_STACK_LINE(2678)
			tmp9 = y;
		}
	}
	HX_STACK_LINE(2679)
	Float tmp10 = rad;		HX_STACK_VAR(tmp10,"tmp10");
	HX_STACK_LINE(2675)
	Float tmp11 = (tmp9 + tmp10);		HX_STACK_VAR(tmp11,"tmp11");
	HX_STACK_LINE(2675)
	aabb->maxy = tmp11;
	HX_STACK_LINE(2680)
	::zpp_nape::space::ZPP_Broadphase tmp12 = this->bphase;		HX_STACK_VAR(tmp12,"tmp12");
	HX_STACK_LINE(2680)
	::zpp_nape::geom::ZPP_AABB tmp13 = aabb;		HX_STACK_VAR(tmp13,"tmp13");
	HX_STACK_LINE(2680)
	bool tmp14 = (filter == null());		HX_STACK_VAR(tmp14,"tmp14");
	HX_STACK_LINE(2680)
	::zpp_nape::dynamics::ZPP_InteractionFilter tmp15;		HX_STACK_VAR(tmp15,"tmp15");
	HX_STACK_LINE(2680)
	if ((tmp14)){
		HX_STACK_LINE(2680)
		tmp15 = null();
	}
	else{
		HX_STACK_LINE(2680)
		tmp15 = filter->zpp_inner;
	}
	HX_STACK_LINE(2680)
	::nape::shape::ShapeList tmp16 = this->convexShapeList;		HX_STACK_VAR(tmp16,"tmp16");
	HX_STACK_LINE(2680)
	::nape::shape::ShapeList tmp17 = tmp12->shapesInAABB(tmp13,false,false,tmp15,tmp16);		HX_STACK_VAR(tmp17,"tmp17");
	HX_STACK_LINE(2680)
	::nape::shape::ShapeList tmp18 = this->convexShapeList = tmp17;		HX_STACK_VAR(tmp18,"tmp18");
	HX_STACK_LINE(2680)
	::nape::shape::ShapeList list = tmp18;		HX_STACK_VAR(list,"list");
	HX_STACK_LINE(2681)
	{
		HX_STACK_LINE(2682)
		::zpp_nape::geom::ZPP_AABB o = aabb;		HX_STACK_VAR(o,"o");
		HX_STACK_LINE(2691)
		{
			HX_STACK_LINE(2691)
			bool tmp19 = (o->outer != null());		HX_STACK_VAR(tmp19,"tmp19");
			HX_STACK_LINE(2691)
			if ((tmp19)){
				HX_STACK_LINE(2691)
				o->outer->zpp_inner = null();
				HX_STACK_LINE(2691)
				o->outer = null();
			}
			HX_STACK_LINE(2691)
			::nape::geom::Vec2 tmp20 = o->wrap_max = null();		HX_STACK_VAR(tmp20,"tmp20");
			HX_STACK_LINE(2691)
			o->wrap_min = tmp20;
			HX_STACK_LINE(2691)
			o->_invalidate = null();
			HX_STACK_LINE(2691)
			o->_validate = null();
		}
		HX_STACK_LINE(2692)
		::zpp_nape::geom::ZPP_AABB tmp19 = ::zpp_nape::geom::ZPP_AABB_obj::zpp_pool;		HX_STACK_VAR(tmp19,"tmp19");
		HX_STACK_LINE(2692)
		o->next = tmp19;
		HX_STACK_LINE(2693)
		::zpp_nape::geom::ZPP_AABB_obj::zpp_pool = o;
	}
	HX_STACK_LINE(2698)
	Float minAxisx = ((Float)0.0);		HX_STACK_VAR(minAxisx,"minAxisx");
	HX_STACK_LINE(2699)
	Float minAxisy = ((Float)0.0);		HX_STACK_VAR(minAxisy,"minAxisy");
	HX_STACK_LINE(2700)
	{
		HX_STACK_LINE(2701)
		minAxisx = (int)0;
		HX_STACK_LINE(2702)
		minAxisy = (int)0;
		HX_STACK_LINE(2711)
		{
		}
	}
	HX_STACK_LINE(2720)
	Float minPosx = ((Float)0.0);		HX_STACK_VAR(minPosx,"minPosx");
	HX_STACK_LINE(2721)
	Float minPosy = ((Float)0.0);		HX_STACK_VAR(minPosy,"minPosy");
	HX_STACK_LINE(2722)
	{
		HX_STACK_LINE(2723)
		minPosx = (int)0;
		HX_STACK_LINE(2724)
		minPosy = (int)0;
		HX_STACK_LINE(2733)
		{
		}
	}
	HX_STACK_LINE(2742)
	::nape::shape::Shape mins = null();		HX_STACK_VAR(mins,"mins");
	HX_STACK_LINE(2743)
	Float tmp19 = (deltaTime + (int)1);		HX_STACK_VAR(tmp19,"tmp19");
	HX_STACK_LINE(2743)
	Float mint = tmp19;		HX_STACK_VAR(mint,"mint");
	HX_STACK_LINE(2744)
	{
		HX_STACK_LINE(2744)
		::nape::shape::ShapeIterator tmp20;		HX_STACK_VAR(tmp20,"tmp20");
		HX_STACK_LINE(2744)
		{
			HX_STACK_LINE(2744)
			list->zpp_inner->valmod();
			HX_STACK_LINE(2744)
			::nape::shape::ShapeList tmp21 = list;		HX_STACK_VAR(tmp21,"tmp21");
			HX_STACK_LINE(2744)
			tmp20 = ::nape::shape::ShapeIterator_obj::get(tmp21);
		}
		HX_STACK_LINE(2744)
		::nape::shape::ShapeIterator _g = tmp20;		HX_STACK_VAR(_g,"_g");
		HX_STACK_LINE(2744)
		while((true)){
			HX_STACK_LINE(2744)
			bool tmp21;		HX_STACK_VAR(tmp21,"tmp21");
			HX_STACK_LINE(2744)
			{
				HX_STACK_LINE(2744)
				::zpp_nape::util::ZPP_ShapeList tmp22 = _g->zpp_inner->zpp_inner;		HX_STACK_VAR(tmp22,"tmp22");
				HX_STACK_LINE(2744)
				tmp22->valmod();
				HX_STACK_LINE(2744)
				int tmp23;		HX_STACK_VAR(tmp23,"tmp23");
				HX_STACK_LINE(2744)
				{
					HX_STACK_LINE(2744)
					::nape::shape::ShapeList _this = _g->zpp_inner;		HX_STACK_VAR(_this,"_this");
					HX_STACK_LINE(2744)
					_this->zpp_inner->valmod();
					HX_STACK_LINE(2744)
					bool tmp24 = _this->zpp_inner->zip_length;		HX_STACK_VAR(tmp24,"tmp24");
					HX_STACK_LINE(2744)
					if ((tmp24)){
						HX_STACK_LINE(2744)
						_this->zpp_inner->zip_length = false;
						HX_STACK_LINE(2744)
						{
							HX_STACK_LINE(2744)
							::zpp_nape::util::ZNPList_ZPP_Shape tmp25 = _this->zpp_inner->inner;		HX_STACK_VAR(tmp25,"tmp25");
							HX_STACK_LINE(2744)
							_this->zpp_inner->user_length = tmp25->length;
						}
					}
					HX_STACK_LINE(2744)
					tmp23 = _this->zpp_inner->user_length;
				}
				HX_STACK_LINE(2744)
				int length = tmp23;		HX_STACK_VAR(length,"length");
				HX_STACK_LINE(2744)
				_g->zpp_critical = true;
				HX_STACK_LINE(2744)
				bool tmp24 = (_g->zpp_i < length);		HX_STACK_VAR(tmp24,"tmp24");
				HX_STACK_LINE(2744)
				if ((tmp24)){
					HX_STACK_LINE(2744)
					tmp21 = true;
				}
				else{
					HX_STACK_LINE(2744)
					{
						HX_STACK_LINE(2744)
						::nape::shape::ShapeIterator tmp25 = ::nape::shape::ShapeIterator_obj::zpp_pool;		HX_STACK_VAR(tmp25,"tmp25");
						HX_STACK_LINE(2744)
						_g->zpp_next = tmp25;
						HX_STACK_LINE(2744)
						::nape::shape::ShapeIterator_obj::zpp_pool = _g;
						HX_STACK_LINE(2744)
						_g->zpp_inner = null();
					}
					HX_STACK_LINE(2744)
					tmp21 = false;
				}
			}
			HX_STACK_LINE(2744)
			bool tmp22 = !(tmp21);		HX_STACK_VAR(tmp22,"tmp22");
			HX_STACK_LINE(2744)
			if ((tmp22)){
				HX_STACK_LINE(2744)
				break;
			}
			HX_STACK_LINE(2744)
			::nape::shape::Shape tmp23;		HX_STACK_VAR(tmp23,"tmp23");
			HX_STACK_LINE(2744)
			{
				HX_STACK_LINE(2744)
				_g->zpp_critical = false;
				HX_STACK_LINE(2744)
				int tmp24 = (_g->zpp_i)++;		HX_STACK_VAR(tmp24,"tmp24");
				HX_STACK_LINE(2744)
				tmp23 = _g->zpp_inner->at(tmp24);
			}
			HX_STACK_LINE(2744)
			::nape::shape::Shape s = tmp23;		HX_STACK_VAR(s,"s");
			HX_STACK_LINE(2745)
			bool tmp24 = (s != shape->outer);		HX_STACK_VAR(tmp24,"tmp24");
			HX_STACK_LINE(2745)
			bool tmp25;		HX_STACK_VAR(tmp25,"tmp25");
			HX_STACK_LINE(2745)
			if ((tmp24)){
				HX_STACK_LINE(2745)
				::zpp_nape::phys::ZPP_Body tmp26 = s->zpp_inner->body;		HX_STACK_VAR(tmp26,"tmp26");
				HX_STACK_LINE(2745)
				::zpp_nape::phys::ZPP_Body tmp27 = tmp26;		HX_STACK_VAR(tmp27,"tmp27");
				HX_STACK_LINE(2745)
				bool tmp28 = (tmp27 != null());		HX_STACK_VAR(tmp28,"tmp28");
				HX_STACK_LINE(2745)
				bool tmp29 = tmp28;		HX_STACK_VAR(tmp29,"tmp29");
				HX_STACK_LINE(2745)
				::nape::phys::Body tmp30;		HX_STACK_VAR(tmp30,"tmp30");
				HX_STACK_LINE(2745)
				bool tmp31 = tmp29;		HX_STACK_VAR(tmp31,"tmp31");
				HX_STACK_LINE(2745)
				if ((tmp31)){
					HX_STACK_LINE(2745)
					::zpp_nape::phys::ZPP_Body tmp32 = s->zpp_inner->body;		HX_STACK_VAR(tmp32,"tmp32");
					HX_STACK_LINE(2745)
					::zpp_nape::phys::ZPP_Body tmp33 = tmp32;		HX_STACK_VAR(tmp33,"tmp33");
					HX_STACK_LINE(2745)
					tmp30 = tmp33->outer;
				}
				else{
					HX_STACK_LINE(2745)
					tmp30 = null();
				}
				HX_STACK_LINE(2745)
				::nape::phys::Body tmp32 = body->outer;		HX_STACK_VAR(tmp32,"tmp32");
				HX_STACK_LINE(2745)
				tmp25 = (tmp30 != tmp32);
			}
			else{
				HX_STACK_LINE(2745)
				tmp25 = false;
			}
			HX_STACK_LINE(2745)
			if ((tmp25)){
				HX_STACK_LINE(2746)
				toi->s1 = shape;
				HX_STACK_LINE(2747)
				toi->s2 = s->zpp_inner;
				HX_STACK_LINE(2748)
				bool tmp26 = dynamics;		HX_STACK_VAR(tmp26,"tmp26");
				HX_STACK_LINE(2748)
				if ((tmp26)){
					HX_STACK_LINE(2749)
					s->zpp_inner->validate_sweepRadius();
					HX_STACK_LINE(2750)
					::zpp_nape::phys::ZPP_Body tmp27 = s->zpp_inner->body;		HX_STACK_VAR(tmp27,"tmp27");
					HX_STACK_LINE(2750)
					bool tmp28 = (tmp27 != null());		HX_STACK_VAR(tmp28,"tmp28");
					HX_STACK_LINE(2750)
					::nape::phys::Body tmp29;		HX_STACK_VAR(tmp29,"tmp29");
					HX_STACK_LINE(2750)
					if ((tmp28)){
						HX_STACK_LINE(2750)
						::zpp_nape::phys::ZPP_Body tmp30 = s->zpp_inner->body;		HX_STACK_VAR(tmp30,"tmp30");
						HX_STACK_LINE(2750)
						tmp29 = tmp30->outer;
					}
					else{
						HX_STACK_LINE(2750)
						tmp29 = null();
					}
					HX_STACK_LINE(2750)
					Float tmp30 = tmp29->zpp_inner->angvel;		HX_STACK_VAR(tmp30,"tmp30");
					HX_STACK_LINE(2750)
					::zpp_nape::phys::ZPP_Body tmp31 = s->zpp_inner->body;		HX_STACK_VAR(tmp31,"tmp31");
					HX_STACK_LINE(2750)
					bool tmp32 = (tmp31 != null());		HX_STACK_VAR(tmp32,"tmp32");
					HX_STACK_LINE(2750)
					::nape::phys::Body tmp33;		HX_STACK_VAR(tmp33,"tmp33");
					HX_STACK_LINE(2750)
					if ((tmp32)){
						HX_STACK_LINE(2750)
						::zpp_nape::phys::ZPP_Body tmp34 = s->zpp_inner->body;		HX_STACK_VAR(tmp34,"tmp34");
						HX_STACK_LINE(2750)
						tmp33 = tmp34->outer;
					}
					else{
						HX_STACK_LINE(2750)
						tmp33 = null();
					}
					HX_STACK_LINE(2750)
					tmp33->zpp_inner->sweep_angvel = tmp30;
					HX_STACK_LINE(2751)
					::zpp_nape::phys::ZPP_Body tmp34 = s->zpp_inner->body;		HX_STACK_VAR(tmp34,"tmp34");
					HX_STACK_LINE(2751)
					bool tmp35 = (tmp34 != null());		HX_STACK_VAR(tmp35,"tmp35");
					HX_STACK_LINE(2751)
					::nape::phys::Body tmp36;		HX_STACK_VAR(tmp36,"tmp36");
					HX_STACK_LINE(2751)
					if ((tmp35)){
						HX_STACK_LINE(2751)
						::zpp_nape::phys::ZPP_Body tmp37 = s->zpp_inner->body;		HX_STACK_VAR(tmp37,"tmp37");
						HX_STACK_LINE(2751)
						tmp36 = tmp37->outer;
					}
					else{
						HX_STACK_LINE(2751)
						tmp36 = null();
					}
					HX_STACK_LINE(2751)
					tmp36->zpp_inner->sweepTime = (int)0;
					HX_STACK_LINE(2752)
					::zpp_nape::geom::ZPP_ToiEvent tmp37 = toi;		HX_STACK_VAR(tmp37,"tmp37");
					HX_STACK_LINE(2752)
					Float tmp38 = deltaTime;		HX_STACK_VAR(tmp38,"tmp38");
					HX_STACK_LINE(2752)
					::zpp_nape::geom::ZPP_SweepDistance_obj::dynamicSweep(tmp37,tmp38,(int)0,(int)0,true);
					HX_STACK_LINE(2753)
					{
						HX_STACK_LINE(2753)
						::zpp_nape::phys::ZPP_Body tmp39 = s->zpp_inner->body;		HX_STACK_VAR(tmp39,"tmp39");
						HX_STACK_LINE(2753)
						bool tmp40 = (tmp39 != null());		HX_STACK_VAR(tmp40,"tmp40");
						HX_STACK_LINE(2753)
						::nape::phys::Body tmp41;		HX_STACK_VAR(tmp41,"tmp41");
						HX_STACK_LINE(2753)
						if ((tmp40)){
							HX_STACK_LINE(2753)
							::zpp_nape::phys::ZPP_Body tmp42 = s->zpp_inner->body;		HX_STACK_VAR(tmp42,"tmp42");
							HX_STACK_LINE(2753)
							tmp41 = tmp42->outer;
						}
						else{
							HX_STACK_LINE(2753)
							tmp41 = null();
						}
						HX_STACK_LINE(2753)
						::zpp_nape::phys::ZPP_Body _this = tmp41->zpp_inner;		HX_STACK_VAR(_this,"_this");
						HX_STACK_LINE(2753)
						Float tmp42 = ((int)0 - _this->sweepTime);		HX_STACK_VAR(tmp42,"tmp42");
						HX_STACK_LINE(2753)
						Float delta = tmp42;		HX_STACK_VAR(delta,"delta");
						HX_STACK_LINE(2753)
						bool tmp43 = (delta != (int)0);		HX_STACK_VAR(tmp43,"tmp43");
						HX_STACK_LINE(2753)
						if ((tmp43)){
							HX_STACK_LINE(2753)
							_this->sweepTime = (int)0;
							HX_STACK_LINE(2753)
							{
								HX_STACK_LINE(2753)
								Float t = delta;		HX_STACK_VAR(t,"t");
								HX_STACK_LINE(2753)
								Float tmp44 = (_this->velx * t);		HX_STACK_VAR(tmp44,"tmp44");
								HX_STACK_LINE(2753)
								hx::AddEq(_this->posx,tmp44);
								HX_STACK_LINE(2753)
								Float tmp45 = (_this->vely * t);		HX_STACK_VAR(tmp45,"tmp45");
								HX_STACK_LINE(2753)
								hx::AddEq(_this->posy,tmp45);
							}
							HX_STACK_LINE(2753)
							bool tmp44 = (_this->angvel != (int)0);		HX_STACK_VAR(tmp44,"tmp44");
							HX_STACK_LINE(2753)
							if ((tmp44)){
								HX_STACK_LINE(2753)
								Float tmp45 = (_this->sweep_angvel * delta);		HX_STACK_VAR(tmp45,"tmp45");
								HX_STACK_LINE(2753)
								Float dr = tmp45;		HX_STACK_VAR(dr,"dr");
								HX_STACK_LINE(2753)
								hx::AddEq(_this->rot,dr);
								HX_STACK_LINE(2753)
								Float tmp46 = (dr * dr);		HX_STACK_VAR(tmp46,"tmp46");
								HX_STACK_LINE(2753)
								bool tmp47 = (tmp46 > ((Float)0.0001));		HX_STACK_VAR(tmp47,"tmp47");
								HX_STACK_LINE(2753)
								if ((tmp47)){
									HX_STACK_LINE(2753)
									Float tmp48 = _this->rot;		HX_STACK_VAR(tmp48,"tmp48");
									HX_STACK_LINE(2753)
									Float tmp49 = ::Math_obj::sin(tmp48);		HX_STACK_VAR(tmp49,"tmp49");
									HX_STACK_LINE(2753)
									_this->axisx = tmp49;
									HX_STACK_LINE(2753)
									Float tmp50 = _this->rot;		HX_STACK_VAR(tmp50,"tmp50");
									HX_STACK_LINE(2753)
									Float tmp51 = ::Math_obj::cos(tmp50);		HX_STACK_VAR(tmp51,"tmp51");
									HX_STACK_LINE(2753)
									_this->axisy = tmp51;
									HX_STACK_LINE(2753)
									Dynamic();
								}
								else{
									HX_STACK_LINE(2753)
									Float tmp48 = (dr * dr);		HX_STACK_VAR(tmp48,"tmp48");
									HX_STACK_LINE(2753)
									Float d2 = tmp48;		HX_STACK_VAR(d2,"d2");
									HX_STACK_LINE(2753)
									Float tmp49 = (((Float)0.5) * d2);		HX_STACK_VAR(tmp49,"tmp49");
									HX_STACK_LINE(2753)
									Float tmp50 = ((int)1 - tmp49);		HX_STACK_VAR(tmp50,"tmp50");
									HX_STACK_LINE(2753)
									Float p = tmp50;		HX_STACK_VAR(p,"p");
									HX_STACK_LINE(2753)
									Float tmp51 = (d2 * d2);		HX_STACK_VAR(tmp51,"tmp51");
									HX_STACK_LINE(2753)
									Float tmp52 = (Float(tmp51) / Float((int)8));		HX_STACK_VAR(tmp52,"tmp52");
									HX_STACK_LINE(2753)
									Float tmp53 = ((int)1 - tmp52);		HX_STACK_VAR(tmp53,"tmp53");
									HX_STACK_LINE(2753)
									Float m = tmp53;		HX_STACK_VAR(m,"m");
									HX_STACK_LINE(2753)
									Float tmp54 = (p * _this->axisx);		HX_STACK_VAR(tmp54,"tmp54");
									HX_STACK_LINE(2753)
									Float tmp55 = (dr * _this->axisy);		HX_STACK_VAR(tmp55,"tmp55");
									HX_STACK_LINE(2753)
									Float tmp56 = (tmp54 + tmp55);		HX_STACK_VAR(tmp56,"tmp56");
									HX_STACK_LINE(2753)
									Float tmp57 = m;		HX_STACK_VAR(tmp57,"tmp57");
									HX_STACK_LINE(2753)
									Float tmp58 = (tmp56 * tmp57);		HX_STACK_VAR(tmp58,"tmp58");
									HX_STACK_LINE(2753)
									Float nx = tmp58;		HX_STACK_VAR(nx,"nx");
									HX_STACK_LINE(2753)
									Float tmp59 = (p * _this->axisy);		HX_STACK_VAR(tmp59,"tmp59");
									HX_STACK_LINE(2753)
									Float tmp60 = (dr * _this->axisx);		HX_STACK_VAR(tmp60,"tmp60");
									HX_STACK_LINE(2753)
									Float tmp61 = (tmp59 - tmp60);		HX_STACK_VAR(tmp61,"tmp61");
									HX_STACK_LINE(2753)
									Float tmp62 = m;		HX_STACK_VAR(tmp62,"tmp62");
									HX_STACK_LINE(2753)
									Float tmp63 = (tmp61 * tmp62);		HX_STACK_VAR(tmp63,"tmp63");
									HX_STACK_LINE(2753)
									_this->axisy = tmp63;
									HX_STACK_LINE(2753)
									_this->axisx = nx;
								}
							}
						}
					}
					HX_STACK_LINE(2754)
					{
						HX_STACK_LINE(2754)
						::zpp_nape::phys::ZPP_Body tmp39 = s->zpp_inner->body;		HX_STACK_VAR(tmp39,"tmp39");
						HX_STACK_LINE(2754)
						bool tmp40 = (tmp39 != null());		HX_STACK_VAR(tmp40,"tmp40");
						HX_STACK_LINE(2754)
						::nape::phys::Body tmp41;		HX_STACK_VAR(tmp41,"tmp41");
						HX_STACK_LINE(2754)
						if ((tmp40)){
							HX_STACK_LINE(2754)
							::zpp_nape::phys::ZPP_Body tmp42 = s->zpp_inner->body;		HX_STACK_VAR(tmp42,"tmp42");
							HX_STACK_LINE(2754)
							tmp41 = tmp42->outer;
						}
						else{
							HX_STACK_LINE(2754)
							tmp41 = null();
						}
						HX_STACK_LINE(2754)
						::zpp_nape::phys::ZPP_Body _this = tmp41->zpp_inner;		HX_STACK_VAR(_this,"_this");
						HX_STACK_LINE(2754)
						::zpp_nape::shape::ZPP_Shape s1 = s->zpp_inner;		HX_STACK_VAR(s1,"s1");
						HX_STACK_LINE(2754)
						int tmp42 = s1->type;		HX_STACK_VAR(tmp42,"tmp42");
						HX_STACK_LINE(2754)
						int tmp43 = ::zpp_nape::util::ZPP_Flags_obj::id_ShapeType_CIRCLE;		HX_STACK_VAR(tmp43,"tmp43");
						HX_STACK_LINE(2754)
						bool tmp44 = (tmp42 == tmp43);		HX_STACK_VAR(tmp44,"tmp44");
						HX_STACK_LINE(2754)
						if ((tmp44)){
							HX_STACK_LINE(2754)
							Float tmp45 = _this->posx;		HX_STACK_VAR(tmp45,"tmp45");
							HX_STACK_LINE(2754)
							Float tmp46 = (_this->axisy * s1->localCOMx);		HX_STACK_VAR(tmp46,"tmp46");
							HX_STACK_LINE(2754)
							Float tmp47 = (_this->axisx * s1->localCOMy);		HX_STACK_VAR(tmp47,"tmp47");
							HX_STACK_LINE(2754)
							Float tmp48 = (tmp46 - tmp47);		HX_STACK_VAR(tmp48,"tmp48");
							HX_STACK_LINE(2754)
							Float tmp49 = (tmp45 + tmp48);		HX_STACK_VAR(tmp49,"tmp49");
							HX_STACK_LINE(2754)
							s1->worldCOMx = tmp49;
							HX_STACK_LINE(2754)
							Float tmp50 = _this->posy;		HX_STACK_VAR(tmp50,"tmp50");
							HX_STACK_LINE(2754)
							Float tmp51 = (s1->localCOMx * _this->axisx);		HX_STACK_VAR(tmp51,"tmp51");
							HX_STACK_LINE(2754)
							Float tmp52 = (s1->localCOMy * _this->axisy);		HX_STACK_VAR(tmp52,"tmp52");
							HX_STACK_LINE(2754)
							Float tmp53 = (tmp51 + tmp52);		HX_STACK_VAR(tmp53,"tmp53");
							HX_STACK_LINE(2754)
							Float tmp54 = (tmp50 + tmp53);		HX_STACK_VAR(tmp54,"tmp54");
							HX_STACK_LINE(2754)
							s1->worldCOMy = tmp54;
						}
						else{
							HX_STACK_LINE(2754)
							::zpp_nape::shape::ZPP_Polygon p = s1->polygon;		HX_STACK_VAR(p,"p");
							HX_STACK_LINE(2754)
							::zpp_nape::geom::ZPP_Vec2 tmp45 = p->lverts->next;		HX_STACK_VAR(tmp45,"tmp45");
							HX_STACK_LINE(2754)
							::zpp_nape::geom::ZPP_Vec2 li = tmp45;		HX_STACK_VAR(li,"li");
							HX_STACK_LINE(2754)
							{
								HX_STACK_LINE(2754)
								::zpp_nape::geom::ZPP_Vec2 tmp46 = p->gverts->next;		HX_STACK_VAR(tmp46,"tmp46");
								HX_STACK_LINE(2754)
								::zpp_nape::geom::ZPP_Vec2 cx_ite = tmp46;		HX_STACK_VAR(cx_ite,"cx_ite");
								HX_STACK_LINE(2754)
								while((true)){
									HX_STACK_LINE(2754)
									bool tmp47 = (cx_ite != null());		HX_STACK_VAR(tmp47,"tmp47");
									HX_STACK_LINE(2754)
									bool tmp48 = !(tmp47);		HX_STACK_VAR(tmp48,"tmp48");
									HX_STACK_LINE(2754)
									if ((tmp48)){
										HX_STACK_LINE(2754)
										break;
									}
									HX_STACK_LINE(2754)
									::zpp_nape::geom::ZPP_Vec2 g = cx_ite;		HX_STACK_VAR(g,"g");
									HX_STACK_LINE(2754)
									{
										HX_STACK_LINE(2754)
										::zpp_nape::geom::ZPP_Vec2 l = li;		HX_STACK_VAR(l,"l");
										HX_STACK_LINE(2754)
										li = li->next;
										HX_STACK_LINE(2754)
										{
											HX_STACK_LINE(2754)
											Float tmp49 = _this->posx;		HX_STACK_VAR(tmp49,"tmp49");
											HX_STACK_LINE(2754)
											Float tmp50 = (_this->axisy * l->x);		HX_STACK_VAR(tmp50,"tmp50");
											HX_STACK_LINE(2754)
											Float tmp51 = (_this->axisx * l->y);		HX_STACK_VAR(tmp51,"tmp51");
											HX_STACK_LINE(2754)
											Float tmp52 = (tmp50 - tmp51);		HX_STACK_VAR(tmp52,"tmp52");
											HX_STACK_LINE(2754)
											Float tmp53 = (tmp49 + tmp52);		HX_STACK_VAR(tmp53,"tmp53");
											HX_STACK_LINE(2754)
											g->x = tmp53;
											HX_STACK_LINE(2754)
											Float tmp54 = _this->posy;		HX_STACK_VAR(tmp54,"tmp54");
											HX_STACK_LINE(2754)
											Float tmp55 = (l->x * _this->axisx);		HX_STACK_VAR(tmp55,"tmp55");
											HX_STACK_LINE(2754)
											Float tmp56 = (l->y * _this->axisy);		HX_STACK_VAR(tmp56,"tmp56");
											HX_STACK_LINE(2754)
											Float tmp57 = (tmp55 + tmp56);		HX_STACK_VAR(tmp57,"tmp57");
											HX_STACK_LINE(2754)
											Float tmp58 = (tmp54 + tmp57);		HX_STACK_VAR(tmp58,"tmp58");
											HX_STACK_LINE(2754)
											g->y = tmp58;
										}
									}
									HX_STACK_LINE(2754)
									cx_ite = cx_ite->next;
								}
							}
							HX_STACK_LINE(2754)
							::zpp_nape::util::ZNPNode_ZPP_Edge tmp46 = p->edges->head;		HX_STACK_VAR(tmp46,"tmp46");
							HX_STACK_LINE(2754)
							::zpp_nape::util::ZNPNode_ZPP_Edge ite = tmp46;		HX_STACK_VAR(ite,"ite");
							HX_STACK_LINE(2754)
							{
								HX_STACK_LINE(2754)
								::zpp_nape::geom::ZPP_Vec2 tmp47 = p->gverts->next;		HX_STACK_VAR(tmp47,"tmp47");
								HX_STACK_LINE(2754)
								::zpp_nape::geom::ZPP_Vec2 cx_ite = tmp47;		HX_STACK_VAR(cx_ite,"cx_ite");
								HX_STACK_LINE(2754)
								::zpp_nape::geom::ZPP_Vec2 u = cx_ite;		HX_STACK_VAR(u,"u");
								HX_STACK_LINE(2754)
								cx_ite = cx_ite->next;
								HX_STACK_LINE(2754)
								while((true)){
									HX_STACK_LINE(2754)
									bool tmp48 = (cx_ite != null());		HX_STACK_VAR(tmp48,"tmp48");
									HX_STACK_LINE(2754)
									bool tmp49 = !(tmp48);		HX_STACK_VAR(tmp49,"tmp49");
									HX_STACK_LINE(2754)
									if ((tmp49)){
										HX_STACK_LINE(2754)
										break;
									}
									HX_STACK_LINE(2754)
									::zpp_nape::geom::ZPP_Vec2 v = cx_ite;		HX_STACK_VAR(v,"v");
									HX_STACK_LINE(2754)
									{
										HX_STACK_LINE(2754)
										::zpp_nape::shape::ZPP_Edge e = ite->elt;		HX_STACK_VAR(e,"e");
										HX_STACK_LINE(2754)
										ite = ite->next;
										HX_STACK_LINE(2754)
										{
											HX_STACK_LINE(2754)
											Float tmp50 = (_this->axisy * e->lnormx);		HX_STACK_VAR(tmp50,"tmp50");
											HX_STACK_LINE(2754)
											Float tmp51 = (_this->axisx * e->lnormy);		HX_STACK_VAR(tmp51,"tmp51");
											HX_STACK_LINE(2754)
											Float tmp52 = (tmp50 - tmp51);		HX_STACK_VAR(tmp52,"tmp52");
											HX_STACK_LINE(2754)
											e->gnormx = tmp52;
											HX_STACK_LINE(2754)
											Float tmp53 = (e->lnormx * _this->axisx);		HX_STACK_VAR(tmp53,"tmp53");
											HX_STACK_LINE(2754)
											Float tmp54 = (e->lnormy * _this->axisy);		HX_STACK_VAR(tmp54,"tmp54");
											HX_STACK_LINE(2754)
											Float tmp55 = (tmp53 + tmp54);		HX_STACK_VAR(tmp55,"tmp55");
											HX_STACK_LINE(2754)
											e->gnormy = tmp55;
										}
										HX_STACK_LINE(2754)
										Float tmp50 = (_this->posx * e->gnormx);		HX_STACK_VAR(tmp50,"tmp50");
										HX_STACK_LINE(2754)
										Float tmp51 = (_this->posy * e->gnormy);		HX_STACK_VAR(tmp51,"tmp51");
										HX_STACK_LINE(2754)
										Float tmp52 = (tmp50 + tmp51);		HX_STACK_VAR(tmp52,"tmp52");
										HX_STACK_LINE(2754)
										Float tmp53 = e->lprojection;		HX_STACK_VAR(tmp53,"tmp53");
										HX_STACK_LINE(2754)
										Float tmp54 = (tmp52 + tmp53);		HX_STACK_VAR(tmp54,"tmp54");
										HX_STACK_LINE(2754)
										e->gprojection = tmp54;
										HX_STACK_LINE(2754)
										Float tmp55 = (u->y * e->gnormx);		HX_STACK_VAR(tmp55,"tmp55");
										HX_STACK_LINE(2754)
										Float tmp56 = (u->x * e->gnormy);		HX_STACK_VAR(tmp56,"tmp56");
										HX_STACK_LINE(2754)
										Float tmp57 = (tmp55 - tmp56);		HX_STACK_VAR(tmp57,"tmp57");
										HX_STACK_LINE(2754)
										e->tp0 = tmp57;
										HX_STACK_LINE(2754)
										Float tmp58 = (v->y * e->gnormx);		HX_STACK_VAR(tmp58,"tmp58");
										HX_STACK_LINE(2754)
										Float tmp59 = (v->x * e->gnormy);		HX_STACK_VAR(tmp59,"tmp59");
										HX_STACK_LINE(2754)
										Float tmp60 = (tmp58 - tmp59);		HX_STACK_VAR(tmp60,"tmp60");
										HX_STACK_LINE(2754)
										e->tp1 = tmp60;
									}
									HX_STACK_LINE(2754)
									u = v;
									HX_STACK_LINE(2754)
									cx_ite = cx_ite->next;
								}
								HX_STACK_LINE(2754)
								::zpp_nape::geom::ZPP_Vec2 tmp48 = p->gverts->next;		HX_STACK_VAR(tmp48,"tmp48");
								HX_STACK_LINE(2754)
								::zpp_nape::geom::ZPP_Vec2 v = tmp48;		HX_STACK_VAR(v,"v");
								HX_STACK_LINE(2754)
								{
									HX_STACK_LINE(2754)
									::zpp_nape::shape::ZPP_Edge e = ite->elt;		HX_STACK_VAR(e,"e");
									HX_STACK_LINE(2754)
									ite = ite->next;
									HX_STACK_LINE(2754)
									{
										HX_STACK_LINE(2754)
										Float tmp49 = (_this->axisy * e->lnormx);		HX_STACK_VAR(tmp49,"tmp49");
										HX_STACK_LINE(2754)
										Float tmp50 = (_this->axisx * e->lnormy);		HX_STACK_VAR(tmp50,"tmp50");
										HX_STACK_LINE(2754)
										Float tmp51 = (tmp49 - tmp50);		HX_STACK_VAR(tmp51,"tmp51");
										HX_STACK_LINE(2754)
										e->gnormx = tmp51;
										HX_STACK_LINE(2754)
										Float tmp52 = (e->lnormx * _this->axisx);		HX_STACK_VAR(tmp52,"tmp52");
										HX_STACK_LINE(2754)
										Float tmp53 = (e->lnormy * _this->axisy);		HX_STACK_VAR(tmp53,"tmp53");
										HX_STACK_LINE(2754)
										Float tmp54 = (tmp52 + tmp53);		HX_STACK_VAR(tmp54,"tmp54");
										HX_STACK_LINE(2754)
										e->gnormy = tmp54;
									}
									HX_STACK_LINE(2754)
									Float tmp49 = (_this->posx * e->gnormx);		HX_STACK_VAR(tmp49,"tmp49");
									HX_STACK_LINE(2754)
									Float tmp50 = (_this->posy * e->gnormy);		HX_STACK_VAR(tmp50,"tmp50");
									HX_STACK_LINE(2754)
									Float tmp51 = (tmp49 + tmp50);		HX_STACK_VAR(tmp51,"tmp51");
									HX_STACK_LINE(2754)
									Float tmp52 = e->lprojection;		HX_STACK_VAR(tmp52,"tmp52");
									HX_STACK_LINE(2754)
									Float tmp53 = (tmp51 + tmp52);		HX_STACK_VAR(tmp53,"tmp53");
									HX_STACK_LINE(2754)
									e->gprojection = tmp53;
									HX_STACK_LINE(2754)
									Float tmp54 = (u->y * e->gnormx);		HX_STACK_VAR(tmp54,"tmp54");
									HX_STACK_LINE(2754)
									Float tmp55 = (u->x * e->gnormy);		HX_STACK_VAR(tmp55,"tmp55");
									HX_STACK_LINE(2754)
									Float tmp56 = (tmp54 - tmp55);		HX_STACK_VAR(tmp56,"tmp56");
									HX_STACK_LINE(2754)
									e->tp0 = tmp56;
									HX_STACK_LINE(2754)
									Float tmp57 = (v->y * e->gnormx);		HX_STACK_VAR(tmp57,"tmp57");
									HX_STACK_LINE(2754)
									Float tmp58 = (v->x * e->gnormy);		HX_STACK_VAR(tmp58,"tmp58");
									HX_STACK_LINE(2754)
									Float tmp59 = (tmp57 - tmp58);		HX_STACK_VAR(tmp59,"tmp59");
									HX_STACK_LINE(2754)
									e->tp1 = tmp59;
								}
							}
						}
					}
				}
				else{
					HX_STACK_LINE(2757)
					::zpp_nape::geom::ZPP_ToiEvent tmp27 = toi;		HX_STACK_VAR(tmp27,"tmp27");
					HX_STACK_LINE(2757)
					Float tmp28 = deltaTime;		HX_STACK_VAR(tmp28,"tmp28");
					HX_STACK_LINE(2757)
					::zpp_nape::geom::ZPP_SweepDistance_obj::staticSweep(tmp27,tmp28,(int)0,(int)0);
				}
				HX_STACK_LINE(2759)
				hx::MultEq(toi->toi,deltaTime);
				HX_STACK_LINE(2760)
				bool tmp27 = (toi->toi > (int)0);		HX_STACK_VAR(tmp27,"tmp27");
				HX_STACK_LINE(2760)
				bool tmp28;		HX_STACK_VAR(tmp28,"tmp28");
				HX_STACK_LINE(2760)
				if ((tmp27)){
					HX_STACK_LINE(2760)
					tmp28 = (toi->toi < mint);
				}
				else{
					HX_STACK_LINE(2760)
					tmp28 = false;
				}
				HX_STACK_LINE(2760)
				if ((tmp28)){
					HX_STACK_LINE(2761)
					mint = toi->toi;
					HX_STACK_LINE(2762)
					{
						HX_STACK_LINE(2763)
						Float tmp29 = toi->axis->x;		HX_STACK_VAR(tmp29,"tmp29");
						HX_STACK_LINE(2763)
						minAxisx = tmp29;
						HX_STACK_LINE(2764)
						Float tmp30 = toi->axis->y;		HX_STACK_VAR(tmp30,"tmp30");
						HX_STACK_LINE(2764)
						minAxisy = tmp30;
						HX_STACK_LINE(2773)
						{
						}
					}
					HX_STACK_LINE(2782)
					{
						HX_STACK_LINE(2783)
						Float tmp29 = toi->c2->x;		HX_STACK_VAR(tmp29,"tmp29");
						HX_STACK_LINE(2783)
						minPosx = tmp29;
						HX_STACK_LINE(2784)
						Float tmp30 = toi->c2->y;		HX_STACK_VAR(tmp30,"tmp30");
						HX_STACK_LINE(2784)
						minPosy = tmp30;
						HX_STACK_LINE(2793)
						{
						}
					}
					HX_STACK_LINE(2802)
					mins = s;
				}
			}
		}
	}
	HX_STACK_LINE(2806)
	list->clear();
	HX_STACK_LINE(2807)
	{
		HX_STACK_LINE(2808)
		::zpp_nape::geom::ZPP_ToiEvent o = toi;		HX_STACK_VAR(o,"o");
		HX_STACK_LINE(2818)
		::zpp_nape::geom::ZPP_ToiEvent tmp20 = ::zpp_nape::geom::ZPP_ToiEvent_obj::zpp_pool;		HX_STACK_VAR(tmp20,"tmp20");
		HX_STACK_LINE(2818)
		o->next = tmp20;
		HX_STACK_LINE(2819)
		::zpp_nape::geom::ZPP_ToiEvent_obj::zpp_pool = o;
	}
	HX_STACK_LINE(2824)
	{
		HX_STACK_LINE(2824)
		Float tmp20 = ((int)0 - body->sweepTime);		HX_STACK_VAR(tmp20,"tmp20");
		HX_STACK_LINE(2824)
		Float delta = tmp20;		HX_STACK_VAR(delta,"delta");
		HX_STACK_LINE(2824)
		bool tmp21 = (delta != (int)0);		HX_STACK_VAR(tmp21,"tmp21");
		HX_STACK_LINE(2824)
		if ((tmp21)){
			HX_STACK_LINE(2824)
			body->sweepTime = (int)0;
			HX_STACK_LINE(2824)
			{
				HX_STACK_LINE(2824)
				Float t = delta;		HX_STACK_VAR(t,"t");
				HX_STACK_LINE(2824)
				Float tmp22 = (body->velx * t);		HX_STACK_VAR(tmp22,"tmp22");
				HX_STACK_LINE(2824)
				hx::AddEq(body->posx,tmp22);
				HX_STACK_LINE(2824)
				Float tmp23 = (body->vely * t);		HX_STACK_VAR(tmp23,"tmp23");
				HX_STACK_LINE(2824)
				hx::AddEq(body->posy,tmp23);
			}
			HX_STACK_LINE(2824)
			bool tmp22 = (body->angvel != (int)0);		HX_STACK_VAR(tmp22,"tmp22");
			HX_STACK_LINE(2824)
			if ((tmp22)){
				HX_STACK_LINE(2824)
				Float tmp23 = (body->sweep_angvel * delta);		HX_STACK_VAR(tmp23,"tmp23");
				HX_STACK_LINE(2824)
				Float dr = tmp23;		HX_STACK_VAR(dr,"dr");
				HX_STACK_LINE(2824)
				hx::AddEq(body->rot,dr);
				HX_STACK_LINE(2824)
				Float tmp24 = (dr * dr);		HX_STACK_VAR(tmp24,"tmp24");
				HX_STACK_LINE(2824)
				bool tmp25 = (tmp24 > ((Float)0.0001));		HX_STACK_VAR(tmp25,"tmp25");
				HX_STACK_LINE(2824)
				if ((tmp25)){
					HX_STACK_LINE(2824)
					Float tmp26 = body->rot;		HX_STACK_VAR(tmp26,"tmp26");
					HX_STACK_LINE(2824)
					Float tmp27 = ::Math_obj::sin(tmp26);		HX_STACK_VAR(tmp27,"tmp27");
					HX_STACK_LINE(2824)
					body->axisx = tmp27;
					HX_STACK_LINE(2824)
					Float tmp28 = body->rot;		HX_STACK_VAR(tmp28,"tmp28");
					HX_STACK_LINE(2824)
					Float tmp29 = ::Math_obj::cos(tmp28);		HX_STACK_VAR(tmp29,"tmp29");
					HX_STACK_LINE(2824)
					body->axisy = tmp29;
					HX_STACK_LINE(2824)
					Dynamic();
				}
				else{
					HX_STACK_LINE(2824)
					Float tmp26 = (dr * dr);		HX_STACK_VAR(tmp26,"tmp26");
					HX_STACK_LINE(2824)
					Float d2 = tmp26;		HX_STACK_VAR(d2,"d2");
					HX_STACK_LINE(2824)
					Float tmp27 = (((Float)0.5) * d2);		HX_STACK_VAR(tmp27,"tmp27");
					HX_STACK_LINE(2824)
					Float tmp28 = ((int)1 - tmp27);		HX_STACK_VAR(tmp28,"tmp28");
					HX_STACK_LINE(2824)
					Float p = tmp28;		HX_STACK_VAR(p,"p");
					HX_STACK_LINE(2824)
					Float tmp29 = (d2 * d2);		HX_STACK_VAR(tmp29,"tmp29");
					HX_STACK_LINE(2824)
					Float tmp30 = (Float(tmp29) / Float((int)8));		HX_STACK_VAR(tmp30,"tmp30");
					HX_STACK_LINE(2824)
					Float tmp31 = ((int)1 - tmp30);		HX_STACK_VAR(tmp31,"tmp31");
					HX_STACK_LINE(2824)
					Float m = tmp31;		HX_STACK_VAR(m,"m");
					HX_STACK_LINE(2824)
					Float tmp32 = (p * body->axisx);		HX_STACK_VAR(tmp32,"tmp32");
					HX_STACK_LINE(2824)
					Float tmp33 = (dr * body->axisy);		HX_STACK_VAR(tmp33,"tmp33");
					HX_STACK_LINE(2824)
					Float tmp34 = (tmp32 + tmp33);		HX_STACK_VAR(tmp34,"tmp34");
					HX_STACK_LINE(2824)
					Float tmp35 = m;		HX_STACK_VAR(tmp35,"tmp35");
					HX_STACK_LINE(2824)
					Float tmp36 = (tmp34 * tmp35);		HX_STACK_VAR(tmp36,"tmp36");
					HX_STACK_LINE(2824)
					Float nx = tmp36;		HX_STACK_VAR(nx,"nx");
					HX_STACK_LINE(2824)
					Float tmp37 = (p * body->axisy);		HX_STACK_VAR(tmp37,"tmp37");
					HX_STACK_LINE(2824)
					Float tmp38 = (dr * body->axisx);		HX_STACK_VAR(tmp38,"tmp38");
					HX_STACK_LINE(2824)
					Float tmp39 = (tmp37 - tmp38);		HX_STACK_VAR(tmp39,"tmp39");
					HX_STACK_LINE(2824)
					Float tmp40 = m;		HX_STACK_VAR(tmp40,"tmp40");
					HX_STACK_LINE(2824)
					Float tmp41 = (tmp39 * tmp40);		HX_STACK_VAR(tmp41,"tmp41");
					HX_STACK_LINE(2824)
					body->axisy = tmp41;
					HX_STACK_LINE(2824)
					body->axisx = nx;
				}
			}
		}
	}
	HX_STACK_LINE(2825)
	{
		HX_STACK_LINE(2825)
		int tmp20 = shape->type;		HX_STACK_VAR(tmp20,"tmp20");
		HX_STACK_LINE(2825)
		int tmp21 = ::zpp_nape::util::ZPP_Flags_obj::id_ShapeType_CIRCLE;		HX_STACK_VAR(tmp21,"tmp21");
		HX_STACK_LINE(2825)
		bool tmp22 = (tmp20 == tmp21);		HX_STACK_VAR(tmp22,"tmp22");
		HX_STACK_LINE(2825)
		if ((tmp22)){
			HX_STACK_LINE(2825)
			Float tmp23 = body->posx;		HX_STACK_VAR(tmp23,"tmp23");
			HX_STACK_LINE(2825)
			Float tmp24 = (body->axisy * shape->localCOMx);		HX_STACK_VAR(tmp24,"tmp24");
			HX_STACK_LINE(2825)
			Float tmp25 = (body->axisx * shape->localCOMy);		HX_STACK_VAR(tmp25,"tmp25");
			HX_STACK_LINE(2825)
			Float tmp26 = (tmp24 - tmp25);		HX_STACK_VAR(tmp26,"tmp26");
			HX_STACK_LINE(2825)
			Float tmp27 = (tmp23 + tmp26);		HX_STACK_VAR(tmp27,"tmp27");
			HX_STACK_LINE(2825)
			shape->worldCOMx = tmp27;
			HX_STACK_LINE(2825)
			Float tmp28 = body->posy;		HX_STACK_VAR(tmp28,"tmp28");
			HX_STACK_LINE(2825)
			Float tmp29 = (shape->localCOMx * body->axisx);		HX_STACK_VAR(tmp29,"tmp29");
			HX_STACK_LINE(2825)
			Float tmp30 = (shape->localCOMy * body->axisy);		HX_STACK_VAR(tmp30,"tmp30");
			HX_STACK_LINE(2825)
			Float tmp31 = (tmp29 + tmp30);		HX_STACK_VAR(tmp31,"tmp31");
			HX_STACK_LINE(2825)
			Float tmp32 = (tmp28 + tmp31);		HX_STACK_VAR(tmp32,"tmp32");
			HX_STACK_LINE(2825)
			shape->worldCOMy = tmp32;
		}
		else{
			HX_STACK_LINE(2825)
			::zpp_nape::shape::ZPP_Polygon p = shape->polygon;		HX_STACK_VAR(p,"p");
			HX_STACK_LINE(2825)
			::zpp_nape::geom::ZPP_Vec2 tmp23 = p->lverts->next;		HX_STACK_VAR(tmp23,"tmp23");
			HX_STACK_LINE(2825)
			::zpp_nape::geom::ZPP_Vec2 li = tmp23;		HX_STACK_VAR(li,"li");
			HX_STACK_LINE(2825)
			{
				HX_STACK_LINE(2825)
				::zpp_nape::geom::ZPP_Vec2 tmp24 = p->gverts->next;		HX_STACK_VAR(tmp24,"tmp24");
				HX_STACK_LINE(2825)
				::zpp_nape::geom::ZPP_Vec2 cx_ite = tmp24;		HX_STACK_VAR(cx_ite,"cx_ite");
				HX_STACK_LINE(2825)
				while((true)){
					HX_STACK_LINE(2825)
					bool tmp25 = (cx_ite != null());		HX_STACK_VAR(tmp25,"tmp25");
					HX_STACK_LINE(2825)
					bool tmp26 = !(tmp25);		HX_STACK_VAR(tmp26,"tmp26");
					HX_STACK_LINE(2825)
					if ((tmp26)){
						HX_STACK_LINE(2825)
						break;
					}
					HX_STACK_LINE(2825)
					::zpp_nape::geom::ZPP_Vec2 g = cx_ite;		HX_STACK_VAR(g,"g");
					HX_STACK_LINE(2825)
					{
						HX_STACK_LINE(2825)
						::zpp_nape::geom::ZPP_Vec2 l = li;		HX_STACK_VAR(l,"l");
						HX_STACK_LINE(2825)
						li = li->next;
						HX_STACK_LINE(2825)
						{
							HX_STACK_LINE(2825)
							Float tmp27 = body->posx;		HX_STACK_VAR(tmp27,"tmp27");
							HX_STACK_LINE(2825)
							Float tmp28 = (body->axisy * l->x);		HX_STACK_VAR(tmp28,"tmp28");
							HX_STACK_LINE(2825)
							Float tmp29 = (body->axisx * l->y);		HX_STACK_VAR(tmp29,"tmp29");
							HX_STACK_LINE(2825)
							Float tmp30 = (tmp28 - tmp29);		HX_STACK_VAR(tmp30,"tmp30");
							HX_STACK_LINE(2825)
							Float tmp31 = (tmp27 + tmp30);		HX_STACK_VAR(tmp31,"tmp31");
							HX_STACK_LINE(2825)
							g->x = tmp31;
							HX_STACK_LINE(2825)
							Float tmp32 = body->posy;		HX_STACK_VAR(tmp32,"tmp32");
							HX_STACK_LINE(2825)
							Float tmp33 = (l->x * body->axisx);		HX_STACK_VAR(tmp33,"tmp33");
							HX_STACK_LINE(2825)
							Float tmp34 = (l->y * body->axisy);		HX_STACK_VAR(tmp34,"tmp34");
							HX_STACK_LINE(2825)
							Float tmp35 = (tmp33 + tmp34);		HX_STACK_VAR(tmp35,"tmp35");
							HX_STACK_LINE(2825)
							Float tmp36 = (tmp32 + tmp35);		HX_STACK_VAR(tmp36,"tmp36");
							HX_STACK_LINE(2825)
							g->y = tmp36;
						}
					}
					HX_STACK_LINE(2825)
					cx_ite = cx_ite->next;
				}
			}
			HX_STACK_LINE(2825)
			::zpp_nape::util::ZNPNode_ZPP_Edge tmp24 = p->edges->head;		HX_STACK_VAR(tmp24,"tmp24");
			HX_STACK_LINE(2825)
			::zpp_nape::util::ZNPNode_ZPP_Edge ite = tmp24;		HX_STACK_VAR(ite,"ite");
			HX_STACK_LINE(2825)
			{
				HX_STACK_LINE(2825)
				::zpp_nape::geom::ZPP_Vec2 tmp25 = p->gverts->next;		HX_STACK_VAR(tmp25,"tmp25");
				HX_STACK_LINE(2825)
				::zpp_nape::geom::ZPP_Vec2 cx_ite = tmp25;		HX_STACK_VAR(cx_ite,"cx_ite");
				HX_STACK_LINE(2825)
				::zpp_nape::geom::ZPP_Vec2 u = cx_ite;		HX_STACK_VAR(u,"u");
				HX_STACK_LINE(2825)
				cx_ite = cx_ite->next;
				HX_STACK_LINE(2825)
				while((true)){
					HX_STACK_LINE(2825)
					bool tmp26 = (cx_ite != null());		HX_STACK_VAR(tmp26,"tmp26");
					HX_STACK_LINE(2825)
					bool tmp27 = !(tmp26);		HX_STACK_VAR(tmp27,"tmp27");
					HX_STACK_LINE(2825)
					if ((tmp27)){
						HX_STACK_LINE(2825)
						break;
					}
					HX_STACK_LINE(2825)
					::zpp_nape::geom::ZPP_Vec2 v = cx_ite;		HX_STACK_VAR(v,"v");
					HX_STACK_LINE(2825)
					{
						HX_STACK_LINE(2825)
						::zpp_nape::shape::ZPP_Edge e = ite->elt;		HX_STACK_VAR(e,"e");
						HX_STACK_LINE(2825)
						ite = ite->next;
						HX_STACK_LINE(2825)
						{
							HX_STACK_LINE(2825)
							Float tmp28 = (body->axisy * e->lnormx);		HX_STACK_VAR(tmp28,"tmp28");
							HX_STACK_LINE(2825)
							Float tmp29 = (body->axisx * e->lnormy);		HX_STACK_VAR(tmp29,"tmp29");
							HX_STACK_LINE(2825)
							Float tmp30 = (tmp28 - tmp29);		HX_STACK_VAR(tmp30,"tmp30");
							HX_STACK_LINE(2825)
							e->gnormx = tmp30;
							HX_STACK_LINE(2825)
							Float tmp31 = (e->lnormx * body->axisx);		HX_STACK_VAR(tmp31,"tmp31");
							HX_STACK_LINE(2825)
							Float tmp32 = (e->lnormy * body->axisy);		HX_STACK_VAR(tmp32,"tmp32");
							HX_STACK_LINE(2825)
							Float tmp33 = (tmp31 + tmp32);		HX_STACK_VAR(tmp33,"tmp33");
							HX_STACK_LINE(2825)
							e->gnormy = tmp33;
						}
						HX_STACK_LINE(2825)
						Float tmp28 = (body->posx * e->gnormx);		HX_STACK_VAR(tmp28,"tmp28");
						HX_STACK_LINE(2825)
						Float tmp29 = (body->posy * e->gnormy);		HX_STACK_VAR(tmp29,"tmp29");
						HX_STACK_LINE(2825)
						Float tmp30 = (tmp28 + tmp29);		HX_STACK_VAR(tmp30,"tmp30");
						HX_STACK_LINE(2825)
						Float tmp31 = e->lprojection;		HX_STACK_VAR(tmp31,"tmp31");
						HX_STACK_LINE(2825)
						Float tmp32 = (tmp30 + tmp31);		HX_STACK_VAR(tmp32,"tmp32");
						HX_STACK_LINE(2825)
						e->gprojection = tmp32;
						HX_STACK_LINE(2825)
						Float tmp33 = (u->y * e->gnormx);		HX_STACK_VAR(tmp33,"tmp33");
						HX_STACK_LINE(2825)
						Float tmp34 = (u->x * e->gnormy);		HX_STACK_VAR(tmp34,"tmp34");
						HX_STACK_LINE(2825)
						Float tmp35 = (tmp33 - tmp34);		HX_STACK_VAR(tmp35,"tmp35");
						HX_STACK_LINE(2825)
						e->tp0 = tmp35;
						HX_STACK_LINE(2825)
						Float tmp36 = (v->y * e->gnormx);		HX_STACK_VAR(tmp36,"tmp36");
						HX_STACK_LINE(2825)
						Float tmp37 = (v->x * e->gnormy);		HX_STACK_VAR(tmp37,"tmp37");
						HX_STACK_LINE(2825)
						Float tmp38 = (tmp36 - tmp37);		HX_STACK_VAR(tmp38,"tmp38");
						HX_STACK_LINE(2825)
						e->tp1 = tmp38;
					}
					HX_STACK_LINE(2825)
					u = v;
					HX_STACK_LINE(2825)
					cx_ite = cx_ite->next;
				}
				HX_STACK_LINE(2825)
				::zpp_nape::geom::ZPP_Vec2 tmp26 = p->gverts->next;		HX_STACK_VAR(tmp26,"tmp26");
				HX_STACK_LINE(2825)
				::zpp_nape::geom::ZPP_Vec2 v = tmp26;		HX_STACK_VAR(v,"v");
				HX_STACK_LINE(2825)
				{
					HX_STACK_LINE(2825)
					::zpp_nape::shape::ZPP_Edge e = ite->elt;		HX_STACK_VAR(e,"e");
					HX_STACK_LINE(2825)
					ite = ite->next;
					HX_STACK_LINE(2825)
					{
						HX_STACK_LINE(2825)
						Float tmp27 = (body->axisy * e->lnormx);		HX_STACK_VAR(tmp27,"tmp27");
						HX_STACK_LINE(2825)
						Float tmp28 = (body->axisx * e->lnormy);		HX_STACK_VAR(tmp28,"tmp28");
						HX_STACK_LINE(2825)
						Float tmp29 = (tmp27 - tmp28);		HX_STACK_VAR(tmp29,"tmp29");
						HX_STACK_LINE(2825)
						e->gnormx = tmp29;
						HX_STACK_LINE(2825)
						Float tmp30 = (e->lnormx * body->axisx);		HX_STACK_VAR(tmp30,"tmp30");
						HX_STACK_LINE(2825)
						Float tmp31 = (e->lnormy * body->axisy);		HX_STACK_VAR(tmp31,"tmp31");
						HX_STACK_LINE(2825)
						Float tmp32 = (tmp30 + tmp31);		HX_STACK_VAR(tmp32,"tmp32");
						HX_STACK_LINE(2825)
						e->gnormy = tmp32;
					}
					HX_STACK_LINE(2825)
					Float tmp27 = (body->posx * e->gnormx);		HX_STACK_VAR(tmp27,"tmp27");
					HX_STACK_LINE(2825)
					Float tmp28 = (body->posy * e->gnormy);		HX_STACK_VAR(tmp28,"tmp28");
					HX_STACK_LINE(2825)
					Float tmp29 = (tmp27 + tmp28);		HX_STACK_VAR(tmp29,"tmp29");
					HX_STACK_LINE(2825)
					Float tmp30 = e->lprojection;		HX_STACK_VAR(tmp30,"tmp30");
					HX_STACK_LINE(2825)
					Float tmp31 = (tmp29 + tmp30);		HX_STACK_VAR(tmp31,"tmp31");
					HX_STACK_LINE(2825)
					e->gprojection = tmp31;
					HX_STACK_LINE(2825)
					Float tmp32 = (u->y * e->gnormx);		HX_STACK_VAR(tmp32,"tmp32");
					HX_STACK_LINE(2825)
					Float tmp33 = (u->x * e->gnormy);		HX_STACK_VAR(tmp33,"tmp33");
					HX_STACK_LINE(2825)
					Float tmp34 = (tmp32 - tmp33);		HX_STACK_VAR(tmp34,"tmp34");
					HX_STACK_LINE(2825)
					e->tp0 = tmp34;
					HX_STACK_LINE(2825)
					Float tmp35 = (v->y * e->gnormx);		HX_STACK_VAR(tmp35,"tmp35");
					HX_STACK_LINE(2825)
					Float tmp36 = (v->x * e->gnormy);		HX_STACK_VAR(tmp36,"tmp36");
					HX_STACK_LINE(2825)
					Float tmp37 = (tmp35 - tmp36);		HX_STACK_VAR(tmp37,"tmp37");
					HX_STACK_LINE(2825)
					e->tp1 = tmp37;
				}
			}
		}
	}
	HX_STACK_LINE(2826)
	bool tmp20 = (mint <= deltaTime);		HX_STACK_VAR(tmp20,"tmp20");
	HX_STACK_LINE(2826)
	if ((tmp20)){
		HX_STACK_LINE(2827)
		::nape::geom::Vec2 tmp21;		HX_STACK_VAR(tmp21,"tmp21");
		HX_STACK_LINE(2827)
		{
			HX_STACK_LINE(2827)
			Float tmp22 = minAxisx;		HX_STACK_VAR(tmp22,"tmp22");
			HX_STACK_LINE(2827)
			Float tmp23 = -(tmp22);		HX_STACK_VAR(tmp23,"tmp23");
			HX_STACK_LINE(2827)
			Float x = tmp23;		HX_STACK_VAR(x,"x");
			HX_STACK_LINE(2827)
			Float tmp24 = minAxisy;		HX_STACK_VAR(tmp24,"tmp24");
			HX_STACK_LINE(2827)
			Float tmp25 = -(tmp24);		HX_STACK_VAR(tmp25,"tmp25");
			HX_STACK_LINE(2827)
			Float y = tmp25;		HX_STACK_VAR(y,"y");
			HX_STACK_LINE(2827)
			bool weak = false;		HX_STACK_VAR(weak,"weak");
			HX_STACK_LINE(2827)
			bool tmp26 = (x != x);		HX_STACK_VAR(tmp26,"tmp26");
			HX_STACK_LINE(2827)
			bool tmp27 = !(tmp26);		HX_STACK_VAR(tmp27,"tmp27");
			HX_STACK_LINE(2827)
			bool tmp28;		HX_STACK_VAR(tmp28,"tmp28");
			HX_STACK_LINE(2827)
			if ((tmp27)){
				HX_STACK_LINE(2827)
				tmp28 = (y != y);
			}
			else{
				HX_STACK_LINE(2827)
				tmp28 = true;
			}
			HX_STACK_LINE(2827)
			if ((tmp28)){
				HX_STACK_LINE(2827)
				HX_STACK_DO_THROW(HX_HCSTRING("Error: Vec2 components cannot be NaN","\x85","\xba","\xd8","\xc1"));
			}
			HX_STACK_LINE(2827)
			::nape::geom::Vec2 ret;		HX_STACK_VAR(ret,"ret");
			HX_STACK_LINE(2827)
			{
				HX_STACK_LINE(2827)
				::nape::geom::Vec2 tmp29 = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;		HX_STACK_VAR(tmp29,"tmp29");
				HX_STACK_LINE(2827)
				bool tmp30 = (tmp29 == null());		HX_STACK_VAR(tmp30,"tmp30");
				HX_STACK_LINE(2827)
				if ((tmp30)){
					HX_STACK_LINE(2827)
					::nape::geom::Vec2 tmp31 = ::nape::geom::Vec2_obj::__new(null(),null());		HX_STACK_VAR(tmp31,"tmp31");
					HX_STACK_LINE(2827)
					ret = tmp31;
				}
				else{
					HX_STACK_LINE(2827)
					::nape::geom::Vec2 tmp31 = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;		HX_STACK_VAR(tmp31,"tmp31");
					HX_STACK_LINE(2827)
					ret = tmp31;
					HX_STACK_LINE(2827)
					::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
					HX_STACK_LINE(2827)
					ret->zpp_pool = null();
					HX_STACK_LINE(2827)
					ret->zpp_disp = false;
					HX_STACK_LINE(2827)
					::nape::geom::Vec2 tmp32 = ret;		HX_STACK_VAR(tmp32,"tmp32");
					HX_STACK_LINE(2827)
					::nape::geom::Vec2 tmp33 = ::zpp_nape::util::ZPP_PubPool_obj::nextVec2;		HX_STACK_VAR(tmp33,"tmp33");
					HX_STACK_LINE(2827)
					bool tmp34 = (tmp32 == tmp33);		HX_STACK_VAR(tmp34,"tmp34");
					HX_STACK_LINE(2827)
					if ((tmp34)){
						HX_STACK_LINE(2827)
						::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
					}
				}
			}
			HX_STACK_LINE(2827)
			bool tmp29 = (ret->zpp_inner == null());		HX_STACK_VAR(tmp29,"tmp29");
			HX_STACK_LINE(2827)
			if ((tmp29)){
				HX_STACK_LINE(2827)
				::zpp_nape::geom::ZPP_Vec2 tmp30;		HX_STACK_VAR(tmp30,"tmp30");
				HX_STACK_LINE(2827)
				{
					HX_STACK_LINE(2827)
					bool immutable = false;		HX_STACK_VAR(immutable,"immutable");
					HX_STACK_LINE(2827)
					::zpp_nape::geom::ZPP_Vec2 ret1;		HX_STACK_VAR(ret1,"ret1");
					HX_STACK_LINE(2827)
					{
						HX_STACK_LINE(2827)
						::zpp_nape::geom::ZPP_Vec2 tmp31 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;		HX_STACK_VAR(tmp31,"tmp31");
						HX_STACK_LINE(2827)
						bool tmp32 = (tmp31 == null());		HX_STACK_VAR(tmp32,"tmp32");
						HX_STACK_LINE(2827)
						if ((tmp32)){
							HX_STACK_LINE(2827)
							::zpp_nape::geom::ZPP_Vec2 tmp33 = ::zpp_nape::geom::ZPP_Vec2_obj::__new();		HX_STACK_VAR(tmp33,"tmp33");
							HX_STACK_LINE(2827)
							ret1 = tmp33;
						}
						else{
							HX_STACK_LINE(2827)
							::zpp_nape::geom::ZPP_Vec2 tmp33 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;		HX_STACK_VAR(tmp33,"tmp33");
							HX_STACK_LINE(2827)
							ret1 = tmp33;
							HX_STACK_LINE(2827)
							::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
							HX_STACK_LINE(2827)
							ret1->next = null();
						}
						HX_STACK_LINE(2827)
						ret1->weak = false;
					}
					HX_STACK_LINE(2827)
					ret1->_immutable = immutable;
					HX_STACK_LINE(2827)
					{
						HX_STACK_LINE(2827)
						ret1->x = x;
						HX_STACK_LINE(2827)
						ret1->y = y;
						HX_STACK_LINE(2827)
						{
						}
					}
					HX_STACK_LINE(2827)
					tmp30 = ret1;
				}
				HX_STACK_LINE(2827)
				ret->zpp_inner = tmp30;
				HX_STACK_LINE(2827)
				ret->zpp_inner->outer = ret;
			}
			else{
				HX_STACK_LINE(2827)
				{
					HX_STACK_LINE(2827)
					bool tmp30 = (ret != null());		HX_STACK_VAR(tmp30,"tmp30");
					HX_STACK_LINE(2827)
					bool tmp31;		HX_STACK_VAR(tmp31,"tmp31");
					HX_STACK_LINE(2827)
					if ((tmp30)){
						HX_STACK_LINE(2827)
						tmp31 = ret->zpp_disp;
					}
					else{
						HX_STACK_LINE(2827)
						tmp31 = false;
					}
					HX_STACK_LINE(2827)
					if ((tmp31)){
						HX_STACK_LINE(2827)
						::String tmp32 = HX_HCSTRING("Error: Vec2","\xcc","\x3a","\xb6","\x74");		HX_STACK_VAR(tmp32,"tmp32");
						HX_STACK_LINE(2827)
						::String tmp33 = (tmp32 + HX_HCSTRING(" has been disposed and cannot be used!","\x2e","\x07","\xae","\x74"));		HX_STACK_VAR(tmp33,"tmp33");
						HX_STACK_LINE(2827)
						HX_STACK_DO_THROW(tmp33);
					}
				}
				HX_STACK_LINE(2827)
				{
					HX_STACK_LINE(2827)
					::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
					HX_STACK_LINE(2827)
					bool tmp30 = _this->_immutable;		HX_STACK_VAR(tmp30,"tmp30");
					HX_STACK_LINE(2827)
					if ((tmp30)){
						HX_STACK_LINE(2827)
						HX_STACK_DO_THROW(HX_HCSTRING("Error: Vec2 is immutable","\x60","\xee","\x1f","\xbc"));
					}
					HX_STACK_LINE(2827)
					bool tmp31 = (_this->_isimmutable != null());		HX_STACK_VAR(tmp31,"tmp31");
					HX_STACK_LINE(2827)
					if ((tmp31)){
						HX_STACK_LINE(2827)
						_this->_isimmutable();
					}
				}
				HX_STACK_LINE(2827)
				bool tmp30 = (x != x);		HX_STACK_VAR(tmp30,"tmp30");
				HX_STACK_LINE(2827)
				bool tmp31 = !(tmp30);		HX_STACK_VAR(tmp31,"tmp31");
				HX_STACK_LINE(2827)
				bool tmp32;		HX_STACK_VAR(tmp32,"tmp32");
				HX_STACK_LINE(2827)
				if ((tmp31)){
					HX_STACK_LINE(2827)
					tmp32 = (y != y);
				}
				else{
					HX_STACK_LINE(2827)
					tmp32 = true;
				}
				HX_STACK_LINE(2827)
				if ((tmp32)){
					HX_STACK_LINE(2827)
					HX_STACK_DO_THROW(HX_HCSTRING("Error: Vec2 components cannot be NaN","\x85","\xba","\xd8","\xc1"));
				}
				HX_STACK_LINE(2827)
				Float tmp33;		HX_STACK_VAR(tmp33,"tmp33");
				HX_STACK_LINE(2827)
				{
					HX_STACK_LINE(2827)
					{
						HX_STACK_LINE(2827)
						bool tmp34 = (ret != null());		HX_STACK_VAR(tmp34,"tmp34");
						HX_STACK_LINE(2827)
						bool tmp35;		HX_STACK_VAR(tmp35,"tmp35");
						HX_STACK_LINE(2827)
						if ((tmp34)){
							HX_STACK_LINE(2827)
							tmp35 = ret->zpp_disp;
						}
						else{
							HX_STACK_LINE(2827)
							tmp35 = false;
						}
						HX_STACK_LINE(2827)
						if ((tmp35)){
							HX_STACK_LINE(2827)
							::String tmp36 = HX_HCSTRING("Error: Vec2","\xcc","\x3a","\xb6","\x74");		HX_STACK_VAR(tmp36,"tmp36");
							HX_STACK_LINE(2827)
							::String tmp37 = (tmp36 + HX_HCSTRING(" has been disposed and cannot be used!","\x2e","\x07","\xae","\x74"));		HX_STACK_VAR(tmp37,"tmp37");
							HX_STACK_LINE(2827)
							HX_STACK_DO_THROW(tmp37);
						}
					}
					HX_STACK_LINE(2827)
					{
						HX_STACK_LINE(2827)
						::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
						HX_STACK_LINE(2827)
						bool tmp34 = (_this->_validate != null());		HX_STACK_VAR(tmp34,"tmp34");
						HX_STACK_LINE(2827)
						if ((tmp34)){
							HX_STACK_LINE(2827)
							_this->_validate();
						}
					}
					HX_STACK_LINE(2827)
					tmp33 = ret->zpp_inner->x;
				}
				HX_STACK_LINE(2827)
				Float tmp34 = x;		HX_STACK_VAR(tmp34,"tmp34");
				HX_STACK_LINE(2827)
				bool tmp35 = (tmp33 == tmp34);		HX_STACK_VAR(tmp35,"tmp35");
				HX_STACK_LINE(2827)
				bool tmp36;		HX_STACK_VAR(tmp36,"tmp36");
				HX_STACK_LINE(2827)
				if ((tmp35)){
					HX_STACK_LINE(2827)
					Float tmp37;		HX_STACK_VAR(tmp37,"tmp37");
					HX_STACK_LINE(2827)
					{
						HX_STACK_LINE(2827)
						{
							HX_STACK_LINE(2827)
							bool tmp38 = (ret != null());		HX_STACK_VAR(tmp38,"tmp38");
							HX_STACK_LINE(2827)
							bool tmp39 = tmp38;		HX_STACK_VAR(tmp39,"tmp39");
							HX_STACK_LINE(2827)
							bool tmp40;		HX_STACK_VAR(tmp40,"tmp40");
							HX_STACK_LINE(2827)
							bool tmp41 = tmp39;		HX_STACK_VAR(tmp41,"tmp41");
							HX_STACK_LINE(2827)
							if ((tmp41)){
								HX_STACK_LINE(2827)
								tmp40 = ret->zpp_disp;
							}
							else{
								HX_STACK_LINE(2827)
								tmp40 = false;
							}
							HX_STACK_LINE(2827)
							bool tmp42 = tmp40;		HX_STACK_VAR(tmp42,"tmp42");
							HX_STACK_LINE(2827)
							if ((tmp42)){
								HX_STACK_LINE(2827)
								::String tmp43 = HX_HCSTRING("Error: Vec2","\xcc","\x3a","\xb6","\x74");		HX_STACK_VAR(tmp43,"tmp43");
								HX_STACK_LINE(2827)
								::String tmp44 = tmp43;		HX_STACK_VAR(tmp44,"tmp44");
								HX_STACK_LINE(2827)
								::String tmp45 = (tmp44 + HX_HCSTRING(" has been disposed and cannot be used!","\x2e","\x07","\xae","\x74"));		HX_STACK_VAR(tmp45,"tmp45");
								HX_STACK_LINE(2827)
								::String tmp46 = tmp45;		HX_STACK_VAR(tmp46,"tmp46");
								HX_STACK_LINE(2827)
								::String tmp47 = tmp46;		HX_STACK_VAR(tmp47,"tmp47");
								HX_STACK_LINE(2827)
								HX_STACK_DO_THROW(tmp47);
							}
						}
						HX_STACK_LINE(2827)
						{
							HX_STACK_LINE(2827)
							::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(2827)
							bool tmp38 = (_this->_validate != null());		HX_STACK_VAR(tmp38,"tmp38");
							HX_STACK_LINE(2827)
							bool tmp39 = tmp38;		HX_STACK_VAR(tmp39,"tmp39");
							HX_STACK_LINE(2827)
							bool tmp40 = tmp39;		HX_STACK_VAR(tmp40,"tmp40");
							HX_STACK_LINE(2827)
							if ((tmp40)){
								HX_STACK_LINE(2827)
								_this->_validate();
							}
						}
						HX_STACK_LINE(2827)
						Float tmp38 = ret->zpp_inner->y;		HX_STACK_VAR(tmp38,"tmp38");
						HX_STACK_LINE(2827)
						tmp37 = tmp38;
					}
					HX_STACK_LINE(2827)
					Float tmp38 = y;		HX_STACK_VAR(tmp38,"tmp38");
					HX_STACK_LINE(2827)
					tmp36 = (tmp37 == tmp38);
				}
				else{
					HX_STACK_LINE(2827)
					tmp36 = false;
				}
				HX_STACK_LINE(2827)
				bool tmp37 = !(tmp36);		HX_STACK_VAR(tmp37,"tmp37");
				HX_STACK_LINE(2827)
				if ((tmp37)){
					HX_STACK_LINE(2827)
					{
						HX_STACK_LINE(2827)
						ret->zpp_inner->x = x;
						HX_STACK_LINE(2827)
						ret->zpp_inner->y = y;
						HX_STACK_LINE(2827)
						{
						}
					}
					HX_STACK_LINE(2827)
					{
						HX_STACK_LINE(2827)
						::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
						HX_STACK_LINE(2827)
						bool tmp38 = (_this->_invalidate != null());		HX_STACK_VAR(tmp38,"tmp38");
						HX_STACK_LINE(2827)
						if ((tmp38)){
							HX_STACK_LINE(2827)
							::zpp_nape::geom::ZPP_Vec2 tmp39 = _this;		HX_STACK_VAR(tmp39,"tmp39");
							HX_STACK_LINE(2827)
							_this->_invalidate(tmp39);
						}
					}
				}
				HX_STACK_LINE(2827)
				ret;
			}
			HX_STACK_LINE(2827)
			ret->zpp_inner->weak = weak;
			HX_STACK_LINE(2827)
			tmp21 = ret;
		}
		HX_STACK_LINE(2827)
		::nape::geom::Vec2 tmp22;		HX_STACK_VAR(tmp22,"tmp22");
		HX_STACK_LINE(2827)
		{
			HX_STACK_LINE(2827)
			bool weak = false;		HX_STACK_VAR(weak,"weak");
			HX_STACK_LINE(2827)
			bool tmp23 = (minPosx != minPosx);		HX_STACK_VAR(tmp23,"tmp23");
			HX_STACK_LINE(2827)
			bool tmp24 = !(tmp23);		HX_STACK_VAR(tmp24,"tmp24");
			HX_STACK_LINE(2827)
			bool tmp25;		HX_STACK_VAR(tmp25,"tmp25");
			HX_STACK_LINE(2827)
			if ((tmp24)){
				HX_STACK_LINE(2827)
				tmp25 = (minPosy != minPosy);
			}
			else{
				HX_STACK_LINE(2827)
				tmp25 = true;
			}
			HX_STACK_LINE(2827)
			if ((tmp25)){
				HX_STACK_LINE(2827)
				HX_STACK_DO_THROW(HX_HCSTRING("Error: Vec2 components cannot be NaN","\x85","\xba","\xd8","\xc1"));
			}
			HX_STACK_LINE(2827)
			::nape::geom::Vec2 ret;		HX_STACK_VAR(ret,"ret");
			HX_STACK_LINE(2827)
			{
				HX_STACK_LINE(2827)
				::nape::geom::Vec2 tmp26 = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;		HX_STACK_VAR(tmp26,"tmp26");
				HX_STACK_LINE(2827)
				bool tmp27 = (tmp26 == null());		HX_STACK_VAR(tmp27,"tmp27");
				HX_STACK_LINE(2827)
				if ((tmp27)){
					HX_STACK_LINE(2827)
					::nape::geom::Vec2 tmp28 = ::nape::geom::Vec2_obj::__new(null(),null());		HX_STACK_VAR(tmp28,"tmp28");
					HX_STACK_LINE(2827)
					ret = tmp28;
				}
				else{
					HX_STACK_LINE(2827)
					::nape::geom::Vec2 tmp28 = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;		HX_STACK_VAR(tmp28,"tmp28");
					HX_STACK_LINE(2827)
					ret = tmp28;
					HX_STACK_LINE(2827)
					::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
					HX_STACK_LINE(2827)
					ret->zpp_pool = null();
					HX_STACK_LINE(2827)
					ret->zpp_disp = false;
					HX_STACK_LINE(2827)
					::nape::geom::Vec2 tmp29 = ret;		HX_STACK_VAR(tmp29,"tmp29");
					HX_STACK_LINE(2827)
					::nape::geom::Vec2 tmp30 = ::zpp_nape::util::ZPP_PubPool_obj::nextVec2;		HX_STACK_VAR(tmp30,"tmp30");
					HX_STACK_LINE(2827)
					bool tmp31 = (tmp29 == tmp30);		HX_STACK_VAR(tmp31,"tmp31");
					HX_STACK_LINE(2827)
					if ((tmp31)){
						HX_STACK_LINE(2827)
						::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
					}
				}
			}
			HX_STACK_LINE(2827)
			bool tmp26 = (ret->zpp_inner == null());		HX_STACK_VAR(tmp26,"tmp26");
			HX_STACK_LINE(2827)
			if ((tmp26)){
				HX_STACK_LINE(2827)
				::zpp_nape::geom::ZPP_Vec2 tmp27;		HX_STACK_VAR(tmp27,"tmp27");
				HX_STACK_LINE(2827)
				{
					HX_STACK_LINE(2827)
					bool immutable = false;		HX_STACK_VAR(immutable,"immutable");
					HX_STACK_LINE(2827)
					::zpp_nape::geom::ZPP_Vec2 ret1;		HX_STACK_VAR(ret1,"ret1");
					HX_STACK_LINE(2827)
					{
						HX_STACK_LINE(2827)
						::zpp_nape::geom::ZPP_Vec2 tmp28 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;		HX_STACK_VAR(tmp28,"tmp28");
						HX_STACK_LINE(2827)
						bool tmp29 = (tmp28 == null());		HX_STACK_VAR(tmp29,"tmp29");
						HX_STACK_LINE(2827)
						if ((tmp29)){
							HX_STACK_LINE(2827)
							::zpp_nape::geom::ZPP_Vec2 tmp30 = ::zpp_nape::geom::ZPP_Vec2_obj::__new();		HX_STACK_VAR(tmp30,"tmp30");
							HX_STACK_LINE(2827)
							ret1 = tmp30;
						}
						else{
							HX_STACK_LINE(2827)
							::zpp_nape::geom::ZPP_Vec2 tmp30 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;		HX_STACK_VAR(tmp30,"tmp30");
							HX_STACK_LINE(2827)
							ret1 = tmp30;
							HX_STACK_LINE(2827)
							::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
							HX_STACK_LINE(2827)
							ret1->next = null();
						}
						HX_STACK_LINE(2827)
						ret1->weak = false;
					}
					HX_STACK_LINE(2827)
					ret1->_immutable = immutable;
					HX_STACK_LINE(2827)
					{
						HX_STACK_LINE(2827)
						ret1->x = minPosx;
						HX_STACK_LINE(2827)
						ret1->y = minPosy;
						HX_STACK_LINE(2827)
						{
						}
					}
					HX_STACK_LINE(2827)
					tmp27 = ret1;
				}
				HX_STACK_LINE(2827)
				ret->zpp_inner = tmp27;
				HX_STACK_LINE(2827)
				ret->zpp_inner->outer = ret;
			}
			else{
				HX_STACK_LINE(2827)
				{
					HX_STACK_LINE(2827)
					bool tmp27 = (ret != null());		HX_STACK_VAR(tmp27,"tmp27");
					HX_STACK_LINE(2827)
					bool tmp28;		HX_STACK_VAR(tmp28,"tmp28");
					HX_STACK_LINE(2827)
					if ((tmp27)){
						HX_STACK_LINE(2827)
						tmp28 = ret->zpp_disp;
					}
					else{
						HX_STACK_LINE(2827)
						tmp28 = false;
					}
					HX_STACK_LINE(2827)
					if ((tmp28)){
						HX_STACK_LINE(2827)
						::String tmp29 = HX_HCSTRING("Error: Vec2","\xcc","\x3a","\xb6","\x74");		HX_STACK_VAR(tmp29,"tmp29");
						HX_STACK_LINE(2827)
						::String tmp30 = (tmp29 + HX_HCSTRING(" has been disposed and cannot be used!","\x2e","\x07","\xae","\x74"));		HX_STACK_VAR(tmp30,"tmp30");
						HX_STACK_LINE(2827)
						HX_STACK_DO_THROW(tmp30);
					}
				}
				HX_STACK_LINE(2827)
				{
					HX_STACK_LINE(2827)
					::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
					HX_STACK_LINE(2827)
					bool tmp27 = _this->_immutable;		HX_STACK_VAR(tmp27,"tmp27");
					HX_STACK_LINE(2827)
					if ((tmp27)){
						HX_STACK_LINE(2827)
						HX_STACK_DO_THROW(HX_HCSTRING("Error: Vec2 is immutable","\x60","\xee","\x1f","\xbc"));
					}
					HX_STACK_LINE(2827)
					bool tmp28 = (_this->_isimmutable != null());		HX_STACK_VAR(tmp28,"tmp28");
					HX_STACK_LINE(2827)
					if ((tmp28)){
						HX_STACK_LINE(2827)
						_this->_isimmutable();
					}
				}
				HX_STACK_LINE(2827)
				bool tmp27 = (minPosx != minPosx);		HX_STACK_VAR(tmp27,"tmp27");
				HX_STACK_LINE(2827)
				bool tmp28 = !(tmp27);		HX_STACK_VAR(tmp28,"tmp28");
				HX_STACK_LINE(2827)
				bool tmp29;		HX_STACK_VAR(tmp29,"tmp29");
				HX_STACK_LINE(2827)
				if ((tmp28)){
					HX_STACK_LINE(2827)
					tmp29 = (minPosy != minPosy);
				}
				else{
					HX_STACK_LINE(2827)
					tmp29 = true;
				}
				HX_STACK_LINE(2827)
				if ((tmp29)){
					HX_STACK_LINE(2827)
					HX_STACK_DO_THROW(HX_HCSTRING("Error: Vec2 components cannot be NaN","\x85","\xba","\xd8","\xc1"));
				}
				HX_STACK_LINE(2827)
				Float tmp30;		HX_STACK_VAR(tmp30,"tmp30");
				HX_STACK_LINE(2827)
				{
					HX_STACK_LINE(2827)
					{
						HX_STACK_LINE(2827)
						bool tmp31 = (ret != null());		HX_STACK_VAR(tmp31,"tmp31");
						HX_STACK_LINE(2827)
						bool tmp32;		HX_STACK_VAR(tmp32,"tmp32");
						HX_STACK_LINE(2827)
						if ((tmp31)){
							HX_STACK_LINE(2827)
							tmp32 = ret->zpp_disp;
						}
						else{
							HX_STACK_LINE(2827)
							tmp32 = false;
						}
						HX_STACK_LINE(2827)
						if ((tmp32)){
							HX_STACK_LINE(2827)
							::String tmp33 = HX_HCSTRING("Error: Vec2","\xcc","\x3a","\xb6","\x74");		HX_STACK_VAR(tmp33,"tmp33");
							HX_STACK_LINE(2827)
							::String tmp34 = (tmp33 + HX_HCSTRING(" has been disposed and cannot be used!","\x2e","\x07","\xae","\x74"));		HX_STACK_VAR(tmp34,"tmp34");
							HX_STACK_LINE(2827)
							HX_STACK_DO_THROW(tmp34);
						}
					}
					HX_STACK_LINE(2827)
					{
						HX_STACK_LINE(2827)
						::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
						HX_STACK_LINE(2827)
						bool tmp31 = (_this->_validate != null());		HX_STACK_VAR(tmp31,"tmp31");
						HX_STACK_LINE(2827)
						if ((tmp31)){
							HX_STACK_LINE(2827)
							_this->_validate();
						}
					}
					HX_STACK_LINE(2827)
					tmp30 = ret->zpp_inner->x;
				}
				HX_STACK_LINE(2827)
				Float tmp31 = minPosx;		HX_STACK_VAR(tmp31,"tmp31");
				HX_STACK_LINE(2827)
				bool tmp32 = (tmp30 == tmp31);		HX_STACK_VAR(tmp32,"tmp32");
				HX_STACK_LINE(2827)
				bool tmp33;		HX_STACK_VAR(tmp33,"tmp33");
				HX_STACK_LINE(2827)
				if ((tmp32)){
					HX_STACK_LINE(2827)
					Float tmp34;		HX_STACK_VAR(tmp34,"tmp34");
					HX_STACK_LINE(2827)
					{
						HX_STACK_LINE(2827)
						{
							HX_STACK_LINE(2827)
							bool tmp35 = (ret != null());		HX_STACK_VAR(tmp35,"tmp35");
							HX_STACK_LINE(2827)
							bool tmp36 = tmp35;		HX_STACK_VAR(tmp36,"tmp36");
							HX_STACK_LINE(2827)
							bool tmp37;		HX_STACK_VAR(tmp37,"tmp37");
							HX_STACK_LINE(2827)
							bool tmp38 = tmp36;		HX_STACK_VAR(tmp38,"tmp38");
							HX_STACK_LINE(2827)
							if ((tmp38)){
								HX_STACK_LINE(2827)
								tmp37 = ret->zpp_disp;
							}
							else{
								HX_STACK_LINE(2827)
								tmp37 = false;
							}
							HX_STACK_LINE(2827)
							bool tmp39 = tmp37;		HX_STACK_VAR(tmp39,"tmp39");
							HX_STACK_LINE(2827)
							if ((tmp39)){
								HX_STACK_LINE(2827)
								::String tmp40 = HX_HCSTRING("Error: Vec2","\xcc","\x3a","\xb6","\x74");		HX_STACK_VAR(tmp40,"tmp40");
								HX_STACK_LINE(2827)
								::String tmp41 = tmp40;		HX_STACK_VAR(tmp41,"tmp41");
								HX_STACK_LINE(2827)
								::String tmp42 = (tmp41 + HX_HCSTRING(" has been disposed and cannot be used!","\x2e","\x07","\xae","\x74"));		HX_STACK_VAR(tmp42,"tmp42");
								HX_STACK_LINE(2827)
								::String tmp43 = tmp42;		HX_STACK_VAR(tmp43,"tmp43");
								HX_STACK_LINE(2827)
								::String tmp44 = tmp43;		HX_STACK_VAR(tmp44,"tmp44");
								HX_STACK_LINE(2827)
								HX_STACK_DO_THROW(tmp44);
							}
						}
						HX_STACK_LINE(2827)
						{
							HX_STACK_LINE(2827)
							::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(2827)
							bool tmp35 = (_this->_validate != null());		HX_STACK_VAR(tmp35,"tmp35");
							HX_STACK_LINE(2827)
							bool tmp36 = tmp35;		HX_STACK_VAR(tmp36,"tmp36");
							HX_STACK_LINE(2827)
							bool tmp37 = tmp36;		HX_STACK_VAR(tmp37,"tmp37");
							HX_STACK_LINE(2827)
							if ((tmp37)){
								HX_STACK_LINE(2827)
								_this->_validate();
							}
						}
						HX_STACK_LINE(2827)
						Float tmp35 = ret->zpp_inner->y;		HX_STACK_VAR(tmp35,"tmp35");
						HX_STACK_LINE(2827)
						tmp34 = tmp35;
					}
					HX_STACK_LINE(2827)
					Float tmp35 = minPosy;		HX_STACK_VAR(tmp35,"tmp35");
					HX_STACK_LINE(2827)
					tmp33 = (tmp34 == tmp35);
				}
				else{
					HX_STACK_LINE(2827)
					tmp33 = false;
				}
				HX_STACK_LINE(2827)
				bool tmp34 = !(tmp33);		HX_STACK_VAR(tmp34,"tmp34");
				HX_STACK_LINE(2827)
				if ((tmp34)){
					HX_STACK_LINE(2827)
					{
						HX_STACK_LINE(2827)
						ret->zpp_inner->x = minPosx;
						HX_STACK_LINE(2827)
						ret->zpp_inner->y = minPosy;
						HX_STACK_LINE(2827)
						{
						}
					}
					HX_STACK_LINE(2827)
					{
						HX_STACK_LINE(2827)
						::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
						HX_STACK_LINE(2827)
						bool tmp35 = (_this->_invalidate != null());		HX_STACK_VAR(tmp35,"tmp35");
						HX_STACK_LINE(2827)
						if ((tmp35)){
							HX_STACK_LINE(2827)
							::zpp_nape::geom::ZPP_Vec2 tmp36 = _this;		HX_STACK_VAR(tmp36,"tmp36");
							HX_STACK_LINE(2827)
							_this->_invalidate(tmp36);
						}
					}
				}
				HX_STACK_LINE(2827)
				ret;
			}
			HX_STACK_LINE(2827)
			ret->zpp_inner->weak = weak;
			HX_STACK_LINE(2827)
			tmp22 = ret;
		}
		HX_STACK_LINE(2827)
		Float tmp23 = mint;		HX_STACK_VAR(tmp23,"tmp23");
		HX_STACK_LINE(2827)
		::nape::shape::Shape tmp24 = mins;		HX_STACK_VAR(tmp24,"tmp24");
		HX_STACK_LINE(2827)
		::nape::geom::ConvexResult tmp25 = ::zpp_nape::geom::ZPP_ConvexRayResult_obj::getConvex(tmp21,tmp22,tmp23,tmp24);		HX_STACK_VAR(tmp25,"tmp25");
		HX_STACK_LINE(2827)
		return tmp25;
	}
	else{
		HX_STACK_LINE(2829)
		return null();
	}
	HX_STACK_LINE(2826)
	return null();
}


HX_DEFINE_DYNAMIC_FUNC4(ZPP_Space_obj,convexCast,return )

Void ZPP_Space_obj::prepareCast( ::zpp_nape::shape::ZPP_Shape s){
{
		HX_STACK_FRAME("zpp_nape.space.ZPP_Space","prepareCast",0x89217030,"zpp_nape.space.ZPP_Space.prepareCast","zpp_nape/space/Space.hx",2833,0x2b65ed03)
		HX_STACK_THIS(this)
		HX_STACK_ARG(s,"s")
		HX_STACK_LINE(2834)
		int tmp = s->type;		HX_STACK_VAR(tmp,"tmp");
		HX_STACK_LINE(2834)
		int tmp1 = ::zpp_nape::util::ZPP_Flags_obj::id_ShapeType_CIRCLE;		HX_STACK_VAR(tmp1,"tmp1");
		HX_STACK_LINE(2834)
		bool tmp2 = (tmp == tmp1);		HX_STACK_VAR(tmp2,"tmp2");
		HX_STACK_LINE(2834)
		if ((tmp2)){
			HX_STACK_LINE(2834)
			::zpp_nape::shape::ZPP_Circle _this = s->circle;		HX_STACK_VAR(_this,"_this");
			HX_STACK_LINE(2834)
			bool tmp3 = _this->zip_worldCOM;		HX_STACK_VAR(tmp3,"tmp3");
			HX_STACK_LINE(2834)
			if ((tmp3)){
				HX_STACK_LINE(2834)
				bool tmp4 = (_this->body != null());		HX_STACK_VAR(tmp4,"tmp4");
				HX_STACK_LINE(2834)
				if ((tmp4)){
					HX_STACK_LINE(2834)
					_this->zip_worldCOM = false;
					HX_STACK_LINE(2834)
					{
						HX_STACK_LINE(2834)
						bool tmp5 = _this->zip_localCOM;		HX_STACK_VAR(tmp5,"tmp5");
						HX_STACK_LINE(2834)
						if ((tmp5)){
							HX_STACK_LINE(2834)
							_this->zip_localCOM = false;
							HX_STACK_LINE(2834)
							int tmp6 = _this->type;		HX_STACK_VAR(tmp6,"tmp6");
							HX_STACK_LINE(2834)
							int tmp7 = ::zpp_nape::util::ZPP_Flags_obj::id_ShapeType_POLYGON;		HX_STACK_VAR(tmp7,"tmp7");
							HX_STACK_LINE(2834)
							bool tmp8 = (tmp6 == tmp7);		HX_STACK_VAR(tmp8,"tmp8");
							HX_STACK_LINE(2834)
							if ((tmp8)){
								HX_STACK_LINE(2834)
								::zpp_nape::shape::ZPP_Polygon _this1 = _this->polygon;		HX_STACK_VAR(_this1,"_this1");
								HX_STACK_LINE(2834)
								::zpp_nape::geom::ZPP_Vec2 tmp9 = _this1->lverts->next;		HX_STACK_VAR(tmp9,"tmp9");
								HX_STACK_LINE(2834)
								bool tmp10 = (tmp9 == null());		HX_STACK_VAR(tmp10,"tmp10");
								HX_STACK_LINE(2834)
								if ((tmp10)){
									HX_STACK_LINE(2834)
									HX_STACK_DO_THROW(HX_HCSTRING("Error: An empty polygon has no meaningful localCOM","\x3b","\x8d","\x96","\xf3"));
								}
								HX_STACK_LINE(2834)
								::zpp_nape::geom::ZPP_Vec2 tmp11 = _this1->lverts->next;		HX_STACK_VAR(tmp11,"tmp11");
								HX_STACK_LINE(2834)
								::zpp_nape::geom::ZPP_Vec2 tmp12 = tmp11->next;		HX_STACK_VAR(tmp12,"tmp12");
								HX_STACK_LINE(2834)
								bool tmp13 = (tmp12 == null());		HX_STACK_VAR(tmp13,"tmp13");
								HX_STACK_LINE(2834)
								if ((tmp13)){
									HX_STACK_LINE(2834)
									::zpp_nape::geom::ZPP_Vec2 tmp14 = _this1->lverts->next;		HX_STACK_VAR(tmp14,"tmp14");
									HX_STACK_LINE(2834)
									_this1->localCOMx = tmp14->x;
									HX_STACK_LINE(2834)
									::zpp_nape::geom::ZPP_Vec2 tmp15 = _this1->lverts->next;		HX_STACK_VAR(tmp15,"tmp15");
									HX_STACK_LINE(2834)
									_this1->localCOMy = tmp15->y;
									HX_STACK_LINE(2834)
									Dynamic();
								}
								else{
									HX_STACK_LINE(2834)
									::zpp_nape::geom::ZPP_Vec2 tmp14 = _this1->lverts->next;		HX_STACK_VAR(tmp14,"tmp14");
									HX_STACK_LINE(2834)
									::zpp_nape::geom::ZPP_Vec2 tmp15 = tmp14->next->next;		HX_STACK_VAR(tmp15,"tmp15");
									HX_STACK_LINE(2834)
									bool tmp16 = (tmp15 == null());		HX_STACK_VAR(tmp16,"tmp16");
									HX_STACK_LINE(2834)
									if ((tmp16)){
										HX_STACK_LINE(2834)
										{
											HX_STACK_LINE(2834)
											::zpp_nape::geom::ZPP_Vec2 tmp17 = _this1->lverts->next;		HX_STACK_VAR(tmp17,"tmp17");
											HX_STACK_LINE(2834)
											_this1->localCOMx = tmp17->x;
											HX_STACK_LINE(2834)
											::zpp_nape::geom::ZPP_Vec2 tmp18 = _this1->lverts->next;		HX_STACK_VAR(tmp18,"tmp18");
											HX_STACK_LINE(2834)
											_this1->localCOMy = tmp18->y;
											HX_STACK_LINE(2834)
											{
											}
										}
										HX_STACK_LINE(2834)
										{
											HX_STACK_LINE(2834)
											Float t = ((Float)1.0);		HX_STACK_VAR(t,"t");
											HX_STACK_LINE(2834)
											::zpp_nape::geom::ZPP_Vec2 tmp17 = _this1->lverts->next;		HX_STACK_VAR(tmp17,"tmp17");
											HX_STACK_LINE(2834)
											Float tmp18 = tmp17->next->x;		HX_STACK_VAR(tmp18,"tmp18");
											HX_STACK_LINE(2834)
											Float tmp19 = t;		HX_STACK_VAR(tmp19,"tmp19");
											HX_STACK_LINE(2834)
											Float tmp20 = (tmp18 * tmp19);		HX_STACK_VAR(tmp20,"tmp20");
											HX_STACK_LINE(2834)
											hx::AddEq(_this1->localCOMx,tmp20);
											HX_STACK_LINE(2834)
											::zpp_nape::geom::ZPP_Vec2 tmp21 = _this1->lverts->next;		HX_STACK_VAR(tmp21,"tmp21");
											HX_STACK_LINE(2834)
											Float tmp22 = tmp21->next->y;		HX_STACK_VAR(tmp22,"tmp22");
											HX_STACK_LINE(2834)
											Float tmp23 = t;		HX_STACK_VAR(tmp23,"tmp23");
											HX_STACK_LINE(2834)
											Float tmp24 = (tmp22 * tmp23);		HX_STACK_VAR(tmp24,"tmp24");
											HX_STACK_LINE(2834)
											hx::AddEq(_this1->localCOMy,tmp24);
										}
										HX_STACK_LINE(2834)
										{
											HX_STACK_LINE(2834)
											Float t = ((Float)0.5);		HX_STACK_VAR(t,"t");
											HX_STACK_LINE(2834)
											hx::MultEq(_this1->localCOMx,t);
											HX_STACK_LINE(2834)
											hx::MultEq(_this1->localCOMy,t);
										}
									}
									else{
										HX_STACK_LINE(2834)
										{
											HX_STACK_LINE(2834)
											_this1->localCOMx = (int)0;
											HX_STACK_LINE(2834)
											_this1->localCOMy = (int)0;
											HX_STACK_LINE(2834)
											{
											}
										}
										HX_STACK_LINE(2834)
										Float area = ((Float)0.0);		HX_STACK_VAR(area,"area");
										HX_STACK_LINE(2834)
										{
											HX_STACK_LINE(2834)
											::zpp_nape::geom::ZPP_Vec2 tmp17 = _this1->lverts->next;		HX_STACK_VAR(tmp17,"tmp17");
											HX_STACK_LINE(2834)
											::zpp_nape::geom::ZPP_Vec2 cx_ite = tmp17;		HX_STACK_VAR(cx_ite,"cx_ite");
											HX_STACK_LINE(2834)
											::zpp_nape::geom::ZPP_Vec2 u = cx_ite;		HX_STACK_VAR(u,"u");
											HX_STACK_LINE(2834)
											cx_ite = cx_ite->next;
											HX_STACK_LINE(2834)
											::zpp_nape::geom::ZPP_Vec2 v = cx_ite;		HX_STACK_VAR(v,"v");
											HX_STACK_LINE(2834)
											cx_ite = cx_ite->next;
											HX_STACK_LINE(2834)
											while((true)){
												HX_STACK_LINE(2834)
												bool tmp18 = (cx_ite != null());		HX_STACK_VAR(tmp18,"tmp18");
												HX_STACK_LINE(2834)
												bool tmp19 = !(tmp18);		HX_STACK_VAR(tmp19,"tmp19");
												HX_STACK_LINE(2834)
												if ((tmp19)){
													HX_STACK_LINE(2834)
													break;
												}
												HX_STACK_LINE(2834)
												::zpp_nape::geom::ZPP_Vec2 w = cx_ite;		HX_STACK_VAR(w,"w");
												HX_STACK_LINE(2834)
												{
													HX_STACK_LINE(2834)
													Float tmp20 = v->x;		HX_STACK_VAR(tmp20,"tmp20");
													HX_STACK_LINE(2834)
													Float tmp21 = (w->y - u->y);		HX_STACK_VAR(tmp21,"tmp21");
													HX_STACK_LINE(2834)
													Float tmp22 = (tmp20 * tmp21);		HX_STACK_VAR(tmp22,"tmp22");
													HX_STACK_LINE(2834)
													hx::AddEq(area,tmp22);
													HX_STACK_LINE(2834)
													Float tmp23 = (w->y * v->x);		HX_STACK_VAR(tmp23,"tmp23");
													HX_STACK_LINE(2834)
													Float tmp24 = (w->x * v->y);		HX_STACK_VAR(tmp24,"tmp24");
													HX_STACK_LINE(2834)
													Float tmp25 = (tmp23 - tmp24);		HX_STACK_VAR(tmp25,"tmp25");
													HX_STACK_LINE(2834)
													Float cf = tmp25;		HX_STACK_VAR(cf,"cf");
													HX_STACK_LINE(2834)
													Float tmp26 = (v->x + w->x);		HX_STACK_VAR(tmp26,"tmp26");
													HX_STACK_LINE(2834)
													Float tmp27 = cf;		HX_STACK_VAR(tmp27,"tmp27");
													HX_STACK_LINE(2834)
													Float tmp28 = (tmp26 * tmp27);		HX_STACK_VAR(tmp28,"tmp28");
													HX_STACK_LINE(2834)
													hx::AddEq(_this1->localCOMx,tmp28);
													HX_STACK_LINE(2834)
													Float tmp29 = (v->y + w->y);		HX_STACK_VAR(tmp29,"tmp29");
													HX_STACK_LINE(2834)
													Float tmp30 = cf;		HX_STACK_VAR(tmp30,"tmp30");
													HX_STACK_LINE(2834)
													Float tmp31 = (tmp29 * tmp30);		HX_STACK_VAR(tmp31,"tmp31");
													HX_STACK_LINE(2834)
													hx::AddEq(_this1->localCOMy,tmp31);
												}
												HX_STACK_LINE(2834)
												u = v;
												HX_STACK_LINE(2834)
												v = w;
												HX_STACK_LINE(2834)
												cx_ite = cx_ite->next;
											}
											HX_STACK_LINE(2834)
											::zpp_nape::geom::ZPP_Vec2 tmp18 = _this1->lverts->next;		HX_STACK_VAR(tmp18,"tmp18");
											HX_STACK_LINE(2834)
											cx_ite = tmp18;
											HX_STACK_LINE(2834)
											::zpp_nape::geom::ZPP_Vec2 w = cx_ite;		HX_STACK_VAR(w,"w");
											HX_STACK_LINE(2834)
											{
												HX_STACK_LINE(2834)
												Float tmp19 = v->x;		HX_STACK_VAR(tmp19,"tmp19");
												HX_STACK_LINE(2834)
												Float tmp20 = (w->y - u->y);		HX_STACK_VAR(tmp20,"tmp20");
												HX_STACK_LINE(2834)
												Float tmp21 = (tmp19 * tmp20);		HX_STACK_VAR(tmp21,"tmp21");
												HX_STACK_LINE(2834)
												hx::AddEq(area,tmp21);
												HX_STACK_LINE(2834)
												Float tmp22 = (w->y * v->x);		HX_STACK_VAR(tmp22,"tmp22");
												HX_STACK_LINE(2834)
												Float tmp23 = (w->x * v->y);		HX_STACK_VAR(tmp23,"tmp23");
												HX_STACK_LINE(2834)
												Float tmp24 = (tmp22 - tmp23);		HX_STACK_VAR(tmp24,"tmp24");
												HX_STACK_LINE(2834)
												Float cf = tmp24;		HX_STACK_VAR(cf,"cf");
												HX_STACK_LINE(2834)
												Float tmp25 = (v->x + w->x);		HX_STACK_VAR(tmp25,"tmp25");
												HX_STACK_LINE(2834)
												Float tmp26 = cf;		HX_STACK_VAR(tmp26,"tmp26");
												HX_STACK_LINE(2834)
												Float tmp27 = (tmp25 * tmp26);		HX_STACK_VAR(tmp27,"tmp27");
												HX_STACK_LINE(2834)
												hx::AddEq(_this1->localCOMx,tmp27);
												HX_STACK_LINE(2834)
												Float tmp28 = (v->y + w->y);		HX_STACK_VAR(tmp28,"tmp28");
												HX_STACK_LINE(2834)
												Float tmp29 = cf;		HX_STACK_VAR(tmp29,"tmp29");
												HX_STACK_LINE(2834)
												Float tmp30 = (tmp28 * tmp29);		HX_STACK_VAR(tmp30,"tmp30");
												HX_STACK_LINE(2834)
												hx::AddEq(_this1->localCOMy,tmp30);
											}
											HX_STACK_LINE(2834)
											u = v;
											HX_STACK_LINE(2834)
											v = w;
											HX_STACK_LINE(2834)
											cx_ite = cx_ite->next;
											HX_STACK_LINE(2834)
											::zpp_nape::geom::ZPP_Vec2 w1 = cx_ite;		HX_STACK_VAR(w1,"w1");
											HX_STACK_LINE(2834)
											{
												HX_STACK_LINE(2834)
												Float tmp19 = v->x;		HX_STACK_VAR(tmp19,"tmp19");
												HX_STACK_LINE(2834)
												Float tmp20 = (w1->y - u->y);		HX_STACK_VAR(tmp20,"tmp20");
												HX_STACK_LINE(2834)
												Float tmp21 = (tmp19 * tmp20);		HX_STACK_VAR(tmp21,"tmp21");
												HX_STACK_LINE(2834)
												hx::AddEq(area,tmp21);
												HX_STACK_LINE(2834)
												Float tmp22 = (w1->y * v->x);		HX_STACK_VAR(tmp22,"tmp22");
												HX_STACK_LINE(2834)
												Float tmp23 = (w1->x * v->y);		HX_STACK_VAR(tmp23,"tmp23");
												HX_STACK_LINE(2834)
												Float tmp24 = (tmp22 - tmp23);		HX_STACK_VAR(tmp24,"tmp24");
												HX_STACK_LINE(2834)
												Float cf = tmp24;		HX_STACK_VAR(cf,"cf");
												HX_STACK_LINE(2834)
												Float tmp25 = (v->x + w1->x);		HX_STACK_VAR(tmp25,"tmp25");
												HX_STACK_LINE(2834)
												Float tmp26 = cf;		HX_STACK_VAR(tmp26,"tmp26");
												HX_STACK_LINE(2834)
												Float tmp27 = (tmp25 * tmp26);		HX_STACK_VAR(tmp27,"tmp27");
												HX_STACK_LINE(2834)
												hx::AddEq(_this1->localCOMx,tmp27);
												HX_STACK_LINE(2834)
												Float tmp28 = (v->y + w1->y);		HX_STACK_VAR(tmp28,"tmp28");
												HX_STACK_LINE(2834)
												Float tmp29 = cf;		HX_STACK_VAR(tmp29,"tmp29");
												HX_STACK_LINE(2834)
												Float tmp30 = (tmp28 * tmp29);		HX_STACK_VAR(tmp30,"tmp30");
												HX_STACK_LINE(2834)
												hx::AddEq(_this1->localCOMy,tmp30);
											}
										}
										HX_STACK_LINE(2834)
										Float tmp17 = ((int)3 * area);		HX_STACK_VAR(tmp17,"tmp17");
										HX_STACK_LINE(2834)
										Float tmp18 = (Float((int)1) / Float(tmp17));		HX_STACK_VAR(tmp18,"tmp18");
										HX_STACK_LINE(2834)
										area = tmp18;
										HX_STACK_LINE(2834)
										{
											HX_STACK_LINE(2834)
											Float t = area;		HX_STACK_VAR(t,"t");
											HX_STACK_LINE(2834)
											hx::MultEq(_this1->localCOMx,t);
											HX_STACK_LINE(2834)
											hx::MultEq(_this1->localCOMy,t);
										}
									}
								}
							}
							HX_STACK_LINE(2834)
							bool tmp9 = (_this->wrap_localCOM != null());		HX_STACK_VAR(tmp9,"tmp9");
							HX_STACK_LINE(2834)
							if ((tmp9)){
								HX_STACK_LINE(2834)
								::zpp_nape::geom::ZPP_Vec2 tmp10 = _this->wrap_localCOM->zpp_inner;		HX_STACK_VAR(tmp10,"tmp10");
								HX_STACK_LINE(2834)
								tmp10->x = _this->localCOMx;
								HX_STACK_LINE(2834)
								::zpp_nape::geom::ZPP_Vec2 tmp11 = _this->wrap_localCOM->zpp_inner;		HX_STACK_VAR(tmp11,"tmp11");
								HX_STACK_LINE(2834)
								tmp11->y = _this->localCOMy;
								HX_STACK_LINE(2834)
								{
								}
							}
						}
					}
					HX_STACK_LINE(2834)
					{
						HX_STACK_LINE(2834)
						::zpp_nape::phys::ZPP_Body _this1 = _this->body;		HX_STACK_VAR(_this1,"_this1");
						HX_STACK_LINE(2834)
						bool tmp5 = _this1->zip_axis;		HX_STACK_VAR(tmp5,"tmp5");
						HX_STACK_LINE(2834)
						if ((tmp5)){
							HX_STACK_LINE(2834)
							_this1->zip_axis = false;
							HX_STACK_LINE(2834)
							{
								HX_STACK_LINE(2834)
								Float tmp6 = _this1->rot;		HX_STACK_VAR(tmp6,"tmp6");
								HX_STACK_LINE(2834)
								Float tmp7 = ::Math_obj::sin(tmp6);		HX_STACK_VAR(tmp7,"tmp7");
								HX_STACK_LINE(2834)
								_this1->axisx = tmp7;
								HX_STACK_LINE(2834)
								Float tmp8 = _this1->rot;		HX_STACK_VAR(tmp8,"tmp8");
								HX_STACK_LINE(2834)
								Float tmp9 = ::Math_obj::cos(tmp8);		HX_STACK_VAR(tmp9,"tmp9");
								HX_STACK_LINE(2834)
								_this1->axisy = tmp9;
								HX_STACK_LINE(2834)
								Dynamic();
							}
						}
					}
					HX_STACK_LINE(2834)
					{
						HX_STACK_LINE(2834)
						Float tmp5 = _this->body->posx;		HX_STACK_VAR(tmp5,"tmp5");
						HX_STACK_LINE(2834)
						Float tmp6 = _this->body->axisy;		HX_STACK_VAR(tmp6,"tmp6");
						HX_STACK_LINE(2834)
						Float tmp7 = _this->localCOMx;		HX_STACK_VAR(tmp7,"tmp7");
						HX_STACK_LINE(2834)
						Float tmp8 = (tmp6 * tmp7);		HX_STACK_VAR(tmp8,"tmp8");
						HX_STACK_LINE(2834)
						Float tmp9 = _this->body->axisx;		HX_STACK_VAR(tmp9,"tmp9");
						HX_STACK_LINE(2834)
						Float tmp10 = _this->localCOMy;		HX_STACK_VAR(tmp10,"tmp10");
						HX_STACK_LINE(2834)
						Float tmp11 = (tmp9 * tmp10);		HX_STACK_VAR(tmp11,"tmp11");
						HX_STACK_LINE(2834)
						Float tmp12 = (tmp8 - tmp11);		HX_STACK_VAR(tmp12,"tmp12");
						HX_STACK_LINE(2834)
						Float tmp13 = (tmp5 + tmp12);		HX_STACK_VAR(tmp13,"tmp13");
						HX_STACK_LINE(2834)
						_this->worldCOMx = tmp13;
						HX_STACK_LINE(2834)
						Float tmp14 = _this->body->posy;		HX_STACK_VAR(tmp14,"tmp14");
						HX_STACK_LINE(2834)
						Float tmp15 = _this->localCOMx;		HX_STACK_VAR(tmp15,"tmp15");
						HX_STACK_LINE(2834)
						Float tmp16 = _this->body->axisx;		HX_STACK_VAR(tmp16,"tmp16");
						HX_STACK_LINE(2834)
						Float tmp17 = (tmp15 * tmp16);		HX_STACK_VAR(tmp17,"tmp17");
						HX_STACK_LINE(2834)
						Float tmp18 = _this->localCOMy;		HX_STACK_VAR(tmp18,"tmp18");
						HX_STACK_LINE(2834)
						Float tmp19 = _this->body->axisy;		HX_STACK_VAR(tmp19,"tmp19");
						HX_STACK_LINE(2834)
						Float tmp20 = (tmp18 * tmp19);		HX_STACK_VAR(tmp20,"tmp20");
						HX_STACK_LINE(2834)
						Float tmp21 = (tmp17 + tmp20);		HX_STACK_VAR(tmp21,"tmp21");
						HX_STACK_LINE(2834)
						Float tmp22 = (tmp14 + tmp21);		HX_STACK_VAR(tmp22,"tmp22");
						HX_STACK_LINE(2834)
						_this->worldCOMy = tmp22;
					}
				}
			}
		}
		else{
			HX_STACK_LINE(2835)
			::zpp_nape::shape::ZPP_Polygon _this = s->polygon;		HX_STACK_VAR(_this,"_this");
			HX_STACK_LINE(2835)
			bool tmp3 = _this->zip_gaxi;		HX_STACK_VAR(tmp3,"tmp3");
			HX_STACK_LINE(2835)
			if ((tmp3)){
				HX_STACK_LINE(2835)
				bool tmp4 = (_this->body != null());		HX_STACK_VAR(tmp4,"tmp4");
				HX_STACK_LINE(2835)
				if ((tmp4)){
					HX_STACK_LINE(2835)
					_this->zip_gaxi = false;
					HX_STACK_LINE(2835)
					_this->validate_laxi();
					HX_STACK_LINE(2835)
					{
						HX_STACK_LINE(2835)
						::zpp_nape::phys::ZPP_Body _this1 = _this->body;		HX_STACK_VAR(_this1,"_this1");
						HX_STACK_LINE(2835)
						bool tmp5 = _this1->zip_axis;		HX_STACK_VAR(tmp5,"tmp5");
						HX_STACK_LINE(2835)
						if ((tmp5)){
							HX_STACK_LINE(2835)
							_this1->zip_axis = false;
							HX_STACK_LINE(2835)
							{
								HX_STACK_LINE(2835)
								Float tmp6 = _this1->rot;		HX_STACK_VAR(tmp6,"tmp6");
								HX_STACK_LINE(2835)
								Float tmp7 = ::Math_obj::sin(tmp6);		HX_STACK_VAR(tmp7,"tmp7");
								HX_STACK_LINE(2835)
								_this1->axisx = tmp7;
								HX_STACK_LINE(2835)
								Float tmp8 = _this1->rot;		HX_STACK_VAR(tmp8,"tmp8");
								HX_STACK_LINE(2835)
								Float tmp9 = ::Math_obj::cos(tmp8);		HX_STACK_VAR(tmp9,"tmp9");
								HX_STACK_LINE(2835)
								_this1->axisy = tmp9;
								HX_STACK_LINE(2835)
								Dynamic();
							}
						}
					}
					HX_STACK_LINE(2835)
					{
						HX_STACK_LINE(2835)
						bool tmp5 = _this->zip_gverts;		HX_STACK_VAR(tmp5,"tmp5");
						HX_STACK_LINE(2835)
						if ((tmp5)){
							HX_STACK_LINE(2835)
							bool tmp6 = (_this->body != null());		HX_STACK_VAR(tmp6,"tmp6");
							HX_STACK_LINE(2835)
							if ((tmp6)){
								HX_STACK_LINE(2835)
								_this->zip_gverts = false;
								HX_STACK_LINE(2835)
								_this->validate_lverts();
								HX_STACK_LINE(2835)
								{
									HX_STACK_LINE(2835)
									::zpp_nape::phys::ZPP_Body _this1 = _this->body;		HX_STACK_VAR(_this1,"_this1");
									HX_STACK_LINE(2835)
									bool tmp7 = _this1->zip_axis;		HX_STACK_VAR(tmp7,"tmp7");
									HX_STACK_LINE(2835)
									if ((tmp7)){
										HX_STACK_LINE(2835)
										_this1->zip_axis = false;
										HX_STACK_LINE(2835)
										{
											HX_STACK_LINE(2835)
											Float tmp8 = _this1->rot;		HX_STACK_VAR(tmp8,"tmp8");
											HX_STACK_LINE(2835)
											Float tmp9 = ::Math_obj::sin(tmp8);		HX_STACK_VAR(tmp9,"tmp9");
											HX_STACK_LINE(2835)
											_this1->axisx = tmp9;
											HX_STACK_LINE(2835)
											Float tmp10 = _this1->rot;		HX_STACK_VAR(tmp10,"tmp10");
											HX_STACK_LINE(2835)
											Float tmp11 = ::Math_obj::cos(tmp10);		HX_STACK_VAR(tmp11,"tmp11");
											HX_STACK_LINE(2835)
											_this1->axisy = tmp11;
											HX_STACK_LINE(2835)
											Dynamic();
										}
									}
								}
								HX_STACK_LINE(2835)
								::zpp_nape::geom::ZPP_Vec2 tmp7 = _this->lverts->next;		HX_STACK_VAR(tmp7,"tmp7");
								HX_STACK_LINE(2835)
								::zpp_nape::geom::ZPP_Vec2 li = tmp7;		HX_STACK_VAR(li,"li");
								HX_STACK_LINE(2835)
								{
									HX_STACK_LINE(2835)
									::zpp_nape::geom::ZPP_Vec2 tmp8 = _this->gverts->next;		HX_STACK_VAR(tmp8,"tmp8");
									HX_STACK_LINE(2835)
									::zpp_nape::geom::ZPP_Vec2 cx_ite = tmp8;		HX_STACK_VAR(cx_ite,"cx_ite");
									HX_STACK_LINE(2835)
									while((true)){
										HX_STACK_LINE(2835)
										bool tmp9 = (cx_ite != null());		HX_STACK_VAR(tmp9,"tmp9");
										HX_STACK_LINE(2835)
										bool tmp10 = !(tmp9);		HX_STACK_VAR(tmp10,"tmp10");
										HX_STACK_LINE(2835)
										if ((tmp10)){
											HX_STACK_LINE(2835)
											break;
										}
										HX_STACK_LINE(2835)
										::zpp_nape::geom::ZPP_Vec2 g = cx_ite;		HX_STACK_VAR(g,"g");
										HX_STACK_LINE(2835)
										{
											HX_STACK_LINE(2835)
											::zpp_nape::geom::ZPP_Vec2 l = li;		HX_STACK_VAR(l,"l");
											HX_STACK_LINE(2835)
											li = li->next;
											HX_STACK_LINE(2835)
											{
												HX_STACK_LINE(2835)
												Float tmp11 = _this->body->posx;		HX_STACK_VAR(tmp11,"tmp11");
												HX_STACK_LINE(2835)
												Float tmp12 = _this->body->axisy;		HX_STACK_VAR(tmp12,"tmp12");
												HX_STACK_LINE(2835)
												Float tmp13 = l->x;		HX_STACK_VAR(tmp13,"tmp13");
												HX_STACK_LINE(2835)
												Float tmp14 = (tmp12 * tmp13);		HX_STACK_VAR(tmp14,"tmp14");
												HX_STACK_LINE(2835)
												Float tmp15 = _this->body->axisx;		HX_STACK_VAR(tmp15,"tmp15");
												HX_STACK_LINE(2835)
												Float tmp16 = l->y;		HX_STACK_VAR(tmp16,"tmp16");
												HX_STACK_LINE(2835)
												Float tmp17 = (tmp15 * tmp16);		HX_STACK_VAR(tmp17,"tmp17");
												HX_STACK_LINE(2835)
												Float tmp18 = (tmp14 - tmp17);		HX_STACK_VAR(tmp18,"tmp18");
												HX_STACK_LINE(2835)
												Float tmp19 = (tmp11 + tmp18);		HX_STACK_VAR(tmp19,"tmp19");
												HX_STACK_LINE(2835)
												g->x = tmp19;
												HX_STACK_LINE(2835)
												Float tmp20 = _this->body->posy;		HX_STACK_VAR(tmp20,"tmp20");
												HX_STACK_LINE(2835)
												Float tmp21 = l->x;		HX_STACK_VAR(tmp21,"tmp21");
												HX_STACK_LINE(2835)
												Float tmp22 = _this->body->axisx;		HX_STACK_VAR(tmp22,"tmp22");
												HX_STACK_LINE(2835)
												Float tmp23 = (tmp21 * tmp22);		HX_STACK_VAR(tmp23,"tmp23");
												HX_STACK_LINE(2835)
												Float tmp24 = l->y;		HX_STACK_VAR(tmp24,"tmp24");
												HX_STACK_LINE(2835)
												Float tmp25 = _this->body->axisy;		HX_STACK_VAR(tmp25,"tmp25");
												HX_STACK_LINE(2835)
												Float tmp26 = (tmp24 * tmp25);		HX_STACK_VAR(tmp26,"tmp26");
												HX_STACK_LINE(2835)
												Float tmp27 = (tmp23 + tmp26);		HX_STACK_VAR(tmp27,"tmp27");
												HX_STACK_LINE(2835)
												Float tmp28 = (tmp20 + tmp27);		HX_STACK_VAR(tmp28,"tmp28");
												HX_STACK_LINE(2835)
												g->y = tmp28;
											}
										}
										HX_STACK_LINE(2835)
										cx_ite = cx_ite->next;
									}
								}
							}
						}
					}
					HX_STACK_LINE(2835)
					::zpp_nape::util::ZNPNode_ZPP_Edge tmp5 = _this->edges->head;		HX_STACK_VAR(tmp5,"tmp5");
					HX_STACK_LINE(2835)
					::zpp_nape::util::ZNPNode_ZPP_Edge ite = tmp5;		HX_STACK_VAR(ite,"ite");
					HX_STACK_LINE(2835)
					{
						HX_STACK_LINE(2835)
						::zpp_nape::geom::ZPP_Vec2 tmp6 = _this->gverts->next;		HX_STACK_VAR(tmp6,"tmp6");
						HX_STACK_LINE(2835)
						::zpp_nape::geom::ZPP_Vec2 cx_ite = tmp6;		HX_STACK_VAR(cx_ite,"cx_ite");
						HX_STACK_LINE(2835)
						::zpp_nape::geom::ZPP_Vec2 u = cx_ite;		HX_STACK_VAR(u,"u");
						HX_STACK_LINE(2835)
						cx_ite = cx_ite->next;
						HX_STACK_LINE(2835)
						while((true)){
							HX_STACK_LINE(2835)
							bool tmp7 = (cx_ite != null());		HX_STACK_VAR(tmp7,"tmp7");
							HX_STACK_LINE(2835)
							bool tmp8 = !(tmp7);		HX_STACK_VAR(tmp8,"tmp8");
							HX_STACK_LINE(2835)
							if ((tmp8)){
								HX_STACK_LINE(2835)
								break;
							}
							HX_STACK_LINE(2835)
							::zpp_nape::geom::ZPP_Vec2 v = cx_ite;		HX_STACK_VAR(v,"v");
							HX_STACK_LINE(2835)
							{
								HX_STACK_LINE(2835)
								::zpp_nape::shape::ZPP_Edge e = ite->elt;		HX_STACK_VAR(e,"e");
								HX_STACK_LINE(2835)
								ite = ite->next;
								HX_STACK_LINE(2835)
								e->gp0 = u;
								HX_STACK_LINE(2835)
								e->gp1 = v;
								HX_STACK_LINE(2835)
								{
									HX_STACK_LINE(2835)
									Float tmp9 = _this->body->axisy;		HX_STACK_VAR(tmp9,"tmp9");
									HX_STACK_LINE(2835)
									Float tmp10 = e->lnormx;		HX_STACK_VAR(tmp10,"tmp10");
									HX_STACK_LINE(2835)
									Float tmp11 = (tmp9 * tmp10);		HX_STACK_VAR(tmp11,"tmp11");
									HX_STACK_LINE(2835)
									Float tmp12 = _this->body->axisx;		HX_STACK_VAR(tmp12,"tmp12");
									HX_STACK_LINE(2835)
									Float tmp13 = e->lnormy;		HX_STACK_VAR(tmp13,"tmp13");
									HX_STACK_LINE(2835)
									Float tmp14 = (tmp12 * tmp13);		HX_STACK_VAR(tmp14,"tmp14");
									HX_STACK_LINE(2835)
									Float tmp15 = (tmp11 - tmp14);		HX_STACK_VAR(tmp15,"tmp15");
									HX_STACK_LINE(2835)
									e->gnormx = tmp15;
									HX_STACK_LINE(2835)
									Float tmp16 = e->lnormx;		HX_STACK_VAR(tmp16,"tmp16");
									HX_STACK_LINE(2835)
									Float tmp17 = _this->body->axisx;		HX_STACK_VAR(tmp17,"tmp17");
									HX_STACK_LINE(2835)
									Float tmp18 = (tmp16 * tmp17);		HX_STACK_VAR(tmp18,"tmp18");
									HX_STACK_LINE(2835)
									Float tmp19 = e->lnormy;		HX_STACK_VAR(tmp19,"tmp19");
									HX_STACK_LINE(2835)
									Float tmp20 = _this->body->axisy;		HX_STACK_VAR(tmp20,"tmp20");
									HX_STACK_LINE(2835)
									Float tmp21 = (tmp19 * tmp20);		HX_STACK_VAR(tmp21,"tmp21");
									HX_STACK_LINE(2835)
									Float tmp22 = (tmp18 + tmp21);		HX_STACK_VAR(tmp22,"tmp22");
									HX_STACK_LINE(2835)
									e->gnormy = tmp22;
								}
								HX_STACK_LINE(2835)
								Float tmp9 = _this->body->posx;		HX_STACK_VAR(tmp9,"tmp9");
								HX_STACK_LINE(2835)
								Float tmp10 = e->gnormx;		HX_STACK_VAR(tmp10,"tmp10");
								HX_STACK_LINE(2835)
								Float tmp11 = (tmp9 * tmp10);		HX_STACK_VAR(tmp11,"tmp11");
								HX_STACK_LINE(2835)
								Float tmp12 = _this->body->posy;		HX_STACK_VAR(tmp12,"tmp12");
								HX_STACK_LINE(2835)
								Float tmp13 = e->gnormy;		HX_STACK_VAR(tmp13,"tmp13");
								HX_STACK_LINE(2835)
								Float tmp14 = (tmp12 * tmp13);		HX_STACK_VAR(tmp14,"tmp14");
								HX_STACK_LINE(2835)
								Float tmp15 = (tmp11 + tmp14);		HX_STACK_VAR(tmp15,"tmp15");
								HX_STACK_LINE(2835)
								Float tmp16 = e->lprojection;		HX_STACK_VAR(tmp16,"tmp16");
								HX_STACK_LINE(2835)
								Float tmp17 = (tmp15 + tmp16);		HX_STACK_VAR(tmp17,"tmp17");
								HX_STACK_LINE(2835)
								e->gprojection = tmp17;
								HX_STACK_LINE(2835)
								bool tmp18 = (e->wrap_gnorm != null());		HX_STACK_VAR(tmp18,"tmp18");
								HX_STACK_LINE(2835)
								if ((tmp18)){
									HX_STACK_LINE(2835)
									::zpp_nape::geom::ZPP_Vec2 tmp19 = e->wrap_gnorm->zpp_inner;		HX_STACK_VAR(tmp19,"tmp19");
									HX_STACK_LINE(2835)
									tmp19->x = e->gnormx;
									HX_STACK_LINE(2835)
									::zpp_nape::geom::ZPP_Vec2 tmp20 = e->wrap_gnorm->zpp_inner;		HX_STACK_VAR(tmp20,"tmp20");
									HX_STACK_LINE(2835)
									tmp20->y = e->gnormy;
									HX_STACK_LINE(2835)
									{
									}
								}
								HX_STACK_LINE(2835)
								Float tmp19 = e->gp0->y;		HX_STACK_VAR(tmp19,"tmp19");
								HX_STACK_LINE(2835)
								Float tmp20 = e->gnormx;		HX_STACK_VAR(tmp20,"tmp20");
								HX_STACK_LINE(2835)
								Float tmp21 = (tmp19 * tmp20);		HX_STACK_VAR(tmp21,"tmp21");
								HX_STACK_LINE(2835)
								Float tmp22 = e->gp0->x;		HX_STACK_VAR(tmp22,"tmp22");
								HX_STACK_LINE(2835)
								Float tmp23 = e->gnormy;		HX_STACK_VAR(tmp23,"tmp23");
								HX_STACK_LINE(2835)
								Float tmp24 = (tmp22 * tmp23);		HX_STACK_VAR(tmp24,"tmp24");
								HX_STACK_LINE(2835)
								Float tmp25 = (tmp21 - tmp24);		HX_STACK_VAR(tmp25,"tmp25");
								HX_STACK_LINE(2835)
								e->tp0 = tmp25;
								HX_STACK_LINE(2835)
								Float tmp26 = e->gp1->y;		HX_STACK_VAR(tmp26,"tmp26");
								HX_STACK_LINE(2835)
								Float tmp27 = e->gnormx;		HX_STACK_VAR(tmp27,"tmp27");
								HX_STACK_LINE(2835)
								Float tmp28 = (tmp26 * tmp27);		HX_STACK_VAR(tmp28,"tmp28");
								HX_STACK_LINE(2835)
								Float tmp29 = e->gp1->x;		HX_STACK_VAR(tmp29,"tmp29");
								HX_STACK_LINE(2835)
								Float tmp30 = e->gnormy;		HX_STACK_VAR(tmp30,"tmp30");
								HX_STACK_LINE(2835)
								Float tmp31 = (tmp29 * tmp30);		HX_STACK_VAR(tmp31,"tmp31");
								HX_STACK_LINE(2835)
								Float tmp32 = (tmp28 - tmp31);		HX_STACK_VAR(tmp32,"tmp32");
								HX_STACK_LINE(2835)
								e->tp1 = tmp32;
							}
							HX_STACK_LINE(2835)
							u = v;
							HX_STACK_LINE(2835)
							cx_ite = cx_ite->next;
						}
						HX_STACK_LINE(2835)
						::zpp_nape::geom::ZPP_Vec2 tmp7 = _this->gverts->next;		HX_STACK_VAR(tmp7,"tmp7");
						HX_STACK_LINE(2835)
						::zpp_nape::geom::ZPP_Vec2 v = tmp7;		HX_STACK_VAR(v,"v");
						HX_STACK_LINE(2835)
						{
							HX_STACK_LINE(2835)
							::zpp_nape::shape::ZPP_Edge e = ite->elt;		HX_STACK_VAR(e,"e");
							HX_STACK_LINE(2835)
							ite = ite->next;
							HX_STACK_LINE(2835)
							e->gp0 = u;
							HX_STACK_LINE(2835)
							e->gp1 = v;
							HX_STACK_LINE(2835)
							{
								HX_STACK_LINE(2835)
								Float tmp8 = _this->body->axisy;		HX_STACK_VAR(tmp8,"tmp8");
								HX_STACK_LINE(2835)
								Float tmp9 = e->lnormx;		HX_STACK_VAR(tmp9,"tmp9");
								HX_STACK_LINE(2835)
								Float tmp10 = (tmp8 * tmp9);		HX_STACK_VAR(tmp10,"tmp10");
								HX_STACK_LINE(2835)
								Float tmp11 = _this->body->axisx;		HX_STACK_VAR(tmp11,"tmp11");
								HX_STACK_LINE(2835)
								Float tmp12 = e->lnormy;		HX_STACK_VAR(tmp12,"tmp12");
								HX_STACK_LINE(2835)
								Float tmp13 = (tmp11 * tmp12);		HX_STACK_VAR(tmp13,"tmp13");
								HX_STACK_LINE(2835)
								Float tmp14 = (tmp10 - tmp13);		HX_STACK_VAR(tmp14,"tmp14");
								HX_STACK_LINE(2835)
								e->gnormx = tmp14;
								HX_STACK_LINE(2835)
								Float tmp15 = e->lnormx;		HX_STACK_VAR(tmp15,"tmp15");
								HX_STACK_LINE(2835)
								Float tmp16 = _this->body->axisx;		HX_STACK_VAR(tmp16,"tmp16");
								HX_STACK_LINE(2835)
								Float tmp17 = (tmp15 * tmp16);		HX_STACK_VAR(tmp17,"tmp17");
								HX_STACK_LINE(2835)
								Float tmp18 = e->lnormy;		HX_STACK_VAR(tmp18,"tmp18");
								HX_STACK_LINE(2835)
								Float tmp19 = _this->body->axisy;		HX_STACK_VAR(tmp19,"tmp19");
								HX_STACK_LINE(2835)
								Float tmp20 = (tmp18 * tmp19);		HX_STACK_VAR(tmp20,"tmp20");
								HX_STACK_LINE(2835)
								Float tmp21 = (tmp17 + tmp20);		HX_STACK_VAR(tmp21,"tmp21");
								HX_STACK_LINE(2835)
								e->gnormy = tmp21;
							}
							HX_STACK_LINE(2835)
							Float tmp8 = _this->body->posx;		HX_STACK_VAR(tmp8,"tmp8");
							HX_STACK_LINE(2835)
							Float tmp9 = e->gnormx;		HX_STACK_VAR(tmp9,"tmp9");
							HX_STACK_LINE(2835)
							Float tmp10 = (tmp8 * tmp9);		HX_STACK_VAR(tmp10,"tmp10");
							HX_STACK_LINE(2835)
							Float tmp11 = _this->body->posy;		HX_STACK_VAR(tmp11,"tmp11");
							HX_STACK_LINE(2835)
							Float tmp12 = e->gnormy;		HX_STACK_VAR(tmp12,"tmp12");
							HX_STACK_LINE(2835)
							Float tmp13 = (tmp11 * tmp12);		HX_STACK_VAR(tmp13,"tmp13");
							HX_STACK_LINE(2835)
							Float tmp14 = (tmp10 + tmp13);		HX_STACK_VAR(tmp14,"tmp14");
							HX_STACK_LINE(2835)
							Float tmp15 = e->lprojection;		HX_STACK_VAR(tmp15,"tmp15");
							HX_STACK_LINE(2835)
							Float tmp16 = (tmp14 + tmp15);		HX_STACK_VAR(tmp16,"tmp16");
							HX_STACK_LINE(2835)
							e->gprojection = tmp16;
							HX_STACK_LINE(2835)
							bool tmp17 = (e->wrap_gnorm != null());		HX_STACK_VAR(tmp17,"tmp17");
							HX_STACK_LINE(2835)
							if ((tmp17)){
								HX_STACK_LINE(2835)
								::zpp_nape::geom::ZPP_Vec2 tmp18 = e->wrap_gnorm->zpp_inner;		HX_STACK_VAR(tmp18,"tmp18");
								HX_STACK_LINE(2835)
								tmp18->x = e->gnormx;
								HX_STACK_LINE(2835)
								::zpp_nape::geom::ZPP_Vec2 tmp19 = e->wrap_gnorm->zpp_inner;		HX_STACK_VAR(tmp19,"tmp19");
								HX_STACK_LINE(2835)
								tmp19->y = e->gnormy;
								HX_STACK_LINE(2835)
								{
								}
							}
							HX_STACK_LINE(2835)
							Float tmp18 = e->gp0->y;		HX_STACK_VAR(tmp18,"tmp18");
							HX_STACK_LINE(2835)
							Float tmp19 = e->gnormx;		HX_STACK_VAR(tmp19,"tmp19");
							HX_STACK_LINE(2835)
							Float tmp20 = (tmp18 * tmp19);		HX_STACK_VAR(tmp20,"tmp20");
							HX_STACK_LINE(2835)
							Float tmp21 = e->gp0->x;		HX_STACK_VAR(tmp21,"tmp21");
							HX_STACK_LINE(2835)
							Float tmp22 = e->gnormy;		HX_STACK_VAR(tmp22,"tmp22");
							HX_STACK_LINE(2835)
							Float tmp23 = (tmp21 * tmp22);		HX_STACK_VAR(tmp23,"tmp23");
							HX_STACK_LINE(2835)
							Float tmp24 = (tmp20 - tmp23);		HX_STACK_VAR(tmp24,"tmp24");
							HX_STACK_LINE(2835)
							e->tp0 = tmp24;
							HX_STACK_LINE(2835)
							Float tmp25 = e->gp1->y;		HX_STACK_VAR(tmp25,"tmp25");
							HX_STACK_LINE(2835)
							Float tmp26 = e->gnormx;		HX_STACK_VAR(tmp26,"tmp26");
							HX_STACK_LINE(2835)
							Float tmp27 = (tmp25 * tmp26);		HX_STACK_VAR(tmp27,"tmp27");
							HX_STACK_LINE(2835)
							Float tmp28 = e->gp1->x;		HX_STACK_VAR(tmp28,"tmp28");
							HX_STACK_LINE(2835)
							Float tmp29 = e->gnormy;		HX_STACK_VAR(tmp29,"tmp29");
							HX_STACK_LINE(2835)
							Float tmp30 = (tmp28 * tmp29);		HX_STACK_VAR(tmp30,"tmp30");
							HX_STACK_LINE(2835)
							Float tmp31 = (tmp27 - tmp30);		HX_STACK_VAR(tmp31,"tmp31");
							HX_STACK_LINE(2835)
							e->tp1 = tmp31;
						}
					}
				}
			}
		}
	}
return null();
}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Space_obj,prepareCast,(void))

::nape::geom::ConvexResultList ZPP_Space_obj::convexMultiCast( ::zpp_nape::shape::ZPP_Shape shape,Float deltaTime,::nape::dynamics::InteractionFilter filter,bool dynamics,::nape::geom::ConvexResultList output){
	HX_STACK_FRAME("zpp_nape.space.ZPP_Space","convexMultiCast",0xc8aa7abb,"zpp_nape.space.ZPP_Space.convexMultiCast","zpp_nape/space/Space.hx",2837,0x2b65ed03)
	HX_STACK_THIS(this)
	HX_STACK_ARG(shape,"shape")
	HX_STACK_ARG(deltaTime,"deltaTime")
	HX_STACK_ARG(filter,"filter")
	HX_STACK_ARG(dynamics,"dynamics")
	HX_STACK_ARG(output,"output")
	HX_STACK_LINE(2838)
	::zpp_nape::geom::ZPP_ToiEvent toi;		HX_STACK_VAR(toi,"toi");
	HX_STACK_LINE(2839)
	{
		HX_STACK_LINE(2840)
		::zpp_nape::geom::ZPP_ToiEvent tmp = ::zpp_nape::geom::ZPP_ToiEvent_obj::zpp_pool;		HX_STACK_VAR(tmp,"tmp");
		HX_STACK_LINE(2840)
		bool tmp1 = (tmp == null());		HX_STACK_VAR(tmp1,"tmp1");
		HX_STACK_LINE(2840)
		if ((tmp1)){
			HX_STACK_LINE(2841)
			::zpp_nape::geom::ZPP_ToiEvent tmp2 = ::zpp_nape::geom::ZPP_ToiEvent_obj::__new();		HX_STACK_VAR(tmp2,"tmp2");
			HX_STACK_LINE(2841)
			toi = tmp2;
		}
		else{
			HX_STACK_LINE(2847)
			::zpp_nape::geom::ZPP_ToiEvent tmp2 = ::zpp_nape::geom::ZPP_ToiEvent_obj::zpp_pool;		HX_STACK_VAR(tmp2,"tmp2");
			HX_STACK_LINE(2847)
			toi = tmp2;
			HX_STACK_LINE(2848)
			::zpp_nape::geom::ZPP_ToiEvent_obj::zpp_pool = toi->next;
			HX_STACK_LINE(2849)
			toi->next = null();
		}
		HX_STACK_LINE(2854)
		{
			HX_STACK_LINE(2854)
			toi->failed = false;
			HX_STACK_LINE(2854)
			::zpp_nape::shape::ZPP_Shape tmp2 = toi->s2 = null();		HX_STACK_VAR(tmp2,"tmp2");
			HX_STACK_LINE(2854)
			toi->s1 = tmp2;
			HX_STACK_LINE(2854)
			toi->arbiter = null();
		}
	}
	HX_STACK_LINE(2856)
	{
		HX_STACK_LINE(2856)
		int tmp = shape->type;		HX_STACK_VAR(tmp,"tmp");
		HX_STACK_LINE(2856)
		int tmp1 = ::zpp_nape::util::ZPP_Flags_obj::id_ShapeType_CIRCLE;		HX_STACK_VAR(tmp1,"tmp1");
		HX_STACK_LINE(2856)
		bool tmp2 = (tmp == tmp1);		HX_STACK_VAR(tmp2,"tmp2");
		HX_STACK_LINE(2856)
		if ((tmp2)){
			HX_STACK_LINE(2856)
			::zpp_nape::shape::ZPP_Circle _this = shape->circle;		HX_STACK_VAR(_this,"_this");
			HX_STACK_LINE(2856)
			bool tmp3 = _this->zip_worldCOM;		HX_STACK_VAR(tmp3,"tmp3");
			HX_STACK_LINE(2856)
			if ((tmp3)){
				HX_STACK_LINE(2856)
				bool tmp4 = (_this->body != null());		HX_STACK_VAR(tmp4,"tmp4");
				HX_STACK_LINE(2856)
				if ((tmp4)){
					HX_STACK_LINE(2856)
					_this->zip_worldCOM = false;
					HX_STACK_LINE(2856)
					{
						HX_STACK_LINE(2856)
						bool tmp5 = _this->zip_localCOM;		HX_STACK_VAR(tmp5,"tmp5");
						HX_STACK_LINE(2856)
						if ((tmp5)){
							HX_STACK_LINE(2856)
							_this->zip_localCOM = false;
							HX_STACK_LINE(2856)
							int tmp6 = _this->type;		HX_STACK_VAR(tmp6,"tmp6");
							HX_STACK_LINE(2856)
							int tmp7 = ::zpp_nape::util::ZPP_Flags_obj::id_ShapeType_POLYGON;		HX_STACK_VAR(tmp7,"tmp7");
							HX_STACK_LINE(2856)
							bool tmp8 = (tmp6 == tmp7);		HX_STACK_VAR(tmp8,"tmp8");
							HX_STACK_LINE(2856)
							if ((tmp8)){
								HX_STACK_LINE(2856)
								::zpp_nape::shape::ZPP_Polygon _this1 = _this->polygon;		HX_STACK_VAR(_this1,"_this1");
								HX_STACK_LINE(2856)
								::zpp_nape::geom::ZPP_Vec2 tmp9 = _this1->lverts->next;		HX_STACK_VAR(tmp9,"tmp9");
								HX_STACK_LINE(2856)
								bool tmp10 = (tmp9 == null());		HX_STACK_VAR(tmp10,"tmp10");
								HX_STACK_LINE(2856)
								if ((tmp10)){
									HX_STACK_LINE(2856)
									HX_STACK_DO_THROW(HX_HCSTRING("Error: An empty polygon has no meaningful localCOM","\x3b","\x8d","\x96","\xf3"));
								}
								HX_STACK_LINE(2856)
								::zpp_nape::geom::ZPP_Vec2 tmp11 = _this1->lverts->next;		HX_STACK_VAR(tmp11,"tmp11");
								HX_STACK_LINE(2856)
								::zpp_nape::geom::ZPP_Vec2 tmp12 = tmp11->next;		HX_STACK_VAR(tmp12,"tmp12");
								HX_STACK_LINE(2856)
								bool tmp13 = (tmp12 == null());		HX_STACK_VAR(tmp13,"tmp13");
								HX_STACK_LINE(2856)
								if ((tmp13)){
									HX_STACK_LINE(2856)
									::zpp_nape::geom::ZPP_Vec2 tmp14 = _this1->lverts->next;		HX_STACK_VAR(tmp14,"tmp14");
									HX_STACK_LINE(2856)
									_this1->localCOMx = tmp14->x;
									HX_STACK_LINE(2856)
									::zpp_nape::geom::ZPP_Vec2 tmp15 = _this1->lverts->next;		HX_STACK_VAR(tmp15,"tmp15");
									HX_STACK_LINE(2856)
									_this1->localCOMy = tmp15->y;
									HX_STACK_LINE(2856)
									Dynamic();
								}
								else{
									HX_STACK_LINE(2856)
									::zpp_nape::geom::ZPP_Vec2 tmp14 = _this1->lverts->next;		HX_STACK_VAR(tmp14,"tmp14");
									HX_STACK_LINE(2856)
									::zpp_nape::geom::ZPP_Vec2 tmp15 = tmp14->next->next;		HX_STACK_VAR(tmp15,"tmp15");
									HX_STACK_LINE(2856)
									bool tmp16 = (tmp15 == null());		HX_STACK_VAR(tmp16,"tmp16");
									HX_STACK_LINE(2856)
									if ((tmp16)){
										HX_STACK_LINE(2856)
										{
											HX_STACK_LINE(2856)
											::zpp_nape::geom::ZPP_Vec2 tmp17 = _this1->lverts->next;		HX_STACK_VAR(tmp17,"tmp17");
											HX_STACK_LINE(2856)
											_this1->localCOMx = tmp17->x;
											HX_STACK_LINE(2856)
											::zpp_nape::geom::ZPP_Vec2 tmp18 = _this1->lverts->next;		HX_STACK_VAR(tmp18,"tmp18");
											HX_STACK_LINE(2856)
											_this1->localCOMy = tmp18->y;
											HX_STACK_LINE(2856)
											{
											}
										}
										HX_STACK_LINE(2856)
										{
											HX_STACK_LINE(2856)
											Float t = ((Float)1.0);		HX_STACK_VAR(t,"t");
											HX_STACK_LINE(2856)
											::zpp_nape::geom::ZPP_Vec2 tmp17 = _this1->lverts->next;		HX_STACK_VAR(tmp17,"tmp17");
											HX_STACK_LINE(2856)
											Float tmp18 = tmp17->next->x;		HX_STACK_VAR(tmp18,"tmp18");
											HX_STACK_LINE(2856)
											Float tmp19 = t;		HX_STACK_VAR(tmp19,"tmp19");
											HX_STACK_LINE(2856)
											Float tmp20 = (tmp18 * tmp19);		HX_STACK_VAR(tmp20,"tmp20");
											HX_STACK_LINE(2856)
											hx::AddEq(_this1->localCOMx,tmp20);
											HX_STACK_LINE(2856)
											::zpp_nape::geom::ZPP_Vec2 tmp21 = _this1->lverts->next;		HX_STACK_VAR(tmp21,"tmp21");
											HX_STACK_LINE(2856)
											Float tmp22 = tmp21->next->y;		HX_STACK_VAR(tmp22,"tmp22");
											HX_STACK_LINE(2856)
											Float tmp23 = t;		HX_STACK_VAR(tmp23,"tmp23");
											HX_STACK_LINE(2856)
											Float tmp24 = (tmp22 * tmp23);		HX_STACK_VAR(tmp24,"tmp24");
											HX_STACK_LINE(2856)
											hx::AddEq(_this1->localCOMy,tmp24);
										}
										HX_STACK_LINE(2856)
										{
											HX_STACK_LINE(2856)
											Float t = ((Float)0.5);		HX_STACK_VAR(t,"t");
											HX_STACK_LINE(2856)
											hx::MultEq(_this1->localCOMx,t);
											HX_STACK_LINE(2856)
											hx::MultEq(_this1->localCOMy,t);
										}
									}
									else{
										HX_STACK_LINE(2856)
										{
											HX_STACK_LINE(2856)
											_this1->localCOMx = (int)0;
											HX_STACK_LINE(2856)
											_this1->localCOMy = (int)0;
											HX_STACK_LINE(2856)
											{
											}
										}
										HX_STACK_LINE(2856)
										Float area = ((Float)0.0);		HX_STACK_VAR(area,"area");
										HX_STACK_LINE(2856)
										{
											HX_STACK_LINE(2856)
											::zpp_nape::geom::ZPP_Vec2 tmp17 = _this1->lverts->next;		HX_STACK_VAR(tmp17,"tmp17");
											HX_STACK_LINE(2856)
											::zpp_nape::geom::ZPP_Vec2 cx_ite = tmp17;		HX_STACK_VAR(cx_ite,"cx_ite");
											HX_STACK_LINE(2856)
											::zpp_nape::geom::ZPP_Vec2 u = cx_ite;		HX_STACK_VAR(u,"u");
											HX_STACK_LINE(2856)
											cx_ite = cx_ite->next;
											HX_STACK_LINE(2856)
											::zpp_nape::geom::ZPP_Vec2 v = cx_ite;		HX_STACK_VAR(v,"v");
											HX_STACK_LINE(2856)
											cx_ite = cx_ite->next;
											HX_STACK_LINE(2856)
											while((true)){
												HX_STACK_LINE(2856)
												bool tmp18 = (cx_ite != null());		HX_STACK_VAR(tmp18,"tmp18");
												HX_STACK_LINE(2856)
												bool tmp19 = !(tmp18);		HX_STACK_VAR(tmp19,"tmp19");
												HX_STACK_LINE(2856)
												if ((tmp19)){
													HX_STACK_LINE(2856)
													break;
												}
												HX_STACK_LINE(2856)
												::zpp_nape::geom::ZPP_Vec2 w = cx_ite;		HX_STACK_VAR(w,"w");
												HX_STACK_LINE(2856)
												{
													HX_STACK_LINE(2856)
													Float tmp20 = v->x;		HX_STACK_VAR(tmp20,"tmp20");
													HX_STACK_LINE(2856)
													Float tmp21 = (w->y - u->y);		HX_STACK_VAR(tmp21,"tmp21");
													HX_STACK_LINE(2856)
													Float tmp22 = (tmp20 * tmp21);		HX_STACK_VAR(tmp22,"tmp22");
													HX_STACK_LINE(2856)
													hx::AddEq(area,tmp22);
													HX_STACK_LINE(2856)
													Float tmp23 = (w->y * v->x);		HX_STACK_VAR(tmp23,"tmp23");
													HX_STACK_LINE(2856)
													Float tmp24 = (w->x * v->y);		HX_STACK_VAR(tmp24,"tmp24");
													HX_STACK_LINE(2856)
													Float tmp25 = (tmp23 - tmp24);		HX_STACK_VAR(tmp25,"tmp25");
													HX_STACK_LINE(2856)
													Float cf = tmp25;		HX_STACK_VAR(cf,"cf");
													HX_STACK_LINE(2856)
													Float tmp26 = (v->x + w->x);		HX_STACK_VAR(tmp26,"tmp26");
													HX_STACK_LINE(2856)
													Float tmp27 = cf;		HX_STACK_VAR(tmp27,"tmp27");
													HX_STACK_LINE(2856)
													Float tmp28 = (tmp26 * tmp27);		HX_STACK_VAR(tmp28,"tmp28");
													HX_STACK_LINE(2856)
													hx::AddEq(_this1->localCOMx,tmp28);
													HX_STACK_LINE(2856)
													Float tmp29 = (v->y + w->y);		HX_STACK_VAR(tmp29,"tmp29");
													HX_STACK_LINE(2856)
													Float tmp30 = cf;		HX_STACK_VAR(tmp30,"tmp30");
													HX_STACK_LINE(2856)
													Float tmp31 = (tmp29 * tmp30);		HX_STACK_VAR(tmp31,"tmp31");
													HX_STACK_LINE(2856)
													hx::AddEq(_this1->localCOMy,tmp31);
												}
												HX_STACK_LINE(2856)
												u = v;
												HX_STACK_LINE(2856)
												v = w;
												HX_STACK_LINE(2856)
												cx_ite = cx_ite->next;
											}
											HX_STACK_LINE(2856)
											::zpp_nape::geom::ZPP_Vec2 tmp18 = _this1->lverts->next;		HX_STACK_VAR(tmp18,"tmp18");
											HX_STACK_LINE(2856)
											cx_ite = tmp18;
											HX_STACK_LINE(2856)
											::zpp_nape::geom::ZPP_Vec2 w = cx_ite;		HX_STACK_VAR(w,"w");
											HX_STACK_LINE(2856)
											{
												HX_STACK_LINE(2856)
												Float tmp19 = v->x;		HX_STACK_VAR(tmp19,"tmp19");
												HX_STACK_LINE(2856)
												Float tmp20 = (w->y - u->y);		HX_STACK_VAR(tmp20,"tmp20");
												HX_STACK_LINE(2856)
												Float tmp21 = (tmp19 * tmp20);		HX_STACK_VAR(tmp21,"tmp21");
												HX_STACK_LINE(2856)
												hx::AddEq(area,tmp21);
												HX_STACK_LINE(2856)
												Float tmp22 = (w->y * v->x);		HX_STACK_VAR(tmp22,"tmp22");
												HX_STACK_LINE(2856)
												Float tmp23 = (w->x * v->y);		HX_STACK_VAR(tmp23,"tmp23");
												HX_STACK_LINE(2856)
												Float tmp24 = (tmp22 - tmp23);		HX_STACK_VAR(tmp24,"tmp24");
												HX_STACK_LINE(2856)
												Float cf = tmp24;		HX_STACK_VAR(cf,"cf");
												HX_STACK_LINE(2856)
												Float tmp25 = (v->x + w->x);		HX_STACK_VAR(tmp25,"tmp25");
												HX_STACK_LINE(2856)
												Float tmp26 = cf;		HX_STACK_VAR(tmp26,"tmp26");
												HX_STACK_LINE(2856)
												Float tmp27 = (tmp25 * tmp26);		HX_STACK_VAR(tmp27,"tmp27");
												HX_STACK_LINE(2856)
												hx::AddEq(_this1->localCOMx,tmp27);
												HX_STACK_LINE(2856)
												Float tmp28 = (v->y + w->y);		HX_STACK_VAR(tmp28,"tmp28");
												HX_STACK_LINE(2856)
												Float tmp29 = cf;		HX_STACK_VAR(tmp29,"tmp29");
												HX_STACK_LINE(2856)
												Float tmp30 = (tmp28 * tmp29);		HX_STACK_VAR(tmp30,"tmp30");
												HX_STACK_LINE(2856)
												hx::AddEq(_this1->localCOMy,tmp30);
											}
											HX_STACK_LINE(2856)
											u = v;
											HX_STACK_LINE(2856)
											v = w;
											HX_STACK_LINE(2856)
											cx_ite = cx_ite->next;
											HX_STACK_LINE(2856)
											::zpp_nape::geom::ZPP_Vec2 w1 = cx_ite;		HX_STACK_VAR(w1,"w1");
											HX_STACK_LINE(2856)
											{
												HX_STACK_LINE(2856)
												Float tmp19 = v->x;		HX_STACK_VAR(tmp19,"tmp19");
												HX_STACK_LINE(2856)
												Float tmp20 = (w1->y - u->y);		HX_STACK_VAR(tmp20,"tmp20");
												HX_STACK_LINE(2856)
												Float tmp21 = (tmp19 * tmp20);		HX_STACK_VAR(tmp21,"tmp21");
												HX_STACK_LINE(2856)
												hx::AddEq(area,tmp21);
												HX_STACK_LINE(2856)
												Float tmp22 = (w1->y * v->x);		HX_STACK_VAR(tmp22,"tmp22");
												HX_STACK_LINE(2856)
												Float tmp23 = (w1->x * v->y);		HX_STACK_VAR(tmp23,"tmp23");
												HX_STACK_LINE(2856)
												Float tmp24 = (tmp22 - tmp23);		HX_STACK_VAR(tmp24,"tmp24");
												HX_STACK_LINE(2856)
												Float cf = tmp24;		HX_STACK_VAR(cf,"cf");
												HX_STACK_LINE(2856)
												Float tmp25 = (v->x + w1->x);		HX_STACK_VAR(tmp25,"tmp25");
												HX_STACK_LINE(2856)
												Float tmp26 = cf;		HX_STACK_VAR(tmp26,"tmp26");
												HX_STACK_LINE(2856)
												Float tmp27 = (tmp25 * tmp26);		HX_STACK_VAR(tmp27,"tmp27");
												HX_STACK_LINE(2856)
												hx::AddEq(_this1->localCOMx,tmp27);
												HX_STACK_LINE(2856)
												Float tmp28 = (v->y + w1->y);		HX_STACK_VAR(tmp28,"tmp28");
												HX_STACK_LINE(2856)
												Float tmp29 = cf;		HX_STACK_VAR(tmp29,"tmp29");
												HX_STACK_LINE(2856)
												Float tmp30 = (tmp28 * tmp29);		HX_STACK_VAR(tmp30,"tmp30");
												HX_STACK_LINE(2856)
												hx::AddEq(_this1->localCOMy,tmp30);
											}
										}
										HX_STACK_LINE(2856)
										Float tmp17 = ((int)3 * area);		HX_STACK_VAR(tmp17,"tmp17");
										HX_STACK_LINE(2856)
										Float tmp18 = (Float((int)1) / Float(tmp17));		HX_STACK_VAR(tmp18,"tmp18");
										HX_STACK_LINE(2856)
										area = tmp18;
										HX_STACK_LINE(2856)
										{
											HX_STACK_LINE(2856)
											Float t = area;		HX_STACK_VAR(t,"t");
											HX_STACK_LINE(2856)
											hx::MultEq(_this1->localCOMx,t);
											HX_STACK_LINE(2856)
											hx::MultEq(_this1->localCOMy,t);
										}
									}
								}
							}
							HX_STACK_LINE(2856)
							bool tmp9 = (_this->wrap_localCOM != null());		HX_STACK_VAR(tmp9,"tmp9");
							HX_STACK_LINE(2856)
							if ((tmp9)){
								HX_STACK_LINE(2856)
								::zpp_nape::geom::ZPP_Vec2 tmp10 = _this->wrap_localCOM->zpp_inner;		HX_STACK_VAR(tmp10,"tmp10");
								HX_STACK_LINE(2856)
								tmp10->x = _this->localCOMx;
								HX_STACK_LINE(2856)
								::zpp_nape::geom::ZPP_Vec2 tmp11 = _this->wrap_localCOM->zpp_inner;		HX_STACK_VAR(tmp11,"tmp11");
								HX_STACK_LINE(2856)
								tmp11->y = _this->localCOMy;
								HX_STACK_LINE(2856)
								{
								}
							}
						}
					}
					HX_STACK_LINE(2856)
					{
						HX_STACK_LINE(2856)
						::zpp_nape::phys::ZPP_Body _this1 = _this->body;		HX_STACK_VAR(_this1,"_this1");
						HX_STACK_LINE(2856)
						bool tmp5 = _this1->zip_axis;		HX_STACK_VAR(tmp5,"tmp5");
						HX_STACK_LINE(2856)
						if ((tmp5)){
							HX_STACK_LINE(2856)
							_this1->zip_axis = false;
							HX_STACK_LINE(2856)
							{
								HX_STACK_LINE(2856)
								Float tmp6 = _this1->rot;		HX_STACK_VAR(tmp6,"tmp6");
								HX_STACK_LINE(2856)
								Float tmp7 = ::Math_obj::sin(tmp6);		HX_STACK_VAR(tmp7,"tmp7");
								HX_STACK_LINE(2856)
								_this1->axisx = tmp7;
								HX_STACK_LINE(2856)
								Float tmp8 = _this1->rot;		HX_STACK_VAR(tmp8,"tmp8");
								HX_STACK_LINE(2856)
								Float tmp9 = ::Math_obj::cos(tmp8);		HX_STACK_VAR(tmp9,"tmp9");
								HX_STACK_LINE(2856)
								_this1->axisy = tmp9;
								HX_STACK_LINE(2856)
								Dynamic();
							}
						}
					}
					HX_STACK_LINE(2856)
					{
						HX_STACK_LINE(2856)
						Float tmp5 = _this->body->posx;		HX_STACK_VAR(tmp5,"tmp5");
						HX_STACK_LINE(2856)
						Float tmp6 = _this->body->axisy;		HX_STACK_VAR(tmp6,"tmp6");
						HX_STACK_LINE(2856)
						Float tmp7 = _this->localCOMx;		HX_STACK_VAR(tmp7,"tmp7");
						HX_STACK_LINE(2856)
						Float tmp8 = (tmp6 * tmp7);		HX_STACK_VAR(tmp8,"tmp8");
						HX_STACK_LINE(2856)
						Float tmp9 = _this->body->axisx;		HX_STACK_VAR(tmp9,"tmp9");
						HX_STACK_LINE(2856)
						Float tmp10 = _this->localCOMy;		HX_STACK_VAR(tmp10,"tmp10");
						HX_STACK_LINE(2856)
						Float tmp11 = (tmp9 * tmp10);		HX_STACK_VAR(tmp11,"tmp11");
						HX_STACK_LINE(2856)
						Float tmp12 = (tmp8 - tmp11);		HX_STACK_VAR(tmp12,"tmp12");
						HX_STACK_LINE(2856)
						Float tmp13 = (tmp5 + tmp12);		HX_STACK_VAR(tmp13,"tmp13");
						HX_STACK_LINE(2856)
						_this->worldCOMx = tmp13;
						HX_STACK_LINE(2856)
						Float tmp14 = _this->body->posy;		HX_STACK_VAR(tmp14,"tmp14");
						HX_STACK_LINE(2856)
						Float tmp15 = _this->localCOMx;		HX_STACK_VAR(tmp15,"tmp15");
						HX_STACK_LINE(2856)
						Float tmp16 = _this->body->axisx;		HX_STACK_VAR(tmp16,"tmp16");
						HX_STACK_LINE(2856)
						Float tmp17 = (tmp15 * tmp16);		HX_STACK_VAR(tmp17,"tmp17");
						HX_STACK_LINE(2856)
						Float tmp18 = _this->localCOMy;		HX_STACK_VAR(tmp18,"tmp18");
						HX_STACK_LINE(2856)
						Float tmp19 = _this->body->axisy;		HX_STACK_VAR(tmp19,"tmp19");
						HX_STACK_LINE(2856)
						Float tmp20 = (tmp18 * tmp19);		HX_STACK_VAR(tmp20,"tmp20");
						HX_STACK_LINE(2856)
						Float tmp21 = (tmp17 + tmp20);		HX_STACK_VAR(tmp21,"tmp21");
						HX_STACK_LINE(2856)
						Float tmp22 = (tmp14 + tmp21);		HX_STACK_VAR(tmp22,"tmp22");
						HX_STACK_LINE(2856)
						_this->worldCOMy = tmp22;
					}
				}
			}
		}
		else{
			HX_STACK_LINE(2856)
			::zpp_nape::shape::ZPP_Polygon _this = shape->polygon;		HX_STACK_VAR(_this,"_this");
			HX_STACK_LINE(2856)
			bool tmp3 = _this->zip_gaxi;		HX_STACK_VAR(tmp3,"tmp3");
			HX_STACK_LINE(2856)
			if ((tmp3)){
				HX_STACK_LINE(2856)
				bool tmp4 = (_this->body != null());		HX_STACK_VAR(tmp4,"tmp4");
				HX_STACK_LINE(2856)
				if ((tmp4)){
					HX_STACK_LINE(2856)
					_this->zip_gaxi = false;
					HX_STACK_LINE(2856)
					_this->validate_laxi();
					HX_STACK_LINE(2856)
					{
						HX_STACK_LINE(2856)
						::zpp_nape::phys::ZPP_Body _this1 = _this->body;		HX_STACK_VAR(_this1,"_this1");
						HX_STACK_LINE(2856)
						bool tmp5 = _this1->zip_axis;		HX_STACK_VAR(tmp5,"tmp5");
						HX_STACK_LINE(2856)
						if ((tmp5)){
							HX_STACK_LINE(2856)
							_this1->zip_axis = false;
							HX_STACK_LINE(2856)
							{
								HX_STACK_LINE(2856)
								Float tmp6 = _this1->rot;		HX_STACK_VAR(tmp6,"tmp6");
								HX_STACK_LINE(2856)
								Float tmp7 = ::Math_obj::sin(tmp6);		HX_STACK_VAR(tmp7,"tmp7");
								HX_STACK_LINE(2856)
								_this1->axisx = tmp7;
								HX_STACK_LINE(2856)
								Float tmp8 = _this1->rot;		HX_STACK_VAR(tmp8,"tmp8");
								HX_STACK_LINE(2856)
								Float tmp9 = ::Math_obj::cos(tmp8);		HX_STACK_VAR(tmp9,"tmp9");
								HX_STACK_LINE(2856)
								_this1->axisy = tmp9;
								HX_STACK_LINE(2856)
								Dynamic();
							}
						}
					}
					HX_STACK_LINE(2856)
					{
						HX_STACK_LINE(2856)
						bool tmp5 = _this->zip_gverts;		HX_STACK_VAR(tmp5,"tmp5");
						HX_STACK_LINE(2856)
						if ((tmp5)){
							HX_STACK_LINE(2856)
							bool tmp6 = (_this->body != null());		HX_STACK_VAR(tmp6,"tmp6");
							HX_STACK_LINE(2856)
							if ((tmp6)){
								HX_STACK_LINE(2856)
								_this->zip_gverts = false;
								HX_STACK_LINE(2856)
								_this->validate_lverts();
								HX_STACK_LINE(2856)
								{
									HX_STACK_LINE(2856)
									::zpp_nape::phys::ZPP_Body _this1 = _this->body;		HX_STACK_VAR(_this1,"_this1");
									HX_STACK_LINE(2856)
									bool tmp7 = _this1->zip_axis;		HX_STACK_VAR(tmp7,"tmp7");
									HX_STACK_LINE(2856)
									if ((tmp7)){
										HX_STACK_LINE(2856)
										_this1->zip_axis = false;
										HX_STACK_LINE(2856)
										{
											HX_STACK_LINE(2856)
											Float tmp8 = _this1->rot;		HX_STACK_VAR(tmp8,"tmp8");
											HX_STACK_LINE(2856)
											Float tmp9 = ::Math_obj::sin(tmp8);		HX_STACK_VAR(tmp9,"tmp9");
											HX_STACK_LINE(2856)
											_this1->axisx = tmp9;
											HX_STACK_LINE(2856)
											Float tmp10 = _this1->rot;		HX_STACK_VAR(tmp10,"tmp10");
											HX_STACK_LINE(2856)
											Float tmp11 = ::Math_obj::cos(tmp10);		HX_STACK_VAR(tmp11,"tmp11");
											HX_STACK_LINE(2856)
											_this1->axisy = tmp11;
											HX_STACK_LINE(2856)
											Dynamic();
										}
									}
								}
								HX_STACK_LINE(2856)
								::zpp_nape::geom::ZPP_Vec2 tmp7 = _this->lverts->next;		HX_STACK_VAR(tmp7,"tmp7");
								HX_STACK_LINE(2856)
								::zpp_nape::geom::ZPP_Vec2 li = tmp7;		HX_STACK_VAR(li,"li");
								HX_STACK_LINE(2856)
								{
									HX_STACK_LINE(2856)
									::zpp_nape::geom::ZPP_Vec2 tmp8 = _this->gverts->next;		HX_STACK_VAR(tmp8,"tmp8");
									HX_STACK_LINE(2856)
									::zpp_nape::geom::ZPP_Vec2 cx_ite = tmp8;		HX_STACK_VAR(cx_ite,"cx_ite");
									HX_STACK_LINE(2856)
									while((true)){
										HX_STACK_LINE(2856)
										bool tmp9 = (cx_ite != null());		HX_STACK_VAR(tmp9,"tmp9");
										HX_STACK_LINE(2856)
										bool tmp10 = !(tmp9);		HX_STACK_VAR(tmp10,"tmp10");
										HX_STACK_LINE(2856)
										if ((tmp10)){
											HX_STACK_LINE(2856)
											break;
										}
										HX_STACK_LINE(2856)
										::zpp_nape::geom::ZPP_Vec2 g = cx_ite;		HX_STACK_VAR(g,"g");
										HX_STACK_LINE(2856)
										{
											HX_STACK_LINE(2856)
											::zpp_nape::geom::ZPP_Vec2 l = li;		HX_STACK_VAR(l,"l");
											HX_STACK_LINE(2856)
											li = li->next;
											HX_STACK_LINE(2856)
											{
												HX_STACK_LINE(2856)
												Float tmp11 = _this->body->posx;		HX_STACK_VAR(tmp11,"tmp11");
												HX_STACK_LINE(2856)
												Float tmp12 = _this->body->axisy;		HX_STACK_VAR(tmp12,"tmp12");
												HX_STACK_LINE(2856)
												Float tmp13 = l->x;		HX_STACK_VAR(tmp13,"tmp13");
												HX_STACK_LINE(2856)
												Float tmp14 = (tmp12 * tmp13);		HX_STACK_VAR(tmp14,"tmp14");
												HX_STACK_LINE(2856)
												Float tmp15 = _this->body->axisx;		HX_STACK_VAR(tmp15,"tmp15");
												HX_STACK_LINE(2856)
												Float tmp16 = l->y;		HX_STACK_VAR(tmp16,"tmp16");
												HX_STACK_LINE(2856)
												Float tmp17 = (tmp15 * tmp16);		HX_STACK_VAR(tmp17,"tmp17");
												HX_STACK_LINE(2856)
												Float tmp18 = (tmp14 - tmp17);		HX_STACK_VAR(tmp18,"tmp18");
												HX_STACK_LINE(2856)
												Float tmp19 = (tmp11 + tmp18);		HX_STACK_VAR(tmp19,"tmp19");
												HX_STACK_LINE(2856)
												g->x = tmp19;
												HX_STACK_LINE(2856)
												Float tmp20 = _this->body->posy;		HX_STACK_VAR(tmp20,"tmp20");
												HX_STACK_LINE(2856)
												Float tmp21 = l->x;		HX_STACK_VAR(tmp21,"tmp21");
												HX_STACK_LINE(2856)
												Float tmp22 = _this->body->axisx;		HX_STACK_VAR(tmp22,"tmp22");
												HX_STACK_LINE(2856)
												Float tmp23 = (tmp21 * tmp22);		HX_STACK_VAR(tmp23,"tmp23");
												HX_STACK_LINE(2856)
												Float tmp24 = l->y;		HX_STACK_VAR(tmp24,"tmp24");
												HX_STACK_LINE(2856)
												Float tmp25 = _this->body->axisy;		HX_STACK_VAR(tmp25,"tmp25");
												HX_STACK_LINE(2856)
												Float tmp26 = (tmp24 * tmp25);		HX_STACK_VAR(tmp26,"tmp26");
												HX_STACK_LINE(2856)
												Float tmp27 = (tmp23 + tmp26);		HX_STACK_VAR(tmp27,"tmp27");
												HX_STACK_LINE(2856)
												Float tmp28 = (tmp20 + tmp27);		HX_STACK_VAR(tmp28,"tmp28");
												HX_STACK_LINE(2856)
												g->y = tmp28;
											}
										}
										HX_STACK_LINE(2856)
										cx_ite = cx_ite->next;
									}
								}
							}
						}
					}
					HX_STACK_LINE(2856)
					::zpp_nape::util::ZNPNode_ZPP_Edge tmp5 = _this->edges->head;		HX_STACK_VAR(tmp5,"tmp5");
					HX_STACK_LINE(2856)
					::zpp_nape::util::ZNPNode_ZPP_Edge ite = tmp5;		HX_STACK_VAR(ite,"ite");
					HX_STACK_LINE(2856)
					{
						HX_STACK_LINE(2856)
						::zpp_nape::geom::ZPP_Vec2 tmp6 = _this->gverts->next;		HX_STACK_VAR(tmp6,"tmp6");
						HX_STACK_LINE(2856)
						::zpp_nape::geom::ZPP_Vec2 cx_ite = tmp6;		HX_STACK_VAR(cx_ite,"cx_ite");
						HX_STACK_LINE(2856)
						::zpp_nape::geom::ZPP_Vec2 u = cx_ite;		HX_STACK_VAR(u,"u");
						HX_STACK_LINE(2856)
						cx_ite = cx_ite->next;
						HX_STACK_LINE(2856)
						while((true)){
							HX_STACK_LINE(2856)
							bool tmp7 = (cx_ite != null());		HX_STACK_VAR(tmp7,"tmp7");
							HX_STACK_LINE(2856)
							bool tmp8 = !(tmp7);		HX_STACK_VAR(tmp8,"tmp8");
							HX_STACK_LINE(2856)
							if ((tmp8)){
								HX_STACK_LINE(2856)
								break;
							}
							HX_STACK_LINE(2856)
							::zpp_nape::geom::ZPP_Vec2 v = cx_ite;		HX_STACK_VAR(v,"v");
							HX_STACK_LINE(2856)
							{
								HX_STACK_LINE(2856)
								::zpp_nape::shape::ZPP_Edge e = ite->elt;		HX_STACK_VAR(e,"e");
								HX_STACK_LINE(2856)
								ite = ite->next;
								HX_STACK_LINE(2856)
								e->gp0 = u;
								HX_STACK_LINE(2856)
								e->gp1 = v;
								HX_STACK_LINE(2856)
								{
									HX_STACK_LINE(2856)
									Float tmp9 = _this->body->axisy;		HX_STACK_VAR(tmp9,"tmp9");
									HX_STACK_LINE(2856)
									Float tmp10 = e->lnormx;		HX_STACK_VAR(tmp10,"tmp10");
									HX_STACK_LINE(2856)
									Float tmp11 = (tmp9 * tmp10);		HX_STACK_VAR(tmp11,"tmp11");
									HX_STACK_LINE(2856)
									Float tmp12 = _this->body->axisx;		HX_STACK_VAR(tmp12,"tmp12");
									HX_STACK_LINE(2856)
									Float tmp13 = e->lnormy;		HX_STACK_VAR(tmp13,"tmp13");
									HX_STACK_LINE(2856)
									Float tmp14 = (tmp12 * tmp13);		HX_STACK_VAR(tmp14,"tmp14");
									HX_STACK_LINE(2856)
									Float tmp15 = (tmp11 - tmp14);		HX_STACK_VAR(tmp15,"tmp15");
									HX_STACK_LINE(2856)
									e->gnormx = tmp15;
									HX_STACK_LINE(2856)
									Float tmp16 = e->lnormx;		HX_STACK_VAR(tmp16,"tmp16");
									HX_STACK_LINE(2856)
									Float tmp17 = _this->body->axisx;		HX_STACK_VAR(tmp17,"tmp17");
									HX_STACK_LINE(2856)
									Float tmp18 = (tmp16 * tmp17);		HX_STACK_VAR(tmp18,"tmp18");
									HX_STACK_LINE(2856)
									Float tmp19 = e->lnormy;		HX_STACK_VAR(tmp19,"tmp19");
									HX_STACK_LINE(2856)
									Float tmp20 = _this->body->axisy;		HX_STACK_VAR(tmp20,"tmp20");
									HX_STACK_LINE(2856)
									Float tmp21 = (tmp19 * tmp20);		HX_STACK_VAR(tmp21,"tmp21");
									HX_STACK_LINE(2856)
									Float tmp22 = (tmp18 + tmp21);		HX_STACK_VAR(tmp22,"tmp22");
									HX_STACK_LINE(2856)
									e->gnormy = tmp22;
								}
								HX_STACK_LINE(2856)
								Float tmp9 = _this->body->posx;		HX_STACK_VAR(tmp9,"tmp9");
								HX_STACK_LINE(2856)
								Float tmp10 = e->gnormx;		HX_STACK_VAR(tmp10,"tmp10");
								HX_STACK_LINE(2856)
								Float tmp11 = (tmp9 * tmp10);		HX_STACK_VAR(tmp11,"tmp11");
								HX_STACK_LINE(2856)
								Float tmp12 = _this->body->posy;		HX_STACK_VAR(tmp12,"tmp12");
								HX_STACK_LINE(2856)
								Float tmp13 = e->gnormy;		HX_STACK_VAR(tmp13,"tmp13");
								HX_STACK_LINE(2856)
								Float tmp14 = (tmp12 * tmp13);		HX_STACK_VAR(tmp14,"tmp14");
								HX_STACK_LINE(2856)
								Float tmp15 = (tmp11 + tmp14);		HX_STACK_VAR(tmp15,"tmp15");
								HX_STACK_LINE(2856)
								Float tmp16 = e->lprojection;		HX_STACK_VAR(tmp16,"tmp16");
								HX_STACK_LINE(2856)
								Float tmp17 = (tmp15 + tmp16);		HX_STACK_VAR(tmp17,"tmp17");
								HX_STACK_LINE(2856)
								e->gprojection = tmp17;
								HX_STACK_LINE(2856)
								bool tmp18 = (e->wrap_gnorm != null());		HX_STACK_VAR(tmp18,"tmp18");
								HX_STACK_LINE(2856)
								if ((tmp18)){
									HX_STACK_LINE(2856)
									::zpp_nape::geom::ZPP_Vec2 tmp19 = e->wrap_gnorm->zpp_inner;		HX_STACK_VAR(tmp19,"tmp19");
									HX_STACK_LINE(2856)
									tmp19->x = e->gnormx;
									HX_STACK_LINE(2856)
									::zpp_nape::geom::ZPP_Vec2 tmp20 = e->wrap_gnorm->zpp_inner;		HX_STACK_VAR(tmp20,"tmp20");
									HX_STACK_LINE(2856)
									tmp20->y = e->gnormy;
									HX_STACK_LINE(2856)
									{
									}
								}
								HX_STACK_LINE(2856)
								Float tmp19 = e->gp0->y;		HX_STACK_VAR(tmp19,"tmp19");
								HX_STACK_LINE(2856)
								Float tmp20 = e->gnormx;		HX_STACK_VAR(tmp20,"tmp20");
								HX_STACK_LINE(2856)
								Float tmp21 = (tmp19 * tmp20);		HX_STACK_VAR(tmp21,"tmp21");
								HX_STACK_LINE(2856)
								Float tmp22 = e->gp0->x;		HX_STACK_VAR(tmp22,"tmp22");
								HX_STACK_LINE(2856)
								Float tmp23 = e->gnormy;		HX_STACK_VAR(tmp23,"tmp23");
								HX_STACK_LINE(2856)
								Float tmp24 = (tmp22 * tmp23);		HX_STACK_VAR(tmp24,"tmp24");
								HX_STACK_LINE(2856)
								Float tmp25 = (tmp21 - tmp24);		HX_STACK_VAR(tmp25,"tmp25");
								HX_STACK_LINE(2856)
								e->tp0 = tmp25;
								HX_STACK_LINE(2856)
								Float tmp26 = e->gp1->y;		HX_STACK_VAR(tmp26,"tmp26");
								HX_STACK_LINE(2856)
								Float tmp27 = e->gnormx;		HX_STACK_VAR(tmp27,"tmp27");
								HX_STACK_LINE(2856)
								Float tmp28 = (tmp26 * tmp27);		HX_STACK_VAR(tmp28,"tmp28");
								HX_STACK_LINE(2856)
								Float tmp29 = e->gp1->x;		HX_STACK_VAR(tmp29,"tmp29");
								HX_STACK_LINE(2856)
								Float tmp30 = e->gnormy;		HX_STACK_VAR(tmp30,"tmp30");
								HX_STACK_LINE(2856)
								Float tmp31 = (tmp29 * tmp30);		HX_STACK_VAR(tmp31,"tmp31");
								HX_STACK_LINE(2856)
								Float tmp32 = (tmp28 - tmp31);		HX_STACK_VAR(tmp32,"tmp32");
								HX_STACK_LINE(2856)
								e->tp1 = tmp32;
							}
							HX_STACK_LINE(2856)
							u = v;
							HX_STACK_LINE(2856)
							cx_ite = cx_ite->next;
						}
						HX_STACK_LINE(2856)
						::zpp_nape::geom::ZPP_Vec2 tmp7 = _this->gverts->next;		HX_STACK_VAR(tmp7,"tmp7");
						HX_STACK_LINE(2856)
						::zpp_nape::geom::ZPP_Vec2 v = tmp7;		HX_STACK_VAR(v,"v");
						HX_STACK_LINE(2856)
						{
							HX_STACK_LINE(2856)
							::zpp_nape::shape::ZPP_Edge e = ite->elt;		HX_STACK_VAR(e,"e");
							HX_STACK_LINE(2856)
							ite = ite->next;
							HX_STACK_LINE(2856)
							e->gp0 = u;
							HX_STACK_LINE(2856)
							e->gp1 = v;
							HX_STACK_LINE(2856)
							{
								HX_STACK_LINE(2856)
								Float tmp8 = _this->body->axisy;		HX_STACK_VAR(tmp8,"tmp8");
								HX_STACK_LINE(2856)
								Float tmp9 = e->lnormx;		HX_STACK_VAR(tmp9,"tmp9");
								HX_STACK_LINE(2856)
								Float tmp10 = (tmp8 * tmp9);		HX_STACK_VAR(tmp10,"tmp10");
								HX_STACK_LINE(2856)
								Float tmp11 = _this->body->axisx;		HX_STACK_VAR(tmp11,"tmp11");
								HX_STACK_LINE(2856)
								Float tmp12 = e->lnormy;		HX_STACK_VAR(tmp12,"tmp12");
								HX_STACK_LINE(2856)
								Float tmp13 = (tmp11 * tmp12);		HX_STACK_VAR(tmp13,"tmp13");
								HX_STACK_LINE(2856)
								Float tmp14 = (tmp10 - tmp13);		HX_STACK_VAR(tmp14,"tmp14");
								HX_STACK_LINE(2856)
								e->gnormx = tmp14;
								HX_STACK_LINE(2856)
								Float tmp15 = e->lnormx;		HX_STACK_VAR(tmp15,"tmp15");
								HX_STACK_LINE(2856)
								Float tmp16 = _this->body->axisx;		HX_STACK_VAR(tmp16,"tmp16");
								HX_STACK_LINE(2856)
								Float tmp17 = (tmp15 * tmp16);		HX_STACK_VAR(tmp17,"tmp17");
								HX_STACK_LINE(2856)
								Float tmp18 = e->lnormy;		HX_STACK_VAR(tmp18,"tmp18");
								HX_STACK_LINE(2856)
								Float tmp19 = _this->body->axisy;		HX_STACK_VAR(tmp19,"tmp19");
								HX_STACK_LINE(2856)
								Float tmp20 = (tmp18 * tmp19);		HX_STACK_VAR(tmp20,"tmp20");
								HX_STACK_LINE(2856)
								Float tmp21 = (tmp17 + tmp20);		HX_STACK_VAR(tmp21,"tmp21");
								HX_STACK_LINE(2856)
								e->gnormy = tmp21;
							}
							HX_STACK_LINE(2856)
							Float tmp8 = _this->body->posx;		HX_STACK_VAR(tmp8,"tmp8");
							HX_STACK_LINE(2856)
							Float tmp9 = e->gnormx;		HX_STACK_VAR(tmp9,"tmp9");
							HX_STACK_LINE(2856)
							Float tmp10 = (tmp8 * tmp9);		HX_STACK_VAR(tmp10,"tmp10");
							HX_STACK_LINE(2856)
							Float tmp11 = _this->body->posy;		HX_STACK_VAR(tmp11,"tmp11");
							HX_STACK_LINE(2856)
							Float tmp12 = e->gnormy;		HX_STACK_VAR(tmp12,"tmp12");
							HX_STACK_LINE(2856)
							Float tmp13 = (tmp11 * tmp12);		HX_STACK_VAR(tmp13,"tmp13");
							HX_STACK_LINE(2856)
							Float tmp14 = (tmp10 + tmp13);		HX_STACK_VAR(tmp14,"tmp14");
							HX_STACK_LINE(2856)
							Float tmp15 = e->lprojection;		HX_STACK_VAR(tmp15,"tmp15");
							HX_STACK_LINE(2856)
							Float tmp16 = (tmp14 + tmp15);		HX_STACK_VAR(tmp16,"tmp16");
							HX_STACK_LINE(2856)
							e->gprojection = tmp16;
							HX_STACK_LINE(2856)
							bool tmp17 = (e->wrap_gnorm != null());		HX_STACK_VAR(tmp17,"tmp17");
							HX_STACK_LINE(2856)
							if ((tmp17)){
								HX_STACK_LINE(2856)
								::zpp_nape::geom::ZPP_Vec2 tmp18 = e->wrap_gnorm->zpp_inner;		HX_STACK_VAR(tmp18,"tmp18");
								HX_STACK_LINE(2856)
								tmp18->x = e->gnormx;
								HX_STACK_LINE(2856)
								::zpp_nape::geom::ZPP_Vec2 tmp19 = e->wrap_gnorm->zpp_inner;		HX_STACK_VAR(tmp19,"tmp19");
								HX_STACK_LINE(2856)
								tmp19->y = e->gnormy;
								HX_STACK_LINE(2856)
								{
								}
							}
							HX_STACK_LINE(2856)
							Float tmp18 = e->gp0->y;		HX_STACK_VAR(tmp18,"tmp18");
							HX_STACK_LINE(2856)
							Float tmp19 = e->gnormx;		HX_STACK_VAR(tmp19,"tmp19");
							HX_STACK_LINE(2856)
							Float tmp20 = (tmp18 * tmp19);		HX_STACK_VAR(tmp20,"tmp20");
							HX_STACK_LINE(2856)
							Float tmp21 = e->gp0->x;		HX_STACK_VAR(tmp21,"tmp21");
							HX_STACK_LINE(2856)
							Float tmp22 = e->gnormy;		HX_STACK_VAR(tmp22,"tmp22");
							HX_STACK_LINE(2856)
							Float tmp23 = (tmp21 * tmp22);		HX_STACK_VAR(tmp23,"tmp23");
							HX_STACK_LINE(2856)
							Float tmp24 = (tmp20 - tmp23);		HX_STACK_VAR(tmp24,"tmp24");
							HX_STACK_LINE(2856)
							e->tp0 = tmp24;
							HX_STACK_LINE(2856)
							Float tmp25 = e->gp1->y;		HX_STACK_VAR(tmp25,"tmp25");
							HX_STACK_LINE(2856)
							Float tmp26 = e->gnormx;		HX_STACK_VAR(tmp26,"tmp26");
							HX_STACK_LINE(2856)
							Float tmp27 = (tmp25 * tmp26);		HX_STACK_VAR(tmp27,"tmp27");
							HX_STACK_LINE(2856)
							Float tmp28 = e->gp1->x;		HX_STACK_VAR(tmp28,"tmp28");
							HX_STACK_LINE(2856)
							Float tmp29 = e->gnormy;		HX_STACK_VAR(tmp29,"tmp29");
							HX_STACK_LINE(2856)
							Float tmp30 = (tmp28 * tmp29);		HX_STACK_VAR(tmp30,"tmp30");
							HX_STACK_LINE(2856)
							Float tmp31 = (tmp27 - tmp30);		HX_STACK_VAR(tmp31,"tmp31");
							HX_STACK_LINE(2856)
							e->tp1 = tmp31;
						}
					}
				}
			}
		}
	}
	HX_STACK_LINE(2857)
	::zpp_nape::phys::ZPP_Body body = shape->body;		HX_STACK_VAR(body,"body");
	HX_STACK_LINE(2858)
	Float prex = body->posx;		HX_STACK_VAR(prex,"prex");
	HX_STACK_LINE(2859)
	Float prey = body->posy;		HX_STACK_VAR(prey,"prey");
	HX_STACK_LINE(2860)
	body->sweepTime = (int)0;
	HX_STACK_LINE(2861)
	body->sweep_angvel = body->angvel;
	HX_STACK_LINE(2862)
	{
		HX_STACK_LINE(2862)
		Float tmp = (deltaTime - body->sweepTime);		HX_STACK_VAR(tmp,"tmp");
		HX_STACK_LINE(2862)
		Float delta = tmp;		HX_STACK_VAR(delta,"delta");
		HX_STACK_LINE(2862)
		bool tmp1 = (delta != (int)0);		HX_STACK_VAR(tmp1,"tmp1");
		HX_STACK_LINE(2862)
		if ((tmp1)){
			HX_STACK_LINE(2862)
			body->sweepTime = deltaTime;
			HX_STACK_LINE(2862)
			{
				HX_STACK_LINE(2862)
				Float t = delta;		HX_STACK_VAR(t,"t");
				HX_STACK_LINE(2862)
				Float tmp2 = (body->velx * t);		HX_STACK_VAR(tmp2,"tmp2");
				HX_STACK_LINE(2862)
				hx::AddEq(body->posx,tmp2);
				HX_STACK_LINE(2862)
				Float tmp3 = (body->vely * t);		HX_STACK_VAR(tmp3,"tmp3");
				HX_STACK_LINE(2862)
				hx::AddEq(body->posy,tmp3);
			}
			HX_STACK_LINE(2862)
			bool tmp2 = (body->angvel != (int)0);		HX_STACK_VAR(tmp2,"tmp2");
			HX_STACK_LINE(2862)
			if ((tmp2)){
				HX_STACK_LINE(2862)
				Float tmp3 = (body->sweep_angvel * delta);		HX_STACK_VAR(tmp3,"tmp3");
				HX_STACK_LINE(2862)
				Float dr = tmp3;		HX_STACK_VAR(dr,"dr");
				HX_STACK_LINE(2862)
				hx::AddEq(body->rot,dr);
				HX_STACK_LINE(2862)
				Float tmp4 = (dr * dr);		HX_STACK_VAR(tmp4,"tmp4");
				HX_STACK_LINE(2862)
				bool tmp5 = (tmp4 > ((Float)0.0001));		HX_STACK_VAR(tmp5,"tmp5");
				HX_STACK_LINE(2862)
				if ((tmp5)){
					HX_STACK_LINE(2862)
					Float tmp6 = body->rot;		HX_STACK_VAR(tmp6,"tmp6");
					HX_STACK_LINE(2862)
					Float tmp7 = ::Math_obj::sin(tmp6);		HX_STACK_VAR(tmp7,"tmp7");
					HX_STACK_LINE(2862)
					body->axisx = tmp7;
					HX_STACK_LINE(2862)
					Float tmp8 = body->rot;		HX_STACK_VAR(tmp8,"tmp8");
					HX_STACK_LINE(2862)
					Float tmp9 = ::Math_obj::cos(tmp8);		HX_STACK_VAR(tmp9,"tmp9");
					HX_STACK_LINE(2862)
					body->axisy = tmp9;
					HX_STACK_LINE(2862)
					Dynamic();
				}
				else{
					HX_STACK_LINE(2862)
					Float tmp6 = (dr * dr);		HX_STACK_VAR(tmp6,"tmp6");
					HX_STACK_LINE(2862)
					Float d2 = tmp6;		HX_STACK_VAR(d2,"d2");
					HX_STACK_LINE(2862)
					Float tmp7 = (((Float)0.5) * d2);		HX_STACK_VAR(tmp7,"tmp7");
					HX_STACK_LINE(2862)
					Float tmp8 = ((int)1 - tmp7);		HX_STACK_VAR(tmp8,"tmp8");
					HX_STACK_LINE(2862)
					Float p = tmp8;		HX_STACK_VAR(p,"p");
					HX_STACK_LINE(2862)
					Float tmp9 = (d2 * d2);		HX_STACK_VAR(tmp9,"tmp9");
					HX_STACK_LINE(2862)
					Float tmp10 = (Float(tmp9) / Float((int)8));		HX_STACK_VAR(tmp10,"tmp10");
					HX_STACK_LINE(2862)
					Float tmp11 = ((int)1 - tmp10);		HX_STACK_VAR(tmp11,"tmp11");
					HX_STACK_LINE(2862)
					Float m = tmp11;		HX_STACK_VAR(m,"m");
					HX_STACK_LINE(2862)
					Float tmp12 = (p * body->axisx);		HX_STACK_VAR(tmp12,"tmp12");
					HX_STACK_LINE(2862)
					Float tmp13 = (dr * body->axisy);		HX_STACK_VAR(tmp13,"tmp13");
					HX_STACK_LINE(2862)
					Float tmp14 = (tmp12 + tmp13);		HX_STACK_VAR(tmp14,"tmp14");
					HX_STACK_LINE(2862)
					Float tmp15 = m;		HX_STACK_VAR(tmp15,"tmp15");
					HX_STACK_LINE(2862)
					Float tmp16 = (tmp14 * tmp15);		HX_STACK_VAR(tmp16,"tmp16");
					HX_STACK_LINE(2862)
					Float nx = tmp16;		HX_STACK_VAR(nx,"nx");
					HX_STACK_LINE(2862)
					Float tmp17 = (p * body->axisy);		HX_STACK_VAR(tmp17,"tmp17");
					HX_STACK_LINE(2862)
					Float tmp18 = (dr * body->axisx);		HX_STACK_VAR(tmp18,"tmp18");
					HX_STACK_LINE(2862)
					Float tmp19 = (tmp17 - tmp18);		HX_STACK_VAR(tmp19,"tmp19");
					HX_STACK_LINE(2862)
					Float tmp20 = m;		HX_STACK_VAR(tmp20,"tmp20");
					HX_STACK_LINE(2862)
					Float tmp21 = (tmp19 * tmp20);		HX_STACK_VAR(tmp21,"tmp21");
					HX_STACK_LINE(2862)
					body->axisy = tmp21;
					HX_STACK_LINE(2862)
					body->axisx = nx;
				}
			}
		}
	}
	HX_STACK_LINE(2863)
	Float postx = body->posx;		HX_STACK_VAR(postx,"postx");
	HX_STACK_LINE(2864)
	Float posty = body->posy;		HX_STACK_VAR(posty,"posty");
	HX_STACK_LINE(2865)
	shape->validate_sweepRadius();
	HX_STACK_LINE(2866)
	Float rad = shape->sweepRadius;		HX_STACK_VAR(rad,"rad");
	HX_STACK_LINE(2867)
	::zpp_nape::geom::ZPP_AABB aabb;		HX_STACK_VAR(aabb,"aabb");
	HX_STACK_LINE(2868)
	{
		HX_STACK_LINE(2869)
		::zpp_nape::geom::ZPP_AABB tmp = ::zpp_nape::geom::ZPP_AABB_obj::zpp_pool;		HX_STACK_VAR(tmp,"tmp");
		HX_STACK_LINE(2869)
		bool tmp1 = (tmp == null());		HX_STACK_VAR(tmp1,"tmp1");
		HX_STACK_LINE(2869)
		if ((tmp1)){
			HX_STACK_LINE(2870)
			::zpp_nape::geom::ZPP_AABB tmp2 = ::zpp_nape::geom::ZPP_AABB_obj::__new();		HX_STACK_VAR(tmp2,"tmp2");
			HX_STACK_LINE(2870)
			aabb = tmp2;
		}
		else{
			HX_STACK_LINE(2876)
			::zpp_nape::geom::ZPP_AABB tmp2 = ::zpp_nape::geom::ZPP_AABB_obj::zpp_pool;		HX_STACK_VAR(tmp2,"tmp2");
			HX_STACK_LINE(2876)
			aabb = tmp2;
			HX_STACK_LINE(2877)
			::zpp_nape::geom::ZPP_AABB_obj::zpp_pool = aabb->next;
			HX_STACK_LINE(2878)
			aabb->next = null();
		}
		HX_STACK_LINE(2883)
		Dynamic();
	}
	HX_STACK_LINE(2885)
	Float tmp;		HX_STACK_VAR(tmp,"tmp");
	HX_STACK_LINE(2885)
	{
		HX_STACK_LINE(2886)
		Float x = prex;		HX_STACK_VAR(x,"x");
		HX_STACK_LINE(2887)
		Float y = postx;		HX_STACK_VAR(y,"y");
		HX_STACK_LINE(2888)
		bool tmp1 = (x < y);		HX_STACK_VAR(tmp1,"tmp1");
		HX_STACK_LINE(2888)
		if ((tmp1)){
			HX_STACK_LINE(2888)
			tmp = x;
		}
		else{
			HX_STACK_LINE(2888)
			tmp = y;
		}
	}
	HX_STACK_LINE(2889)
	Float tmp1 = rad;		HX_STACK_VAR(tmp1,"tmp1");
	HX_STACK_LINE(2885)
	Float tmp2 = (tmp - tmp1);		HX_STACK_VAR(tmp2,"tmp2");
	HX_STACK_LINE(2885)
	aabb->minx = tmp2;
	HX_STACK_LINE(2890)
	Float tmp3;		HX_STACK_VAR(tmp3,"tmp3");
	HX_STACK_LINE(2890)
	{
		HX_STACK_LINE(2891)
		Float x = prex;		HX_STACK_VAR(x,"x");
		HX_STACK_LINE(2892)
		Float y = postx;		HX_STACK_VAR(y,"y");
		HX_STACK_LINE(2893)
		bool tmp4 = (x > y);		HX_STACK_VAR(tmp4,"tmp4");
		HX_STACK_LINE(2893)
		if ((tmp4)){
			HX_STACK_LINE(2893)
			tmp3 = x;
		}
		else{
			HX_STACK_LINE(2893)
			tmp3 = y;
		}
	}
	HX_STACK_LINE(2894)
	Float tmp4 = rad;		HX_STACK_VAR(tmp4,"tmp4");
	HX_STACK_LINE(2890)
	Float tmp5 = (tmp3 + tmp4);		HX_STACK_VAR(tmp5,"tmp5");
	HX_STACK_LINE(2890)
	aabb->maxx = tmp5;
	HX_STACK_LINE(2895)
	Float tmp6;		HX_STACK_VAR(tmp6,"tmp6");
	HX_STACK_LINE(2895)
	{
		HX_STACK_LINE(2896)
		Float x = prey;		HX_STACK_VAR(x,"x");
		HX_STACK_LINE(2897)
		Float y = posty;		HX_STACK_VAR(y,"y");
		HX_STACK_LINE(2898)
		bool tmp7 = (x < y);		HX_STACK_VAR(tmp7,"tmp7");
		HX_STACK_LINE(2898)
		if ((tmp7)){
			HX_STACK_LINE(2898)
			tmp6 = x;
		}
		else{
			HX_STACK_LINE(2898)
			tmp6 = y;
		}
	}
	HX_STACK_LINE(2899)
	Float tmp7 = rad;		HX_STACK_VAR(tmp7,"tmp7");
	HX_STACK_LINE(2895)
	Float tmp8 = (tmp6 - tmp7);		HX_STACK_VAR(tmp8,"tmp8");
	HX_STACK_LINE(2895)
	aabb->miny = tmp8;
	HX_STACK_LINE(2900)
	Float tmp9;		HX_STACK_VAR(tmp9,"tmp9");
	HX_STACK_LINE(2900)
	{
		HX_STACK_LINE(2901)
		Float x = prey;		HX_STACK_VAR(x,"x");
		HX_STACK_LINE(2902)
		Float y = posty;		HX_STACK_VAR(y,"y");
		HX_STACK_LINE(2903)
		bool tmp10 = (x > y);		HX_STACK_VAR(tmp10,"tmp10");
		HX_STACK_LINE(2903)
		if ((tmp10)){
			HX_STACK_LINE(2903)
			tmp9 = x;
		}
		else{
			HX_STACK_LINE(2903)
			tmp9 = y;
		}
	}
	HX_STACK_LINE(2904)
	Float tmp10 = rad;		HX_STACK_VAR(tmp10,"tmp10");
	HX_STACK_LINE(2900)
	Float tmp11 = (tmp9 + tmp10);		HX_STACK_VAR(tmp11,"tmp11");
	HX_STACK_LINE(2900)
	aabb->maxy = tmp11;
	HX_STACK_LINE(2905)
	::zpp_nape::space::ZPP_Broadphase tmp12 = this->bphase;		HX_STACK_VAR(tmp12,"tmp12");
	HX_STACK_LINE(2905)
	::zpp_nape::geom::ZPP_AABB tmp13 = aabb;		HX_STACK_VAR(tmp13,"tmp13");
	HX_STACK_LINE(2905)
	bool tmp14 = (filter == null());		HX_STACK_VAR(tmp14,"tmp14");
	HX_STACK_LINE(2905)
	::zpp_nape::dynamics::ZPP_InteractionFilter tmp15;		HX_STACK_VAR(tmp15,"tmp15");
	HX_STACK_LINE(2905)
	if ((tmp14)){
		HX_STACK_LINE(2905)
		tmp15 = null();
	}
	else{
		HX_STACK_LINE(2905)
		tmp15 = filter->zpp_inner;
	}
	HX_STACK_LINE(2905)
	::nape::shape::ShapeList tmp16 = this->convexShapeList;		HX_STACK_VAR(tmp16,"tmp16");
	HX_STACK_LINE(2905)
	::nape::shape::ShapeList tmp17 = tmp12->shapesInAABB(tmp13,false,false,tmp15,tmp16);		HX_STACK_VAR(tmp17,"tmp17");
	HX_STACK_LINE(2905)
	::nape::shape::ShapeList tmp18 = this->convexShapeList = tmp17;		HX_STACK_VAR(tmp18,"tmp18");
	HX_STACK_LINE(2905)
	::nape::shape::ShapeList list = tmp18;		HX_STACK_VAR(list,"list");
	HX_STACK_LINE(2906)
	{
		HX_STACK_LINE(2907)
		::zpp_nape::geom::ZPP_AABB o = aabb;		HX_STACK_VAR(o,"o");
		HX_STACK_LINE(2916)
		{
			HX_STACK_LINE(2916)
			bool tmp19 = (o->outer != null());		HX_STACK_VAR(tmp19,"tmp19");
			HX_STACK_LINE(2916)
			if ((tmp19)){
				HX_STACK_LINE(2916)
				o->outer->zpp_inner = null();
				HX_STACK_LINE(2916)
				o->outer = null();
			}
			HX_STACK_LINE(2916)
			::nape::geom::Vec2 tmp20 = o->wrap_max = null();		HX_STACK_VAR(tmp20,"tmp20");
			HX_STACK_LINE(2916)
			o->wrap_min = tmp20;
			HX_STACK_LINE(2916)
			o->_invalidate = null();
			HX_STACK_LINE(2916)
			o->_validate = null();
		}
		HX_STACK_LINE(2917)
		::zpp_nape::geom::ZPP_AABB tmp19 = ::zpp_nape::geom::ZPP_AABB_obj::zpp_pool;		HX_STACK_VAR(tmp19,"tmp19");
		HX_STACK_LINE(2917)
		o->next = tmp19;
		HX_STACK_LINE(2918)
		::zpp_nape::geom::ZPP_AABB_obj::zpp_pool = o;
	}
	HX_STACK_LINE(2923)
	bool tmp19 = (output == null());		HX_STACK_VAR(tmp19,"tmp19");
	HX_STACK_LINE(2923)
	::nape::geom::ConvexResultList tmp20;		HX_STACK_VAR(tmp20,"tmp20");
	HX_STACK_LINE(2923)
	if ((tmp19)){
		HX_STACK_LINE(2923)
		tmp20 = ::nape::geom::ConvexResultList_obj::__new();
	}
	else{
		HX_STACK_LINE(2923)
		tmp20 = output;
	}
	HX_STACK_LINE(2923)
	::nape::geom::ConvexResultList ret = tmp20;		HX_STACK_VAR(ret,"ret");
	HX_STACK_LINE(2924)
	{
		HX_STACK_LINE(2924)
		::nape::shape::ShapeIterator tmp21;		HX_STACK_VAR(tmp21,"tmp21");
		HX_STACK_LINE(2924)
		{
			HX_STACK_LINE(2924)
			list->zpp_inner->valmod();
			HX_STACK_LINE(2924)
			::nape::shape::ShapeList tmp22 = list;		HX_STACK_VAR(tmp22,"tmp22");
			HX_STACK_LINE(2924)
			tmp21 = ::nape::shape::ShapeIterator_obj::get(tmp22);
		}
		HX_STACK_LINE(2924)
		::nape::shape::ShapeIterator _g = tmp21;		HX_STACK_VAR(_g,"_g");
		HX_STACK_LINE(2924)
		while((true)){
			HX_STACK_LINE(2924)
			bool tmp22;		HX_STACK_VAR(tmp22,"tmp22");
			HX_STACK_LINE(2924)
			{
				HX_STACK_LINE(2924)
				::zpp_nape::util::ZPP_ShapeList tmp23 = _g->zpp_inner->zpp_inner;		HX_STACK_VAR(tmp23,"tmp23");
				HX_STACK_LINE(2924)
				tmp23->valmod();
				HX_STACK_LINE(2924)
				int tmp24;		HX_STACK_VAR(tmp24,"tmp24");
				HX_STACK_LINE(2924)
				{
					HX_STACK_LINE(2924)
					::nape::shape::ShapeList _this = _g->zpp_inner;		HX_STACK_VAR(_this,"_this");
					HX_STACK_LINE(2924)
					_this->zpp_inner->valmod();
					HX_STACK_LINE(2924)
					bool tmp25 = _this->zpp_inner->zip_length;		HX_STACK_VAR(tmp25,"tmp25");
					HX_STACK_LINE(2924)
					if ((tmp25)){
						HX_STACK_LINE(2924)
						_this->zpp_inner->zip_length = false;
						HX_STACK_LINE(2924)
						{
							HX_STACK_LINE(2924)
							::zpp_nape::util::ZNPList_ZPP_Shape tmp26 = _this->zpp_inner->inner;		HX_STACK_VAR(tmp26,"tmp26");
							HX_STACK_LINE(2924)
							_this->zpp_inner->user_length = tmp26->length;
						}
					}
					HX_STACK_LINE(2924)
					tmp24 = _this->zpp_inner->user_length;
				}
				HX_STACK_LINE(2924)
				int length = tmp24;		HX_STACK_VAR(length,"length");
				HX_STACK_LINE(2924)
				_g->zpp_critical = true;
				HX_STACK_LINE(2924)
				bool tmp25 = (_g->zpp_i < length);		HX_STACK_VAR(tmp25,"tmp25");
				HX_STACK_LINE(2924)
				if ((tmp25)){
					HX_STACK_LINE(2924)
					tmp22 = true;
				}
				else{
					HX_STACK_LINE(2924)
					{
						HX_STACK_LINE(2924)
						::nape::shape::ShapeIterator tmp26 = ::nape::shape::ShapeIterator_obj::zpp_pool;		HX_STACK_VAR(tmp26,"tmp26");
						HX_STACK_LINE(2924)
						_g->zpp_next = tmp26;
						HX_STACK_LINE(2924)
						::nape::shape::ShapeIterator_obj::zpp_pool = _g;
						HX_STACK_LINE(2924)
						_g->zpp_inner = null();
					}
					HX_STACK_LINE(2924)
					tmp22 = false;
				}
			}
			HX_STACK_LINE(2924)
			bool tmp23 = !(tmp22);		HX_STACK_VAR(tmp23,"tmp23");
			HX_STACK_LINE(2924)
			if ((tmp23)){
				HX_STACK_LINE(2924)
				break;
			}
			HX_STACK_LINE(2924)
			::nape::shape::Shape tmp24;		HX_STACK_VAR(tmp24,"tmp24");
			HX_STACK_LINE(2924)
			{
				HX_STACK_LINE(2924)
				_g->zpp_critical = false;
				HX_STACK_LINE(2924)
				int tmp25 = (_g->zpp_i)++;		HX_STACK_VAR(tmp25,"tmp25");
				HX_STACK_LINE(2924)
				tmp24 = _g->zpp_inner->at(tmp25);
			}
			HX_STACK_LINE(2924)
			::nape::shape::Shape s = tmp24;		HX_STACK_VAR(s,"s");
			HX_STACK_LINE(2925)
			bool tmp25 = (s != shape->outer);		HX_STACK_VAR(tmp25,"tmp25");
			HX_STACK_LINE(2925)
			bool tmp26;		HX_STACK_VAR(tmp26,"tmp26");
			HX_STACK_LINE(2925)
			if ((tmp25)){
				HX_STACK_LINE(2925)
				::zpp_nape::phys::ZPP_Body tmp27 = s->zpp_inner->body;		HX_STACK_VAR(tmp27,"tmp27");
				HX_STACK_LINE(2925)
				::zpp_nape::phys::ZPP_Body tmp28 = tmp27;		HX_STACK_VAR(tmp28,"tmp28");
				HX_STACK_LINE(2925)
				bool tmp29 = (tmp28 != null());		HX_STACK_VAR(tmp29,"tmp29");
				HX_STACK_LINE(2925)
				bool tmp30 = tmp29;		HX_STACK_VAR(tmp30,"tmp30");
				HX_STACK_LINE(2925)
				::nape::phys::Body tmp31;		HX_STACK_VAR(tmp31,"tmp31");
				HX_STACK_LINE(2925)
				bool tmp32 = tmp30;		HX_STACK_VAR(tmp32,"tmp32");
				HX_STACK_LINE(2925)
				if ((tmp32)){
					HX_STACK_LINE(2925)
					::zpp_nape::phys::ZPP_Body tmp33 = s->zpp_inner->body;		HX_STACK_VAR(tmp33,"tmp33");
					HX_STACK_LINE(2925)
					::zpp_nape::phys::ZPP_Body tmp34 = tmp33;		HX_STACK_VAR(tmp34,"tmp34");
					HX_STACK_LINE(2925)
					tmp31 = tmp34->outer;
				}
				else{
					HX_STACK_LINE(2925)
					tmp31 = null();
				}
				HX_STACK_LINE(2925)
				::nape::phys::Body tmp33 = body->outer;		HX_STACK_VAR(tmp33,"tmp33");
				HX_STACK_LINE(2925)
				tmp26 = (tmp31 != tmp33);
			}
			else{
				HX_STACK_LINE(2925)
				tmp26 = false;
			}
			HX_STACK_LINE(2925)
			if ((tmp26)){
				HX_STACK_LINE(2926)
				toi->s1 = shape;
				HX_STACK_LINE(2927)
				toi->s2 = s->zpp_inner;
				HX_STACK_LINE(2928)
				bool tmp27 = dynamics;		HX_STACK_VAR(tmp27,"tmp27");
				HX_STACK_LINE(2928)
				if ((tmp27)){
					HX_STACK_LINE(2929)
					s->zpp_inner->validate_sweepRadius();
					HX_STACK_LINE(2930)
					::zpp_nape::phys::ZPP_Body tmp28 = s->zpp_inner->body;		HX_STACK_VAR(tmp28,"tmp28");
					HX_STACK_LINE(2930)
					bool tmp29 = (tmp28 != null());		HX_STACK_VAR(tmp29,"tmp29");
					HX_STACK_LINE(2930)
					::nape::phys::Body tmp30;		HX_STACK_VAR(tmp30,"tmp30");
					HX_STACK_LINE(2930)
					if ((tmp29)){
						HX_STACK_LINE(2930)
						::zpp_nape::phys::ZPP_Body tmp31 = s->zpp_inner->body;		HX_STACK_VAR(tmp31,"tmp31");
						HX_STACK_LINE(2930)
						tmp30 = tmp31->outer;
					}
					else{
						HX_STACK_LINE(2930)
						tmp30 = null();
					}
					HX_STACK_LINE(2930)
					Float tmp31 = tmp30->zpp_inner->angvel;		HX_STACK_VAR(tmp31,"tmp31");
					HX_STACK_LINE(2930)
					::zpp_nape::phys::ZPP_Body tmp32 = s->zpp_inner->body;		HX_STACK_VAR(tmp32,"tmp32");
					HX_STACK_LINE(2930)
					bool tmp33 = (tmp32 != null());		HX_STACK_VAR(tmp33,"tmp33");
					HX_STACK_LINE(2930)
					::nape::phys::Body tmp34;		HX_STACK_VAR(tmp34,"tmp34");
					HX_STACK_LINE(2930)
					if ((tmp33)){
						HX_STACK_LINE(2930)
						::zpp_nape::phys::ZPP_Body tmp35 = s->zpp_inner->body;		HX_STACK_VAR(tmp35,"tmp35");
						HX_STACK_LINE(2930)
						tmp34 = tmp35->outer;
					}
					else{
						HX_STACK_LINE(2930)
						tmp34 = null();
					}
					HX_STACK_LINE(2930)
					tmp34->zpp_inner->sweep_angvel = tmp31;
					HX_STACK_LINE(2931)
					::zpp_nape::phys::ZPP_Body tmp35 = s->zpp_inner->body;		HX_STACK_VAR(tmp35,"tmp35");
					HX_STACK_LINE(2931)
					bool tmp36 = (tmp35 != null());		HX_STACK_VAR(tmp36,"tmp36");
					HX_STACK_LINE(2931)
					::nape::phys::Body tmp37;		HX_STACK_VAR(tmp37,"tmp37");
					HX_STACK_LINE(2931)
					if ((tmp36)){
						HX_STACK_LINE(2931)
						::zpp_nape::phys::ZPP_Body tmp38 = s->zpp_inner->body;		HX_STACK_VAR(tmp38,"tmp38");
						HX_STACK_LINE(2931)
						tmp37 = tmp38->outer;
					}
					else{
						HX_STACK_LINE(2931)
						tmp37 = null();
					}
					HX_STACK_LINE(2931)
					tmp37->zpp_inner->sweepTime = (int)0;
					HX_STACK_LINE(2932)
					::zpp_nape::geom::ZPP_ToiEvent tmp38 = toi;		HX_STACK_VAR(tmp38,"tmp38");
					HX_STACK_LINE(2932)
					Float tmp39 = deltaTime;		HX_STACK_VAR(tmp39,"tmp39");
					HX_STACK_LINE(2932)
					::zpp_nape::geom::ZPP_SweepDistance_obj::dynamicSweep(tmp38,tmp39,(int)0,(int)0,true);
					HX_STACK_LINE(2933)
					{
						HX_STACK_LINE(2933)
						::zpp_nape::phys::ZPP_Body tmp40 = s->zpp_inner->body;		HX_STACK_VAR(tmp40,"tmp40");
						HX_STACK_LINE(2933)
						bool tmp41 = (tmp40 != null());		HX_STACK_VAR(tmp41,"tmp41");
						HX_STACK_LINE(2933)
						::nape::phys::Body tmp42;		HX_STACK_VAR(tmp42,"tmp42");
						HX_STACK_LINE(2933)
						if ((tmp41)){
							HX_STACK_LINE(2933)
							::zpp_nape::phys::ZPP_Body tmp43 = s->zpp_inner->body;		HX_STACK_VAR(tmp43,"tmp43");
							HX_STACK_LINE(2933)
							tmp42 = tmp43->outer;
						}
						else{
							HX_STACK_LINE(2933)
							tmp42 = null();
						}
						HX_STACK_LINE(2933)
						::zpp_nape::phys::ZPP_Body _this = tmp42->zpp_inner;		HX_STACK_VAR(_this,"_this");
						HX_STACK_LINE(2933)
						Float tmp43 = ((int)0 - _this->sweepTime);		HX_STACK_VAR(tmp43,"tmp43");
						HX_STACK_LINE(2933)
						Float delta = tmp43;		HX_STACK_VAR(delta,"delta");
						HX_STACK_LINE(2933)
						bool tmp44 = (delta != (int)0);		HX_STACK_VAR(tmp44,"tmp44");
						HX_STACK_LINE(2933)
						if ((tmp44)){
							HX_STACK_LINE(2933)
							_this->sweepTime = (int)0;
							HX_STACK_LINE(2933)
							{
								HX_STACK_LINE(2933)
								Float t = delta;		HX_STACK_VAR(t,"t");
								HX_STACK_LINE(2933)
								Float tmp45 = (_this->velx * t);		HX_STACK_VAR(tmp45,"tmp45");
								HX_STACK_LINE(2933)
								hx::AddEq(_this->posx,tmp45);
								HX_STACK_LINE(2933)
								Float tmp46 = (_this->vely * t);		HX_STACK_VAR(tmp46,"tmp46");
								HX_STACK_LINE(2933)
								hx::AddEq(_this->posy,tmp46);
							}
							HX_STACK_LINE(2933)
							bool tmp45 = (_this->angvel != (int)0);		HX_STACK_VAR(tmp45,"tmp45");
							HX_STACK_LINE(2933)
							if ((tmp45)){
								HX_STACK_LINE(2933)
								Float tmp46 = (_this->sweep_angvel * delta);		HX_STACK_VAR(tmp46,"tmp46");
								HX_STACK_LINE(2933)
								Float dr = tmp46;		HX_STACK_VAR(dr,"dr");
								HX_STACK_LINE(2933)
								hx::AddEq(_this->rot,dr);
								HX_STACK_LINE(2933)
								Float tmp47 = (dr * dr);		HX_STACK_VAR(tmp47,"tmp47");
								HX_STACK_LINE(2933)
								bool tmp48 = (tmp47 > ((Float)0.0001));		HX_STACK_VAR(tmp48,"tmp48");
								HX_STACK_LINE(2933)
								if ((tmp48)){
									HX_STACK_LINE(2933)
									Float tmp49 = _this->rot;		HX_STACK_VAR(tmp49,"tmp49");
									HX_STACK_LINE(2933)
									Float tmp50 = ::Math_obj::sin(tmp49);		HX_STACK_VAR(tmp50,"tmp50");
									HX_STACK_LINE(2933)
									_this->axisx = tmp50;
									HX_STACK_LINE(2933)
									Float tmp51 = _this->rot;		HX_STACK_VAR(tmp51,"tmp51");
									HX_STACK_LINE(2933)
									Float tmp52 = ::Math_obj::cos(tmp51);		HX_STACK_VAR(tmp52,"tmp52");
									HX_STACK_LINE(2933)
									_this->axisy = tmp52;
									HX_STACK_LINE(2933)
									Dynamic();
								}
								else{
									HX_STACK_LINE(2933)
									Float tmp49 = (dr * dr);		HX_STACK_VAR(tmp49,"tmp49");
									HX_STACK_LINE(2933)
									Float d2 = tmp49;		HX_STACK_VAR(d2,"d2");
									HX_STACK_LINE(2933)
									Float tmp50 = (((Float)0.5) * d2);		HX_STACK_VAR(tmp50,"tmp50");
									HX_STACK_LINE(2933)
									Float tmp51 = ((int)1 - tmp50);		HX_STACK_VAR(tmp51,"tmp51");
									HX_STACK_LINE(2933)
									Float p = tmp51;		HX_STACK_VAR(p,"p");
									HX_STACK_LINE(2933)
									Float tmp52 = (d2 * d2);		HX_STACK_VAR(tmp52,"tmp52");
									HX_STACK_LINE(2933)
									Float tmp53 = (Float(tmp52) / Float((int)8));		HX_STACK_VAR(tmp53,"tmp53");
									HX_STACK_LINE(2933)
									Float tmp54 = ((int)1 - tmp53);		HX_STACK_VAR(tmp54,"tmp54");
									HX_STACK_LINE(2933)
									Float m = tmp54;		HX_STACK_VAR(m,"m");
									HX_STACK_LINE(2933)
									Float tmp55 = (p * _this->axisx);		HX_STACK_VAR(tmp55,"tmp55");
									HX_STACK_LINE(2933)
									Float tmp56 = (dr * _this->axisy);		HX_STACK_VAR(tmp56,"tmp56");
									HX_STACK_LINE(2933)
									Float tmp57 = (tmp55 + tmp56);		HX_STACK_VAR(tmp57,"tmp57");
									HX_STACK_LINE(2933)
									Float tmp58 = m;		HX_STACK_VAR(tmp58,"tmp58");
									HX_STACK_LINE(2933)
									Float tmp59 = (tmp57 * tmp58);		HX_STACK_VAR(tmp59,"tmp59");
									HX_STACK_LINE(2933)
									Float nx = tmp59;		HX_STACK_VAR(nx,"nx");
									HX_STACK_LINE(2933)
									Float tmp60 = (p * _this->axisy);		HX_STACK_VAR(tmp60,"tmp60");
									HX_STACK_LINE(2933)
									Float tmp61 = (dr * _this->axisx);		HX_STACK_VAR(tmp61,"tmp61");
									HX_STACK_LINE(2933)
									Float tmp62 = (tmp60 - tmp61);		HX_STACK_VAR(tmp62,"tmp62");
									HX_STACK_LINE(2933)
									Float tmp63 = m;		HX_STACK_VAR(tmp63,"tmp63");
									HX_STACK_LINE(2933)
									Float tmp64 = (tmp62 * tmp63);		HX_STACK_VAR(tmp64,"tmp64");
									HX_STACK_LINE(2933)
									_this->axisy = tmp64;
									HX_STACK_LINE(2933)
									_this->axisx = nx;
								}
							}
						}
					}
					HX_STACK_LINE(2934)
					{
						HX_STACK_LINE(2934)
						::zpp_nape::phys::ZPP_Body tmp40 = s->zpp_inner->body;		HX_STACK_VAR(tmp40,"tmp40");
						HX_STACK_LINE(2934)
						bool tmp41 = (tmp40 != null());		HX_STACK_VAR(tmp41,"tmp41");
						HX_STACK_LINE(2934)
						::nape::phys::Body tmp42;		HX_STACK_VAR(tmp42,"tmp42");
						HX_STACK_LINE(2934)
						if ((tmp41)){
							HX_STACK_LINE(2934)
							::zpp_nape::phys::ZPP_Body tmp43 = s->zpp_inner->body;		HX_STACK_VAR(tmp43,"tmp43");
							HX_STACK_LINE(2934)
							tmp42 = tmp43->outer;
						}
						else{
							HX_STACK_LINE(2934)
							tmp42 = null();
						}
						HX_STACK_LINE(2934)
						::zpp_nape::phys::ZPP_Body _this = tmp42->zpp_inner;		HX_STACK_VAR(_this,"_this");
						HX_STACK_LINE(2934)
						::zpp_nape::shape::ZPP_Shape s1 = s->zpp_inner;		HX_STACK_VAR(s1,"s1");
						HX_STACK_LINE(2934)
						int tmp43 = s1->type;		HX_STACK_VAR(tmp43,"tmp43");
						HX_STACK_LINE(2934)
						int tmp44 = ::zpp_nape::util::ZPP_Flags_obj::id_ShapeType_CIRCLE;		HX_STACK_VAR(tmp44,"tmp44");
						HX_STACK_LINE(2934)
						bool tmp45 = (tmp43 == tmp44);		HX_STACK_VAR(tmp45,"tmp45");
						HX_STACK_LINE(2934)
						if ((tmp45)){
							HX_STACK_LINE(2934)
							Float tmp46 = _this->posx;		HX_STACK_VAR(tmp46,"tmp46");
							HX_STACK_LINE(2934)
							Float tmp47 = (_this->axisy * s1->localCOMx);		HX_STACK_VAR(tmp47,"tmp47");
							HX_STACK_LINE(2934)
							Float tmp48 = (_this->axisx * s1->localCOMy);		HX_STACK_VAR(tmp48,"tmp48");
							HX_STACK_LINE(2934)
							Float tmp49 = (tmp47 - tmp48);		HX_STACK_VAR(tmp49,"tmp49");
							HX_STACK_LINE(2934)
							Float tmp50 = (tmp46 + tmp49);		HX_STACK_VAR(tmp50,"tmp50");
							HX_STACK_LINE(2934)
							s1->worldCOMx = tmp50;
							HX_STACK_LINE(2934)
							Float tmp51 = _this->posy;		HX_STACK_VAR(tmp51,"tmp51");
							HX_STACK_LINE(2934)
							Float tmp52 = (s1->localCOMx * _this->axisx);		HX_STACK_VAR(tmp52,"tmp52");
							HX_STACK_LINE(2934)
							Float tmp53 = (s1->localCOMy * _this->axisy);		HX_STACK_VAR(tmp53,"tmp53");
							HX_STACK_LINE(2934)
							Float tmp54 = (tmp52 + tmp53);		HX_STACK_VAR(tmp54,"tmp54");
							HX_STACK_LINE(2934)
							Float tmp55 = (tmp51 + tmp54);		HX_STACK_VAR(tmp55,"tmp55");
							HX_STACK_LINE(2934)
							s1->worldCOMy = tmp55;
						}
						else{
							HX_STACK_LINE(2934)
							::zpp_nape::shape::ZPP_Polygon p = s1->polygon;		HX_STACK_VAR(p,"p");
							HX_STACK_LINE(2934)
							::zpp_nape::geom::ZPP_Vec2 tmp46 = p->lverts->next;		HX_STACK_VAR(tmp46,"tmp46");
							HX_STACK_LINE(2934)
							::zpp_nape::geom::ZPP_Vec2 li = tmp46;		HX_STACK_VAR(li,"li");
							HX_STACK_LINE(2934)
							{
								HX_STACK_LINE(2934)
								::zpp_nape::geom::ZPP_Vec2 tmp47 = p->gverts->next;		HX_STACK_VAR(tmp47,"tmp47");
								HX_STACK_LINE(2934)
								::zpp_nape::geom::ZPP_Vec2 cx_ite = tmp47;		HX_STACK_VAR(cx_ite,"cx_ite");
								HX_STACK_LINE(2934)
								while((true)){
									HX_STACK_LINE(2934)
									bool tmp48 = (cx_ite != null());		HX_STACK_VAR(tmp48,"tmp48");
									HX_STACK_LINE(2934)
									bool tmp49 = !(tmp48);		HX_STACK_VAR(tmp49,"tmp49");
									HX_STACK_LINE(2934)
									if ((tmp49)){
										HX_STACK_LINE(2934)
										break;
									}
									HX_STACK_LINE(2934)
									::zpp_nape::geom::ZPP_Vec2 g = cx_ite;		HX_STACK_VAR(g,"g");
									HX_STACK_LINE(2934)
									{
										HX_STACK_LINE(2934)
										::zpp_nape::geom::ZPP_Vec2 l = li;		HX_STACK_VAR(l,"l");
										HX_STACK_LINE(2934)
										li = li->next;
										HX_STACK_LINE(2934)
										{
											HX_STACK_LINE(2934)
											Float tmp50 = _this->posx;		HX_STACK_VAR(tmp50,"tmp50");
											HX_STACK_LINE(2934)
											Float tmp51 = (_this->axisy * l->x);		HX_STACK_VAR(tmp51,"tmp51");
											HX_STACK_LINE(2934)
											Float tmp52 = (_this->axisx * l->y);		HX_STACK_VAR(tmp52,"tmp52");
											HX_STACK_LINE(2934)
											Float tmp53 = (tmp51 - tmp52);		HX_STACK_VAR(tmp53,"tmp53");
											HX_STACK_LINE(2934)
											Float tmp54 = (tmp50 + tmp53);		HX_STACK_VAR(tmp54,"tmp54");
											HX_STACK_LINE(2934)
											g->x = tmp54;
											HX_STACK_LINE(2934)
											Float tmp55 = _this->posy;		HX_STACK_VAR(tmp55,"tmp55");
											HX_STACK_LINE(2934)
											Float tmp56 = (l->x * _this->axisx);		HX_STACK_VAR(tmp56,"tmp56");
											HX_STACK_LINE(2934)
											Float tmp57 = (l->y * _this->axisy);		HX_STACK_VAR(tmp57,"tmp57");
											HX_STACK_LINE(2934)
											Float tmp58 = (tmp56 + tmp57);		HX_STACK_VAR(tmp58,"tmp58");
											HX_STACK_LINE(2934)
											Float tmp59 = (tmp55 + tmp58);		HX_STACK_VAR(tmp59,"tmp59");
											HX_STACK_LINE(2934)
											g->y = tmp59;
										}
									}
									HX_STACK_LINE(2934)
									cx_ite = cx_ite->next;
								}
							}
							HX_STACK_LINE(2934)
							::zpp_nape::util::ZNPNode_ZPP_Edge tmp47 = p->edges->head;		HX_STACK_VAR(tmp47,"tmp47");
							HX_STACK_LINE(2934)
							::zpp_nape::util::ZNPNode_ZPP_Edge ite = tmp47;		HX_STACK_VAR(ite,"ite");
							HX_STACK_LINE(2934)
							{
								HX_STACK_LINE(2934)
								::zpp_nape::geom::ZPP_Vec2 tmp48 = p->gverts->next;		HX_STACK_VAR(tmp48,"tmp48");
								HX_STACK_LINE(2934)
								::zpp_nape::geom::ZPP_Vec2 cx_ite = tmp48;		HX_STACK_VAR(cx_ite,"cx_ite");
								HX_STACK_LINE(2934)
								::zpp_nape::geom::ZPP_Vec2 u = cx_ite;		HX_STACK_VAR(u,"u");
								HX_STACK_LINE(2934)
								cx_ite = cx_ite->next;
								HX_STACK_LINE(2934)
								while((true)){
									HX_STACK_LINE(2934)
									bool tmp49 = (cx_ite != null());		HX_STACK_VAR(tmp49,"tmp49");
									HX_STACK_LINE(2934)
									bool tmp50 = !(tmp49);		HX_STACK_VAR(tmp50,"tmp50");
									HX_STACK_LINE(2934)
									if ((tmp50)){
										HX_STACK_LINE(2934)
										break;
									}
									HX_STACK_LINE(2934)
									::zpp_nape::geom::ZPP_Vec2 v = cx_ite;		HX_STACK_VAR(v,"v");
									HX_STACK_LINE(2934)
									{
										HX_STACK_LINE(2934)
										::zpp_nape::shape::ZPP_Edge e = ite->elt;		HX_STACK_VAR(e,"e");
										HX_STACK_LINE(2934)
										ite = ite->next;
										HX_STACK_LINE(2934)
										{
											HX_STACK_LINE(2934)
											Float tmp51 = (_this->axisy * e->lnormx);		HX_STACK_VAR(tmp51,"tmp51");
											HX_STACK_LINE(2934)
											Float tmp52 = (_this->axisx * e->lnormy);		HX_STACK_VAR(tmp52,"tmp52");
											HX_STACK_LINE(2934)
											Float tmp53 = (tmp51 - tmp52);		HX_STACK_VAR(tmp53,"tmp53");
											HX_STACK_LINE(2934)
											e->gnormx = tmp53;
											HX_STACK_LINE(2934)
											Float tmp54 = (e->lnormx * _this->axisx);		HX_STACK_VAR(tmp54,"tmp54");
											HX_STACK_LINE(2934)
											Float tmp55 = (e->lnormy * _this->axisy);		HX_STACK_VAR(tmp55,"tmp55");
											HX_STACK_LINE(2934)
											Float tmp56 = (tmp54 + tmp55);		HX_STACK_VAR(tmp56,"tmp56");
											HX_STACK_LINE(2934)
											e->gnormy = tmp56;
										}
										HX_STACK_LINE(2934)
										Float tmp51 = (_this->posx * e->gnormx);		HX_STACK_VAR(tmp51,"tmp51");
										HX_STACK_LINE(2934)
										Float tmp52 = (_this->posy * e->gnormy);		HX_STACK_VAR(tmp52,"tmp52");
										HX_STACK_LINE(2934)
										Float tmp53 = (tmp51 + tmp52);		HX_STACK_VAR(tmp53,"tmp53");
										HX_STACK_LINE(2934)
										Float tmp54 = e->lprojection;		HX_STACK_VAR(tmp54,"tmp54");
										HX_STACK_LINE(2934)
										Float tmp55 = (tmp53 + tmp54);		HX_STACK_VAR(tmp55,"tmp55");
										HX_STACK_LINE(2934)
										e->gprojection = tmp55;
										HX_STACK_LINE(2934)
										Float tmp56 = (u->y * e->gnormx);		HX_STACK_VAR(tmp56,"tmp56");
										HX_STACK_LINE(2934)
										Float tmp57 = (u->x * e->gnormy);		HX_STACK_VAR(tmp57,"tmp57");
										HX_STACK_LINE(2934)
										Float tmp58 = (tmp56 - tmp57);		HX_STACK_VAR(tmp58,"tmp58");
										HX_STACK_LINE(2934)
										e->tp0 = tmp58;
										HX_STACK_LINE(2934)
										Float tmp59 = (v->y * e->gnormx);		HX_STACK_VAR(tmp59,"tmp59");
										HX_STACK_LINE(2934)
										Float tmp60 = (v->x * e->gnormy);		HX_STACK_VAR(tmp60,"tmp60");
										HX_STACK_LINE(2934)
										Float tmp61 = (tmp59 - tmp60);		HX_STACK_VAR(tmp61,"tmp61");
										HX_STACK_LINE(2934)
										e->tp1 = tmp61;
									}
									HX_STACK_LINE(2934)
									u = v;
									HX_STACK_LINE(2934)
									cx_ite = cx_ite->next;
								}
								HX_STACK_LINE(2934)
								::zpp_nape::geom::ZPP_Vec2 tmp49 = p->gverts->next;		HX_STACK_VAR(tmp49,"tmp49");
								HX_STACK_LINE(2934)
								::zpp_nape::geom::ZPP_Vec2 v = tmp49;		HX_STACK_VAR(v,"v");
								HX_STACK_LINE(2934)
								{
									HX_STACK_LINE(2934)
									::zpp_nape::shape::ZPP_Edge e = ite->elt;		HX_STACK_VAR(e,"e");
									HX_STACK_LINE(2934)
									ite = ite->next;
									HX_STACK_LINE(2934)
									{
										HX_STACK_LINE(2934)
										Float tmp50 = (_this->axisy * e->lnormx);		HX_STACK_VAR(tmp50,"tmp50");
										HX_STACK_LINE(2934)
										Float tmp51 = (_this->axisx * e->lnormy);		HX_STACK_VAR(tmp51,"tmp51");
										HX_STACK_LINE(2934)
										Float tmp52 = (tmp50 - tmp51);		HX_STACK_VAR(tmp52,"tmp52");
										HX_STACK_LINE(2934)
										e->gnormx = tmp52;
										HX_STACK_LINE(2934)
										Float tmp53 = (e->lnormx * _this->axisx);		HX_STACK_VAR(tmp53,"tmp53");
										HX_STACK_LINE(2934)
										Float tmp54 = (e->lnormy * _this->axisy);		HX_STACK_VAR(tmp54,"tmp54");
										HX_STACK_LINE(2934)
										Float tmp55 = (tmp53 + tmp54);		HX_STACK_VAR(tmp55,"tmp55");
										HX_STACK_LINE(2934)
										e->gnormy = tmp55;
									}
									HX_STACK_LINE(2934)
									Float tmp50 = (_this->posx * e->gnormx);		HX_STACK_VAR(tmp50,"tmp50");
									HX_STACK_LINE(2934)
									Float tmp51 = (_this->posy * e->gnormy);		HX_STACK_VAR(tmp51,"tmp51");
									HX_STACK_LINE(2934)
									Float tmp52 = (tmp50 + tmp51);		HX_STACK_VAR(tmp52,"tmp52");
									HX_STACK_LINE(2934)
									Float tmp53 = e->lprojection;		HX_STACK_VAR(tmp53,"tmp53");
									HX_STACK_LINE(2934)
									Float tmp54 = (tmp52 + tmp53);		HX_STACK_VAR(tmp54,"tmp54");
									HX_STACK_LINE(2934)
									e->gprojection = tmp54;
									HX_STACK_LINE(2934)
									Float tmp55 = (u->y * e->gnormx);		HX_STACK_VAR(tmp55,"tmp55");
									HX_STACK_LINE(2934)
									Float tmp56 = (u->x * e->gnormy);		HX_STACK_VAR(tmp56,"tmp56");
									HX_STACK_LINE(2934)
									Float tmp57 = (tmp55 - tmp56);		HX_STACK_VAR(tmp57,"tmp57");
									HX_STACK_LINE(2934)
									e->tp0 = tmp57;
									HX_STACK_LINE(2934)
									Float tmp58 = (v->y * e->gnormx);		HX_STACK_VAR(tmp58,"tmp58");
									HX_STACK_LINE(2934)
									Float tmp59 = (v->x * e->gnormy);		HX_STACK_VAR(tmp59,"tmp59");
									HX_STACK_LINE(2934)
									Float tmp60 = (tmp58 - tmp59);		HX_STACK_VAR(tmp60,"tmp60");
									HX_STACK_LINE(2934)
									e->tp1 = tmp60;
								}
							}
						}
					}
				}
				else{
					HX_STACK_LINE(2937)
					::zpp_nape::geom::ZPP_ToiEvent tmp28 = toi;		HX_STACK_VAR(tmp28,"tmp28");
					HX_STACK_LINE(2937)
					Float tmp29 = deltaTime;		HX_STACK_VAR(tmp29,"tmp29");
					HX_STACK_LINE(2937)
					::zpp_nape::geom::ZPP_SweepDistance_obj::staticSweep(tmp28,tmp29,(int)0,(int)0);
				}
				HX_STACK_LINE(2939)
				hx::MultEq(toi->toi,deltaTime);
				HX_STACK_LINE(2940)
				bool tmp28 = (toi->toi > (int)0);		HX_STACK_VAR(tmp28,"tmp28");
				HX_STACK_LINE(2940)
				if ((tmp28)){
					HX_STACK_LINE(2941)
					::nape::geom::Vec2 tmp29;		HX_STACK_VAR(tmp29,"tmp29");
					HX_STACK_LINE(2941)
					{
						HX_STACK_LINE(2941)
						Float tmp30 = toi->axis->x;		HX_STACK_VAR(tmp30,"tmp30");
						HX_STACK_LINE(2941)
						Float tmp31 = -(tmp30);		HX_STACK_VAR(tmp31,"tmp31");
						HX_STACK_LINE(2941)
						Float x = tmp31;		HX_STACK_VAR(x,"x");
						HX_STACK_LINE(2941)
						Float tmp32 = toi->axis->y;		HX_STACK_VAR(tmp32,"tmp32");
						HX_STACK_LINE(2941)
						Float tmp33 = -(tmp32);		HX_STACK_VAR(tmp33,"tmp33");
						HX_STACK_LINE(2941)
						Float y = tmp33;		HX_STACK_VAR(y,"y");
						HX_STACK_LINE(2941)
						bool weak = false;		HX_STACK_VAR(weak,"weak");
						HX_STACK_LINE(2941)
						bool tmp34 = (x != x);		HX_STACK_VAR(tmp34,"tmp34");
						HX_STACK_LINE(2941)
						bool tmp35 = !(tmp34);		HX_STACK_VAR(tmp35,"tmp35");
						HX_STACK_LINE(2941)
						bool tmp36;		HX_STACK_VAR(tmp36,"tmp36");
						HX_STACK_LINE(2941)
						if ((tmp35)){
							HX_STACK_LINE(2941)
							tmp36 = (y != y);
						}
						else{
							HX_STACK_LINE(2941)
							tmp36 = true;
						}
						HX_STACK_LINE(2941)
						if ((tmp36)){
							HX_STACK_LINE(2941)
							HX_STACK_DO_THROW(HX_HCSTRING("Error: Vec2 components cannot be NaN","\x85","\xba","\xd8","\xc1"));
						}
						HX_STACK_LINE(2941)
						::nape::geom::Vec2 ret1;		HX_STACK_VAR(ret1,"ret1");
						HX_STACK_LINE(2941)
						{
							HX_STACK_LINE(2941)
							::nape::geom::Vec2 tmp37 = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;		HX_STACK_VAR(tmp37,"tmp37");
							HX_STACK_LINE(2941)
							bool tmp38 = (tmp37 == null());		HX_STACK_VAR(tmp38,"tmp38");
							HX_STACK_LINE(2941)
							if ((tmp38)){
								HX_STACK_LINE(2941)
								::nape::geom::Vec2 tmp39 = ::nape::geom::Vec2_obj::__new(null(),null());		HX_STACK_VAR(tmp39,"tmp39");
								HX_STACK_LINE(2941)
								ret1 = tmp39;
							}
							else{
								HX_STACK_LINE(2941)
								::nape::geom::Vec2 tmp39 = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;		HX_STACK_VAR(tmp39,"tmp39");
								HX_STACK_LINE(2941)
								ret1 = tmp39;
								HX_STACK_LINE(2941)
								::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret1->zpp_pool;
								HX_STACK_LINE(2941)
								ret1->zpp_pool = null();
								HX_STACK_LINE(2941)
								ret1->zpp_disp = false;
								HX_STACK_LINE(2941)
								::nape::geom::Vec2 tmp40 = ret1;		HX_STACK_VAR(tmp40,"tmp40");
								HX_STACK_LINE(2941)
								::nape::geom::Vec2 tmp41 = ::zpp_nape::util::ZPP_PubPool_obj::nextVec2;		HX_STACK_VAR(tmp41,"tmp41");
								HX_STACK_LINE(2941)
								bool tmp42 = (tmp40 == tmp41);		HX_STACK_VAR(tmp42,"tmp42");
								HX_STACK_LINE(2941)
								if ((tmp42)){
									HX_STACK_LINE(2941)
									::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
								}
							}
						}
						HX_STACK_LINE(2941)
						bool tmp37 = (ret1->zpp_inner == null());		HX_STACK_VAR(tmp37,"tmp37");
						HX_STACK_LINE(2941)
						if ((tmp37)){
							HX_STACK_LINE(2941)
							::zpp_nape::geom::ZPP_Vec2 tmp38;		HX_STACK_VAR(tmp38,"tmp38");
							HX_STACK_LINE(2941)
							{
								HX_STACK_LINE(2941)
								bool immutable = false;		HX_STACK_VAR(immutable,"immutable");
								HX_STACK_LINE(2941)
								::zpp_nape::geom::ZPP_Vec2 ret2;		HX_STACK_VAR(ret2,"ret2");
								HX_STACK_LINE(2941)
								{
									HX_STACK_LINE(2941)
									::zpp_nape::geom::ZPP_Vec2 tmp39 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;		HX_STACK_VAR(tmp39,"tmp39");
									HX_STACK_LINE(2941)
									bool tmp40 = (tmp39 == null());		HX_STACK_VAR(tmp40,"tmp40");
									HX_STACK_LINE(2941)
									if ((tmp40)){
										HX_STACK_LINE(2941)
										::zpp_nape::geom::ZPP_Vec2 tmp41 = ::zpp_nape::geom::ZPP_Vec2_obj::__new();		HX_STACK_VAR(tmp41,"tmp41");
										HX_STACK_LINE(2941)
										ret2 = tmp41;
									}
									else{
										HX_STACK_LINE(2941)
										::zpp_nape::geom::ZPP_Vec2 tmp41 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;		HX_STACK_VAR(tmp41,"tmp41");
										HX_STACK_LINE(2941)
										ret2 = tmp41;
										HX_STACK_LINE(2941)
										::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret2->next;
										HX_STACK_LINE(2941)
										ret2->next = null();
									}
									HX_STACK_LINE(2941)
									ret2->weak = false;
								}
								HX_STACK_LINE(2941)
								ret2->_immutable = immutable;
								HX_STACK_LINE(2941)
								{
									HX_STACK_LINE(2941)
									ret2->x = x;
									HX_STACK_LINE(2941)
									ret2->y = y;
									HX_STACK_LINE(2941)
									{
									}
								}
								HX_STACK_LINE(2941)
								tmp38 = ret2;
							}
							HX_STACK_LINE(2941)
							ret1->zpp_inner = tmp38;
							HX_STACK_LINE(2941)
							ret1->zpp_inner->outer = ret1;
						}
						else{
							HX_STACK_LINE(2941)
							{
								HX_STACK_LINE(2941)
								bool tmp38 = (ret1 != null());		HX_STACK_VAR(tmp38,"tmp38");
								HX_STACK_LINE(2941)
								bool tmp39;		HX_STACK_VAR(tmp39,"tmp39");
								HX_STACK_LINE(2941)
								if ((tmp38)){
									HX_STACK_LINE(2941)
									tmp39 = ret1->zpp_disp;
								}
								else{
									HX_STACK_LINE(2941)
									tmp39 = false;
								}
								HX_STACK_LINE(2941)
								if ((tmp39)){
									HX_STACK_LINE(2941)
									::String tmp40 = HX_HCSTRING("Error: Vec2","\xcc","\x3a","\xb6","\x74");		HX_STACK_VAR(tmp40,"tmp40");
									HX_STACK_LINE(2941)
									::String tmp41 = (tmp40 + HX_HCSTRING(" has been disposed and cannot be used!","\x2e","\x07","\xae","\x74"));		HX_STACK_VAR(tmp41,"tmp41");
									HX_STACK_LINE(2941)
									HX_STACK_DO_THROW(tmp41);
								}
							}
							HX_STACK_LINE(2941)
							{
								HX_STACK_LINE(2941)
								::zpp_nape::geom::ZPP_Vec2 _this = ret1->zpp_inner;		HX_STACK_VAR(_this,"_this");
								HX_STACK_LINE(2941)
								bool tmp38 = _this->_immutable;		HX_STACK_VAR(tmp38,"tmp38");
								HX_STACK_LINE(2941)
								if ((tmp38)){
									HX_STACK_LINE(2941)
									HX_STACK_DO_THROW(HX_HCSTRING("Error: Vec2 is immutable","\x60","\xee","\x1f","\xbc"));
								}
								HX_STACK_LINE(2941)
								bool tmp39 = (_this->_isimmutable != null());		HX_STACK_VAR(tmp39,"tmp39");
								HX_STACK_LINE(2941)
								if ((tmp39)){
									HX_STACK_LINE(2941)
									_this->_isimmutable();
								}
							}
							HX_STACK_LINE(2941)
							bool tmp38 = (x != x);		HX_STACK_VAR(tmp38,"tmp38");
							HX_STACK_LINE(2941)
							bool tmp39 = !(tmp38);		HX_STACK_VAR(tmp39,"tmp39");
							HX_STACK_LINE(2941)
							bool tmp40;		HX_STACK_VAR(tmp40,"tmp40");
							HX_STACK_LINE(2941)
							if ((tmp39)){
								HX_STACK_LINE(2941)
								tmp40 = (y != y);
							}
							else{
								HX_STACK_LINE(2941)
								tmp40 = true;
							}
							HX_STACK_LINE(2941)
							if ((tmp40)){
								HX_STACK_LINE(2941)
								HX_STACK_DO_THROW(HX_HCSTRING("Error: Vec2 components cannot be NaN","\x85","\xba","\xd8","\xc1"));
							}
							HX_STACK_LINE(2941)
							Float tmp41;		HX_STACK_VAR(tmp41,"tmp41");
							HX_STACK_LINE(2941)
							{
								HX_STACK_LINE(2941)
								{
									HX_STACK_LINE(2941)
									bool tmp42 = (ret1 != null());		HX_STACK_VAR(tmp42,"tmp42");
									HX_STACK_LINE(2941)
									bool tmp43;		HX_STACK_VAR(tmp43,"tmp43");
									HX_STACK_LINE(2941)
									if ((tmp42)){
										HX_STACK_LINE(2941)
										tmp43 = ret1->zpp_disp;
									}
									else{
										HX_STACK_LINE(2941)
										tmp43 = false;
									}
									HX_STACK_LINE(2941)
									if ((tmp43)){
										HX_STACK_LINE(2941)
										::String tmp44 = HX_HCSTRING("Error: Vec2","\xcc","\x3a","\xb6","\x74");		HX_STACK_VAR(tmp44,"tmp44");
										HX_STACK_LINE(2941)
										::String tmp45 = (tmp44 + HX_HCSTRING(" has been disposed and cannot be used!","\x2e","\x07","\xae","\x74"));		HX_STACK_VAR(tmp45,"tmp45");
										HX_STACK_LINE(2941)
										HX_STACK_DO_THROW(tmp45);
									}
								}
								HX_STACK_LINE(2941)
								{
									HX_STACK_LINE(2941)
									::zpp_nape::geom::ZPP_Vec2 _this = ret1->zpp_inner;		HX_STACK_VAR(_this,"_this");
									HX_STACK_LINE(2941)
									bool tmp42 = (_this->_validate != null());		HX_STACK_VAR(tmp42,"tmp42");
									HX_STACK_LINE(2941)
									if ((tmp42)){
										HX_STACK_LINE(2941)
										_this->_validate();
									}
								}
								HX_STACK_LINE(2941)
								tmp41 = ret1->zpp_inner->x;
							}
							HX_STACK_LINE(2941)
							Float tmp42 = x;		HX_STACK_VAR(tmp42,"tmp42");
							HX_STACK_LINE(2941)
							bool tmp43 = (tmp41 == tmp42);		HX_STACK_VAR(tmp43,"tmp43");
							HX_STACK_LINE(2941)
							bool tmp44;		HX_STACK_VAR(tmp44,"tmp44");
							HX_STACK_LINE(2941)
							if ((tmp43)){
								HX_STACK_LINE(2941)
								Float tmp45;		HX_STACK_VAR(tmp45,"tmp45");
								HX_STACK_LINE(2941)
								{
									HX_STACK_LINE(2941)
									{
										HX_STACK_LINE(2941)
										bool tmp46 = (ret1 != null());		HX_STACK_VAR(tmp46,"tmp46");
										HX_STACK_LINE(2941)
										bool tmp47 = tmp46;		HX_STACK_VAR(tmp47,"tmp47");
										HX_STACK_LINE(2941)
										bool tmp48;		HX_STACK_VAR(tmp48,"tmp48");
										HX_STACK_LINE(2941)
										bool tmp49 = tmp47;		HX_STACK_VAR(tmp49,"tmp49");
										HX_STACK_LINE(2941)
										if ((tmp49)){
											HX_STACK_LINE(2941)
											tmp48 = ret1->zpp_disp;
										}
										else{
											HX_STACK_LINE(2941)
											tmp48 = false;
										}
										HX_STACK_LINE(2941)
										bool tmp50 = tmp48;		HX_STACK_VAR(tmp50,"tmp50");
										HX_STACK_LINE(2941)
										if ((tmp50)){
											HX_STACK_LINE(2941)
											::String tmp51 = HX_HCSTRING("Error: Vec2","\xcc","\x3a","\xb6","\x74");		HX_STACK_VAR(tmp51,"tmp51");
											HX_STACK_LINE(2941)
											::String tmp52 = tmp51;		HX_STACK_VAR(tmp52,"tmp52");
											HX_STACK_LINE(2941)
											::String tmp53 = (tmp52 + HX_HCSTRING(" has been disposed and cannot be used!","\x2e","\x07","\xae","\x74"));		HX_STACK_VAR(tmp53,"tmp53");
											HX_STACK_LINE(2941)
											::String tmp54 = tmp53;		HX_STACK_VAR(tmp54,"tmp54");
											HX_STACK_LINE(2941)
											::String tmp55 = tmp54;		HX_STACK_VAR(tmp55,"tmp55");
											HX_STACK_LINE(2941)
											HX_STACK_DO_THROW(tmp55);
										}
									}
									HX_STACK_LINE(2941)
									{
										HX_STACK_LINE(2941)
										::zpp_nape::geom::ZPP_Vec2 _this = ret1->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(2941)
										bool tmp46 = (_this->_validate != null());		HX_STACK_VAR(tmp46,"tmp46");
										HX_STACK_LINE(2941)
										bool tmp47 = tmp46;		HX_STACK_VAR(tmp47,"tmp47");
										HX_STACK_LINE(2941)
										bool tmp48 = tmp47;		HX_STACK_VAR(tmp48,"tmp48");
										HX_STACK_LINE(2941)
										if ((tmp48)){
											HX_STACK_LINE(2941)
											_this->_validate();
										}
									}
									HX_STACK_LINE(2941)
									Float tmp46 = ret1->zpp_inner->y;		HX_STACK_VAR(tmp46,"tmp46");
									HX_STACK_LINE(2941)
									tmp45 = tmp46;
								}
								HX_STACK_LINE(2941)
								Float tmp46 = y;		HX_STACK_VAR(tmp46,"tmp46");
								HX_STACK_LINE(2941)
								tmp44 = (tmp45 == tmp46);
							}
							else{
								HX_STACK_LINE(2941)
								tmp44 = false;
							}
							HX_STACK_LINE(2941)
							bool tmp45 = !(tmp44);		HX_STACK_VAR(tmp45,"tmp45");
							HX_STACK_LINE(2941)
							if ((tmp45)){
								HX_STACK_LINE(2941)
								{
									HX_STACK_LINE(2941)
									ret1->zpp_inner->x = x;
									HX_STACK_LINE(2941)
									ret1->zpp_inner->y = y;
									HX_STACK_LINE(2941)
									{
									}
								}
								HX_STACK_LINE(2941)
								{
									HX_STACK_LINE(2941)
									::zpp_nape::geom::ZPP_Vec2 _this = ret1->zpp_inner;		HX_STACK_VAR(_this,"_this");
									HX_STACK_LINE(2941)
									bool tmp46 = (_this->_invalidate != null());		HX_STACK_VAR(tmp46,"tmp46");
									HX_STACK_LINE(2941)
									if ((tmp46)){
										HX_STACK_LINE(2941)
										::zpp_nape::geom::ZPP_Vec2 tmp47 = _this;		HX_STACK_VAR(tmp47,"tmp47");
										HX_STACK_LINE(2941)
										_this->_invalidate(tmp47);
									}
								}
							}
							HX_STACK_LINE(2941)
							ret1;
						}
						HX_STACK_LINE(2941)
						ret1->zpp_inner->weak = weak;
						HX_STACK_LINE(2941)
						tmp29 = ret1;
					}
					HX_STACK_LINE(2941)
					::nape::geom::Vec2 tmp30;		HX_STACK_VAR(tmp30,"tmp30");
					HX_STACK_LINE(2941)
					{
						HX_STACK_LINE(2941)
						Float tmp31 = toi->c2->x;		HX_STACK_VAR(tmp31,"tmp31");
						HX_STACK_LINE(2941)
						Float x = tmp31;		HX_STACK_VAR(x,"x");
						HX_STACK_LINE(2941)
						Float tmp32 = toi->c2->y;		HX_STACK_VAR(tmp32,"tmp32");
						HX_STACK_LINE(2941)
						Float y = tmp32;		HX_STACK_VAR(y,"y");
						HX_STACK_LINE(2941)
						bool weak = false;		HX_STACK_VAR(weak,"weak");
						HX_STACK_LINE(2941)
						bool tmp33 = (x != x);		HX_STACK_VAR(tmp33,"tmp33");
						HX_STACK_LINE(2941)
						bool tmp34 = !(tmp33);		HX_STACK_VAR(tmp34,"tmp34");
						HX_STACK_LINE(2941)
						bool tmp35;		HX_STACK_VAR(tmp35,"tmp35");
						HX_STACK_LINE(2941)
						if ((tmp34)){
							HX_STACK_LINE(2941)
							tmp35 = (y != y);
						}
						else{
							HX_STACK_LINE(2941)
							tmp35 = true;
						}
						HX_STACK_LINE(2941)
						if ((tmp35)){
							HX_STACK_LINE(2941)
							HX_STACK_DO_THROW(HX_HCSTRING("Error: Vec2 components cannot be NaN","\x85","\xba","\xd8","\xc1"));
						}
						HX_STACK_LINE(2941)
						::nape::geom::Vec2 ret1;		HX_STACK_VAR(ret1,"ret1");
						HX_STACK_LINE(2941)
						{
							HX_STACK_LINE(2941)
							::nape::geom::Vec2 tmp36 = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;		HX_STACK_VAR(tmp36,"tmp36");
							HX_STACK_LINE(2941)
							bool tmp37 = (tmp36 == null());		HX_STACK_VAR(tmp37,"tmp37");
							HX_STACK_LINE(2941)
							if ((tmp37)){
								HX_STACK_LINE(2941)
								::nape::geom::Vec2 tmp38 = ::nape::geom::Vec2_obj::__new(null(),null());		HX_STACK_VAR(tmp38,"tmp38");
								HX_STACK_LINE(2941)
								ret1 = tmp38;
							}
							else{
								HX_STACK_LINE(2941)
								::nape::geom::Vec2 tmp38 = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;		HX_STACK_VAR(tmp38,"tmp38");
								HX_STACK_LINE(2941)
								ret1 = tmp38;
								HX_STACK_LINE(2941)
								::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret1->zpp_pool;
								HX_STACK_LINE(2941)
								ret1->zpp_pool = null();
								HX_STACK_LINE(2941)
								ret1->zpp_disp = false;
								HX_STACK_LINE(2941)
								::nape::geom::Vec2 tmp39 = ret1;		HX_STACK_VAR(tmp39,"tmp39");
								HX_STACK_LINE(2941)
								::nape::geom::Vec2 tmp40 = ::zpp_nape::util::ZPP_PubPool_obj::nextVec2;		HX_STACK_VAR(tmp40,"tmp40");
								HX_STACK_LINE(2941)
								bool tmp41 = (tmp39 == tmp40);		HX_STACK_VAR(tmp41,"tmp41");
								HX_STACK_LINE(2941)
								if ((tmp41)){
									HX_STACK_LINE(2941)
									::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
								}
							}
						}
						HX_STACK_LINE(2941)
						bool tmp36 = (ret1->zpp_inner == null());		HX_STACK_VAR(tmp36,"tmp36");
						HX_STACK_LINE(2941)
						if ((tmp36)){
							HX_STACK_LINE(2941)
							::zpp_nape::geom::ZPP_Vec2 tmp37;		HX_STACK_VAR(tmp37,"tmp37");
							HX_STACK_LINE(2941)
							{
								HX_STACK_LINE(2941)
								bool immutable = false;		HX_STACK_VAR(immutable,"immutable");
								HX_STACK_LINE(2941)
								::zpp_nape::geom::ZPP_Vec2 ret2;		HX_STACK_VAR(ret2,"ret2");
								HX_STACK_LINE(2941)
								{
									HX_STACK_LINE(2941)
									::zpp_nape::geom::ZPP_Vec2 tmp38 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;		HX_STACK_VAR(tmp38,"tmp38");
									HX_STACK_LINE(2941)
									bool tmp39 = (tmp38 == null());		HX_STACK_VAR(tmp39,"tmp39");
									HX_STACK_LINE(2941)
									if ((tmp39)){
										HX_STACK_LINE(2941)
										::zpp_nape::geom::ZPP_Vec2 tmp40 = ::zpp_nape::geom::ZPP_Vec2_obj::__new();		HX_STACK_VAR(tmp40,"tmp40");
										HX_STACK_LINE(2941)
										ret2 = tmp40;
									}
									else{
										HX_STACK_LINE(2941)
										::zpp_nape::geom::ZPP_Vec2 tmp40 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;		HX_STACK_VAR(tmp40,"tmp40");
										HX_STACK_LINE(2941)
										ret2 = tmp40;
										HX_STACK_LINE(2941)
										::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret2->next;
										HX_STACK_LINE(2941)
										ret2->next = null();
									}
									HX_STACK_LINE(2941)
									ret2->weak = false;
								}
								HX_STACK_LINE(2941)
								ret2->_immutable = immutable;
								HX_STACK_LINE(2941)
								{
									HX_STACK_LINE(2941)
									ret2->x = x;
									HX_STACK_LINE(2941)
									ret2->y = y;
									HX_STACK_LINE(2941)
									{
									}
								}
								HX_STACK_LINE(2941)
								tmp37 = ret2;
							}
							HX_STACK_LINE(2941)
							ret1->zpp_inner = tmp37;
							HX_STACK_LINE(2941)
							ret1->zpp_inner->outer = ret1;
						}
						else{
							HX_STACK_LINE(2941)
							{
								HX_STACK_LINE(2941)
								bool tmp37 = (ret1 != null());		HX_STACK_VAR(tmp37,"tmp37");
								HX_STACK_LINE(2941)
								bool tmp38;		HX_STACK_VAR(tmp38,"tmp38");
								HX_STACK_LINE(2941)
								if ((tmp37)){
									HX_STACK_LINE(2941)
									tmp38 = ret1->zpp_disp;
								}
								else{
									HX_STACK_LINE(2941)
									tmp38 = false;
								}
								HX_STACK_LINE(2941)
								if ((tmp38)){
									HX_STACK_LINE(2941)
									::String tmp39 = HX_HCSTRING("Error: Vec2","\xcc","\x3a","\xb6","\x74");		HX_STACK_VAR(tmp39,"tmp39");
									HX_STACK_LINE(2941)
									::String tmp40 = (tmp39 + HX_HCSTRING(" has been disposed and cannot be used!","\x2e","\x07","\xae","\x74"));		HX_STACK_VAR(tmp40,"tmp40");
									HX_STACK_LINE(2941)
									HX_STACK_DO_THROW(tmp40);
								}
							}
							HX_STACK_LINE(2941)
							{
								HX_STACK_LINE(2941)
								::zpp_nape::geom::ZPP_Vec2 _this = ret1->zpp_inner;		HX_STACK_VAR(_this,"_this");
								HX_STACK_LINE(2941)
								bool tmp37 = _this->_immutable;		HX_STACK_VAR(tmp37,"tmp37");
								HX_STACK_LINE(2941)
								if ((tmp37)){
									HX_STACK_LINE(2941)
									HX_STACK_DO_THROW(HX_HCSTRING("Error: Vec2 is immutable","\x60","\xee","\x1f","\xbc"));
								}
								HX_STACK_LINE(2941)
								bool tmp38 = (_this->_isimmutable != null());		HX_STACK_VAR(tmp38,"tmp38");
								HX_STACK_LINE(2941)
								if ((tmp38)){
									HX_STACK_LINE(2941)
									_this->_isimmutable();
								}
							}
							HX_STACK_LINE(2941)
							bool tmp37 = (x != x);		HX_STACK_VAR(tmp37,"tmp37");
							HX_STACK_LINE(2941)
							bool tmp38 = !(tmp37);		HX_STACK_VAR(tmp38,"tmp38");
							HX_STACK_LINE(2941)
							bool tmp39;		HX_STACK_VAR(tmp39,"tmp39");
							HX_STACK_LINE(2941)
							if ((tmp38)){
								HX_STACK_LINE(2941)
								tmp39 = (y != y);
							}
							else{
								HX_STACK_LINE(2941)
								tmp39 = true;
							}
							HX_STACK_LINE(2941)
							if ((tmp39)){
								HX_STACK_LINE(2941)
								HX_STACK_DO_THROW(HX_HCSTRING("Error: Vec2 components cannot be NaN","\x85","\xba","\xd8","\xc1"));
							}
							HX_STACK_LINE(2941)
							Float tmp40;		HX_STACK_VAR(tmp40,"tmp40");
							HX_STACK_LINE(2941)
							{
								HX_STACK_LINE(2941)
								{
									HX_STACK_LINE(2941)
									bool tmp41 = (ret1 != null());		HX_STACK_VAR(tmp41,"tmp41");
									HX_STACK_LINE(2941)
									bool tmp42;		HX_STACK_VAR(tmp42,"tmp42");
									HX_STACK_LINE(2941)
									if ((tmp41)){
										HX_STACK_LINE(2941)
										tmp42 = ret1->zpp_disp;
									}
									else{
										HX_STACK_LINE(2941)
										tmp42 = false;
									}
									HX_STACK_LINE(2941)
									if ((tmp42)){
										HX_STACK_LINE(2941)
										::String tmp43 = HX_HCSTRING("Error: Vec2","\xcc","\x3a","\xb6","\x74");		HX_STACK_VAR(tmp43,"tmp43");
										HX_STACK_LINE(2941)
										::String tmp44 = (tmp43 + HX_HCSTRING(" has been disposed and cannot be used!","\x2e","\x07","\xae","\x74"));		HX_STACK_VAR(tmp44,"tmp44");
										HX_STACK_LINE(2941)
										HX_STACK_DO_THROW(tmp44);
									}
								}
								HX_STACK_LINE(2941)
								{
									HX_STACK_LINE(2941)
									::zpp_nape::geom::ZPP_Vec2 _this = ret1->zpp_inner;		HX_STACK_VAR(_this,"_this");
									HX_STACK_LINE(2941)
									bool tmp41 = (_this->_validate != null());		HX_STACK_VAR(tmp41,"tmp41");
									HX_STACK_LINE(2941)
									if ((tmp41)){
										HX_STACK_LINE(2941)
										_this->_validate();
									}
								}
								HX_STACK_LINE(2941)
								tmp40 = ret1->zpp_inner->x;
							}
							HX_STACK_LINE(2941)
							Float tmp41 = x;		HX_STACK_VAR(tmp41,"tmp41");
							HX_STACK_LINE(2941)
							bool tmp42 = (tmp40 == tmp41);		HX_STACK_VAR(tmp42,"tmp42");
							HX_STACK_LINE(2941)
							bool tmp43;		HX_STACK_VAR(tmp43,"tmp43");
							HX_STACK_LINE(2941)
							if ((tmp42)){
								HX_STACK_LINE(2941)
								Float tmp44;		HX_STACK_VAR(tmp44,"tmp44");
								HX_STACK_LINE(2941)
								{
									HX_STACK_LINE(2941)
									{
										HX_STACK_LINE(2941)
										bool tmp45 = (ret1 != null());		HX_STACK_VAR(tmp45,"tmp45");
										HX_STACK_LINE(2941)
										bool tmp46 = tmp45;		HX_STACK_VAR(tmp46,"tmp46");
										HX_STACK_LINE(2941)
										bool tmp47;		HX_STACK_VAR(tmp47,"tmp47");
										HX_STACK_LINE(2941)
										bool tmp48 = tmp46;		HX_STACK_VAR(tmp48,"tmp48");
										HX_STACK_LINE(2941)
										if ((tmp48)){
											HX_STACK_LINE(2941)
											tmp47 = ret1->zpp_disp;
										}
										else{
											HX_STACK_LINE(2941)
											tmp47 = false;
										}
										HX_STACK_LINE(2941)
										bool tmp49 = tmp47;		HX_STACK_VAR(tmp49,"tmp49");
										HX_STACK_LINE(2941)
										if ((tmp49)){
											HX_STACK_LINE(2941)
											::String tmp50 = HX_HCSTRING("Error: Vec2","\xcc","\x3a","\xb6","\x74");		HX_STACK_VAR(tmp50,"tmp50");
											HX_STACK_LINE(2941)
											::String tmp51 = tmp50;		HX_STACK_VAR(tmp51,"tmp51");
											HX_STACK_LINE(2941)
											::String tmp52 = (tmp51 + HX_HCSTRING(" has been disposed and cannot be used!","\x2e","\x07","\xae","\x74"));		HX_STACK_VAR(tmp52,"tmp52");
											HX_STACK_LINE(2941)
											::String tmp53 = tmp52;		HX_STACK_VAR(tmp53,"tmp53");
											HX_STACK_LINE(2941)
											::String tmp54 = tmp53;		HX_STACK_VAR(tmp54,"tmp54");
											HX_STACK_LINE(2941)
											HX_STACK_DO_THROW(tmp54);
										}
									}
									HX_STACK_LINE(2941)
									{
										HX_STACK_LINE(2941)
										::zpp_nape::geom::ZPP_Vec2 _this = ret1->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(2941)
										bool tmp45 = (_this->_validate != null());		HX_STACK_VAR(tmp45,"tmp45");
										HX_STACK_LINE(2941)
										bool tmp46 = tmp45;		HX_STACK_VAR(tmp46,"tmp46");
										HX_STACK_LINE(2941)
										bool tmp47 = tmp46;		HX_STACK_VAR(tmp47,"tmp47");
										HX_STACK_LINE(2941)
										if ((tmp47)){
											HX_STACK_LINE(2941)
											_this->_validate();
										}
									}
									HX_STACK_LINE(2941)
									Float tmp45 = ret1->zpp_inner->y;		HX_STACK_VAR(tmp45,"tmp45");
									HX_STACK_LINE(2941)
									tmp44 = tmp45;
								}
								HX_STACK_LINE(2941)
								Float tmp45 = y;		HX_STACK_VAR(tmp45,"tmp45");
								HX_STACK_LINE(2941)
								tmp43 = (tmp44 == tmp45);
							}
							else{
								HX_STACK_LINE(2941)
								tmp43 = false;
							}
							HX_STACK_LINE(2941)
							bool tmp44 = !(tmp43);		HX_STACK_VAR(tmp44,"tmp44");
							HX_STACK_LINE(2941)
							if ((tmp44)){
								HX_STACK_LINE(2941)
								{
									HX_STACK_LINE(2941)
									ret1->zpp_inner->x = x;
									HX_STACK_LINE(2941)
									ret1->zpp_inner->y = y;
									HX_STACK_LINE(2941)
									{
									}
								}
								HX_STACK_LINE(2941)
								{
									HX_STACK_LINE(2941)
									::zpp_nape::geom::ZPP_Vec2 _this = ret1->zpp_inner;		HX_STACK_VAR(_this,"_this");
									HX_STACK_LINE(2941)
									bool tmp45 = (_this->_invalidate != null());		HX_STACK_VAR(tmp45,"tmp45");
									HX_STACK_LINE(2941)
									if ((tmp45)){
										HX_STACK_LINE(2941)
										::zpp_nape::geom::ZPP_Vec2 tmp46 = _this;		HX_STACK_VAR(tmp46,"tmp46");
										HX_STACK_LINE(2941)
										_this->_invalidate(tmp46);
									}
								}
							}
							HX_STACK_LINE(2941)
							ret1;
						}
						HX_STACK_LINE(2941)
						ret1->zpp_inner->weak = weak;
						HX_STACK_LINE(2941)
						tmp30 = ret1;
					}
					HX_STACK_LINE(2941)
					Float tmp31 = toi->toi;		HX_STACK_VAR(tmp31,"tmp31");
					HX_STACK_LINE(2941)
					::nape::shape::Shape tmp32 = s;		HX_STACK_VAR(tmp32,"tmp32");
					HX_STACK_LINE(2941)
					::nape::geom::ConvexResult tmp33 = ::zpp_nape::geom::ZPP_ConvexRayResult_obj::getConvex(tmp29,tmp30,tmp31,tmp32);		HX_STACK_VAR(tmp33,"tmp33");
					HX_STACK_LINE(2941)
					::nape::geom::ConvexResult res = tmp33;		HX_STACK_VAR(res,"res");
					HX_STACK_LINE(2942)
					{
						HX_STACK_LINE(2943)
						::zpp_nape::util::ZNPNode_ConvexResult pre = null();		HX_STACK_VAR(pre,"pre");
						HX_STACK_LINE(2944)
						{
							HX_STACK_LINE(2945)
							::zpp_nape::util::ZNPList_ConvexResult tmp34 = ret->zpp_inner->inner;		HX_STACK_VAR(tmp34,"tmp34");
							HX_STACK_LINE(2945)
							::zpp_nape::util::ZNPNode_ConvexResult cx_ite = tmp34->head;		HX_STACK_VAR(cx_ite,"cx_ite");
							HX_STACK_LINE(2946)
							while((true)){
								HX_STACK_LINE(2946)
								bool tmp35 = (cx_ite != null());		HX_STACK_VAR(tmp35,"tmp35");
								HX_STACK_LINE(2946)
								bool tmp36 = !(tmp35);		HX_STACK_VAR(tmp36,"tmp36");
								HX_STACK_LINE(2946)
								if ((tmp36)){
									HX_STACK_LINE(2946)
									break;
								}
								HX_STACK_LINE(2947)
								::nape::geom::ConvexResult j = cx_ite->elt;		HX_STACK_VAR(j,"j");
								HX_STACK_LINE(2948)
								{
									HX_STACK_LINE(2949)
									Float tmp37;		HX_STACK_VAR(tmp37,"tmp37");
									HX_STACK_LINE(2949)
									{
										HX_STACK_LINE(2949)
										{
											HX_STACK_LINE(2949)
											::zpp_nape::geom::ZPP_ConvexRayResult tmp38 = res->zpp_inner->next;		HX_STACK_VAR(tmp38,"tmp38");
											HX_STACK_LINE(2949)
											bool tmp39 = (tmp38 != null());		HX_STACK_VAR(tmp39,"tmp39");
											HX_STACK_LINE(2949)
											if ((tmp39)){
												HX_STACK_LINE(2949)
												HX_STACK_DO_THROW(HX_HCSTRING("Error: This object has been disposed of and cannot be used","\x15","\x39","\x6c","\xf1"));
											}
										}
										HX_STACK_LINE(2949)
										tmp37 = res->zpp_inner->toiDistance;
									}
									HX_STACK_LINE(2949)
									Float tmp38;		HX_STACK_VAR(tmp38,"tmp38");
									HX_STACK_LINE(2949)
									{
										HX_STACK_LINE(2949)
										{
											HX_STACK_LINE(2949)
											::zpp_nape::geom::ZPP_ConvexRayResult tmp39 = j->zpp_inner->next;		HX_STACK_VAR(tmp39,"tmp39");
											HX_STACK_LINE(2949)
											bool tmp40 = (tmp39 != null());		HX_STACK_VAR(tmp40,"tmp40");
											HX_STACK_LINE(2949)
											if ((tmp40)){
												HX_STACK_LINE(2949)
												HX_STACK_DO_THROW(HX_HCSTRING("Error: This object has been disposed of and cannot be used","\x15","\x39","\x6c","\xf1"));
											}
										}
										HX_STACK_LINE(2949)
										tmp38 = j->zpp_inner->toiDistance;
									}
									HX_STACK_LINE(2949)
									bool tmp39 = (tmp37 < tmp38);		HX_STACK_VAR(tmp39,"tmp39");
									HX_STACK_LINE(2949)
									if ((tmp39)){
										HX_STACK_LINE(2949)
										break;
									}
									HX_STACK_LINE(2950)
									pre = cx_ite;
								}
								HX_STACK_LINE(2952)
								cx_ite = cx_ite->next;
							}
						}
						HX_STACK_LINE(2955)
						{
							HX_STACK_LINE(2955)
							::zpp_nape::util::ZNPList_ConvexResult tmp34 = ret->zpp_inner->inner;		HX_STACK_VAR(tmp34,"tmp34");
							HX_STACK_LINE(2955)
							::zpp_nape::util::ZNPList_ConvexResult _this = tmp34;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(2955)
							::zpp_nape::util::ZNPNode_ConvexResult tmp35;		HX_STACK_VAR(tmp35,"tmp35");
							HX_STACK_LINE(2955)
							{
								HX_STACK_LINE(2955)
								::zpp_nape::util::ZNPNode_ConvexResult ret1;		HX_STACK_VAR(ret1,"ret1");
								HX_STACK_LINE(2955)
								{
									HX_STACK_LINE(2955)
									::zpp_nape::util::ZNPNode_ConvexResult tmp36 = ::zpp_nape::util::ZNPNode_ConvexResult_obj::zpp_pool;		HX_STACK_VAR(tmp36,"tmp36");
									HX_STACK_LINE(2955)
									bool tmp37 = (tmp36 == null());		HX_STACK_VAR(tmp37,"tmp37");
									HX_STACK_LINE(2955)
									if ((tmp37)){
										HX_STACK_LINE(2955)
										::zpp_nape::util::ZNPNode_ConvexResult tmp38 = ::zpp_nape::util::ZNPNode_ConvexResult_obj::__new();		HX_STACK_VAR(tmp38,"tmp38");
										HX_STACK_LINE(2955)
										ret1 = tmp38;
									}
									else{
										HX_STACK_LINE(2955)
										::zpp_nape::util::ZNPNode_ConvexResult tmp38 = ::zpp_nape::util::ZNPNode_ConvexResult_obj::zpp_pool;		HX_STACK_VAR(tmp38,"tmp38");
										HX_STACK_LINE(2955)
										ret1 = tmp38;
										HX_STACK_LINE(2955)
										::zpp_nape::util::ZNPNode_ConvexResult_obj::zpp_pool = ret1->next;
										HX_STACK_LINE(2955)
										ret1->next = null();
									}
									HX_STACK_LINE(2955)
									Dynamic();
								}
								HX_STACK_LINE(2955)
								ret1->elt = res;
								HX_STACK_LINE(2955)
								tmp35 = ret1;
							}
							HX_STACK_LINE(2955)
							::zpp_nape::util::ZNPNode_ConvexResult temp = tmp35;		HX_STACK_VAR(temp,"temp");
							HX_STACK_LINE(2955)
							bool tmp36 = (pre == null());		HX_STACK_VAR(tmp36,"tmp36");
							HX_STACK_LINE(2955)
							if ((tmp36)){
								HX_STACK_LINE(2955)
								temp->next = _this->head;
								HX_STACK_LINE(2955)
								_this->head = temp;
							}
							else{
								HX_STACK_LINE(2955)
								temp->next = pre->next;
								HX_STACK_LINE(2955)
								pre->next = temp;
							}
							HX_STACK_LINE(2955)
							bool tmp37 = _this->modified = true;		HX_STACK_VAR(tmp37,"tmp37");
							HX_STACK_LINE(2955)
							_this->pushmod = tmp37;
							HX_STACK_LINE(2955)
							(_this->length)++;
							HX_STACK_LINE(2955)
							temp;
						}
					}
				}
			}
		}
	}
	HX_STACK_LINE(2960)
	list->clear();
	HX_STACK_LINE(2961)
	{
		HX_STACK_LINE(2962)
		::zpp_nape::geom::ZPP_ToiEvent o = toi;		HX_STACK_VAR(o,"o");
		HX_STACK_LINE(2972)
		::zpp_nape::geom::ZPP_ToiEvent tmp21 = ::zpp_nape::geom::ZPP_ToiEvent_obj::zpp_pool;		HX_STACK_VAR(tmp21,"tmp21");
		HX_STACK_LINE(2972)
		o->next = tmp21;
		HX_STACK_LINE(2973)
		::zpp_nape::geom::ZPP_ToiEvent_obj::zpp_pool = o;
	}
	HX_STACK_LINE(2978)
	{
		HX_STACK_LINE(2978)
		Float tmp21 = ((int)0 - body->sweepTime);		HX_STACK_VAR(tmp21,"tmp21");
		HX_STACK_LINE(2978)
		Float delta = tmp21;		HX_STACK_VAR(delta,"delta");
		HX_STACK_LINE(2978)
		bool tmp22 = (delta != (int)0);		HX_STACK_VAR(tmp22,"tmp22");
		HX_STACK_LINE(2978)
		if ((tmp22)){
			HX_STACK_LINE(2978)
			body->sweepTime = (int)0;
			HX_STACK_LINE(2978)
			{
				HX_STACK_LINE(2978)
				Float t = delta;		HX_STACK_VAR(t,"t");
				HX_STACK_LINE(2978)
				Float tmp23 = (body->velx * t);		HX_STACK_VAR(tmp23,"tmp23");
				HX_STACK_LINE(2978)
				hx::AddEq(body->posx,tmp23);
				HX_STACK_LINE(2978)
				Float tmp24 = (body->vely * t);		HX_STACK_VAR(tmp24,"tmp24");
				HX_STACK_LINE(2978)
				hx::AddEq(body->posy,tmp24);
			}
			HX_STACK_LINE(2978)
			bool tmp23 = (body->angvel != (int)0);		HX_STACK_VAR(tmp23,"tmp23");
			HX_STACK_LINE(2978)
			if ((tmp23)){
				HX_STACK_LINE(2978)
				Float tmp24 = (body->sweep_angvel * delta);		HX_STACK_VAR(tmp24,"tmp24");
				HX_STACK_LINE(2978)
				Float dr = tmp24;		HX_STACK_VAR(dr,"dr");
				HX_STACK_LINE(2978)
				hx::AddEq(body->rot,dr);
				HX_STACK_LINE(2978)
				Float tmp25 = (dr * dr);		HX_STACK_VAR(tmp25,"tmp25");
				HX_STACK_LINE(2978)
				bool tmp26 = (tmp25 > ((Float)0.0001));		HX_STACK_VAR(tmp26,"tmp26");
				HX_STACK_LINE(2978)
				if ((tmp26)){
					HX_STACK_LINE(2978)
					Float tmp27 = body->rot;		HX_STACK_VAR(tmp27,"tmp27");
					HX_STACK_LINE(2978)
					Float tmp28 = ::Math_obj::sin(tmp27);		HX_STACK_VAR(tmp28,"tmp28");
					HX_STACK_LINE(2978)
					body->axisx = tmp28;
					HX_STACK_LINE(2978)
					Float tmp29 = body->rot;		HX_STACK_VAR(tmp29,"tmp29");
					HX_STACK_LINE(2978)
					Float tmp30 = ::Math_obj::cos(tmp29);		HX_STACK_VAR(tmp30,"tmp30");
					HX_STACK_LINE(2978)
					body->axisy = tmp30;
					HX_STACK_LINE(2978)
					Dynamic();
				}
				else{
					HX_STACK_LINE(2978)
					Float tmp27 = (dr * dr);		HX_STACK_VAR(tmp27,"tmp27");
					HX_STACK_LINE(2978)
					Float d2 = tmp27;		HX_STACK_VAR(d2,"d2");
					HX_STACK_LINE(2978)
					Float tmp28 = (((Float)0.5) * d2);		HX_STACK_VAR(tmp28,"tmp28");
					HX_STACK_LINE(2978)
					Float tmp29 = ((int)1 - tmp28);		HX_STACK_VAR(tmp29,"tmp29");
					HX_STACK_LINE(2978)
					Float p = tmp29;		HX_STACK_VAR(p,"p");
					HX_STACK_LINE(2978)
					Float tmp30 = (d2 * d2);		HX_STACK_VAR(tmp30,"tmp30");
					HX_STACK_LINE(2978)
					Float tmp31 = (Float(tmp30) / Float((int)8));		HX_STACK_VAR(tmp31,"tmp31");
					HX_STACK_LINE(2978)
					Float tmp32 = ((int)1 - tmp31);		HX_STACK_VAR(tmp32,"tmp32");
					HX_STACK_LINE(2978)
					Float m = tmp32;		HX_STACK_VAR(m,"m");
					HX_STACK_LINE(2978)
					Float tmp33 = (p * body->axisx);		HX_STACK_VAR(tmp33,"tmp33");
					HX_STACK_LINE(2978)
					Float tmp34 = (dr * body->axisy);		HX_STACK_VAR(tmp34,"tmp34");
					HX_STACK_LINE(2978)
					Float tmp35 = (tmp33 + tmp34);		HX_STACK_VAR(tmp35,"tmp35");
					HX_STACK_LINE(2978)
					Float tmp36 = m;		HX_STACK_VAR(tmp36,"tmp36");
					HX_STACK_LINE(2978)
					Float tmp37 = (tmp35 * tmp36);		HX_STACK_VAR(tmp37,"tmp37");
					HX_STACK_LINE(2978)
					Float nx = tmp37;		HX_STACK_VAR(nx,"nx");
					HX_STACK_LINE(2978)
					Float tmp38 = (p * body->axisy);		HX_STACK_VAR(tmp38,"tmp38");
					HX_STACK_LINE(2978)
					Float tmp39 = (dr * body->axisx);		HX_STACK_VAR(tmp39,"tmp39");
					HX_STACK_LINE(2978)
					Float tmp40 = (tmp38 - tmp39);		HX_STACK_VAR(tmp40,"tmp40");
					HX_STACK_LINE(2978)
					Float tmp41 = m;		HX_STACK_VAR(tmp41,"tmp41");
					HX_STACK_LINE(2978)
					Float tmp42 = (tmp40 * tmp41);		HX_STACK_VAR(tmp42,"tmp42");
					HX_STACK_LINE(2978)
					body->axisy = tmp42;
					HX_STACK_LINE(2978)
					body->axisx = nx;
				}
			}
		}
	}
	HX_STACK_LINE(2979)
	{
		HX_STACK_LINE(2979)
		int tmp21 = shape->type;		HX_STACK_VAR(tmp21,"tmp21");
		HX_STACK_LINE(2979)
		int tmp22 = ::zpp_nape::util::ZPP_Flags_obj::id_ShapeType_CIRCLE;		HX_STACK_VAR(tmp22,"tmp22");
		HX_STACK_LINE(2979)
		bool tmp23 = (tmp21 == tmp22);		HX_STACK_VAR(tmp23,"tmp23");
		HX_STACK_LINE(2979)
		if ((tmp23)){
			HX_STACK_LINE(2979)
			Float tmp24 = body->posx;		HX_STACK_VAR(tmp24,"tmp24");
			HX_STACK_LINE(2979)
			Float tmp25 = (body->axisy * shape->localCOMx);		HX_STACK_VAR(tmp25,"tmp25");
			HX_STACK_LINE(2979)
			Float tmp26 = (body->axisx * shape->localCOMy);		HX_STACK_VAR(tmp26,"tmp26");
			HX_STACK_LINE(2979)
			Float tmp27 = (tmp25 - tmp26);		HX_STACK_VAR(tmp27,"tmp27");
			HX_STACK_LINE(2979)
			Float tmp28 = (tmp24 + tmp27);		HX_STACK_VAR(tmp28,"tmp28");
			HX_STACK_LINE(2979)
			shape->worldCOMx = tmp28;
			HX_STACK_LINE(2979)
			Float tmp29 = body->posy;		HX_STACK_VAR(tmp29,"tmp29");
			HX_STACK_LINE(2979)
			Float tmp30 = (shape->localCOMx * body->axisx);		HX_STACK_VAR(tmp30,"tmp30");
			HX_STACK_LINE(2979)
			Float tmp31 = (shape->localCOMy * body->axisy);		HX_STACK_VAR(tmp31,"tmp31");
			HX_STACK_LINE(2979)
			Float tmp32 = (tmp30 + tmp31);		HX_STACK_VAR(tmp32,"tmp32");
			HX_STACK_LINE(2979)
			Float tmp33 = (tmp29 + tmp32);		HX_STACK_VAR(tmp33,"tmp33");
			HX_STACK_LINE(2979)
			shape->worldCOMy = tmp33;
		}
		else{
			HX_STACK_LINE(2979)
			::zpp_nape::shape::ZPP_Polygon p = shape->polygon;		HX_STACK_VAR(p,"p");
			HX_STACK_LINE(2979)
			::zpp_nape::geom::ZPP_Vec2 tmp24 = p->lverts->next;		HX_STACK_VAR(tmp24,"tmp24");
			HX_STACK_LINE(2979)
			::zpp_nape::geom::ZPP_Vec2 li = tmp24;		HX_STACK_VAR(li,"li");
			HX_STACK_LINE(2979)
			{
				HX_STACK_LINE(2979)
				::zpp_nape::geom::ZPP_Vec2 tmp25 = p->gverts->next;		HX_STACK_VAR(tmp25,"tmp25");
				HX_STACK_LINE(2979)
				::zpp_nape::geom::ZPP_Vec2 cx_ite = tmp25;		HX_STACK_VAR(cx_ite,"cx_ite");
				HX_STACK_LINE(2979)
				while((true)){
					HX_STACK_LINE(2979)
					bool tmp26 = (cx_ite != null());		HX_STACK_VAR(tmp26,"tmp26");
					HX_STACK_LINE(2979)
					bool tmp27 = !(tmp26);		HX_STACK_VAR(tmp27,"tmp27");
					HX_STACK_LINE(2979)
					if ((tmp27)){
						HX_STACK_LINE(2979)
						break;
					}
					HX_STACK_LINE(2979)
					::zpp_nape::geom::ZPP_Vec2 g = cx_ite;		HX_STACK_VAR(g,"g");
					HX_STACK_LINE(2979)
					{
						HX_STACK_LINE(2979)
						::zpp_nape::geom::ZPP_Vec2 l = li;		HX_STACK_VAR(l,"l");
						HX_STACK_LINE(2979)
						li = li->next;
						HX_STACK_LINE(2979)
						{
							HX_STACK_LINE(2979)
							Float tmp28 = body->posx;		HX_STACK_VAR(tmp28,"tmp28");
							HX_STACK_LINE(2979)
							Float tmp29 = (body->axisy * l->x);		HX_STACK_VAR(tmp29,"tmp29");
							HX_STACK_LINE(2979)
							Float tmp30 = (body->axisx * l->y);		HX_STACK_VAR(tmp30,"tmp30");
							HX_STACK_LINE(2979)
							Float tmp31 = (tmp29 - tmp30);		HX_STACK_VAR(tmp31,"tmp31");
							HX_STACK_LINE(2979)
							Float tmp32 = (tmp28 + tmp31);		HX_STACK_VAR(tmp32,"tmp32");
							HX_STACK_LINE(2979)
							g->x = tmp32;
							HX_STACK_LINE(2979)
							Float tmp33 = body->posy;		HX_STACK_VAR(tmp33,"tmp33");
							HX_STACK_LINE(2979)
							Float tmp34 = (l->x * body->axisx);		HX_STACK_VAR(tmp34,"tmp34");
							HX_STACK_LINE(2979)
							Float tmp35 = (l->y * body->axisy);		HX_STACK_VAR(tmp35,"tmp35");
							HX_STACK_LINE(2979)
							Float tmp36 = (tmp34 + tmp35);		HX_STACK_VAR(tmp36,"tmp36");
							HX_STACK_LINE(2979)
							Float tmp37 = (tmp33 + tmp36);		HX_STACK_VAR(tmp37,"tmp37");
							HX_STACK_LINE(2979)
							g->y = tmp37;
						}
					}
					HX_STACK_LINE(2979)
					cx_ite = cx_ite->next;
				}
			}
			HX_STACK_LINE(2979)
			::zpp_nape::util::ZNPNode_ZPP_Edge tmp25 = p->edges->head;		HX_STACK_VAR(tmp25,"tmp25");
			HX_STACK_LINE(2979)
			::zpp_nape::util::ZNPNode_ZPP_Edge ite = tmp25;		HX_STACK_VAR(ite,"ite");
			HX_STACK_LINE(2979)
			{
				HX_STACK_LINE(2979)
				::zpp_nape::geom::ZPP_Vec2 tmp26 = p->gverts->next;		HX_STACK_VAR(tmp26,"tmp26");
				HX_STACK_LINE(2979)
				::zpp_nape::geom::ZPP_Vec2 cx_ite = tmp26;		HX_STACK_VAR(cx_ite,"cx_ite");
				HX_STACK_LINE(2979)
				::zpp_nape::geom::ZPP_Vec2 u = cx_ite;		HX_STACK_VAR(u,"u");
				HX_STACK_LINE(2979)
				cx_ite = cx_ite->next;
				HX_STACK_LINE(2979)
				while((true)){
					HX_STACK_LINE(2979)
					bool tmp27 = (cx_ite != null());		HX_STACK_VAR(tmp27,"tmp27");
					HX_STACK_LINE(2979)
					bool tmp28 = !(tmp27);		HX_STACK_VAR(tmp28,"tmp28");
					HX_STACK_LINE(2979)
					if ((tmp28)){
						HX_STACK_LINE(2979)
						break;
					}
					HX_STACK_LINE(2979)
					::zpp_nape::geom::ZPP_Vec2 v = cx_ite;		HX_STACK_VAR(v,"v");
					HX_STACK_LINE(2979)
					{
						HX_STACK_LINE(2979)
						::zpp_nape::shape::ZPP_Edge e = ite->elt;		HX_STACK_VAR(e,"e");
						HX_STACK_LINE(2979)
						ite = ite->next;
						HX_STACK_LINE(2979)
						{
							HX_STACK_LINE(2979)
							Float tmp29 = (body->axisy * e->lnormx);		HX_STACK_VAR(tmp29,"tmp29");
							HX_STACK_LINE(2979)
							Float tmp30 = (body->axisx * e->lnormy);		HX_STACK_VAR(tmp30,"tmp30");
							HX_STACK_LINE(2979)
							Float tmp31 = (tmp29 - tmp30);		HX_STACK_VAR(tmp31,"tmp31");
							HX_STACK_LINE(2979)
							e->gnormx = tmp31;
							HX_STACK_LINE(2979)
							Float tmp32 = (e->lnormx * body->axisx);		HX_STACK_VAR(tmp32,"tmp32");
							HX_STACK_LINE(2979)
							Float tmp33 = (e->lnormy * body->axisy);		HX_STACK_VAR(tmp33,"tmp33");
							HX_STACK_LINE(2979)
							Float tmp34 = (tmp32 + tmp33);		HX_STACK_VAR(tmp34,"tmp34");
							HX_STACK_LINE(2979)
							e->gnormy = tmp34;
						}
						HX_STACK_LINE(2979)
						Float tmp29 = (body->posx * e->gnormx);		HX_STACK_VAR(tmp29,"tmp29");
						HX_STACK_LINE(2979)
						Float tmp30 = (body->posy * e->gnormy);		HX_STACK_VAR(tmp30,"tmp30");
						HX_STACK_LINE(2979)
						Float tmp31 = (tmp29 + tmp30);		HX_STACK_VAR(tmp31,"tmp31");
						HX_STACK_LINE(2979)
						Float tmp32 = e->lprojection;		HX_STACK_VAR(tmp32,"tmp32");
						HX_STACK_LINE(2979)
						Float tmp33 = (tmp31 + tmp32);		HX_STACK_VAR(tmp33,"tmp33");
						HX_STACK_LINE(2979)
						e->gprojection = tmp33;
						HX_STACK_LINE(2979)
						Float tmp34 = (u->y * e->gnormx);		HX_STACK_VAR(tmp34,"tmp34");
						HX_STACK_LINE(2979)
						Float tmp35 = (u->x * e->gnormy);		HX_STACK_VAR(tmp35,"tmp35");
						HX_STACK_LINE(2979)
						Float tmp36 = (tmp34 - tmp35);		HX_STACK_VAR(tmp36,"tmp36");
						HX_STACK_LINE(2979)
						e->tp0 = tmp36;
						HX_STACK_LINE(2979)
						Float tmp37 = (v->y * e->gnormx);		HX_STACK_VAR(tmp37,"tmp37");
						HX_STACK_LINE(2979)
						Float tmp38 = (v->x * e->gnormy);		HX_STACK_VAR(tmp38,"tmp38");
						HX_STACK_LINE(2979)
						Float tmp39 = (tmp37 - tmp38);		HX_STACK_VAR(tmp39,"tmp39");
						HX_STACK_LINE(2979)
						e->tp1 = tmp39;
					}
					HX_STACK_LINE(2979)
					u = v;
					HX_STACK_LINE(2979)
					cx_ite = cx_ite->next;
				}
				HX_STACK_LINE(2979)
				::zpp_nape::geom::ZPP_Vec2 tmp27 = p->gverts->next;		HX_STACK_VAR(tmp27,"tmp27");
				HX_STACK_LINE(2979)
				::zpp_nape::geom::ZPP_Vec2 v = tmp27;		HX_STACK_VAR(v,"v");
				HX_STACK_LINE(2979)
				{
					HX_STACK_LINE(2979)
					::zpp_nape::shape::ZPP_Edge e = ite->elt;		HX_STACK_VAR(e,"e");
					HX_STACK_LINE(2979)
					ite = ite->next;
					HX_STACK_LINE(2979)
					{
						HX_STACK_LINE(2979)
						Float tmp28 = (body->axisy * e->lnormx);		HX_STACK_VAR(tmp28,"tmp28");
						HX_STACK_LINE(2979)
						Float tmp29 = (body->axisx * e->lnormy);		HX_STACK_VAR(tmp29,"tmp29");
						HX_STACK_LINE(2979)
						Float tmp30 = (tmp28 - tmp29);		HX_STACK_VAR(tmp30,"tmp30");
						HX_STACK_LINE(2979)
						e->gnormx = tmp30;
						HX_STACK_LINE(2979)
						Float tmp31 = (e->lnormx * body->axisx);		HX_STACK_VAR(tmp31,"tmp31");
						HX_STACK_LINE(2979)
						Float tmp32 = (e->lnormy * body->axisy);		HX_STACK_VAR(tmp32,"tmp32");
						HX_STACK_LINE(2979)
						Float tmp33 = (tmp31 + tmp32);		HX_STACK_VAR(tmp33,"tmp33");
						HX_STACK_LINE(2979)
						e->gnormy = tmp33;
					}
					HX_STACK_LINE(2979)
					Float tmp28 = (body->posx * e->gnormx);		HX_STACK_VAR(tmp28,"tmp28");
					HX_STACK_LINE(2979)
					Float tmp29 = (body->posy * e->gnormy);		HX_STACK_VAR(tmp29,"tmp29");
					HX_STACK_LINE(2979)
					Float tmp30 = (tmp28 + tmp29);		HX_STACK_VAR(tmp30,"tmp30");
					HX_STACK_LINE(2979)
					Float tmp31 = e->lprojection;		HX_STACK_VAR(tmp31,"tmp31");
					HX_STACK_LINE(2979)
					Float tmp32 = (tmp30 + tmp31);		HX_STACK_VAR(tmp32,"tmp32");
					HX_STACK_LINE(2979)
					e->gprojection = tmp32;
					HX_STACK_LINE(2979)
					Float tmp33 = (u->y * e->gnormx);		HX_STACK_VAR(tmp33,"tmp33");
					HX_STACK_LINE(2979)
					Float tmp34 = (u->x * e->gnormy);		HX_STACK_VAR(tmp34,"tmp34");
					HX_STACK_LINE(2979)
					Float tmp35 = (tmp33 - tmp34);		HX_STACK_VAR(tmp35,"tmp35");
					HX_STACK_LINE(2979)
					e->tp0 = tmp35;
					HX_STACK_LINE(2979)
					Float tmp36 = (v->y * e->gnormx);		HX_STACK_VAR(tmp36,"tmp36");
					HX_STACK_LINE(2979)
					Float tmp37 = (v->x * e->gnormy);		HX_STACK_VAR(tmp37,"tmp37");
					HX_STACK_LINE(2979)
					Float tmp38 = (tmp36 - tmp37);		HX_STACK_VAR(tmp38,"tmp38");
					HX_STACK_LINE(2979)
					e->tp1 = tmp38;
				}
			}
		}
	}
	HX_STACK_LINE(2980)
	::nape::geom::ConvexResultList tmp21 = ret;		HX_STACK_VAR(tmp21,"tmp21");
	HX_STACK_LINE(2980)
	return tmp21;
}


HX_DEFINE_DYNAMIC_FUNC5(ZPP_Space_obj,convexMultiCast,return )

::zpp_nape::callbacks::ZPP_Callback ZPP_Space_obj::push_callback( ::zpp_nape::callbacks::ZPP_Listener i){
	HX_STACK_FRAME("zpp_nape.space.ZPP_Space","push_callback",0x00285ed4,"zpp_nape.space.ZPP_Space.push_callback","zpp_nape/space/Space.hx",2982,0x2b65ed03)
	HX_STACK_THIS(this)
	HX_STACK_ARG(i,"i")
	HX_STACK_LINE(2991)
	::zpp_nape::callbacks::ZPP_Callback cb;		HX_STACK_VAR(cb,"cb");
	HX_STACK_LINE(2992)
	{
		HX_STACK_LINE(2993)
		::zpp_nape::callbacks::ZPP_Callback tmp = ::zpp_nape::callbacks::ZPP_Callback_obj::zpp_pool;		HX_STACK_VAR(tmp,"tmp");
		HX_STACK_LINE(2993)
		bool tmp1 = (tmp == null());		HX_STACK_VAR(tmp1,"tmp1");
		HX_STACK_LINE(2993)
		if ((tmp1)){
			HX_STACK_LINE(2994)
			::zpp_nape::callbacks::ZPP_Callback tmp2 = ::zpp_nape::callbacks::ZPP_Callback_obj::__new();		HX_STACK_VAR(tmp2,"tmp2");
			HX_STACK_LINE(2994)
			cb = tmp2;
		}
		else{
			HX_STACK_LINE(3000)
			::zpp_nape::callbacks::ZPP_Callback tmp2 = ::zpp_nape::callbacks::ZPP_Callback_obj::zpp_pool;		HX_STACK_VAR(tmp2,"tmp2");
			HX_STACK_LINE(3000)
			cb = tmp2;
			HX_STACK_LINE(3001)
			::zpp_nape::callbacks::ZPP_Callback_obj::zpp_pool = cb->next;
			HX_STACK_LINE(3002)
			cb->next = null();
		}
		HX_STACK_LINE(3007)
		Dynamic();
	}
	HX_STACK_LINE(3009)
	::zpp_nape::callbacks::ZPP_Callback tmp = this->callbacks;		HX_STACK_VAR(tmp,"tmp");
	HX_STACK_LINE(3009)
	::zpp_nape::callbacks::ZPP_Callback tmp1 = cb;		HX_STACK_VAR(tmp1,"tmp1");
	HX_STACK_LINE(3009)
	tmp->push(tmp1);
	HX_STACK_LINE(3010)
	cb->listener = i;
	HX_STACK_LINE(3011)
	::zpp_nape::callbacks::ZPP_Callback tmp2 = cb;		HX_STACK_VAR(tmp2,"tmp2");
	HX_STACK_LINE(3011)
	return tmp2;
}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Space_obj,push_callback,return )

Void ZPP_Space_obj::step( Float deltaTime,int velocityIterations,int positionIterations){
{
		HX_STACK_FRAME("zpp_nape.space.ZPP_Space","step",0xa1df7dc2,"zpp_nape.space.ZPP_Space.step","zpp_nape/space/Space.hx",3014,0x2b65ed03)
		HX_STACK_THIS(this)
		HX_STACK_ARG(deltaTime,"deltaTime")
		HX_STACK_ARG(velocityIterations,"velocityIterations")
		HX_STACK_ARG(positionIterations,"positionIterations")
		HX_STACK_LINE(3014)
		::zpp_nape::space::ZPP_Space _g = hx::ObjectPtr<OBJ_>(this);		HX_STACK_VAR(_g,"_g");
		HX_STACK_LINE(3016)
		bool tmp = this->midstep;		HX_STACK_VAR(tmp,"tmp");
		HX_STACK_LINE(3016)
		if ((tmp)){
			HX_STACK_LINE(3016)
			HX_STACK_DO_THROW(HX_HCSTRING("Error: ... REALLY?? you're going to call space.step() inside of space.step()? COME ON!!","\x68","\x60","\x8b","\x99"));
		}
		HX_STACK_LINE(3018)
		hx::AddEq(this->time,deltaTime);
		HX_STACK_LINE(3019)
		this->pre_dt = deltaTime;
		HX_STACK_LINE(3020)
		this->midstep = true;
		HX_STACK_LINE(3021)
		(this->stamp)++;
		HX_STACK_LINE(3024)
		this->validation();
		HX_STACK_LINE(3029)
		::zpp_nape::space::ZPP_Broadphase tmp1 = this->bphase;		HX_STACK_VAR(tmp1,"tmp1");
		HX_STACK_LINE(3029)
		tmp1->broadphase(hx::ObjectPtr<OBJ_>(this),true);
		HX_STACK_LINE(3039)
		Float tmp2 = deltaTime;		HX_STACK_VAR(tmp2,"tmp2");
		HX_STACK_LINE(3039)
		this->prestep(tmp2);
		HX_STACK_LINE(3044)
		bool tmp3 = this->sortcontacts;		HX_STACK_VAR(tmp3,"tmp3");
		HX_STACK_LINE(3044)
		if ((tmp3)){
			HX_STACK_LINE(3046)
			::zpp_nape::util::ZNPList_ZPP_ColArbiter tmp4 = this->c_arbiters_false;		HX_STACK_VAR(tmp4,"tmp4");
			HX_STACK_LINE(3046)
			::zpp_nape::util::ZNPList_ZPP_ColArbiter xxlist = tmp4;		HX_STACK_VAR(xxlist,"xxlist");
			HX_STACK_LINE(3047)
			bool tmp5 = (xxlist->head == null());		HX_STACK_VAR(tmp5,"tmp5");
			HX_STACK_LINE(3047)
			bool tmp6 = tmp5;		HX_STACK_VAR(tmp6,"tmp6");
			HX_STACK_LINE(3047)
			bool tmp7 = !(tmp6);		HX_STACK_VAR(tmp7,"tmp7");
			HX_STACK_LINE(3047)
			bool tmp8;		HX_STACK_VAR(tmp8,"tmp8");
			HX_STACK_LINE(3047)
			if ((tmp7)){
				HX_STACK_LINE(3047)
				::zpp_nape::util::ZNPNode_ZPP_ColArbiter tmp9 = xxlist->head->next;		HX_STACK_VAR(tmp9,"tmp9");
				HX_STACK_LINE(3047)
				::zpp_nape::util::ZNPNode_ZPP_ColArbiter tmp10 = tmp9;		HX_STACK_VAR(tmp10,"tmp10");
				HX_STACK_LINE(3047)
				tmp8 = (tmp10 != null());
			}
			else{
				HX_STACK_LINE(3047)
				tmp8 = false;
			}
			HX_STACK_LINE(3047)
			if ((tmp8)){
				HX_STACK_LINE(3048)
				::zpp_nape::util::ZNPNode_ZPP_ColArbiter head = xxlist->head;		HX_STACK_VAR(head,"head");
				HX_STACK_LINE(3049)
				::zpp_nape::util::ZNPNode_ZPP_ColArbiter tail = null();		HX_STACK_VAR(tail,"tail");
				HX_STACK_LINE(3050)
				::zpp_nape::util::ZNPNode_ZPP_ColArbiter left = null();		HX_STACK_VAR(left,"left");
				HX_STACK_LINE(3051)
				::zpp_nape::util::ZNPNode_ZPP_ColArbiter right = null();		HX_STACK_VAR(right,"right");
				HX_STACK_LINE(3052)
				::zpp_nape::util::ZNPNode_ZPP_ColArbiter nxt = null();		HX_STACK_VAR(nxt,"nxt");
				HX_STACK_LINE(3053)
				int listSize = (int)1;		HX_STACK_VAR(listSize,"listSize");
				HX_STACK_LINE(3054)
				int numMerges;		HX_STACK_VAR(numMerges,"numMerges");
				HX_STACK_LINE(3054)
				int leftSize;		HX_STACK_VAR(leftSize,"leftSize");
				HX_STACK_LINE(3054)
				int rightSize;		HX_STACK_VAR(rightSize,"rightSize");
				HX_STACK_LINE(3055)
				while((true)){
					HX_STACK_LINE(3056)
					numMerges = (int)0;
					HX_STACK_LINE(3057)
					left = head;
					HX_STACK_LINE(3058)
					::zpp_nape::util::ZNPNode_ZPP_ColArbiter tmp9 = head = null();		HX_STACK_VAR(tmp9,"tmp9");
					HX_STACK_LINE(3058)
					tail = tmp9;
					HX_STACK_LINE(3059)
					while((true)){
						HX_STACK_LINE(3059)
						bool tmp10 = (left != null());		HX_STACK_VAR(tmp10,"tmp10");
						HX_STACK_LINE(3059)
						bool tmp11 = !(tmp10);		HX_STACK_VAR(tmp11,"tmp11");
						HX_STACK_LINE(3059)
						if ((tmp11)){
							HX_STACK_LINE(3059)
							break;
						}
						HX_STACK_LINE(3060)
						(numMerges)++;
						HX_STACK_LINE(3061)
						right = left;
						HX_STACK_LINE(3062)
						leftSize = (int)0;
						HX_STACK_LINE(3063)
						rightSize = listSize;
						HX_STACK_LINE(3064)
						while((true)){
							HX_STACK_LINE(3064)
							bool tmp12 = (right != null());		HX_STACK_VAR(tmp12,"tmp12");
							HX_STACK_LINE(3064)
							bool tmp13;		HX_STACK_VAR(tmp13,"tmp13");
							HX_STACK_LINE(3064)
							if ((tmp12)){
								HX_STACK_LINE(3064)
								tmp13 = (leftSize < listSize);
							}
							else{
								HX_STACK_LINE(3064)
								tmp13 = false;
							}
							HX_STACK_LINE(3064)
							bool tmp14 = !(tmp13);		HX_STACK_VAR(tmp14,"tmp14");
							HX_STACK_LINE(3064)
							if ((tmp14)){
								HX_STACK_LINE(3064)
								break;
							}
							HX_STACK_LINE(3065)
							(leftSize)++;
							HX_STACK_LINE(3066)
							right = right->next;
						}
						HX_STACK_LINE(3068)
						while((true)){
							HX_STACK_LINE(3068)
							bool tmp12 = (leftSize > (int)0);		HX_STACK_VAR(tmp12,"tmp12");
							HX_STACK_LINE(3068)
							bool tmp13 = !(tmp12);		HX_STACK_VAR(tmp13,"tmp13");
							HX_STACK_LINE(3068)
							bool tmp14;		HX_STACK_VAR(tmp14,"tmp14");
							HX_STACK_LINE(3068)
							if ((tmp13)){
								HX_STACK_LINE(3068)
								bool tmp15 = (rightSize > (int)0);		HX_STACK_VAR(tmp15,"tmp15");
								HX_STACK_LINE(3068)
								bool tmp16 = tmp15;		HX_STACK_VAR(tmp16,"tmp16");
								HX_STACK_LINE(3068)
								bool tmp17 = tmp16;		HX_STACK_VAR(tmp17,"tmp17");
								HX_STACK_LINE(3068)
								if ((tmp17)){
									HX_STACK_LINE(3068)
									tmp14 = (right != null());
								}
								else{
									HX_STACK_LINE(3068)
									tmp14 = false;
								}
							}
							else{
								HX_STACK_LINE(3068)
								tmp14 = true;
							}
							HX_STACK_LINE(3068)
							bool tmp15 = !(tmp14);		HX_STACK_VAR(tmp15,"tmp15");
							HX_STACK_LINE(3068)
							if ((tmp15)){
								HX_STACK_LINE(3068)
								break;
							}
							HX_STACK_LINE(3069)
							bool tmp16 = (leftSize == (int)0);		HX_STACK_VAR(tmp16,"tmp16");
							HX_STACK_LINE(3069)
							if ((tmp16)){
								HX_STACK_LINE(3070)
								nxt = right;
								HX_STACK_LINE(3071)
								right = right->next;
								HX_STACK_LINE(3072)
								(rightSize)--;
							}
							else{
								HX_STACK_LINE(3074)
								bool tmp17 = (rightSize == (int)0);		HX_STACK_VAR(tmp17,"tmp17");
								HX_STACK_LINE(3074)
								bool tmp18 = !(tmp17);		HX_STACK_VAR(tmp18,"tmp18");
								HX_STACK_LINE(3074)
								bool tmp19;		HX_STACK_VAR(tmp19,"tmp19");
								HX_STACK_LINE(3074)
								if ((tmp18)){
									HX_STACK_LINE(3074)
									tmp19 = (right == null());
								}
								else{
									HX_STACK_LINE(3074)
									tmp19 = true;
								}
								HX_STACK_LINE(3074)
								if ((tmp19)){
									HX_STACK_LINE(3075)
									nxt = left;
									HX_STACK_LINE(3076)
									left = left->next;
									HX_STACK_LINE(3077)
									(leftSize)--;
								}
								else{
									HX_STACK_LINE(3079)
									bool tmp20;		HX_STACK_VAR(tmp20,"tmp20");
									HX_STACK_LINE(3079)
									{
										HX_STACK_LINE(3080)
										bool tmp21 = left->elt->active;		HX_STACK_VAR(tmp21,"tmp21");
										HX_STACK_LINE(3080)
										bool tmp22;		HX_STACK_VAR(tmp22,"tmp22");
										HX_STACK_LINE(3080)
										if ((tmp21)){
											HX_STACK_LINE(3080)
											tmp22 = right->elt->active;
										}
										else{
											HX_STACK_LINE(3080)
											tmp22 = false;
										}
										HX_STACK_LINE(3080)
										if ((tmp22)){
											HX_STACK_LINE(3080)
											::zpp_nape::dynamics::ZPP_Contact tmp23 = left->elt->oc1;		HX_STACK_VAR(tmp23,"tmp23");
											HX_STACK_LINE(3080)
											Float tmp24 = tmp23->dist;		HX_STACK_VAR(tmp24,"tmp24");
											HX_STACK_LINE(3080)
											::zpp_nape::dynamics::ZPP_Contact tmp25 = right->elt->oc1;		HX_STACK_VAR(tmp25,"tmp25");
											HX_STACK_LINE(3080)
											Float tmp26 = tmp25->dist;		HX_STACK_VAR(tmp26,"tmp26");
											HX_STACK_LINE(3080)
											tmp20 = (tmp24 < tmp26);
										}
										else{
											HX_STACK_LINE(3080)
											tmp20 = true;
										}
									}
									HX_STACK_LINE(3079)
									if ((tmp20)){
										HX_STACK_LINE(3082)
										nxt = left;
										HX_STACK_LINE(3083)
										left = left->next;
										HX_STACK_LINE(3084)
										(leftSize)--;
									}
									else{
										HX_STACK_LINE(3087)
										nxt = right;
										HX_STACK_LINE(3088)
										right = right->next;
										HX_STACK_LINE(3089)
										(rightSize)--;
									}
								}
							}
							HX_STACK_LINE(3091)
							bool tmp17 = (tail != null());		HX_STACK_VAR(tmp17,"tmp17");
							HX_STACK_LINE(3091)
							if ((tmp17)){
								HX_STACK_LINE(3091)
								tail->next = nxt;
							}
							else{
								HX_STACK_LINE(3092)
								head = nxt;
							}
							HX_STACK_LINE(3093)
							tail = nxt;
						}
						HX_STACK_LINE(3095)
						left = right;
					}
					HX_STACK_LINE(3097)
					tail->next = null();
					HX_STACK_LINE(3098)
					hx::ShlEq(listSize,(int)1);
					HX_STACK_LINE(3100)
					bool tmp10 = (numMerges > (int)1);		HX_STACK_VAR(tmp10,"tmp10");
					HX_STACK_LINE(3100)
					bool tmp11 = !(tmp10);		HX_STACK_VAR(tmp11,"tmp11");
					HX_STACK_LINE(3055)
					if ((tmp11)){
						HX_STACK_LINE(3055)
						break;
					}
				}
				HX_STACK_LINE(3101)
				{
					HX_STACK_LINE(3101)
					xxlist->head = head;
					HX_STACK_LINE(3101)
					xxlist->modified = true;
					HX_STACK_LINE(3101)
					xxlist->pushmod = true;
				}
			}
		}
		HX_STACK_LINE(3107)
		Float tmp4 = deltaTime;		HX_STACK_VAR(tmp4,"tmp4");
		HX_STACK_LINE(3107)
		this->updateVel(tmp4);
		HX_STACK_LINE(3108)
		this->warmStart();
		HX_STACK_LINE(3111)
		int tmp5 = velocityIterations;		HX_STACK_VAR(tmp5,"tmp5");
		HX_STACK_LINE(3111)
		this->iterateVel(tmp5);
		HX_STACK_LINE(3115)
		{
			HX_STACK_LINE(3116)
			::zpp_nape::util::ZNPList_ZPP_Body tmp6 = this->kinematics;		HX_STACK_VAR(tmp6,"tmp6");
			HX_STACK_LINE(3116)
			::zpp_nape::util::ZNPNode_ZPP_Body cx_ite = tmp6->head;		HX_STACK_VAR(cx_ite,"cx_ite");
			HX_STACK_LINE(3117)
			while((true)){
				HX_STACK_LINE(3117)
				bool tmp7 = (cx_ite != null());		HX_STACK_VAR(tmp7,"tmp7");
				HX_STACK_LINE(3117)
				bool tmp8 = !(tmp7);		HX_STACK_VAR(tmp8,"tmp8");
				HX_STACK_LINE(3117)
				if ((tmp8)){
					HX_STACK_LINE(3117)
					break;
				}
				HX_STACK_LINE(3118)
				::zpp_nape::phys::ZPP_Body cur = cx_ite->elt;		HX_STACK_VAR(cur,"cur");
				HX_STACK_LINE(3119)
				{
					HX_STACK_LINE(3120)
					{
						HX_STACK_LINE(3121)
						cur->pre_posx = cur->posx;
						HX_STACK_LINE(3122)
						cur->pre_posy = cur->posy;
						HX_STACK_LINE(3131)
						{
						}
					}
					HX_STACK_LINE(3140)
					cur->pre_rot = cur->rot;
				}
				HX_STACK_LINE(3142)
				cx_ite = cx_ite->next;
			}
		}
		HX_STACK_LINE(3147)
		{
			HX_STACK_LINE(3148)
			::zpp_nape::util::ZNPList_ZPP_Body tmp6 = this->live;		HX_STACK_VAR(tmp6,"tmp6");
			HX_STACK_LINE(3148)
			::zpp_nape::util::ZNPNode_ZPP_Body cx_ite = tmp6->head;		HX_STACK_VAR(cx_ite,"cx_ite");
			HX_STACK_LINE(3149)
			while((true)){
				HX_STACK_LINE(3149)
				bool tmp7 = (cx_ite != null());		HX_STACK_VAR(tmp7,"tmp7");
				HX_STACK_LINE(3149)
				bool tmp8 = !(tmp7);		HX_STACK_VAR(tmp8,"tmp8");
				HX_STACK_LINE(3149)
				if ((tmp8)){
					HX_STACK_LINE(3149)
					break;
				}
				HX_STACK_LINE(3150)
				::zpp_nape::phys::ZPP_Body cur = cx_ite->elt;		HX_STACK_VAR(cur,"cur");
				HX_STACK_LINE(3151)
				{
					HX_STACK_LINE(3152)
					{
						HX_STACK_LINE(3153)
						cur->pre_posx = cur->posx;
						HX_STACK_LINE(3154)
						cur->pre_posy = cur->posy;
						HX_STACK_LINE(3163)
						{
						}
					}
					HX_STACK_LINE(3172)
					cur->pre_rot = cur->rot;
				}
				HX_STACK_LINE(3174)
				cx_ite = cx_ite->next;
			}
		}
		HX_STACK_LINE(3178)
		Float tmp6 = deltaTime;		HX_STACK_VAR(tmp6,"tmp6");
		HX_STACK_LINE(3178)
		this->updatePos(tmp6);
		HX_STACK_LINE(3179)
		this->continuous = true;
		HX_STACK_LINE(3180)
		Float tmp7 = deltaTime;		HX_STACK_VAR(tmp7,"tmp7");
		HX_STACK_LINE(3180)
		this->continuousCollisions(tmp7);
		HX_STACK_LINE(3181)
		this->continuous = false;
		HX_STACK_LINE(3184)
		int tmp8 = positionIterations;		HX_STACK_VAR(tmp8,"tmp8");
		HX_STACK_LINE(3184)
		this->iteratePos(tmp8);
		HX_STACK_LINE(3188)
		{
			HX_STACK_LINE(3189)
			::zpp_nape::util::ZNPList_ZPP_Body tmp9 = this->kinematics;		HX_STACK_VAR(tmp9,"tmp9");
			HX_STACK_LINE(3189)
			::zpp_nape::util::ZNPNode_ZPP_Body cx_ite = tmp9->head;		HX_STACK_VAR(cx_ite,"cx_ite");
			HX_STACK_LINE(3190)
			while((true)){
				HX_STACK_LINE(3190)
				bool tmp10 = (cx_ite != null());		HX_STACK_VAR(tmp10,"tmp10");
				HX_STACK_LINE(3190)
				bool tmp11 = !(tmp10);		HX_STACK_VAR(tmp11,"tmp11");
				HX_STACK_LINE(3190)
				if ((tmp11)){
					HX_STACK_LINE(3190)
					break;
				}
				HX_STACK_LINE(3191)
				::zpp_nape::phys::ZPP_Body cur = cx_ite->elt;		HX_STACK_VAR(cur,"cur");
				HX_STACK_LINE(3192)
				{
					HX_STACK_LINE(3193)
					bool tmp12 = (cur->posx == cur->pre_posx);		HX_STACK_VAR(tmp12,"tmp12");
					HX_STACK_LINE(3193)
					bool tmp13;		HX_STACK_VAR(tmp13,"tmp13");
					HX_STACK_LINE(3193)
					if ((tmp12)){
						HX_STACK_LINE(3193)
						tmp13 = (cur->posy == cur->pre_posy);
					}
					else{
						HX_STACK_LINE(3193)
						tmp13 = false;
					}
					HX_STACK_LINE(3193)
					bool tmp14 = !(tmp13);		HX_STACK_VAR(tmp14,"tmp14");
					HX_STACK_LINE(3193)
					bool upos = tmp14;		HX_STACK_VAR(upos,"upos");
					HX_STACK_LINE(3194)
					bool tmp15 = (cur->pre_rot != cur->rot);		HX_STACK_VAR(tmp15,"tmp15");
					HX_STACK_LINE(3194)
					bool urot = tmp15;		HX_STACK_VAR(urot,"urot");
					HX_STACK_LINE(3195)
					bool tmp16 = upos;		HX_STACK_VAR(tmp16,"tmp16");
					HX_STACK_LINE(3195)
					if ((tmp16)){
						HX_STACK_LINE(3195)
						{
							HX_STACK_LINE(3195)
							::zpp_nape::util::ZNPNode_ZPP_Shape tmp17 = cur->shapes->head;		HX_STACK_VAR(tmp17,"tmp17");
							HX_STACK_LINE(3195)
							::zpp_nape::util::ZNPNode_ZPP_Shape cx_ite1 = tmp17;		HX_STACK_VAR(cx_ite1,"cx_ite1");
							HX_STACK_LINE(3195)
							while((true)){
								HX_STACK_LINE(3195)
								bool tmp18 = (cx_ite1 != null());		HX_STACK_VAR(tmp18,"tmp18");
								HX_STACK_LINE(3195)
								bool tmp19 = !(tmp18);		HX_STACK_VAR(tmp19,"tmp19");
								HX_STACK_LINE(3195)
								if ((tmp19)){
									HX_STACK_LINE(3195)
									break;
								}
								HX_STACK_LINE(3195)
								::zpp_nape::shape::ZPP_Shape s = cx_ite1->elt;		HX_STACK_VAR(s,"s");
								HX_STACK_LINE(3195)
								{
									HX_STACK_LINE(3195)
									int tmp20 = s->type;		HX_STACK_VAR(tmp20,"tmp20");
									HX_STACK_LINE(3195)
									int tmp21 = ::zpp_nape::util::ZPP_Flags_obj::id_ShapeType_POLYGON;		HX_STACK_VAR(tmp21,"tmp21");
									HX_STACK_LINE(3195)
									bool tmp22 = (tmp20 == tmp21);		HX_STACK_VAR(tmp22,"tmp22");
									HX_STACK_LINE(3195)
									if ((tmp22)){
										HX_STACK_LINE(3195)
										s->polygon->invalidate_gverts();
										HX_STACK_LINE(3195)
										s->polygon->invalidate_gaxi();
									}
									HX_STACK_LINE(3195)
									s->invalidate_worldCOM();
								}
								HX_STACK_LINE(3195)
								cx_ite1 = cx_ite1->next;
							}
						}
						HX_STACK_LINE(3195)
						cur->zip_worldCOM = true;
					}
					HX_STACK_LINE(3196)
					bool tmp17 = urot;		HX_STACK_VAR(tmp17,"tmp17");
					HX_STACK_LINE(3196)
					if ((tmp17)){
						HX_STACK_LINE(3196)
						cur->zip_axis = true;
						HX_STACK_LINE(3196)
						{
							HX_STACK_LINE(3196)
							::zpp_nape::util::ZNPNode_ZPP_Shape tmp18 = cur->shapes->head;		HX_STACK_VAR(tmp18,"tmp18");
							HX_STACK_LINE(3196)
							::zpp_nape::util::ZNPNode_ZPP_Shape cx_ite1 = tmp18;		HX_STACK_VAR(cx_ite1,"cx_ite1");
							HX_STACK_LINE(3196)
							while((true)){
								HX_STACK_LINE(3196)
								bool tmp19 = (cx_ite1 != null());		HX_STACK_VAR(tmp19,"tmp19");
								HX_STACK_LINE(3196)
								bool tmp20 = !(tmp19);		HX_STACK_VAR(tmp20,"tmp20");
								HX_STACK_LINE(3196)
								if ((tmp20)){
									HX_STACK_LINE(3196)
									break;
								}
								HX_STACK_LINE(3196)
								::zpp_nape::shape::ZPP_Shape s = cx_ite1->elt;		HX_STACK_VAR(s,"s");
								HX_STACK_LINE(3196)
								{
									HX_STACK_LINE(3196)
									int tmp21 = s->type;		HX_STACK_VAR(tmp21,"tmp21");
									HX_STACK_LINE(3196)
									int tmp22 = ::zpp_nape::util::ZPP_Flags_obj::id_ShapeType_POLYGON;		HX_STACK_VAR(tmp22,"tmp22");
									HX_STACK_LINE(3196)
									bool tmp23 = (tmp21 == tmp22);		HX_STACK_VAR(tmp23,"tmp23");
									HX_STACK_LINE(3196)
									if ((tmp23)){
										HX_STACK_LINE(3196)
										s->polygon->invalidate_gverts();
										HX_STACK_LINE(3196)
										s->polygon->invalidate_gaxi();
									}
									HX_STACK_LINE(3196)
									s->invalidate_worldCOM();
								}
								HX_STACK_LINE(3196)
								cx_ite1 = cx_ite1->next;
							}
						}
						HX_STACK_LINE(3196)
						cur->zip_worldCOM = true;
					}
				}
				HX_STACK_LINE(3198)
				cx_ite = cx_ite->next;
			}
		}
		HX_STACK_LINE(3203)
		{
			HX_STACK_LINE(3204)
			::zpp_nape::util::ZNPList_ZPP_Body tmp9 = this->live;		HX_STACK_VAR(tmp9,"tmp9");
			HX_STACK_LINE(3204)
			::zpp_nape::util::ZNPNode_ZPP_Body cx_ite = tmp9->head;		HX_STACK_VAR(cx_ite,"cx_ite");
			HX_STACK_LINE(3205)
			while((true)){
				HX_STACK_LINE(3205)
				bool tmp10 = (cx_ite != null());		HX_STACK_VAR(tmp10,"tmp10");
				HX_STACK_LINE(3205)
				bool tmp11 = !(tmp10);		HX_STACK_VAR(tmp11,"tmp11");
				HX_STACK_LINE(3205)
				if ((tmp11)){
					HX_STACK_LINE(3205)
					break;
				}
				HX_STACK_LINE(3206)
				::zpp_nape::phys::ZPP_Body cur = cx_ite->elt;		HX_STACK_VAR(cur,"cur");
				HX_STACK_LINE(3207)
				{
					HX_STACK_LINE(3208)
					bool tmp12 = (cur->posx == cur->pre_posx);		HX_STACK_VAR(tmp12,"tmp12");
					HX_STACK_LINE(3208)
					bool tmp13;		HX_STACK_VAR(tmp13,"tmp13");
					HX_STACK_LINE(3208)
					if ((tmp12)){
						HX_STACK_LINE(3208)
						tmp13 = (cur->posy == cur->pre_posy);
					}
					else{
						HX_STACK_LINE(3208)
						tmp13 = false;
					}
					HX_STACK_LINE(3208)
					bool tmp14 = !(tmp13);		HX_STACK_VAR(tmp14,"tmp14");
					HX_STACK_LINE(3208)
					bool upos = tmp14;		HX_STACK_VAR(upos,"upos");
					HX_STACK_LINE(3209)
					bool tmp15 = (cur->pre_rot != cur->rot);		HX_STACK_VAR(tmp15,"tmp15");
					HX_STACK_LINE(3209)
					bool urot = tmp15;		HX_STACK_VAR(urot,"urot");
					HX_STACK_LINE(3210)
					bool tmp16 = upos;		HX_STACK_VAR(tmp16,"tmp16");
					HX_STACK_LINE(3210)
					if ((tmp16)){
						HX_STACK_LINE(3210)
						{
							HX_STACK_LINE(3210)
							::zpp_nape::util::ZNPNode_ZPP_Shape tmp17 = cur->shapes->head;		HX_STACK_VAR(tmp17,"tmp17");
							HX_STACK_LINE(3210)
							::zpp_nape::util::ZNPNode_ZPP_Shape cx_ite1 = tmp17;		HX_STACK_VAR(cx_ite1,"cx_ite1");
							HX_STACK_LINE(3210)
							while((true)){
								HX_STACK_LINE(3210)
								bool tmp18 = (cx_ite1 != null());		HX_STACK_VAR(tmp18,"tmp18");
								HX_STACK_LINE(3210)
								bool tmp19 = !(tmp18);		HX_STACK_VAR(tmp19,"tmp19");
								HX_STACK_LINE(3210)
								if ((tmp19)){
									HX_STACK_LINE(3210)
									break;
								}
								HX_STACK_LINE(3210)
								::zpp_nape::shape::ZPP_Shape s = cx_ite1->elt;		HX_STACK_VAR(s,"s");
								HX_STACK_LINE(3210)
								{
									HX_STACK_LINE(3210)
									int tmp20 = s->type;		HX_STACK_VAR(tmp20,"tmp20");
									HX_STACK_LINE(3210)
									int tmp21 = ::zpp_nape::util::ZPP_Flags_obj::id_ShapeType_POLYGON;		HX_STACK_VAR(tmp21,"tmp21");
									HX_STACK_LINE(3210)
									bool tmp22 = (tmp20 == tmp21);		HX_STACK_VAR(tmp22,"tmp22");
									HX_STACK_LINE(3210)
									if ((tmp22)){
										HX_STACK_LINE(3210)
										s->polygon->invalidate_gverts();
										HX_STACK_LINE(3210)
										s->polygon->invalidate_gaxi();
									}
									HX_STACK_LINE(3210)
									s->invalidate_worldCOM();
								}
								HX_STACK_LINE(3210)
								cx_ite1 = cx_ite1->next;
							}
						}
						HX_STACK_LINE(3210)
						cur->zip_worldCOM = true;
					}
					HX_STACK_LINE(3211)
					bool tmp17 = urot;		HX_STACK_VAR(tmp17,"tmp17");
					HX_STACK_LINE(3211)
					if ((tmp17)){
						HX_STACK_LINE(3211)
						cur->zip_axis = true;
						HX_STACK_LINE(3211)
						{
							HX_STACK_LINE(3211)
							::zpp_nape::util::ZNPNode_ZPP_Shape tmp18 = cur->shapes->head;		HX_STACK_VAR(tmp18,"tmp18");
							HX_STACK_LINE(3211)
							::zpp_nape::util::ZNPNode_ZPP_Shape cx_ite1 = tmp18;		HX_STACK_VAR(cx_ite1,"cx_ite1");
							HX_STACK_LINE(3211)
							while((true)){
								HX_STACK_LINE(3211)
								bool tmp19 = (cx_ite1 != null());		HX_STACK_VAR(tmp19,"tmp19");
								HX_STACK_LINE(3211)
								bool tmp20 = !(tmp19);		HX_STACK_VAR(tmp20,"tmp20");
								HX_STACK_LINE(3211)
								if ((tmp20)){
									HX_STACK_LINE(3211)
									break;
								}
								HX_STACK_LINE(3211)
								::zpp_nape::shape::ZPP_Shape s = cx_ite1->elt;		HX_STACK_VAR(s,"s");
								HX_STACK_LINE(3211)
								{
									HX_STACK_LINE(3211)
									int tmp21 = s->type;		HX_STACK_VAR(tmp21,"tmp21");
									HX_STACK_LINE(3211)
									int tmp22 = ::zpp_nape::util::ZPP_Flags_obj::id_ShapeType_POLYGON;		HX_STACK_VAR(tmp22,"tmp22");
									HX_STACK_LINE(3211)
									bool tmp23 = (tmp21 == tmp22);		HX_STACK_VAR(tmp23,"tmp23");
									HX_STACK_LINE(3211)
									if ((tmp23)){
										HX_STACK_LINE(3211)
										s->polygon->invalidate_gverts();
										HX_STACK_LINE(3211)
										s->polygon->invalidate_gaxi();
									}
									HX_STACK_LINE(3211)
									s->invalidate_worldCOM();
								}
								HX_STACK_LINE(3211)
								cx_ite1 = cx_ite1->next;
							}
						}
						HX_STACK_LINE(3211)
						cur->zip_worldCOM = true;
					}
				}
				HX_STACK_LINE(3213)
				cx_ite = cx_ite->next;
			}
		}
		HX_STACK_LINE(3217)
		::zpp_nape::util::ZNPNode_ZPP_Body pre = null();		HX_STACK_VAR(pre,"pre");
		HX_STACK_LINE(3218)
		{
			HX_STACK_LINE(3219)
			::zpp_nape::util::ZNPList_ZPP_Body tmp9 = this->staticsleep;		HX_STACK_VAR(tmp9,"tmp9");
			HX_STACK_LINE(3219)
			::zpp_nape::util::ZNPNode_ZPP_Body cx_ite = tmp9->head;		HX_STACK_VAR(cx_ite,"cx_ite");
			HX_STACK_LINE(3220)
			while((true)){
				HX_STACK_LINE(3220)
				bool tmp10 = (cx_ite != null());		HX_STACK_VAR(tmp10,"tmp10");
				HX_STACK_LINE(3220)
				bool tmp11 = !(tmp10);		HX_STACK_VAR(tmp11,"tmp11");
				HX_STACK_LINE(3220)
				if ((tmp11)){
					HX_STACK_LINE(3220)
					break;
				}
				HX_STACK_LINE(3221)
				::zpp_nape::phys::ZPP_Body b = cx_ite->elt;		HX_STACK_VAR(b,"b");
				HX_STACK_LINE(3222)
				{
					HX_STACK_LINE(3231)
					int tmp12 = b->type;		HX_STACK_VAR(tmp12,"tmp12");
					HX_STACK_LINE(3231)
					int tmp13 = ::zpp_nape::util::ZPP_Flags_obj::id_BodyType_KINEMATIC;		HX_STACK_VAR(tmp13,"tmp13");
					HX_STACK_LINE(3231)
					bool tmp14 = (tmp12 == tmp13);		HX_STACK_VAR(tmp14,"tmp14");
					HX_STACK_LINE(3231)
					bool tmp15 = tmp14;		HX_STACK_VAR(tmp15,"tmp15");
					HX_STACK_LINE(3231)
					bool tmp16 = !(tmp15);		HX_STACK_VAR(tmp16,"tmp16");
					HX_STACK_LINE(3231)
					bool tmp17 = !(tmp16);		HX_STACK_VAR(tmp17,"tmp17");
					HX_STACK_LINE(3231)
					bool tmp18;		HX_STACK_VAR(tmp18,"tmp18");
					HX_STACK_LINE(3231)
					if ((tmp17)){
						HX_STACK_LINE(3231)
						bool tmp19 = (b->velx == (int)0);		HX_STACK_VAR(tmp19,"tmp19");
						HX_STACK_LINE(3231)
						bool tmp20 = tmp19;		HX_STACK_VAR(tmp20,"tmp20");
						HX_STACK_LINE(3231)
						bool tmp21 = tmp20;		HX_STACK_VAR(tmp21,"tmp21");
						HX_STACK_LINE(3231)
						bool tmp22;		HX_STACK_VAR(tmp22,"tmp22");
						HX_STACK_LINE(3231)
						bool tmp23 = tmp21;		HX_STACK_VAR(tmp23,"tmp23");
						HX_STACK_LINE(3231)
						if ((tmp23)){
							HX_STACK_LINE(3231)
							bool tmp24 = (b->vely == (int)0);		HX_STACK_VAR(tmp24,"tmp24");
							HX_STACK_LINE(3231)
							tmp22 = tmp24;
						}
						else{
							HX_STACK_LINE(3231)
							tmp22 = false;
						}
						HX_STACK_LINE(3231)
						bool tmp24 = tmp22;		HX_STACK_VAR(tmp24,"tmp24");
						HX_STACK_LINE(3231)
						if ((tmp24)){
							HX_STACK_LINE(3231)
							tmp18 = (b->angvel == (int)0);
						}
						else{
							HX_STACK_LINE(3231)
							tmp18 = false;
						}
					}
					else{
						HX_STACK_LINE(3231)
						tmp18 = true;
					}
					HX_STACK_LINE(3231)
					if ((tmp18)){
						HX_STACK_LINE(3232)
						bool tmp19 = b->kinematicDelaySleep;		HX_STACK_VAR(tmp19,"tmp19");
						HX_STACK_LINE(3232)
						if ((tmp19)){
							HX_STACK_LINE(3233)
							b->kinematicDelaySleep = false;
							HX_STACK_LINE(3234)
							{
								HX_STACK_LINE(3235)
								cx_ite = cx_ite->next;
								HX_STACK_LINE(3236)
								continue;
							}
						}
						HX_STACK_LINE(3239)
						b->component->sleeping = true;
						HX_STACK_LINE(3240)
						::zpp_nape::util::ZNPNode_ZPP_Body tmp20;		HX_STACK_VAR(tmp20,"tmp20");
						HX_STACK_LINE(3240)
						{
							HX_STACK_LINE(3240)
							::zpp_nape::util::ZNPList_ZPP_Body tmp21 = this->staticsleep;		HX_STACK_VAR(tmp21,"tmp21");
							HX_STACK_LINE(3240)
							::zpp_nape::util::ZNPList_ZPP_Body _this = tmp21;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(3240)
							::zpp_nape::util::ZNPNode_ZPP_Body old;		HX_STACK_VAR(old,"old");
							HX_STACK_LINE(3240)
							::zpp_nape::util::ZNPNode_ZPP_Body ret;		HX_STACK_VAR(ret,"ret");
							HX_STACK_LINE(3240)
							bool tmp22 = (pre == null());		HX_STACK_VAR(tmp22,"tmp22");
							HX_STACK_LINE(3240)
							if ((tmp22)){
								HX_STACK_LINE(3240)
								old = _this->head;
								HX_STACK_LINE(3240)
								ret = old->next;
								HX_STACK_LINE(3240)
								_this->head = ret;
								HX_STACK_LINE(3240)
								bool tmp23 = (_this->head == null());		HX_STACK_VAR(tmp23,"tmp23");
								HX_STACK_LINE(3240)
								if ((tmp23)){
									HX_STACK_LINE(3240)
									_this->pushmod = true;
								}
							}
							else{
								HX_STACK_LINE(3240)
								old = pre->next;
								HX_STACK_LINE(3240)
								ret = old->next;
								HX_STACK_LINE(3240)
								pre->next = ret;
								HX_STACK_LINE(3240)
								bool tmp23 = (ret == null());		HX_STACK_VAR(tmp23,"tmp23");
								HX_STACK_LINE(3240)
								if ((tmp23)){
									HX_STACK_LINE(3240)
									_this->pushmod = true;
								}
							}
							HX_STACK_LINE(3240)
							{
								HX_STACK_LINE(3240)
								::zpp_nape::util::ZNPNode_ZPP_Body o = old;		HX_STACK_VAR(o,"o");
								HX_STACK_LINE(3240)
								o->elt = null();
								HX_STACK_LINE(3240)
								::zpp_nape::util::ZNPNode_ZPP_Body tmp23 = ::zpp_nape::util::ZNPNode_ZPP_Body_obj::zpp_pool;		HX_STACK_VAR(tmp23,"tmp23");
								HX_STACK_LINE(3240)
								o->next = tmp23;
								HX_STACK_LINE(3240)
								::zpp_nape::util::ZNPNode_ZPP_Body_obj::zpp_pool = o;
							}
							HX_STACK_LINE(3240)
							_this->modified = true;
							HX_STACK_LINE(3240)
							(_this->length)--;
							HX_STACK_LINE(3240)
							_this->pushmod = true;
							HX_STACK_LINE(3240)
							tmp20 = ret;
						}
						HX_STACK_LINE(3240)
						cx_ite = tmp20;
						HX_STACK_LINE(3241)
						continue;
					}
					HX_STACK_LINE(3243)
					pre = cx_ite;
				}
				HX_STACK_LINE(3245)
				cx_ite = cx_ite->next;
			}
		}
		HX_STACK_LINE(3250)
		Float tmp9 = deltaTime;		HX_STACK_VAR(tmp9,"tmp9");
		HX_STACK_LINE(3250)
		this->doForests(tmp9);
		HX_STACK_LINE(3251)
		this->sleepArbiters();
		HX_STACK_LINE(3254)
		this->midstep = false;
		HX_STACK_LINE(3255)
		::zpp_nape::space::ZPP_CallbackSet pre1 = null();		HX_STACK_VAR(pre1,"pre1");
		HX_STACK_LINE(3256)
		{
			HX_STACK_LINE(3257)
			::zpp_nape::space::ZPP_CallbackSet tmp10 = this->callbackset_list;		HX_STACK_VAR(tmp10,"tmp10");
			HX_STACK_LINE(3257)
			::zpp_nape::space::ZPP_CallbackSet cx_ite = tmp10->next;		HX_STACK_VAR(cx_ite,"cx_ite");
			HX_STACK_LINE(3258)
			while((true)){
				HX_STACK_LINE(3258)
				bool tmp11 = (cx_ite != null());		HX_STACK_VAR(tmp11,"tmp11");
				HX_STACK_LINE(3258)
				bool tmp12 = !(tmp11);		HX_STACK_VAR(tmp12,"tmp12");
				HX_STACK_LINE(3258)
				if ((tmp12)){
					HX_STACK_LINE(3258)
					break;
				}
				HX_STACK_LINE(3259)
				::zpp_nape::space::ZPP_CallbackSet set = cx_ite;		HX_STACK_VAR(set,"set");
				HX_STACK_LINE(3260)
				{
					HX_STACK_LINE(3261)
					::zpp_nape::util::ZNPNode_ZPP_Arbiter tmp13 = set->arbiters->head;		HX_STACK_VAR(tmp13,"tmp13");
					HX_STACK_LINE(3261)
					bool tmp14 = (tmp13 == null());		HX_STACK_VAR(tmp14,"tmp14");
					HX_STACK_LINE(3261)
					if ((tmp14)){
						HX_STACK_LINE(3262)
						::zpp_nape::space::ZPP_CallbackSet tmp15;		HX_STACK_VAR(tmp15,"tmp15");
						HX_STACK_LINE(3262)
						{
							HX_STACK_LINE(3262)
							::zpp_nape::space::ZPP_CallbackSet tmp16 = this->callbackset_list;		HX_STACK_VAR(tmp16,"tmp16");
							HX_STACK_LINE(3262)
							::zpp_nape::space::ZPP_CallbackSet _this = tmp16;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(3262)
							::zpp_nape::space::ZPP_CallbackSet old;		HX_STACK_VAR(old,"old");
							HX_STACK_LINE(3262)
							::zpp_nape::space::ZPP_CallbackSet ret;		HX_STACK_VAR(ret,"ret");
							HX_STACK_LINE(3262)
							bool tmp17 = (pre1 == null());		HX_STACK_VAR(tmp17,"tmp17");
							HX_STACK_LINE(3262)
							if ((tmp17)){
								HX_STACK_LINE(3262)
								old = _this->next;
								HX_STACK_LINE(3262)
								ret = old->next;
								HX_STACK_LINE(3262)
								_this->next = ret;
								HX_STACK_LINE(3262)
								bool tmp18 = (_this->next == null());		HX_STACK_VAR(tmp18,"tmp18");
								HX_STACK_LINE(3262)
								if ((tmp18)){
									HX_STACK_LINE(3262)
									_this->pushmod = true;
								}
							}
							else{
								HX_STACK_LINE(3262)
								old = pre1->next;
								HX_STACK_LINE(3262)
								ret = old->next;
								HX_STACK_LINE(3262)
								pre1->next = ret;
								HX_STACK_LINE(3262)
								bool tmp18 = (ret == null());		HX_STACK_VAR(tmp18,"tmp18");
								HX_STACK_LINE(3262)
								if ((tmp18)){
									HX_STACK_LINE(3262)
									_this->pushmod = true;
								}
							}
							HX_STACK_LINE(3262)
							old->_inuse = false;
							HX_STACK_LINE(3262)
							_this->modified = true;
							HX_STACK_LINE(3262)
							(_this->length)--;
							HX_STACK_LINE(3262)
							_this->pushmod = true;
							HX_STACK_LINE(3262)
							tmp15 = ret;
						}
						HX_STACK_LINE(3262)
						cx_ite = tmp15;
						HX_STACK_LINE(3287)
						{
							HX_STACK_LINE(3288)
							::zpp_nape::space::ZPP_CallbackSet o = set;		HX_STACK_VAR(o,"o");
							HX_STACK_LINE(3297)
							{
								HX_STACK_LINE(3297)
								::zpp_nape::phys::ZPP_Interactor tmp16 = o->int2 = null();		HX_STACK_VAR(tmp16,"tmp16");
								HX_STACK_LINE(3297)
								o->int1 = tmp16;
								HX_STACK_LINE(3297)
								int tmp17 = o->di = (int)-1;		HX_STACK_VAR(tmp17,"tmp17");
								HX_STACK_LINE(3297)
								o->id = tmp17;
								HX_STACK_LINE(3297)
								o->freed = true;
								HX_STACK_LINE(3297)
								Dynamic();
							}
							HX_STACK_LINE(3298)
							::zpp_nape::space::ZPP_CallbackSet tmp16 = ::zpp_nape::space::ZPP_CallbackSet_obj::zpp_pool;		HX_STACK_VAR(tmp16,"tmp16");
							HX_STACK_LINE(3298)
							o->next = tmp16;
							HX_STACK_LINE(3299)
							::zpp_nape::space::ZPP_CallbackSet_obj::zpp_pool = o;
						}
						HX_STACK_LINE(3304)
						continue;
					}
					HX_STACK_LINE(3306)
					bool tmp15;		HX_STACK_VAR(tmp15,"tmp15");
					HX_STACK_LINE(3306)
					{
						HX_STACK_LINE(3306)
						bool ret;		HX_STACK_VAR(ret,"ret");
						HX_STACK_LINE(3306)
						{
							HX_STACK_LINE(3306)
							ret = true;
							HX_STACK_LINE(3306)
							{
								HX_STACK_LINE(3306)
								::zpp_nape::util::ZNPNode_ZPP_Arbiter tmp16 = set->arbiters->head;		HX_STACK_VAR(tmp16,"tmp16");
								HX_STACK_LINE(3306)
								::zpp_nape::util::ZNPNode_ZPP_Arbiter cx_ite1 = tmp16;		HX_STACK_VAR(cx_ite1,"cx_ite1");
								HX_STACK_LINE(3306)
								while((true)){
									HX_STACK_LINE(3306)
									bool tmp17 = (cx_ite1 != null());		HX_STACK_VAR(tmp17,"tmp17");
									HX_STACK_LINE(3306)
									bool tmp18 = !(tmp17);		HX_STACK_VAR(tmp18,"tmp18");
									HX_STACK_LINE(3306)
									if ((tmp18)){
										HX_STACK_LINE(3306)
										break;
									}
									HX_STACK_LINE(3306)
									::zpp_nape::dynamics::ZPP_Arbiter x = cx_ite1->elt;		HX_STACK_VAR(x,"x");
									HX_STACK_LINE(3306)
									{
										HX_STACK_LINE(3306)
										bool tmp19 = x->sleeping;		HX_STACK_VAR(tmp19,"tmp19");
										HX_STACK_LINE(3306)
										if ((tmp19)){
											HX_STACK_LINE(3306)
											cx_ite1 = cx_ite1->next;
											HX_STACK_LINE(3306)
											continue;
										}
										else{
											HX_STACK_LINE(3306)
											ret = false;
											HX_STACK_LINE(3306)
											break;
										}
									}
									HX_STACK_LINE(3306)
									cx_ite1 = cx_ite1->next;
								}
							}
						}
						HX_STACK_LINE(3306)
						tmp15 = ret;
					}
					HX_STACK_LINE(3306)
					bool sleeping = tmp15;		HX_STACK_VAR(sleeping,"sleeping");
					HX_STACK_LINE(3307)
					{
						HX_STACK_LINE(3307)
						::zpp_nape::callbacks::ZPP_CbSet tmp16 = set->int1->cbSet;		HX_STACK_VAR(tmp16,"tmp16");
						HX_STACK_LINE(3307)
						::zpp_nape::callbacks::ZPP_CbSet a = tmp16;		HX_STACK_VAR(a,"a");
						HX_STACK_LINE(3307)
						::zpp_nape::callbacks::ZPP_CbSet tmp17 = set->int2->cbSet;		HX_STACK_VAR(tmp17,"tmp17");
						HX_STACK_LINE(3307)
						::zpp_nape::callbacks::ZPP_CbSet b = tmp17;		HX_STACK_VAR(b,"b");
						HX_STACK_LINE(3307)
						int tmp18 = ::zpp_nape::util::ZPP_Flags_obj::id_CbEvent_ONGOING;		HX_STACK_VAR(tmp18,"tmp18");
						HX_STACK_LINE(3307)
						int event = tmp18;		HX_STACK_VAR(event,"event");
						HX_STACK_LINE(3307)
						{
							HX_STACK_LINE(3307)
							::zpp_nape::callbacks::ZPP_CbSetPair tmp19;		HX_STACK_VAR(tmp19,"tmp19");
							HX_STACK_LINE(3307)
							{
								HX_STACK_LINE(3307)
								::zpp_nape::callbacks::ZPP_CbSetPair ret = null();		HX_STACK_VAR(ret,"ret");
								HX_STACK_LINE(3307)
								int tmp20 = a->cbpairs->length;		HX_STACK_VAR(tmp20,"tmp20");
								HX_STACK_LINE(3307)
								int tmp21 = b->cbpairs->length;		HX_STACK_VAR(tmp21,"tmp21");
								HX_STACK_LINE(3307)
								bool tmp22 = (tmp20 < tmp21);		HX_STACK_VAR(tmp22,"tmp22");
								HX_STACK_LINE(3307)
								::zpp_nape::util::ZNPList_ZPP_CbSetPair tmp23;		HX_STACK_VAR(tmp23,"tmp23");
								HX_STACK_LINE(3307)
								if ((tmp22)){
									HX_STACK_LINE(3307)
									tmp23 = a->cbpairs;
								}
								else{
									HX_STACK_LINE(3307)
									tmp23 = b->cbpairs;
								}
								HX_STACK_LINE(3307)
								::zpp_nape::util::ZNPList_ZPP_CbSetPair pairs = tmp23;		HX_STACK_VAR(pairs,"pairs");
								HX_STACK_LINE(3307)
								{
									HX_STACK_LINE(3307)
									::zpp_nape::util::ZNPNode_ZPP_CbSetPair cx_ite1 = pairs->head;		HX_STACK_VAR(cx_ite1,"cx_ite1");
									HX_STACK_LINE(3307)
									while((true)){
										HX_STACK_LINE(3307)
										bool tmp24 = (cx_ite1 != null());		HX_STACK_VAR(tmp24,"tmp24");
										HX_STACK_LINE(3307)
										bool tmp25 = !(tmp24);		HX_STACK_VAR(tmp25,"tmp25");
										HX_STACK_LINE(3307)
										if ((tmp25)){
											HX_STACK_LINE(3307)
											break;
										}
										HX_STACK_LINE(3307)
										::zpp_nape::callbacks::ZPP_CbSetPair p = cx_ite1->elt;		HX_STACK_VAR(p,"p");
										HX_STACK_LINE(3307)
										{
											HX_STACK_LINE(3307)
											bool tmp26 = (p->a == a);		HX_STACK_VAR(tmp26,"tmp26");
											HX_STACK_LINE(3307)
											bool tmp27 = tmp26;		HX_STACK_VAR(tmp27,"tmp27");
											HX_STACK_LINE(3307)
											bool tmp28;		HX_STACK_VAR(tmp28,"tmp28");
											HX_STACK_LINE(3307)
											if ((tmp27)){
												HX_STACK_LINE(3307)
												tmp28 = (p->b == b);
											}
											else{
												HX_STACK_LINE(3307)
												tmp28 = false;
											}
											HX_STACK_LINE(3307)
											bool tmp29 = !(tmp28);		HX_STACK_VAR(tmp29,"tmp29");
											HX_STACK_LINE(3307)
											bool tmp30;		HX_STACK_VAR(tmp30,"tmp30");
											HX_STACK_LINE(3307)
											if ((tmp29)){
												HX_STACK_LINE(3307)
												bool tmp31 = (p->a == b);		HX_STACK_VAR(tmp31,"tmp31");
												HX_STACK_LINE(3307)
												bool tmp32 = tmp31;		HX_STACK_VAR(tmp32,"tmp32");
												HX_STACK_LINE(3307)
												bool tmp33 = tmp32;		HX_STACK_VAR(tmp33,"tmp33");
												HX_STACK_LINE(3307)
												if ((tmp33)){
													HX_STACK_LINE(3307)
													tmp30 = (p->b == a);
												}
												else{
													HX_STACK_LINE(3307)
													tmp30 = false;
												}
											}
											else{
												HX_STACK_LINE(3307)
												tmp30 = true;
											}
											HX_STACK_LINE(3307)
											if ((tmp30)){
												HX_STACK_LINE(3307)
												ret = p;
												HX_STACK_LINE(3307)
												break;
											}
										}
										HX_STACK_LINE(3307)
										cx_ite1 = cx_ite1->next;
									}
								}
								HX_STACK_LINE(3307)
								bool tmp24 = (ret == null());		HX_STACK_VAR(tmp24,"tmp24");
								HX_STACK_LINE(3307)
								if ((tmp24)){
									HX_STACK_LINE(3307)
									::zpp_nape::callbacks::ZPP_CbSetPair tmp25;		HX_STACK_VAR(tmp25,"tmp25");
									HX_STACK_LINE(3307)
									{
										HX_STACK_LINE(3307)
										::zpp_nape::callbacks::ZPP_CbSetPair ret1;		HX_STACK_VAR(ret1,"ret1");
										HX_STACK_LINE(3307)
										{
											HX_STACK_LINE(3307)
											::zpp_nape::callbacks::ZPP_CbSetPair tmp26 = ::zpp_nape::callbacks::ZPP_CbSetPair_obj::zpp_pool;		HX_STACK_VAR(tmp26,"tmp26");
											HX_STACK_LINE(3307)
											bool tmp27 = (tmp26 == null());		HX_STACK_VAR(tmp27,"tmp27");
											HX_STACK_LINE(3307)
											if ((tmp27)){
												HX_STACK_LINE(3307)
												::zpp_nape::callbacks::ZPP_CbSetPair tmp28 = ::zpp_nape::callbacks::ZPP_CbSetPair_obj::__new();		HX_STACK_VAR(tmp28,"tmp28");
												HX_STACK_LINE(3307)
												ret1 = tmp28;
											}
											else{
												HX_STACK_LINE(3307)
												::zpp_nape::callbacks::ZPP_CbSetPair tmp28 = ::zpp_nape::callbacks::ZPP_CbSetPair_obj::zpp_pool;		HX_STACK_VAR(tmp28,"tmp28");
												HX_STACK_LINE(3307)
												ret1 = tmp28;
												HX_STACK_LINE(3307)
												::zpp_nape::callbacks::ZPP_CbSetPair_obj::zpp_pool = ret1->next;
												HX_STACK_LINE(3307)
												ret1->next = null();
											}
											HX_STACK_LINE(3307)
											ret1->zip_listeners = true;
										}
										HX_STACK_LINE(3307)
										::zpp_nape::callbacks::ZPP_CbSet tmp26 = a;		HX_STACK_VAR(tmp26,"tmp26");
										HX_STACK_LINE(3307)
										::zpp_nape::callbacks::ZPP_CbSet tmp27 = b;		HX_STACK_VAR(tmp27,"tmp27");
										HX_STACK_LINE(3307)
										bool tmp28 = ::zpp_nape::callbacks::ZPP_CbSet_obj::setlt(tmp26,tmp27);		HX_STACK_VAR(tmp28,"tmp28");
										HX_STACK_LINE(3307)
										if ((tmp28)){
											HX_STACK_LINE(3307)
											ret1->a = a;
											HX_STACK_LINE(3307)
											ret1->b = b;
										}
										else{
											HX_STACK_LINE(3307)
											ret1->a = b;
											HX_STACK_LINE(3307)
											ret1->b = a;
										}
										HX_STACK_LINE(3307)
										tmp25 = ret1;
									}
									HX_STACK_LINE(3307)
									ret = tmp25;
									HX_STACK_LINE(3307)
									::zpp_nape::callbacks::ZPP_CbSetPair tmp26 = ret;		HX_STACK_VAR(tmp26,"tmp26");
									HX_STACK_LINE(3307)
									a->cbpairs->add(tmp26);
									HX_STACK_LINE(3307)
									bool tmp27 = (b != a);		HX_STACK_VAR(tmp27,"tmp27");
									HX_STACK_LINE(3307)
									if ((tmp27)){
										HX_STACK_LINE(3307)
										::zpp_nape::callbacks::ZPP_CbSetPair tmp28 = ret;		HX_STACK_VAR(tmp28,"tmp28");
										HX_STACK_LINE(3307)
										b->cbpairs->add(tmp28);
									}
								}
								HX_STACK_LINE(3307)
								{
									HX_STACK_LINE(3307)
									bool tmp25 = ret->zip_listeners;		HX_STACK_VAR(tmp25,"tmp25");
									HX_STACK_LINE(3307)
									if ((tmp25)){
										HX_STACK_LINE(3307)
										ret->zip_listeners = false;
										HX_STACK_LINE(3307)
										ret->__validate();
									}
								}
								HX_STACK_LINE(3307)
								tmp19 = ret;
							}
							HX_STACK_LINE(3307)
							::zpp_nape::callbacks::ZPP_CbSetPair _this = tmp19;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(3307)
							{
								HX_STACK_LINE(3307)
								::zpp_nape::util::ZNPNode_ZPP_InteractionListener tmp20 = _this->listeners->head;		HX_STACK_VAR(tmp20,"tmp20");
								HX_STACK_LINE(3307)
								::zpp_nape::util::ZNPNode_ZPP_InteractionListener cx_ite1 = tmp20;		HX_STACK_VAR(cx_ite1,"cx_ite1");
								HX_STACK_LINE(3307)
								while((true)){
									HX_STACK_LINE(3307)
									bool tmp21 = (cx_ite1 != null());		HX_STACK_VAR(tmp21,"tmp21");
									HX_STACK_LINE(3307)
									bool tmp22 = !(tmp21);		HX_STACK_VAR(tmp22,"tmp22");
									HX_STACK_LINE(3307)
									if ((tmp22)){
										HX_STACK_LINE(3307)
										break;
									}
									HX_STACK_LINE(3307)
									::zpp_nape::callbacks::ZPP_InteractionListener x = cx_ite1->elt;		HX_STACK_VAR(x,"x");
									HX_STACK_LINE(3307)
									{
										HX_STACK_LINE(3307)
										bool tmp23 = (x->event == event);		HX_STACK_VAR(tmp23,"tmp23");
										HX_STACK_LINE(3307)
										if ((tmp23)){
											HX_STACK_LINE(3307)
											::zpp_nape::callbacks::ZPP_InteractionListener tmp24 = x;		HX_STACK_VAR(tmp24,"tmp24");
											HX_STACK_LINE(3308)
											{
												HX_STACK_LINE(3308)
												bool tmp25 = sleeping;		HX_STACK_VAR(tmp25,"tmp25");
												HX_STACK_LINE(3308)
												bool tmp26 = tmp25;		HX_STACK_VAR(tmp26,"tmp26");
												HX_STACK_LINE(3308)
												bool tmp27 = !(tmp26);		HX_STACK_VAR(tmp27,"tmp27");
												HX_STACK_LINE(3308)
												bool tmp28 = !(tmp27);		HX_STACK_VAR(tmp28,"tmp28");
												HX_STACK_LINE(3308)
												bool tmp29 = tmp28;		HX_STACK_VAR(tmp29,"tmp29");
												HX_STACK_LINE(3308)
												bool tmp30;		HX_STACK_VAR(tmp30,"tmp30");
												HX_STACK_LINE(3308)
												if ((tmp29)){
													HX_STACK_LINE(3308)
													tmp30 = tmp24->allowSleepingCallbacks;
												}
												else{
													HX_STACK_LINE(3308)
													tmp30 = true;
												}
												HX_STACK_LINE(3308)
												bool tmp31;		HX_STACK_VAR(tmp31,"tmp31");
												HX_STACK_LINE(3308)
												if ((tmp30)){
													HX_STACK_LINE(3308)
													int tmp32 = tmp24->itype;		HX_STACK_VAR(tmp32,"tmp32");
													HX_STACK_LINE(3308)
													int tmp33 = tmp32;		HX_STACK_VAR(tmp33,"tmp33");
													HX_STACK_LINE(3308)
													bool tmp34 = set->empty_arb(tmp33);		HX_STACK_VAR(tmp34,"tmp34");
													HX_STACK_LINE(3308)
													bool tmp35 = tmp34;		HX_STACK_VAR(tmp35,"tmp35");
													HX_STACK_LINE(3308)
													bool tmp36 = tmp35;		HX_STACK_VAR(tmp36,"tmp36");
													HX_STACK_LINE(3308)
													tmp31 = !(tmp36);
												}
												else{
													HX_STACK_LINE(3308)
													tmp31 = false;
												}
												HX_STACK_LINE(3308)
												if ((tmp31)){
													HX_STACK_LINE(3307)
													::zpp_nape::callbacks::ZPP_InteractionListener tmp32 = tmp24;		HX_STACK_VAR(tmp32,"tmp32");
													HX_STACK_LINE(3309)
													::zpp_nape::callbacks::ZPP_Callback tmp33 = _g->push_callback(tmp32);		HX_STACK_VAR(tmp33,"tmp33");
													HX_STACK_LINE(3309)
													::zpp_nape::callbacks::ZPP_Callback cb = tmp33;		HX_STACK_VAR(cb,"cb");
													HX_STACK_LINE(3310)
													int tmp34 = ::zpp_nape::util::ZPP_Flags_obj::id_CbEvent_ONGOING;		HX_STACK_VAR(tmp34,"tmp34");
													HX_STACK_LINE(3310)
													cb->event = tmp34;
													HX_STACK_LINE(3311)
													{
														HX_STACK_LINE(3311)
														::zpp_nape::phys::ZPP_Interactor o1 = set->int1;		HX_STACK_VAR(o1,"o1");
														HX_STACK_LINE(3311)
														::zpp_nape::phys::ZPP_Interactor o2 = set->int2;		HX_STACK_VAR(o2,"o2");
														HX_STACK_LINE(3311)
														bool tmp35;		HX_STACK_VAR(tmp35,"tmp35");
														HX_STACK_LINE(3311)
														{
															HX_STACK_LINE(3311)
															::zpp_nape::callbacks::ZPP_OptionType _this1 = tmp24->options1;		HX_STACK_VAR(_this1,"_this1");
															HX_STACK_LINE(3311)
															::zpp_nape::util::ZNPList_ZPP_CbType xs = o1->cbTypes;		HX_STACK_VAR(xs,"xs");
															HX_STACK_LINE(3311)
															::zpp_nape::util::ZNPList_ZPP_CbType tmp36 = xs;		HX_STACK_VAR(tmp36,"tmp36");
															HX_STACK_LINE(3311)
															::zpp_nape::util::ZNPList_ZPP_CbType tmp37 = _this1->includes;		HX_STACK_VAR(tmp37,"tmp37");
															HX_STACK_LINE(3311)
															::zpp_nape::util::ZNPList_ZPP_CbType tmp38 = tmp36;		HX_STACK_VAR(tmp38,"tmp38");
															HX_STACK_LINE(3311)
															::zpp_nape::util::ZNPList_ZPP_CbType tmp39 = tmp37;		HX_STACK_VAR(tmp39,"tmp39");
															HX_STACK_LINE(3311)
															::zpp_nape::util::ZNPList_ZPP_CbType tmp40 = tmp38;		HX_STACK_VAR(tmp40,"tmp40");
															HX_STACK_LINE(3311)
															::zpp_nape::util::ZNPList_ZPP_CbType tmp41 = tmp39;		HX_STACK_VAR(tmp41,"tmp41");
															HX_STACK_LINE(3311)
															bool tmp42 = _this1->nonemptyintersection(tmp40,tmp41);		HX_STACK_VAR(tmp42,"tmp42");
															HX_STACK_LINE(3311)
															bool tmp43 = tmp42;		HX_STACK_VAR(tmp43,"tmp43");
															HX_STACK_LINE(3311)
															bool tmp44 = tmp43;		HX_STACK_VAR(tmp44,"tmp44");
															HX_STACK_LINE(3311)
															if ((tmp44)){
																HX_STACK_LINE(3311)
																::zpp_nape::util::ZNPList_ZPP_CbType tmp45 = xs;		HX_STACK_VAR(tmp45,"tmp45");
																HX_STACK_LINE(3311)
																::zpp_nape::util::ZNPList_ZPP_CbType tmp46 = _this1->excludes;		HX_STACK_VAR(tmp46,"tmp46");
																HX_STACK_LINE(3311)
																::zpp_nape::util::ZNPList_ZPP_CbType tmp47 = tmp45;		HX_STACK_VAR(tmp47,"tmp47");
																HX_STACK_LINE(3311)
																::zpp_nape::util::ZNPList_ZPP_CbType tmp48 = tmp46;		HX_STACK_VAR(tmp48,"tmp48");
																HX_STACK_LINE(3311)
																::zpp_nape::util::ZNPList_ZPP_CbType tmp49 = tmp47;		HX_STACK_VAR(tmp49,"tmp49");
																HX_STACK_LINE(3311)
																::zpp_nape::util::ZNPList_ZPP_CbType tmp50 = tmp48;		HX_STACK_VAR(tmp50,"tmp50");
																HX_STACK_LINE(3311)
																bool tmp51 = _this1->nonemptyintersection(tmp49,tmp50);		HX_STACK_VAR(tmp51,"tmp51");
																HX_STACK_LINE(3311)
																bool tmp52 = tmp51;		HX_STACK_VAR(tmp52,"tmp52");
																HX_STACK_LINE(3311)
																bool tmp53 = tmp52;		HX_STACK_VAR(tmp53,"tmp53");
																HX_STACK_LINE(3311)
																bool tmp54 = tmp53;		HX_STACK_VAR(tmp54,"tmp54");
																HX_STACK_LINE(3311)
																bool tmp55 = tmp54;		HX_STACK_VAR(tmp55,"tmp55");
																HX_STACK_LINE(3311)
																tmp35 = !(tmp55);
															}
															else{
																HX_STACK_LINE(3311)
																tmp35 = false;
															}
														}
														HX_STACK_LINE(3311)
														bool tmp36;		HX_STACK_VAR(tmp36,"tmp36");
														HX_STACK_LINE(3311)
														if ((tmp35)){
															HX_STACK_LINE(3311)
															::zpp_nape::callbacks::ZPP_OptionType _this1 = tmp24->options2;		HX_STACK_VAR(_this1,"_this1");
															HX_STACK_LINE(3311)
															::zpp_nape::util::ZNPList_ZPP_CbType xs = o2->cbTypes;		HX_STACK_VAR(xs,"xs");
															HX_STACK_LINE(3311)
															::zpp_nape::util::ZNPList_ZPP_CbType tmp37 = xs;		HX_STACK_VAR(tmp37,"tmp37");
															HX_STACK_LINE(3311)
															::zpp_nape::util::ZNPList_ZPP_CbType tmp38 = _this1->includes;		HX_STACK_VAR(tmp38,"tmp38");
															HX_STACK_LINE(3311)
															::zpp_nape::util::ZNPList_ZPP_CbType tmp39 = tmp37;		HX_STACK_VAR(tmp39,"tmp39");
															HX_STACK_LINE(3311)
															::zpp_nape::util::ZNPList_ZPP_CbType tmp40 = tmp38;		HX_STACK_VAR(tmp40,"tmp40");
															HX_STACK_LINE(3311)
															::zpp_nape::util::ZNPList_ZPP_CbType tmp41 = tmp39;		HX_STACK_VAR(tmp41,"tmp41");
															HX_STACK_LINE(3311)
															::zpp_nape::util::ZNPList_ZPP_CbType tmp42 = tmp40;		HX_STACK_VAR(tmp42,"tmp42");
															HX_STACK_LINE(3311)
															bool tmp43 = _this1->nonemptyintersection(tmp41,tmp42);		HX_STACK_VAR(tmp43,"tmp43");
															HX_STACK_LINE(3311)
															bool tmp44 = tmp43;		HX_STACK_VAR(tmp44,"tmp44");
															HX_STACK_LINE(3311)
															bool tmp45 = tmp44;		HX_STACK_VAR(tmp45,"tmp45");
															HX_STACK_LINE(3311)
															if ((tmp45)){
																HX_STACK_LINE(3311)
																::zpp_nape::util::ZNPList_ZPP_CbType tmp46 = xs;		HX_STACK_VAR(tmp46,"tmp46");
																HX_STACK_LINE(3311)
																::zpp_nape::util::ZNPList_ZPP_CbType tmp47 = _this1->excludes;		HX_STACK_VAR(tmp47,"tmp47");
																HX_STACK_LINE(3311)
																::zpp_nape::util::ZNPList_ZPP_CbType tmp48 = tmp46;		HX_STACK_VAR(tmp48,"tmp48");
																HX_STACK_LINE(3311)
																::zpp_nape::util::ZNPList_ZPP_CbType tmp49 = tmp47;		HX_STACK_VAR(tmp49,"tmp49");
																HX_STACK_LINE(3311)
																::zpp_nape::util::ZNPList_ZPP_CbType tmp50 = tmp48;		HX_STACK_VAR(tmp50,"tmp50");
																HX_STACK_LINE(3311)
																::zpp_nape::util::ZNPList_ZPP_CbType tmp51 = tmp49;		HX_STACK_VAR(tmp51,"tmp51");
																HX_STACK_LINE(3311)
																bool tmp52 = _this1->nonemptyintersection(tmp50,tmp51);		HX_STACK_VAR(tmp52,"tmp52");
																HX_STACK_LINE(3311)
																bool tmp53 = tmp52;		HX_STACK_VAR(tmp53,"tmp53");
																HX_STACK_LINE(3311)
																bool tmp54 = tmp53;		HX_STACK_VAR(tmp54,"tmp54");
																HX_STACK_LINE(3311)
																bool tmp55 = tmp54;		HX_STACK_VAR(tmp55,"tmp55");
																HX_STACK_LINE(3311)
																bool tmp56 = tmp55;		HX_STACK_VAR(tmp56,"tmp56");
																HX_STACK_LINE(3311)
																tmp36 = !(tmp56);
															}
															else{
																HX_STACK_LINE(3311)
																tmp36 = false;
															}
														}
														else{
															HX_STACK_LINE(3311)
															tmp36 = false;
														}
														HX_STACK_LINE(3311)
														if ((tmp36)){
															HX_STACK_LINE(3311)
															cb->int1 = o1;
															HX_STACK_LINE(3311)
															cb->int2 = o2;
														}
														else{
															HX_STACK_LINE(3311)
															cb->int1 = o2;
															HX_STACK_LINE(3311)
															cb->int2 = o1;
														}
													}
													HX_STACK_LINE(3312)
													cb->set = set;
												}
											}
										}
									}
									HX_STACK_LINE(3307)
									cx_ite1 = cx_ite1->next;
								}
							}
						}
					}
					HX_STACK_LINE(3315)
					pre1 = cx_ite;
				}
				HX_STACK_LINE(3317)
				cx_ite = cx_ite->next;
			}
		}
		HX_STACK_LINE(3320)
		while((true)){
			HX_STACK_LINE(3320)
			::zpp_nape::callbacks::ZPP_Callback tmp10 = this->callbacks;		HX_STACK_VAR(tmp10,"tmp10");
			HX_STACK_LINE(3320)
			bool tmp11 = tmp10->empty();		HX_STACK_VAR(tmp11,"tmp11");
			HX_STACK_LINE(3320)
			bool tmp12 = !(tmp11);		HX_STACK_VAR(tmp12,"tmp12");
			HX_STACK_LINE(3320)
			bool tmp13 = !(tmp12);		HX_STACK_VAR(tmp13,"tmp13");
			HX_STACK_LINE(3320)
			if ((tmp13)){
				HX_STACK_LINE(3320)
				break;
			}
			HX_STACK_LINE(3321)
			::zpp_nape::callbacks::ZPP_Callback tmp14 = this->callbacks;		HX_STACK_VAR(tmp14,"tmp14");
			HX_STACK_LINE(3321)
			::zpp_nape::callbacks::ZPP_Callback tmp15 = tmp14->pop();		HX_STACK_VAR(tmp15,"tmp15");
			HX_STACK_LINE(3321)
			::zpp_nape::callbacks::ZPP_Callback cb = tmp15;		HX_STACK_VAR(cb,"cb");
			HX_STACK_LINE(3322)
			int tmp16 = cb->listener->type;		HX_STACK_VAR(tmp16,"tmp16");
			HX_STACK_LINE(3322)
			int tmp17 = ::zpp_nape::util::ZPP_Flags_obj::id_ListenerType_BODY;		HX_STACK_VAR(tmp17,"tmp17");
			HX_STACK_LINE(3322)
			bool tmp18 = (tmp16 == tmp17);		HX_STACK_VAR(tmp18,"tmp18");
			HX_STACK_LINE(3322)
			if ((tmp18)){
				HX_STACK_LINE(3323)
				::zpp_nape::callbacks::ZPP_BodyListener tmp19 = cb->listener->body;		HX_STACK_VAR(tmp19,"tmp19");
				HX_STACK_LINE(3323)
				::zpp_nape::callbacks::ZPP_BodyListener o = tmp19;		HX_STACK_VAR(o,"o");
				HX_STACK_LINE(3324)
				::nape::callbacks::BodyCallback tmp20 = cb->wrapper_body();		HX_STACK_VAR(tmp20,"tmp20");
				HX_STACK_LINE(3324)
				o->handler(tmp20);
			}
			else{
				HX_STACK_LINE(3326)
				int tmp19 = cb->listener->type;		HX_STACK_VAR(tmp19,"tmp19");
				HX_STACK_LINE(3326)
				int tmp20 = ::zpp_nape::util::ZPP_Flags_obj::id_ListenerType_CONSTRAINT;		HX_STACK_VAR(tmp20,"tmp20");
				HX_STACK_LINE(3326)
				bool tmp21 = (tmp19 == tmp20);		HX_STACK_VAR(tmp21,"tmp21");
				HX_STACK_LINE(3326)
				if ((tmp21)){
					HX_STACK_LINE(3327)
					::zpp_nape::callbacks::ZPP_ConstraintListener tmp22 = cb->listener->constraint;		HX_STACK_VAR(tmp22,"tmp22");
					HX_STACK_LINE(3327)
					::zpp_nape::callbacks::ZPP_ConstraintListener o = tmp22;		HX_STACK_VAR(o,"o");
					HX_STACK_LINE(3328)
					::nape::callbacks::ConstraintCallback tmp23 = cb->wrapper_con();		HX_STACK_VAR(tmp23,"tmp23");
					HX_STACK_LINE(3328)
					o->handler(tmp23);
				}
				else{
					HX_STACK_LINE(3330)
					int tmp22 = cb->listener->type;		HX_STACK_VAR(tmp22,"tmp22");
					HX_STACK_LINE(3330)
					int tmp23 = ::zpp_nape::util::ZPP_Flags_obj::id_ListenerType_INTERACTION;		HX_STACK_VAR(tmp23,"tmp23");
					HX_STACK_LINE(3330)
					bool tmp24 = (tmp22 == tmp23);		HX_STACK_VAR(tmp24,"tmp24");
					HX_STACK_LINE(3330)
					if ((tmp24)){
						HX_STACK_LINE(3331)
						::zpp_nape::callbacks::ZPP_InteractionListener tmp25 = cb->listener->interaction;		HX_STACK_VAR(tmp25,"tmp25");
						HX_STACK_LINE(3331)
						::zpp_nape::callbacks::ZPP_InteractionListener o = tmp25;		HX_STACK_VAR(o,"o");
						HX_STACK_LINE(3332)
						::nape::callbacks::InteractionCallback tmp26 = cb->wrapper_int();		HX_STACK_VAR(tmp26,"tmp26");
						HX_STACK_LINE(3332)
						o->handleri(tmp26);
					}
				}
			}
			HX_STACK_LINE(3334)
			{
				HX_STACK_LINE(3335)
				::zpp_nape::callbacks::ZPP_Callback o = cb;		HX_STACK_VAR(o,"o");
				HX_STACK_LINE(3344)
				{
					HX_STACK_LINE(3344)
					::zpp_nape::phys::ZPP_Interactor tmp19 = o->int2 = null();		HX_STACK_VAR(tmp19,"tmp19");
					HX_STACK_LINE(3344)
					o->int1 = tmp19;
					HX_STACK_LINE(3344)
					o->body = null();
					HX_STACK_LINE(3344)
					o->constraint = null();
					HX_STACK_LINE(3344)
					o->listener = null();
					HX_STACK_LINE(3344)
					bool tmp20 = (o->wrap_arbiters != null());		HX_STACK_VAR(tmp20,"tmp20");
					HX_STACK_LINE(3344)
					if ((tmp20)){
						HX_STACK_LINE(3344)
						::zpp_nape::util::ZPP_ArbiterList tmp21 = o->wrap_arbiters->zpp_inner;		HX_STACK_VAR(tmp21,"tmp21");
						HX_STACK_LINE(3344)
						tmp21->inner = null();
					}
					HX_STACK_LINE(3344)
					o->set = null();
				}
				HX_STACK_LINE(3345)
				::zpp_nape::callbacks::ZPP_Callback tmp19 = ::zpp_nape::callbacks::ZPP_Callback_obj::zpp_pool;		HX_STACK_VAR(tmp19,"tmp19");
				HX_STACK_LINE(3345)
				o->next = tmp19;
				HX_STACK_LINE(3346)
				::zpp_nape::callbacks::ZPP_Callback_obj::zpp_pool = o;
			}
		}
	}
return null();
}


HX_DEFINE_DYNAMIC_FUNC3(ZPP_Space_obj,step,(void))

Void ZPP_Space_obj::continuousCollisions( Float deltaTime){
{
		HX_STACK_FRAME("zpp_nape.space.ZPP_Space","continuousCollisions",0xd9b3b026,"zpp_nape.space.ZPP_Space.continuousCollisions","zpp_nape/space/Space.hx",3354,0x2b65ed03)
		HX_STACK_THIS(this)
		HX_STACK_ARG(deltaTime,"deltaTime")
		HX_STACK_LINE(3355)
		Float tmp = ::Math_obj::PI;		HX_STACK_VAR(tmp,"tmp");
		HX_STACK_LINE(3355)
		Float tmp1 = ((int)2 * tmp);		HX_STACK_VAR(tmp1,"tmp1");
		HX_STACK_LINE(3355)
		Float tmp2 = deltaTime;		HX_STACK_VAR(tmp2,"tmp2");
		HX_STACK_LINE(3355)
		Float tmp3 = (Float(tmp1) / Float(tmp2));		HX_STACK_VAR(tmp3,"tmp3");
		HX_STACK_LINE(3355)
		Float MAX_VEL = tmp3;		HX_STACK_VAR(MAX_VEL,"MAX_VEL");
		HX_STACK_LINE(3356)
		::zpp_nape::space::ZPP_Broadphase tmp4 = this->bphase;		HX_STACK_VAR(tmp4,"tmp4");
		HX_STACK_LINE(3356)
		tmp4->broadphase(hx::ObjectPtr<OBJ_>(this),false);
		HX_STACK_LINE(3357)
		Float curTimeAlpha = ((Float)0.0);		HX_STACK_VAR(curTimeAlpha,"curTimeAlpha");
		HX_STACK_LINE(3358)
		while((true)){
			HX_STACK_LINE(3358)
			bool tmp5 = (curTimeAlpha < (int)1);		HX_STACK_VAR(tmp5,"tmp5");
			HX_STACK_LINE(3358)
			bool tmp6;		HX_STACK_VAR(tmp6,"tmp6");
			HX_STACK_LINE(3358)
			if ((tmp5)){
				HX_STACK_LINE(3358)
				::zpp_nape::util::ZNPList_ZPP_ToiEvent tmp7 = this->toiEvents;		HX_STACK_VAR(tmp7,"tmp7");
				HX_STACK_LINE(3358)
				::zpp_nape::util::ZNPList_ZPP_ToiEvent tmp8 = tmp7;		HX_STACK_VAR(tmp8,"tmp8");
				HX_STACK_LINE(3358)
				::zpp_nape::util::ZNPNode_ZPP_ToiEvent tmp9 = tmp8->head;		HX_STACK_VAR(tmp9,"tmp9");
				HX_STACK_LINE(3358)
				bool tmp10 = (tmp9 == null());		HX_STACK_VAR(tmp10,"tmp10");
				HX_STACK_LINE(3358)
				bool tmp11 = tmp10;		HX_STACK_VAR(tmp11,"tmp11");
				HX_STACK_LINE(3358)
				bool tmp12 = tmp11;		HX_STACK_VAR(tmp12,"tmp12");
				HX_STACK_LINE(3358)
				tmp6 = !(tmp12);
			}
			else{
				HX_STACK_LINE(3358)
				tmp6 = false;
			}
			HX_STACK_LINE(3358)
			bool tmp7 = !(tmp6);		HX_STACK_VAR(tmp7,"tmp7");
			HX_STACK_LINE(3358)
			if ((tmp7)){
				HX_STACK_LINE(3358)
				break;
			}
			HX_STACK_LINE(3359)
			::zpp_nape::geom::ZPP_ToiEvent minTOI = null();		HX_STACK_VAR(minTOI,"minTOI");
			HX_STACK_LINE(3360)
			Float minTime = ((Float)2.0);		HX_STACK_VAR(minTime,"minTime");
			HX_STACK_LINE(3361)
			bool minKinematic = false;		HX_STACK_VAR(minKinematic,"minKinematic");
			HX_STACK_LINE(3362)
			::zpp_nape::util::ZNPNode_ZPP_ToiEvent preMin = null();		HX_STACK_VAR(preMin,"preMin");
			HX_STACK_LINE(3363)
			::zpp_nape::util::ZNPNode_ZPP_ToiEvent pre = null();		HX_STACK_VAR(pre,"pre");
			HX_STACK_LINE(3364)
			{
				HX_STACK_LINE(3365)
				::zpp_nape::util::ZNPList_ZPP_ToiEvent tmp8 = this->toiEvents;		HX_STACK_VAR(tmp8,"tmp8");
				HX_STACK_LINE(3365)
				::zpp_nape::util::ZNPNode_ZPP_ToiEvent cx_ite = tmp8->head;		HX_STACK_VAR(cx_ite,"cx_ite");
				HX_STACK_LINE(3366)
				while((true)){
					HX_STACK_LINE(3366)
					bool tmp9 = (cx_ite != null());		HX_STACK_VAR(tmp9,"tmp9");
					HX_STACK_LINE(3366)
					bool tmp10 = !(tmp9);		HX_STACK_VAR(tmp10,"tmp10");
					HX_STACK_LINE(3366)
					if ((tmp10)){
						HX_STACK_LINE(3366)
						break;
					}
					HX_STACK_LINE(3367)
					::zpp_nape::geom::ZPP_ToiEvent toi = cx_ite->elt;		HX_STACK_VAR(toi,"toi");
					HX_STACK_LINE(3368)
					{
						HX_STACK_LINE(3369)
						::zpp_nape::phys::ZPP_Body tmp11 = toi->s1->body;		HX_STACK_VAR(tmp11,"tmp11");
						HX_STACK_LINE(3369)
						::zpp_nape::phys::ZPP_Body b1 = tmp11;		HX_STACK_VAR(b1,"b1");
						HX_STACK_LINE(3370)
						::zpp_nape::phys::ZPP_Body tmp12 = toi->s2->body;		HX_STACK_VAR(tmp12,"tmp12");
						HX_STACK_LINE(3370)
						::zpp_nape::phys::ZPP_Body b2 = tmp12;		HX_STACK_VAR(b2,"b2");
						HX_STACK_LINE(3371)
						bool tmp13 = b1->sweepFrozen;		HX_STACK_VAR(tmp13,"tmp13");
						HX_STACK_LINE(3371)
						bool tmp14;		HX_STACK_VAR(tmp14,"tmp14");
						HX_STACK_LINE(3371)
						if ((tmp13)){
							HX_STACK_LINE(3371)
							tmp14 = b2->sweepFrozen;
						}
						else{
							HX_STACK_LINE(3371)
							tmp14 = false;
						}
						HX_STACK_LINE(3371)
						if ((tmp14)){
							HX_STACK_LINE(3372)
							bool tmp15 = (toi->toi != (int)0);		HX_STACK_VAR(tmp15,"tmp15");
							HX_STACK_LINE(3372)
							bool tmp16;		HX_STACK_VAR(tmp16,"tmp16");
							HX_STACK_LINE(3372)
							if ((tmp15)){
								HX_STACK_LINE(3372)
								::zpp_nape::shape::ZPP_Shape tmp17 = toi->s1;		HX_STACK_VAR(tmp17,"tmp17");
								HX_STACK_LINE(3372)
								::zpp_nape::shape::ZPP_Shape tmp18 = toi->s2;		HX_STACK_VAR(tmp18,"tmp18");
								HX_STACK_LINE(3372)
								::zpp_nape::shape::ZPP_Shape tmp19 = tmp17;		HX_STACK_VAR(tmp19,"tmp19");
								HX_STACK_LINE(3372)
								::zpp_nape::shape::ZPP_Shape tmp20 = tmp18;		HX_STACK_VAR(tmp20,"tmp20");
								HX_STACK_LINE(3372)
								tmp16 = ::zpp_nape::geom::ZPP_Collide_obj::testCollide_safe(tmp19,tmp20);
							}
							else{
								HX_STACK_LINE(3372)
								tmp16 = false;
							}
							HX_STACK_LINE(3372)
							if ((tmp16)){
								HX_STACK_LINE(3373)
								toi->toi = (int)0;
							}
							else{
								HX_STACK_LINE(3376)
								::zpp_nape::util::ZNPList_ZPP_ToiEvent tmp17 = this->toiEvents;		HX_STACK_VAR(tmp17,"tmp17");
								HX_STACK_LINE(3376)
								::zpp_nape::util::ZNPNode_ZPP_ToiEvent tmp18 = pre;		HX_STACK_VAR(tmp18,"tmp18");
								HX_STACK_LINE(3376)
								::zpp_nape::util::ZNPNode_ZPP_ToiEvent tmp19 = tmp17->erase(tmp18);		HX_STACK_VAR(tmp19,"tmp19");
								HX_STACK_LINE(3376)
								cx_ite = tmp19;
								HX_STACK_LINE(3377)
								{
									HX_STACK_LINE(3378)
									::zpp_nape::geom::ZPP_ToiEvent o = toi;		HX_STACK_VAR(o,"o");
									HX_STACK_LINE(3388)
									::zpp_nape::geom::ZPP_ToiEvent tmp20 = ::zpp_nape::geom::ZPP_ToiEvent_obj::zpp_pool;		HX_STACK_VAR(tmp20,"tmp20");
									HX_STACK_LINE(3388)
									o->next = tmp20;
									HX_STACK_LINE(3389)
									::zpp_nape::geom::ZPP_ToiEvent_obj::zpp_pool = o;
								}
								HX_STACK_LINE(3394)
								continue;
							}
						}
						HX_STACK_LINE(3397)
						bool tmp15 = (toi->frozen1 != b1->sweepFrozen);		HX_STACK_VAR(tmp15,"tmp15");
						HX_STACK_LINE(3397)
						bool tmp16 = !(tmp15);		HX_STACK_VAR(tmp16,"tmp16");
						HX_STACK_LINE(3397)
						bool tmp17;		HX_STACK_VAR(tmp17,"tmp17");
						HX_STACK_LINE(3397)
						if ((tmp16)){
							HX_STACK_LINE(3397)
							tmp17 = (toi->frozen2 != b2->sweepFrozen);
						}
						else{
							HX_STACK_LINE(3397)
							tmp17 = true;
						}
						HX_STACK_LINE(3397)
						if ((tmp17)){
							HX_STACK_LINE(3398)
							bool tmp18 = toi->kinematic;		HX_STACK_VAR(tmp18,"tmp18");
							HX_STACK_LINE(3398)
							bool tmp19 = !(tmp18);		HX_STACK_VAR(tmp19,"tmp19");
							HX_STACK_LINE(3398)
							if ((tmp19)){
								HX_STACK_LINE(3399)
								toi->frozen1 = b1->sweepFrozen;
								HX_STACK_LINE(3400)
								toi->frozen2 = b2->sweepFrozen;
								HX_STACK_LINE(3401)
								bool tmp20 = toi->frozen1;		HX_STACK_VAR(tmp20,"tmp20");
								HX_STACK_LINE(3401)
								if ((tmp20)){
									HX_STACK_LINE(3402)
									::zpp_nape::shape::ZPP_Shape tmp21 = toi->s1;		HX_STACK_VAR(tmp21,"tmp21");
									HX_STACK_LINE(3403)
									toi->s1 = toi->s2;
									HX_STACK_LINE(3404)
									toi->s2 = tmp21;
									HX_STACK_LINE(3405)
									toi->frozen1 = false;
									HX_STACK_LINE(3406)
									toi->frozen2 = true;
								}
								HX_STACK_LINE(3408)
								::zpp_nape::geom::ZPP_ToiEvent tmp21 = toi;		HX_STACK_VAR(tmp21,"tmp21");
								HX_STACK_LINE(3408)
								Float tmp22 = deltaTime;		HX_STACK_VAR(tmp22,"tmp22");
								HX_STACK_LINE(3408)
								Float tmp23 = ::nape::Config_obj::collisionSlopCCD;		HX_STACK_VAR(tmp23,"tmp23");
								HX_STACK_LINE(3408)
								::zpp_nape::geom::ZPP_SweepDistance_obj::staticSweep(tmp21,tmp22,(int)0,tmp23);
								HX_STACK_LINE(3409)
								bool tmp24 = (toi->toi < (int)0);		HX_STACK_VAR(tmp24,"tmp24");
								HX_STACK_LINE(3409)
								if ((tmp24)){
									HX_STACK_LINE(3410)
									::zpp_nape::util::ZNPList_ZPP_ToiEvent tmp25 = this->toiEvents;		HX_STACK_VAR(tmp25,"tmp25");
									HX_STACK_LINE(3410)
									::zpp_nape::util::ZNPNode_ZPP_ToiEvent tmp26 = pre;		HX_STACK_VAR(tmp26,"tmp26");
									HX_STACK_LINE(3410)
									::zpp_nape::util::ZNPNode_ZPP_ToiEvent tmp27 = tmp25->erase(tmp26);		HX_STACK_VAR(tmp27,"tmp27");
									HX_STACK_LINE(3410)
									cx_ite = tmp27;
									HX_STACK_LINE(3411)
									{
										HX_STACK_LINE(3412)
										::zpp_nape::geom::ZPP_ToiEvent o = toi;		HX_STACK_VAR(o,"o");
										HX_STACK_LINE(3422)
										::zpp_nape::geom::ZPP_ToiEvent tmp28 = ::zpp_nape::geom::ZPP_ToiEvent_obj::zpp_pool;		HX_STACK_VAR(tmp28,"tmp28");
										HX_STACK_LINE(3422)
										o->next = tmp28;
										HX_STACK_LINE(3423)
										::zpp_nape::geom::ZPP_ToiEvent_obj::zpp_pool = o;
									}
									HX_STACK_LINE(3428)
									continue;
								}
							}
							else{
								HX_STACK_LINE(3432)
								::zpp_nape::util::ZNPList_ZPP_ToiEvent tmp20 = this->toiEvents;		HX_STACK_VAR(tmp20,"tmp20");
								HX_STACK_LINE(3432)
								::zpp_nape::util::ZNPNode_ZPP_ToiEvent tmp21 = pre;		HX_STACK_VAR(tmp21,"tmp21");
								HX_STACK_LINE(3432)
								::zpp_nape::util::ZNPNode_ZPP_ToiEvent tmp22 = tmp20->erase(tmp21);		HX_STACK_VAR(tmp22,"tmp22");
								HX_STACK_LINE(3432)
								cx_ite = tmp22;
								HX_STACK_LINE(3433)
								{
									HX_STACK_LINE(3434)
									::zpp_nape::geom::ZPP_ToiEvent o = toi;		HX_STACK_VAR(o,"o");
									HX_STACK_LINE(3444)
									::zpp_nape::geom::ZPP_ToiEvent tmp23 = ::zpp_nape::geom::ZPP_ToiEvent_obj::zpp_pool;		HX_STACK_VAR(tmp23,"tmp23");
									HX_STACK_LINE(3444)
									o->next = tmp23;
									HX_STACK_LINE(3445)
									::zpp_nape::geom::ZPP_ToiEvent_obj::zpp_pool = o;
								}
								HX_STACK_LINE(3450)
								continue;
							}
						}
						HX_STACK_LINE(3453)
						bool tmp18 = (toi->toi >= (int)0);		HX_STACK_VAR(tmp18,"tmp18");
						HX_STACK_LINE(3453)
						bool tmp19;		HX_STACK_VAR(tmp19,"tmp19");
						HX_STACK_LINE(3453)
						if ((tmp18)){
							HX_STACK_LINE(3453)
							bool tmp20 = (toi->toi < minTime);		HX_STACK_VAR(tmp20,"tmp20");
							HX_STACK_LINE(3453)
							bool tmp21 = tmp20;		HX_STACK_VAR(tmp21,"tmp21");
							HX_STACK_LINE(3453)
							bool tmp22 = tmp21;		HX_STACK_VAR(tmp22,"tmp22");
							HX_STACK_LINE(3453)
							bool tmp23 = !(tmp22);		HX_STACK_VAR(tmp23,"tmp23");
							HX_STACK_LINE(3453)
							bool tmp24 = tmp23;		HX_STACK_VAR(tmp24,"tmp24");
							HX_STACK_LINE(3453)
							bool tmp25 = tmp24;		HX_STACK_VAR(tmp25,"tmp25");
							HX_STACK_LINE(3453)
							if ((tmp25)){
								HX_STACK_LINE(3453)
								bool tmp26 = minKinematic;		HX_STACK_VAR(tmp26,"tmp26");
								HX_STACK_LINE(3453)
								bool tmp27 = tmp26;		HX_STACK_VAR(tmp27,"tmp27");
								HX_STACK_LINE(3453)
								bool tmp28 = tmp27;		HX_STACK_VAR(tmp28,"tmp28");
								HX_STACK_LINE(3453)
								bool tmp29 = tmp28;		HX_STACK_VAR(tmp29,"tmp29");
								HX_STACK_LINE(3453)
								bool tmp30 = !(tmp29);		HX_STACK_VAR(tmp30,"tmp30");
								HX_STACK_LINE(3453)
								bool tmp31 = tmp30;		HX_STACK_VAR(tmp31,"tmp31");
								HX_STACK_LINE(3453)
								bool tmp32 = tmp31;		HX_STACK_VAR(tmp32,"tmp32");
								HX_STACK_LINE(3453)
								bool tmp33 = tmp32;		HX_STACK_VAR(tmp33,"tmp33");
								HX_STACK_LINE(3453)
								bool tmp34 = tmp33;		HX_STACK_VAR(tmp34,"tmp34");
								HX_STACK_LINE(3453)
								if ((tmp34)){
									HX_STACK_LINE(3453)
									tmp19 = toi->kinematic;
								}
								else{
									HX_STACK_LINE(3453)
									tmp19 = false;
								}
							}
							else{
								HX_STACK_LINE(3453)
								tmp19 = true;
							}
						}
						else{
							HX_STACK_LINE(3453)
							tmp19 = false;
						}
						HX_STACK_LINE(3453)
						if ((tmp19)){
							HX_STACK_LINE(3454)
							minTOI = toi;
							HX_STACK_LINE(3455)
							minTime = toi->toi;
							HX_STACK_LINE(3456)
							minKinematic = toi->kinematic;
							HX_STACK_LINE(3457)
							preMin = pre;
						}
						HX_STACK_LINE(3459)
						pre = cx_ite;
					}
					HX_STACK_LINE(3461)
					cx_ite = cx_ite->next;
				}
			}
			HX_STACK_LINE(3464)
			bool tmp8 = (minTOI == null());		HX_STACK_VAR(tmp8,"tmp8");
			HX_STACK_LINE(3464)
			if ((tmp8)){
				HX_STACK_LINE(3465)
				break;
			}
			HX_STACK_LINE(3467)
			::zpp_nape::util::ZNPList_ZPP_ToiEvent tmp9 = this->toiEvents;		HX_STACK_VAR(tmp9,"tmp9");
			HX_STACK_LINE(3467)
			::zpp_nape::util::ZNPNode_ZPP_ToiEvent tmp10 = preMin;		HX_STACK_VAR(tmp10,"tmp10");
			HX_STACK_LINE(3467)
			tmp9->erase(tmp10);
			HX_STACK_LINE(3468)
			curTimeAlpha = minTOI->toi;
			HX_STACK_LINE(3469)
			::zpp_nape::phys::ZPP_Body tmp11 = minTOI->s1->body;		HX_STACK_VAR(tmp11,"tmp11");
			HX_STACK_LINE(3469)
			::zpp_nape::phys::ZPP_Body b1 = tmp11;		HX_STACK_VAR(b1,"b1");
			HX_STACK_LINE(3470)
			::zpp_nape::phys::ZPP_Body tmp12 = minTOI->s2->body;		HX_STACK_VAR(tmp12,"tmp12");
			HX_STACK_LINE(3470)
			::zpp_nape::phys::ZPP_Body b2 = tmp12;		HX_STACK_VAR(b2,"b2");
			HX_STACK_LINE(3471)
			bool tmp13 = b1->sweepFrozen;		HX_STACK_VAR(tmp13,"tmp13");
			HX_STACK_LINE(3471)
			bool tmp14 = !(tmp13);		HX_STACK_VAR(tmp14,"tmp14");
			HX_STACK_LINE(3471)
			if ((tmp14)){
				HX_STACK_LINE(3472)
				{
					HX_STACK_LINE(3472)
					Float tmp15 = (curTimeAlpha * deltaTime);		HX_STACK_VAR(tmp15,"tmp15");
					HX_STACK_LINE(3472)
					Float dt = tmp15;		HX_STACK_VAR(dt,"dt");
					HX_STACK_LINE(3472)
					Float tmp16 = (dt - b1->sweepTime);		HX_STACK_VAR(tmp16,"tmp16");
					HX_STACK_LINE(3472)
					Float delta = tmp16;		HX_STACK_VAR(delta,"delta");
					HX_STACK_LINE(3472)
					bool tmp17 = (delta != (int)0);		HX_STACK_VAR(tmp17,"tmp17");
					HX_STACK_LINE(3472)
					if ((tmp17)){
						HX_STACK_LINE(3472)
						b1->sweepTime = dt;
						HX_STACK_LINE(3472)
						{
							HX_STACK_LINE(3472)
							Float t = delta;		HX_STACK_VAR(t,"t");
							HX_STACK_LINE(3472)
							Float tmp18 = (b1->velx * t);		HX_STACK_VAR(tmp18,"tmp18");
							HX_STACK_LINE(3472)
							hx::AddEq(b1->posx,tmp18);
							HX_STACK_LINE(3472)
							Float tmp19 = (b1->vely * t);		HX_STACK_VAR(tmp19,"tmp19");
							HX_STACK_LINE(3472)
							hx::AddEq(b1->posy,tmp19);
						}
						HX_STACK_LINE(3472)
						bool tmp18 = (b1->angvel != (int)0);		HX_STACK_VAR(tmp18,"tmp18");
						HX_STACK_LINE(3472)
						if ((tmp18)){
							HX_STACK_LINE(3472)
							Float tmp19 = (b1->sweep_angvel * delta);		HX_STACK_VAR(tmp19,"tmp19");
							HX_STACK_LINE(3472)
							Float dr = tmp19;		HX_STACK_VAR(dr,"dr");
							HX_STACK_LINE(3472)
							hx::AddEq(b1->rot,dr);
							HX_STACK_LINE(3472)
							Float tmp20 = (dr * dr);		HX_STACK_VAR(tmp20,"tmp20");
							HX_STACK_LINE(3472)
							bool tmp21 = (tmp20 > ((Float)0.0001));		HX_STACK_VAR(tmp21,"tmp21");
							HX_STACK_LINE(3472)
							if ((tmp21)){
								HX_STACK_LINE(3472)
								Float tmp22 = b1->rot;		HX_STACK_VAR(tmp22,"tmp22");
								HX_STACK_LINE(3472)
								Float tmp23 = ::Math_obj::sin(tmp22);		HX_STACK_VAR(tmp23,"tmp23");
								HX_STACK_LINE(3472)
								b1->axisx = tmp23;
								HX_STACK_LINE(3472)
								Float tmp24 = b1->rot;		HX_STACK_VAR(tmp24,"tmp24");
								HX_STACK_LINE(3472)
								Float tmp25 = ::Math_obj::cos(tmp24);		HX_STACK_VAR(tmp25,"tmp25");
								HX_STACK_LINE(3472)
								b1->axisy = tmp25;
								HX_STACK_LINE(3472)
								Dynamic();
							}
							else{
								HX_STACK_LINE(3472)
								Float tmp22 = (dr * dr);		HX_STACK_VAR(tmp22,"tmp22");
								HX_STACK_LINE(3472)
								Float d2 = tmp22;		HX_STACK_VAR(d2,"d2");
								HX_STACK_LINE(3472)
								Float tmp23 = (((Float)0.5) * d2);		HX_STACK_VAR(tmp23,"tmp23");
								HX_STACK_LINE(3472)
								Float tmp24 = ((int)1 - tmp23);		HX_STACK_VAR(tmp24,"tmp24");
								HX_STACK_LINE(3472)
								Float p = tmp24;		HX_STACK_VAR(p,"p");
								HX_STACK_LINE(3472)
								Float tmp25 = (d2 * d2);		HX_STACK_VAR(tmp25,"tmp25");
								HX_STACK_LINE(3472)
								Float tmp26 = (Float(tmp25) / Float((int)8));		HX_STACK_VAR(tmp26,"tmp26");
								HX_STACK_LINE(3472)
								Float tmp27 = ((int)1 - tmp26);		HX_STACK_VAR(tmp27,"tmp27");
								HX_STACK_LINE(3472)
								Float m = tmp27;		HX_STACK_VAR(m,"m");
								HX_STACK_LINE(3472)
								Float tmp28 = (p * b1->axisx);		HX_STACK_VAR(tmp28,"tmp28");
								HX_STACK_LINE(3472)
								Float tmp29 = (dr * b1->axisy);		HX_STACK_VAR(tmp29,"tmp29");
								HX_STACK_LINE(3472)
								Float tmp30 = (tmp28 + tmp29);		HX_STACK_VAR(tmp30,"tmp30");
								HX_STACK_LINE(3472)
								Float tmp31 = m;		HX_STACK_VAR(tmp31,"tmp31");
								HX_STACK_LINE(3472)
								Float tmp32 = (tmp30 * tmp31);		HX_STACK_VAR(tmp32,"tmp32");
								HX_STACK_LINE(3472)
								Float nx = tmp32;		HX_STACK_VAR(nx,"nx");
								HX_STACK_LINE(3472)
								Float tmp33 = (p * b1->axisy);		HX_STACK_VAR(tmp33,"tmp33");
								HX_STACK_LINE(3472)
								Float tmp34 = (dr * b1->axisx);		HX_STACK_VAR(tmp34,"tmp34");
								HX_STACK_LINE(3472)
								Float tmp35 = (tmp33 - tmp34);		HX_STACK_VAR(tmp35,"tmp35");
								HX_STACK_LINE(3472)
								Float tmp36 = m;		HX_STACK_VAR(tmp36,"tmp36");
								HX_STACK_LINE(3472)
								Float tmp37 = (tmp35 * tmp36);		HX_STACK_VAR(tmp37,"tmp37");
								HX_STACK_LINE(3472)
								b1->axisy = tmp37;
								HX_STACK_LINE(3472)
								b1->axisx = nx;
							}
						}
					}
				}
				HX_STACK_LINE(3473)
				{
					HX_STACK_LINE(3473)
					::zpp_nape::shape::ZPP_Shape s = minTOI->s1;		HX_STACK_VAR(s,"s");
					HX_STACK_LINE(3473)
					int tmp15 = s->type;		HX_STACK_VAR(tmp15,"tmp15");
					HX_STACK_LINE(3473)
					int tmp16 = ::zpp_nape::util::ZPP_Flags_obj::id_ShapeType_CIRCLE;		HX_STACK_VAR(tmp16,"tmp16");
					HX_STACK_LINE(3473)
					bool tmp17 = (tmp15 == tmp16);		HX_STACK_VAR(tmp17,"tmp17");
					HX_STACK_LINE(3473)
					if ((tmp17)){
						HX_STACK_LINE(3473)
						Float tmp18 = b1->posx;		HX_STACK_VAR(tmp18,"tmp18");
						HX_STACK_LINE(3473)
						Float tmp19 = (b1->axisy * s->localCOMx);		HX_STACK_VAR(tmp19,"tmp19");
						HX_STACK_LINE(3473)
						Float tmp20 = (b1->axisx * s->localCOMy);		HX_STACK_VAR(tmp20,"tmp20");
						HX_STACK_LINE(3473)
						Float tmp21 = (tmp19 - tmp20);		HX_STACK_VAR(tmp21,"tmp21");
						HX_STACK_LINE(3473)
						Float tmp22 = (tmp18 + tmp21);		HX_STACK_VAR(tmp22,"tmp22");
						HX_STACK_LINE(3473)
						s->worldCOMx = tmp22;
						HX_STACK_LINE(3473)
						Float tmp23 = b1->posy;		HX_STACK_VAR(tmp23,"tmp23");
						HX_STACK_LINE(3473)
						Float tmp24 = (s->localCOMx * b1->axisx);		HX_STACK_VAR(tmp24,"tmp24");
						HX_STACK_LINE(3473)
						Float tmp25 = (s->localCOMy * b1->axisy);		HX_STACK_VAR(tmp25,"tmp25");
						HX_STACK_LINE(3473)
						Float tmp26 = (tmp24 + tmp25);		HX_STACK_VAR(tmp26,"tmp26");
						HX_STACK_LINE(3473)
						Float tmp27 = (tmp23 + tmp26);		HX_STACK_VAR(tmp27,"tmp27");
						HX_STACK_LINE(3473)
						s->worldCOMy = tmp27;
					}
					else{
						HX_STACK_LINE(3473)
						::zpp_nape::shape::ZPP_Polygon p = s->polygon;		HX_STACK_VAR(p,"p");
						HX_STACK_LINE(3473)
						::zpp_nape::geom::ZPP_Vec2 tmp18 = p->lverts->next;		HX_STACK_VAR(tmp18,"tmp18");
						HX_STACK_LINE(3473)
						::zpp_nape::geom::ZPP_Vec2 li = tmp18;		HX_STACK_VAR(li,"li");
						HX_STACK_LINE(3473)
						{
							HX_STACK_LINE(3473)
							::zpp_nape::geom::ZPP_Vec2 tmp19 = p->gverts->next;		HX_STACK_VAR(tmp19,"tmp19");
							HX_STACK_LINE(3473)
							::zpp_nape::geom::ZPP_Vec2 cx_ite = tmp19;		HX_STACK_VAR(cx_ite,"cx_ite");
							HX_STACK_LINE(3473)
							while((true)){
								HX_STACK_LINE(3473)
								bool tmp20 = (cx_ite != null());		HX_STACK_VAR(tmp20,"tmp20");
								HX_STACK_LINE(3473)
								bool tmp21 = !(tmp20);		HX_STACK_VAR(tmp21,"tmp21");
								HX_STACK_LINE(3473)
								if ((tmp21)){
									HX_STACK_LINE(3473)
									break;
								}
								HX_STACK_LINE(3473)
								::zpp_nape::geom::ZPP_Vec2 g = cx_ite;		HX_STACK_VAR(g,"g");
								HX_STACK_LINE(3473)
								{
									HX_STACK_LINE(3473)
									::zpp_nape::geom::ZPP_Vec2 l = li;		HX_STACK_VAR(l,"l");
									HX_STACK_LINE(3473)
									li = li->next;
									HX_STACK_LINE(3473)
									{
										HX_STACK_LINE(3473)
										Float tmp22 = b1->posx;		HX_STACK_VAR(tmp22,"tmp22");
										HX_STACK_LINE(3473)
										Float tmp23 = (b1->axisy * l->x);		HX_STACK_VAR(tmp23,"tmp23");
										HX_STACK_LINE(3473)
										Float tmp24 = (b1->axisx * l->y);		HX_STACK_VAR(tmp24,"tmp24");
										HX_STACK_LINE(3473)
										Float tmp25 = (tmp23 - tmp24);		HX_STACK_VAR(tmp25,"tmp25");
										HX_STACK_LINE(3473)
										Float tmp26 = (tmp22 + tmp25);		HX_STACK_VAR(tmp26,"tmp26");
										HX_STACK_LINE(3473)
										g->x = tmp26;
										HX_STACK_LINE(3473)
										Float tmp27 = b1->posy;		HX_STACK_VAR(tmp27,"tmp27");
										HX_STACK_LINE(3473)
										Float tmp28 = (l->x * b1->axisx);		HX_STACK_VAR(tmp28,"tmp28");
										HX_STACK_LINE(3473)
										Float tmp29 = (l->y * b1->axisy);		HX_STACK_VAR(tmp29,"tmp29");
										HX_STACK_LINE(3473)
										Float tmp30 = (tmp28 + tmp29);		HX_STACK_VAR(tmp30,"tmp30");
										HX_STACK_LINE(3473)
										Float tmp31 = (tmp27 + tmp30);		HX_STACK_VAR(tmp31,"tmp31");
										HX_STACK_LINE(3473)
										g->y = tmp31;
									}
								}
								HX_STACK_LINE(3473)
								cx_ite = cx_ite->next;
							}
						}
						HX_STACK_LINE(3473)
						::zpp_nape::util::ZNPNode_ZPP_Edge tmp19 = p->edges->head;		HX_STACK_VAR(tmp19,"tmp19");
						HX_STACK_LINE(3473)
						::zpp_nape::util::ZNPNode_ZPP_Edge ite = tmp19;		HX_STACK_VAR(ite,"ite");
						HX_STACK_LINE(3473)
						{
							HX_STACK_LINE(3473)
							::zpp_nape::geom::ZPP_Vec2 tmp20 = p->gverts->next;		HX_STACK_VAR(tmp20,"tmp20");
							HX_STACK_LINE(3473)
							::zpp_nape::geom::ZPP_Vec2 cx_ite = tmp20;		HX_STACK_VAR(cx_ite,"cx_ite");
							HX_STACK_LINE(3473)
							::zpp_nape::geom::ZPP_Vec2 u = cx_ite;		HX_STACK_VAR(u,"u");
							HX_STACK_LINE(3473)
							cx_ite = cx_ite->next;
							HX_STACK_LINE(3473)
							while((true)){
								HX_STACK_LINE(3473)
								bool tmp21 = (cx_ite != null());		HX_STACK_VAR(tmp21,"tmp21");
								HX_STACK_LINE(3473)
								bool tmp22 = !(tmp21);		HX_STACK_VAR(tmp22,"tmp22");
								HX_STACK_LINE(3473)
								if ((tmp22)){
									HX_STACK_LINE(3473)
									break;
								}
								HX_STACK_LINE(3473)
								::zpp_nape::geom::ZPP_Vec2 v = cx_ite;		HX_STACK_VAR(v,"v");
								HX_STACK_LINE(3473)
								{
									HX_STACK_LINE(3473)
									::zpp_nape::shape::ZPP_Edge e = ite->elt;		HX_STACK_VAR(e,"e");
									HX_STACK_LINE(3473)
									ite = ite->next;
									HX_STACK_LINE(3473)
									{
										HX_STACK_LINE(3473)
										Float tmp23 = (b1->axisy * e->lnormx);		HX_STACK_VAR(tmp23,"tmp23");
										HX_STACK_LINE(3473)
										Float tmp24 = (b1->axisx * e->lnormy);		HX_STACK_VAR(tmp24,"tmp24");
										HX_STACK_LINE(3473)
										Float tmp25 = (tmp23 - tmp24);		HX_STACK_VAR(tmp25,"tmp25");
										HX_STACK_LINE(3473)
										e->gnormx = tmp25;
										HX_STACK_LINE(3473)
										Float tmp26 = (e->lnormx * b1->axisx);		HX_STACK_VAR(tmp26,"tmp26");
										HX_STACK_LINE(3473)
										Float tmp27 = (e->lnormy * b1->axisy);		HX_STACK_VAR(tmp27,"tmp27");
										HX_STACK_LINE(3473)
										Float tmp28 = (tmp26 + tmp27);		HX_STACK_VAR(tmp28,"tmp28");
										HX_STACK_LINE(3473)
										e->gnormy = tmp28;
									}
									HX_STACK_LINE(3473)
									Float tmp23 = (b1->posx * e->gnormx);		HX_STACK_VAR(tmp23,"tmp23");
									HX_STACK_LINE(3473)
									Float tmp24 = (b1->posy * e->gnormy);		HX_STACK_VAR(tmp24,"tmp24");
									HX_STACK_LINE(3473)
									Float tmp25 = (tmp23 + tmp24);		HX_STACK_VAR(tmp25,"tmp25");
									HX_STACK_LINE(3473)
									Float tmp26 = e->lprojection;		HX_STACK_VAR(tmp26,"tmp26");
									HX_STACK_LINE(3473)
									Float tmp27 = (tmp25 + tmp26);		HX_STACK_VAR(tmp27,"tmp27");
									HX_STACK_LINE(3473)
									e->gprojection = tmp27;
									HX_STACK_LINE(3473)
									Float tmp28 = (u->y * e->gnormx);		HX_STACK_VAR(tmp28,"tmp28");
									HX_STACK_LINE(3473)
									Float tmp29 = (u->x * e->gnormy);		HX_STACK_VAR(tmp29,"tmp29");
									HX_STACK_LINE(3473)
									Float tmp30 = (tmp28 - tmp29);		HX_STACK_VAR(tmp30,"tmp30");
									HX_STACK_LINE(3473)
									e->tp0 = tmp30;
									HX_STACK_LINE(3473)
									Float tmp31 = (v->y * e->gnormx);		HX_STACK_VAR(tmp31,"tmp31");
									HX_STACK_LINE(3473)
									Float tmp32 = (v->x * e->gnormy);		HX_STACK_VAR(tmp32,"tmp32");
									HX_STACK_LINE(3473)
									Float tmp33 = (tmp31 - tmp32);		HX_STACK_VAR(tmp33,"tmp33");
									HX_STACK_LINE(3473)
									e->tp1 = tmp33;
								}
								HX_STACK_LINE(3473)
								u = v;
								HX_STACK_LINE(3473)
								cx_ite = cx_ite->next;
							}
							HX_STACK_LINE(3473)
							::zpp_nape::geom::ZPP_Vec2 tmp21 = p->gverts->next;		HX_STACK_VAR(tmp21,"tmp21");
							HX_STACK_LINE(3473)
							::zpp_nape::geom::ZPP_Vec2 v = tmp21;		HX_STACK_VAR(v,"v");
							HX_STACK_LINE(3473)
							{
								HX_STACK_LINE(3473)
								::zpp_nape::shape::ZPP_Edge e = ite->elt;		HX_STACK_VAR(e,"e");
								HX_STACK_LINE(3473)
								ite = ite->next;
								HX_STACK_LINE(3473)
								{
									HX_STACK_LINE(3473)
									Float tmp22 = (b1->axisy * e->lnormx);		HX_STACK_VAR(tmp22,"tmp22");
									HX_STACK_LINE(3473)
									Float tmp23 = (b1->axisx * e->lnormy);		HX_STACK_VAR(tmp23,"tmp23");
									HX_STACK_LINE(3473)
									Float tmp24 = (tmp22 - tmp23);		HX_STACK_VAR(tmp24,"tmp24");
									HX_STACK_LINE(3473)
									e->gnormx = tmp24;
									HX_STACK_LINE(3473)
									Float tmp25 = (e->lnormx * b1->axisx);		HX_STACK_VAR(tmp25,"tmp25");
									HX_STACK_LINE(3473)
									Float tmp26 = (e->lnormy * b1->axisy);		HX_STACK_VAR(tmp26,"tmp26");
									HX_STACK_LINE(3473)
									Float tmp27 = (tmp25 + tmp26);		HX_STACK_VAR(tmp27,"tmp27");
									HX_STACK_LINE(3473)
									e->gnormy = tmp27;
								}
								HX_STACK_LINE(3473)
								Float tmp22 = (b1->posx * e->gnormx);		HX_STACK_VAR(tmp22,"tmp22");
								HX_STACK_LINE(3473)
								Float tmp23 = (b1->posy * e->gnormy);		HX_STACK_VAR(tmp23,"tmp23");
								HX_STACK_LINE(3473)
								Float tmp24 = (tmp22 + tmp23);		HX_STACK_VAR(tmp24,"tmp24");
								HX_STACK_LINE(3473)
								Float tmp25 = e->lprojection;		HX_STACK_VAR(tmp25,"tmp25");
								HX_STACK_LINE(3473)
								Float tmp26 = (tmp24 + tmp25);		HX_STACK_VAR(tmp26,"tmp26");
								HX_STACK_LINE(3473)
								e->gprojection = tmp26;
								HX_STACK_LINE(3473)
								Float tmp27 = (u->y * e->gnormx);		HX_STACK_VAR(tmp27,"tmp27");
								HX_STACK_LINE(3473)
								Float tmp28 = (u->x * e->gnormy);		HX_STACK_VAR(tmp28,"tmp28");
								HX_STACK_LINE(3473)
								Float tmp29 = (tmp27 - tmp28);		HX_STACK_VAR(tmp29,"tmp29");
								HX_STACK_LINE(3473)
								e->tp0 = tmp29;
								HX_STACK_LINE(3473)
								Float tmp30 = (v->y * e->gnormx);		HX_STACK_VAR(tmp30,"tmp30");
								HX_STACK_LINE(3473)
								Float tmp31 = (v->x * e->gnormy);		HX_STACK_VAR(tmp31,"tmp31");
								HX_STACK_LINE(3473)
								Float tmp32 = (tmp30 - tmp31);		HX_STACK_VAR(tmp32,"tmp32");
								HX_STACK_LINE(3473)
								e->tp1 = tmp32;
							}
						}
					}
				}
			}
			HX_STACK_LINE(3475)
			bool tmp15 = b2->sweepFrozen;		HX_STACK_VAR(tmp15,"tmp15");
			HX_STACK_LINE(3475)
			bool tmp16 = !(tmp15);		HX_STACK_VAR(tmp16,"tmp16");
			HX_STACK_LINE(3475)
			if ((tmp16)){
				HX_STACK_LINE(3476)
				{
					HX_STACK_LINE(3476)
					Float tmp17 = (curTimeAlpha * deltaTime);		HX_STACK_VAR(tmp17,"tmp17");
					HX_STACK_LINE(3476)
					Float dt = tmp17;		HX_STACK_VAR(dt,"dt");
					HX_STACK_LINE(3476)
					Float tmp18 = (dt - b2->sweepTime);		HX_STACK_VAR(tmp18,"tmp18");
					HX_STACK_LINE(3476)
					Float delta = tmp18;		HX_STACK_VAR(delta,"delta");
					HX_STACK_LINE(3476)
					bool tmp19 = (delta != (int)0);		HX_STACK_VAR(tmp19,"tmp19");
					HX_STACK_LINE(3476)
					if ((tmp19)){
						HX_STACK_LINE(3476)
						b2->sweepTime = dt;
						HX_STACK_LINE(3476)
						{
							HX_STACK_LINE(3476)
							Float t = delta;		HX_STACK_VAR(t,"t");
							HX_STACK_LINE(3476)
							Float tmp20 = (b2->velx * t);		HX_STACK_VAR(tmp20,"tmp20");
							HX_STACK_LINE(3476)
							hx::AddEq(b2->posx,tmp20);
							HX_STACK_LINE(3476)
							Float tmp21 = (b2->vely * t);		HX_STACK_VAR(tmp21,"tmp21");
							HX_STACK_LINE(3476)
							hx::AddEq(b2->posy,tmp21);
						}
						HX_STACK_LINE(3476)
						bool tmp20 = (b2->angvel != (int)0);		HX_STACK_VAR(tmp20,"tmp20");
						HX_STACK_LINE(3476)
						if ((tmp20)){
							HX_STACK_LINE(3476)
							Float tmp21 = (b2->sweep_angvel * delta);		HX_STACK_VAR(tmp21,"tmp21");
							HX_STACK_LINE(3476)
							Float dr = tmp21;		HX_STACK_VAR(dr,"dr");
							HX_STACK_LINE(3476)
							hx::AddEq(b2->rot,dr);
							HX_STACK_LINE(3476)
							Float tmp22 = (dr * dr);		HX_STACK_VAR(tmp22,"tmp22");
							HX_STACK_LINE(3476)
							bool tmp23 = (tmp22 > ((Float)0.0001));		HX_STACK_VAR(tmp23,"tmp23");
							HX_STACK_LINE(3476)
							if ((tmp23)){
								HX_STACK_LINE(3476)
								Float tmp24 = b2->rot;		HX_STACK_VAR(tmp24,"tmp24");
								HX_STACK_LINE(3476)
								Float tmp25 = ::Math_obj::sin(tmp24);		HX_STACK_VAR(tmp25,"tmp25");
								HX_STACK_LINE(3476)
								b2->axisx = tmp25;
								HX_STACK_LINE(3476)
								Float tmp26 = b2->rot;		HX_STACK_VAR(tmp26,"tmp26");
								HX_STACK_LINE(3476)
								Float tmp27 = ::Math_obj::cos(tmp26);		HX_STACK_VAR(tmp27,"tmp27");
								HX_STACK_LINE(3476)
								b2->axisy = tmp27;
								HX_STACK_LINE(3476)
								Dynamic();
							}
							else{
								HX_STACK_LINE(3476)
								Float tmp24 = (dr * dr);		HX_STACK_VAR(tmp24,"tmp24");
								HX_STACK_LINE(3476)
								Float d2 = tmp24;		HX_STACK_VAR(d2,"d2");
								HX_STACK_LINE(3476)
								Float tmp25 = (((Float)0.5) * d2);		HX_STACK_VAR(tmp25,"tmp25");
								HX_STACK_LINE(3476)
								Float tmp26 = ((int)1 - tmp25);		HX_STACK_VAR(tmp26,"tmp26");
								HX_STACK_LINE(3476)
								Float p = tmp26;		HX_STACK_VAR(p,"p");
								HX_STACK_LINE(3476)
								Float tmp27 = (d2 * d2);		HX_STACK_VAR(tmp27,"tmp27");
								HX_STACK_LINE(3476)
								Float tmp28 = (Float(tmp27) / Float((int)8));		HX_STACK_VAR(tmp28,"tmp28");
								HX_STACK_LINE(3476)
								Float tmp29 = ((int)1 - tmp28);		HX_STACK_VAR(tmp29,"tmp29");
								HX_STACK_LINE(3476)
								Float m = tmp29;		HX_STACK_VAR(m,"m");
								HX_STACK_LINE(3476)
								Float tmp30 = (p * b2->axisx);		HX_STACK_VAR(tmp30,"tmp30");
								HX_STACK_LINE(3476)
								Float tmp31 = (dr * b2->axisy);		HX_STACK_VAR(tmp31,"tmp31");
								HX_STACK_LINE(3476)
								Float tmp32 = (tmp30 + tmp31);		HX_STACK_VAR(tmp32,"tmp32");
								HX_STACK_LINE(3476)
								Float tmp33 = m;		HX_STACK_VAR(tmp33,"tmp33");
								HX_STACK_LINE(3476)
								Float tmp34 = (tmp32 * tmp33);		HX_STACK_VAR(tmp34,"tmp34");
								HX_STACK_LINE(3476)
								Float nx = tmp34;		HX_STACK_VAR(nx,"nx");
								HX_STACK_LINE(3476)
								Float tmp35 = (p * b2->axisy);		HX_STACK_VAR(tmp35,"tmp35");
								HX_STACK_LINE(3476)
								Float tmp36 = (dr * b2->axisx);		HX_STACK_VAR(tmp36,"tmp36");
								HX_STACK_LINE(3476)
								Float tmp37 = (tmp35 - tmp36);		HX_STACK_VAR(tmp37,"tmp37");
								HX_STACK_LINE(3476)
								Float tmp38 = m;		HX_STACK_VAR(tmp38,"tmp38");
								HX_STACK_LINE(3476)
								Float tmp39 = (tmp37 * tmp38);		HX_STACK_VAR(tmp39,"tmp39");
								HX_STACK_LINE(3476)
								b2->axisy = tmp39;
								HX_STACK_LINE(3476)
								b2->axisx = nx;
							}
						}
					}
				}
				HX_STACK_LINE(3477)
				{
					HX_STACK_LINE(3477)
					::zpp_nape::shape::ZPP_Shape s = minTOI->s2;		HX_STACK_VAR(s,"s");
					HX_STACK_LINE(3477)
					int tmp17 = s->type;		HX_STACK_VAR(tmp17,"tmp17");
					HX_STACK_LINE(3477)
					int tmp18 = ::zpp_nape::util::ZPP_Flags_obj::id_ShapeType_CIRCLE;		HX_STACK_VAR(tmp18,"tmp18");
					HX_STACK_LINE(3477)
					bool tmp19 = (tmp17 == tmp18);		HX_STACK_VAR(tmp19,"tmp19");
					HX_STACK_LINE(3477)
					if ((tmp19)){
						HX_STACK_LINE(3477)
						Float tmp20 = b2->posx;		HX_STACK_VAR(tmp20,"tmp20");
						HX_STACK_LINE(3477)
						Float tmp21 = (b2->axisy * s->localCOMx);		HX_STACK_VAR(tmp21,"tmp21");
						HX_STACK_LINE(3477)
						Float tmp22 = (b2->axisx * s->localCOMy);		HX_STACK_VAR(tmp22,"tmp22");
						HX_STACK_LINE(3477)
						Float tmp23 = (tmp21 - tmp22);		HX_STACK_VAR(tmp23,"tmp23");
						HX_STACK_LINE(3477)
						Float tmp24 = (tmp20 + tmp23);		HX_STACK_VAR(tmp24,"tmp24");
						HX_STACK_LINE(3477)
						s->worldCOMx = tmp24;
						HX_STACK_LINE(3477)
						Float tmp25 = b2->posy;		HX_STACK_VAR(tmp25,"tmp25");
						HX_STACK_LINE(3477)
						Float tmp26 = (s->localCOMx * b2->axisx);		HX_STACK_VAR(tmp26,"tmp26");
						HX_STACK_LINE(3477)
						Float tmp27 = (s->localCOMy * b2->axisy);		HX_STACK_VAR(tmp27,"tmp27");
						HX_STACK_LINE(3477)
						Float tmp28 = (tmp26 + tmp27);		HX_STACK_VAR(tmp28,"tmp28");
						HX_STACK_LINE(3477)
						Float tmp29 = (tmp25 + tmp28);		HX_STACK_VAR(tmp29,"tmp29");
						HX_STACK_LINE(3477)
						s->worldCOMy = tmp29;
					}
					else{
						HX_STACK_LINE(3477)
						::zpp_nape::shape::ZPP_Polygon p = s->polygon;		HX_STACK_VAR(p,"p");
						HX_STACK_LINE(3477)
						::zpp_nape::geom::ZPP_Vec2 tmp20 = p->lverts->next;		HX_STACK_VAR(tmp20,"tmp20");
						HX_STACK_LINE(3477)
						::zpp_nape::geom::ZPP_Vec2 li = tmp20;		HX_STACK_VAR(li,"li");
						HX_STACK_LINE(3477)
						{
							HX_STACK_LINE(3477)
							::zpp_nape::geom::ZPP_Vec2 tmp21 = p->gverts->next;		HX_STACK_VAR(tmp21,"tmp21");
							HX_STACK_LINE(3477)
							::zpp_nape::geom::ZPP_Vec2 cx_ite = tmp21;		HX_STACK_VAR(cx_ite,"cx_ite");
							HX_STACK_LINE(3477)
							while((true)){
								HX_STACK_LINE(3477)
								bool tmp22 = (cx_ite != null());		HX_STACK_VAR(tmp22,"tmp22");
								HX_STACK_LINE(3477)
								bool tmp23 = !(tmp22);		HX_STACK_VAR(tmp23,"tmp23");
								HX_STACK_LINE(3477)
								if ((tmp23)){
									HX_STACK_LINE(3477)
									break;
								}
								HX_STACK_LINE(3477)
								::zpp_nape::geom::ZPP_Vec2 g = cx_ite;		HX_STACK_VAR(g,"g");
								HX_STACK_LINE(3477)
								{
									HX_STACK_LINE(3477)
									::zpp_nape::geom::ZPP_Vec2 l = li;		HX_STACK_VAR(l,"l");
									HX_STACK_LINE(3477)
									li = li->next;
									HX_STACK_LINE(3477)
									{
										HX_STACK_LINE(3477)
										Float tmp24 = b2->posx;		HX_STACK_VAR(tmp24,"tmp24");
										HX_STACK_LINE(3477)
										Float tmp25 = (b2->axisy * l->x);		HX_STACK_VAR(tmp25,"tmp25");
										HX_STACK_LINE(3477)
										Float tmp26 = (b2->axisx * l->y);		HX_STACK_VAR(tmp26,"tmp26");
										HX_STACK_LINE(3477)
										Float tmp27 = (tmp25 - tmp26);		HX_STACK_VAR(tmp27,"tmp27");
										HX_STACK_LINE(3477)
										Float tmp28 = (tmp24 + tmp27);		HX_STACK_VAR(tmp28,"tmp28");
										HX_STACK_LINE(3477)
										g->x = tmp28;
										HX_STACK_LINE(3477)
										Float tmp29 = b2->posy;		HX_STACK_VAR(tmp29,"tmp29");
										HX_STACK_LINE(3477)
										Float tmp30 = (l->x * b2->axisx);		HX_STACK_VAR(tmp30,"tmp30");
										HX_STACK_LINE(3477)
										Float tmp31 = (l->y * b2->axisy);		HX_STACK_VAR(tmp31,"tmp31");
										HX_STACK_LINE(3477)
										Float tmp32 = (tmp30 + tmp31);		HX_STACK_VAR(tmp32,"tmp32");
										HX_STACK_LINE(3477)
										Float tmp33 = (tmp29 + tmp32);		HX_STACK_VAR(tmp33,"tmp33");
										HX_STACK_LINE(3477)
										g->y = tmp33;
									}
								}
								HX_STACK_LINE(3477)
								cx_ite = cx_ite->next;
							}
						}
						HX_STACK_LINE(3477)
						::zpp_nape::util::ZNPNode_ZPP_Edge tmp21 = p->edges->head;		HX_STACK_VAR(tmp21,"tmp21");
						HX_STACK_LINE(3477)
						::zpp_nape::util::ZNPNode_ZPP_Edge ite = tmp21;		HX_STACK_VAR(ite,"ite");
						HX_STACK_LINE(3477)
						{
							HX_STACK_LINE(3477)
							::zpp_nape::geom::ZPP_Vec2 tmp22 = p->gverts->next;		HX_STACK_VAR(tmp22,"tmp22");
							HX_STACK_LINE(3477)
							::zpp_nape::geom::ZPP_Vec2 cx_ite = tmp22;		HX_STACK_VAR(cx_ite,"cx_ite");
							HX_STACK_LINE(3477)
							::zpp_nape::geom::ZPP_Vec2 u = cx_ite;		HX_STACK_VAR(u,"u");
							HX_STACK_LINE(3477)
							cx_ite = cx_ite->next;
							HX_STACK_LINE(3477)
							while((true)){
								HX_STACK_LINE(3477)
								bool tmp23 = (cx_ite != null());		HX_STACK_VAR(tmp23,"tmp23");
								HX_STACK_LINE(3477)
								bool tmp24 = !(tmp23);		HX_STACK_VAR(tmp24,"tmp24");
								HX_STACK_LINE(3477)
								if ((tmp24)){
									HX_STACK_LINE(3477)
									break;
								}
								HX_STACK_LINE(3477)
								::zpp_nape::geom::ZPP_Vec2 v = cx_ite;		HX_STACK_VAR(v,"v");
								HX_STACK_LINE(3477)
								{
									HX_STACK_LINE(3477)
									::zpp_nape::shape::ZPP_Edge e = ite->elt;		HX_STACK_VAR(e,"e");
									HX_STACK_LINE(3477)
									ite = ite->next;
									HX_STACK_LINE(3477)
									{
										HX_STACK_LINE(3477)
										Float tmp25 = (b2->axisy * e->lnormx);		HX_STACK_VAR(tmp25,"tmp25");
										HX_STACK_LINE(3477)
										Float tmp26 = (b2->axisx * e->lnormy);		HX_STACK_VAR(tmp26,"tmp26");
										HX_STACK_LINE(3477)
										Float tmp27 = (tmp25 - tmp26);		HX_STACK_VAR(tmp27,"tmp27");
										HX_STACK_LINE(3477)
										e->gnormx = tmp27;
										HX_STACK_LINE(3477)
										Float tmp28 = (e->lnormx * b2->axisx);		HX_STACK_VAR(tmp28,"tmp28");
										HX_STACK_LINE(3477)
										Float tmp29 = (e->lnormy * b2->axisy);		HX_STACK_VAR(tmp29,"tmp29");
										HX_STACK_LINE(3477)
										Float tmp30 = (tmp28 + tmp29);		HX_STACK_VAR(tmp30,"tmp30");
										HX_STACK_LINE(3477)
										e->gnormy = tmp30;
									}
									HX_STACK_LINE(3477)
									Float tmp25 = (b2->posx * e->gnormx);		HX_STACK_VAR(tmp25,"tmp25");
									HX_STACK_LINE(3477)
									Float tmp26 = (b2->posy * e->gnormy);		HX_STACK_VAR(tmp26,"tmp26");
									HX_STACK_LINE(3477)
									Float tmp27 = (tmp25 + tmp26);		HX_STACK_VAR(tmp27,"tmp27");
									HX_STACK_LINE(3477)
									Float tmp28 = e->lprojection;		HX_STACK_VAR(tmp28,"tmp28");
									HX_STACK_LINE(3477)
									Float tmp29 = (tmp27 + tmp28);		HX_STACK_VAR(tmp29,"tmp29");
									HX_STACK_LINE(3477)
									e->gprojection = tmp29;
									HX_STACK_LINE(3477)
									Float tmp30 = (u->y * e->gnormx);		HX_STACK_VAR(tmp30,"tmp30");
									HX_STACK_LINE(3477)
									Float tmp31 = (u->x * e->gnormy);		HX_STACK_VAR(tmp31,"tmp31");
									HX_STACK_LINE(3477)
									Float tmp32 = (tmp30 - tmp31);		HX_STACK_VAR(tmp32,"tmp32");
									HX_STACK_LINE(3477)
									e->tp0 = tmp32;
									HX_STACK_LINE(3477)
									Float tmp33 = (v->y * e->gnormx);		HX_STACK_VAR(tmp33,"tmp33");
									HX_STACK_LINE(3477)
									Float tmp34 = (v->x * e->gnormy);		HX_STACK_VAR(tmp34,"tmp34");
									HX_STACK_LINE(3477)
									Float tmp35 = (tmp33 - tmp34);		HX_STACK_VAR(tmp35,"tmp35");
									HX_STACK_LINE(3477)
									e->tp1 = tmp35;
								}
								HX_STACK_LINE(3477)
								u = v;
								HX_STACK_LINE(3477)
								cx_ite = cx_ite->next;
							}
							HX_STACK_LINE(3477)
							::zpp_nape::geom::ZPP_Vec2 tmp23 = p->gverts->next;		HX_STACK_VAR(tmp23,"tmp23");
							HX_STACK_LINE(3477)
							::zpp_nape::geom::ZPP_Vec2 v = tmp23;		HX_STACK_VAR(v,"v");
							HX_STACK_LINE(3477)
							{
								HX_STACK_LINE(3477)
								::zpp_nape::shape::ZPP_Edge e = ite->elt;		HX_STACK_VAR(e,"e");
								HX_STACK_LINE(3477)
								ite = ite->next;
								HX_STACK_LINE(3477)
								{
									HX_STACK_LINE(3477)
									Float tmp24 = (b2->axisy * e->lnormx);		HX_STACK_VAR(tmp24,"tmp24");
									HX_STACK_LINE(3477)
									Float tmp25 = (b2->axisx * e->lnormy);		HX_STACK_VAR(tmp25,"tmp25");
									HX_STACK_LINE(3477)
									Float tmp26 = (tmp24 - tmp25);		HX_STACK_VAR(tmp26,"tmp26");
									HX_STACK_LINE(3477)
									e->gnormx = tmp26;
									HX_STACK_LINE(3477)
									Float tmp27 = (e->lnormx * b2->axisx);		HX_STACK_VAR(tmp27,"tmp27");
									HX_STACK_LINE(3477)
									Float tmp28 = (e->lnormy * b2->axisy);		HX_STACK_VAR(tmp28,"tmp28");
									HX_STACK_LINE(3477)
									Float tmp29 = (tmp27 + tmp28);		HX_STACK_VAR(tmp29,"tmp29");
									HX_STACK_LINE(3477)
									e->gnormy = tmp29;
								}
								HX_STACK_LINE(3477)
								Float tmp24 = (b2->posx * e->gnormx);		HX_STACK_VAR(tmp24,"tmp24");
								HX_STACK_LINE(3477)
								Float tmp25 = (b2->posy * e->gnormy);		HX_STACK_VAR(tmp25,"tmp25");
								HX_STACK_LINE(3477)
								Float tmp26 = (tmp24 + tmp25);		HX_STACK_VAR(tmp26,"tmp26");
								HX_STACK_LINE(3477)
								Float tmp27 = e->lprojection;		HX_STACK_VAR(tmp27,"tmp27");
								HX_STACK_LINE(3477)
								Float tmp28 = (tmp26 + tmp27);		HX_STACK_VAR(tmp28,"tmp28");
								HX_STACK_LINE(3477)
								e->gprojection = tmp28;
								HX_STACK_LINE(3477)
								Float tmp29 = (u->y * e->gnormx);		HX_STACK_VAR(tmp29,"tmp29");
								HX_STACK_LINE(3477)
								Float tmp30 = (u->x * e->gnormy);		HX_STACK_VAR(tmp30,"tmp30");
								HX_STACK_LINE(3477)
								Float tmp31 = (tmp29 - tmp30);		HX_STACK_VAR(tmp31,"tmp31");
								HX_STACK_LINE(3477)
								e->tp0 = tmp31;
								HX_STACK_LINE(3477)
								Float tmp32 = (v->y * e->gnormx);		HX_STACK_VAR(tmp32,"tmp32");
								HX_STACK_LINE(3477)
								Float tmp33 = (v->x * e->gnormy);		HX_STACK_VAR(tmp33,"tmp33");
								HX_STACK_LINE(3477)
								Float tmp34 = (tmp32 - tmp33);		HX_STACK_VAR(tmp34,"tmp34");
								HX_STACK_LINE(3477)
								e->tp1 = tmp34;
							}
						}
					}
				}
			}
			HX_STACK_LINE(3479)
			bool tmp17 = (minTOI->arbiter == null());		HX_STACK_VAR(tmp17,"tmp17");
			HX_STACK_LINE(3479)
			bool wasnull = tmp17;		HX_STACK_VAR(wasnull,"wasnull");
			HX_STACK_LINE(3480)
			::zpp_nape::shape::ZPP_Shape tmp18 = minTOI->s1;		HX_STACK_VAR(tmp18,"tmp18");
			HX_STACK_LINE(3480)
			::zpp_nape::shape::ZPP_Shape tmp19 = minTOI->s2;		HX_STACK_VAR(tmp19,"tmp19");
			HX_STACK_LINE(3480)
			::zpp_nape::dynamics::ZPP_ColArbiter tmp20 = minTOI->arbiter;		HX_STACK_VAR(tmp20,"tmp20");
			HX_STACK_LINE(3480)
			::zpp_nape::dynamics::ZPP_Arbiter tmp21 = this->narrowPhase(tmp18,tmp19,true,tmp20,true);		HX_STACK_VAR(tmp21,"tmp21");
			HX_STACK_LINE(3480)
			::zpp_nape::dynamics::ZPP_Arbiter arb = tmp21;		HX_STACK_VAR(arb,"arb");
			HX_STACK_LINE(3481)
			bool tmp22 = (arb == null());		HX_STACK_VAR(tmp22,"tmp22");
			HX_STACK_LINE(3481)
			if ((tmp22)){
				HX_STACK_LINE(3482)
				bool tmp23 = (minTOI->arbiter != null());		HX_STACK_VAR(tmp23,"tmp23");
				HX_STACK_LINE(3482)
				bool tmp24;		HX_STACK_VAR(tmp24,"tmp24");
				HX_STACK_LINE(3482)
				if ((tmp23)){
					HX_STACK_LINE(3482)
					::zpp_nape::space::ZPP_AABBPair tmp25 = minTOI->arbiter->pair;		HX_STACK_VAR(tmp25,"tmp25");
					HX_STACK_LINE(3482)
					::zpp_nape::space::ZPP_AABBPair tmp26 = tmp25;		HX_STACK_VAR(tmp26,"tmp26");
					HX_STACK_LINE(3482)
					tmp24 = (tmp26 != null());
				}
				else{
					HX_STACK_LINE(3482)
					tmp24 = false;
				}
				HX_STACK_LINE(3482)
				if ((tmp24)){
					HX_STACK_LINE(3483)
					::zpp_nape::space::ZPP_AABBPair tmp25 = minTOI->arbiter->pair;		HX_STACK_VAR(tmp25,"tmp25");
					HX_STACK_LINE(3483)
					tmp25->arb = null();
					HX_STACK_LINE(3484)
					minTOI->arbiter->pair = null();
				}
			}
			else{
				HX_STACK_LINE(3488)
				::zpp_nape::dynamics::ZPP_Arbiter tmp23 = arb;		HX_STACK_VAR(tmp23,"tmp23");
				HX_STACK_LINE(3488)
				Float tmp24 = deltaTime;		HX_STACK_VAR(tmp24,"tmp24");
				HX_STACK_LINE(3488)
				bool tmp25 = this->presteparb(tmp23,tmp24,true);		HX_STACK_VAR(tmp25,"tmp25");
				HX_STACK_LINE(3488)
				bool tmp26 = !(tmp25);		HX_STACK_VAR(tmp26,"tmp26");
				HX_STACK_LINE(3488)
				if ((tmp26)){
					HX_STACK_LINE(3489)
					int tmp27 = arb->type;		HX_STACK_VAR(tmp27,"tmp27");
					HX_STACK_LINE(3489)
					int tmp28 = ::zpp_nape::dynamics::ZPP_Arbiter_obj::COL;		HX_STACK_VAR(tmp28,"tmp28");
					HX_STACK_LINE(3489)
					bool tmp29 = (tmp27 == tmp28);		HX_STACK_VAR(tmp29,"tmp29");
					HX_STACK_LINE(3489)
					bool tmp30;		HX_STACK_VAR(tmp30,"tmp30");
					HX_STACK_LINE(3489)
					if ((tmp29)){
						HX_STACK_LINE(3489)
						bool tmp31 = arb->active;		HX_STACK_VAR(tmp31,"tmp31");
						HX_STACK_LINE(3489)
						bool tmp32 = tmp31;		HX_STACK_VAR(tmp32,"tmp32");
						HX_STACK_LINE(3489)
						if ((tmp32)){
							HX_STACK_LINE(3489)
							int tmp33 = arb->immState;		HX_STACK_VAR(tmp33,"tmp33");
							HX_STACK_LINE(3489)
							int tmp34 = ::zpp_nape::util::ZPP_Flags_obj::id_ImmState_ACCEPT;		HX_STACK_VAR(tmp34,"tmp34");
							HX_STACK_LINE(3489)
							int tmp35 = tmp34;		HX_STACK_VAR(tmp35,"tmp35");
							HX_STACK_LINE(3489)
							int tmp36 = tmp35;		HX_STACK_VAR(tmp36,"tmp36");
							HX_STACK_LINE(3489)
							int tmp37 = (int(tmp33) & int(tmp36));		HX_STACK_VAR(tmp37,"tmp37");
							HX_STACK_LINE(3489)
							int tmp38 = tmp37;		HX_STACK_VAR(tmp38,"tmp38");
							HX_STACK_LINE(3489)
							int tmp39 = tmp38;		HX_STACK_VAR(tmp39,"tmp39");
							HX_STACK_LINE(3489)
							tmp30 = (tmp39 != (int)0);
						}
						else{
							HX_STACK_LINE(3489)
							tmp30 = false;
						}
					}
					else{
						HX_STACK_LINE(3489)
						tmp30 = false;
					}
					HX_STACK_LINE(3489)
					if ((tmp30)){
						HX_STACK_LINE(3490)
						{
							HX_STACK_LINE(3490)
							::zpp_nape::dynamics::ZPP_ColArbiter _this = arb->colarb;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(3490)
							{
								HX_STACK_LINE(3490)
								Float tmp31 = _this->nx;		HX_STACK_VAR(tmp31,"tmp31");
								HX_STACK_LINE(3490)
								Float tmp32 = _this->c1->jnAcc;		HX_STACK_VAR(tmp32,"tmp32");
								HX_STACK_LINE(3490)
								Float tmp33 = (tmp31 * tmp32);		HX_STACK_VAR(tmp33,"tmp33");
								HX_STACK_LINE(3490)
								Float tmp34 = _this->ny;		HX_STACK_VAR(tmp34,"tmp34");
								HX_STACK_LINE(3490)
								Float tmp35 = _this->c1->jtAcc;		HX_STACK_VAR(tmp35,"tmp35");
								HX_STACK_LINE(3490)
								Float tmp36 = (tmp34 * tmp35);		HX_STACK_VAR(tmp36,"tmp36");
								HX_STACK_LINE(3490)
								Float tmp37 = (tmp33 - tmp36);		HX_STACK_VAR(tmp37,"tmp37");
								HX_STACK_LINE(3490)
								Float jx = tmp37;		HX_STACK_VAR(jx,"jx");
								HX_STACK_LINE(3490)
								Float tmp38 = _this->ny;		HX_STACK_VAR(tmp38,"tmp38");
								HX_STACK_LINE(3490)
								Float tmp39 = _this->c1->jnAcc;		HX_STACK_VAR(tmp39,"tmp39");
								HX_STACK_LINE(3490)
								Float tmp40 = (tmp38 * tmp39);		HX_STACK_VAR(tmp40,"tmp40");
								HX_STACK_LINE(3490)
								Float tmp41 = _this->nx;		HX_STACK_VAR(tmp41,"tmp41");
								HX_STACK_LINE(3490)
								Float tmp42 = _this->c1->jtAcc;		HX_STACK_VAR(tmp42,"tmp42");
								HX_STACK_LINE(3490)
								Float tmp43 = (tmp41 * tmp42);		HX_STACK_VAR(tmp43,"tmp43");
								HX_STACK_LINE(3490)
								Float tmp44 = (tmp40 + tmp43);		HX_STACK_VAR(tmp44,"tmp44");
								HX_STACK_LINE(3490)
								Float jy = tmp44;		HX_STACK_VAR(jy,"jy");
								HX_STACK_LINE(3490)
								{
									HX_STACK_LINE(3490)
									Float tmp45 = _this->b1->imass;		HX_STACK_VAR(tmp45,"tmp45");
									HX_STACK_LINE(3490)
									Float t = tmp45;		HX_STACK_VAR(t,"t");
									HX_STACK_LINE(3490)
									Float tmp46 = (jx * t);		HX_STACK_VAR(tmp46,"tmp46");
									HX_STACK_LINE(3490)
									hx::SubEq(_this->b1->velx,tmp46);
									HX_STACK_LINE(3490)
									Float tmp47 = (jy * t);		HX_STACK_VAR(tmp47,"tmp47");
									HX_STACK_LINE(3490)
									hx::SubEq(_this->b1->vely,tmp47);
								}
								HX_STACK_LINE(3490)
								Float tmp45 = _this->b1->iinertia;		HX_STACK_VAR(tmp45,"tmp45");
								HX_STACK_LINE(3490)
								Float tmp46 = jy;		HX_STACK_VAR(tmp46,"tmp46");
								HX_STACK_LINE(3490)
								Float tmp47 = _this->c1->r1x;		HX_STACK_VAR(tmp47,"tmp47");
								HX_STACK_LINE(3490)
								Float tmp48 = (tmp46 * tmp47);		HX_STACK_VAR(tmp48,"tmp48");
								HX_STACK_LINE(3490)
								Float tmp49 = jx;		HX_STACK_VAR(tmp49,"tmp49");
								HX_STACK_LINE(3490)
								Float tmp50 = _this->c1->r1y;		HX_STACK_VAR(tmp50,"tmp50");
								HX_STACK_LINE(3490)
								Float tmp51 = (tmp49 * tmp50);		HX_STACK_VAR(tmp51,"tmp51");
								HX_STACK_LINE(3490)
								Float tmp52 = (tmp48 - tmp51);		HX_STACK_VAR(tmp52,"tmp52");
								HX_STACK_LINE(3490)
								Float tmp53 = (tmp45 * tmp52);		HX_STACK_VAR(tmp53,"tmp53");
								HX_STACK_LINE(3490)
								hx::SubEq(_this->b1->angvel,tmp53);
								HX_STACK_LINE(3490)
								{
									HX_STACK_LINE(3490)
									Float tmp54 = _this->b2->imass;		HX_STACK_VAR(tmp54,"tmp54");
									HX_STACK_LINE(3490)
									Float t = tmp54;		HX_STACK_VAR(t,"t");
									HX_STACK_LINE(3490)
									Float tmp55 = (jx * t);		HX_STACK_VAR(tmp55,"tmp55");
									HX_STACK_LINE(3490)
									hx::AddEq(_this->b2->velx,tmp55);
									HX_STACK_LINE(3490)
									Float tmp56 = (jy * t);		HX_STACK_VAR(tmp56,"tmp56");
									HX_STACK_LINE(3490)
									hx::AddEq(_this->b2->vely,tmp56);
								}
								HX_STACK_LINE(3490)
								Float tmp54 = _this->b2->iinertia;		HX_STACK_VAR(tmp54,"tmp54");
								HX_STACK_LINE(3490)
								Float tmp55 = jy;		HX_STACK_VAR(tmp55,"tmp55");
								HX_STACK_LINE(3490)
								Float tmp56 = _this->c1->r2x;		HX_STACK_VAR(tmp56,"tmp56");
								HX_STACK_LINE(3490)
								Float tmp57 = (tmp55 * tmp56);		HX_STACK_VAR(tmp57,"tmp57");
								HX_STACK_LINE(3490)
								Float tmp58 = jx;		HX_STACK_VAR(tmp58,"tmp58");
								HX_STACK_LINE(3490)
								Float tmp59 = _this->c1->r2y;		HX_STACK_VAR(tmp59,"tmp59");
								HX_STACK_LINE(3490)
								Float tmp60 = (tmp58 * tmp59);		HX_STACK_VAR(tmp60,"tmp60");
								HX_STACK_LINE(3490)
								Float tmp61 = (tmp57 - tmp60);		HX_STACK_VAR(tmp61,"tmp61");
								HX_STACK_LINE(3490)
								Float tmp62 = (tmp54 * tmp61);		HX_STACK_VAR(tmp62,"tmp62");
								HX_STACK_LINE(3490)
								hx::AddEq(_this->b2->angvel,tmp62);
							}
							HX_STACK_LINE(3490)
							bool tmp31 = _this->hc2;		HX_STACK_VAR(tmp31,"tmp31");
							HX_STACK_LINE(3490)
							if ((tmp31)){
								HX_STACK_LINE(3490)
								Float tmp32 = _this->nx;		HX_STACK_VAR(tmp32,"tmp32");
								HX_STACK_LINE(3490)
								Float tmp33 = _this->c2->jnAcc;		HX_STACK_VAR(tmp33,"tmp33");
								HX_STACK_LINE(3490)
								Float tmp34 = (tmp32 * tmp33);		HX_STACK_VAR(tmp34,"tmp34");
								HX_STACK_LINE(3490)
								Float tmp35 = _this->ny;		HX_STACK_VAR(tmp35,"tmp35");
								HX_STACK_LINE(3490)
								Float tmp36 = _this->c2->jtAcc;		HX_STACK_VAR(tmp36,"tmp36");
								HX_STACK_LINE(3490)
								Float tmp37 = (tmp35 * tmp36);		HX_STACK_VAR(tmp37,"tmp37");
								HX_STACK_LINE(3490)
								Float tmp38 = (tmp34 - tmp37);		HX_STACK_VAR(tmp38,"tmp38");
								HX_STACK_LINE(3490)
								Float jx = tmp38;		HX_STACK_VAR(jx,"jx");
								HX_STACK_LINE(3490)
								Float tmp39 = _this->ny;		HX_STACK_VAR(tmp39,"tmp39");
								HX_STACK_LINE(3490)
								Float tmp40 = _this->c2->jnAcc;		HX_STACK_VAR(tmp40,"tmp40");
								HX_STACK_LINE(3490)
								Float tmp41 = (tmp39 * tmp40);		HX_STACK_VAR(tmp41,"tmp41");
								HX_STACK_LINE(3490)
								Float tmp42 = _this->nx;		HX_STACK_VAR(tmp42,"tmp42");
								HX_STACK_LINE(3490)
								Float tmp43 = _this->c2->jtAcc;		HX_STACK_VAR(tmp43,"tmp43");
								HX_STACK_LINE(3490)
								Float tmp44 = (tmp42 * tmp43);		HX_STACK_VAR(tmp44,"tmp44");
								HX_STACK_LINE(3490)
								Float tmp45 = (tmp41 + tmp44);		HX_STACK_VAR(tmp45,"tmp45");
								HX_STACK_LINE(3490)
								Float jy = tmp45;		HX_STACK_VAR(jy,"jy");
								HX_STACK_LINE(3490)
								{
									HX_STACK_LINE(3490)
									Float tmp46 = _this->b1->imass;		HX_STACK_VAR(tmp46,"tmp46");
									HX_STACK_LINE(3490)
									Float t = tmp46;		HX_STACK_VAR(t,"t");
									HX_STACK_LINE(3490)
									Float tmp47 = (jx * t);		HX_STACK_VAR(tmp47,"tmp47");
									HX_STACK_LINE(3490)
									hx::SubEq(_this->b1->velx,tmp47);
									HX_STACK_LINE(3490)
									Float tmp48 = (jy * t);		HX_STACK_VAR(tmp48,"tmp48");
									HX_STACK_LINE(3490)
									hx::SubEq(_this->b1->vely,tmp48);
								}
								HX_STACK_LINE(3490)
								Float tmp46 = _this->b1->iinertia;		HX_STACK_VAR(tmp46,"tmp46");
								HX_STACK_LINE(3490)
								Float tmp47 = jy;		HX_STACK_VAR(tmp47,"tmp47");
								HX_STACK_LINE(3490)
								Float tmp48 = _this->c2->r1x;		HX_STACK_VAR(tmp48,"tmp48");
								HX_STACK_LINE(3490)
								Float tmp49 = (tmp47 * tmp48);		HX_STACK_VAR(tmp49,"tmp49");
								HX_STACK_LINE(3490)
								Float tmp50 = jx;		HX_STACK_VAR(tmp50,"tmp50");
								HX_STACK_LINE(3490)
								Float tmp51 = _this->c2->r1y;		HX_STACK_VAR(tmp51,"tmp51");
								HX_STACK_LINE(3490)
								Float tmp52 = (tmp50 * tmp51);		HX_STACK_VAR(tmp52,"tmp52");
								HX_STACK_LINE(3490)
								Float tmp53 = (tmp49 - tmp52);		HX_STACK_VAR(tmp53,"tmp53");
								HX_STACK_LINE(3490)
								Float tmp54 = (tmp46 * tmp53);		HX_STACK_VAR(tmp54,"tmp54");
								HX_STACK_LINE(3490)
								hx::SubEq(_this->b1->angvel,tmp54);
								HX_STACK_LINE(3490)
								{
									HX_STACK_LINE(3490)
									Float tmp55 = _this->b2->imass;		HX_STACK_VAR(tmp55,"tmp55");
									HX_STACK_LINE(3490)
									Float t = tmp55;		HX_STACK_VAR(t,"t");
									HX_STACK_LINE(3490)
									Float tmp56 = (jx * t);		HX_STACK_VAR(tmp56,"tmp56");
									HX_STACK_LINE(3490)
									hx::AddEq(_this->b2->velx,tmp56);
									HX_STACK_LINE(3490)
									Float tmp57 = (jy * t);		HX_STACK_VAR(tmp57,"tmp57");
									HX_STACK_LINE(3490)
									hx::AddEq(_this->b2->vely,tmp57);
								}
								HX_STACK_LINE(3490)
								Float tmp55 = _this->b2->iinertia;		HX_STACK_VAR(tmp55,"tmp55");
								HX_STACK_LINE(3490)
								Float tmp56 = jy;		HX_STACK_VAR(tmp56,"tmp56");
								HX_STACK_LINE(3490)
								Float tmp57 = _this->c2->r2x;		HX_STACK_VAR(tmp57,"tmp57");
								HX_STACK_LINE(3490)
								Float tmp58 = (tmp56 * tmp57);		HX_STACK_VAR(tmp58,"tmp58");
								HX_STACK_LINE(3490)
								Float tmp59 = jx;		HX_STACK_VAR(tmp59,"tmp59");
								HX_STACK_LINE(3490)
								Float tmp60 = _this->c2->r2y;		HX_STACK_VAR(tmp60,"tmp60");
								HX_STACK_LINE(3490)
								Float tmp61 = (tmp59 * tmp60);		HX_STACK_VAR(tmp61,"tmp61");
								HX_STACK_LINE(3490)
								Float tmp62 = (tmp58 - tmp61);		HX_STACK_VAR(tmp62,"tmp62");
								HX_STACK_LINE(3490)
								Float tmp63 = (tmp55 * tmp62);		HX_STACK_VAR(tmp63,"tmp63");
								HX_STACK_LINE(3490)
								hx::AddEq(_this->b2->angvel,tmp63);
							}
							HX_STACK_LINE(3490)
							Float tmp32 = _this->jrAcc;		HX_STACK_VAR(tmp32,"tmp32");
							HX_STACK_LINE(3490)
							Float tmp33 = _this->b2->iinertia;		HX_STACK_VAR(tmp33,"tmp33");
							HX_STACK_LINE(3490)
							Float tmp34 = (tmp32 * tmp33);		HX_STACK_VAR(tmp34,"tmp34");
							HX_STACK_LINE(3490)
							hx::AddEq(_this->b2->angvel,tmp34);
							HX_STACK_LINE(3490)
							Float tmp35 = _this->jrAcc;		HX_STACK_VAR(tmp35,"tmp35");
							HX_STACK_LINE(3490)
							Float tmp36 = _this->b1->iinertia;		HX_STACK_VAR(tmp36,"tmp36");
							HX_STACK_LINE(3490)
							Float tmp37 = (tmp35 * tmp36);		HX_STACK_VAR(tmp37,"tmp37");
							HX_STACK_LINE(3490)
							hx::SubEq(_this->b1->angvel,tmp37);
						}
						HX_STACK_LINE(3491)
						{
							HX_STACK_LINE(3491)
							::zpp_nape::dynamics::ZPP_ColArbiter _this = arb->colarb;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(3491)
							Float jx;		HX_STACK_VAR(jx,"jx");
							HX_STACK_LINE(3491)
							Float jy;		HX_STACK_VAR(jy,"jy");
							HX_STACK_LINE(3491)
							Float j;		HX_STACK_VAR(j,"j");
							HX_STACK_LINE(3491)
							Float jMax;		HX_STACK_VAR(jMax,"jMax");
							HX_STACK_LINE(3491)
							Float jOld;		HX_STACK_VAR(jOld,"jOld");
							HX_STACK_LINE(3491)
							Float cjAcc;		HX_STACK_VAR(cjAcc,"cjAcc");
							HX_STACK_LINE(3491)
							Float tmp31 = _this->k1x;		HX_STACK_VAR(tmp31,"tmp31");
							HX_STACK_LINE(3491)
							Float tmp32 = _this->b2->velx;		HX_STACK_VAR(tmp32,"tmp32");
							HX_STACK_LINE(3491)
							Float tmp33 = (tmp31 + tmp32);		HX_STACK_VAR(tmp33,"tmp33");
							HX_STACK_LINE(3491)
							Float tmp34 = _this->c1->r2y;		HX_STACK_VAR(tmp34,"tmp34");
							HX_STACK_LINE(3491)
							Float tmp35 = _this->b2->angvel;		HX_STACK_VAR(tmp35,"tmp35");
							HX_STACK_LINE(3491)
							Float tmp36 = (tmp34 * tmp35);		HX_STACK_VAR(tmp36,"tmp36");
							HX_STACK_LINE(3491)
							Float tmp37 = (tmp33 - tmp36);		HX_STACK_VAR(tmp37,"tmp37");
							HX_STACK_LINE(3491)
							Float tmp38 = _this->b1->velx;		HX_STACK_VAR(tmp38,"tmp38");
							HX_STACK_LINE(3491)
							Float tmp39 = _this->c1->r1y;		HX_STACK_VAR(tmp39,"tmp39");
							HX_STACK_LINE(3491)
							Float tmp40 = _this->b1->angvel;		HX_STACK_VAR(tmp40,"tmp40");
							HX_STACK_LINE(3491)
							Float tmp41 = (tmp39 * tmp40);		HX_STACK_VAR(tmp41,"tmp41");
							HX_STACK_LINE(3491)
							Float tmp42 = (tmp38 - tmp41);		HX_STACK_VAR(tmp42,"tmp42");
							HX_STACK_LINE(3491)
							Float tmp43 = (tmp37 - tmp42);		HX_STACK_VAR(tmp43,"tmp43");
							HX_STACK_LINE(3491)
							Float v1x = tmp43;		HX_STACK_VAR(v1x,"v1x");
							HX_STACK_LINE(3491)
							Float tmp44 = _this->k1y;		HX_STACK_VAR(tmp44,"tmp44");
							HX_STACK_LINE(3491)
							Float tmp45 = _this->b2->vely;		HX_STACK_VAR(tmp45,"tmp45");
							HX_STACK_LINE(3491)
							Float tmp46 = (tmp44 + tmp45);		HX_STACK_VAR(tmp46,"tmp46");
							HX_STACK_LINE(3491)
							Float tmp47 = _this->c1->r2x;		HX_STACK_VAR(tmp47,"tmp47");
							HX_STACK_LINE(3491)
							Float tmp48 = _this->b2->angvel;		HX_STACK_VAR(tmp48,"tmp48");
							HX_STACK_LINE(3491)
							Float tmp49 = (tmp47 * tmp48);		HX_STACK_VAR(tmp49,"tmp49");
							HX_STACK_LINE(3491)
							Float tmp50 = (tmp46 + tmp49);		HX_STACK_VAR(tmp50,"tmp50");
							HX_STACK_LINE(3491)
							Float tmp51 = _this->b1->vely;		HX_STACK_VAR(tmp51,"tmp51");
							HX_STACK_LINE(3491)
							Float tmp52 = _this->c1->r1x;		HX_STACK_VAR(tmp52,"tmp52");
							HX_STACK_LINE(3491)
							Float tmp53 = _this->b1->angvel;		HX_STACK_VAR(tmp53,"tmp53");
							HX_STACK_LINE(3491)
							Float tmp54 = (tmp52 * tmp53);		HX_STACK_VAR(tmp54,"tmp54");
							HX_STACK_LINE(3491)
							Float tmp55 = (tmp51 + tmp54);		HX_STACK_VAR(tmp55,"tmp55");
							HX_STACK_LINE(3491)
							Float tmp56 = (tmp50 - tmp55);		HX_STACK_VAR(tmp56,"tmp56");
							HX_STACK_LINE(3491)
							Float v1y = tmp56;		HX_STACK_VAR(v1y,"v1y");
							HX_STACK_LINE(3491)
							Float tmp57 = (v1y * _this->nx);		HX_STACK_VAR(tmp57,"tmp57");
							HX_STACK_LINE(3491)
							Float tmp58 = (v1x * _this->ny);		HX_STACK_VAR(tmp58,"tmp58");
							HX_STACK_LINE(3491)
							Float tmp59 = (tmp57 - tmp58);		HX_STACK_VAR(tmp59,"tmp59");
							HX_STACK_LINE(3491)
							Float tmp60 = _this->surfacex;		HX_STACK_VAR(tmp60,"tmp60");
							HX_STACK_LINE(3491)
							Float tmp61 = (tmp59 + tmp60);		HX_STACK_VAR(tmp61,"tmp61");
							HX_STACK_LINE(3491)
							Float tmp62 = _this->c1->tMass;		HX_STACK_VAR(tmp62,"tmp62");
							HX_STACK_LINE(3491)
							Float tmp63 = (tmp61 * tmp62);		HX_STACK_VAR(tmp63,"tmp63");
							HX_STACK_LINE(3491)
							j = tmp63;
							HX_STACK_LINE(3491)
							Float tmp64 = _this->c1->friction;		HX_STACK_VAR(tmp64,"tmp64");
							HX_STACK_LINE(3491)
							Float tmp65 = _this->c1->jnAcc;		HX_STACK_VAR(tmp65,"tmp65");
							HX_STACK_LINE(3491)
							Float tmp66 = (tmp64 * tmp65);		HX_STACK_VAR(tmp66,"tmp66");
							HX_STACK_LINE(3491)
							jMax = tmp66;
							HX_STACK_LINE(3491)
							Float tmp67 = _this->c1->jtAcc;		HX_STACK_VAR(tmp67,"tmp67");
							HX_STACK_LINE(3491)
							jOld = tmp67;
							HX_STACK_LINE(3491)
							Float tmp68 = (jOld - j);		HX_STACK_VAR(tmp68,"tmp68");
							HX_STACK_LINE(3491)
							cjAcc = tmp68;
							HX_STACK_LINE(3491)
							bool tmp69 = (cjAcc > jMax);		HX_STACK_VAR(tmp69,"tmp69");
							HX_STACK_LINE(3491)
							if ((tmp69)){
								HX_STACK_LINE(3491)
								cjAcc = jMax;
							}
							else{
								HX_STACK_LINE(3491)
								Float tmp70 = cjAcc;		HX_STACK_VAR(tmp70,"tmp70");
								HX_STACK_LINE(3491)
								Float tmp71 = jMax;		HX_STACK_VAR(tmp71,"tmp71");
								HX_STACK_LINE(3491)
								Float tmp72 = -(tmp71);		HX_STACK_VAR(tmp72,"tmp72");
								HX_STACK_LINE(3491)
								bool tmp73 = (tmp70 < tmp72);		HX_STACK_VAR(tmp73,"tmp73");
								HX_STACK_LINE(3491)
								if ((tmp73)){
									HX_STACK_LINE(3491)
									Float tmp74 = jMax;		HX_STACK_VAR(tmp74,"tmp74");
									HX_STACK_LINE(3491)
									Float tmp75 = -(tmp74);		HX_STACK_VAR(tmp75,"tmp75");
									HX_STACK_LINE(3491)
									cjAcc = tmp75;
								}
							}
							HX_STACK_LINE(3491)
							Float tmp70 = (cjAcc - jOld);		HX_STACK_VAR(tmp70,"tmp70");
							HX_STACK_LINE(3491)
							j = tmp70;
							HX_STACK_LINE(3491)
							_this->c1->jtAcc = cjAcc;
							HX_STACK_LINE(3491)
							Float tmp71 = _this->ny;		HX_STACK_VAR(tmp71,"tmp71");
							HX_STACK_LINE(3491)
							Float tmp72 = -(tmp71);		HX_STACK_VAR(tmp72,"tmp72");
							HX_STACK_LINE(3491)
							Float tmp73 = j;		HX_STACK_VAR(tmp73,"tmp73");
							HX_STACK_LINE(3491)
							Float tmp74 = (tmp72 * tmp73);		HX_STACK_VAR(tmp74,"tmp74");
							HX_STACK_LINE(3491)
							jx = tmp74;
							HX_STACK_LINE(3491)
							Float tmp75 = (_this->nx * j);		HX_STACK_VAR(tmp75,"tmp75");
							HX_STACK_LINE(3491)
							jy = tmp75;
							HX_STACK_LINE(3491)
							Float tmp76 = jx;		HX_STACK_VAR(tmp76,"tmp76");
							HX_STACK_LINE(3491)
							Float tmp77 = _this->b2->imass;		HX_STACK_VAR(tmp77,"tmp77");
							HX_STACK_LINE(3491)
							Float tmp78 = (tmp76 * tmp77);		HX_STACK_VAR(tmp78,"tmp78");
							HX_STACK_LINE(3491)
							hx::AddEq(_this->b2->velx,tmp78);
							HX_STACK_LINE(3491)
							Float tmp79 = jy;		HX_STACK_VAR(tmp79,"tmp79");
							HX_STACK_LINE(3491)
							Float tmp80 = _this->b2->imass;		HX_STACK_VAR(tmp80,"tmp80");
							HX_STACK_LINE(3491)
							Float tmp81 = (tmp79 * tmp80);		HX_STACK_VAR(tmp81,"tmp81");
							HX_STACK_LINE(3491)
							hx::AddEq(_this->b2->vely,tmp81);
							HX_STACK_LINE(3491)
							Float tmp82 = jx;		HX_STACK_VAR(tmp82,"tmp82");
							HX_STACK_LINE(3491)
							Float tmp83 = _this->b1->imass;		HX_STACK_VAR(tmp83,"tmp83");
							HX_STACK_LINE(3491)
							Float tmp84 = (tmp82 * tmp83);		HX_STACK_VAR(tmp84,"tmp84");
							HX_STACK_LINE(3491)
							hx::SubEq(_this->b1->velx,tmp84);
							HX_STACK_LINE(3491)
							Float tmp85 = jy;		HX_STACK_VAR(tmp85,"tmp85");
							HX_STACK_LINE(3491)
							Float tmp86 = _this->b1->imass;		HX_STACK_VAR(tmp86,"tmp86");
							HX_STACK_LINE(3491)
							Float tmp87 = (tmp85 * tmp86);		HX_STACK_VAR(tmp87,"tmp87");
							HX_STACK_LINE(3491)
							hx::SubEq(_this->b1->vely,tmp87);
							HX_STACK_LINE(3491)
							Float tmp88 = (_this->rt1b * j);		HX_STACK_VAR(tmp88,"tmp88");
							HX_STACK_LINE(3491)
							Float tmp89 = _this->b2->iinertia;		HX_STACK_VAR(tmp89,"tmp89");
							HX_STACK_LINE(3491)
							Float tmp90 = (tmp88 * tmp89);		HX_STACK_VAR(tmp90,"tmp90");
							HX_STACK_LINE(3491)
							hx::AddEq(_this->b2->angvel,tmp90);
							HX_STACK_LINE(3491)
							Float tmp91 = (_this->rt1a * j);		HX_STACK_VAR(tmp91,"tmp91");
							HX_STACK_LINE(3491)
							Float tmp92 = _this->b1->iinertia;		HX_STACK_VAR(tmp92,"tmp92");
							HX_STACK_LINE(3491)
							Float tmp93 = (tmp91 * tmp92);		HX_STACK_VAR(tmp93,"tmp93");
							HX_STACK_LINE(3491)
							hx::SubEq(_this->b1->angvel,tmp93);
							HX_STACK_LINE(3491)
							bool tmp94 = _this->hc2;		HX_STACK_VAR(tmp94,"tmp94");
							HX_STACK_LINE(3491)
							if ((tmp94)){
								HX_STACK_LINE(3491)
								Float tmp95 = _this->k2x;		HX_STACK_VAR(tmp95,"tmp95");
								HX_STACK_LINE(3491)
								Float tmp96 = _this->b2->velx;		HX_STACK_VAR(tmp96,"tmp96");
								HX_STACK_LINE(3491)
								Float tmp97 = (tmp95 + tmp96);		HX_STACK_VAR(tmp97,"tmp97");
								HX_STACK_LINE(3491)
								Float tmp98 = _this->c2->r2y;		HX_STACK_VAR(tmp98,"tmp98");
								HX_STACK_LINE(3491)
								Float tmp99 = _this->b2->angvel;		HX_STACK_VAR(tmp99,"tmp99");
								HX_STACK_LINE(3491)
								Float tmp100 = (tmp98 * tmp99);		HX_STACK_VAR(tmp100,"tmp100");
								HX_STACK_LINE(3491)
								Float tmp101 = (tmp97 - tmp100);		HX_STACK_VAR(tmp101,"tmp101");
								HX_STACK_LINE(3491)
								Float tmp102 = _this->b1->velx;		HX_STACK_VAR(tmp102,"tmp102");
								HX_STACK_LINE(3491)
								Float tmp103 = _this->c2->r1y;		HX_STACK_VAR(tmp103,"tmp103");
								HX_STACK_LINE(3491)
								Float tmp104 = _this->b1->angvel;		HX_STACK_VAR(tmp104,"tmp104");
								HX_STACK_LINE(3491)
								Float tmp105 = (tmp103 * tmp104);		HX_STACK_VAR(tmp105,"tmp105");
								HX_STACK_LINE(3491)
								Float tmp106 = (tmp102 - tmp105);		HX_STACK_VAR(tmp106,"tmp106");
								HX_STACK_LINE(3491)
								Float tmp107 = (tmp101 - tmp106);		HX_STACK_VAR(tmp107,"tmp107");
								HX_STACK_LINE(3491)
								Float v2x = tmp107;		HX_STACK_VAR(v2x,"v2x");
								HX_STACK_LINE(3491)
								Float tmp108 = _this->k2y;		HX_STACK_VAR(tmp108,"tmp108");
								HX_STACK_LINE(3491)
								Float tmp109 = _this->b2->vely;		HX_STACK_VAR(tmp109,"tmp109");
								HX_STACK_LINE(3491)
								Float tmp110 = (tmp108 + tmp109);		HX_STACK_VAR(tmp110,"tmp110");
								HX_STACK_LINE(3491)
								Float tmp111 = _this->c2->r2x;		HX_STACK_VAR(tmp111,"tmp111");
								HX_STACK_LINE(3491)
								Float tmp112 = _this->b2->angvel;		HX_STACK_VAR(tmp112,"tmp112");
								HX_STACK_LINE(3491)
								Float tmp113 = (tmp111 * tmp112);		HX_STACK_VAR(tmp113,"tmp113");
								HX_STACK_LINE(3491)
								Float tmp114 = (tmp110 + tmp113);		HX_STACK_VAR(tmp114,"tmp114");
								HX_STACK_LINE(3491)
								Float tmp115 = _this->b1->vely;		HX_STACK_VAR(tmp115,"tmp115");
								HX_STACK_LINE(3491)
								Float tmp116 = _this->c2->r1x;		HX_STACK_VAR(tmp116,"tmp116");
								HX_STACK_LINE(3491)
								Float tmp117 = _this->b1->angvel;		HX_STACK_VAR(tmp117,"tmp117");
								HX_STACK_LINE(3491)
								Float tmp118 = (tmp116 * tmp117);		HX_STACK_VAR(tmp118,"tmp118");
								HX_STACK_LINE(3491)
								Float tmp119 = (tmp115 + tmp118);		HX_STACK_VAR(tmp119,"tmp119");
								HX_STACK_LINE(3491)
								Float tmp120 = (tmp114 - tmp119);		HX_STACK_VAR(tmp120,"tmp120");
								HX_STACK_LINE(3491)
								Float v2y = tmp120;		HX_STACK_VAR(v2y,"v2y");
								HX_STACK_LINE(3491)
								Float tmp121 = (v2y * _this->nx);		HX_STACK_VAR(tmp121,"tmp121");
								HX_STACK_LINE(3491)
								Float tmp122 = (v2x * _this->ny);		HX_STACK_VAR(tmp122,"tmp122");
								HX_STACK_LINE(3491)
								Float tmp123 = (tmp121 - tmp122);		HX_STACK_VAR(tmp123,"tmp123");
								HX_STACK_LINE(3491)
								Float tmp124 = _this->surfacex;		HX_STACK_VAR(tmp124,"tmp124");
								HX_STACK_LINE(3491)
								Float tmp125 = (tmp123 + tmp124);		HX_STACK_VAR(tmp125,"tmp125");
								HX_STACK_LINE(3491)
								Float tmp126 = _this->c2->tMass;		HX_STACK_VAR(tmp126,"tmp126");
								HX_STACK_LINE(3491)
								Float tmp127 = (tmp125 * tmp126);		HX_STACK_VAR(tmp127,"tmp127");
								HX_STACK_LINE(3491)
								j = tmp127;
								HX_STACK_LINE(3491)
								Float tmp128 = _this->c2->friction;		HX_STACK_VAR(tmp128,"tmp128");
								HX_STACK_LINE(3491)
								Float tmp129 = _this->c2->jnAcc;		HX_STACK_VAR(tmp129,"tmp129");
								HX_STACK_LINE(3491)
								Float tmp130 = (tmp128 * tmp129);		HX_STACK_VAR(tmp130,"tmp130");
								HX_STACK_LINE(3491)
								jMax = tmp130;
								HX_STACK_LINE(3491)
								Float tmp131 = _this->c2->jtAcc;		HX_STACK_VAR(tmp131,"tmp131");
								HX_STACK_LINE(3491)
								jOld = tmp131;
								HX_STACK_LINE(3491)
								Float tmp132 = (jOld - j);		HX_STACK_VAR(tmp132,"tmp132");
								HX_STACK_LINE(3491)
								cjAcc = tmp132;
								HX_STACK_LINE(3491)
								bool tmp133 = (cjAcc > jMax);		HX_STACK_VAR(tmp133,"tmp133");
								HX_STACK_LINE(3491)
								if ((tmp133)){
									HX_STACK_LINE(3491)
									cjAcc = jMax;
								}
								else{
									HX_STACK_LINE(3491)
									Float tmp134 = cjAcc;		HX_STACK_VAR(tmp134,"tmp134");
									HX_STACK_LINE(3491)
									Float tmp135 = jMax;		HX_STACK_VAR(tmp135,"tmp135");
									HX_STACK_LINE(3491)
									Float tmp136 = -(tmp135);		HX_STACK_VAR(tmp136,"tmp136");
									HX_STACK_LINE(3491)
									bool tmp137 = (tmp134 < tmp136);		HX_STACK_VAR(tmp137,"tmp137");
									HX_STACK_LINE(3491)
									if ((tmp137)){
										HX_STACK_LINE(3491)
										Float tmp138 = jMax;		HX_STACK_VAR(tmp138,"tmp138");
										HX_STACK_LINE(3491)
										Float tmp139 = -(tmp138);		HX_STACK_VAR(tmp139,"tmp139");
										HX_STACK_LINE(3491)
										cjAcc = tmp139;
									}
								}
								HX_STACK_LINE(3491)
								Float tmp134 = (cjAcc - jOld);		HX_STACK_VAR(tmp134,"tmp134");
								HX_STACK_LINE(3491)
								j = tmp134;
								HX_STACK_LINE(3491)
								_this->c2->jtAcc = cjAcc;
								HX_STACK_LINE(3491)
								Float tmp135 = _this->ny;		HX_STACK_VAR(tmp135,"tmp135");
								HX_STACK_LINE(3491)
								Float tmp136 = -(tmp135);		HX_STACK_VAR(tmp136,"tmp136");
								HX_STACK_LINE(3491)
								Float tmp137 = j;		HX_STACK_VAR(tmp137,"tmp137");
								HX_STACK_LINE(3491)
								Float tmp138 = (tmp136 * tmp137);		HX_STACK_VAR(tmp138,"tmp138");
								HX_STACK_LINE(3491)
								jx = tmp138;
								HX_STACK_LINE(3491)
								Float tmp139 = (_this->nx * j);		HX_STACK_VAR(tmp139,"tmp139");
								HX_STACK_LINE(3491)
								jy = tmp139;
								HX_STACK_LINE(3491)
								Float tmp140 = jx;		HX_STACK_VAR(tmp140,"tmp140");
								HX_STACK_LINE(3491)
								Float tmp141 = _this->b2->imass;		HX_STACK_VAR(tmp141,"tmp141");
								HX_STACK_LINE(3491)
								Float tmp142 = (tmp140 * tmp141);		HX_STACK_VAR(tmp142,"tmp142");
								HX_STACK_LINE(3491)
								hx::AddEq(_this->b2->velx,tmp142);
								HX_STACK_LINE(3491)
								Float tmp143 = jy;		HX_STACK_VAR(tmp143,"tmp143");
								HX_STACK_LINE(3491)
								Float tmp144 = _this->b2->imass;		HX_STACK_VAR(tmp144,"tmp144");
								HX_STACK_LINE(3491)
								Float tmp145 = (tmp143 * tmp144);		HX_STACK_VAR(tmp145,"tmp145");
								HX_STACK_LINE(3491)
								hx::AddEq(_this->b2->vely,tmp145);
								HX_STACK_LINE(3491)
								Float tmp146 = jx;		HX_STACK_VAR(tmp146,"tmp146");
								HX_STACK_LINE(3491)
								Float tmp147 = _this->b1->imass;		HX_STACK_VAR(tmp147,"tmp147");
								HX_STACK_LINE(3491)
								Float tmp148 = (tmp146 * tmp147);		HX_STACK_VAR(tmp148,"tmp148");
								HX_STACK_LINE(3491)
								hx::SubEq(_this->b1->velx,tmp148);
								HX_STACK_LINE(3491)
								Float tmp149 = jy;		HX_STACK_VAR(tmp149,"tmp149");
								HX_STACK_LINE(3491)
								Float tmp150 = _this->b1->imass;		HX_STACK_VAR(tmp150,"tmp150");
								HX_STACK_LINE(3491)
								Float tmp151 = (tmp149 * tmp150);		HX_STACK_VAR(tmp151,"tmp151");
								HX_STACK_LINE(3491)
								hx::SubEq(_this->b1->vely,tmp151);
								HX_STACK_LINE(3491)
								Float tmp152 = (_this->rt2b * j);		HX_STACK_VAR(tmp152,"tmp152");
								HX_STACK_LINE(3491)
								Float tmp153 = _this->b2->iinertia;		HX_STACK_VAR(tmp153,"tmp153");
								HX_STACK_LINE(3491)
								Float tmp154 = (tmp152 * tmp153);		HX_STACK_VAR(tmp154,"tmp154");
								HX_STACK_LINE(3491)
								hx::AddEq(_this->b2->angvel,tmp154);
								HX_STACK_LINE(3491)
								Float tmp155 = (_this->rt2a * j);		HX_STACK_VAR(tmp155,"tmp155");
								HX_STACK_LINE(3491)
								Float tmp156 = _this->b1->iinertia;		HX_STACK_VAR(tmp156,"tmp156");
								HX_STACK_LINE(3491)
								Float tmp157 = (tmp155 * tmp156);		HX_STACK_VAR(tmp157,"tmp157");
								HX_STACK_LINE(3491)
								hx::SubEq(_this->b1->angvel,tmp157);
								HX_STACK_LINE(3491)
								Float tmp158 = _this->k1x;		HX_STACK_VAR(tmp158,"tmp158");
								HX_STACK_LINE(3491)
								Float tmp159 = _this->b2->velx;		HX_STACK_VAR(tmp159,"tmp159");
								HX_STACK_LINE(3491)
								Float tmp160 = (tmp158 + tmp159);		HX_STACK_VAR(tmp160,"tmp160");
								HX_STACK_LINE(3491)
								Float tmp161 = _this->c1->r2y;		HX_STACK_VAR(tmp161,"tmp161");
								HX_STACK_LINE(3491)
								Float tmp162 = _this->b2->angvel;		HX_STACK_VAR(tmp162,"tmp162");
								HX_STACK_LINE(3491)
								Float tmp163 = (tmp161 * tmp162);		HX_STACK_VAR(tmp163,"tmp163");
								HX_STACK_LINE(3491)
								Float tmp164 = (tmp160 - tmp163);		HX_STACK_VAR(tmp164,"tmp164");
								HX_STACK_LINE(3491)
								Float tmp165 = _this->b1->velx;		HX_STACK_VAR(tmp165,"tmp165");
								HX_STACK_LINE(3491)
								Float tmp166 = _this->c1->r1y;		HX_STACK_VAR(tmp166,"tmp166");
								HX_STACK_LINE(3491)
								Float tmp167 = _this->b1->angvel;		HX_STACK_VAR(tmp167,"tmp167");
								HX_STACK_LINE(3491)
								Float tmp168 = (tmp166 * tmp167);		HX_STACK_VAR(tmp168,"tmp168");
								HX_STACK_LINE(3491)
								Float tmp169 = (tmp165 - tmp168);		HX_STACK_VAR(tmp169,"tmp169");
								HX_STACK_LINE(3491)
								Float tmp170 = (tmp164 - tmp169);		HX_STACK_VAR(tmp170,"tmp170");
								HX_STACK_LINE(3491)
								v1x = tmp170;
								HX_STACK_LINE(3491)
								Float tmp171 = _this->k1y;		HX_STACK_VAR(tmp171,"tmp171");
								HX_STACK_LINE(3491)
								Float tmp172 = _this->b2->vely;		HX_STACK_VAR(tmp172,"tmp172");
								HX_STACK_LINE(3491)
								Float tmp173 = (tmp171 + tmp172);		HX_STACK_VAR(tmp173,"tmp173");
								HX_STACK_LINE(3491)
								Float tmp174 = _this->c1->r2x;		HX_STACK_VAR(tmp174,"tmp174");
								HX_STACK_LINE(3491)
								Float tmp175 = _this->b2->angvel;		HX_STACK_VAR(tmp175,"tmp175");
								HX_STACK_LINE(3491)
								Float tmp176 = (tmp174 * tmp175);		HX_STACK_VAR(tmp176,"tmp176");
								HX_STACK_LINE(3491)
								Float tmp177 = (tmp173 + tmp176);		HX_STACK_VAR(tmp177,"tmp177");
								HX_STACK_LINE(3491)
								Float tmp178 = _this->b1->vely;		HX_STACK_VAR(tmp178,"tmp178");
								HX_STACK_LINE(3491)
								Float tmp179 = _this->c1->r1x;		HX_STACK_VAR(tmp179,"tmp179");
								HX_STACK_LINE(3491)
								Float tmp180 = _this->b1->angvel;		HX_STACK_VAR(tmp180,"tmp180");
								HX_STACK_LINE(3491)
								Float tmp181 = (tmp179 * tmp180);		HX_STACK_VAR(tmp181,"tmp181");
								HX_STACK_LINE(3491)
								Float tmp182 = (tmp178 + tmp181);		HX_STACK_VAR(tmp182,"tmp182");
								HX_STACK_LINE(3491)
								Float tmp183 = (tmp177 - tmp182);		HX_STACK_VAR(tmp183,"tmp183");
								HX_STACK_LINE(3491)
								v1y = tmp183;
								HX_STACK_LINE(3491)
								Float tmp184 = _this->k2x;		HX_STACK_VAR(tmp184,"tmp184");
								HX_STACK_LINE(3491)
								Float tmp185 = _this->b2->velx;		HX_STACK_VAR(tmp185,"tmp185");
								HX_STACK_LINE(3491)
								Float tmp186 = (tmp184 + tmp185);		HX_STACK_VAR(tmp186,"tmp186");
								HX_STACK_LINE(3491)
								Float tmp187 = _this->c2->r2y;		HX_STACK_VAR(tmp187,"tmp187");
								HX_STACK_LINE(3491)
								Float tmp188 = _this->b2->angvel;		HX_STACK_VAR(tmp188,"tmp188");
								HX_STACK_LINE(3491)
								Float tmp189 = (tmp187 * tmp188);		HX_STACK_VAR(tmp189,"tmp189");
								HX_STACK_LINE(3491)
								Float tmp190 = (tmp186 - tmp189);		HX_STACK_VAR(tmp190,"tmp190");
								HX_STACK_LINE(3491)
								Float tmp191 = _this->b1->velx;		HX_STACK_VAR(tmp191,"tmp191");
								HX_STACK_LINE(3491)
								Float tmp192 = _this->c2->r1y;		HX_STACK_VAR(tmp192,"tmp192");
								HX_STACK_LINE(3491)
								Float tmp193 = _this->b1->angvel;		HX_STACK_VAR(tmp193,"tmp193");
								HX_STACK_LINE(3491)
								Float tmp194 = (tmp192 * tmp193);		HX_STACK_VAR(tmp194,"tmp194");
								HX_STACK_LINE(3491)
								Float tmp195 = (tmp191 - tmp194);		HX_STACK_VAR(tmp195,"tmp195");
								HX_STACK_LINE(3491)
								Float tmp196 = (tmp190 - tmp195);		HX_STACK_VAR(tmp196,"tmp196");
								HX_STACK_LINE(3491)
								v2x = tmp196;
								HX_STACK_LINE(3491)
								Float tmp197 = _this->k2y;		HX_STACK_VAR(tmp197,"tmp197");
								HX_STACK_LINE(3491)
								Float tmp198 = _this->b2->vely;		HX_STACK_VAR(tmp198,"tmp198");
								HX_STACK_LINE(3491)
								Float tmp199 = (tmp197 + tmp198);		HX_STACK_VAR(tmp199,"tmp199");
								HX_STACK_LINE(3491)
								Float tmp200 = _this->c2->r2x;		HX_STACK_VAR(tmp200,"tmp200");
								HX_STACK_LINE(3491)
								Float tmp201 = _this->b2->angvel;		HX_STACK_VAR(tmp201,"tmp201");
								HX_STACK_LINE(3491)
								Float tmp202 = (tmp200 * tmp201);		HX_STACK_VAR(tmp202,"tmp202");
								HX_STACK_LINE(3491)
								Float tmp203 = (tmp199 + tmp202);		HX_STACK_VAR(tmp203,"tmp203");
								HX_STACK_LINE(3491)
								Float tmp204 = _this->b1->vely;		HX_STACK_VAR(tmp204,"tmp204");
								HX_STACK_LINE(3491)
								Float tmp205 = _this->c2->r1x;		HX_STACK_VAR(tmp205,"tmp205");
								HX_STACK_LINE(3491)
								Float tmp206 = _this->b1->angvel;		HX_STACK_VAR(tmp206,"tmp206");
								HX_STACK_LINE(3491)
								Float tmp207 = (tmp205 * tmp206);		HX_STACK_VAR(tmp207,"tmp207");
								HX_STACK_LINE(3491)
								Float tmp208 = (tmp204 + tmp207);		HX_STACK_VAR(tmp208,"tmp208");
								HX_STACK_LINE(3491)
								Float tmp209 = (tmp203 - tmp208);		HX_STACK_VAR(tmp209,"tmp209");
								HX_STACK_LINE(3491)
								v2y = tmp209;
								HX_STACK_LINE(3491)
								Float tmp210 = _this->c1->jnAcc;		HX_STACK_VAR(tmp210,"tmp210");
								HX_STACK_LINE(3491)
								Float ax = tmp210;		HX_STACK_VAR(ax,"ax");
								HX_STACK_LINE(3491)
								Float tmp211 = _this->c2->jnAcc;		HX_STACK_VAR(tmp211,"tmp211");
								HX_STACK_LINE(3491)
								Float ay = tmp211;		HX_STACK_VAR(ay,"ay");
								HX_STACK_LINE(3491)
								Float tmp212 = (v1x * _this->nx);		HX_STACK_VAR(tmp212,"tmp212");
								HX_STACK_LINE(3491)
								Float tmp213 = (v1y * _this->ny);		HX_STACK_VAR(tmp213,"tmp213");
								HX_STACK_LINE(3491)
								Float tmp214 = (tmp212 + tmp213);		HX_STACK_VAR(tmp214,"tmp214");
								HX_STACK_LINE(3491)
								Float tmp215 = _this->surfacey;		HX_STACK_VAR(tmp215,"tmp215");
								HX_STACK_LINE(3491)
								Float tmp216 = (tmp214 + tmp215);		HX_STACK_VAR(tmp216,"tmp216");
								HX_STACK_LINE(3491)
								Float tmp217 = _this->c1->bounce;		HX_STACK_VAR(tmp217,"tmp217");
								HX_STACK_LINE(3491)
								Float tmp218 = (tmp216 + tmp217);		HX_STACK_VAR(tmp218,"tmp218");
								HX_STACK_LINE(3491)
								Float tmp219 = (_this->Ka * ax);		HX_STACK_VAR(tmp219,"tmp219");
								HX_STACK_LINE(3491)
								Float tmp220 = (_this->Kb * ay);		HX_STACK_VAR(tmp220,"tmp220");
								HX_STACK_LINE(3491)
								Float tmp221 = (tmp219 + tmp220);		HX_STACK_VAR(tmp221,"tmp221");
								HX_STACK_LINE(3491)
								Float tmp222 = (tmp218 - tmp221);		HX_STACK_VAR(tmp222,"tmp222");
								HX_STACK_LINE(3491)
								Float jnx = tmp222;		HX_STACK_VAR(jnx,"jnx");
								HX_STACK_LINE(3491)
								Float tmp223 = (v2x * _this->nx);		HX_STACK_VAR(tmp223,"tmp223");
								HX_STACK_LINE(3491)
								Float tmp224 = (v2y * _this->ny);		HX_STACK_VAR(tmp224,"tmp224");
								HX_STACK_LINE(3491)
								Float tmp225 = (tmp223 + tmp224);		HX_STACK_VAR(tmp225,"tmp225");
								HX_STACK_LINE(3491)
								Float tmp226 = _this->surfacey;		HX_STACK_VAR(tmp226,"tmp226");
								HX_STACK_LINE(3491)
								Float tmp227 = (tmp225 + tmp226);		HX_STACK_VAR(tmp227,"tmp227");
								HX_STACK_LINE(3491)
								Float tmp228 = _this->c2->bounce;		HX_STACK_VAR(tmp228,"tmp228");
								HX_STACK_LINE(3491)
								Float tmp229 = (tmp227 + tmp228);		HX_STACK_VAR(tmp229,"tmp229");
								HX_STACK_LINE(3491)
								Float tmp230 = (_this->Kb * ax);		HX_STACK_VAR(tmp230,"tmp230");
								HX_STACK_LINE(3491)
								Float tmp231 = (_this->Kc * ay);		HX_STACK_VAR(tmp231,"tmp231");
								HX_STACK_LINE(3491)
								Float tmp232 = (tmp230 + tmp231);		HX_STACK_VAR(tmp232,"tmp232");
								HX_STACK_LINE(3491)
								Float tmp233 = (tmp229 - tmp232);		HX_STACK_VAR(tmp233,"tmp233");
								HX_STACK_LINE(3491)
								Float jny = tmp233;		HX_STACK_VAR(jny,"jny");
								HX_STACK_LINE(3491)
								Float tmp234 = (_this->kMassa * jnx);		HX_STACK_VAR(tmp234,"tmp234");
								HX_STACK_LINE(3491)
								Float tmp235 = (_this->kMassb * jny);		HX_STACK_VAR(tmp235,"tmp235");
								HX_STACK_LINE(3491)
								Float tmp236 = (tmp234 + tmp235);		HX_STACK_VAR(tmp236,"tmp236");
								HX_STACK_LINE(3491)
								Float tmp237 = -(tmp236);		HX_STACK_VAR(tmp237,"tmp237");
								HX_STACK_LINE(3491)
								Float xx = tmp237;		HX_STACK_VAR(xx,"xx");
								HX_STACK_LINE(3491)
								Float tmp238 = (_this->kMassb * jnx);		HX_STACK_VAR(tmp238,"tmp238");
								HX_STACK_LINE(3491)
								Float tmp239 = (_this->kMassc * jny);		HX_STACK_VAR(tmp239,"tmp239");
								HX_STACK_LINE(3491)
								Float tmp240 = (tmp238 + tmp239);		HX_STACK_VAR(tmp240,"tmp240");
								HX_STACK_LINE(3491)
								Float tmp241 = -(tmp240);		HX_STACK_VAR(tmp241,"tmp241");
								HX_STACK_LINE(3491)
								Float xy = tmp241;		HX_STACK_VAR(xy,"xy");
								HX_STACK_LINE(3491)
								bool tmp242 = (xx >= (int)0);		HX_STACK_VAR(tmp242,"tmp242");
								HX_STACK_LINE(3491)
								bool tmp243;		HX_STACK_VAR(tmp243,"tmp243");
								HX_STACK_LINE(3491)
								if ((tmp242)){
									HX_STACK_LINE(3491)
									tmp243 = (xy >= (int)0);
								}
								else{
									HX_STACK_LINE(3491)
									tmp243 = false;
								}
								HX_STACK_LINE(3491)
								if ((tmp243)){
									HX_STACK_LINE(3491)
									{
										HX_STACK_LINE(3491)
										Float tmp244 = (xx - ax);		HX_STACK_VAR(tmp244,"tmp244");
										HX_STACK_LINE(3491)
										jnx = tmp244;
										HX_STACK_LINE(3491)
										Float tmp245 = (xy - ay);		HX_STACK_VAR(tmp245,"tmp245");
										HX_STACK_LINE(3491)
										jny = tmp245;
									}
									HX_STACK_LINE(3491)
									_this->c1->jnAcc = xx;
									HX_STACK_LINE(3491)
									_this->c2->jnAcc = xy;
								}
								else{
									HX_STACK_LINE(3491)
									Float tmp244 = _this->c1->nMass;		HX_STACK_VAR(tmp244,"tmp244");
									HX_STACK_LINE(3491)
									Float tmp245 = -(tmp244);		HX_STACK_VAR(tmp245,"tmp245");
									HX_STACK_LINE(3491)
									Float tmp246 = jnx;		HX_STACK_VAR(tmp246,"tmp246");
									HX_STACK_LINE(3491)
									Float tmp247 = (tmp245 * tmp246);		HX_STACK_VAR(tmp247,"tmp247");
									HX_STACK_LINE(3491)
									xx = tmp247;
									HX_STACK_LINE(3491)
									bool tmp248 = (xx >= (int)0);		HX_STACK_VAR(tmp248,"tmp248");
									HX_STACK_LINE(3491)
									bool tmp249;		HX_STACK_VAR(tmp249,"tmp249");
									HX_STACK_LINE(3491)
									if ((tmp248)){
										HX_STACK_LINE(3491)
										Float tmp250 = (_this->Kb * xx);		HX_STACK_VAR(tmp250,"tmp250");
										HX_STACK_LINE(3491)
										Float tmp251 = tmp250;		HX_STACK_VAR(tmp251,"tmp251");
										HX_STACK_LINE(3491)
										Float tmp252 = jny;		HX_STACK_VAR(tmp252,"tmp252");
										HX_STACK_LINE(3491)
										Float tmp253 = (tmp251 + tmp252);		HX_STACK_VAR(tmp253,"tmp253");
										HX_STACK_LINE(3491)
										Float tmp254 = tmp253;		HX_STACK_VAR(tmp254,"tmp254");
										HX_STACK_LINE(3491)
										tmp249 = (tmp254 >= (int)0);
									}
									else{
										HX_STACK_LINE(3491)
										tmp249 = false;
									}
									HX_STACK_LINE(3491)
									if ((tmp249)){
										HX_STACK_LINE(3491)
										Float tmp250 = (xx - ax);		HX_STACK_VAR(tmp250,"tmp250");
										HX_STACK_LINE(3491)
										jnx = tmp250;
										HX_STACK_LINE(3491)
										Float tmp251 = ay;		HX_STACK_VAR(tmp251,"tmp251");
										HX_STACK_LINE(3491)
										Float tmp252 = -(tmp251);		HX_STACK_VAR(tmp252,"tmp252");
										HX_STACK_LINE(3491)
										jny = tmp252;
										HX_STACK_LINE(3491)
										_this->c1->jnAcc = xx;
										HX_STACK_LINE(3491)
										_this->c2->jnAcc = (int)0;
									}
									else{
										HX_STACK_LINE(3491)
										Float tmp250 = _this->c2->nMass;		HX_STACK_VAR(tmp250,"tmp250");
										HX_STACK_LINE(3491)
										Float tmp251 = -(tmp250);		HX_STACK_VAR(tmp251,"tmp251");
										HX_STACK_LINE(3491)
										Float tmp252 = jny;		HX_STACK_VAR(tmp252,"tmp252");
										HX_STACK_LINE(3491)
										Float tmp253 = (tmp251 * tmp252);		HX_STACK_VAR(tmp253,"tmp253");
										HX_STACK_LINE(3491)
										xy = tmp253;
										HX_STACK_LINE(3491)
										bool tmp254 = (xy >= (int)0);		HX_STACK_VAR(tmp254,"tmp254");
										HX_STACK_LINE(3491)
										bool tmp255;		HX_STACK_VAR(tmp255,"tmp255");
										HX_STACK_LINE(3491)
										if ((tmp254)){
											HX_STACK_LINE(3491)
											Float tmp256 = (_this->Kb * xy);		HX_STACK_VAR(tmp256,"tmp256");
											HX_STACK_LINE(3491)
											Float tmp257 = tmp256;		HX_STACK_VAR(tmp257,"tmp257");
											HX_STACK_LINE(3491)
											Float tmp258 = jnx;		HX_STACK_VAR(tmp258,"tmp258");
											HX_STACK_LINE(3491)
											Float tmp259 = (tmp257 + tmp258);		HX_STACK_VAR(tmp259,"tmp259");
											HX_STACK_LINE(3491)
											Float tmp260 = tmp259;		HX_STACK_VAR(tmp260,"tmp260");
											HX_STACK_LINE(3491)
											tmp255 = (tmp260 >= (int)0);
										}
										else{
											HX_STACK_LINE(3491)
											tmp255 = false;
										}
										HX_STACK_LINE(3491)
										if ((tmp255)){
											HX_STACK_LINE(3491)
											Float tmp256 = ax;		HX_STACK_VAR(tmp256,"tmp256");
											HX_STACK_LINE(3491)
											Float tmp257 = -(tmp256);		HX_STACK_VAR(tmp257,"tmp257");
											HX_STACK_LINE(3491)
											jnx = tmp257;
											HX_STACK_LINE(3491)
											Float tmp258 = (xy - ay);		HX_STACK_VAR(tmp258,"tmp258");
											HX_STACK_LINE(3491)
											jny = tmp258;
											HX_STACK_LINE(3491)
											_this->c1->jnAcc = (int)0;
											HX_STACK_LINE(3491)
											_this->c2->jnAcc = xy;
										}
										else{
											HX_STACK_LINE(3491)
											bool tmp256 = (jnx >= (int)0);		HX_STACK_VAR(tmp256,"tmp256");
											HX_STACK_LINE(3491)
											bool tmp257;		HX_STACK_VAR(tmp257,"tmp257");
											HX_STACK_LINE(3491)
											if ((tmp256)){
												HX_STACK_LINE(3491)
												tmp257 = (jny >= (int)0);
											}
											else{
												HX_STACK_LINE(3491)
												tmp257 = false;
											}
											HX_STACK_LINE(3491)
											if ((tmp257)){
												HX_STACK_LINE(3491)
												Float tmp258 = ax;		HX_STACK_VAR(tmp258,"tmp258");
												HX_STACK_LINE(3491)
												Float tmp259 = -(tmp258);		HX_STACK_VAR(tmp259,"tmp259");
												HX_STACK_LINE(3491)
												jnx = tmp259;
												HX_STACK_LINE(3491)
												Float tmp260 = ay;		HX_STACK_VAR(tmp260,"tmp260");
												HX_STACK_LINE(3491)
												Float tmp261 = -(tmp260);		HX_STACK_VAR(tmp261,"tmp261");
												HX_STACK_LINE(3491)
												jny = tmp261;
												HX_STACK_LINE(3491)
												Float tmp262 = _this->c2->jnAcc = (int)0;		HX_STACK_VAR(tmp262,"tmp262");
												HX_STACK_LINE(3491)
												_this->c1->jnAcc = tmp262;
											}
											else{
												HX_STACK_LINE(3491)
												jnx = (int)0;
												HX_STACK_LINE(3491)
												jny = (int)0;
											}
										}
									}
								}
								HX_STACK_LINE(3491)
								Float tmp244 = (jnx + jny);		HX_STACK_VAR(tmp244,"tmp244");
								HX_STACK_LINE(3491)
								j = tmp244;
								HX_STACK_LINE(3491)
								Float tmp245 = (_this->nx * j);		HX_STACK_VAR(tmp245,"tmp245");
								HX_STACK_LINE(3491)
								jx = tmp245;
								HX_STACK_LINE(3491)
								Float tmp246 = (_this->ny * j);		HX_STACK_VAR(tmp246,"tmp246");
								HX_STACK_LINE(3491)
								jy = tmp246;
								HX_STACK_LINE(3491)
								Float tmp247 = jx;		HX_STACK_VAR(tmp247,"tmp247");
								HX_STACK_LINE(3491)
								Float tmp248 = _this->b2->imass;		HX_STACK_VAR(tmp248,"tmp248");
								HX_STACK_LINE(3491)
								Float tmp249 = (tmp247 * tmp248);		HX_STACK_VAR(tmp249,"tmp249");
								HX_STACK_LINE(3491)
								hx::AddEq(_this->b2->velx,tmp249);
								HX_STACK_LINE(3491)
								Float tmp250 = jy;		HX_STACK_VAR(tmp250,"tmp250");
								HX_STACK_LINE(3491)
								Float tmp251 = _this->b2->imass;		HX_STACK_VAR(tmp251,"tmp251");
								HX_STACK_LINE(3491)
								Float tmp252 = (tmp250 * tmp251);		HX_STACK_VAR(tmp252,"tmp252");
								HX_STACK_LINE(3491)
								hx::AddEq(_this->b2->vely,tmp252);
								HX_STACK_LINE(3491)
								Float tmp253 = jx;		HX_STACK_VAR(tmp253,"tmp253");
								HX_STACK_LINE(3491)
								Float tmp254 = _this->b1->imass;		HX_STACK_VAR(tmp254,"tmp254");
								HX_STACK_LINE(3491)
								Float tmp255 = (tmp253 * tmp254);		HX_STACK_VAR(tmp255,"tmp255");
								HX_STACK_LINE(3491)
								hx::SubEq(_this->b1->velx,tmp255);
								HX_STACK_LINE(3491)
								Float tmp256 = jy;		HX_STACK_VAR(tmp256,"tmp256");
								HX_STACK_LINE(3491)
								Float tmp257 = _this->b1->imass;		HX_STACK_VAR(tmp257,"tmp257");
								HX_STACK_LINE(3491)
								Float tmp258 = (tmp256 * tmp257);		HX_STACK_VAR(tmp258,"tmp258");
								HX_STACK_LINE(3491)
								hx::SubEq(_this->b1->vely,tmp258);
								HX_STACK_LINE(3491)
								Float tmp259 = (_this->rn1b * jnx);		HX_STACK_VAR(tmp259,"tmp259");
								HX_STACK_LINE(3491)
								Float tmp260 = (_this->rn2b * jny);		HX_STACK_VAR(tmp260,"tmp260");
								HX_STACK_LINE(3491)
								Float tmp261 = (tmp259 + tmp260);		HX_STACK_VAR(tmp261,"tmp261");
								HX_STACK_LINE(3491)
								Float tmp262 = _this->b2->iinertia;		HX_STACK_VAR(tmp262,"tmp262");
								HX_STACK_LINE(3491)
								Float tmp263 = (tmp261 * tmp262);		HX_STACK_VAR(tmp263,"tmp263");
								HX_STACK_LINE(3491)
								hx::AddEq(_this->b2->angvel,tmp263);
								HX_STACK_LINE(3491)
								Float tmp264 = (_this->rn1a * jnx);		HX_STACK_VAR(tmp264,"tmp264");
								HX_STACK_LINE(3491)
								Float tmp265 = (_this->rn2a * jny);		HX_STACK_VAR(tmp265,"tmp265");
								HX_STACK_LINE(3491)
								Float tmp266 = (tmp264 + tmp265);		HX_STACK_VAR(tmp266,"tmp266");
								HX_STACK_LINE(3491)
								Float tmp267 = _this->b1->iinertia;		HX_STACK_VAR(tmp267,"tmp267");
								HX_STACK_LINE(3491)
								Float tmp268 = (tmp266 * tmp267);		HX_STACK_VAR(tmp268,"tmp268");
								HX_STACK_LINE(3491)
								hx::SubEq(_this->b1->angvel,tmp268);
							}
							else{
								HX_STACK_LINE(3491)
								bool tmp95 = (_this->radius != ((Float)0.0));		HX_STACK_VAR(tmp95,"tmp95");
								HX_STACK_LINE(3491)
								if ((tmp95)){
									HX_STACK_LINE(3491)
									Float tmp96 = _this->b2->angvel;		HX_STACK_VAR(tmp96,"tmp96");
									HX_STACK_LINE(3491)
									Float tmp97 = _this->b1->angvel;		HX_STACK_VAR(tmp97,"tmp97");
									HX_STACK_LINE(3491)
									Float tmp98 = (tmp96 - tmp97);		HX_STACK_VAR(tmp98,"tmp98");
									HX_STACK_LINE(3491)
									Float dw = tmp98;		HX_STACK_VAR(dw,"dw");
									HX_STACK_LINE(3491)
									Float tmp99 = (dw * _this->rMass);		HX_STACK_VAR(tmp99,"tmp99");
									HX_STACK_LINE(3491)
									j = tmp99;
									HX_STACK_LINE(3491)
									Float tmp100 = _this->rfric;		HX_STACK_VAR(tmp100,"tmp100");
									HX_STACK_LINE(3491)
									Float tmp101 = _this->c1->jnAcc;		HX_STACK_VAR(tmp101,"tmp101");
									HX_STACK_LINE(3491)
									Float tmp102 = (tmp100 * tmp101);		HX_STACK_VAR(tmp102,"tmp102");
									HX_STACK_LINE(3491)
									jMax = tmp102;
									HX_STACK_LINE(3491)
									jOld = _this->jrAcc;
									HX_STACK_LINE(3491)
									hx::SubEq(_this->jrAcc,j);
									HX_STACK_LINE(3491)
									bool tmp103 = (_this->jrAcc > jMax);		HX_STACK_VAR(tmp103,"tmp103");
									HX_STACK_LINE(3491)
									if ((tmp103)){
										HX_STACK_LINE(3491)
										_this->jrAcc = jMax;
									}
									else{
										HX_STACK_LINE(3491)
										Float tmp104 = _this->jrAcc;		HX_STACK_VAR(tmp104,"tmp104");
										HX_STACK_LINE(3491)
										Float tmp105 = jMax;		HX_STACK_VAR(tmp105,"tmp105");
										HX_STACK_LINE(3491)
										Float tmp106 = -(tmp105);		HX_STACK_VAR(tmp106,"tmp106");
										HX_STACK_LINE(3491)
										bool tmp107 = (tmp104 < tmp106);		HX_STACK_VAR(tmp107,"tmp107");
										HX_STACK_LINE(3491)
										if ((tmp107)){
											HX_STACK_LINE(3491)
											Float tmp108 = jMax;		HX_STACK_VAR(tmp108,"tmp108");
											HX_STACK_LINE(3491)
											Float tmp109 = -(tmp108);		HX_STACK_VAR(tmp109,"tmp109");
											HX_STACK_LINE(3491)
											_this->jrAcc = tmp109;
										}
									}
									HX_STACK_LINE(3491)
									Float tmp104 = (_this->jrAcc - jOld);		HX_STACK_VAR(tmp104,"tmp104");
									HX_STACK_LINE(3491)
									j = tmp104;
									HX_STACK_LINE(3491)
									Float tmp105 = j;		HX_STACK_VAR(tmp105,"tmp105");
									HX_STACK_LINE(3491)
									Float tmp106 = _this->b2->iinertia;		HX_STACK_VAR(tmp106,"tmp106");
									HX_STACK_LINE(3491)
									Float tmp107 = (tmp105 * tmp106);		HX_STACK_VAR(tmp107,"tmp107");
									HX_STACK_LINE(3491)
									hx::AddEq(_this->b2->angvel,tmp107);
									HX_STACK_LINE(3491)
									Float tmp108 = j;		HX_STACK_VAR(tmp108,"tmp108");
									HX_STACK_LINE(3491)
									Float tmp109 = _this->b1->iinertia;		HX_STACK_VAR(tmp109,"tmp109");
									HX_STACK_LINE(3491)
									Float tmp110 = (tmp108 * tmp109);		HX_STACK_VAR(tmp110,"tmp110");
									HX_STACK_LINE(3491)
									hx::SubEq(_this->b1->angvel,tmp110);
								}
								HX_STACK_LINE(3491)
								Float tmp96 = _this->k1x;		HX_STACK_VAR(tmp96,"tmp96");
								HX_STACK_LINE(3491)
								Float tmp97 = _this->b2->velx;		HX_STACK_VAR(tmp97,"tmp97");
								HX_STACK_LINE(3491)
								Float tmp98 = (tmp96 + tmp97);		HX_STACK_VAR(tmp98,"tmp98");
								HX_STACK_LINE(3491)
								Float tmp99 = _this->c1->r2y;		HX_STACK_VAR(tmp99,"tmp99");
								HX_STACK_LINE(3491)
								Float tmp100 = _this->b2->angvel;		HX_STACK_VAR(tmp100,"tmp100");
								HX_STACK_LINE(3491)
								Float tmp101 = (tmp99 * tmp100);		HX_STACK_VAR(tmp101,"tmp101");
								HX_STACK_LINE(3491)
								Float tmp102 = (tmp98 - tmp101);		HX_STACK_VAR(tmp102,"tmp102");
								HX_STACK_LINE(3491)
								Float tmp103 = _this->b1->velx;		HX_STACK_VAR(tmp103,"tmp103");
								HX_STACK_LINE(3491)
								Float tmp104 = _this->c1->r1y;		HX_STACK_VAR(tmp104,"tmp104");
								HX_STACK_LINE(3491)
								Float tmp105 = _this->b1->angvel;		HX_STACK_VAR(tmp105,"tmp105");
								HX_STACK_LINE(3491)
								Float tmp106 = (tmp104 * tmp105);		HX_STACK_VAR(tmp106,"tmp106");
								HX_STACK_LINE(3491)
								Float tmp107 = (tmp103 - tmp106);		HX_STACK_VAR(tmp107,"tmp107");
								HX_STACK_LINE(3491)
								Float tmp108 = (tmp102 - tmp107);		HX_STACK_VAR(tmp108,"tmp108");
								HX_STACK_LINE(3491)
								v1x = tmp108;
								HX_STACK_LINE(3491)
								Float tmp109 = _this->k1y;		HX_STACK_VAR(tmp109,"tmp109");
								HX_STACK_LINE(3491)
								Float tmp110 = _this->b2->vely;		HX_STACK_VAR(tmp110,"tmp110");
								HX_STACK_LINE(3491)
								Float tmp111 = (tmp109 + tmp110);		HX_STACK_VAR(tmp111,"tmp111");
								HX_STACK_LINE(3491)
								Float tmp112 = _this->c1->r2x;		HX_STACK_VAR(tmp112,"tmp112");
								HX_STACK_LINE(3491)
								Float tmp113 = _this->b2->angvel;		HX_STACK_VAR(tmp113,"tmp113");
								HX_STACK_LINE(3491)
								Float tmp114 = (tmp112 * tmp113);		HX_STACK_VAR(tmp114,"tmp114");
								HX_STACK_LINE(3491)
								Float tmp115 = (tmp111 + tmp114);		HX_STACK_VAR(tmp115,"tmp115");
								HX_STACK_LINE(3491)
								Float tmp116 = _this->b1->vely;		HX_STACK_VAR(tmp116,"tmp116");
								HX_STACK_LINE(3491)
								Float tmp117 = _this->c1->r1x;		HX_STACK_VAR(tmp117,"tmp117");
								HX_STACK_LINE(3491)
								Float tmp118 = _this->b1->angvel;		HX_STACK_VAR(tmp118,"tmp118");
								HX_STACK_LINE(3491)
								Float tmp119 = (tmp117 * tmp118);		HX_STACK_VAR(tmp119,"tmp119");
								HX_STACK_LINE(3491)
								Float tmp120 = (tmp116 + tmp119);		HX_STACK_VAR(tmp120,"tmp120");
								HX_STACK_LINE(3491)
								Float tmp121 = (tmp115 - tmp120);		HX_STACK_VAR(tmp121,"tmp121");
								HX_STACK_LINE(3491)
								v1y = tmp121;
								HX_STACK_LINE(3491)
								Float tmp122 = _this->c1->bounce;		HX_STACK_VAR(tmp122,"tmp122");
								HX_STACK_LINE(3491)
								Float tmp123 = (_this->nx * v1x);		HX_STACK_VAR(tmp123,"tmp123");
								HX_STACK_LINE(3491)
								Float tmp124 = (_this->ny * v1y);		HX_STACK_VAR(tmp124,"tmp124");
								HX_STACK_LINE(3491)
								Float tmp125 = (tmp123 + tmp124);		HX_STACK_VAR(tmp125,"tmp125");
								HX_STACK_LINE(3491)
								Float tmp126 = (tmp122 + tmp125);		HX_STACK_VAR(tmp126,"tmp126");
								HX_STACK_LINE(3491)
								Float tmp127 = _this->surfacey;		HX_STACK_VAR(tmp127,"tmp127");
								HX_STACK_LINE(3491)
								Float tmp128 = (tmp126 + tmp127);		HX_STACK_VAR(tmp128,"tmp128");
								HX_STACK_LINE(3491)
								Float tmp129 = _this->c1->nMass;		HX_STACK_VAR(tmp129,"tmp129");
								HX_STACK_LINE(3491)
								Float tmp130 = (tmp128 * tmp129);		HX_STACK_VAR(tmp130,"tmp130");
								HX_STACK_LINE(3491)
								j = tmp130;
								HX_STACK_LINE(3491)
								Float tmp131 = _this->c1->jnAcc;		HX_STACK_VAR(tmp131,"tmp131");
								HX_STACK_LINE(3491)
								jOld = tmp131;
								HX_STACK_LINE(3491)
								Float tmp132 = (jOld - j);		HX_STACK_VAR(tmp132,"tmp132");
								HX_STACK_LINE(3491)
								cjAcc = tmp132;
								HX_STACK_LINE(3491)
								bool tmp133 = (cjAcc < ((Float)0.0));		HX_STACK_VAR(tmp133,"tmp133");
								HX_STACK_LINE(3491)
								if ((tmp133)){
									HX_STACK_LINE(3491)
									cjAcc = ((Float)0.0);
								}
								HX_STACK_LINE(3491)
								Float tmp134 = (cjAcc - jOld);		HX_STACK_VAR(tmp134,"tmp134");
								HX_STACK_LINE(3491)
								j = tmp134;
								HX_STACK_LINE(3491)
								_this->c1->jnAcc = cjAcc;
								HX_STACK_LINE(3491)
								Float tmp135 = (_this->nx * j);		HX_STACK_VAR(tmp135,"tmp135");
								HX_STACK_LINE(3491)
								jx = tmp135;
								HX_STACK_LINE(3491)
								Float tmp136 = (_this->ny * j);		HX_STACK_VAR(tmp136,"tmp136");
								HX_STACK_LINE(3491)
								jy = tmp136;
								HX_STACK_LINE(3491)
								Float tmp137 = jx;		HX_STACK_VAR(tmp137,"tmp137");
								HX_STACK_LINE(3491)
								Float tmp138 = _this->b2->imass;		HX_STACK_VAR(tmp138,"tmp138");
								HX_STACK_LINE(3491)
								Float tmp139 = (tmp137 * tmp138);		HX_STACK_VAR(tmp139,"tmp139");
								HX_STACK_LINE(3491)
								hx::AddEq(_this->b2->velx,tmp139);
								HX_STACK_LINE(3491)
								Float tmp140 = jy;		HX_STACK_VAR(tmp140,"tmp140");
								HX_STACK_LINE(3491)
								Float tmp141 = _this->b2->imass;		HX_STACK_VAR(tmp141,"tmp141");
								HX_STACK_LINE(3491)
								Float tmp142 = (tmp140 * tmp141);		HX_STACK_VAR(tmp142,"tmp142");
								HX_STACK_LINE(3491)
								hx::AddEq(_this->b2->vely,tmp142);
								HX_STACK_LINE(3491)
								Float tmp143 = jx;		HX_STACK_VAR(tmp143,"tmp143");
								HX_STACK_LINE(3491)
								Float tmp144 = _this->b1->imass;		HX_STACK_VAR(tmp144,"tmp144");
								HX_STACK_LINE(3491)
								Float tmp145 = (tmp143 * tmp144);		HX_STACK_VAR(tmp145,"tmp145");
								HX_STACK_LINE(3491)
								hx::SubEq(_this->b1->velx,tmp145);
								HX_STACK_LINE(3491)
								Float tmp146 = jy;		HX_STACK_VAR(tmp146,"tmp146");
								HX_STACK_LINE(3491)
								Float tmp147 = _this->b1->imass;		HX_STACK_VAR(tmp147,"tmp147");
								HX_STACK_LINE(3491)
								Float tmp148 = (tmp146 * tmp147);		HX_STACK_VAR(tmp148,"tmp148");
								HX_STACK_LINE(3491)
								hx::SubEq(_this->b1->vely,tmp148);
								HX_STACK_LINE(3491)
								Float tmp149 = (_this->rn1b * j);		HX_STACK_VAR(tmp149,"tmp149");
								HX_STACK_LINE(3491)
								Float tmp150 = _this->b2->iinertia;		HX_STACK_VAR(tmp150,"tmp150");
								HX_STACK_LINE(3491)
								Float tmp151 = (tmp149 * tmp150);		HX_STACK_VAR(tmp151,"tmp151");
								HX_STACK_LINE(3491)
								hx::AddEq(_this->b2->angvel,tmp151);
								HX_STACK_LINE(3491)
								Float tmp152 = (_this->rn1a * j);		HX_STACK_VAR(tmp152,"tmp152");
								HX_STACK_LINE(3491)
								Float tmp153 = _this->b1->iinertia;		HX_STACK_VAR(tmp153,"tmp153");
								HX_STACK_LINE(3491)
								Float tmp154 = (tmp152 * tmp153);		HX_STACK_VAR(tmp154,"tmp154");
								HX_STACK_LINE(3491)
								hx::SubEq(_this->b1->angvel,tmp154);
							}
						}
						HX_STACK_LINE(3492)
						{
							HX_STACK_LINE(3492)
							::zpp_nape::dynamics::ZPP_ColArbiter _this = arb->colarb;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(3492)
							Float jx;		HX_STACK_VAR(jx,"jx");
							HX_STACK_LINE(3492)
							Float jy;		HX_STACK_VAR(jy,"jy");
							HX_STACK_LINE(3492)
							Float j;		HX_STACK_VAR(j,"j");
							HX_STACK_LINE(3492)
							Float jMax;		HX_STACK_VAR(jMax,"jMax");
							HX_STACK_LINE(3492)
							Float jOld;		HX_STACK_VAR(jOld,"jOld");
							HX_STACK_LINE(3492)
							Float cjAcc;		HX_STACK_VAR(cjAcc,"cjAcc");
							HX_STACK_LINE(3492)
							Float tmp31 = _this->k1x;		HX_STACK_VAR(tmp31,"tmp31");
							HX_STACK_LINE(3492)
							Float tmp32 = _this->b2->velx;		HX_STACK_VAR(tmp32,"tmp32");
							HX_STACK_LINE(3492)
							Float tmp33 = (tmp31 + tmp32);		HX_STACK_VAR(tmp33,"tmp33");
							HX_STACK_LINE(3492)
							Float tmp34 = _this->c1->r2y;		HX_STACK_VAR(tmp34,"tmp34");
							HX_STACK_LINE(3492)
							Float tmp35 = _this->b2->angvel;		HX_STACK_VAR(tmp35,"tmp35");
							HX_STACK_LINE(3492)
							Float tmp36 = (tmp34 * tmp35);		HX_STACK_VAR(tmp36,"tmp36");
							HX_STACK_LINE(3492)
							Float tmp37 = (tmp33 - tmp36);		HX_STACK_VAR(tmp37,"tmp37");
							HX_STACK_LINE(3492)
							Float tmp38 = _this->b1->velx;		HX_STACK_VAR(tmp38,"tmp38");
							HX_STACK_LINE(3492)
							Float tmp39 = _this->c1->r1y;		HX_STACK_VAR(tmp39,"tmp39");
							HX_STACK_LINE(3492)
							Float tmp40 = _this->b1->angvel;		HX_STACK_VAR(tmp40,"tmp40");
							HX_STACK_LINE(3492)
							Float tmp41 = (tmp39 * tmp40);		HX_STACK_VAR(tmp41,"tmp41");
							HX_STACK_LINE(3492)
							Float tmp42 = (tmp38 - tmp41);		HX_STACK_VAR(tmp42,"tmp42");
							HX_STACK_LINE(3492)
							Float tmp43 = (tmp37 - tmp42);		HX_STACK_VAR(tmp43,"tmp43");
							HX_STACK_LINE(3492)
							Float v1x = tmp43;		HX_STACK_VAR(v1x,"v1x");
							HX_STACK_LINE(3492)
							Float tmp44 = _this->k1y;		HX_STACK_VAR(tmp44,"tmp44");
							HX_STACK_LINE(3492)
							Float tmp45 = _this->b2->vely;		HX_STACK_VAR(tmp45,"tmp45");
							HX_STACK_LINE(3492)
							Float tmp46 = (tmp44 + tmp45);		HX_STACK_VAR(tmp46,"tmp46");
							HX_STACK_LINE(3492)
							Float tmp47 = _this->c1->r2x;		HX_STACK_VAR(tmp47,"tmp47");
							HX_STACK_LINE(3492)
							Float tmp48 = _this->b2->angvel;		HX_STACK_VAR(tmp48,"tmp48");
							HX_STACK_LINE(3492)
							Float tmp49 = (tmp47 * tmp48);		HX_STACK_VAR(tmp49,"tmp49");
							HX_STACK_LINE(3492)
							Float tmp50 = (tmp46 + tmp49);		HX_STACK_VAR(tmp50,"tmp50");
							HX_STACK_LINE(3492)
							Float tmp51 = _this->b1->vely;		HX_STACK_VAR(tmp51,"tmp51");
							HX_STACK_LINE(3492)
							Float tmp52 = _this->c1->r1x;		HX_STACK_VAR(tmp52,"tmp52");
							HX_STACK_LINE(3492)
							Float tmp53 = _this->b1->angvel;		HX_STACK_VAR(tmp53,"tmp53");
							HX_STACK_LINE(3492)
							Float tmp54 = (tmp52 * tmp53);		HX_STACK_VAR(tmp54,"tmp54");
							HX_STACK_LINE(3492)
							Float tmp55 = (tmp51 + tmp54);		HX_STACK_VAR(tmp55,"tmp55");
							HX_STACK_LINE(3492)
							Float tmp56 = (tmp50 - tmp55);		HX_STACK_VAR(tmp56,"tmp56");
							HX_STACK_LINE(3492)
							Float v1y = tmp56;		HX_STACK_VAR(v1y,"v1y");
							HX_STACK_LINE(3492)
							Float tmp57 = (v1y * _this->nx);		HX_STACK_VAR(tmp57,"tmp57");
							HX_STACK_LINE(3492)
							Float tmp58 = (v1x * _this->ny);		HX_STACK_VAR(tmp58,"tmp58");
							HX_STACK_LINE(3492)
							Float tmp59 = (tmp57 - tmp58);		HX_STACK_VAR(tmp59,"tmp59");
							HX_STACK_LINE(3492)
							Float tmp60 = _this->surfacex;		HX_STACK_VAR(tmp60,"tmp60");
							HX_STACK_LINE(3492)
							Float tmp61 = (tmp59 + tmp60);		HX_STACK_VAR(tmp61,"tmp61");
							HX_STACK_LINE(3492)
							Float tmp62 = _this->c1->tMass;		HX_STACK_VAR(tmp62,"tmp62");
							HX_STACK_LINE(3492)
							Float tmp63 = (tmp61 * tmp62);		HX_STACK_VAR(tmp63,"tmp63");
							HX_STACK_LINE(3492)
							j = tmp63;
							HX_STACK_LINE(3492)
							Float tmp64 = _this->c1->friction;		HX_STACK_VAR(tmp64,"tmp64");
							HX_STACK_LINE(3492)
							Float tmp65 = _this->c1->jnAcc;		HX_STACK_VAR(tmp65,"tmp65");
							HX_STACK_LINE(3492)
							Float tmp66 = (tmp64 * tmp65);		HX_STACK_VAR(tmp66,"tmp66");
							HX_STACK_LINE(3492)
							jMax = tmp66;
							HX_STACK_LINE(3492)
							Float tmp67 = _this->c1->jtAcc;		HX_STACK_VAR(tmp67,"tmp67");
							HX_STACK_LINE(3492)
							jOld = tmp67;
							HX_STACK_LINE(3492)
							Float tmp68 = (jOld - j);		HX_STACK_VAR(tmp68,"tmp68");
							HX_STACK_LINE(3492)
							cjAcc = tmp68;
							HX_STACK_LINE(3492)
							bool tmp69 = (cjAcc > jMax);		HX_STACK_VAR(tmp69,"tmp69");
							HX_STACK_LINE(3492)
							if ((tmp69)){
								HX_STACK_LINE(3492)
								cjAcc = jMax;
							}
							else{
								HX_STACK_LINE(3492)
								Float tmp70 = cjAcc;		HX_STACK_VAR(tmp70,"tmp70");
								HX_STACK_LINE(3492)
								Float tmp71 = jMax;		HX_STACK_VAR(tmp71,"tmp71");
								HX_STACK_LINE(3492)
								Float tmp72 = -(tmp71);		HX_STACK_VAR(tmp72,"tmp72");
								HX_STACK_LINE(3492)
								bool tmp73 = (tmp70 < tmp72);		HX_STACK_VAR(tmp73,"tmp73");
								HX_STACK_LINE(3492)
								if ((tmp73)){
									HX_STACK_LINE(3492)
									Float tmp74 = jMax;		HX_STACK_VAR(tmp74,"tmp74");
									HX_STACK_LINE(3492)
									Float tmp75 = -(tmp74);		HX_STACK_VAR(tmp75,"tmp75");
									HX_STACK_LINE(3492)
									cjAcc = tmp75;
								}
							}
							HX_STACK_LINE(3492)
							Float tmp70 = (cjAcc - jOld);		HX_STACK_VAR(tmp70,"tmp70");
							HX_STACK_LINE(3492)
							j = tmp70;
							HX_STACK_LINE(3492)
							_this->c1->jtAcc = cjAcc;
							HX_STACK_LINE(3492)
							Float tmp71 = _this->ny;		HX_STACK_VAR(tmp71,"tmp71");
							HX_STACK_LINE(3492)
							Float tmp72 = -(tmp71);		HX_STACK_VAR(tmp72,"tmp72");
							HX_STACK_LINE(3492)
							Float tmp73 = j;		HX_STACK_VAR(tmp73,"tmp73");
							HX_STACK_LINE(3492)
							Float tmp74 = (tmp72 * tmp73);		HX_STACK_VAR(tmp74,"tmp74");
							HX_STACK_LINE(3492)
							jx = tmp74;
							HX_STACK_LINE(3492)
							Float tmp75 = (_this->nx * j);		HX_STACK_VAR(tmp75,"tmp75");
							HX_STACK_LINE(3492)
							jy = tmp75;
							HX_STACK_LINE(3492)
							Float tmp76 = jx;		HX_STACK_VAR(tmp76,"tmp76");
							HX_STACK_LINE(3492)
							Float tmp77 = _this->b2->imass;		HX_STACK_VAR(tmp77,"tmp77");
							HX_STACK_LINE(3492)
							Float tmp78 = (tmp76 * tmp77);		HX_STACK_VAR(tmp78,"tmp78");
							HX_STACK_LINE(3492)
							hx::AddEq(_this->b2->velx,tmp78);
							HX_STACK_LINE(3492)
							Float tmp79 = jy;		HX_STACK_VAR(tmp79,"tmp79");
							HX_STACK_LINE(3492)
							Float tmp80 = _this->b2->imass;		HX_STACK_VAR(tmp80,"tmp80");
							HX_STACK_LINE(3492)
							Float tmp81 = (tmp79 * tmp80);		HX_STACK_VAR(tmp81,"tmp81");
							HX_STACK_LINE(3492)
							hx::AddEq(_this->b2->vely,tmp81);
							HX_STACK_LINE(3492)
							Float tmp82 = jx;		HX_STACK_VAR(tmp82,"tmp82");
							HX_STACK_LINE(3492)
							Float tmp83 = _this->b1->imass;		HX_STACK_VAR(tmp83,"tmp83");
							HX_STACK_LINE(3492)
							Float tmp84 = (tmp82 * tmp83);		HX_STACK_VAR(tmp84,"tmp84");
							HX_STACK_LINE(3492)
							hx::SubEq(_this->b1->velx,tmp84);
							HX_STACK_LINE(3492)
							Float tmp85 = jy;		HX_STACK_VAR(tmp85,"tmp85");
							HX_STACK_LINE(3492)
							Float tmp86 = _this->b1->imass;		HX_STACK_VAR(tmp86,"tmp86");
							HX_STACK_LINE(3492)
							Float tmp87 = (tmp85 * tmp86);		HX_STACK_VAR(tmp87,"tmp87");
							HX_STACK_LINE(3492)
							hx::SubEq(_this->b1->vely,tmp87);
							HX_STACK_LINE(3492)
							Float tmp88 = (_this->rt1b * j);		HX_STACK_VAR(tmp88,"tmp88");
							HX_STACK_LINE(3492)
							Float tmp89 = _this->b2->iinertia;		HX_STACK_VAR(tmp89,"tmp89");
							HX_STACK_LINE(3492)
							Float tmp90 = (tmp88 * tmp89);		HX_STACK_VAR(tmp90,"tmp90");
							HX_STACK_LINE(3492)
							hx::AddEq(_this->b2->angvel,tmp90);
							HX_STACK_LINE(3492)
							Float tmp91 = (_this->rt1a * j);		HX_STACK_VAR(tmp91,"tmp91");
							HX_STACK_LINE(3492)
							Float tmp92 = _this->b1->iinertia;		HX_STACK_VAR(tmp92,"tmp92");
							HX_STACK_LINE(3492)
							Float tmp93 = (tmp91 * tmp92);		HX_STACK_VAR(tmp93,"tmp93");
							HX_STACK_LINE(3492)
							hx::SubEq(_this->b1->angvel,tmp93);
							HX_STACK_LINE(3492)
							bool tmp94 = _this->hc2;		HX_STACK_VAR(tmp94,"tmp94");
							HX_STACK_LINE(3492)
							if ((tmp94)){
								HX_STACK_LINE(3492)
								Float tmp95 = _this->k2x;		HX_STACK_VAR(tmp95,"tmp95");
								HX_STACK_LINE(3492)
								Float tmp96 = _this->b2->velx;		HX_STACK_VAR(tmp96,"tmp96");
								HX_STACK_LINE(3492)
								Float tmp97 = (tmp95 + tmp96);		HX_STACK_VAR(tmp97,"tmp97");
								HX_STACK_LINE(3492)
								Float tmp98 = _this->c2->r2y;		HX_STACK_VAR(tmp98,"tmp98");
								HX_STACK_LINE(3492)
								Float tmp99 = _this->b2->angvel;		HX_STACK_VAR(tmp99,"tmp99");
								HX_STACK_LINE(3492)
								Float tmp100 = (tmp98 * tmp99);		HX_STACK_VAR(tmp100,"tmp100");
								HX_STACK_LINE(3492)
								Float tmp101 = (tmp97 - tmp100);		HX_STACK_VAR(tmp101,"tmp101");
								HX_STACK_LINE(3492)
								Float tmp102 = _this->b1->velx;		HX_STACK_VAR(tmp102,"tmp102");
								HX_STACK_LINE(3492)
								Float tmp103 = _this->c2->r1y;		HX_STACK_VAR(tmp103,"tmp103");
								HX_STACK_LINE(3492)
								Float tmp104 = _this->b1->angvel;		HX_STACK_VAR(tmp104,"tmp104");
								HX_STACK_LINE(3492)
								Float tmp105 = (tmp103 * tmp104);		HX_STACK_VAR(tmp105,"tmp105");
								HX_STACK_LINE(3492)
								Float tmp106 = (tmp102 - tmp105);		HX_STACK_VAR(tmp106,"tmp106");
								HX_STACK_LINE(3492)
								Float tmp107 = (tmp101 - tmp106);		HX_STACK_VAR(tmp107,"tmp107");
								HX_STACK_LINE(3492)
								Float v2x = tmp107;		HX_STACK_VAR(v2x,"v2x");
								HX_STACK_LINE(3492)
								Float tmp108 = _this->k2y;		HX_STACK_VAR(tmp108,"tmp108");
								HX_STACK_LINE(3492)
								Float tmp109 = _this->b2->vely;		HX_STACK_VAR(tmp109,"tmp109");
								HX_STACK_LINE(3492)
								Float tmp110 = (tmp108 + tmp109);		HX_STACK_VAR(tmp110,"tmp110");
								HX_STACK_LINE(3492)
								Float tmp111 = _this->c2->r2x;		HX_STACK_VAR(tmp111,"tmp111");
								HX_STACK_LINE(3492)
								Float tmp112 = _this->b2->angvel;		HX_STACK_VAR(tmp112,"tmp112");
								HX_STACK_LINE(3492)
								Float tmp113 = (tmp111 * tmp112);		HX_STACK_VAR(tmp113,"tmp113");
								HX_STACK_LINE(3492)
								Float tmp114 = (tmp110 + tmp113);		HX_STACK_VAR(tmp114,"tmp114");
								HX_STACK_LINE(3492)
								Float tmp115 = _this->b1->vely;		HX_STACK_VAR(tmp115,"tmp115");
								HX_STACK_LINE(3492)
								Float tmp116 = _this->c2->r1x;		HX_STACK_VAR(tmp116,"tmp116");
								HX_STACK_LINE(3492)
								Float tmp117 = _this->b1->angvel;		HX_STACK_VAR(tmp117,"tmp117");
								HX_STACK_LINE(3492)
								Float tmp118 = (tmp116 * tmp117);		HX_STACK_VAR(tmp118,"tmp118");
								HX_STACK_LINE(3492)
								Float tmp119 = (tmp115 + tmp118);		HX_STACK_VAR(tmp119,"tmp119");
								HX_STACK_LINE(3492)
								Float tmp120 = (tmp114 - tmp119);		HX_STACK_VAR(tmp120,"tmp120");
								HX_STACK_LINE(3492)
								Float v2y = tmp120;		HX_STACK_VAR(v2y,"v2y");
								HX_STACK_LINE(3492)
								Float tmp121 = (v2y * _this->nx);		HX_STACK_VAR(tmp121,"tmp121");
								HX_STACK_LINE(3492)
								Float tmp122 = (v2x * _this->ny);		HX_STACK_VAR(tmp122,"tmp122");
								HX_STACK_LINE(3492)
								Float tmp123 = (tmp121 - tmp122);		HX_STACK_VAR(tmp123,"tmp123");
								HX_STACK_LINE(3492)
								Float tmp124 = _this->surfacex;		HX_STACK_VAR(tmp124,"tmp124");
								HX_STACK_LINE(3492)
								Float tmp125 = (tmp123 + tmp124);		HX_STACK_VAR(tmp125,"tmp125");
								HX_STACK_LINE(3492)
								Float tmp126 = _this->c2->tMass;		HX_STACK_VAR(tmp126,"tmp126");
								HX_STACK_LINE(3492)
								Float tmp127 = (tmp125 * tmp126);		HX_STACK_VAR(tmp127,"tmp127");
								HX_STACK_LINE(3492)
								j = tmp127;
								HX_STACK_LINE(3492)
								Float tmp128 = _this->c2->friction;		HX_STACK_VAR(tmp128,"tmp128");
								HX_STACK_LINE(3492)
								Float tmp129 = _this->c2->jnAcc;		HX_STACK_VAR(tmp129,"tmp129");
								HX_STACK_LINE(3492)
								Float tmp130 = (tmp128 * tmp129);		HX_STACK_VAR(tmp130,"tmp130");
								HX_STACK_LINE(3492)
								jMax = tmp130;
								HX_STACK_LINE(3492)
								Float tmp131 = _this->c2->jtAcc;		HX_STACK_VAR(tmp131,"tmp131");
								HX_STACK_LINE(3492)
								jOld = tmp131;
								HX_STACK_LINE(3492)
								Float tmp132 = (jOld - j);		HX_STACK_VAR(tmp132,"tmp132");
								HX_STACK_LINE(3492)
								cjAcc = tmp132;
								HX_STACK_LINE(3492)
								bool tmp133 = (cjAcc > jMax);		HX_STACK_VAR(tmp133,"tmp133");
								HX_STACK_LINE(3492)
								if ((tmp133)){
									HX_STACK_LINE(3492)
									cjAcc = jMax;
								}
								else{
									HX_STACK_LINE(3492)
									Float tmp134 = cjAcc;		HX_STACK_VAR(tmp134,"tmp134");
									HX_STACK_LINE(3492)
									Float tmp135 = jMax;		HX_STACK_VAR(tmp135,"tmp135");
									HX_STACK_LINE(3492)
									Float tmp136 = -(tmp135);		HX_STACK_VAR(tmp136,"tmp136");
									HX_STACK_LINE(3492)
									bool tmp137 = (tmp134 < tmp136);		HX_STACK_VAR(tmp137,"tmp137");
									HX_STACK_LINE(3492)
									if ((tmp137)){
										HX_STACK_LINE(3492)
										Float tmp138 = jMax;		HX_STACK_VAR(tmp138,"tmp138");
										HX_STACK_LINE(3492)
										Float tmp139 = -(tmp138);		HX_STACK_VAR(tmp139,"tmp139");
										HX_STACK_LINE(3492)
										cjAcc = tmp139;
									}
								}
								HX_STACK_LINE(3492)
								Float tmp134 = (cjAcc - jOld);		HX_STACK_VAR(tmp134,"tmp134");
								HX_STACK_LINE(3492)
								j = tmp134;
								HX_STACK_LINE(3492)
								_this->c2->jtAcc = cjAcc;
								HX_STACK_LINE(3492)
								Float tmp135 = _this->ny;		HX_STACK_VAR(tmp135,"tmp135");
								HX_STACK_LINE(3492)
								Float tmp136 = -(tmp135);		HX_STACK_VAR(tmp136,"tmp136");
								HX_STACK_LINE(3492)
								Float tmp137 = j;		HX_STACK_VAR(tmp137,"tmp137");
								HX_STACK_LINE(3492)
								Float tmp138 = (tmp136 * tmp137);		HX_STACK_VAR(tmp138,"tmp138");
								HX_STACK_LINE(3492)
								jx = tmp138;
								HX_STACK_LINE(3492)
								Float tmp139 = (_this->nx * j);		HX_STACK_VAR(tmp139,"tmp139");
								HX_STACK_LINE(3492)
								jy = tmp139;
								HX_STACK_LINE(3492)
								Float tmp140 = jx;		HX_STACK_VAR(tmp140,"tmp140");
								HX_STACK_LINE(3492)
								Float tmp141 = _this->b2->imass;		HX_STACK_VAR(tmp141,"tmp141");
								HX_STACK_LINE(3492)
								Float tmp142 = (tmp140 * tmp141);		HX_STACK_VAR(tmp142,"tmp142");
								HX_STACK_LINE(3492)
								hx::AddEq(_this->b2->velx,tmp142);
								HX_STACK_LINE(3492)
								Float tmp143 = jy;		HX_STACK_VAR(tmp143,"tmp143");
								HX_STACK_LINE(3492)
								Float tmp144 = _this->b2->imass;		HX_STACK_VAR(tmp144,"tmp144");
								HX_STACK_LINE(3492)
								Float tmp145 = (tmp143 * tmp144);		HX_STACK_VAR(tmp145,"tmp145");
								HX_STACK_LINE(3492)
								hx::AddEq(_this->b2->vely,tmp145);
								HX_STACK_LINE(3492)
								Float tmp146 = jx;		HX_STACK_VAR(tmp146,"tmp146");
								HX_STACK_LINE(3492)
								Float tmp147 = _this->b1->imass;		HX_STACK_VAR(tmp147,"tmp147");
								HX_STACK_LINE(3492)
								Float tmp148 = (tmp146 * tmp147);		HX_STACK_VAR(tmp148,"tmp148");
								HX_STACK_LINE(3492)
								hx::SubEq(_this->b1->velx,tmp148);
								HX_STACK_LINE(3492)
								Float tmp149 = jy;		HX_STACK_VAR(tmp149,"tmp149");
								HX_STACK_LINE(3492)
								Float tmp150 = _this->b1->imass;		HX_STACK_VAR(tmp150,"tmp150");
								HX_STACK_LINE(3492)
								Float tmp151 = (tmp149 * tmp150);		HX_STACK_VAR(tmp151,"tmp151");
								HX_STACK_LINE(3492)
								hx::SubEq(_this->b1->vely,tmp151);
								HX_STACK_LINE(3492)
								Float tmp152 = (_this->rt2b * j);		HX_STACK_VAR(tmp152,"tmp152");
								HX_STACK_LINE(3492)
								Float tmp153 = _this->b2->iinertia;		HX_STACK_VAR(tmp153,"tmp153");
								HX_STACK_LINE(3492)
								Float tmp154 = (tmp152 * tmp153);		HX_STACK_VAR(tmp154,"tmp154");
								HX_STACK_LINE(3492)
								hx::AddEq(_this->b2->angvel,tmp154);
								HX_STACK_LINE(3492)
								Float tmp155 = (_this->rt2a * j);		HX_STACK_VAR(tmp155,"tmp155");
								HX_STACK_LINE(3492)
								Float tmp156 = _this->b1->iinertia;		HX_STACK_VAR(tmp156,"tmp156");
								HX_STACK_LINE(3492)
								Float tmp157 = (tmp155 * tmp156);		HX_STACK_VAR(tmp157,"tmp157");
								HX_STACK_LINE(3492)
								hx::SubEq(_this->b1->angvel,tmp157);
								HX_STACK_LINE(3492)
								Float tmp158 = _this->k1x;		HX_STACK_VAR(tmp158,"tmp158");
								HX_STACK_LINE(3492)
								Float tmp159 = _this->b2->velx;		HX_STACK_VAR(tmp159,"tmp159");
								HX_STACK_LINE(3492)
								Float tmp160 = (tmp158 + tmp159);		HX_STACK_VAR(tmp160,"tmp160");
								HX_STACK_LINE(3492)
								Float tmp161 = _this->c1->r2y;		HX_STACK_VAR(tmp161,"tmp161");
								HX_STACK_LINE(3492)
								Float tmp162 = _this->b2->angvel;		HX_STACK_VAR(tmp162,"tmp162");
								HX_STACK_LINE(3492)
								Float tmp163 = (tmp161 * tmp162);		HX_STACK_VAR(tmp163,"tmp163");
								HX_STACK_LINE(3492)
								Float tmp164 = (tmp160 - tmp163);		HX_STACK_VAR(tmp164,"tmp164");
								HX_STACK_LINE(3492)
								Float tmp165 = _this->b1->velx;		HX_STACK_VAR(tmp165,"tmp165");
								HX_STACK_LINE(3492)
								Float tmp166 = _this->c1->r1y;		HX_STACK_VAR(tmp166,"tmp166");
								HX_STACK_LINE(3492)
								Float tmp167 = _this->b1->angvel;		HX_STACK_VAR(tmp167,"tmp167");
								HX_STACK_LINE(3492)
								Float tmp168 = (tmp166 * tmp167);		HX_STACK_VAR(tmp168,"tmp168");
								HX_STACK_LINE(3492)
								Float tmp169 = (tmp165 - tmp168);		HX_STACK_VAR(tmp169,"tmp169");
								HX_STACK_LINE(3492)
								Float tmp170 = (tmp164 - tmp169);		HX_STACK_VAR(tmp170,"tmp170");
								HX_STACK_LINE(3492)
								v1x = tmp170;
								HX_STACK_LINE(3492)
								Float tmp171 = _this->k1y;		HX_STACK_VAR(tmp171,"tmp171");
								HX_STACK_LINE(3492)
								Float tmp172 = _this->b2->vely;		HX_STACK_VAR(tmp172,"tmp172");
								HX_STACK_LINE(3492)
								Float tmp173 = (tmp171 + tmp172);		HX_STACK_VAR(tmp173,"tmp173");
								HX_STACK_LINE(3492)
								Float tmp174 = _this->c1->r2x;		HX_STACK_VAR(tmp174,"tmp174");
								HX_STACK_LINE(3492)
								Float tmp175 = _this->b2->angvel;		HX_STACK_VAR(tmp175,"tmp175");
								HX_STACK_LINE(3492)
								Float tmp176 = (tmp174 * tmp175);		HX_STACK_VAR(tmp176,"tmp176");
								HX_STACK_LINE(3492)
								Float tmp177 = (tmp173 + tmp176);		HX_STACK_VAR(tmp177,"tmp177");
								HX_STACK_LINE(3492)
								Float tmp178 = _this->b1->vely;		HX_STACK_VAR(tmp178,"tmp178");
								HX_STACK_LINE(3492)
								Float tmp179 = _this->c1->r1x;		HX_STACK_VAR(tmp179,"tmp179");
								HX_STACK_LINE(3492)
								Float tmp180 = _this->b1->angvel;		HX_STACK_VAR(tmp180,"tmp180");
								HX_STACK_LINE(3492)
								Float tmp181 = (tmp179 * tmp180);		HX_STACK_VAR(tmp181,"tmp181");
								HX_STACK_LINE(3492)
								Float tmp182 = (tmp178 + tmp181);		HX_STACK_VAR(tmp182,"tmp182");
								HX_STACK_LINE(3492)
								Float tmp183 = (tmp177 - tmp182);		HX_STACK_VAR(tmp183,"tmp183");
								HX_STACK_LINE(3492)
								v1y = tmp183;
								HX_STACK_LINE(3492)
								Float tmp184 = _this->k2x;		HX_STACK_VAR(tmp184,"tmp184");
								HX_STACK_LINE(3492)
								Float tmp185 = _this->b2->velx;		HX_STACK_VAR(tmp185,"tmp185");
								HX_STACK_LINE(3492)
								Float tmp186 = (tmp184 + tmp185);		HX_STACK_VAR(tmp186,"tmp186");
								HX_STACK_LINE(3492)
								Float tmp187 = _this->c2->r2y;		HX_STACK_VAR(tmp187,"tmp187");
								HX_STACK_LINE(3492)
								Float tmp188 = _this->b2->angvel;		HX_STACK_VAR(tmp188,"tmp188");
								HX_STACK_LINE(3492)
								Float tmp189 = (tmp187 * tmp188);		HX_STACK_VAR(tmp189,"tmp189");
								HX_STACK_LINE(3492)
								Float tmp190 = (tmp186 - tmp189);		HX_STACK_VAR(tmp190,"tmp190");
								HX_STACK_LINE(3492)
								Float tmp191 = _this->b1->velx;		HX_STACK_VAR(tmp191,"tmp191");
								HX_STACK_LINE(3492)
								Float tmp192 = _this->c2->r1y;		HX_STACK_VAR(tmp192,"tmp192");
								HX_STACK_LINE(3492)
								Float tmp193 = _this->b1->angvel;		HX_STACK_VAR(tmp193,"tmp193");
								HX_STACK_LINE(3492)
								Float tmp194 = (tmp192 * tmp193);		HX_STACK_VAR(tmp194,"tmp194");
								HX_STACK_LINE(3492)
								Float tmp195 = (tmp191 - tmp194);		HX_STACK_VAR(tmp195,"tmp195");
								HX_STACK_LINE(3492)
								Float tmp196 = (tmp190 - tmp195);		HX_STACK_VAR(tmp196,"tmp196");
								HX_STACK_LINE(3492)
								v2x = tmp196;
								HX_STACK_LINE(3492)
								Float tmp197 = _this->k2y;		HX_STACK_VAR(tmp197,"tmp197");
								HX_STACK_LINE(3492)
								Float tmp198 = _this->b2->vely;		HX_STACK_VAR(tmp198,"tmp198");
								HX_STACK_LINE(3492)
								Float tmp199 = (tmp197 + tmp198);		HX_STACK_VAR(tmp199,"tmp199");
								HX_STACK_LINE(3492)
								Float tmp200 = _this->c2->r2x;		HX_STACK_VAR(tmp200,"tmp200");
								HX_STACK_LINE(3492)
								Float tmp201 = _this->b2->angvel;		HX_STACK_VAR(tmp201,"tmp201");
								HX_STACK_LINE(3492)
								Float tmp202 = (tmp200 * tmp201);		HX_STACK_VAR(tmp202,"tmp202");
								HX_STACK_LINE(3492)
								Float tmp203 = (tmp199 + tmp202);		HX_STACK_VAR(tmp203,"tmp203");
								HX_STACK_LINE(3492)
								Float tmp204 = _this->b1->vely;		HX_STACK_VAR(tmp204,"tmp204");
								HX_STACK_LINE(3492)
								Float tmp205 = _this->c2->r1x;		HX_STACK_VAR(tmp205,"tmp205");
								HX_STACK_LINE(3492)
								Float tmp206 = _this->b1->angvel;		HX_STACK_VAR(tmp206,"tmp206");
								HX_STACK_LINE(3492)
								Float tmp207 = (tmp205 * tmp206);		HX_STACK_VAR(tmp207,"tmp207");
								HX_STACK_LINE(3492)
								Float tmp208 = (tmp204 + tmp207);		HX_STACK_VAR(tmp208,"tmp208");
								HX_STACK_LINE(3492)
								Float tmp209 = (tmp203 - tmp208);		HX_STACK_VAR(tmp209,"tmp209");
								HX_STACK_LINE(3492)
								v2y = tmp209;
								HX_STACK_LINE(3492)
								Float tmp210 = _this->c1->jnAcc;		HX_STACK_VAR(tmp210,"tmp210");
								HX_STACK_LINE(3492)
								Float ax = tmp210;		HX_STACK_VAR(ax,"ax");
								HX_STACK_LINE(3492)
								Float tmp211 = _this->c2->jnAcc;		HX_STACK_VAR(tmp211,"tmp211");
								HX_STACK_LINE(3492)
								Float ay = tmp211;		HX_STACK_VAR(ay,"ay");
								HX_STACK_LINE(3492)
								Float tmp212 = (v1x * _this->nx);		HX_STACK_VAR(tmp212,"tmp212");
								HX_STACK_LINE(3492)
								Float tmp213 = (v1y * _this->ny);		HX_STACK_VAR(tmp213,"tmp213");
								HX_STACK_LINE(3492)
								Float tmp214 = (tmp212 + tmp213);		HX_STACK_VAR(tmp214,"tmp214");
								HX_STACK_LINE(3492)
								Float tmp215 = _this->surfacey;		HX_STACK_VAR(tmp215,"tmp215");
								HX_STACK_LINE(3492)
								Float tmp216 = (tmp214 + tmp215);		HX_STACK_VAR(tmp216,"tmp216");
								HX_STACK_LINE(3492)
								Float tmp217 = _this->c1->bounce;		HX_STACK_VAR(tmp217,"tmp217");
								HX_STACK_LINE(3492)
								Float tmp218 = (tmp216 + tmp217);		HX_STACK_VAR(tmp218,"tmp218");
								HX_STACK_LINE(3492)
								Float tmp219 = (_this->Ka * ax);		HX_STACK_VAR(tmp219,"tmp219");
								HX_STACK_LINE(3492)
								Float tmp220 = (_this->Kb * ay);		HX_STACK_VAR(tmp220,"tmp220");
								HX_STACK_LINE(3492)
								Float tmp221 = (tmp219 + tmp220);		HX_STACK_VAR(tmp221,"tmp221");
								HX_STACK_LINE(3492)
								Float tmp222 = (tmp218 - tmp221);		HX_STACK_VAR(tmp222,"tmp222");
								HX_STACK_LINE(3492)
								Float jnx = tmp222;		HX_STACK_VAR(jnx,"jnx");
								HX_STACK_LINE(3492)
								Float tmp223 = (v2x * _this->nx);		HX_STACK_VAR(tmp223,"tmp223");
								HX_STACK_LINE(3492)
								Float tmp224 = (v2y * _this->ny);		HX_STACK_VAR(tmp224,"tmp224");
								HX_STACK_LINE(3492)
								Float tmp225 = (tmp223 + tmp224);		HX_STACK_VAR(tmp225,"tmp225");
								HX_STACK_LINE(3492)
								Float tmp226 = _this->surfacey;		HX_STACK_VAR(tmp226,"tmp226");
								HX_STACK_LINE(3492)
								Float tmp227 = (tmp225 + tmp226);		HX_STACK_VAR(tmp227,"tmp227");
								HX_STACK_LINE(3492)
								Float tmp228 = _this->c2->bounce;		HX_STACK_VAR(tmp228,"tmp228");
								HX_STACK_LINE(3492)
								Float tmp229 = (tmp227 + tmp228);		HX_STACK_VAR(tmp229,"tmp229");
								HX_STACK_LINE(3492)
								Float tmp230 = (_this->Kb * ax);		HX_STACK_VAR(tmp230,"tmp230");
								HX_STACK_LINE(3492)
								Float tmp231 = (_this->Kc * ay);		HX_STACK_VAR(tmp231,"tmp231");
								HX_STACK_LINE(3492)
								Float tmp232 = (tmp230 + tmp231);		HX_STACK_VAR(tmp232,"tmp232");
								HX_STACK_LINE(3492)
								Float tmp233 = (tmp229 - tmp232);		HX_STACK_VAR(tmp233,"tmp233");
								HX_STACK_LINE(3492)
								Float jny = tmp233;		HX_STACK_VAR(jny,"jny");
								HX_STACK_LINE(3492)
								Float tmp234 = (_this->kMassa * jnx);		HX_STACK_VAR(tmp234,"tmp234");
								HX_STACK_LINE(3492)
								Float tmp235 = (_this->kMassb * jny);		HX_STACK_VAR(tmp235,"tmp235");
								HX_STACK_LINE(3492)
								Float tmp236 = (tmp234 + tmp235);		HX_STACK_VAR(tmp236,"tmp236");
								HX_STACK_LINE(3492)
								Float tmp237 = -(tmp236);		HX_STACK_VAR(tmp237,"tmp237");
								HX_STACK_LINE(3492)
								Float xx = tmp237;		HX_STACK_VAR(xx,"xx");
								HX_STACK_LINE(3492)
								Float tmp238 = (_this->kMassb * jnx);		HX_STACK_VAR(tmp238,"tmp238");
								HX_STACK_LINE(3492)
								Float tmp239 = (_this->kMassc * jny);		HX_STACK_VAR(tmp239,"tmp239");
								HX_STACK_LINE(3492)
								Float tmp240 = (tmp238 + tmp239);		HX_STACK_VAR(tmp240,"tmp240");
								HX_STACK_LINE(3492)
								Float tmp241 = -(tmp240);		HX_STACK_VAR(tmp241,"tmp241");
								HX_STACK_LINE(3492)
								Float xy = tmp241;		HX_STACK_VAR(xy,"xy");
								HX_STACK_LINE(3492)
								bool tmp242 = (xx >= (int)0);		HX_STACK_VAR(tmp242,"tmp242");
								HX_STACK_LINE(3492)
								bool tmp243;		HX_STACK_VAR(tmp243,"tmp243");
								HX_STACK_LINE(3492)
								if ((tmp242)){
									HX_STACK_LINE(3492)
									tmp243 = (xy >= (int)0);
								}
								else{
									HX_STACK_LINE(3492)
									tmp243 = false;
								}
								HX_STACK_LINE(3492)
								if ((tmp243)){
									HX_STACK_LINE(3492)
									{
										HX_STACK_LINE(3492)
										Float tmp244 = (xx - ax);		HX_STACK_VAR(tmp244,"tmp244");
										HX_STACK_LINE(3492)
										jnx = tmp244;
										HX_STACK_LINE(3492)
										Float tmp245 = (xy - ay);		HX_STACK_VAR(tmp245,"tmp245");
										HX_STACK_LINE(3492)
										jny = tmp245;
									}
									HX_STACK_LINE(3492)
									_this->c1->jnAcc = xx;
									HX_STACK_LINE(3492)
									_this->c2->jnAcc = xy;
								}
								else{
									HX_STACK_LINE(3492)
									Float tmp244 = _this->c1->nMass;		HX_STACK_VAR(tmp244,"tmp244");
									HX_STACK_LINE(3492)
									Float tmp245 = -(tmp244);		HX_STACK_VAR(tmp245,"tmp245");
									HX_STACK_LINE(3492)
									Float tmp246 = jnx;		HX_STACK_VAR(tmp246,"tmp246");
									HX_STACK_LINE(3492)
									Float tmp247 = (tmp245 * tmp246);		HX_STACK_VAR(tmp247,"tmp247");
									HX_STACK_LINE(3492)
									xx = tmp247;
									HX_STACK_LINE(3492)
									bool tmp248 = (xx >= (int)0);		HX_STACK_VAR(tmp248,"tmp248");
									HX_STACK_LINE(3492)
									bool tmp249;		HX_STACK_VAR(tmp249,"tmp249");
									HX_STACK_LINE(3492)
									if ((tmp248)){
										HX_STACK_LINE(3492)
										Float tmp250 = (_this->Kb * xx);		HX_STACK_VAR(tmp250,"tmp250");
										HX_STACK_LINE(3492)
										Float tmp251 = tmp250;		HX_STACK_VAR(tmp251,"tmp251");
										HX_STACK_LINE(3492)
										Float tmp252 = jny;		HX_STACK_VAR(tmp252,"tmp252");
										HX_STACK_LINE(3492)
										Float tmp253 = (tmp251 + tmp252);		HX_STACK_VAR(tmp253,"tmp253");
										HX_STACK_LINE(3492)
										Float tmp254 = tmp253;		HX_STACK_VAR(tmp254,"tmp254");
										HX_STACK_LINE(3492)
										tmp249 = (tmp254 >= (int)0);
									}
									else{
										HX_STACK_LINE(3492)
										tmp249 = false;
									}
									HX_STACK_LINE(3492)
									if ((tmp249)){
										HX_STACK_LINE(3492)
										Float tmp250 = (xx - ax);		HX_STACK_VAR(tmp250,"tmp250");
										HX_STACK_LINE(3492)
										jnx = tmp250;
										HX_STACK_LINE(3492)
										Float tmp251 = ay;		HX_STACK_VAR(tmp251,"tmp251");
										HX_STACK_LINE(3492)
										Float tmp252 = -(tmp251);		HX_STACK_VAR(tmp252,"tmp252");
										HX_STACK_LINE(3492)
										jny = tmp252;
										HX_STACK_LINE(3492)
										_this->c1->jnAcc = xx;
										HX_STACK_LINE(3492)
										_this->c2->jnAcc = (int)0;
									}
									else{
										HX_STACK_LINE(3492)
										Float tmp250 = _this->c2->nMass;		HX_STACK_VAR(tmp250,"tmp250");
										HX_STACK_LINE(3492)
										Float tmp251 = -(tmp250);		HX_STACK_VAR(tmp251,"tmp251");
										HX_STACK_LINE(3492)
										Float tmp252 = jny;		HX_STACK_VAR(tmp252,"tmp252");
										HX_STACK_LINE(3492)
										Float tmp253 = (tmp251 * tmp252);		HX_STACK_VAR(tmp253,"tmp253");
										HX_STACK_LINE(3492)
										xy = tmp253;
										HX_STACK_LINE(3492)
										bool tmp254 = (xy >= (int)0);		HX_STACK_VAR(tmp254,"tmp254");
										HX_STACK_LINE(3492)
										bool tmp255;		HX_STACK_VAR(tmp255,"tmp255");
										HX_STACK_LINE(3492)
										if ((tmp254)){
											HX_STACK_LINE(3492)
											Float tmp256 = (_this->Kb * xy);		HX_STACK_VAR(tmp256,"tmp256");
											HX_STACK_LINE(3492)
											Float tmp257 = tmp256;		HX_STACK_VAR(tmp257,"tmp257");
											HX_STACK_LINE(3492)
											Float tmp258 = jnx;		HX_STACK_VAR(tmp258,"tmp258");
											HX_STACK_LINE(3492)
											Float tmp259 = (tmp257 + tmp258);		HX_STACK_VAR(tmp259,"tmp259");
											HX_STACK_LINE(3492)
											Float tmp260 = tmp259;		HX_STACK_VAR(tmp260,"tmp260");
											HX_STACK_LINE(3492)
											tmp255 = (tmp260 >= (int)0);
										}
										else{
											HX_STACK_LINE(3492)
											tmp255 = false;
										}
										HX_STACK_LINE(3492)
										if ((tmp255)){
											HX_STACK_LINE(3492)
											Float tmp256 = ax;		HX_STACK_VAR(tmp256,"tmp256");
											HX_STACK_LINE(3492)
											Float tmp257 = -(tmp256);		HX_STACK_VAR(tmp257,"tmp257");
											HX_STACK_LINE(3492)
											jnx = tmp257;
											HX_STACK_LINE(3492)
											Float tmp258 = (xy - ay);		HX_STACK_VAR(tmp258,"tmp258");
											HX_STACK_LINE(3492)
											jny = tmp258;
											HX_STACK_LINE(3492)
											_this->c1->jnAcc = (int)0;
											HX_STACK_LINE(3492)
											_this->c2->jnAcc = xy;
										}
										else{
											HX_STACK_LINE(3492)
											bool tmp256 = (jnx >= (int)0);		HX_STACK_VAR(tmp256,"tmp256");
											HX_STACK_LINE(3492)
											bool tmp257;		HX_STACK_VAR(tmp257,"tmp257");
											HX_STACK_LINE(3492)
											if ((tmp256)){
												HX_STACK_LINE(3492)
												tmp257 = (jny >= (int)0);
											}
											else{
												HX_STACK_LINE(3492)
												tmp257 = false;
											}
											HX_STACK_LINE(3492)
											if ((tmp257)){
												HX_STACK_LINE(3492)
												Float tmp258 = ax;		HX_STACK_VAR(tmp258,"tmp258");
												HX_STACK_LINE(3492)
												Float tmp259 = -(tmp258);		HX_STACK_VAR(tmp259,"tmp259");
												HX_STACK_LINE(3492)
												jnx = tmp259;
												HX_STACK_LINE(3492)
												Float tmp260 = ay;		HX_STACK_VAR(tmp260,"tmp260");
												HX_STACK_LINE(3492)
												Float tmp261 = -(tmp260);		HX_STACK_VAR(tmp261,"tmp261");
												HX_STACK_LINE(3492)
												jny = tmp261;
												HX_STACK_LINE(3492)
												Float tmp262 = _this->c2->jnAcc = (int)0;		HX_STACK_VAR(tmp262,"tmp262");
												HX_STACK_LINE(3492)
												_this->c1->jnAcc = tmp262;
											}
											else{
												HX_STACK_LINE(3492)
												jnx = (int)0;
												HX_STACK_LINE(3492)
												jny = (int)0;
											}
										}
									}
								}
								HX_STACK_LINE(3492)
								Float tmp244 = (jnx + jny);		HX_STACK_VAR(tmp244,"tmp244");
								HX_STACK_LINE(3492)
								j = tmp244;
								HX_STACK_LINE(3492)
								Float tmp245 = (_this->nx * j);		HX_STACK_VAR(tmp245,"tmp245");
								HX_STACK_LINE(3492)
								jx = tmp245;
								HX_STACK_LINE(3492)
								Float tmp246 = (_this->ny * j);		HX_STACK_VAR(tmp246,"tmp246");
								HX_STACK_LINE(3492)
								jy = tmp246;
								HX_STACK_LINE(3492)
								Float tmp247 = jx;		HX_STACK_VAR(tmp247,"tmp247");
								HX_STACK_LINE(3492)
								Float tmp248 = _this->b2->imass;		HX_STACK_VAR(tmp248,"tmp248");
								HX_STACK_LINE(3492)
								Float tmp249 = (tmp247 * tmp248);		HX_STACK_VAR(tmp249,"tmp249");
								HX_STACK_LINE(3492)
								hx::AddEq(_this->b2->velx,tmp249);
								HX_STACK_LINE(3492)
								Float tmp250 = jy;		HX_STACK_VAR(tmp250,"tmp250");
								HX_STACK_LINE(3492)
								Float tmp251 = _this->b2->imass;		HX_STACK_VAR(tmp251,"tmp251");
								HX_STACK_LINE(3492)
								Float tmp252 = (tmp250 * tmp251);		HX_STACK_VAR(tmp252,"tmp252");
								HX_STACK_LINE(3492)
								hx::AddEq(_this->b2->vely,tmp252);
								HX_STACK_LINE(3492)
								Float tmp253 = jx;		HX_STACK_VAR(tmp253,"tmp253");
								HX_STACK_LINE(3492)
								Float tmp254 = _this->b1->imass;		HX_STACK_VAR(tmp254,"tmp254");
								HX_STACK_LINE(3492)
								Float tmp255 = (tmp253 * tmp254);		HX_STACK_VAR(tmp255,"tmp255");
								HX_STACK_LINE(3492)
								hx::SubEq(_this->b1->velx,tmp255);
								HX_STACK_LINE(3492)
								Float tmp256 = jy;		HX_STACK_VAR(tmp256,"tmp256");
								HX_STACK_LINE(3492)
								Float tmp257 = _this->b1->imass;		HX_STACK_VAR(tmp257,"tmp257");
								HX_STACK_LINE(3492)
								Float tmp258 = (tmp256 * tmp257);		HX_STACK_VAR(tmp258,"tmp258");
								HX_STACK_LINE(3492)
								hx::SubEq(_this->b1->vely,tmp258);
								HX_STACK_LINE(3492)
								Float tmp259 = (_this->rn1b * jnx);		HX_STACK_VAR(tmp259,"tmp259");
								HX_STACK_LINE(3492)
								Float tmp260 = (_this->rn2b * jny);		HX_STACK_VAR(tmp260,"tmp260");
								HX_STACK_LINE(3492)
								Float tmp261 = (tmp259 + tmp260);		HX_STACK_VAR(tmp261,"tmp261");
								HX_STACK_LINE(3492)
								Float tmp262 = _this->b2->iinertia;		HX_STACK_VAR(tmp262,"tmp262");
								HX_STACK_LINE(3492)
								Float tmp263 = (tmp261 * tmp262);		HX_STACK_VAR(tmp263,"tmp263");
								HX_STACK_LINE(3492)
								hx::AddEq(_this->b2->angvel,tmp263);
								HX_STACK_LINE(3492)
								Float tmp264 = (_this->rn1a * jnx);		HX_STACK_VAR(tmp264,"tmp264");
								HX_STACK_LINE(3492)
								Float tmp265 = (_this->rn2a * jny);		HX_STACK_VAR(tmp265,"tmp265");
								HX_STACK_LINE(3492)
								Float tmp266 = (tmp264 + tmp265);		HX_STACK_VAR(tmp266,"tmp266");
								HX_STACK_LINE(3492)
								Float tmp267 = _this->b1->iinertia;		HX_STACK_VAR(tmp267,"tmp267");
								HX_STACK_LINE(3492)
								Float tmp268 = (tmp266 * tmp267);		HX_STACK_VAR(tmp268,"tmp268");
								HX_STACK_LINE(3492)
								hx::SubEq(_this->b1->angvel,tmp268);
							}
							else{
								HX_STACK_LINE(3492)
								bool tmp95 = (_this->radius != ((Float)0.0));		HX_STACK_VAR(tmp95,"tmp95");
								HX_STACK_LINE(3492)
								if ((tmp95)){
									HX_STACK_LINE(3492)
									Float tmp96 = _this->b2->angvel;		HX_STACK_VAR(tmp96,"tmp96");
									HX_STACK_LINE(3492)
									Float tmp97 = _this->b1->angvel;		HX_STACK_VAR(tmp97,"tmp97");
									HX_STACK_LINE(3492)
									Float tmp98 = (tmp96 - tmp97);		HX_STACK_VAR(tmp98,"tmp98");
									HX_STACK_LINE(3492)
									Float dw = tmp98;		HX_STACK_VAR(dw,"dw");
									HX_STACK_LINE(3492)
									Float tmp99 = (dw * _this->rMass);		HX_STACK_VAR(tmp99,"tmp99");
									HX_STACK_LINE(3492)
									j = tmp99;
									HX_STACK_LINE(3492)
									Float tmp100 = _this->rfric;		HX_STACK_VAR(tmp100,"tmp100");
									HX_STACK_LINE(3492)
									Float tmp101 = _this->c1->jnAcc;		HX_STACK_VAR(tmp101,"tmp101");
									HX_STACK_LINE(3492)
									Float tmp102 = (tmp100 * tmp101);		HX_STACK_VAR(tmp102,"tmp102");
									HX_STACK_LINE(3492)
									jMax = tmp102;
									HX_STACK_LINE(3492)
									jOld = _this->jrAcc;
									HX_STACK_LINE(3492)
									hx::SubEq(_this->jrAcc,j);
									HX_STACK_LINE(3492)
									bool tmp103 = (_this->jrAcc > jMax);		HX_STACK_VAR(tmp103,"tmp103");
									HX_STACK_LINE(3492)
									if ((tmp103)){
										HX_STACK_LINE(3492)
										_this->jrAcc = jMax;
									}
									else{
										HX_STACK_LINE(3492)
										Float tmp104 = _this->jrAcc;		HX_STACK_VAR(tmp104,"tmp104");
										HX_STACK_LINE(3492)
										Float tmp105 = jMax;		HX_STACK_VAR(tmp105,"tmp105");
										HX_STACK_LINE(3492)
										Float tmp106 = -(tmp105);		HX_STACK_VAR(tmp106,"tmp106");
										HX_STACK_LINE(3492)
										bool tmp107 = (tmp104 < tmp106);		HX_STACK_VAR(tmp107,"tmp107");
										HX_STACK_LINE(3492)
										if ((tmp107)){
											HX_STACK_LINE(3492)
											Float tmp108 = jMax;		HX_STACK_VAR(tmp108,"tmp108");
											HX_STACK_LINE(3492)
											Float tmp109 = -(tmp108);		HX_STACK_VAR(tmp109,"tmp109");
											HX_STACK_LINE(3492)
											_this->jrAcc = tmp109;
										}
									}
									HX_STACK_LINE(3492)
									Float tmp104 = (_this->jrAcc - jOld);		HX_STACK_VAR(tmp104,"tmp104");
									HX_STACK_LINE(3492)
									j = tmp104;
									HX_STACK_LINE(3492)
									Float tmp105 = j;		HX_STACK_VAR(tmp105,"tmp105");
									HX_STACK_LINE(3492)
									Float tmp106 = _this->b2->iinertia;		HX_STACK_VAR(tmp106,"tmp106");
									HX_STACK_LINE(3492)
									Float tmp107 = (tmp105 * tmp106);		HX_STACK_VAR(tmp107,"tmp107");
									HX_STACK_LINE(3492)
									hx::AddEq(_this->b2->angvel,tmp107);
									HX_STACK_LINE(3492)
									Float tmp108 = j;		HX_STACK_VAR(tmp108,"tmp108");
									HX_STACK_LINE(3492)
									Float tmp109 = _this->b1->iinertia;		HX_STACK_VAR(tmp109,"tmp109");
									HX_STACK_LINE(3492)
									Float tmp110 = (tmp108 * tmp109);		HX_STACK_VAR(tmp110,"tmp110");
									HX_STACK_LINE(3492)
									hx::SubEq(_this->b1->angvel,tmp110);
								}
								HX_STACK_LINE(3492)
								Float tmp96 = _this->k1x;		HX_STACK_VAR(tmp96,"tmp96");
								HX_STACK_LINE(3492)
								Float tmp97 = _this->b2->velx;		HX_STACK_VAR(tmp97,"tmp97");
								HX_STACK_LINE(3492)
								Float tmp98 = (tmp96 + tmp97);		HX_STACK_VAR(tmp98,"tmp98");
								HX_STACK_LINE(3492)
								Float tmp99 = _this->c1->r2y;		HX_STACK_VAR(tmp99,"tmp99");
								HX_STACK_LINE(3492)
								Float tmp100 = _this->b2->angvel;		HX_STACK_VAR(tmp100,"tmp100");
								HX_STACK_LINE(3492)
								Float tmp101 = (tmp99 * tmp100);		HX_STACK_VAR(tmp101,"tmp101");
								HX_STACK_LINE(3492)
								Float tmp102 = (tmp98 - tmp101);		HX_STACK_VAR(tmp102,"tmp102");
								HX_STACK_LINE(3492)
								Float tmp103 = _this->b1->velx;		HX_STACK_VAR(tmp103,"tmp103");
								HX_STACK_LINE(3492)
								Float tmp104 = _this->c1->r1y;		HX_STACK_VAR(tmp104,"tmp104");
								HX_STACK_LINE(3492)
								Float tmp105 = _this->b1->angvel;		HX_STACK_VAR(tmp105,"tmp105");
								HX_STACK_LINE(3492)
								Float tmp106 = (tmp104 * tmp105);		HX_STACK_VAR(tmp106,"tmp106");
								HX_STACK_LINE(3492)
								Float tmp107 = (tmp103 - tmp106);		HX_STACK_VAR(tmp107,"tmp107");
								HX_STACK_LINE(3492)
								Float tmp108 = (tmp102 - tmp107);		HX_STACK_VAR(tmp108,"tmp108");
								HX_STACK_LINE(3492)
								v1x = tmp108;
								HX_STACK_LINE(3492)
								Float tmp109 = _this->k1y;		HX_STACK_VAR(tmp109,"tmp109");
								HX_STACK_LINE(3492)
								Float tmp110 = _this->b2->vely;		HX_STACK_VAR(tmp110,"tmp110");
								HX_STACK_LINE(3492)
								Float tmp111 = (tmp109 + tmp110);		HX_STACK_VAR(tmp111,"tmp111");
								HX_STACK_LINE(3492)
								Float tmp112 = _this->c1->r2x;		HX_STACK_VAR(tmp112,"tmp112");
								HX_STACK_LINE(3492)
								Float tmp113 = _this->b2->angvel;		HX_STACK_VAR(tmp113,"tmp113");
								HX_STACK_LINE(3492)
								Float tmp114 = (tmp112 * tmp113);		HX_STACK_VAR(tmp114,"tmp114");
								HX_STACK_LINE(3492)
								Float tmp115 = (tmp111 + tmp114);		HX_STACK_VAR(tmp115,"tmp115");
								HX_STACK_LINE(3492)
								Float tmp116 = _this->b1->vely;		HX_STACK_VAR(tmp116,"tmp116");
								HX_STACK_LINE(3492)
								Float tmp117 = _this->c1->r1x;		HX_STACK_VAR(tmp117,"tmp117");
								HX_STACK_LINE(3492)
								Float tmp118 = _this->b1->angvel;		HX_STACK_VAR(tmp118,"tmp118");
								HX_STACK_LINE(3492)
								Float tmp119 = (tmp117 * tmp118);		HX_STACK_VAR(tmp119,"tmp119");
								HX_STACK_LINE(3492)
								Float tmp120 = (tmp116 + tmp119);		HX_STACK_VAR(tmp120,"tmp120");
								HX_STACK_LINE(3492)
								Float tmp121 = (tmp115 - tmp120);		HX_STACK_VAR(tmp121,"tmp121");
								HX_STACK_LINE(3492)
								v1y = tmp121;
								HX_STACK_LINE(3492)
								Float tmp122 = _this->c1->bounce;		HX_STACK_VAR(tmp122,"tmp122");
								HX_STACK_LINE(3492)
								Float tmp123 = (_this->nx * v1x);		HX_STACK_VAR(tmp123,"tmp123");
								HX_STACK_LINE(3492)
								Float tmp124 = (_this->ny * v1y);		HX_STACK_VAR(tmp124,"tmp124");
								HX_STACK_LINE(3492)
								Float tmp125 = (tmp123 + tmp124);		HX_STACK_VAR(tmp125,"tmp125");
								HX_STACK_LINE(3492)
								Float tmp126 = (tmp122 + tmp125);		HX_STACK_VAR(tmp126,"tmp126");
								HX_STACK_LINE(3492)
								Float tmp127 = _this->surfacey;		HX_STACK_VAR(tmp127,"tmp127");
								HX_STACK_LINE(3492)
								Float tmp128 = (tmp126 + tmp127);		HX_STACK_VAR(tmp128,"tmp128");
								HX_STACK_LINE(3492)
								Float tmp129 = _this->c1->nMass;		HX_STACK_VAR(tmp129,"tmp129");
								HX_STACK_LINE(3492)
								Float tmp130 = (tmp128 * tmp129);		HX_STACK_VAR(tmp130,"tmp130");
								HX_STACK_LINE(3492)
								j = tmp130;
								HX_STACK_LINE(3492)
								Float tmp131 = _this->c1->jnAcc;		HX_STACK_VAR(tmp131,"tmp131");
								HX_STACK_LINE(3492)
								jOld = tmp131;
								HX_STACK_LINE(3492)
								Float tmp132 = (jOld - j);		HX_STACK_VAR(tmp132,"tmp132");
								HX_STACK_LINE(3492)
								cjAcc = tmp132;
								HX_STACK_LINE(3492)
								bool tmp133 = (cjAcc < ((Float)0.0));		HX_STACK_VAR(tmp133,"tmp133");
								HX_STACK_LINE(3492)
								if ((tmp133)){
									HX_STACK_LINE(3492)
									cjAcc = ((Float)0.0);
								}
								HX_STACK_LINE(3492)
								Float tmp134 = (cjAcc - jOld);		HX_STACK_VAR(tmp134,"tmp134");
								HX_STACK_LINE(3492)
								j = tmp134;
								HX_STACK_LINE(3492)
								_this->c1->jnAcc = cjAcc;
								HX_STACK_LINE(3492)
								Float tmp135 = (_this->nx * j);		HX_STACK_VAR(tmp135,"tmp135");
								HX_STACK_LINE(3492)
								jx = tmp135;
								HX_STACK_LINE(3492)
								Float tmp136 = (_this->ny * j);		HX_STACK_VAR(tmp136,"tmp136");
								HX_STACK_LINE(3492)
								jy = tmp136;
								HX_STACK_LINE(3492)
								Float tmp137 = jx;		HX_STACK_VAR(tmp137,"tmp137");
								HX_STACK_LINE(3492)
								Float tmp138 = _this->b2->imass;		HX_STACK_VAR(tmp138,"tmp138");
								HX_STACK_LINE(3492)
								Float tmp139 = (tmp137 * tmp138);		HX_STACK_VAR(tmp139,"tmp139");
								HX_STACK_LINE(3492)
								hx::AddEq(_this->b2->velx,tmp139);
								HX_STACK_LINE(3492)
								Float tmp140 = jy;		HX_STACK_VAR(tmp140,"tmp140");
								HX_STACK_LINE(3492)
								Float tmp141 = _this->b2->imass;		HX_STACK_VAR(tmp141,"tmp141");
								HX_STACK_LINE(3492)
								Float tmp142 = (tmp140 * tmp141);		HX_STACK_VAR(tmp142,"tmp142");
								HX_STACK_LINE(3492)
								hx::AddEq(_this->b2->vely,tmp142);
								HX_STACK_LINE(3492)
								Float tmp143 = jx;		HX_STACK_VAR(tmp143,"tmp143");
								HX_STACK_LINE(3492)
								Float tmp144 = _this->b1->imass;		HX_STACK_VAR(tmp144,"tmp144");
								HX_STACK_LINE(3492)
								Float tmp145 = (tmp143 * tmp144);		HX_STACK_VAR(tmp145,"tmp145");
								HX_STACK_LINE(3492)
								hx::SubEq(_this->b1->velx,tmp145);
								HX_STACK_LINE(3492)
								Float tmp146 = jy;		HX_STACK_VAR(tmp146,"tmp146");
								HX_STACK_LINE(3492)
								Float tmp147 = _this->b1->imass;		HX_STACK_VAR(tmp147,"tmp147");
								HX_STACK_LINE(3492)
								Float tmp148 = (tmp146 * tmp147);		HX_STACK_VAR(tmp148,"tmp148");
								HX_STACK_LINE(3492)
								hx::SubEq(_this->b1->vely,tmp148);
								HX_STACK_LINE(3492)
								Float tmp149 = (_this->rn1b * j);		HX_STACK_VAR(tmp149,"tmp149");
								HX_STACK_LINE(3492)
								Float tmp150 = _this->b2->iinertia;		HX_STACK_VAR(tmp150,"tmp150");
								HX_STACK_LINE(3492)
								Float tmp151 = (tmp149 * tmp150);		HX_STACK_VAR(tmp151,"tmp151");
								HX_STACK_LINE(3492)
								hx::AddEq(_this->b2->angvel,tmp151);
								HX_STACK_LINE(3492)
								Float tmp152 = (_this->rn1a * j);		HX_STACK_VAR(tmp152,"tmp152");
								HX_STACK_LINE(3492)
								Float tmp153 = _this->b1->iinertia;		HX_STACK_VAR(tmp153,"tmp153");
								HX_STACK_LINE(3492)
								Float tmp154 = (tmp152 * tmp153);		HX_STACK_VAR(tmp154,"tmp154");
								HX_STACK_LINE(3492)
								hx::SubEq(_this->b1->angvel,tmp154);
							}
						}
						HX_STACK_LINE(3493)
						{
							HX_STACK_LINE(3493)
							::zpp_nape::dynamics::ZPP_ColArbiter _this = arb->colarb;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(3493)
							Float jx;		HX_STACK_VAR(jx,"jx");
							HX_STACK_LINE(3493)
							Float jy;		HX_STACK_VAR(jy,"jy");
							HX_STACK_LINE(3493)
							Float j;		HX_STACK_VAR(j,"j");
							HX_STACK_LINE(3493)
							Float jMax;		HX_STACK_VAR(jMax,"jMax");
							HX_STACK_LINE(3493)
							Float jOld;		HX_STACK_VAR(jOld,"jOld");
							HX_STACK_LINE(3493)
							Float cjAcc;		HX_STACK_VAR(cjAcc,"cjAcc");
							HX_STACK_LINE(3493)
							Float tmp31 = _this->k1x;		HX_STACK_VAR(tmp31,"tmp31");
							HX_STACK_LINE(3493)
							Float tmp32 = _this->b2->velx;		HX_STACK_VAR(tmp32,"tmp32");
							HX_STACK_LINE(3493)
							Float tmp33 = (tmp31 + tmp32);		HX_STACK_VAR(tmp33,"tmp33");
							HX_STACK_LINE(3493)
							Float tmp34 = _this->c1->r2y;		HX_STACK_VAR(tmp34,"tmp34");
							HX_STACK_LINE(3493)
							Float tmp35 = _this->b2->angvel;		HX_STACK_VAR(tmp35,"tmp35");
							HX_STACK_LINE(3493)
							Float tmp36 = (tmp34 * tmp35);		HX_STACK_VAR(tmp36,"tmp36");
							HX_STACK_LINE(3493)
							Float tmp37 = (tmp33 - tmp36);		HX_STACK_VAR(tmp37,"tmp37");
							HX_STACK_LINE(3493)
							Float tmp38 = _this->b1->velx;		HX_STACK_VAR(tmp38,"tmp38");
							HX_STACK_LINE(3493)
							Float tmp39 = _this->c1->r1y;		HX_STACK_VAR(tmp39,"tmp39");
							HX_STACK_LINE(3493)
							Float tmp40 = _this->b1->angvel;		HX_STACK_VAR(tmp40,"tmp40");
							HX_STACK_LINE(3493)
							Float tmp41 = (tmp39 * tmp40);		HX_STACK_VAR(tmp41,"tmp41");
							HX_STACK_LINE(3493)
							Float tmp42 = (tmp38 - tmp41);		HX_STACK_VAR(tmp42,"tmp42");
							HX_STACK_LINE(3493)
							Float tmp43 = (tmp37 - tmp42);		HX_STACK_VAR(tmp43,"tmp43");
							HX_STACK_LINE(3493)
							Float v1x = tmp43;		HX_STACK_VAR(v1x,"v1x");
							HX_STACK_LINE(3493)
							Float tmp44 = _this->k1y;		HX_STACK_VAR(tmp44,"tmp44");
							HX_STACK_LINE(3493)
							Float tmp45 = _this->b2->vely;		HX_STACK_VAR(tmp45,"tmp45");
							HX_STACK_LINE(3493)
							Float tmp46 = (tmp44 + tmp45);		HX_STACK_VAR(tmp46,"tmp46");
							HX_STACK_LINE(3493)
							Float tmp47 = _this->c1->r2x;		HX_STACK_VAR(tmp47,"tmp47");
							HX_STACK_LINE(3493)
							Float tmp48 = _this->b2->angvel;		HX_STACK_VAR(tmp48,"tmp48");
							HX_STACK_LINE(3493)
							Float tmp49 = (tmp47 * tmp48);		HX_STACK_VAR(tmp49,"tmp49");
							HX_STACK_LINE(3493)
							Float tmp50 = (tmp46 + tmp49);		HX_STACK_VAR(tmp50,"tmp50");
							HX_STACK_LINE(3493)
							Float tmp51 = _this->b1->vely;		HX_STACK_VAR(tmp51,"tmp51");
							HX_STACK_LINE(3493)
							Float tmp52 = _this->c1->r1x;		HX_STACK_VAR(tmp52,"tmp52");
							HX_STACK_LINE(3493)
							Float tmp53 = _this->b1->angvel;		HX_STACK_VAR(tmp53,"tmp53");
							HX_STACK_LINE(3493)
							Float tmp54 = (tmp52 * tmp53);		HX_STACK_VAR(tmp54,"tmp54");
							HX_STACK_LINE(3493)
							Float tmp55 = (tmp51 + tmp54);		HX_STACK_VAR(tmp55,"tmp55");
							HX_STACK_LINE(3493)
							Float tmp56 = (tmp50 - tmp55);		HX_STACK_VAR(tmp56,"tmp56");
							HX_STACK_LINE(3493)
							Float v1y = tmp56;		HX_STACK_VAR(v1y,"v1y");
							HX_STACK_LINE(3493)
							Float tmp57 = (v1y * _this->nx);		HX_STACK_VAR(tmp57,"tmp57");
							HX_STACK_LINE(3493)
							Float tmp58 = (v1x * _this->ny);		HX_STACK_VAR(tmp58,"tmp58");
							HX_STACK_LINE(3493)
							Float tmp59 = (tmp57 - tmp58);		HX_STACK_VAR(tmp59,"tmp59");
							HX_STACK_LINE(3493)
							Float tmp60 = _this->surfacex;		HX_STACK_VAR(tmp60,"tmp60");
							HX_STACK_LINE(3493)
							Float tmp61 = (tmp59 + tmp60);		HX_STACK_VAR(tmp61,"tmp61");
							HX_STACK_LINE(3493)
							Float tmp62 = _this->c1->tMass;		HX_STACK_VAR(tmp62,"tmp62");
							HX_STACK_LINE(3493)
							Float tmp63 = (tmp61 * tmp62);		HX_STACK_VAR(tmp63,"tmp63");
							HX_STACK_LINE(3493)
							j = tmp63;
							HX_STACK_LINE(3493)
							Float tmp64 = _this->c1->friction;		HX_STACK_VAR(tmp64,"tmp64");
							HX_STACK_LINE(3493)
							Float tmp65 = _this->c1->jnAcc;		HX_STACK_VAR(tmp65,"tmp65");
							HX_STACK_LINE(3493)
							Float tmp66 = (tmp64 * tmp65);		HX_STACK_VAR(tmp66,"tmp66");
							HX_STACK_LINE(3493)
							jMax = tmp66;
							HX_STACK_LINE(3493)
							Float tmp67 = _this->c1->jtAcc;		HX_STACK_VAR(tmp67,"tmp67");
							HX_STACK_LINE(3493)
							jOld = tmp67;
							HX_STACK_LINE(3493)
							Float tmp68 = (jOld - j);		HX_STACK_VAR(tmp68,"tmp68");
							HX_STACK_LINE(3493)
							cjAcc = tmp68;
							HX_STACK_LINE(3493)
							bool tmp69 = (cjAcc > jMax);		HX_STACK_VAR(tmp69,"tmp69");
							HX_STACK_LINE(3493)
							if ((tmp69)){
								HX_STACK_LINE(3493)
								cjAcc = jMax;
							}
							else{
								HX_STACK_LINE(3493)
								Float tmp70 = cjAcc;		HX_STACK_VAR(tmp70,"tmp70");
								HX_STACK_LINE(3493)
								Float tmp71 = jMax;		HX_STACK_VAR(tmp71,"tmp71");
								HX_STACK_LINE(3493)
								Float tmp72 = -(tmp71);		HX_STACK_VAR(tmp72,"tmp72");
								HX_STACK_LINE(3493)
								bool tmp73 = (tmp70 < tmp72);		HX_STACK_VAR(tmp73,"tmp73");
								HX_STACK_LINE(3493)
								if ((tmp73)){
									HX_STACK_LINE(3493)
									Float tmp74 = jMax;		HX_STACK_VAR(tmp74,"tmp74");
									HX_STACK_LINE(3493)
									Float tmp75 = -(tmp74);		HX_STACK_VAR(tmp75,"tmp75");
									HX_STACK_LINE(3493)
									cjAcc = tmp75;
								}
							}
							HX_STACK_LINE(3493)
							Float tmp70 = (cjAcc - jOld);		HX_STACK_VAR(tmp70,"tmp70");
							HX_STACK_LINE(3493)
							j = tmp70;
							HX_STACK_LINE(3493)
							_this->c1->jtAcc = cjAcc;
							HX_STACK_LINE(3493)
							Float tmp71 = _this->ny;		HX_STACK_VAR(tmp71,"tmp71");
							HX_STACK_LINE(3493)
							Float tmp72 = -(tmp71);		HX_STACK_VAR(tmp72,"tmp72");
							HX_STACK_LINE(3493)
							Float tmp73 = j;		HX_STACK_VAR(tmp73,"tmp73");
							HX_STACK_LINE(3493)
							Float tmp74 = (tmp72 * tmp73);		HX_STACK_VAR(tmp74,"tmp74");
							HX_STACK_LINE(3493)
							jx = tmp74;
							HX_STACK_LINE(3493)
							Float tmp75 = (_this->nx * j);		HX_STACK_VAR(tmp75,"tmp75");
							HX_STACK_LINE(3493)
							jy = tmp75;
							HX_STACK_LINE(3493)
							Float tmp76 = jx;		HX_STACK_VAR(tmp76,"tmp76");
							HX_STACK_LINE(3493)
							Float tmp77 = _this->b2->imass;		HX_STACK_VAR(tmp77,"tmp77");
							HX_STACK_LINE(3493)
							Float tmp78 = (tmp76 * tmp77);		HX_STACK_VAR(tmp78,"tmp78");
							HX_STACK_LINE(3493)
							hx::AddEq(_this->b2->velx,tmp78);
							HX_STACK_LINE(3493)
							Float tmp79 = jy;		HX_STACK_VAR(tmp79,"tmp79");
							HX_STACK_LINE(3493)
							Float tmp80 = _this->b2->imass;		HX_STACK_VAR(tmp80,"tmp80");
							HX_STACK_LINE(3493)
							Float tmp81 = (tmp79 * tmp80);		HX_STACK_VAR(tmp81,"tmp81");
							HX_STACK_LINE(3493)
							hx::AddEq(_this->b2->vely,tmp81);
							HX_STACK_LINE(3493)
							Float tmp82 = jx;		HX_STACK_VAR(tmp82,"tmp82");
							HX_STACK_LINE(3493)
							Float tmp83 = _this->b1->imass;		HX_STACK_VAR(tmp83,"tmp83");
							HX_STACK_LINE(3493)
							Float tmp84 = (tmp82 * tmp83);		HX_STACK_VAR(tmp84,"tmp84");
							HX_STACK_LINE(3493)
							hx::SubEq(_this->b1->velx,tmp84);
							HX_STACK_LINE(3493)
							Float tmp85 = jy;		HX_STACK_VAR(tmp85,"tmp85");
							HX_STACK_LINE(3493)
							Float tmp86 = _this->b1->imass;		HX_STACK_VAR(tmp86,"tmp86");
							HX_STACK_LINE(3493)
							Float tmp87 = (tmp85 * tmp86);		HX_STACK_VAR(tmp87,"tmp87");
							HX_STACK_LINE(3493)
							hx::SubEq(_this->b1->vely,tmp87);
							HX_STACK_LINE(3493)
							Float tmp88 = (_this->rt1b * j);		HX_STACK_VAR(tmp88,"tmp88");
							HX_STACK_LINE(3493)
							Float tmp89 = _this->b2->iinertia;		HX_STACK_VAR(tmp89,"tmp89");
							HX_STACK_LINE(3493)
							Float tmp90 = (tmp88 * tmp89);		HX_STACK_VAR(tmp90,"tmp90");
							HX_STACK_LINE(3493)
							hx::AddEq(_this->b2->angvel,tmp90);
							HX_STACK_LINE(3493)
							Float tmp91 = (_this->rt1a * j);		HX_STACK_VAR(tmp91,"tmp91");
							HX_STACK_LINE(3493)
							Float tmp92 = _this->b1->iinertia;		HX_STACK_VAR(tmp92,"tmp92");
							HX_STACK_LINE(3493)
							Float tmp93 = (tmp91 * tmp92);		HX_STACK_VAR(tmp93,"tmp93");
							HX_STACK_LINE(3493)
							hx::SubEq(_this->b1->angvel,tmp93);
							HX_STACK_LINE(3493)
							bool tmp94 = _this->hc2;		HX_STACK_VAR(tmp94,"tmp94");
							HX_STACK_LINE(3493)
							if ((tmp94)){
								HX_STACK_LINE(3493)
								Float tmp95 = _this->k2x;		HX_STACK_VAR(tmp95,"tmp95");
								HX_STACK_LINE(3493)
								Float tmp96 = _this->b2->velx;		HX_STACK_VAR(tmp96,"tmp96");
								HX_STACK_LINE(3493)
								Float tmp97 = (tmp95 + tmp96);		HX_STACK_VAR(tmp97,"tmp97");
								HX_STACK_LINE(3493)
								Float tmp98 = _this->c2->r2y;		HX_STACK_VAR(tmp98,"tmp98");
								HX_STACK_LINE(3493)
								Float tmp99 = _this->b2->angvel;		HX_STACK_VAR(tmp99,"tmp99");
								HX_STACK_LINE(3493)
								Float tmp100 = (tmp98 * tmp99);		HX_STACK_VAR(tmp100,"tmp100");
								HX_STACK_LINE(3493)
								Float tmp101 = (tmp97 - tmp100);		HX_STACK_VAR(tmp101,"tmp101");
								HX_STACK_LINE(3493)
								Float tmp102 = _this->b1->velx;		HX_STACK_VAR(tmp102,"tmp102");
								HX_STACK_LINE(3493)
								Float tmp103 = _this->c2->r1y;		HX_STACK_VAR(tmp103,"tmp103");
								HX_STACK_LINE(3493)
								Float tmp104 = _this->b1->angvel;		HX_STACK_VAR(tmp104,"tmp104");
								HX_STACK_LINE(3493)
								Float tmp105 = (tmp103 * tmp104);		HX_STACK_VAR(tmp105,"tmp105");
								HX_STACK_LINE(3493)
								Float tmp106 = (tmp102 - tmp105);		HX_STACK_VAR(tmp106,"tmp106");
								HX_STACK_LINE(3493)
								Float tmp107 = (tmp101 - tmp106);		HX_STACK_VAR(tmp107,"tmp107");
								HX_STACK_LINE(3493)
								Float v2x = tmp107;		HX_STACK_VAR(v2x,"v2x");
								HX_STACK_LINE(3493)
								Float tmp108 = _this->k2y;		HX_STACK_VAR(tmp108,"tmp108");
								HX_STACK_LINE(3493)
								Float tmp109 = _this->b2->vely;		HX_STACK_VAR(tmp109,"tmp109");
								HX_STACK_LINE(3493)
								Float tmp110 = (tmp108 + tmp109);		HX_STACK_VAR(tmp110,"tmp110");
								HX_STACK_LINE(3493)
								Float tmp111 = _this->c2->r2x;		HX_STACK_VAR(tmp111,"tmp111");
								HX_STACK_LINE(3493)
								Float tmp112 = _this->b2->angvel;		HX_STACK_VAR(tmp112,"tmp112");
								HX_STACK_LINE(3493)
								Float tmp113 = (tmp111 * tmp112);		HX_STACK_VAR(tmp113,"tmp113");
								HX_STACK_LINE(3493)
								Float tmp114 = (tmp110 + tmp113);		HX_STACK_VAR(tmp114,"tmp114");
								HX_STACK_LINE(3493)
								Float tmp115 = _this->b1->vely;		HX_STACK_VAR(tmp115,"tmp115");
								HX_STACK_LINE(3493)
								Float tmp116 = _this->c2->r1x;		HX_STACK_VAR(tmp116,"tmp116");
								HX_STACK_LINE(3493)
								Float tmp117 = _this->b1->angvel;		HX_STACK_VAR(tmp117,"tmp117");
								HX_STACK_LINE(3493)
								Float tmp118 = (tmp116 * tmp117);		HX_STACK_VAR(tmp118,"tmp118");
								HX_STACK_LINE(3493)
								Float tmp119 = (tmp115 + tmp118);		HX_STACK_VAR(tmp119,"tmp119");
								HX_STACK_LINE(3493)
								Float tmp120 = (tmp114 - tmp119);		HX_STACK_VAR(tmp120,"tmp120");
								HX_STACK_LINE(3493)
								Float v2y = tmp120;		HX_STACK_VAR(v2y,"v2y");
								HX_STACK_LINE(3493)
								Float tmp121 = (v2y * _this->nx);		HX_STACK_VAR(tmp121,"tmp121");
								HX_STACK_LINE(3493)
								Float tmp122 = (v2x * _this->ny);		HX_STACK_VAR(tmp122,"tmp122");
								HX_STACK_LINE(3493)
								Float tmp123 = (tmp121 - tmp122);		HX_STACK_VAR(tmp123,"tmp123");
								HX_STACK_LINE(3493)
								Float tmp124 = _this->surfacex;		HX_STACK_VAR(tmp124,"tmp124");
								HX_STACK_LINE(3493)
								Float tmp125 = (tmp123 + tmp124);		HX_STACK_VAR(tmp125,"tmp125");
								HX_STACK_LINE(3493)
								Float tmp126 = _this->c2->tMass;		HX_STACK_VAR(tmp126,"tmp126");
								HX_STACK_LINE(3493)
								Float tmp127 = (tmp125 * tmp126);		HX_STACK_VAR(tmp127,"tmp127");
								HX_STACK_LINE(3493)
								j = tmp127;
								HX_STACK_LINE(3493)
								Float tmp128 = _this->c2->friction;		HX_STACK_VAR(tmp128,"tmp128");
								HX_STACK_LINE(3493)
								Float tmp129 = _this->c2->jnAcc;		HX_STACK_VAR(tmp129,"tmp129");
								HX_STACK_LINE(3493)
								Float tmp130 = (tmp128 * tmp129);		HX_STACK_VAR(tmp130,"tmp130");
								HX_STACK_LINE(3493)
								jMax = tmp130;
								HX_STACK_LINE(3493)
								Float tmp131 = _this->c2->jtAcc;		HX_STACK_VAR(tmp131,"tmp131");
								HX_STACK_LINE(3493)
								jOld = tmp131;
								HX_STACK_LINE(3493)
								Float tmp132 = (jOld - j);		HX_STACK_VAR(tmp132,"tmp132");
								HX_STACK_LINE(3493)
								cjAcc = tmp132;
								HX_STACK_LINE(3493)
								bool tmp133 = (cjAcc > jMax);		HX_STACK_VAR(tmp133,"tmp133");
								HX_STACK_LINE(3493)
								if ((tmp133)){
									HX_STACK_LINE(3493)
									cjAcc = jMax;
								}
								else{
									HX_STACK_LINE(3493)
									Float tmp134 = cjAcc;		HX_STACK_VAR(tmp134,"tmp134");
									HX_STACK_LINE(3493)
									Float tmp135 = jMax;		HX_STACK_VAR(tmp135,"tmp135");
									HX_STACK_LINE(3493)
									Float tmp136 = -(tmp135);		HX_STACK_VAR(tmp136,"tmp136");
									HX_STACK_LINE(3493)
									bool tmp137 = (tmp134 < tmp136);		HX_STACK_VAR(tmp137,"tmp137");
									HX_STACK_LINE(3493)
									if ((tmp137)){
										HX_STACK_LINE(3493)
										Float tmp138 = jMax;		HX_STACK_VAR(tmp138,"tmp138");
										HX_STACK_LINE(3493)
										Float tmp139 = -(tmp138);		HX_STACK_VAR(tmp139,"tmp139");
										HX_STACK_LINE(3493)
										cjAcc = tmp139;
									}
								}
								HX_STACK_LINE(3493)
								Float tmp134 = (cjAcc - jOld);		HX_STACK_VAR(tmp134,"tmp134");
								HX_STACK_LINE(3493)
								j = tmp134;
								HX_STACK_LINE(3493)
								_this->c2->jtAcc = cjAcc;
								HX_STACK_LINE(3493)
								Float tmp135 = _this->ny;		HX_STACK_VAR(tmp135,"tmp135");
								HX_STACK_LINE(3493)
								Float tmp136 = -(tmp135);		HX_STACK_VAR(tmp136,"tmp136");
								HX_STACK_LINE(3493)
								Float tmp137 = j;		HX_STACK_VAR(tmp137,"tmp137");
								HX_STACK_LINE(3493)
								Float tmp138 = (tmp136 * tmp137);		HX_STACK_VAR(tmp138,"tmp138");
								HX_STACK_LINE(3493)
								jx = tmp138;
								HX_STACK_LINE(3493)
								Float tmp139 = (_this->nx * j);		HX_STACK_VAR(tmp139,"tmp139");
								HX_STACK_LINE(3493)
								jy = tmp139;
								HX_STACK_LINE(3493)
								Float tmp140 = jx;		HX_STACK_VAR(tmp140,"tmp140");
								HX_STACK_LINE(3493)
								Float tmp141 = _this->b2->imass;		HX_STACK_VAR(tmp141,"tmp141");
								HX_STACK_LINE(3493)
								Float tmp142 = (tmp140 * tmp141);		HX_STACK_VAR(tmp142,"tmp142");
								HX_STACK_LINE(3493)
								hx::AddEq(_this->b2->velx,tmp142);
								HX_STACK_LINE(3493)
								Float tmp143 = jy;		HX_STACK_VAR(tmp143,"tmp143");
								HX_STACK_LINE(3493)
								Float tmp144 = _this->b2->imass;		HX_STACK_VAR(tmp144,"tmp144");
								HX_STACK_LINE(3493)
								Float tmp145 = (tmp143 * tmp144);		HX_STACK_VAR(tmp145,"tmp145");
								HX_STACK_LINE(3493)
								hx::AddEq(_this->b2->vely,tmp145);
								HX_STACK_LINE(3493)
								Float tmp146 = jx;		HX_STACK_VAR(tmp146,"tmp146");
								HX_STACK_LINE(3493)
								Float tmp147 = _this->b1->imass;		HX_STACK_VAR(tmp147,"tmp147");
								HX_STACK_LINE(3493)
								Float tmp148 = (tmp146 * tmp147);		HX_STACK_VAR(tmp148,"tmp148");
								HX_STACK_LINE(3493)
								hx::SubEq(_this->b1->velx,tmp148);
								HX_STACK_LINE(3493)
								Float tmp149 = jy;		HX_STACK_VAR(tmp149,"tmp149");
								HX_STACK_LINE(3493)
								Float tmp150 = _this->b1->imass;		HX_STACK_VAR(tmp150,"tmp150");
								HX_STACK_LINE(3493)
								Float tmp151 = (tmp149 * tmp150);		HX_STACK_VAR(tmp151,"tmp151");
								HX_STACK_LINE(3493)
								hx::SubEq(_this->b1->vely,tmp151);
								HX_STACK_LINE(3493)
								Float tmp152 = (_this->rt2b * j);		HX_STACK_VAR(tmp152,"tmp152");
								HX_STACK_LINE(3493)
								Float tmp153 = _this->b2->iinertia;		HX_STACK_VAR(tmp153,"tmp153");
								HX_STACK_LINE(3493)
								Float tmp154 = (tmp152 * tmp153);		HX_STACK_VAR(tmp154,"tmp154");
								HX_STACK_LINE(3493)
								hx::AddEq(_this->b2->angvel,tmp154);
								HX_STACK_LINE(3493)
								Float tmp155 = (_this->rt2a * j);		HX_STACK_VAR(tmp155,"tmp155");
								HX_STACK_LINE(3493)
								Float tmp156 = _this->b1->iinertia;		HX_STACK_VAR(tmp156,"tmp156");
								HX_STACK_LINE(3493)
								Float tmp157 = (tmp155 * tmp156);		HX_STACK_VAR(tmp157,"tmp157");
								HX_STACK_LINE(3493)
								hx::SubEq(_this->b1->angvel,tmp157);
								HX_STACK_LINE(3493)
								Float tmp158 = _this->k1x;		HX_STACK_VAR(tmp158,"tmp158");
								HX_STACK_LINE(3493)
								Float tmp159 = _this->b2->velx;		HX_STACK_VAR(tmp159,"tmp159");
								HX_STACK_LINE(3493)
								Float tmp160 = (tmp158 + tmp159);		HX_STACK_VAR(tmp160,"tmp160");
								HX_STACK_LINE(3493)
								Float tmp161 = _this->c1->r2y;		HX_STACK_VAR(tmp161,"tmp161");
								HX_STACK_LINE(3493)
								Float tmp162 = _this->b2->angvel;		HX_STACK_VAR(tmp162,"tmp162");
								HX_STACK_LINE(3493)
								Float tmp163 = (tmp161 * tmp162);		HX_STACK_VAR(tmp163,"tmp163");
								HX_STACK_LINE(3493)
								Float tmp164 = (tmp160 - tmp163);		HX_STACK_VAR(tmp164,"tmp164");
								HX_STACK_LINE(3493)
								Float tmp165 = _this->b1->velx;		HX_STACK_VAR(tmp165,"tmp165");
								HX_STACK_LINE(3493)
								Float tmp166 = _this->c1->r1y;		HX_STACK_VAR(tmp166,"tmp166");
								HX_STACK_LINE(3493)
								Float tmp167 = _this->b1->angvel;		HX_STACK_VAR(tmp167,"tmp167");
								HX_STACK_LINE(3493)
								Float tmp168 = (tmp166 * tmp167);		HX_STACK_VAR(tmp168,"tmp168");
								HX_STACK_LINE(3493)
								Float tmp169 = (tmp165 - tmp168);		HX_STACK_VAR(tmp169,"tmp169");
								HX_STACK_LINE(3493)
								Float tmp170 = (tmp164 - tmp169);		HX_STACK_VAR(tmp170,"tmp170");
								HX_STACK_LINE(3493)
								v1x = tmp170;
								HX_STACK_LINE(3493)
								Float tmp171 = _this->k1y;		HX_STACK_VAR(tmp171,"tmp171");
								HX_STACK_LINE(3493)
								Float tmp172 = _this->b2->vely;		HX_STACK_VAR(tmp172,"tmp172");
								HX_STACK_LINE(3493)
								Float tmp173 = (tmp171 + tmp172);		HX_STACK_VAR(tmp173,"tmp173");
								HX_STACK_LINE(3493)
								Float tmp174 = _this->c1->r2x;		HX_STACK_VAR(tmp174,"tmp174");
								HX_STACK_LINE(3493)
								Float tmp175 = _this->b2->angvel;		HX_STACK_VAR(tmp175,"tmp175");
								HX_STACK_LINE(3493)
								Float tmp176 = (tmp174 * tmp175);		HX_STACK_VAR(tmp176,"tmp176");
								HX_STACK_LINE(3493)
								Float tmp177 = (tmp173 + tmp176);		HX_STACK_VAR(tmp177,"tmp177");
								HX_STACK_LINE(3493)
								Float tmp178 = _this->b1->vely;		HX_STACK_VAR(tmp178,"tmp178");
								HX_STACK_LINE(3493)
								Float tmp179 = _this->c1->r1x;		HX_STACK_VAR(tmp179,"tmp179");
								HX_STACK_LINE(3493)
								Float tmp180 = _this->b1->angvel;		HX_STACK_VAR(tmp180,"tmp180");
								HX_STACK_LINE(3493)
								Float tmp181 = (tmp179 * tmp180);		HX_STACK_VAR(tmp181,"tmp181");
								HX_STACK_LINE(3493)
								Float tmp182 = (tmp178 + tmp181);		HX_STACK_VAR(tmp182,"tmp182");
								HX_STACK_LINE(3493)
								Float tmp183 = (tmp177 - tmp182);		HX_STACK_VAR(tmp183,"tmp183");
								HX_STACK_LINE(3493)
								v1y = tmp183;
								HX_STACK_LINE(3493)
								Float tmp184 = _this->k2x;		HX_STACK_VAR(tmp184,"tmp184");
								HX_STACK_LINE(3493)
								Float tmp185 = _this->b2->velx;		HX_STACK_VAR(tmp185,"tmp185");
								HX_STACK_LINE(3493)
								Float tmp186 = (tmp184 + tmp185);		HX_STACK_VAR(tmp186,"tmp186");
								HX_STACK_LINE(3493)
								Float tmp187 = _this->c2->r2y;		HX_STACK_VAR(tmp187,"tmp187");
								HX_STACK_LINE(3493)
								Float tmp188 = _this->b2->angvel;		HX_STACK_VAR(tmp188,"tmp188");
								HX_STACK_LINE(3493)
								Float tmp189 = (tmp187 * tmp188);		HX_STACK_VAR(tmp189,"tmp189");
								HX_STACK_LINE(3493)
								Float tmp190 = (tmp186 - tmp189);		HX_STACK_VAR(tmp190,"tmp190");
								HX_STACK_LINE(3493)
								Float tmp191 = _this->b1->velx;		HX_STACK_VAR(tmp191,"tmp191");
								HX_STACK_LINE(3493)
								Float tmp192 = _this->c2->r1y;		HX_STACK_VAR(tmp192,"tmp192");
								HX_STACK_LINE(3493)
								Float tmp193 = _this->b1->angvel;		HX_STACK_VAR(tmp193,"tmp193");
								HX_STACK_LINE(3493)
								Float tmp194 = (tmp192 * tmp193);		HX_STACK_VAR(tmp194,"tmp194");
								HX_STACK_LINE(3493)
								Float tmp195 = (tmp191 - tmp194);		HX_STACK_VAR(tmp195,"tmp195");
								HX_STACK_LINE(3493)
								Float tmp196 = (tmp190 - tmp195);		HX_STACK_VAR(tmp196,"tmp196");
								HX_STACK_LINE(3493)
								v2x = tmp196;
								HX_STACK_LINE(3493)
								Float tmp197 = _this->k2y;		HX_STACK_VAR(tmp197,"tmp197");
								HX_STACK_LINE(3493)
								Float tmp198 = _this->b2->vely;		HX_STACK_VAR(tmp198,"tmp198");
								HX_STACK_LINE(3493)
								Float tmp199 = (tmp197 + tmp198);		HX_STACK_VAR(tmp199,"tmp199");
								HX_STACK_LINE(3493)
								Float tmp200 = _this->c2->r2x;		HX_STACK_VAR(tmp200,"tmp200");
								HX_STACK_LINE(3493)
								Float tmp201 = _this->b2->angvel;		HX_STACK_VAR(tmp201,"tmp201");
								HX_STACK_LINE(3493)
								Float tmp202 = (tmp200 * tmp201);		HX_STACK_VAR(tmp202,"tmp202");
								HX_STACK_LINE(3493)
								Float tmp203 = (tmp199 + tmp202);		HX_STACK_VAR(tmp203,"tmp203");
								HX_STACK_LINE(3493)
								Float tmp204 = _this->b1->vely;		HX_STACK_VAR(tmp204,"tmp204");
								HX_STACK_LINE(3493)
								Float tmp205 = _this->c2->r1x;		HX_STACK_VAR(tmp205,"tmp205");
								HX_STACK_LINE(3493)
								Float tmp206 = _this->b1->angvel;		HX_STACK_VAR(tmp206,"tmp206");
								HX_STACK_LINE(3493)
								Float tmp207 = (tmp205 * tmp206);		HX_STACK_VAR(tmp207,"tmp207");
								HX_STACK_LINE(3493)
								Float tmp208 = (tmp204 + tmp207);		HX_STACK_VAR(tmp208,"tmp208");
								HX_STACK_LINE(3493)
								Float tmp209 = (tmp203 - tmp208);		HX_STACK_VAR(tmp209,"tmp209");
								HX_STACK_LINE(3493)
								v2y = tmp209;
								HX_STACK_LINE(3493)
								Float tmp210 = _this->c1->jnAcc;		HX_STACK_VAR(tmp210,"tmp210");
								HX_STACK_LINE(3493)
								Float ax = tmp210;		HX_STACK_VAR(ax,"ax");
								HX_STACK_LINE(3493)
								Float tmp211 = _this->c2->jnAcc;		HX_STACK_VAR(tmp211,"tmp211");
								HX_STACK_LINE(3493)
								Float ay = tmp211;		HX_STACK_VAR(ay,"ay");
								HX_STACK_LINE(3493)
								Float tmp212 = (v1x * _this->nx);		HX_STACK_VAR(tmp212,"tmp212");
								HX_STACK_LINE(3493)
								Float tmp213 = (v1y * _this->ny);		HX_STACK_VAR(tmp213,"tmp213");
								HX_STACK_LINE(3493)
								Float tmp214 = (tmp212 + tmp213);		HX_STACK_VAR(tmp214,"tmp214");
								HX_STACK_LINE(3493)
								Float tmp215 = _this->surfacey;		HX_STACK_VAR(tmp215,"tmp215");
								HX_STACK_LINE(3493)
								Float tmp216 = (tmp214 + tmp215);		HX_STACK_VAR(tmp216,"tmp216");
								HX_STACK_LINE(3493)
								Float tmp217 = _this->c1->bounce;		HX_STACK_VAR(tmp217,"tmp217");
								HX_STACK_LINE(3493)
								Float tmp218 = (tmp216 + tmp217);		HX_STACK_VAR(tmp218,"tmp218");
								HX_STACK_LINE(3493)
								Float tmp219 = (_this->Ka * ax);		HX_STACK_VAR(tmp219,"tmp219");
								HX_STACK_LINE(3493)
								Float tmp220 = (_this->Kb * ay);		HX_STACK_VAR(tmp220,"tmp220");
								HX_STACK_LINE(3493)
								Float tmp221 = (tmp219 + tmp220);		HX_STACK_VAR(tmp221,"tmp221");
								HX_STACK_LINE(3493)
								Float tmp222 = (tmp218 - tmp221);		HX_STACK_VAR(tmp222,"tmp222");
								HX_STACK_LINE(3493)
								Float jnx = tmp222;		HX_STACK_VAR(jnx,"jnx");
								HX_STACK_LINE(3493)
								Float tmp223 = (v2x * _this->nx);		HX_STACK_VAR(tmp223,"tmp223");
								HX_STACK_LINE(3493)
								Float tmp224 = (v2y * _this->ny);		HX_STACK_VAR(tmp224,"tmp224");
								HX_STACK_LINE(3493)
								Float tmp225 = (tmp223 + tmp224);		HX_STACK_VAR(tmp225,"tmp225");
								HX_STACK_LINE(3493)
								Float tmp226 = _this->surfacey;		HX_STACK_VAR(tmp226,"tmp226");
								HX_STACK_LINE(3493)
								Float tmp227 = (tmp225 + tmp226);		HX_STACK_VAR(tmp227,"tmp227");
								HX_STACK_LINE(3493)
								Float tmp228 = _this->c2->bounce;		HX_STACK_VAR(tmp228,"tmp228");
								HX_STACK_LINE(3493)
								Float tmp229 = (tmp227 + tmp228);		HX_STACK_VAR(tmp229,"tmp229");
								HX_STACK_LINE(3493)
								Float tmp230 = (_this->Kb * ax);		HX_STACK_VAR(tmp230,"tmp230");
								HX_STACK_LINE(3493)
								Float tmp231 = (_this->Kc * ay);		HX_STACK_VAR(tmp231,"tmp231");
								HX_STACK_LINE(3493)
								Float tmp232 = (tmp230 + tmp231);		HX_STACK_VAR(tmp232,"tmp232");
								HX_STACK_LINE(3493)
								Float tmp233 = (tmp229 - tmp232);		HX_STACK_VAR(tmp233,"tmp233");
								HX_STACK_LINE(3493)
								Float jny = tmp233;		HX_STACK_VAR(jny,"jny");
								HX_STACK_LINE(3493)
								Float tmp234 = (_this->kMassa * jnx);		HX_STACK_VAR(tmp234,"tmp234");
								HX_STACK_LINE(3493)
								Float tmp235 = (_this->kMassb * jny);		HX_STACK_VAR(tmp235,"tmp235");
								HX_STACK_LINE(3493)
								Float tmp236 = (tmp234 + tmp235);		HX_STACK_VAR(tmp236,"tmp236");
								HX_STACK_LINE(3493)
								Float tmp237 = -(tmp236);		HX_STACK_VAR(tmp237,"tmp237");
								HX_STACK_LINE(3493)
								Float xx = tmp237;		HX_STACK_VAR(xx,"xx");
								HX_STACK_LINE(3493)
								Float tmp238 = (_this->kMassb * jnx);		HX_STACK_VAR(tmp238,"tmp238");
								HX_STACK_LINE(3493)
								Float tmp239 = (_this->kMassc * jny);		HX_STACK_VAR(tmp239,"tmp239");
								HX_STACK_LINE(3493)
								Float tmp240 = (tmp238 + tmp239);		HX_STACK_VAR(tmp240,"tmp240");
								HX_STACK_LINE(3493)
								Float tmp241 = -(tmp240);		HX_STACK_VAR(tmp241,"tmp241");
								HX_STACK_LINE(3493)
								Float xy = tmp241;		HX_STACK_VAR(xy,"xy");
								HX_STACK_LINE(3493)
								bool tmp242 = (xx >= (int)0);		HX_STACK_VAR(tmp242,"tmp242");
								HX_STACK_LINE(3493)
								bool tmp243;		HX_STACK_VAR(tmp243,"tmp243");
								HX_STACK_LINE(3493)
								if ((tmp242)){
									HX_STACK_LINE(3493)
									tmp243 = (xy >= (int)0);
								}
								else{
									HX_STACK_LINE(3493)
									tmp243 = false;
								}
								HX_STACK_LINE(3493)
								if ((tmp243)){
									HX_STACK_LINE(3493)
									{
										HX_STACK_LINE(3493)
										Float tmp244 = (xx - ax);		HX_STACK_VAR(tmp244,"tmp244");
										HX_STACK_LINE(3493)
										jnx = tmp244;
										HX_STACK_LINE(3493)
										Float tmp245 = (xy - ay);		HX_STACK_VAR(tmp245,"tmp245");
										HX_STACK_LINE(3493)
										jny = tmp245;
									}
									HX_STACK_LINE(3493)
									_this->c1->jnAcc = xx;
									HX_STACK_LINE(3493)
									_this->c2->jnAcc = xy;
								}
								else{
									HX_STACK_LINE(3493)
									Float tmp244 = _this->c1->nMass;		HX_STACK_VAR(tmp244,"tmp244");
									HX_STACK_LINE(3493)
									Float tmp245 = -(tmp244);		HX_STACK_VAR(tmp245,"tmp245");
									HX_STACK_LINE(3493)
									Float tmp246 = jnx;		HX_STACK_VAR(tmp246,"tmp246");
									HX_STACK_LINE(3493)
									Float tmp247 = (tmp245 * tmp246);		HX_STACK_VAR(tmp247,"tmp247");
									HX_STACK_LINE(3493)
									xx = tmp247;
									HX_STACK_LINE(3493)
									bool tmp248 = (xx >= (int)0);		HX_STACK_VAR(tmp248,"tmp248");
									HX_STACK_LINE(3493)
									bool tmp249;		HX_STACK_VAR(tmp249,"tmp249");
									HX_STACK_LINE(3493)
									if ((tmp248)){
										HX_STACK_LINE(3493)
										Float tmp250 = (_this->Kb * xx);		HX_STACK_VAR(tmp250,"tmp250");
										HX_STACK_LINE(3493)
										Float tmp251 = tmp250;		HX_STACK_VAR(tmp251,"tmp251");
										HX_STACK_LINE(3493)
										Float tmp252 = jny;		HX_STACK_VAR(tmp252,"tmp252");
										HX_STACK_LINE(3493)
										Float tmp253 = (tmp251 + tmp252);		HX_STACK_VAR(tmp253,"tmp253");
										HX_STACK_LINE(3493)
										Float tmp254 = tmp253;		HX_STACK_VAR(tmp254,"tmp254");
										HX_STACK_LINE(3493)
										tmp249 = (tmp254 >= (int)0);
									}
									else{
										HX_STACK_LINE(3493)
										tmp249 = false;
									}
									HX_STACK_LINE(3493)
									if ((tmp249)){
										HX_STACK_LINE(3493)
										Float tmp250 = (xx - ax);		HX_STACK_VAR(tmp250,"tmp250");
										HX_STACK_LINE(3493)
										jnx = tmp250;
										HX_STACK_LINE(3493)
										Float tmp251 = ay;		HX_STACK_VAR(tmp251,"tmp251");
										HX_STACK_LINE(3493)
										Float tmp252 = -(tmp251);		HX_STACK_VAR(tmp252,"tmp252");
										HX_STACK_LINE(3493)
										jny = tmp252;
										HX_STACK_LINE(3493)
										_this->c1->jnAcc = xx;
										HX_STACK_LINE(3493)
										_this->c2->jnAcc = (int)0;
									}
									else{
										HX_STACK_LINE(3493)
										Float tmp250 = _this->c2->nMass;		HX_STACK_VAR(tmp250,"tmp250");
										HX_STACK_LINE(3493)
										Float tmp251 = -(tmp250);		HX_STACK_VAR(tmp251,"tmp251");
										HX_STACK_LINE(3493)
										Float tmp252 = jny;		HX_STACK_VAR(tmp252,"tmp252");
										HX_STACK_LINE(3493)
										Float tmp253 = (tmp251 * tmp252);		HX_STACK_VAR(tmp253,"tmp253");
										HX_STACK_LINE(3493)
										xy = tmp253;
										HX_STACK_LINE(3493)
										bool tmp254 = (xy >= (int)0);		HX_STACK_VAR(tmp254,"tmp254");
										HX_STACK_LINE(3493)
										bool tmp255;		HX_STACK_VAR(tmp255,"tmp255");
										HX_STACK_LINE(3493)
										if ((tmp254)){
											HX_STACK_LINE(3493)
											Float tmp256 = (_this->Kb * xy);		HX_STACK_VAR(tmp256,"tmp256");
											HX_STACK_LINE(3493)
											Float tmp257 = tmp256;		HX_STACK_VAR(tmp257,"tmp257");
											HX_STACK_LINE(3493)
											Float tmp258 = jnx;		HX_STACK_VAR(tmp258,"tmp258");
											HX_STACK_LINE(3493)
											Float tmp259 = (tmp257 + tmp258);		HX_STACK_VAR(tmp259,"tmp259");
											HX_STACK_LINE(3493)
											Float tmp260 = tmp259;		HX_STACK_VAR(tmp260,"tmp260");
											HX_STACK_LINE(3493)
											tmp255 = (tmp260 >= (int)0);
										}
										else{
											HX_STACK_LINE(3493)
											tmp255 = false;
										}
										HX_STACK_LINE(3493)
										if ((tmp255)){
											HX_STACK_LINE(3493)
											Float tmp256 = ax;		HX_STACK_VAR(tmp256,"tmp256");
											HX_STACK_LINE(3493)
											Float tmp257 = -(tmp256);		HX_STACK_VAR(tmp257,"tmp257");
											HX_STACK_LINE(3493)
											jnx = tmp257;
											HX_STACK_LINE(3493)
											Float tmp258 = (xy - ay);		HX_STACK_VAR(tmp258,"tmp258");
											HX_STACK_LINE(3493)
											jny = tmp258;
											HX_STACK_LINE(3493)
											_this->c1->jnAcc = (int)0;
											HX_STACK_LINE(3493)
											_this->c2->jnAcc = xy;
										}
										else{
											HX_STACK_LINE(3493)
											bool tmp256 = (jnx >= (int)0);		HX_STACK_VAR(tmp256,"tmp256");
											HX_STACK_LINE(3493)
											bool tmp257;		HX_STACK_VAR(tmp257,"tmp257");
											HX_STACK_LINE(3493)
											if ((tmp256)){
												HX_STACK_LINE(3493)
												tmp257 = (jny >= (int)0);
											}
											else{
												HX_STACK_LINE(3493)
												tmp257 = false;
											}
											HX_STACK_LINE(3493)
											if ((tmp257)){
												HX_STACK_LINE(3493)
												Float tmp258 = ax;		HX_STACK_VAR(tmp258,"tmp258");
												HX_STACK_LINE(3493)
												Float tmp259 = -(tmp258);		HX_STACK_VAR(tmp259,"tmp259");
												HX_STACK_LINE(3493)
												jnx = tmp259;
												HX_STACK_LINE(3493)
												Float tmp260 = ay;		HX_STACK_VAR(tmp260,"tmp260");
												HX_STACK_LINE(3493)
												Float tmp261 = -(tmp260);		HX_STACK_VAR(tmp261,"tmp261");
												HX_STACK_LINE(3493)
												jny = tmp261;
												HX_STACK_LINE(3493)
												Float tmp262 = _this->c2->jnAcc = (int)0;		HX_STACK_VAR(tmp262,"tmp262");
												HX_STACK_LINE(3493)
												_this->c1->jnAcc = tmp262;
											}
											else{
												HX_STACK_LINE(3493)
												jnx = (int)0;
												HX_STACK_LINE(3493)
												jny = (int)0;
											}
										}
									}
								}
								HX_STACK_LINE(3493)
								Float tmp244 = (jnx + jny);		HX_STACK_VAR(tmp244,"tmp244");
								HX_STACK_LINE(3493)
								j = tmp244;
								HX_STACK_LINE(3493)
								Float tmp245 = (_this->nx * j);		HX_STACK_VAR(tmp245,"tmp245");
								HX_STACK_LINE(3493)
								jx = tmp245;
								HX_STACK_LINE(3493)
								Float tmp246 = (_this->ny * j);		HX_STACK_VAR(tmp246,"tmp246");
								HX_STACK_LINE(3493)
								jy = tmp246;
								HX_STACK_LINE(3493)
								Float tmp247 = jx;		HX_STACK_VAR(tmp247,"tmp247");
								HX_STACK_LINE(3493)
								Float tmp248 = _this->b2->imass;		HX_STACK_VAR(tmp248,"tmp248");
								HX_STACK_LINE(3493)
								Float tmp249 = (tmp247 * tmp248);		HX_STACK_VAR(tmp249,"tmp249");
								HX_STACK_LINE(3493)
								hx::AddEq(_this->b2->velx,tmp249);
								HX_STACK_LINE(3493)
								Float tmp250 = jy;		HX_STACK_VAR(tmp250,"tmp250");
								HX_STACK_LINE(3493)
								Float tmp251 = _this->b2->imass;		HX_STACK_VAR(tmp251,"tmp251");
								HX_STACK_LINE(3493)
								Float tmp252 = (tmp250 * tmp251);		HX_STACK_VAR(tmp252,"tmp252");
								HX_STACK_LINE(3493)
								hx::AddEq(_this->b2->vely,tmp252);
								HX_STACK_LINE(3493)
								Float tmp253 = jx;		HX_STACK_VAR(tmp253,"tmp253");
								HX_STACK_LINE(3493)
								Float tmp254 = _this->b1->imass;		HX_STACK_VAR(tmp254,"tmp254");
								HX_STACK_LINE(3493)
								Float tmp255 = (tmp253 * tmp254);		HX_STACK_VAR(tmp255,"tmp255");
								HX_STACK_LINE(3493)
								hx::SubEq(_this->b1->velx,tmp255);
								HX_STACK_LINE(3493)
								Float tmp256 = jy;		HX_STACK_VAR(tmp256,"tmp256");
								HX_STACK_LINE(3493)
								Float tmp257 = _this->b1->imass;		HX_STACK_VAR(tmp257,"tmp257");
								HX_STACK_LINE(3493)
								Float tmp258 = (tmp256 * tmp257);		HX_STACK_VAR(tmp258,"tmp258");
								HX_STACK_LINE(3493)
								hx::SubEq(_this->b1->vely,tmp258);
								HX_STACK_LINE(3493)
								Float tmp259 = (_this->rn1b * jnx);		HX_STACK_VAR(tmp259,"tmp259");
								HX_STACK_LINE(3493)
								Float tmp260 = (_this->rn2b * jny);		HX_STACK_VAR(tmp260,"tmp260");
								HX_STACK_LINE(3493)
								Float tmp261 = (tmp259 + tmp260);		HX_STACK_VAR(tmp261,"tmp261");
								HX_STACK_LINE(3493)
								Float tmp262 = _this->b2->iinertia;		HX_STACK_VAR(tmp262,"tmp262");
								HX_STACK_LINE(3493)
								Float tmp263 = (tmp261 * tmp262);		HX_STACK_VAR(tmp263,"tmp263");
								HX_STACK_LINE(3493)
								hx::AddEq(_this->b2->angvel,tmp263);
								HX_STACK_LINE(3493)
								Float tmp264 = (_this->rn1a * jnx);		HX_STACK_VAR(tmp264,"tmp264");
								HX_STACK_LINE(3493)
								Float tmp265 = (_this->rn2a * jny);		HX_STACK_VAR(tmp265,"tmp265");
								HX_STACK_LINE(3493)
								Float tmp266 = (tmp264 + tmp265);		HX_STACK_VAR(tmp266,"tmp266");
								HX_STACK_LINE(3493)
								Float tmp267 = _this->b1->iinertia;		HX_STACK_VAR(tmp267,"tmp267");
								HX_STACK_LINE(3493)
								Float tmp268 = (tmp266 * tmp267);		HX_STACK_VAR(tmp268,"tmp268");
								HX_STACK_LINE(3493)
								hx::SubEq(_this->b1->angvel,tmp268);
							}
							else{
								HX_STACK_LINE(3493)
								bool tmp95 = (_this->radius != ((Float)0.0));		HX_STACK_VAR(tmp95,"tmp95");
								HX_STACK_LINE(3493)
								if ((tmp95)){
									HX_STACK_LINE(3493)
									Float tmp96 = _this->b2->angvel;		HX_STACK_VAR(tmp96,"tmp96");
									HX_STACK_LINE(3493)
									Float tmp97 = _this->b1->angvel;		HX_STACK_VAR(tmp97,"tmp97");
									HX_STACK_LINE(3493)
									Float tmp98 = (tmp96 - tmp97);		HX_STACK_VAR(tmp98,"tmp98");
									HX_STACK_LINE(3493)
									Float dw = tmp98;		HX_STACK_VAR(dw,"dw");
									HX_STACK_LINE(3493)
									Float tmp99 = (dw * _this->rMass);		HX_STACK_VAR(tmp99,"tmp99");
									HX_STACK_LINE(3493)
									j = tmp99;
									HX_STACK_LINE(3493)
									Float tmp100 = _this->rfric;		HX_STACK_VAR(tmp100,"tmp100");
									HX_STACK_LINE(3493)
									Float tmp101 = _this->c1->jnAcc;		HX_STACK_VAR(tmp101,"tmp101");
									HX_STACK_LINE(3493)
									Float tmp102 = (tmp100 * tmp101);		HX_STACK_VAR(tmp102,"tmp102");
									HX_STACK_LINE(3493)
									jMax = tmp102;
									HX_STACK_LINE(3493)
									jOld = _this->jrAcc;
									HX_STACK_LINE(3493)
									hx::SubEq(_this->jrAcc,j);
									HX_STACK_LINE(3493)
									bool tmp103 = (_this->jrAcc > jMax);		HX_STACK_VAR(tmp103,"tmp103");
									HX_STACK_LINE(3493)
									if ((tmp103)){
										HX_STACK_LINE(3493)
										_this->jrAcc = jMax;
									}
									else{
										HX_STACK_LINE(3493)
										Float tmp104 = _this->jrAcc;		HX_STACK_VAR(tmp104,"tmp104");
										HX_STACK_LINE(3493)
										Float tmp105 = jMax;		HX_STACK_VAR(tmp105,"tmp105");
										HX_STACK_LINE(3493)
										Float tmp106 = -(tmp105);		HX_STACK_VAR(tmp106,"tmp106");
										HX_STACK_LINE(3493)
										bool tmp107 = (tmp104 < tmp106);		HX_STACK_VAR(tmp107,"tmp107");
										HX_STACK_LINE(3493)
										if ((tmp107)){
											HX_STACK_LINE(3493)
											Float tmp108 = jMax;		HX_STACK_VAR(tmp108,"tmp108");
											HX_STACK_LINE(3493)
											Float tmp109 = -(tmp108);		HX_STACK_VAR(tmp109,"tmp109");
											HX_STACK_LINE(3493)
											_this->jrAcc = tmp109;
										}
									}
									HX_STACK_LINE(3493)
									Float tmp104 = (_this->jrAcc - jOld);		HX_STACK_VAR(tmp104,"tmp104");
									HX_STACK_LINE(3493)
									j = tmp104;
									HX_STACK_LINE(3493)
									Float tmp105 = j;		HX_STACK_VAR(tmp105,"tmp105");
									HX_STACK_LINE(3493)
									Float tmp106 = _this->b2->iinertia;		HX_STACK_VAR(tmp106,"tmp106");
									HX_STACK_LINE(3493)
									Float tmp107 = (tmp105 * tmp106);		HX_STACK_VAR(tmp107,"tmp107");
									HX_STACK_LINE(3493)
									hx::AddEq(_this->b2->angvel,tmp107);
									HX_STACK_LINE(3493)
									Float tmp108 = j;		HX_STACK_VAR(tmp108,"tmp108");
									HX_STACK_LINE(3493)
									Float tmp109 = _this->b1->iinertia;		HX_STACK_VAR(tmp109,"tmp109");
									HX_STACK_LINE(3493)
									Float tmp110 = (tmp108 * tmp109);		HX_STACK_VAR(tmp110,"tmp110");
									HX_STACK_LINE(3493)
									hx::SubEq(_this->b1->angvel,tmp110);
								}
								HX_STACK_LINE(3493)
								Float tmp96 = _this->k1x;		HX_STACK_VAR(tmp96,"tmp96");
								HX_STACK_LINE(3493)
								Float tmp97 = _this->b2->velx;		HX_STACK_VAR(tmp97,"tmp97");
								HX_STACK_LINE(3493)
								Float tmp98 = (tmp96 + tmp97);		HX_STACK_VAR(tmp98,"tmp98");
								HX_STACK_LINE(3493)
								Float tmp99 = _this->c1->r2y;		HX_STACK_VAR(tmp99,"tmp99");
								HX_STACK_LINE(3493)
								Float tmp100 = _this->b2->angvel;		HX_STACK_VAR(tmp100,"tmp100");
								HX_STACK_LINE(3493)
								Float tmp101 = (tmp99 * tmp100);		HX_STACK_VAR(tmp101,"tmp101");
								HX_STACK_LINE(3493)
								Float tmp102 = (tmp98 - tmp101);		HX_STACK_VAR(tmp102,"tmp102");
								HX_STACK_LINE(3493)
								Float tmp103 = _this->b1->velx;		HX_STACK_VAR(tmp103,"tmp103");
								HX_STACK_LINE(3493)
								Float tmp104 = _this->c1->r1y;		HX_STACK_VAR(tmp104,"tmp104");
								HX_STACK_LINE(3493)
								Float tmp105 = _this->b1->angvel;		HX_STACK_VAR(tmp105,"tmp105");
								HX_STACK_LINE(3493)
								Float tmp106 = (tmp104 * tmp105);		HX_STACK_VAR(tmp106,"tmp106");
								HX_STACK_LINE(3493)
								Float tmp107 = (tmp103 - tmp106);		HX_STACK_VAR(tmp107,"tmp107");
								HX_STACK_LINE(3493)
								Float tmp108 = (tmp102 - tmp107);		HX_STACK_VAR(tmp108,"tmp108");
								HX_STACK_LINE(3493)
								v1x = tmp108;
								HX_STACK_LINE(3493)
								Float tmp109 = _this->k1y;		HX_STACK_VAR(tmp109,"tmp109");
								HX_STACK_LINE(3493)
								Float tmp110 = _this->b2->vely;		HX_STACK_VAR(tmp110,"tmp110");
								HX_STACK_LINE(3493)
								Float tmp111 = (tmp109 + tmp110);		HX_STACK_VAR(tmp111,"tmp111");
								HX_STACK_LINE(3493)
								Float tmp112 = _this->c1->r2x;		HX_STACK_VAR(tmp112,"tmp112");
								HX_STACK_LINE(3493)
								Float tmp113 = _this->b2->angvel;		HX_STACK_VAR(tmp113,"tmp113");
								HX_STACK_LINE(3493)
								Float tmp114 = (tmp112 * tmp113);		HX_STACK_VAR(tmp114,"tmp114");
								HX_STACK_LINE(3493)
								Float tmp115 = (tmp111 + tmp114);		HX_STACK_VAR(tmp115,"tmp115");
								HX_STACK_LINE(3493)
								Float tmp116 = _this->b1->vely;		HX_STACK_VAR(tmp116,"tmp116");
								HX_STACK_LINE(3493)
								Float tmp117 = _this->c1->r1x;		HX_STACK_VAR(tmp117,"tmp117");
								HX_STACK_LINE(3493)
								Float tmp118 = _this->b1->angvel;		HX_STACK_VAR(tmp118,"tmp118");
								HX_STACK_LINE(3493)
								Float tmp119 = (tmp117 * tmp118);		HX_STACK_VAR(tmp119,"tmp119");
								HX_STACK_LINE(3493)
								Float tmp120 = (tmp116 + tmp119);		HX_STACK_VAR(tmp120,"tmp120");
								HX_STACK_LINE(3493)
								Float tmp121 = (tmp115 - tmp120);		HX_STACK_VAR(tmp121,"tmp121");
								HX_STACK_LINE(3493)
								v1y = tmp121;
								HX_STACK_LINE(3493)
								Float tmp122 = _this->c1->bounce;		HX_STACK_VAR(tmp122,"tmp122");
								HX_STACK_LINE(3493)
								Float tmp123 = (_this->nx * v1x);		HX_STACK_VAR(tmp123,"tmp123");
								HX_STACK_LINE(3493)
								Float tmp124 = (_this->ny * v1y);		HX_STACK_VAR(tmp124,"tmp124");
								HX_STACK_LINE(3493)
								Float tmp125 = (tmp123 + tmp124);		HX_STACK_VAR(tmp125,"tmp125");
								HX_STACK_LINE(3493)
								Float tmp126 = (tmp122 + tmp125);		HX_STACK_VAR(tmp126,"tmp126");
								HX_STACK_LINE(3493)
								Float tmp127 = _this->surfacey;		HX_STACK_VAR(tmp127,"tmp127");
								HX_STACK_LINE(3493)
								Float tmp128 = (tmp126 + tmp127);		HX_STACK_VAR(tmp128,"tmp128");
								HX_STACK_LINE(3493)
								Float tmp129 = _this->c1->nMass;		HX_STACK_VAR(tmp129,"tmp129");
								HX_STACK_LINE(3493)
								Float tmp130 = (tmp128 * tmp129);		HX_STACK_VAR(tmp130,"tmp130");
								HX_STACK_LINE(3493)
								j = tmp130;
								HX_STACK_LINE(3493)
								Float tmp131 = _this->c1->jnAcc;		HX_STACK_VAR(tmp131,"tmp131");
								HX_STACK_LINE(3493)
								jOld = tmp131;
								HX_STACK_LINE(3493)
								Float tmp132 = (jOld - j);		HX_STACK_VAR(tmp132,"tmp132");
								HX_STACK_LINE(3493)
								cjAcc = tmp132;
								HX_STACK_LINE(3493)
								bool tmp133 = (cjAcc < ((Float)0.0));		HX_STACK_VAR(tmp133,"tmp133");
								HX_STACK_LINE(3493)
								if ((tmp133)){
									HX_STACK_LINE(3493)
									cjAcc = ((Float)0.0);
								}
								HX_STACK_LINE(3493)
								Float tmp134 = (cjAcc - jOld);		HX_STACK_VAR(tmp134,"tmp134");
								HX_STACK_LINE(3493)
								j = tmp134;
								HX_STACK_LINE(3493)
								_this->c1->jnAcc = cjAcc;
								HX_STACK_LINE(3493)
								Float tmp135 = (_this->nx * j);		HX_STACK_VAR(tmp135,"tmp135");
								HX_STACK_LINE(3493)
								jx = tmp135;
								HX_STACK_LINE(3493)
								Float tmp136 = (_this->ny * j);		HX_STACK_VAR(tmp136,"tmp136");
								HX_STACK_LINE(3493)
								jy = tmp136;
								HX_STACK_LINE(3493)
								Float tmp137 = jx;		HX_STACK_VAR(tmp137,"tmp137");
								HX_STACK_LINE(3493)
								Float tmp138 = _this->b2->imass;		HX_STACK_VAR(tmp138,"tmp138");
								HX_STACK_LINE(3493)
								Float tmp139 = (tmp137 * tmp138);		HX_STACK_VAR(tmp139,"tmp139");
								HX_STACK_LINE(3493)
								hx::AddEq(_this->b2->velx,tmp139);
								HX_STACK_LINE(3493)
								Float tmp140 = jy;		HX_STACK_VAR(tmp140,"tmp140");
								HX_STACK_LINE(3493)
								Float tmp141 = _this->b2->imass;		HX_STACK_VAR(tmp141,"tmp141");
								HX_STACK_LINE(3493)
								Float tmp142 = (tmp140 * tmp141);		HX_STACK_VAR(tmp142,"tmp142");
								HX_STACK_LINE(3493)
								hx::AddEq(_this->b2->vely,tmp142);
								HX_STACK_LINE(3493)
								Float tmp143 = jx;		HX_STACK_VAR(tmp143,"tmp143");
								HX_STACK_LINE(3493)
								Float tmp144 = _this->b1->imass;		HX_STACK_VAR(tmp144,"tmp144");
								HX_STACK_LINE(3493)
								Float tmp145 = (tmp143 * tmp144);		HX_STACK_VAR(tmp145,"tmp145");
								HX_STACK_LINE(3493)
								hx::SubEq(_this->b1->velx,tmp145);
								HX_STACK_LINE(3493)
								Float tmp146 = jy;		HX_STACK_VAR(tmp146,"tmp146");
								HX_STACK_LINE(3493)
								Float tmp147 = _this->b1->imass;		HX_STACK_VAR(tmp147,"tmp147");
								HX_STACK_LINE(3493)
								Float tmp148 = (tmp146 * tmp147);		HX_STACK_VAR(tmp148,"tmp148");
								HX_STACK_LINE(3493)
								hx::SubEq(_this->b1->vely,tmp148);
								HX_STACK_LINE(3493)
								Float tmp149 = (_this->rn1b * j);		HX_STACK_VAR(tmp149,"tmp149");
								HX_STACK_LINE(3493)
								Float tmp150 = _this->b2->iinertia;		HX_STACK_VAR(tmp150,"tmp150");
								HX_STACK_LINE(3493)
								Float tmp151 = (tmp149 * tmp150);		HX_STACK_VAR(tmp151,"tmp151");
								HX_STACK_LINE(3493)
								hx::AddEq(_this->b2->angvel,tmp151);
								HX_STACK_LINE(3493)
								Float tmp152 = (_this->rn1a * j);		HX_STACK_VAR(tmp152,"tmp152");
								HX_STACK_LINE(3493)
								Float tmp153 = _this->b1->iinertia;		HX_STACK_VAR(tmp153,"tmp153");
								HX_STACK_LINE(3493)
								Float tmp154 = (tmp152 * tmp153);		HX_STACK_VAR(tmp154,"tmp154");
								HX_STACK_LINE(3493)
								hx::SubEq(_this->b1->angvel,tmp154);
							}
						}
						HX_STACK_LINE(3494)
						{
							HX_STACK_LINE(3494)
							::zpp_nape::dynamics::ZPP_ColArbiter _this = arb->colarb;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(3494)
							Float jx;		HX_STACK_VAR(jx,"jx");
							HX_STACK_LINE(3494)
							Float jy;		HX_STACK_VAR(jy,"jy");
							HX_STACK_LINE(3494)
							Float j;		HX_STACK_VAR(j,"j");
							HX_STACK_LINE(3494)
							Float jMax;		HX_STACK_VAR(jMax,"jMax");
							HX_STACK_LINE(3494)
							Float jOld;		HX_STACK_VAR(jOld,"jOld");
							HX_STACK_LINE(3494)
							Float cjAcc;		HX_STACK_VAR(cjAcc,"cjAcc");
							HX_STACK_LINE(3494)
							Float tmp31 = _this->k1x;		HX_STACK_VAR(tmp31,"tmp31");
							HX_STACK_LINE(3494)
							Float tmp32 = _this->b2->velx;		HX_STACK_VAR(tmp32,"tmp32");
							HX_STACK_LINE(3494)
							Float tmp33 = (tmp31 + tmp32);		HX_STACK_VAR(tmp33,"tmp33");
							HX_STACK_LINE(3494)
							Float tmp34 = _this->c1->r2y;		HX_STACK_VAR(tmp34,"tmp34");
							HX_STACK_LINE(3494)
							Float tmp35 = _this->b2->angvel;		HX_STACK_VAR(tmp35,"tmp35");
							HX_STACK_LINE(3494)
							Float tmp36 = (tmp34 * tmp35);		HX_STACK_VAR(tmp36,"tmp36");
							HX_STACK_LINE(3494)
							Float tmp37 = (tmp33 - tmp36);		HX_STACK_VAR(tmp37,"tmp37");
							HX_STACK_LINE(3494)
							Float tmp38 = _this->b1->velx;		HX_STACK_VAR(tmp38,"tmp38");
							HX_STACK_LINE(3494)
							Float tmp39 = _this->c1->r1y;		HX_STACK_VAR(tmp39,"tmp39");
							HX_STACK_LINE(3494)
							Float tmp40 = _this->b1->angvel;		HX_STACK_VAR(tmp40,"tmp40");
							HX_STACK_LINE(3494)
							Float tmp41 = (tmp39 * tmp40);		HX_STACK_VAR(tmp41,"tmp41");
							HX_STACK_LINE(3494)
							Float tmp42 = (tmp38 - tmp41);		HX_STACK_VAR(tmp42,"tmp42");
							HX_STACK_LINE(3494)
							Float tmp43 = (tmp37 - tmp42);		HX_STACK_VAR(tmp43,"tmp43");
							HX_STACK_LINE(3494)
							Float v1x = tmp43;		HX_STACK_VAR(v1x,"v1x");
							HX_STACK_LINE(3494)
							Float tmp44 = _this->k1y;		HX_STACK_VAR(tmp44,"tmp44");
							HX_STACK_LINE(3494)
							Float tmp45 = _this->b2->vely;		HX_STACK_VAR(tmp45,"tmp45");
							HX_STACK_LINE(3494)
							Float tmp46 = (tmp44 + tmp45);		HX_STACK_VAR(tmp46,"tmp46");
							HX_STACK_LINE(3494)
							Float tmp47 = _this->c1->r2x;		HX_STACK_VAR(tmp47,"tmp47");
							HX_STACK_LINE(3494)
							Float tmp48 = _this->b2->angvel;		HX_STACK_VAR(tmp48,"tmp48");
							HX_STACK_LINE(3494)
							Float tmp49 = (tmp47 * tmp48);		HX_STACK_VAR(tmp49,"tmp49");
							HX_STACK_LINE(3494)
							Float tmp50 = (tmp46 + tmp49);		HX_STACK_VAR(tmp50,"tmp50");
							HX_STACK_LINE(3494)
							Float tmp51 = _this->b1->vely;		HX_STACK_VAR(tmp51,"tmp51");
							HX_STACK_LINE(3494)
							Float tmp52 = _this->c1->r1x;		HX_STACK_VAR(tmp52,"tmp52");
							HX_STACK_LINE(3494)
							Float tmp53 = _this->b1->angvel;		HX_STACK_VAR(tmp53,"tmp53");
							HX_STACK_LINE(3494)
							Float tmp54 = (tmp52 * tmp53);		HX_STACK_VAR(tmp54,"tmp54");
							HX_STACK_LINE(3494)
							Float tmp55 = (tmp51 + tmp54);		HX_STACK_VAR(tmp55,"tmp55");
							HX_STACK_LINE(3494)
							Float tmp56 = (tmp50 - tmp55);		HX_STACK_VAR(tmp56,"tmp56");
							HX_STACK_LINE(3494)
							Float v1y = tmp56;		HX_STACK_VAR(v1y,"v1y");
							HX_STACK_LINE(3494)
							Float tmp57 = (v1y * _this->nx);		HX_STACK_VAR(tmp57,"tmp57");
							HX_STACK_LINE(3494)
							Float tmp58 = (v1x * _this->ny);		HX_STACK_VAR(tmp58,"tmp58");
							HX_STACK_LINE(3494)
							Float tmp59 = (tmp57 - tmp58);		HX_STACK_VAR(tmp59,"tmp59");
							HX_STACK_LINE(3494)
							Float tmp60 = _this->surfacex;		HX_STACK_VAR(tmp60,"tmp60");
							HX_STACK_LINE(3494)
							Float tmp61 = (tmp59 + tmp60);		HX_STACK_VAR(tmp61,"tmp61");
							HX_STACK_LINE(3494)
							Float tmp62 = _this->c1->tMass;		HX_STACK_VAR(tmp62,"tmp62");
							HX_STACK_LINE(3494)
							Float tmp63 = (tmp61 * tmp62);		HX_STACK_VAR(tmp63,"tmp63");
							HX_STACK_LINE(3494)
							j = tmp63;
							HX_STACK_LINE(3494)
							Float tmp64 = _this->c1->friction;		HX_STACK_VAR(tmp64,"tmp64");
							HX_STACK_LINE(3494)
							Float tmp65 = _this->c1->jnAcc;		HX_STACK_VAR(tmp65,"tmp65");
							HX_STACK_LINE(3494)
							Float tmp66 = (tmp64 * tmp65);		HX_STACK_VAR(tmp66,"tmp66");
							HX_STACK_LINE(3494)
							jMax = tmp66;
							HX_STACK_LINE(3494)
							Float tmp67 = _this->c1->jtAcc;		HX_STACK_VAR(tmp67,"tmp67");
							HX_STACK_LINE(3494)
							jOld = tmp67;
							HX_STACK_LINE(3494)
							Float tmp68 = (jOld - j);		HX_STACK_VAR(tmp68,"tmp68");
							HX_STACK_LINE(3494)
							cjAcc = tmp68;
							HX_STACK_LINE(3494)
							bool tmp69 = (cjAcc > jMax);		HX_STACK_VAR(tmp69,"tmp69");
							HX_STACK_LINE(3494)
							if ((tmp69)){
								HX_STACK_LINE(3494)
								cjAcc = jMax;
							}
							else{
								HX_STACK_LINE(3494)
								Float tmp70 = cjAcc;		HX_STACK_VAR(tmp70,"tmp70");
								HX_STACK_LINE(3494)
								Float tmp71 = jMax;		HX_STACK_VAR(tmp71,"tmp71");
								HX_STACK_LINE(3494)
								Float tmp72 = -(tmp71);		HX_STACK_VAR(tmp72,"tmp72");
								HX_STACK_LINE(3494)
								bool tmp73 = (tmp70 < tmp72);		HX_STACK_VAR(tmp73,"tmp73");
								HX_STACK_LINE(3494)
								if ((tmp73)){
									HX_STACK_LINE(3494)
									Float tmp74 = jMax;		HX_STACK_VAR(tmp74,"tmp74");
									HX_STACK_LINE(3494)
									Float tmp75 = -(tmp74);		HX_STACK_VAR(tmp75,"tmp75");
									HX_STACK_LINE(3494)
									cjAcc = tmp75;
								}
							}
							HX_STACK_LINE(3494)
							Float tmp70 = (cjAcc - jOld);		HX_STACK_VAR(tmp70,"tmp70");
							HX_STACK_LINE(3494)
							j = tmp70;
							HX_STACK_LINE(3494)
							_this->c1->jtAcc = cjAcc;
							HX_STACK_LINE(3494)
							Float tmp71 = _this->ny;		HX_STACK_VAR(tmp71,"tmp71");
							HX_STACK_LINE(3494)
							Float tmp72 = -(tmp71);		HX_STACK_VAR(tmp72,"tmp72");
							HX_STACK_LINE(3494)
							Float tmp73 = j;		HX_STACK_VAR(tmp73,"tmp73");
							HX_STACK_LINE(3494)
							Float tmp74 = (tmp72 * tmp73);		HX_STACK_VAR(tmp74,"tmp74");
							HX_STACK_LINE(3494)
							jx = tmp74;
							HX_STACK_LINE(3494)
							Float tmp75 = (_this->nx * j);		HX_STACK_VAR(tmp75,"tmp75");
							HX_STACK_LINE(3494)
							jy = tmp75;
							HX_STACK_LINE(3494)
							Float tmp76 = jx;		HX_STACK_VAR(tmp76,"tmp76");
							HX_STACK_LINE(3494)
							Float tmp77 = _this->b2->imass;		HX_STACK_VAR(tmp77,"tmp77");
							HX_STACK_LINE(3494)
							Float tmp78 = (tmp76 * tmp77);		HX_STACK_VAR(tmp78,"tmp78");
							HX_STACK_LINE(3494)
							hx::AddEq(_this->b2->velx,tmp78);
							HX_STACK_LINE(3494)
							Float tmp79 = jy;		HX_STACK_VAR(tmp79,"tmp79");
							HX_STACK_LINE(3494)
							Float tmp80 = _this->b2->imass;		HX_STACK_VAR(tmp80,"tmp80");
							HX_STACK_LINE(3494)
							Float tmp81 = (tmp79 * tmp80);		HX_STACK_VAR(tmp81,"tmp81");
							HX_STACK_LINE(3494)
							hx::AddEq(_this->b2->vely,tmp81);
							HX_STACK_LINE(3494)
							Float tmp82 = jx;		HX_STACK_VAR(tmp82,"tmp82");
							HX_STACK_LINE(3494)
							Float tmp83 = _this->b1->imass;		HX_STACK_VAR(tmp83,"tmp83");
							HX_STACK_LINE(3494)
							Float tmp84 = (tmp82 * tmp83);		HX_STACK_VAR(tmp84,"tmp84");
							HX_STACK_LINE(3494)
							hx::SubEq(_this->b1->velx,tmp84);
							HX_STACK_LINE(3494)
							Float tmp85 = jy;		HX_STACK_VAR(tmp85,"tmp85");
							HX_STACK_LINE(3494)
							Float tmp86 = _this->b1->imass;		HX_STACK_VAR(tmp86,"tmp86");
							HX_STACK_LINE(3494)
							Float tmp87 = (tmp85 * tmp86);		HX_STACK_VAR(tmp87,"tmp87");
							HX_STACK_LINE(3494)
							hx::SubEq(_this->b1->vely,tmp87);
							HX_STACK_LINE(3494)
							Float tmp88 = (_this->rt1b * j);		HX_STACK_VAR(tmp88,"tmp88");
							HX_STACK_LINE(3494)
							Float tmp89 = _this->b2->iinertia;		HX_STACK_VAR(tmp89,"tmp89");
							HX_STACK_LINE(3494)
							Float tmp90 = (tmp88 * tmp89);		HX_STACK_VAR(tmp90,"tmp90");
							HX_STACK_LINE(3494)
							hx::AddEq(_this->b2->angvel,tmp90);
							HX_STACK_LINE(3494)
							Float tmp91 = (_this->rt1a * j);		HX_STACK_VAR(tmp91,"tmp91");
							HX_STACK_LINE(3494)
							Float tmp92 = _this->b1->iinertia;		HX_STACK_VAR(tmp92,"tmp92");
							HX_STACK_LINE(3494)
							Float tmp93 = (tmp91 * tmp92);		HX_STACK_VAR(tmp93,"tmp93");
							HX_STACK_LINE(3494)
							hx::SubEq(_this->b1->angvel,tmp93);
							HX_STACK_LINE(3494)
							bool tmp94 = _this->hc2;		HX_STACK_VAR(tmp94,"tmp94");
							HX_STACK_LINE(3494)
							if ((tmp94)){
								HX_STACK_LINE(3494)
								Float tmp95 = _this->k2x;		HX_STACK_VAR(tmp95,"tmp95");
								HX_STACK_LINE(3494)
								Float tmp96 = _this->b2->velx;		HX_STACK_VAR(tmp96,"tmp96");
								HX_STACK_LINE(3494)
								Float tmp97 = (tmp95 + tmp96);		HX_STACK_VAR(tmp97,"tmp97");
								HX_STACK_LINE(3494)
								Float tmp98 = _this->c2->r2y;		HX_STACK_VAR(tmp98,"tmp98");
								HX_STACK_LINE(3494)
								Float tmp99 = _this->b2->angvel;		HX_STACK_VAR(tmp99,"tmp99");
								HX_STACK_LINE(3494)
								Float tmp100 = (tmp98 * tmp99);		HX_STACK_VAR(tmp100,"tmp100");
								HX_STACK_LINE(3494)
								Float tmp101 = (tmp97 - tmp100);		HX_STACK_VAR(tmp101,"tmp101");
								HX_STACK_LINE(3494)
								Float tmp102 = _this->b1->velx;		HX_STACK_VAR(tmp102,"tmp102");
								HX_STACK_LINE(3494)
								Float tmp103 = _this->c2->r1y;		HX_STACK_VAR(tmp103,"tmp103");
								HX_STACK_LINE(3494)
								Float tmp104 = _this->b1->angvel;		HX_STACK_VAR(tmp104,"tmp104");
								HX_STACK_LINE(3494)
								Float tmp105 = (tmp103 * tmp104);		HX_STACK_VAR(tmp105,"tmp105");
								HX_STACK_LINE(3494)
								Float tmp106 = (tmp102 - tmp105);		HX_STACK_VAR(tmp106,"tmp106");
								HX_STACK_LINE(3494)
								Float tmp107 = (tmp101 - tmp106);		HX_STACK_VAR(tmp107,"tmp107");
								HX_STACK_LINE(3494)
								Float v2x = tmp107;		HX_STACK_VAR(v2x,"v2x");
								HX_STACK_LINE(3494)
								Float tmp108 = _this->k2y;		HX_STACK_VAR(tmp108,"tmp108");
								HX_STACK_LINE(3494)
								Float tmp109 = _this->b2->vely;		HX_STACK_VAR(tmp109,"tmp109");
								HX_STACK_LINE(3494)
								Float tmp110 = (tmp108 + tmp109);		HX_STACK_VAR(tmp110,"tmp110");
								HX_STACK_LINE(3494)
								Float tmp111 = _this->c2->r2x;		HX_STACK_VAR(tmp111,"tmp111");
								HX_STACK_LINE(3494)
								Float tmp112 = _this->b2->angvel;		HX_STACK_VAR(tmp112,"tmp112");
								HX_STACK_LINE(3494)
								Float tmp113 = (tmp111 * tmp112);		HX_STACK_VAR(tmp113,"tmp113");
								HX_STACK_LINE(3494)
								Float tmp114 = (tmp110 + tmp113);		HX_STACK_VAR(tmp114,"tmp114");
								HX_STACK_LINE(3494)
								Float tmp115 = _this->b1->vely;		HX_STACK_VAR(tmp115,"tmp115");
								HX_STACK_LINE(3494)
								Float tmp116 = _this->c2->r1x;		HX_STACK_VAR(tmp116,"tmp116");
								HX_STACK_LINE(3494)
								Float tmp117 = _this->b1->angvel;		HX_STACK_VAR(tmp117,"tmp117");
								HX_STACK_LINE(3494)
								Float tmp118 = (tmp116 * tmp117);		HX_STACK_VAR(tmp118,"tmp118");
								HX_STACK_LINE(3494)
								Float tmp119 = (tmp115 + tmp118);		HX_STACK_VAR(tmp119,"tmp119");
								HX_STACK_LINE(3494)
								Float tmp120 = (tmp114 - tmp119);		HX_STACK_VAR(tmp120,"tmp120");
								HX_STACK_LINE(3494)
								Float v2y = tmp120;		HX_STACK_VAR(v2y,"v2y");
								HX_STACK_LINE(3494)
								Float tmp121 = (v2y * _this->nx);		HX_STACK_VAR(tmp121,"tmp121");
								HX_STACK_LINE(3494)
								Float tmp122 = (v2x * _this->ny);		HX_STACK_VAR(tmp122,"tmp122");
								HX_STACK_LINE(3494)
								Float tmp123 = (tmp121 - tmp122);		HX_STACK_VAR(tmp123,"tmp123");
								HX_STACK_LINE(3494)
								Float tmp124 = _this->surfacex;		HX_STACK_VAR(tmp124,"tmp124");
								HX_STACK_LINE(3494)
								Float tmp125 = (tmp123 + tmp124);		HX_STACK_VAR(tmp125,"tmp125");
								HX_STACK_LINE(3494)
								Float tmp126 = _this->c2->tMass;		HX_STACK_VAR(tmp126,"tmp126");
								HX_STACK_LINE(3494)
								Float tmp127 = (tmp125 * tmp126);		HX_STACK_VAR(tmp127,"tmp127");
								HX_STACK_LINE(3494)
								j = tmp127;
								HX_STACK_LINE(3494)
								Float tmp128 = _this->c2->friction;		HX_STACK_VAR(tmp128,"tmp128");
								HX_STACK_LINE(3494)
								Float tmp129 = _this->c2->jnAcc;		HX_STACK_VAR(tmp129,"tmp129");
								HX_STACK_LINE(3494)
								Float tmp130 = (tmp128 * tmp129);		HX_STACK_VAR(tmp130,"tmp130");
								HX_STACK_LINE(3494)
								jMax = tmp130;
								HX_STACK_LINE(3494)
								Float tmp131 = _this->c2->jtAcc;		HX_STACK_VAR(tmp131,"tmp131");
								HX_STACK_LINE(3494)
								jOld = tmp131;
								HX_STACK_LINE(3494)
								Float tmp132 = (jOld - j);		HX_STACK_VAR(tmp132,"tmp132");
								HX_STACK_LINE(3494)
								cjAcc = tmp132;
								HX_STACK_LINE(3494)
								bool tmp133 = (cjAcc > jMax);		HX_STACK_VAR(tmp133,"tmp133");
								HX_STACK_LINE(3494)
								if ((tmp133)){
									HX_STACK_LINE(3494)
									cjAcc = jMax;
								}
								else{
									HX_STACK_LINE(3494)
									Float tmp134 = cjAcc;		HX_STACK_VAR(tmp134,"tmp134");
									HX_STACK_LINE(3494)
									Float tmp135 = jMax;		HX_STACK_VAR(tmp135,"tmp135");
									HX_STACK_LINE(3494)
									Float tmp136 = -(tmp135);		HX_STACK_VAR(tmp136,"tmp136");
									HX_STACK_LINE(3494)
									bool tmp137 = (tmp134 < tmp136);		HX_STACK_VAR(tmp137,"tmp137");
									HX_STACK_LINE(3494)
									if ((tmp137)){
										HX_STACK_LINE(3494)
										Float tmp138 = jMax;		HX_STACK_VAR(tmp138,"tmp138");
										HX_STACK_LINE(3494)
										Float tmp139 = -(tmp138);		HX_STACK_VAR(tmp139,"tmp139");
										HX_STACK_LINE(3494)
										cjAcc = tmp139;
									}
								}
								HX_STACK_LINE(3494)
								Float tmp134 = (cjAcc - jOld);		HX_STACK_VAR(tmp134,"tmp134");
								HX_STACK_LINE(3494)
								j = tmp134;
								HX_STACK_LINE(3494)
								_this->c2->jtAcc = cjAcc;
								HX_STACK_LINE(3494)
								Float tmp135 = _this->ny;		HX_STACK_VAR(tmp135,"tmp135");
								HX_STACK_LINE(3494)
								Float tmp136 = -(tmp135);		HX_STACK_VAR(tmp136,"tmp136");
								HX_STACK_LINE(3494)
								Float tmp137 = j;		HX_STACK_VAR(tmp137,"tmp137");
								HX_STACK_LINE(3494)
								Float tmp138 = (tmp136 * tmp137);		HX_STACK_VAR(tmp138,"tmp138");
								HX_STACK_LINE(3494)
								jx = tmp138;
								HX_STACK_LINE(3494)
								Float tmp139 = (_this->nx * j);		HX_STACK_VAR(tmp139,"tmp139");
								HX_STACK_LINE(3494)
								jy = tmp139;
								HX_STACK_LINE(3494)
								Float tmp140 = jx;		HX_STACK_VAR(tmp140,"tmp140");
								HX_STACK_LINE(3494)
								Float tmp141 = _this->b2->imass;		HX_STACK_VAR(tmp141,"tmp141");
								HX_STACK_LINE(3494)
								Float tmp142 = (tmp140 * tmp141);		HX_STACK_VAR(tmp142,"tmp142");
								HX_STACK_LINE(3494)
								hx::AddEq(_this->b2->velx,tmp142);
								HX_STACK_LINE(3494)
								Float tmp143 = jy;		HX_STACK_VAR(tmp143,"tmp143");
								HX_STACK_LINE(3494)
								Float tmp144 = _this->b2->imass;		HX_STACK_VAR(tmp144,"tmp144");
								HX_STACK_LINE(3494)
								Float tmp145 = (tmp143 * tmp144);		HX_STACK_VAR(tmp145,"tmp145");
								HX_STACK_LINE(3494)
								hx::AddEq(_this->b2->vely,tmp145);
								HX_STACK_LINE(3494)
								Float tmp146 = jx;		HX_STACK_VAR(tmp146,"tmp146");
								HX_STACK_LINE(3494)
								Float tmp147 = _this->b1->imass;		HX_STACK_VAR(tmp147,"tmp147");
								HX_STACK_LINE(3494)
								Float tmp148 = (tmp146 * tmp147);		HX_STACK_VAR(tmp148,"tmp148");
								HX_STACK_LINE(3494)
								hx::SubEq(_this->b1->velx,tmp148);
								HX_STACK_LINE(3494)
								Float tmp149 = jy;		HX_STACK_VAR(tmp149,"tmp149");
								HX_STACK_LINE(3494)
								Float tmp150 = _this->b1->imass;		HX_STACK_VAR(tmp150,"tmp150");
								HX_STACK_LINE(3494)
								Float tmp151 = (tmp149 * tmp150);		HX_STACK_VAR(tmp151,"tmp151");
								HX_STACK_LINE(3494)
								hx::SubEq(_this->b1->vely,tmp151);
								HX_STACK_LINE(3494)
								Float tmp152 = (_this->rt2b * j);		HX_STACK_VAR(tmp152,"tmp152");
								HX_STACK_LINE(3494)
								Float tmp153 = _this->b2->iinertia;		HX_STACK_VAR(tmp153,"tmp153");
								HX_STACK_LINE(3494)
								Float tmp154 = (tmp152 * tmp153);		HX_STACK_VAR(tmp154,"tmp154");
								HX_STACK_LINE(3494)
								hx::AddEq(_this->b2->angvel,tmp154);
								HX_STACK_LINE(3494)
								Float tmp155 = (_this->rt2a * j);		HX_STACK_VAR(tmp155,"tmp155");
								HX_STACK_LINE(3494)
								Float tmp156 = _this->b1->iinertia;		HX_STACK_VAR(tmp156,"tmp156");
								HX_STACK_LINE(3494)
								Float tmp157 = (tmp155 * tmp156);		HX_STACK_VAR(tmp157,"tmp157");
								HX_STACK_LINE(3494)
								hx::SubEq(_this->b1->angvel,tmp157);
								HX_STACK_LINE(3494)
								Float tmp158 = _this->k1x;		HX_STACK_VAR(tmp158,"tmp158");
								HX_STACK_LINE(3494)
								Float tmp159 = _this->b2->velx;		HX_STACK_VAR(tmp159,"tmp159");
								HX_STACK_LINE(3494)
								Float tmp160 = (tmp158 + tmp159);		HX_STACK_VAR(tmp160,"tmp160");
								HX_STACK_LINE(3494)
								Float tmp161 = _this->c1->r2y;		HX_STACK_VAR(tmp161,"tmp161");
								HX_STACK_LINE(3494)
								Float tmp162 = _this->b2->angvel;		HX_STACK_VAR(tmp162,"tmp162");
								HX_STACK_LINE(3494)
								Float tmp163 = (tmp161 * tmp162);		HX_STACK_VAR(tmp163,"tmp163");
								HX_STACK_LINE(3494)
								Float tmp164 = (tmp160 - tmp163);		HX_STACK_VAR(tmp164,"tmp164");
								HX_STACK_LINE(3494)
								Float tmp165 = _this->b1->velx;		HX_STACK_VAR(tmp165,"tmp165");
								HX_STACK_LINE(3494)
								Float tmp166 = _this->c1->r1y;		HX_STACK_VAR(tmp166,"tmp166");
								HX_STACK_LINE(3494)
								Float tmp167 = _this->b1->angvel;		HX_STACK_VAR(tmp167,"tmp167");
								HX_STACK_LINE(3494)
								Float tmp168 = (tmp166 * tmp167);		HX_STACK_VAR(tmp168,"tmp168");
								HX_STACK_LINE(3494)
								Float tmp169 = (tmp165 - tmp168);		HX_STACK_VAR(tmp169,"tmp169");
								HX_STACK_LINE(3494)
								Float tmp170 = (tmp164 - tmp169);		HX_STACK_VAR(tmp170,"tmp170");
								HX_STACK_LINE(3494)
								v1x = tmp170;
								HX_STACK_LINE(3494)
								Float tmp171 = _this->k1y;		HX_STACK_VAR(tmp171,"tmp171");
								HX_STACK_LINE(3494)
								Float tmp172 = _this->b2->vely;		HX_STACK_VAR(tmp172,"tmp172");
								HX_STACK_LINE(3494)
								Float tmp173 = (tmp171 + tmp172);		HX_STACK_VAR(tmp173,"tmp173");
								HX_STACK_LINE(3494)
								Float tmp174 = _this->c1->r2x;		HX_STACK_VAR(tmp174,"tmp174");
								HX_STACK_LINE(3494)
								Float tmp175 = _this->b2->angvel;		HX_STACK_VAR(tmp175,"tmp175");
								HX_STACK_LINE(3494)
								Float tmp176 = (tmp174 * tmp175);		HX_STACK_VAR(tmp176,"tmp176");
								HX_STACK_LINE(3494)
								Float tmp177 = (tmp173 + tmp176);		HX_STACK_VAR(tmp177,"tmp177");
								HX_STACK_LINE(3494)
								Float tmp178 = _this->b1->vely;		HX_STACK_VAR(tmp178,"tmp178");
								HX_STACK_LINE(3494)
								Float tmp179 = _this->c1->r1x;		HX_STACK_VAR(tmp179,"tmp179");
								HX_STACK_LINE(3494)
								Float tmp180 = _this->b1->angvel;		HX_STACK_VAR(tmp180,"tmp180");
								HX_STACK_LINE(3494)
								Float tmp181 = (tmp179 * tmp180);		HX_STACK_VAR(tmp181,"tmp181");
								HX_STACK_LINE(3494)
								Float tmp182 = (tmp178 + tmp181);		HX_STACK_VAR(tmp182,"tmp182");
								HX_STACK_LINE(3494)
								Float tmp183 = (tmp177 - tmp182);		HX_STACK_VAR(tmp183,"tmp183");
								HX_STACK_LINE(3494)
								v1y = tmp183;
								HX_STACK_LINE(3494)
								Float tmp184 = _this->k2x;		HX_STACK_VAR(tmp184,"tmp184");
								HX_STACK_LINE(3494)
								Float tmp185 = _this->b2->velx;		HX_STACK_VAR(tmp185,"tmp185");
								HX_STACK_LINE(3494)
								Float tmp186 = (tmp184 + tmp185);		HX_STACK_VAR(tmp186,"tmp186");
								HX_STACK_LINE(3494)
								Float tmp187 = _this->c2->r2y;		HX_STACK_VAR(tmp187,"tmp187");
								HX_STACK_LINE(3494)
								Float tmp188 = _this->b2->angvel;		HX_STACK_VAR(tmp188,"tmp188");
								HX_STACK_LINE(3494)
								Float tmp189 = (tmp187 * tmp188);		HX_STACK_VAR(tmp189,"tmp189");
								HX_STACK_LINE(3494)
								Float tmp190 = (tmp186 - tmp189);		HX_STACK_VAR(tmp190,"tmp190");
								HX_STACK_LINE(3494)
								Float tmp191 = _this->b1->velx;		HX_STACK_VAR(tmp191,"tmp191");
								HX_STACK_LINE(3494)
								Float tmp192 = _this->c2->r1y;		HX_STACK_VAR(tmp192,"tmp192");
								HX_STACK_LINE(3494)
								Float tmp193 = _this->b1->angvel;		HX_STACK_VAR(tmp193,"tmp193");
								HX_STACK_LINE(3494)
								Float tmp194 = (tmp192 * tmp193);		HX_STACK_VAR(tmp194,"tmp194");
								HX_STACK_LINE(3494)
								Float tmp195 = (tmp191 - tmp194);		HX_STACK_VAR(tmp195,"tmp195");
								HX_STACK_LINE(3494)
								Float tmp196 = (tmp190 - tmp195);		HX_STACK_VAR(tmp196,"tmp196");
								HX_STACK_LINE(3494)
								v2x = tmp196;
								HX_STACK_LINE(3494)
								Float tmp197 = _this->k2y;		HX_STACK_VAR(tmp197,"tmp197");
								HX_STACK_LINE(3494)
								Float tmp198 = _this->b2->vely;		HX_STACK_VAR(tmp198,"tmp198");
								HX_STACK_LINE(3494)
								Float tmp199 = (tmp197 + tmp198);		HX_STACK_VAR(tmp199,"tmp199");
								HX_STACK_LINE(3494)
								Float tmp200 = _this->c2->r2x;		HX_STACK_VAR(tmp200,"tmp200");
								HX_STACK_LINE(3494)
								Float tmp201 = _this->b2->angvel;		HX_STACK_VAR(tmp201,"tmp201");
								HX_STACK_LINE(3494)
								Float tmp202 = (tmp200 * tmp201);		HX_STACK_VAR(tmp202,"tmp202");
								HX_STACK_LINE(3494)
								Float tmp203 = (tmp199 + tmp202);		HX_STACK_VAR(tmp203,"tmp203");
								HX_STACK_LINE(3494)
								Float tmp204 = _this->b1->vely;		HX_STACK_VAR(tmp204,"tmp204");
								HX_STACK_LINE(3494)
								Float tmp205 = _this->c2->r1x;		HX_STACK_VAR(tmp205,"tmp205");
								HX_STACK_LINE(3494)
								Float tmp206 = _this->b1->angvel;		HX_STACK_VAR(tmp206,"tmp206");
								HX_STACK_LINE(3494)
								Float tmp207 = (tmp205 * tmp206);		HX_STACK_VAR(tmp207,"tmp207");
								HX_STACK_LINE(3494)
								Float tmp208 = (tmp204 + tmp207);		HX_STACK_VAR(tmp208,"tmp208");
								HX_STACK_LINE(3494)
								Float tmp209 = (tmp203 - tmp208);		HX_STACK_VAR(tmp209,"tmp209");
								HX_STACK_LINE(3494)
								v2y = tmp209;
								HX_STACK_LINE(3494)
								Float tmp210 = _this->c1->jnAcc;		HX_STACK_VAR(tmp210,"tmp210");
								HX_STACK_LINE(3494)
								Float ax = tmp210;		HX_STACK_VAR(ax,"ax");
								HX_STACK_LINE(3494)
								Float tmp211 = _this->c2->jnAcc;		HX_STACK_VAR(tmp211,"tmp211");
								HX_STACK_LINE(3494)
								Float ay = tmp211;		HX_STACK_VAR(ay,"ay");
								HX_STACK_LINE(3494)
								Float tmp212 = (v1x * _this->nx);		HX_STACK_VAR(tmp212,"tmp212");
								HX_STACK_LINE(3494)
								Float tmp213 = (v1y * _this->ny);		HX_STACK_VAR(tmp213,"tmp213");
								HX_STACK_LINE(3494)
								Float tmp214 = (tmp212 + tmp213);		HX_STACK_VAR(tmp214,"tmp214");
								HX_STACK_LINE(3494)
								Float tmp215 = _this->surfacey;		HX_STACK_VAR(tmp215,"tmp215");
								HX_STACK_LINE(3494)
								Float tmp216 = (tmp214 + tmp215);		HX_STACK_VAR(tmp216,"tmp216");
								HX_STACK_LINE(3494)
								Float tmp217 = _this->c1->bounce;		HX_STACK_VAR(tmp217,"tmp217");
								HX_STACK_LINE(3494)
								Float tmp218 = (tmp216 + tmp217);		HX_STACK_VAR(tmp218,"tmp218");
								HX_STACK_LINE(3494)
								Float tmp219 = (_this->Ka * ax);		HX_STACK_VAR(tmp219,"tmp219");
								HX_STACK_LINE(3494)
								Float tmp220 = (_this->Kb * ay);		HX_STACK_VAR(tmp220,"tmp220");
								HX_STACK_LINE(3494)
								Float tmp221 = (tmp219 + tmp220);		HX_STACK_VAR(tmp221,"tmp221");
								HX_STACK_LINE(3494)
								Float tmp222 = (tmp218 - tmp221);		HX_STACK_VAR(tmp222,"tmp222");
								HX_STACK_LINE(3494)
								Float jnx = tmp222;		HX_STACK_VAR(jnx,"jnx");
								HX_STACK_LINE(3494)
								Float tmp223 = (v2x * _this->nx);		HX_STACK_VAR(tmp223,"tmp223");
								HX_STACK_LINE(3494)
								Float tmp224 = (v2y * _this->ny);		HX_STACK_VAR(tmp224,"tmp224");
								HX_STACK_LINE(3494)
								Float tmp225 = (tmp223 + tmp224);		HX_STACK_VAR(tmp225,"tmp225");
								HX_STACK_LINE(3494)
								Float tmp226 = _this->surfacey;		HX_STACK_VAR(tmp226,"tmp226");
								HX_STACK_LINE(3494)
								Float tmp227 = (tmp225 + tmp226);		HX_STACK_VAR(tmp227,"tmp227");
								HX_STACK_LINE(3494)
								Float tmp228 = _this->c2->bounce;		HX_STACK_VAR(tmp228,"tmp228");
								HX_STACK_LINE(3494)
								Float tmp229 = (tmp227 + tmp228);		HX_STACK_VAR(tmp229,"tmp229");
								HX_STACK_LINE(3494)
								Float tmp230 = (_this->Kb * ax);		HX_STACK_VAR(tmp230,"tmp230");
								HX_STACK_LINE(3494)
								Float tmp231 = (_this->Kc * ay);		HX_STACK_VAR(tmp231,"tmp231");
								HX_STACK_LINE(3494)
								Float tmp232 = (tmp230 + tmp231);		HX_STACK_VAR(tmp232,"tmp232");
								HX_STACK_LINE(3494)
								Float tmp233 = (tmp229 - tmp232);		HX_STACK_VAR(tmp233,"tmp233");
								HX_STACK_LINE(3494)
								Float jny = tmp233;		HX_STACK_VAR(jny,"jny");
								HX_STACK_LINE(3494)
								Float tmp234 = (_this->kMassa * jnx);		HX_STACK_VAR(tmp234,"tmp234");
								HX_STACK_LINE(3494)
								Float tmp235 = (_this->kMassb * jny);		HX_STACK_VAR(tmp235,"tmp235");
								HX_STACK_LINE(3494)
								Float tmp236 = (tmp234 + tmp235);		HX_STACK_VAR(tmp236,"tmp236");
								HX_STACK_LINE(3494)
								Float tmp237 = -(tmp236);		HX_STACK_VAR(tmp237,"tmp237");
								HX_STACK_LINE(3494)
								Float xx = tmp237;		HX_STACK_VAR(xx,"xx");
								HX_STACK_LINE(3494)
								Float tmp238 = (_this->kMassb * jnx);		HX_STACK_VAR(tmp238,"tmp238");
								HX_STACK_LINE(3494)
								Float tmp239 = (_this->kMassc * jny);		HX_STACK_VAR(tmp239,"tmp239");
								HX_STACK_LINE(3494)
								Float tmp240 = (tmp238 + tmp239);		HX_STACK_VAR(tmp240,"tmp240");
								HX_STACK_LINE(3494)
								Float tmp241 = -(tmp240);		HX_STACK_VAR(tmp241,"tmp241");
								HX_STACK_LINE(3494)
								Float xy = tmp241;		HX_STACK_VAR(xy,"xy");
								HX_STACK_LINE(3494)
								bool tmp242 = (xx >= (int)0);		HX_STACK_VAR(tmp242,"tmp242");
								HX_STACK_LINE(3494)
								bool tmp243;		HX_STACK_VAR(tmp243,"tmp243");
								HX_STACK_LINE(3494)
								if ((tmp242)){
									HX_STACK_LINE(3494)
									tmp243 = (xy >= (int)0);
								}
								else{
									HX_STACK_LINE(3494)
									tmp243 = false;
								}
								HX_STACK_LINE(3494)
								if ((tmp243)){
									HX_STACK_LINE(3494)
									{
										HX_STACK_LINE(3494)
										Float tmp244 = (xx - ax);		HX_STACK_VAR(tmp244,"tmp244");
										HX_STACK_LINE(3494)
										jnx = tmp244;
										HX_STACK_LINE(3494)
										Float tmp245 = (xy - ay);		HX_STACK_VAR(tmp245,"tmp245");
										HX_STACK_LINE(3494)
										jny = tmp245;
									}
									HX_STACK_LINE(3494)
									_this->c1->jnAcc = xx;
									HX_STACK_LINE(3494)
									_this->c2->jnAcc = xy;
								}
								else{
									HX_STACK_LINE(3494)
									Float tmp244 = _this->c1->nMass;		HX_STACK_VAR(tmp244,"tmp244");
									HX_STACK_LINE(3494)
									Float tmp245 = -(tmp244);		HX_STACK_VAR(tmp245,"tmp245");
									HX_STACK_LINE(3494)
									Float tmp246 = jnx;		HX_STACK_VAR(tmp246,"tmp246");
									HX_STACK_LINE(3494)
									Float tmp247 = (tmp245 * tmp246);		HX_STACK_VAR(tmp247,"tmp247");
									HX_STACK_LINE(3494)
									xx = tmp247;
									HX_STACK_LINE(3494)
									bool tmp248 = (xx >= (int)0);		HX_STACK_VAR(tmp248,"tmp248");
									HX_STACK_LINE(3494)
									bool tmp249;		HX_STACK_VAR(tmp249,"tmp249");
									HX_STACK_LINE(3494)
									if ((tmp248)){
										HX_STACK_LINE(3494)
										Float tmp250 = (_this->Kb * xx);		HX_STACK_VAR(tmp250,"tmp250");
										HX_STACK_LINE(3494)
										Float tmp251 = tmp250;		HX_STACK_VAR(tmp251,"tmp251");
										HX_STACK_LINE(3494)
										Float tmp252 = jny;		HX_STACK_VAR(tmp252,"tmp252");
										HX_STACK_LINE(3494)
										Float tmp253 = (tmp251 + tmp252);		HX_STACK_VAR(tmp253,"tmp253");
										HX_STACK_LINE(3494)
										Float tmp254 = tmp253;		HX_STACK_VAR(tmp254,"tmp254");
										HX_STACK_LINE(3494)
										tmp249 = (tmp254 >= (int)0);
									}
									else{
										HX_STACK_LINE(3494)
										tmp249 = false;
									}
									HX_STACK_LINE(3494)
									if ((tmp249)){
										HX_STACK_LINE(3494)
										Float tmp250 = (xx - ax);		HX_STACK_VAR(tmp250,"tmp250");
										HX_STACK_LINE(3494)
										jnx = tmp250;
										HX_STACK_LINE(3494)
										Float tmp251 = ay;		HX_STACK_VAR(tmp251,"tmp251");
										HX_STACK_LINE(3494)
										Float tmp252 = -(tmp251);		HX_STACK_VAR(tmp252,"tmp252");
										HX_STACK_LINE(3494)
										jny = tmp252;
										HX_STACK_LINE(3494)
										_this->c1->jnAcc = xx;
										HX_STACK_LINE(3494)
										_this->c2->jnAcc = (int)0;
									}
									else{
										HX_STACK_LINE(3494)
										Float tmp250 = _this->c2->nMass;		HX_STACK_VAR(tmp250,"tmp250");
										HX_STACK_LINE(3494)
										Float tmp251 = -(tmp250);		HX_STACK_VAR(tmp251,"tmp251");
										HX_STACK_LINE(3494)
										Float tmp252 = jny;		HX_STACK_VAR(tmp252,"tmp252");
										HX_STACK_LINE(3494)
										Float tmp253 = (tmp251 * tmp252);		HX_STACK_VAR(tmp253,"tmp253");
										HX_STACK_LINE(3494)
										xy = tmp253;
										HX_STACK_LINE(3494)
										bool tmp254 = (xy >= (int)0);		HX_STACK_VAR(tmp254,"tmp254");
										HX_STACK_LINE(3494)
										bool tmp255;		HX_STACK_VAR(tmp255,"tmp255");
										HX_STACK_LINE(3494)
										if ((tmp254)){
											HX_STACK_LINE(3494)
											Float tmp256 = (_this->Kb * xy);		HX_STACK_VAR(tmp256,"tmp256");
											HX_STACK_LINE(3494)
											Float tmp257 = tmp256;		HX_STACK_VAR(tmp257,"tmp257");
											HX_STACK_LINE(3494)
											Float tmp258 = jnx;		HX_STACK_VAR(tmp258,"tmp258");
											HX_STACK_LINE(3494)
											Float tmp259 = (tmp257 + tmp258);		HX_STACK_VAR(tmp259,"tmp259");
											HX_STACK_LINE(3494)
											Float tmp260 = tmp259;		HX_STACK_VAR(tmp260,"tmp260");
											HX_STACK_LINE(3494)
											tmp255 = (tmp260 >= (int)0);
										}
										else{
											HX_STACK_LINE(3494)
											tmp255 = false;
										}
										HX_STACK_LINE(3494)
										if ((tmp255)){
											HX_STACK_LINE(3494)
											Float tmp256 = ax;		HX_STACK_VAR(tmp256,"tmp256");
											HX_STACK_LINE(3494)
											Float tmp257 = -(tmp256);		HX_STACK_VAR(tmp257,"tmp257");
											HX_STACK_LINE(3494)
											jnx = tmp257;
											HX_STACK_LINE(3494)
											Float tmp258 = (xy - ay);		HX_STACK_VAR(tmp258,"tmp258");
											HX_STACK_LINE(3494)
											jny = tmp258;
											HX_STACK_LINE(3494)
											_this->c1->jnAcc = (int)0;
											HX_STACK_LINE(3494)
											_this->c2->jnAcc = xy;
										}
										else{
											HX_STACK_LINE(3494)
											bool tmp256 = (jnx >= (int)0);		HX_STACK_VAR(tmp256,"tmp256");
											HX_STACK_LINE(3494)
											bool tmp257;		HX_STACK_VAR(tmp257,"tmp257");
											HX_STACK_LINE(3494)
											if ((tmp256)){
												HX_STACK_LINE(3494)
												tmp257 = (jny >= (int)0);
											}
											else{
												HX_STACK_LINE(3494)
												tmp257 = false;
											}
											HX_STACK_LINE(3494)
											if ((tmp257)){
												HX_STACK_LINE(3494)
												Float tmp258 = ax;		HX_STACK_VAR(tmp258,"tmp258");
												HX_STACK_LINE(3494)
												Float tmp259 = -(tmp258);		HX_STACK_VAR(tmp259,"tmp259");
												HX_STACK_LINE(3494)
												jnx = tmp259;
												HX_STACK_LINE(3494)
												Float tmp260 = ay;		HX_STACK_VAR(tmp260,"tmp260");
												HX_STACK_LINE(3494)
												Float tmp261 = -(tmp260);		HX_STACK_VAR(tmp261,"tmp261");
												HX_STACK_LINE(3494)
												jny = tmp261;
												HX_STACK_LINE(3494)
												Float tmp262 = _this->c2->jnAcc = (int)0;		HX_STACK_VAR(tmp262,"tmp262");
												HX_STACK_LINE(3494)
												_this->c1->jnAcc = tmp262;
											}
											else{
												HX_STACK_LINE(3494)
												jnx = (int)0;
												HX_STACK_LINE(3494)
												jny = (int)0;
											}
										}
									}
								}
								HX_STACK_LINE(3494)
								Float tmp244 = (jnx + jny);		HX_STACK_VAR(tmp244,"tmp244");
								HX_STACK_LINE(3494)
								j = tmp244;
								HX_STACK_LINE(3494)
								Float tmp245 = (_this->nx * j);		HX_STACK_VAR(tmp245,"tmp245");
								HX_STACK_LINE(3494)
								jx = tmp245;
								HX_STACK_LINE(3494)
								Float tmp246 = (_this->ny * j);		HX_STACK_VAR(tmp246,"tmp246");
								HX_STACK_LINE(3494)
								jy = tmp246;
								HX_STACK_LINE(3494)
								Float tmp247 = jx;		HX_STACK_VAR(tmp247,"tmp247");
								HX_STACK_LINE(3494)
								Float tmp248 = _this->b2->imass;		HX_STACK_VAR(tmp248,"tmp248");
								HX_STACK_LINE(3494)
								Float tmp249 = (tmp247 * tmp248);		HX_STACK_VAR(tmp249,"tmp249");
								HX_STACK_LINE(3494)
								hx::AddEq(_this->b2->velx,tmp249);
								HX_STACK_LINE(3494)
								Float tmp250 = jy;		HX_STACK_VAR(tmp250,"tmp250");
								HX_STACK_LINE(3494)
								Float tmp251 = _this->b2->imass;		HX_STACK_VAR(tmp251,"tmp251");
								HX_STACK_LINE(3494)
								Float tmp252 = (tmp250 * tmp251);		HX_STACK_VAR(tmp252,"tmp252");
								HX_STACK_LINE(3494)
								hx::AddEq(_this->b2->vely,tmp252);
								HX_STACK_LINE(3494)
								Float tmp253 = jx;		HX_STACK_VAR(tmp253,"tmp253");
								HX_STACK_LINE(3494)
								Float tmp254 = _this->b1->imass;		HX_STACK_VAR(tmp254,"tmp254");
								HX_STACK_LINE(3494)
								Float tmp255 = (tmp253 * tmp254);		HX_STACK_VAR(tmp255,"tmp255");
								HX_STACK_LINE(3494)
								hx::SubEq(_this->b1->velx,tmp255);
								HX_STACK_LINE(3494)
								Float tmp256 = jy;		HX_STACK_VAR(tmp256,"tmp256");
								HX_STACK_LINE(3494)
								Float tmp257 = _this->b1->imass;		HX_STACK_VAR(tmp257,"tmp257");
								HX_STACK_LINE(3494)
								Float tmp258 = (tmp256 * tmp257);		HX_STACK_VAR(tmp258,"tmp258");
								HX_STACK_LINE(3494)
								hx::SubEq(_this->b1->vely,tmp258);
								HX_STACK_LINE(3494)
								Float tmp259 = (_this->rn1b * jnx);		HX_STACK_VAR(tmp259,"tmp259");
								HX_STACK_LINE(3494)
								Float tmp260 = (_this->rn2b * jny);		HX_STACK_VAR(tmp260,"tmp260");
								HX_STACK_LINE(3494)
								Float tmp261 = (tmp259 + tmp260);		HX_STACK_VAR(tmp261,"tmp261");
								HX_STACK_LINE(3494)
								Float tmp262 = _this->b2->iinertia;		HX_STACK_VAR(tmp262,"tmp262");
								HX_STACK_LINE(3494)
								Float tmp263 = (tmp261 * tmp262);		HX_STACK_VAR(tmp263,"tmp263");
								HX_STACK_LINE(3494)
								hx::AddEq(_this->b2->angvel,tmp263);
								HX_STACK_LINE(3494)
								Float tmp264 = (_this->rn1a * jnx);		HX_STACK_VAR(tmp264,"tmp264");
								HX_STACK_LINE(3494)
								Float tmp265 = (_this->rn2a * jny);		HX_STACK_VAR(tmp265,"tmp265");
								HX_STACK_LINE(3494)
								Float tmp266 = (tmp264 + tmp265);		HX_STACK_VAR(tmp266,"tmp266");
								HX_STACK_LINE(3494)
								Float tmp267 = _this->b1->iinertia;		HX_STACK_VAR(tmp267,"tmp267");
								HX_STACK_LINE(3494)
								Float tmp268 = (tmp266 * tmp267);		HX_STACK_VAR(tmp268,"tmp268");
								HX_STACK_LINE(3494)
								hx::SubEq(_this->b1->angvel,tmp268);
							}
							else{
								HX_STACK_LINE(3494)
								bool tmp95 = (_this->radius != ((Float)0.0));		HX_STACK_VAR(tmp95,"tmp95");
								HX_STACK_LINE(3494)
								if ((tmp95)){
									HX_STACK_LINE(3494)
									Float tmp96 = _this->b2->angvel;		HX_STACK_VAR(tmp96,"tmp96");
									HX_STACK_LINE(3494)
									Float tmp97 = _this->b1->angvel;		HX_STACK_VAR(tmp97,"tmp97");
									HX_STACK_LINE(3494)
									Float tmp98 = (tmp96 - tmp97);		HX_STACK_VAR(tmp98,"tmp98");
									HX_STACK_LINE(3494)
									Float dw = tmp98;		HX_STACK_VAR(dw,"dw");
									HX_STACK_LINE(3494)
									Float tmp99 = (dw * _this->rMass);		HX_STACK_VAR(tmp99,"tmp99");
									HX_STACK_LINE(3494)
									j = tmp99;
									HX_STACK_LINE(3494)
									Float tmp100 = _this->rfric;		HX_STACK_VAR(tmp100,"tmp100");
									HX_STACK_LINE(3494)
									Float tmp101 = _this->c1->jnAcc;		HX_STACK_VAR(tmp101,"tmp101");
									HX_STACK_LINE(3494)
									Float tmp102 = (tmp100 * tmp101);		HX_STACK_VAR(tmp102,"tmp102");
									HX_STACK_LINE(3494)
									jMax = tmp102;
									HX_STACK_LINE(3494)
									jOld = _this->jrAcc;
									HX_STACK_LINE(3494)
									hx::SubEq(_this->jrAcc,j);
									HX_STACK_LINE(3494)
									bool tmp103 = (_this->jrAcc > jMax);		HX_STACK_VAR(tmp103,"tmp103");
									HX_STACK_LINE(3494)
									if ((tmp103)){
										HX_STACK_LINE(3494)
										_this->jrAcc = jMax;
									}
									else{
										HX_STACK_LINE(3494)
										Float tmp104 = _this->jrAcc;		HX_STACK_VAR(tmp104,"tmp104");
										HX_STACK_LINE(3494)
										Float tmp105 = jMax;		HX_STACK_VAR(tmp105,"tmp105");
										HX_STACK_LINE(3494)
										Float tmp106 = -(tmp105);		HX_STACK_VAR(tmp106,"tmp106");
										HX_STACK_LINE(3494)
										bool tmp107 = (tmp104 < tmp106);		HX_STACK_VAR(tmp107,"tmp107");
										HX_STACK_LINE(3494)
										if ((tmp107)){
											HX_STACK_LINE(3494)
											Float tmp108 = jMax;		HX_STACK_VAR(tmp108,"tmp108");
											HX_STACK_LINE(3494)
											Float tmp109 = -(tmp108);		HX_STACK_VAR(tmp109,"tmp109");
											HX_STACK_LINE(3494)
											_this->jrAcc = tmp109;
										}
									}
									HX_STACK_LINE(3494)
									Float tmp104 = (_this->jrAcc - jOld);		HX_STACK_VAR(tmp104,"tmp104");
									HX_STACK_LINE(3494)
									j = tmp104;
									HX_STACK_LINE(3494)
									Float tmp105 = j;		HX_STACK_VAR(tmp105,"tmp105");
									HX_STACK_LINE(3494)
									Float tmp106 = _this->b2->iinertia;		HX_STACK_VAR(tmp106,"tmp106");
									HX_STACK_LINE(3494)
									Float tmp107 = (tmp105 * tmp106);		HX_STACK_VAR(tmp107,"tmp107");
									HX_STACK_LINE(3494)
									hx::AddEq(_this->b2->angvel,tmp107);
									HX_STACK_LINE(3494)
									Float tmp108 = j;		HX_STACK_VAR(tmp108,"tmp108");
									HX_STACK_LINE(3494)
									Float tmp109 = _this->b1->iinertia;		HX_STACK_VAR(tmp109,"tmp109");
									HX_STACK_LINE(3494)
									Float tmp110 = (tmp108 * tmp109);		HX_STACK_VAR(tmp110,"tmp110");
									HX_STACK_LINE(3494)
									hx::SubEq(_this->b1->angvel,tmp110);
								}
								HX_STACK_LINE(3494)
								Float tmp96 = _this->k1x;		HX_STACK_VAR(tmp96,"tmp96");
								HX_STACK_LINE(3494)
								Float tmp97 = _this->b2->velx;		HX_STACK_VAR(tmp97,"tmp97");
								HX_STACK_LINE(3494)
								Float tmp98 = (tmp96 + tmp97);		HX_STACK_VAR(tmp98,"tmp98");
								HX_STACK_LINE(3494)
								Float tmp99 = _this->c1->r2y;		HX_STACK_VAR(tmp99,"tmp99");
								HX_STACK_LINE(3494)
								Float tmp100 = _this->b2->angvel;		HX_STACK_VAR(tmp100,"tmp100");
								HX_STACK_LINE(3494)
								Float tmp101 = (tmp99 * tmp100);		HX_STACK_VAR(tmp101,"tmp101");
								HX_STACK_LINE(3494)
								Float tmp102 = (tmp98 - tmp101);		HX_STACK_VAR(tmp102,"tmp102");
								HX_STACK_LINE(3494)
								Float tmp103 = _this->b1->velx;		HX_STACK_VAR(tmp103,"tmp103");
								HX_STACK_LINE(3494)
								Float tmp104 = _this->c1->r1y;		HX_STACK_VAR(tmp104,"tmp104");
								HX_STACK_LINE(3494)
								Float tmp105 = _this->b1->angvel;		HX_STACK_VAR(tmp105,"tmp105");
								HX_STACK_LINE(3494)
								Float tmp106 = (tmp104 * tmp105);		HX_STACK_VAR(tmp106,"tmp106");
								HX_STACK_LINE(3494)
								Float tmp107 = (tmp103 - tmp106);		HX_STACK_VAR(tmp107,"tmp107");
								HX_STACK_LINE(3494)
								Float tmp108 = (tmp102 - tmp107);		HX_STACK_VAR(tmp108,"tmp108");
								HX_STACK_LINE(3494)
								v1x = tmp108;
								HX_STACK_LINE(3494)
								Float tmp109 = _this->k1y;		HX_STACK_VAR(tmp109,"tmp109");
								HX_STACK_LINE(3494)
								Float tmp110 = _this->b2->vely;		HX_STACK_VAR(tmp110,"tmp110");
								HX_STACK_LINE(3494)
								Float tmp111 = (tmp109 + tmp110);		HX_STACK_VAR(tmp111,"tmp111");
								HX_STACK_LINE(3494)
								Float tmp112 = _this->c1->r2x;		HX_STACK_VAR(tmp112,"tmp112");
								HX_STACK_LINE(3494)
								Float tmp113 = _this->b2->angvel;		HX_STACK_VAR(tmp113,"tmp113");
								HX_STACK_LINE(3494)
								Float tmp114 = (tmp112 * tmp113);		HX_STACK_VAR(tmp114,"tmp114");
								HX_STACK_LINE(3494)
								Float tmp115 = (tmp111 + tmp114);		HX_STACK_VAR(tmp115,"tmp115");
								HX_STACK_LINE(3494)
								Float tmp116 = _this->b1->vely;		HX_STACK_VAR(tmp116,"tmp116");
								HX_STACK_LINE(3494)
								Float tmp117 = _this->c1->r1x;		HX_STACK_VAR(tmp117,"tmp117");
								HX_STACK_LINE(3494)
								Float tmp118 = _this->b1->angvel;		HX_STACK_VAR(tmp118,"tmp118");
								HX_STACK_LINE(3494)
								Float tmp119 = (tmp117 * tmp118);		HX_STACK_VAR(tmp119,"tmp119");
								HX_STACK_LINE(3494)
								Float tmp120 = (tmp116 + tmp119);		HX_STACK_VAR(tmp120,"tmp120");
								HX_STACK_LINE(3494)
								Float tmp121 = (tmp115 - tmp120);		HX_STACK_VAR(tmp121,"tmp121");
								HX_STACK_LINE(3494)
								v1y = tmp121;
								HX_STACK_LINE(3494)
								Float tmp122 = _this->c1->bounce;		HX_STACK_VAR(tmp122,"tmp122");
								HX_STACK_LINE(3494)
								Float tmp123 = (_this->nx * v1x);		HX_STACK_VAR(tmp123,"tmp123");
								HX_STACK_LINE(3494)
								Float tmp124 = (_this->ny * v1y);		HX_STACK_VAR(tmp124,"tmp124");
								HX_STACK_LINE(3494)
								Float tmp125 = (tmp123 + tmp124);		HX_STACK_VAR(tmp125,"tmp125");
								HX_STACK_LINE(3494)
								Float tmp126 = (tmp122 + tmp125);		HX_STACK_VAR(tmp126,"tmp126");
								HX_STACK_LINE(3494)
								Float tmp127 = _this->surfacey;		HX_STACK_VAR(tmp127,"tmp127");
								HX_STACK_LINE(3494)
								Float tmp128 = (tmp126 + tmp127);		HX_STACK_VAR(tmp128,"tmp128");
								HX_STACK_LINE(3494)
								Float tmp129 = _this->c1->nMass;		HX_STACK_VAR(tmp129,"tmp129");
								HX_STACK_LINE(3494)
								Float tmp130 = (tmp128 * tmp129);		HX_STACK_VAR(tmp130,"tmp130");
								HX_STACK_LINE(3494)
								j = tmp130;
								HX_STACK_LINE(3494)
								Float tmp131 = _this->c1->jnAcc;		HX_STACK_VAR(tmp131,"tmp131");
								HX_STACK_LINE(3494)
								jOld = tmp131;
								HX_STACK_LINE(3494)
								Float tmp132 = (jOld - j);		HX_STACK_VAR(tmp132,"tmp132");
								HX_STACK_LINE(3494)
								cjAcc = tmp132;
								HX_STACK_LINE(3494)
								bool tmp133 = (cjAcc < ((Float)0.0));		HX_STACK_VAR(tmp133,"tmp133");
								HX_STACK_LINE(3494)
								if ((tmp133)){
									HX_STACK_LINE(3494)
									cjAcc = ((Float)0.0);
								}
								HX_STACK_LINE(3494)
								Float tmp134 = (cjAcc - jOld);		HX_STACK_VAR(tmp134,"tmp134");
								HX_STACK_LINE(3494)
								j = tmp134;
								HX_STACK_LINE(3494)
								_this->c1->jnAcc = cjAcc;
								HX_STACK_LINE(3494)
								Float tmp135 = (_this->nx * j);		HX_STACK_VAR(tmp135,"tmp135");
								HX_STACK_LINE(3494)
								jx = tmp135;
								HX_STACK_LINE(3494)
								Float tmp136 = (_this->ny * j);		HX_STACK_VAR(tmp136,"tmp136");
								HX_STACK_LINE(3494)
								jy = tmp136;
								HX_STACK_LINE(3494)
								Float tmp137 = jx;		HX_STACK_VAR(tmp137,"tmp137");
								HX_STACK_LINE(3494)
								Float tmp138 = _this->b2->imass;		HX_STACK_VAR(tmp138,"tmp138");
								HX_STACK_LINE(3494)
								Float tmp139 = (tmp137 * tmp138);		HX_STACK_VAR(tmp139,"tmp139");
								HX_STACK_LINE(3494)
								hx::AddEq(_this->b2->velx,tmp139);
								HX_STACK_LINE(3494)
								Float tmp140 = jy;		HX_STACK_VAR(tmp140,"tmp140");
								HX_STACK_LINE(3494)
								Float tmp141 = _this->b2->imass;		HX_STACK_VAR(tmp141,"tmp141");
								HX_STACK_LINE(3494)
								Float tmp142 = (tmp140 * tmp141);		HX_STACK_VAR(tmp142,"tmp142");
								HX_STACK_LINE(3494)
								hx::AddEq(_this->b2->vely,tmp142);
								HX_STACK_LINE(3494)
								Float tmp143 = jx;		HX_STACK_VAR(tmp143,"tmp143");
								HX_STACK_LINE(3494)
								Float tmp144 = _this->b1->imass;		HX_STACK_VAR(tmp144,"tmp144");
								HX_STACK_LINE(3494)
								Float tmp145 = (tmp143 * tmp144);		HX_STACK_VAR(tmp145,"tmp145");
								HX_STACK_LINE(3494)
								hx::SubEq(_this->b1->velx,tmp145);
								HX_STACK_LINE(3494)
								Float tmp146 = jy;		HX_STACK_VAR(tmp146,"tmp146");
								HX_STACK_LINE(3494)
								Float tmp147 = _this->b1->imass;		HX_STACK_VAR(tmp147,"tmp147");
								HX_STACK_LINE(3494)
								Float tmp148 = (tmp146 * tmp147);		HX_STACK_VAR(tmp148,"tmp148");
								HX_STACK_LINE(3494)
								hx::SubEq(_this->b1->vely,tmp148);
								HX_STACK_LINE(3494)
								Float tmp149 = (_this->rn1b * j);		HX_STACK_VAR(tmp149,"tmp149");
								HX_STACK_LINE(3494)
								Float tmp150 = _this->b2->iinertia;		HX_STACK_VAR(tmp150,"tmp150");
								HX_STACK_LINE(3494)
								Float tmp151 = (tmp149 * tmp150);		HX_STACK_VAR(tmp151,"tmp151");
								HX_STACK_LINE(3494)
								hx::AddEq(_this->b2->angvel,tmp151);
								HX_STACK_LINE(3494)
								Float tmp152 = (_this->rn1a * j);		HX_STACK_VAR(tmp152,"tmp152");
								HX_STACK_LINE(3494)
								Float tmp153 = _this->b1->iinertia;		HX_STACK_VAR(tmp153,"tmp153");
								HX_STACK_LINE(3494)
								Float tmp154 = (tmp152 * tmp153);		HX_STACK_VAR(tmp154,"tmp154");
								HX_STACK_LINE(3494)
								hx::SubEq(_this->b1->angvel,tmp154);
							}
						}
						HX_STACK_LINE(3495)
						Float tmp31 = hx::Mod(b1->angvel,MAX_VEL);		HX_STACK_VAR(tmp31,"tmp31");
						HX_STACK_LINE(3495)
						b1->sweep_angvel = tmp31;
						HX_STACK_LINE(3496)
						Float tmp32 = hx::Mod(b2->angvel,MAX_VEL);		HX_STACK_VAR(tmp32,"tmp32");
						HX_STACK_LINE(3496)
						b2->sweep_angvel = tmp32;
					}
				}
			}
			HX_STACK_LINE(3500)
			bool tmp23 = (arb != null());		HX_STACK_VAR(tmp23,"tmp23");
			HX_STACK_LINE(3500)
			bool tmp24 = tmp23;		HX_STACK_VAR(tmp24,"tmp24");
			HX_STACK_LINE(3500)
			bool tmp25;		HX_STACK_VAR(tmp25,"tmp25");
			HX_STACK_LINE(3500)
			if ((tmp24)){
				HX_STACK_LINE(3500)
				bool tmp26 = arb->active;		HX_STACK_VAR(tmp26,"tmp26");
				HX_STACK_LINE(3500)
				bool tmp27 = tmp26;		HX_STACK_VAR(tmp27,"tmp27");
				HX_STACK_LINE(3500)
				bool tmp28 = tmp27;		HX_STACK_VAR(tmp28,"tmp28");
				HX_STACK_LINE(3500)
				if ((tmp28)){
					HX_STACK_LINE(3500)
					int tmp29 = arb->immState;		HX_STACK_VAR(tmp29,"tmp29");
					HX_STACK_LINE(3500)
					int tmp30 = ::zpp_nape::util::ZPP_Flags_obj::id_ImmState_ACCEPT;		HX_STACK_VAR(tmp30,"tmp30");
					HX_STACK_LINE(3500)
					int tmp31 = tmp30;		HX_STACK_VAR(tmp31,"tmp31");
					HX_STACK_LINE(3500)
					int tmp32 = tmp31;		HX_STACK_VAR(tmp32,"tmp32");
					HX_STACK_LINE(3500)
					int tmp33 = tmp32;		HX_STACK_VAR(tmp33,"tmp33");
					HX_STACK_LINE(3500)
					int tmp34 = (int(tmp29) & int(tmp33));		HX_STACK_VAR(tmp34,"tmp34");
					HX_STACK_LINE(3500)
					int tmp35 = tmp34;		HX_STACK_VAR(tmp35,"tmp35");
					HX_STACK_LINE(3500)
					int tmp36 = tmp35;		HX_STACK_VAR(tmp36,"tmp36");
					HX_STACK_LINE(3500)
					int tmp37 = tmp36;		HX_STACK_VAR(tmp37,"tmp37");
					HX_STACK_LINE(3500)
					tmp25 = (tmp37 != (int)0);
				}
				else{
					HX_STACK_LINE(3500)
					tmp25 = false;
				}
			}
			else{
				HX_STACK_LINE(3500)
				tmp25 = false;
			}
			HX_STACK_LINE(3500)
			bool tmp26;		HX_STACK_VAR(tmp26,"tmp26");
			HX_STACK_LINE(3500)
			if ((tmp25)){
				HX_STACK_LINE(3500)
				int tmp27 = arb->type;		HX_STACK_VAR(tmp27,"tmp27");
				HX_STACK_LINE(3500)
				int tmp28 = ::zpp_nape::dynamics::ZPP_Arbiter_obj::COL;		HX_STACK_VAR(tmp28,"tmp28");
				HX_STACK_LINE(3500)
				int tmp29 = tmp28;		HX_STACK_VAR(tmp29,"tmp29");
				HX_STACK_LINE(3500)
				tmp26 = (tmp27 == tmp29);
			}
			else{
				HX_STACK_LINE(3500)
				tmp26 = false;
			}
			HX_STACK_LINE(3500)
			if ((tmp26)){
				HX_STACK_LINE(3501)
				bool tmp27 = b1->sweepFrozen;		HX_STACK_VAR(tmp27,"tmp27");
				HX_STACK_LINE(3501)
				bool tmp28 = tmp27;		HX_STACK_VAR(tmp28,"tmp28");
				HX_STACK_LINE(3501)
				bool tmp29 = !(tmp28);		HX_STACK_VAR(tmp29,"tmp29");
				HX_STACK_LINE(3501)
				bool tmp30;		HX_STACK_VAR(tmp30,"tmp30");
				HX_STACK_LINE(3501)
				if ((tmp29)){
					HX_STACK_LINE(3501)
					int tmp31 = b1->type;		HX_STACK_VAR(tmp31,"tmp31");
					HX_STACK_LINE(3501)
					int tmp32 = ::zpp_nape::util::ZPP_Flags_obj::id_BodyType_KINEMATIC;		HX_STACK_VAR(tmp32,"tmp32");
					HX_STACK_LINE(3501)
					int tmp33 = tmp32;		HX_STACK_VAR(tmp33,"tmp33");
					HX_STACK_LINE(3501)
					bool tmp34 = (tmp31 == tmp33);		HX_STACK_VAR(tmp34,"tmp34");
					HX_STACK_LINE(3501)
					bool tmp35 = tmp34;		HX_STACK_VAR(tmp35,"tmp35");
					HX_STACK_LINE(3501)
					bool tmp36 = tmp35;		HX_STACK_VAR(tmp36,"tmp36");
					HX_STACK_LINE(3501)
					tmp30 = !(tmp36);
				}
				else{
					HX_STACK_LINE(3501)
					tmp30 = false;
				}
				HX_STACK_LINE(3501)
				if ((tmp30)){
					HX_STACK_LINE(3502)
					b1->sweepFrozen = true;
					HX_STACK_LINE(3503)
					bool tmp31 = minTOI->failed;		HX_STACK_VAR(tmp31,"tmp31");
					HX_STACK_LINE(3503)
					if ((tmp31)){
						HX_STACK_LINE(3503)
						Float tmp32 = b1->sweep_angvel = (int)0;		HX_STACK_VAR(tmp32,"tmp32");
						HX_STACK_LINE(3503)
						b1->angvel = tmp32;
					}
					else{
						HX_STACK_LINE(3504)
						bool tmp32 = minTOI->slipped;		HX_STACK_VAR(tmp32,"tmp32");
						HX_STACK_LINE(3504)
						if ((tmp32)){
							HX_STACK_LINE(3504)
							Float tmp33 = ::nape::Config_obj::angularCCDSlipScale;		HX_STACK_VAR(tmp33,"tmp33");
							HX_STACK_LINE(3504)
							Float tmp34 = hx::MultEq(b1->sweep_angvel,tmp33);		HX_STACK_VAR(tmp34,"tmp34");
							HX_STACK_LINE(3504)
							b1->angvel = tmp34;
						}
						else{
							HX_STACK_LINE(3505)
							b1->angvel = b1->sweep_angvel;
						}
					}
				}
				HX_STACK_LINE(3507)
				bool tmp31 = b2->sweepFrozen;		HX_STACK_VAR(tmp31,"tmp31");
				HX_STACK_LINE(3507)
				bool tmp32 = tmp31;		HX_STACK_VAR(tmp32,"tmp32");
				HX_STACK_LINE(3507)
				bool tmp33 = !(tmp32);		HX_STACK_VAR(tmp33,"tmp33");
				HX_STACK_LINE(3507)
				bool tmp34;		HX_STACK_VAR(tmp34,"tmp34");
				HX_STACK_LINE(3507)
				if ((tmp33)){
					HX_STACK_LINE(3507)
					int tmp35 = b2->type;		HX_STACK_VAR(tmp35,"tmp35");
					HX_STACK_LINE(3507)
					int tmp36 = ::zpp_nape::util::ZPP_Flags_obj::id_BodyType_KINEMATIC;		HX_STACK_VAR(tmp36,"tmp36");
					HX_STACK_LINE(3507)
					int tmp37 = tmp36;		HX_STACK_VAR(tmp37,"tmp37");
					HX_STACK_LINE(3507)
					bool tmp38 = (tmp35 == tmp37);		HX_STACK_VAR(tmp38,"tmp38");
					HX_STACK_LINE(3507)
					bool tmp39 = tmp38;		HX_STACK_VAR(tmp39,"tmp39");
					HX_STACK_LINE(3507)
					bool tmp40 = tmp39;		HX_STACK_VAR(tmp40,"tmp40");
					HX_STACK_LINE(3507)
					tmp34 = !(tmp40);
				}
				else{
					HX_STACK_LINE(3507)
					tmp34 = false;
				}
				HX_STACK_LINE(3507)
				if ((tmp34)){
					HX_STACK_LINE(3508)
					b2->sweepFrozen = true;
					HX_STACK_LINE(3509)
					bool tmp35 = minTOI->failed;		HX_STACK_VAR(tmp35,"tmp35");
					HX_STACK_LINE(3509)
					if ((tmp35)){
						HX_STACK_LINE(3509)
						Float tmp36 = b2->sweep_angvel = (int)0;		HX_STACK_VAR(tmp36,"tmp36");
						HX_STACK_LINE(3509)
						b2->angvel = tmp36;
					}
					else{
						HX_STACK_LINE(3510)
						bool tmp36 = minTOI->slipped;		HX_STACK_VAR(tmp36,"tmp36");
						HX_STACK_LINE(3510)
						if ((tmp36)){
							HX_STACK_LINE(3510)
							Float tmp37 = ::nape::Config_obj::angularCCDSlipScale;		HX_STACK_VAR(tmp37,"tmp37");
							HX_STACK_LINE(3510)
							Float tmp38 = hx::MultEq(b2->sweep_angvel,tmp37);		HX_STACK_VAR(tmp38,"tmp38");
							HX_STACK_LINE(3510)
							b2->angvel = tmp38;
						}
						else{
							HX_STACK_LINE(3511)
							b2->angvel = b2->sweep_angvel;
						}
					}
				}
			}
			HX_STACK_LINE(3514)
			{
				HX_STACK_LINE(3515)
				::zpp_nape::geom::ZPP_ToiEvent o = minTOI;		HX_STACK_VAR(o,"o");
				HX_STACK_LINE(3525)
				::zpp_nape::geom::ZPP_ToiEvent tmp27 = ::zpp_nape::geom::ZPP_ToiEvent_obj::zpp_pool;		HX_STACK_VAR(tmp27,"tmp27");
				HX_STACK_LINE(3525)
				o->next = tmp27;
				HX_STACK_LINE(3526)
				::zpp_nape::geom::ZPP_ToiEvent_obj::zpp_pool = o;
			}
		}
		HX_STACK_LINE(3533)
		while((true)){
			HX_STACK_LINE(3533)
			::zpp_nape::util::ZNPList_ZPP_ToiEvent tmp5 = this->toiEvents;		HX_STACK_VAR(tmp5,"tmp5");
			HX_STACK_LINE(3533)
			::zpp_nape::util::ZNPNode_ZPP_ToiEvent tmp6 = tmp5->head;		HX_STACK_VAR(tmp6,"tmp6");
			HX_STACK_LINE(3533)
			bool tmp7 = (tmp6 == null());		HX_STACK_VAR(tmp7,"tmp7");
			HX_STACK_LINE(3533)
			bool tmp8 = !(tmp7);		HX_STACK_VAR(tmp8,"tmp8");
			HX_STACK_LINE(3533)
			bool tmp9 = !(tmp8);		HX_STACK_VAR(tmp9,"tmp9");
			HX_STACK_LINE(3533)
			if ((tmp9)){
				HX_STACK_LINE(3533)
				break;
			}
			HX_STACK_LINE(3534)
			::zpp_nape::util::ZNPList_ZPP_ToiEvent tmp10 = this->toiEvents;		HX_STACK_VAR(tmp10,"tmp10");
			HX_STACK_LINE(3534)
			::zpp_nape::geom::ZPP_ToiEvent tmp11 = tmp10->pop_unsafe();		HX_STACK_VAR(tmp11,"tmp11");
			HX_STACK_LINE(3534)
			::zpp_nape::geom::ZPP_ToiEvent toi = tmp11;		HX_STACK_VAR(toi,"toi");
			HX_STACK_LINE(3536)
			{
				HX_STACK_LINE(3537)
				::zpp_nape::geom::ZPP_ToiEvent o = toi;		HX_STACK_VAR(o,"o");
				HX_STACK_LINE(3547)
				::zpp_nape::geom::ZPP_ToiEvent tmp12 = ::zpp_nape::geom::ZPP_ToiEvent_obj::zpp_pool;		HX_STACK_VAR(tmp12,"tmp12");
				HX_STACK_LINE(3547)
				o->next = tmp12;
				HX_STACK_LINE(3548)
				::zpp_nape::geom::ZPP_ToiEvent_obj::zpp_pool = o;
			}
		}
		HX_STACK_LINE(3556)
		{
			HX_STACK_LINE(3557)
			::zpp_nape::util::ZNPList_ZPP_Body tmp5 = this->kinematics;		HX_STACK_VAR(tmp5,"tmp5");
			HX_STACK_LINE(3557)
			::zpp_nape::util::ZNPNode_ZPP_Body cx_ite = tmp5->head;		HX_STACK_VAR(cx_ite,"cx_ite");
			HX_STACK_LINE(3558)
			while((true)){
				HX_STACK_LINE(3558)
				bool tmp6 = (cx_ite != null());		HX_STACK_VAR(tmp6,"tmp6");
				HX_STACK_LINE(3558)
				bool tmp7 = !(tmp6);		HX_STACK_VAR(tmp7,"tmp7");
				HX_STACK_LINE(3558)
				if ((tmp7)){
					HX_STACK_LINE(3558)
					break;
				}
				HX_STACK_LINE(3559)
				::zpp_nape::phys::ZPP_Body cur = cx_ite->elt;		HX_STACK_VAR(cur,"cur");
				HX_STACK_LINE(3560)
				{
					HX_STACK_LINE(3561)
					{
						HX_STACK_LINE(3561)
						Float tmp8 = (deltaTime - cur->sweepTime);		HX_STACK_VAR(tmp8,"tmp8");
						HX_STACK_LINE(3561)
						Float delta = tmp8;		HX_STACK_VAR(delta,"delta");
						HX_STACK_LINE(3561)
						bool tmp9 = (delta != (int)0);		HX_STACK_VAR(tmp9,"tmp9");
						HX_STACK_LINE(3561)
						if ((tmp9)){
							HX_STACK_LINE(3561)
							cur->sweepTime = deltaTime;
							HX_STACK_LINE(3561)
							{
								HX_STACK_LINE(3561)
								Float t = delta;		HX_STACK_VAR(t,"t");
								HX_STACK_LINE(3561)
								Float tmp10 = (cur->velx * t);		HX_STACK_VAR(tmp10,"tmp10");
								HX_STACK_LINE(3561)
								hx::AddEq(cur->posx,tmp10);
								HX_STACK_LINE(3561)
								Float tmp11 = (cur->vely * t);		HX_STACK_VAR(tmp11,"tmp11");
								HX_STACK_LINE(3561)
								hx::AddEq(cur->posy,tmp11);
							}
							HX_STACK_LINE(3561)
							bool tmp10 = (cur->angvel != (int)0);		HX_STACK_VAR(tmp10,"tmp10");
							HX_STACK_LINE(3561)
							if ((tmp10)){
								HX_STACK_LINE(3561)
								Float tmp11 = (cur->sweep_angvel * delta);		HX_STACK_VAR(tmp11,"tmp11");
								HX_STACK_LINE(3561)
								Float dr = tmp11;		HX_STACK_VAR(dr,"dr");
								HX_STACK_LINE(3561)
								hx::AddEq(cur->rot,dr);
								HX_STACK_LINE(3561)
								Float tmp12 = (dr * dr);		HX_STACK_VAR(tmp12,"tmp12");
								HX_STACK_LINE(3561)
								bool tmp13 = (tmp12 > ((Float)0.0001));		HX_STACK_VAR(tmp13,"tmp13");
								HX_STACK_LINE(3561)
								if ((tmp13)){
									HX_STACK_LINE(3561)
									Float tmp14 = cur->rot;		HX_STACK_VAR(tmp14,"tmp14");
									HX_STACK_LINE(3561)
									Float tmp15 = ::Math_obj::sin(tmp14);		HX_STACK_VAR(tmp15,"tmp15");
									HX_STACK_LINE(3561)
									cur->axisx = tmp15;
									HX_STACK_LINE(3561)
									Float tmp16 = cur->rot;		HX_STACK_VAR(tmp16,"tmp16");
									HX_STACK_LINE(3561)
									Float tmp17 = ::Math_obj::cos(tmp16);		HX_STACK_VAR(tmp17,"tmp17");
									HX_STACK_LINE(3561)
									cur->axisy = tmp17;
									HX_STACK_LINE(3561)
									Dynamic();
								}
								else{
									HX_STACK_LINE(3561)
									Float tmp14 = (dr * dr);		HX_STACK_VAR(tmp14,"tmp14");
									HX_STACK_LINE(3561)
									Float d2 = tmp14;		HX_STACK_VAR(d2,"d2");
									HX_STACK_LINE(3561)
									Float tmp15 = (((Float)0.5) * d2);		HX_STACK_VAR(tmp15,"tmp15");
									HX_STACK_LINE(3561)
									Float tmp16 = ((int)1 - tmp15);		HX_STACK_VAR(tmp16,"tmp16");
									HX_STACK_LINE(3561)
									Float p = tmp16;		HX_STACK_VAR(p,"p");
									HX_STACK_LINE(3561)
									Float tmp17 = (d2 * d2);		HX_STACK_VAR(tmp17,"tmp17");
									HX_STACK_LINE(3561)
									Float tmp18 = (Float(tmp17) / Float((int)8));		HX_STACK_VAR(tmp18,"tmp18");
									HX_STACK_LINE(3561)
									Float tmp19 = ((int)1 - tmp18);		HX_STACK_VAR(tmp19,"tmp19");
									HX_STACK_LINE(3561)
									Float m = tmp19;		HX_STACK_VAR(m,"m");
									HX_STACK_LINE(3561)
									Float tmp20 = (p * cur->axisx);		HX_STACK_VAR(tmp20,"tmp20");
									HX_STACK_LINE(3561)
									Float tmp21 = (dr * cur->axisy);		HX_STACK_VAR(tmp21,"tmp21");
									HX_STACK_LINE(3561)
									Float tmp22 = (tmp20 + tmp21);		HX_STACK_VAR(tmp22,"tmp22");
									HX_STACK_LINE(3561)
									Float tmp23 = m;		HX_STACK_VAR(tmp23,"tmp23");
									HX_STACK_LINE(3561)
									Float tmp24 = (tmp22 * tmp23);		HX_STACK_VAR(tmp24,"tmp24");
									HX_STACK_LINE(3561)
									Float nx = tmp24;		HX_STACK_VAR(nx,"nx");
									HX_STACK_LINE(3561)
									Float tmp25 = (p * cur->axisy);		HX_STACK_VAR(tmp25,"tmp25");
									HX_STACK_LINE(3561)
									Float tmp26 = (dr * cur->axisx);		HX_STACK_VAR(tmp26,"tmp26");
									HX_STACK_LINE(3561)
									Float tmp27 = (tmp25 - tmp26);		HX_STACK_VAR(tmp27,"tmp27");
									HX_STACK_LINE(3561)
									Float tmp28 = m;		HX_STACK_VAR(tmp28,"tmp28");
									HX_STACK_LINE(3561)
									Float tmp29 = (tmp27 * tmp28);		HX_STACK_VAR(tmp29,"tmp29");
									HX_STACK_LINE(3561)
									cur->axisy = tmp29;
									HX_STACK_LINE(3561)
									cur->axisx = nx;
								}
							}
						}
					}
					HX_STACK_LINE(3562)
					cur->sweepTime = (int)0;
				}
				HX_STACK_LINE(3564)
				cx_ite = cx_ite->next;
			}
		}
		HX_STACK_LINE(3567)
		{
			HX_STACK_LINE(3568)
			::zpp_nape::util::ZNPList_ZPP_Body tmp5 = this->live;		HX_STACK_VAR(tmp5,"tmp5");
			HX_STACK_LINE(3568)
			::zpp_nape::util::ZNPNode_ZPP_Body cx_ite = tmp5->head;		HX_STACK_VAR(cx_ite,"cx_ite");
			HX_STACK_LINE(3569)
			while((true)){
				HX_STACK_LINE(3569)
				bool tmp6 = (cx_ite != null());		HX_STACK_VAR(tmp6,"tmp6");
				HX_STACK_LINE(3569)
				bool tmp7 = !(tmp6);		HX_STACK_VAR(tmp7,"tmp7");
				HX_STACK_LINE(3569)
				if ((tmp7)){
					HX_STACK_LINE(3569)
					break;
				}
				HX_STACK_LINE(3570)
				::zpp_nape::phys::ZPP_Body cur = cx_ite->elt;		HX_STACK_VAR(cur,"cur");
				HX_STACK_LINE(3571)
				{
					HX_STACK_LINE(3572)
					bool tmp8 = cur->sweepFrozen;		HX_STACK_VAR(tmp8,"tmp8");
					HX_STACK_LINE(3572)
					bool tmp9 = !(tmp8);		HX_STACK_VAR(tmp9,"tmp9");
					HX_STACK_LINE(3572)
					if ((tmp9)){
						HX_STACK_LINE(3573)
						Float tmp10 = (deltaTime - cur->sweepTime);		HX_STACK_VAR(tmp10,"tmp10");
						HX_STACK_LINE(3573)
						Float delta = tmp10;		HX_STACK_VAR(delta,"delta");
						HX_STACK_LINE(3573)
						bool tmp11 = (delta != (int)0);		HX_STACK_VAR(tmp11,"tmp11");
						HX_STACK_LINE(3573)
						if ((tmp11)){
							HX_STACK_LINE(3573)
							cur->sweepTime = deltaTime;
							HX_STACK_LINE(3573)
							{
								HX_STACK_LINE(3573)
								Float t = delta;		HX_STACK_VAR(t,"t");
								HX_STACK_LINE(3573)
								Float tmp12 = (cur->velx * t);		HX_STACK_VAR(tmp12,"tmp12");
								HX_STACK_LINE(3573)
								hx::AddEq(cur->posx,tmp12);
								HX_STACK_LINE(3573)
								Float tmp13 = (cur->vely * t);		HX_STACK_VAR(tmp13,"tmp13");
								HX_STACK_LINE(3573)
								hx::AddEq(cur->posy,tmp13);
							}
							HX_STACK_LINE(3573)
							bool tmp12 = (cur->angvel != (int)0);		HX_STACK_VAR(tmp12,"tmp12");
							HX_STACK_LINE(3573)
							if ((tmp12)){
								HX_STACK_LINE(3573)
								Float tmp13 = (cur->sweep_angvel * delta);		HX_STACK_VAR(tmp13,"tmp13");
								HX_STACK_LINE(3573)
								Float dr = tmp13;		HX_STACK_VAR(dr,"dr");
								HX_STACK_LINE(3573)
								hx::AddEq(cur->rot,dr);
								HX_STACK_LINE(3573)
								Float tmp14 = (dr * dr);		HX_STACK_VAR(tmp14,"tmp14");
								HX_STACK_LINE(3573)
								bool tmp15 = (tmp14 > ((Float)0.0001));		HX_STACK_VAR(tmp15,"tmp15");
								HX_STACK_LINE(3573)
								if ((tmp15)){
									HX_STACK_LINE(3573)
									Float tmp16 = cur->rot;		HX_STACK_VAR(tmp16,"tmp16");
									HX_STACK_LINE(3573)
									Float tmp17 = ::Math_obj::sin(tmp16);		HX_STACK_VAR(tmp17,"tmp17");
									HX_STACK_LINE(3573)
									cur->axisx = tmp17;
									HX_STACK_LINE(3573)
									Float tmp18 = cur->rot;		HX_STACK_VAR(tmp18,"tmp18");
									HX_STACK_LINE(3573)
									Float tmp19 = ::Math_obj::cos(tmp18);		HX_STACK_VAR(tmp19,"tmp19");
									HX_STACK_LINE(3573)
									cur->axisy = tmp19;
									HX_STACK_LINE(3573)
									Dynamic();
								}
								else{
									HX_STACK_LINE(3573)
									Float tmp16 = (dr * dr);		HX_STACK_VAR(tmp16,"tmp16");
									HX_STACK_LINE(3573)
									Float d2 = tmp16;		HX_STACK_VAR(d2,"d2");
									HX_STACK_LINE(3573)
									Float tmp17 = (((Float)0.5) * d2);		HX_STACK_VAR(tmp17,"tmp17");
									HX_STACK_LINE(3573)
									Float tmp18 = ((int)1 - tmp17);		HX_STACK_VAR(tmp18,"tmp18");
									HX_STACK_LINE(3573)
									Float p = tmp18;		HX_STACK_VAR(p,"p");
									HX_STACK_LINE(3573)
									Float tmp19 = (d2 * d2);		HX_STACK_VAR(tmp19,"tmp19");
									HX_STACK_LINE(3573)
									Float tmp20 = (Float(tmp19) / Float((int)8));		HX_STACK_VAR(tmp20,"tmp20");
									HX_STACK_LINE(3573)
									Float tmp21 = ((int)1 - tmp20);		HX_STACK_VAR(tmp21,"tmp21");
									HX_STACK_LINE(3573)
									Float m = tmp21;		HX_STACK_VAR(m,"m");
									HX_STACK_LINE(3573)
									Float tmp22 = (p * cur->axisx);		HX_STACK_VAR(tmp22,"tmp22");
									HX_STACK_LINE(3573)
									Float tmp23 = (dr * cur->axisy);		HX_STACK_VAR(tmp23,"tmp23");
									HX_STACK_LINE(3573)
									Float tmp24 = (tmp22 + tmp23);		HX_STACK_VAR(tmp24,"tmp24");
									HX_STACK_LINE(3573)
									Float tmp25 = m;		HX_STACK_VAR(tmp25,"tmp25");
									HX_STACK_LINE(3573)
									Float tmp26 = (tmp24 * tmp25);		HX_STACK_VAR(tmp26,"tmp26");
									HX_STACK_LINE(3573)
									Float nx = tmp26;		HX_STACK_VAR(nx,"nx");
									HX_STACK_LINE(3573)
									Float tmp27 = (p * cur->axisy);		HX_STACK_VAR(tmp27,"tmp27");
									HX_STACK_LINE(3573)
									Float tmp28 = (dr * cur->axisx);		HX_STACK_VAR(tmp28,"tmp28");
									HX_STACK_LINE(3573)
									Float tmp29 = (tmp27 - tmp28);		HX_STACK_VAR(tmp29,"tmp29");
									HX_STACK_LINE(3573)
									Float tmp30 = m;		HX_STACK_VAR(tmp30,"tmp30");
									HX_STACK_LINE(3573)
									Float tmp31 = (tmp29 * tmp30);		HX_STACK_VAR(tmp31,"tmp31");
									HX_STACK_LINE(3573)
									cur->axisy = tmp31;
									HX_STACK_LINE(3573)
									cur->axisx = nx;
								}
							}
						}
					}
					HX_STACK_LINE(3575)
					cur->sweepTime = (int)0;
				}
				HX_STACK_LINE(3577)
				cx_ite = cx_ite->next;
			}
		}
	}
return null();
}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Space_obj,continuousCollisions,(void))

::zpp_nape::dynamics::ZPP_Arbiter ZPP_Space_obj::continuousEvent( ::zpp_nape::shape::ZPP_Shape s1,::zpp_nape::shape::ZPP_Shape s2,bool stat,::zpp_nape::dynamics::ZPP_Arbiter in_arb,bool _){
	HX_STACK_FRAME("zpp_nape.space.ZPP_Space","continuousEvent",0xdb782dd5,"zpp_nape.space.ZPP_Space.continuousEvent","zpp_nape/space/Space.hx",3581,0x2b65ed03)
	HX_STACK_THIS(this)
	HX_STACK_ARG(s1,"s1")
	HX_STACK_ARG(s2,"s2")
	HX_STACK_ARG(stat,"stat")
	HX_STACK_ARG(in_arb,"in_arb")
	HX_STACK_ARG(_,"_")
	HX_STACK_LINE(3582)
	bool tmp = s1->body->sweepFrozen;		HX_STACK_VAR(tmp,"tmp");
	HX_STACK_LINE(3582)
	bool tmp1;		HX_STACK_VAR(tmp1,"tmp1");
	HX_STACK_LINE(3582)
	if ((tmp)){
		HX_STACK_LINE(3582)
		tmp1 = s2->body->sweepFrozen;
	}
	else{
		HX_STACK_LINE(3582)
		tmp1 = false;
	}
	HX_STACK_LINE(3582)
	if ((tmp1)){
		HX_STACK_LINE(3582)
		::zpp_nape::dynamics::ZPP_Arbiter tmp2 = in_arb;		HX_STACK_VAR(tmp2,"tmp2");
		HX_STACK_LINE(3582)
		return tmp2;
	}
	HX_STACK_LINE(3583)
	bool tmp2 = s1->body->disableCCD;		HX_STACK_VAR(tmp2,"tmp2");
	HX_STACK_LINE(3583)
	bool tmp3 = !(tmp2);		HX_STACK_VAR(tmp3,"tmp3");
	HX_STACK_LINE(3583)
	bool tmp4;		HX_STACK_VAR(tmp4,"tmp4");
	HX_STACK_LINE(3583)
	if ((tmp3)){
		HX_STACK_LINE(3583)
		tmp4 = s2->body->disableCCD;
	}
	else{
		HX_STACK_LINE(3583)
		tmp4 = true;
	}
	HX_STACK_LINE(3583)
	if ((tmp4)){
		HX_STACK_LINE(3583)
		::zpp_nape::dynamics::ZPP_Arbiter tmp5 = in_arb;		HX_STACK_VAR(tmp5,"tmp5");
		HX_STACK_LINE(3583)
		return tmp5;
	}
	HX_STACK_LINE(3584)
	bool tmp5 = (in_arb != null());		HX_STACK_VAR(tmp5,"tmp5");
	HX_STACK_LINE(3584)
	bool tmp6 = tmp5;		HX_STACK_VAR(tmp6,"tmp6");
	HX_STACK_LINE(3584)
	bool tmp7;		HX_STACK_VAR(tmp7,"tmp7");
	HX_STACK_LINE(3584)
	if ((tmp6)){
		HX_STACK_LINE(3584)
		tmp7 = (in_arb->colarb == null());
	}
	else{
		HX_STACK_LINE(3584)
		tmp7 = false;
	}
	HX_STACK_LINE(3584)
	bool tmp8 = !(tmp7);		HX_STACK_VAR(tmp8,"tmp8");
	HX_STACK_LINE(3584)
	bool tmp9;		HX_STACK_VAR(tmp9,"tmp9");
	HX_STACK_LINE(3584)
	if ((tmp8)){
		HX_STACK_LINE(3584)
		int tmp10;		HX_STACK_VAR(tmp10,"tmp10");
		HX_STACK_LINE(3584)
		{
			HX_STACK_LINE(3584)
			::zpp_nape::phys::ZPP_Body b1 = s1->body;		HX_STACK_VAR(b1,"b1");
			HX_STACK_LINE(3584)
			::zpp_nape::phys::ZPP_Body b2 = s2->body;		HX_STACK_VAR(b2,"b2");
			HX_STACK_LINE(3584)
			bool con_ignore;		HX_STACK_VAR(con_ignore,"con_ignore");
			HX_STACK_LINE(3584)
			{
				HX_STACK_LINE(3584)
				con_ignore = false;
				HX_STACK_LINE(3584)
				{
					HX_STACK_LINE(3584)
					::zpp_nape::util::ZNPNode_ZPP_Constraint tmp11 = b1->constraints->head;		HX_STACK_VAR(tmp11,"tmp11");
					HX_STACK_LINE(3584)
					::zpp_nape::util::ZNPNode_ZPP_Constraint tmp12 = tmp11;		HX_STACK_VAR(tmp12,"tmp12");
					HX_STACK_LINE(3584)
					::zpp_nape::util::ZNPNode_ZPP_Constraint cx_ite = tmp12;		HX_STACK_VAR(cx_ite,"cx_ite");
					HX_STACK_LINE(3584)
					while((true)){
						HX_STACK_LINE(3584)
						bool tmp13 = (cx_ite != null());		HX_STACK_VAR(tmp13,"tmp13");
						HX_STACK_LINE(3584)
						bool tmp14 = tmp13;		HX_STACK_VAR(tmp14,"tmp14");
						HX_STACK_LINE(3584)
						bool tmp15 = tmp14;		HX_STACK_VAR(tmp15,"tmp15");
						HX_STACK_LINE(3584)
						bool tmp16 = !(tmp15);		HX_STACK_VAR(tmp16,"tmp16");
						HX_STACK_LINE(3584)
						bool tmp17 = tmp16;		HX_STACK_VAR(tmp17,"tmp17");
						HX_STACK_LINE(3584)
						bool tmp18 = tmp17;		HX_STACK_VAR(tmp18,"tmp18");
						HX_STACK_LINE(3584)
						if ((tmp18)){
							HX_STACK_LINE(3584)
							break;
						}
						HX_STACK_LINE(3584)
						::zpp_nape::constraint::ZPP_Constraint con = cx_ite->elt;		HX_STACK_VAR(con,"con");
						HX_STACK_LINE(3584)
						{
							HX_STACK_LINE(3584)
							bool tmp19 = con->ignore;		HX_STACK_VAR(tmp19,"tmp19");
							HX_STACK_LINE(3584)
							bool tmp20;		HX_STACK_VAR(tmp20,"tmp20");
							HX_STACK_LINE(3584)
							bool tmp21 = tmp19;		HX_STACK_VAR(tmp21,"tmp21");
							HX_STACK_LINE(3584)
							if ((tmp21)){
								HX_STACK_LINE(3584)
								int tmp22 = b1->id;		HX_STACK_VAR(tmp22,"tmp22");
								HX_STACK_LINE(3584)
								int tmp23 = b2->id;		HX_STACK_VAR(tmp23,"tmp23");
								HX_STACK_LINE(3584)
								int tmp24 = tmp22;		HX_STACK_VAR(tmp24,"tmp24");
								HX_STACK_LINE(3584)
								int tmp25 = tmp23;		HX_STACK_VAR(tmp25,"tmp25");
								HX_STACK_LINE(3584)
								int tmp26 = tmp24;		HX_STACK_VAR(tmp26,"tmp26");
								HX_STACK_LINE(3584)
								int tmp27 = tmp25;		HX_STACK_VAR(tmp27,"tmp27");
								HX_STACK_LINE(3584)
								bool tmp28 = con->pair_exists(tmp26,tmp27);		HX_STACK_VAR(tmp28,"tmp28");
								HX_STACK_LINE(3584)
								tmp20 = tmp28;
							}
							else{
								HX_STACK_LINE(3584)
								tmp20 = false;
							}
							HX_STACK_LINE(3584)
							bool tmp22 = tmp20;		HX_STACK_VAR(tmp22,"tmp22");
							HX_STACK_LINE(3584)
							if ((tmp22)){
								HX_STACK_LINE(3584)
								con_ignore = true;
								HX_STACK_LINE(3584)
								break;
							}
						}
						HX_STACK_LINE(3584)
						cx_ite = cx_ite->next;
					}
				}
			}
			HX_STACK_LINE(3584)
			bool tmp11 = con_ignore;		HX_STACK_VAR(tmp11,"tmp11");
			HX_STACK_LINE(3584)
			bool tmp12 = tmp11;		HX_STACK_VAR(tmp12,"tmp12");
			HX_STACK_LINE(3584)
			bool tmp13 = tmp12;		HX_STACK_VAR(tmp13,"tmp13");
			HX_STACK_LINE(3584)
			bool tmp14 = !(tmp13);		HX_STACK_VAR(tmp14,"tmp14");
			HX_STACK_LINE(3584)
			bool tmp15 = tmp14;		HX_STACK_VAR(tmp15,"tmp15");
			HX_STACK_LINE(3584)
			bool tmp16;		HX_STACK_VAR(tmp16,"tmp16");
			HX_STACK_LINE(3584)
			bool tmp17 = tmp15;		HX_STACK_VAR(tmp17,"tmp17");
			HX_STACK_LINE(3584)
			if ((tmp17)){
				HX_STACK_LINE(3584)
				bool tmp18;		HX_STACK_VAR(tmp18,"tmp18");
				HX_STACK_LINE(3584)
				{
					HX_STACK_LINE(3584)
					::zpp_nape::dynamics::ZPP_InteractionGroup tmp19;		HX_STACK_VAR(tmp19,"tmp19");
					HX_STACK_LINE(3584)
					{
						HX_STACK_LINE(3584)
						::zpp_nape::phys::ZPP_Interactor cur = s1;		HX_STACK_VAR(cur,"cur");
						HX_STACK_LINE(3584)
						while((true)){
							HX_STACK_LINE(3584)
							bool tmp20 = (cur != null());		HX_STACK_VAR(tmp20,"tmp20");
							HX_STACK_LINE(3584)
							bool tmp21 = tmp20;		HX_STACK_VAR(tmp21,"tmp21");
							HX_STACK_LINE(3584)
							bool tmp22 = tmp21;		HX_STACK_VAR(tmp22,"tmp22");
							HX_STACK_LINE(3584)
							bool tmp23;		HX_STACK_VAR(tmp23,"tmp23");
							HX_STACK_LINE(3584)
							bool tmp24 = tmp22;		HX_STACK_VAR(tmp24,"tmp24");
							HX_STACK_LINE(3584)
							bool tmp25 = tmp24;		HX_STACK_VAR(tmp25,"tmp25");
							HX_STACK_LINE(3584)
							if ((tmp25)){
								HX_STACK_LINE(3584)
								bool tmp26 = (cur->group == null());		HX_STACK_VAR(tmp26,"tmp26");
								HX_STACK_LINE(3584)
								bool tmp27 = tmp26;		HX_STACK_VAR(tmp27,"tmp27");
								HX_STACK_LINE(3584)
								tmp23 = tmp27;
							}
							else{
								HX_STACK_LINE(3584)
								tmp23 = false;
							}
							HX_STACK_LINE(3584)
							bool tmp26 = tmp23;		HX_STACK_VAR(tmp26,"tmp26");
							HX_STACK_LINE(3584)
							bool tmp27 = tmp26;		HX_STACK_VAR(tmp27,"tmp27");
							HX_STACK_LINE(3584)
							bool tmp28 = !(tmp27);		HX_STACK_VAR(tmp28,"tmp28");
							HX_STACK_LINE(3584)
							bool tmp29 = tmp28;		HX_STACK_VAR(tmp29,"tmp29");
							HX_STACK_LINE(3584)
							bool tmp30 = tmp29;		HX_STACK_VAR(tmp30,"tmp30");
							HX_STACK_LINE(3584)
							bool tmp31 = tmp30;		HX_STACK_VAR(tmp31,"tmp31");
							HX_STACK_LINE(3584)
							bool tmp32 = tmp31;		HX_STACK_VAR(tmp32,"tmp32");
							HX_STACK_LINE(3584)
							if ((tmp32)){
								HX_STACK_LINE(3584)
								break;
							}
							HX_STACK_LINE(3584)
							bool tmp33 = (cur->ishape != null());		HX_STACK_VAR(tmp33,"tmp33");
							HX_STACK_LINE(3584)
							bool tmp34 = tmp33;		HX_STACK_VAR(tmp34,"tmp34");
							HX_STACK_LINE(3584)
							bool tmp35 = tmp34;		HX_STACK_VAR(tmp35,"tmp35");
							HX_STACK_LINE(3584)
							bool tmp36 = tmp35;		HX_STACK_VAR(tmp36,"tmp36");
							HX_STACK_LINE(3584)
							bool tmp37 = tmp36;		HX_STACK_VAR(tmp37,"tmp37");
							HX_STACK_LINE(3584)
							if ((tmp37)){
								HX_STACK_LINE(3584)
								::zpp_nape::phys::ZPP_Body tmp38 = cur->ishape->body;		HX_STACK_VAR(tmp38,"tmp38");
								HX_STACK_LINE(3584)
								::zpp_nape::phys::ZPP_Body tmp39 = tmp38;		HX_STACK_VAR(tmp39,"tmp39");
								HX_STACK_LINE(3584)
								::zpp_nape::phys::ZPP_Body tmp40 = tmp39;		HX_STACK_VAR(tmp40,"tmp40");
								HX_STACK_LINE(3584)
								cur = tmp40;
							}
							else{
								HX_STACK_LINE(3584)
								bool tmp38 = (cur->icompound != null());		HX_STACK_VAR(tmp38,"tmp38");
								HX_STACK_LINE(3584)
								bool tmp39 = tmp38;		HX_STACK_VAR(tmp39,"tmp39");
								HX_STACK_LINE(3584)
								bool tmp40 = tmp39;		HX_STACK_VAR(tmp40,"tmp40");
								HX_STACK_LINE(3584)
								bool tmp41 = tmp40;		HX_STACK_VAR(tmp41,"tmp41");
								HX_STACK_LINE(3584)
								bool tmp42 = tmp41;		HX_STACK_VAR(tmp42,"tmp42");
								HX_STACK_LINE(3584)
								if ((tmp42)){
									HX_STACK_LINE(3584)
									::zpp_nape::phys::ZPP_Compound tmp43 = cur->icompound->compound;		HX_STACK_VAR(tmp43,"tmp43");
									HX_STACK_LINE(3584)
									::zpp_nape::phys::ZPP_Compound tmp44 = tmp43;		HX_STACK_VAR(tmp44,"tmp44");
									HX_STACK_LINE(3584)
									::zpp_nape::phys::ZPP_Compound tmp45 = tmp44;		HX_STACK_VAR(tmp45,"tmp45");
									HX_STACK_LINE(3584)
									cur = tmp45;
								}
								else{
									HX_STACK_LINE(3584)
									::zpp_nape::phys::ZPP_Compound tmp43 = cur->ibody->compound;		HX_STACK_VAR(tmp43,"tmp43");
									HX_STACK_LINE(3584)
									::zpp_nape::phys::ZPP_Compound tmp44 = tmp43;		HX_STACK_VAR(tmp44,"tmp44");
									HX_STACK_LINE(3584)
									::zpp_nape::phys::ZPP_Compound tmp45 = tmp44;		HX_STACK_VAR(tmp45,"tmp45");
									HX_STACK_LINE(3584)
									cur = tmp45;
								}
							}
						}
						HX_STACK_LINE(3584)
						bool tmp20 = (cur == null());		HX_STACK_VAR(tmp20,"tmp20");
						HX_STACK_LINE(3584)
						bool tmp21 = tmp20;		HX_STACK_VAR(tmp21,"tmp21");
						HX_STACK_LINE(3584)
						bool tmp22 = tmp21;		HX_STACK_VAR(tmp22,"tmp22");
						HX_STACK_LINE(3584)
						bool tmp23 = tmp22;		HX_STACK_VAR(tmp23,"tmp23");
						HX_STACK_LINE(3584)
						bool tmp24 = tmp23;		HX_STACK_VAR(tmp24,"tmp24");
						HX_STACK_LINE(3584)
						if ((tmp24)){
							HX_STACK_LINE(3584)
							tmp19 = null();
						}
						else{
							HX_STACK_LINE(3584)
							tmp19 = cur->group;
						}
					}
					HX_STACK_LINE(3584)
					::zpp_nape::dynamics::ZPP_InteractionGroup g1 = tmp19;		HX_STACK_VAR(g1,"g1");
					HX_STACK_LINE(3584)
					bool tmp20 = (g1 == null());		HX_STACK_VAR(tmp20,"tmp20");
					HX_STACK_LINE(3584)
					bool tmp21 = tmp20;		HX_STACK_VAR(tmp21,"tmp21");
					HX_STACK_LINE(3584)
					bool tmp22 = tmp21;		HX_STACK_VAR(tmp22,"tmp22");
					HX_STACK_LINE(3584)
					bool tmp23 = tmp22;		HX_STACK_VAR(tmp23,"tmp23");
					HX_STACK_LINE(3584)
					bool tmp24 = tmp23;		HX_STACK_VAR(tmp24,"tmp24");
					HX_STACK_LINE(3584)
					if ((tmp24)){
						HX_STACK_LINE(3584)
						tmp18 = false;
					}
					else{
						HX_STACK_LINE(3584)
						::zpp_nape::dynamics::ZPP_InteractionGroup tmp25;		HX_STACK_VAR(tmp25,"tmp25");
						HX_STACK_LINE(3584)
						{
							HX_STACK_LINE(3584)
							::zpp_nape::phys::ZPP_Interactor cur = s2;		HX_STACK_VAR(cur,"cur");
							HX_STACK_LINE(3584)
							while((true)){
								HX_STACK_LINE(3584)
								bool tmp26 = (cur != null());		HX_STACK_VAR(tmp26,"tmp26");
								HX_STACK_LINE(3584)
								bool tmp27 = tmp26;		HX_STACK_VAR(tmp27,"tmp27");
								HX_STACK_LINE(3584)
								bool tmp28 = tmp27;		HX_STACK_VAR(tmp28,"tmp28");
								HX_STACK_LINE(3584)
								bool tmp29;		HX_STACK_VAR(tmp29,"tmp29");
								HX_STACK_LINE(3584)
								bool tmp30 = tmp28;		HX_STACK_VAR(tmp30,"tmp30");
								HX_STACK_LINE(3584)
								bool tmp31 = tmp30;		HX_STACK_VAR(tmp31,"tmp31");
								HX_STACK_LINE(3584)
								if ((tmp31)){
									HX_STACK_LINE(3584)
									bool tmp32 = (cur->group == null());		HX_STACK_VAR(tmp32,"tmp32");
									HX_STACK_LINE(3584)
									bool tmp33 = tmp32;		HX_STACK_VAR(tmp33,"tmp33");
									HX_STACK_LINE(3584)
									tmp29 = tmp33;
								}
								else{
									HX_STACK_LINE(3584)
									tmp29 = false;
								}
								HX_STACK_LINE(3584)
								bool tmp32 = tmp29;		HX_STACK_VAR(tmp32,"tmp32");
								HX_STACK_LINE(3584)
								bool tmp33 = tmp32;		HX_STACK_VAR(tmp33,"tmp33");
								HX_STACK_LINE(3584)
								bool tmp34 = !(tmp33);		HX_STACK_VAR(tmp34,"tmp34");
								HX_STACK_LINE(3584)
								bool tmp35 = tmp34;		HX_STACK_VAR(tmp35,"tmp35");
								HX_STACK_LINE(3584)
								bool tmp36 = tmp35;		HX_STACK_VAR(tmp36,"tmp36");
								HX_STACK_LINE(3584)
								bool tmp37 = tmp36;		HX_STACK_VAR(tmp37,"tmp37");
								HX_STACK_LINE(3584)
								bool tmp38 = tmp37;		HX_STACK_VAR(tmp38,"tmp38");
								HX_STACK_LINE(3584)
								if ((tmp38)){
									HX_STACK_LINE(3584)
									break;
								}
								HX_STACK_LINE(3584)
								bool tmp39 = (cur->ishape != null());		HX_STACK_VAR(tmp39,"tmp39");
								HX_STACK_LINE(3584)
								bool tmp40 = tmp39;		HX_STACK_VAR(tmp40,"tmp40");
								HX_STACK_LINE(3584)
								bool tmp41 = tmp40;		HX_STACK_VAR(tmp41,"tmp41");
								HX_STACK_LINE(3584)
								bool tmp42 = tmp41;		HX_STACK_VAR(tmp42,"tmp42");
								HX_STACK_LINE(3584)
								bool tmp43 = tmp42;		HX_STACK_VAR(tmp43,"tmp43");
								HX_STACK_LINE(3584)
								if ((tmp43)){
									HX_STACK_LINE(3584)
									::zpp_nape::phys::ZPP_Body tmp44 = cur->ishape->body;		HX_STACK_VAR(tmp44,"tmp44");
									HX_STACK_LINE(3584)
									::zpp_nape::phys::ZPP_Body tmp45 = tmp44;		HX_STACK_VAR(tmp45,"tmp45");
									HX_STACK_LINE(3584)
									::zpp_nape::phys::ZPP_Body tmp46 = tmp45;		HX_STACK_VAR(tmp46,"tmp46");
									HX_STACK_LINE(3584)
									cur = tmp46;
								}
								else{
									HX_STACK_LINE(3584)
									bool tmp44 = (cur->icompound != null());		HX_STACK_VAR(tmp44,"tmp44");
									HX_STACK_LINE(3584)
									bool tmp45 = tmp44;		HX_STACK_VAR(tmp45,"tmp45");
									HX_STACK_LINE(3584)
									bool tmp46 = tmp45;		HX_STACK_VAR(tmp46,"tmp46");
									HX_STACK_LINE(3584)
									bool tmp47 = tmp46;		HX_STACK_VAR(tmp47,"tmp47");
									HX_STACK_LINE(3584)
									bool tmp48 = tmp47;		HX_STACK_VAR(tmp48,"tmp48");
									HX_STACK_LINE(3584)
									if ((tmp48)){
										HX_STACK_LINE(3584)
										::zpp_nape::phys::ZPP_Compound tmp49 = cur->icompound->compound;		HX_STACK_VAR(tmp49,"tmp49");
										HX_STACK_LINE(3584)
										::zpp_nape::phys::ZPP_Compound tmp50 = tmp49;		HX_STACK_VAR(tmp50,"tmp50");
										HX_STACK_LINE(3584)
										::zpp_nape::phys::ZPP_Compound tmp51 = tmp50;		HX_STACK_VAR(tmp51,"tmp51");
										HX_STACK_LINE(3584)
										cur = tmp51;
									}
									else{
										HX_STACK_LINE(3584)
										::zpp_nape::phys::ZPP_Compound tmp49 = cur->ibody->compound;		HX_STACK_VAR(tmp49,"tmp49");
										HX_STACK_LINE(3584)
										::zpp_nape::phys::ZPP_Compound tmp50 = tmp49;		HX_STACK_VAR(tmp50,"tmp50");
										HX_STACK_LINE(3584)
										::zpp_nape::phys::ZPP_Compound tmp51 = tmp50;		HX_STACK_VAR(tmp51,"tmp51");
										HX_STACK_LINE(3584)
										cur = tmp51;
									}
								}
							}
							HX_STACK_LINE(3584)
							bool tmp26 = (cur == null());		HX_STACK_VAR(tmp26,"tmp26");
							HX_STACK_LINE(3584)
							bool tmp27 = tmp26;		HX_STACK_VAR(tmp27,"tmp27");
							HX_STACK_LINE(3584)
							bool tmp28 = tmp27;		HX_STACK_VAR(tmp28,"tmp28");
							HX_STACK_LINE(3584)
							bool tmp29 = tmp28;		HX_STACK_VAR(tmp29,"tmp29");
							HX_STACK_LINE(3584)
							bool tmp30 = tmp29;		HX_STACK_VAR(tmp30,"tmp30");
							HX_STACK_LINE(3584)
							if ((tmp30)){
								HX_STACK_LINE(3584)
								tmp25 = null();
							}
							else{
								HX_STACK_LINE(3584)
								tmp25 = cur->group;
							}
						}
						HX_STACK_LINE(3584)
						::zpp_nape::dynamics::ZPP_InteractionGroup g2 = tmp25;		HX_STACK_VAR(g2,"g2");
						HX_STACK_LINE(3584)
						bool tmp26 = (g2 == null());		HX_STACK_VAR(tmp26,"tmp26");
						HX_STACK_LINE(3584)
						bool tmp27 = tmp26;		HX_STACK_VAR(tmp27,"tmp27");
						HX_STACK_LINE(3584)
						bool tmp28 = tmp27;		HX_STACK_VAR(tmp28,"tmp28");
						HX_STACK_LINE(3584)
						bool tmp29 = tmp28;		HX_STACK_VAR(tmp29,"tmp29");
						HX_STACK_LINE(3584)
						bool tmp30 = tmp29;		HX_STACK_VAR(tmp30,"tmp30");
						HX_STACK_LINE(3584)
						if ((tmp30)){
							HX_STACK_LINE(3584)
							tmp18 = false;
						}
						else{
							HX_STACK_LINE(3584)
							bool ret = false;		HX_STACK_VAR(ret,"ret");
							HX_STACK_LINE(3584)
							while((true)){
								HX_STACK_LINE(3584)
								bool tmp31 = (g1 != null());		HX_STACK_VAR(tmp31,"tmp31");
								HX_STACK_LINE(3584)
								bool tmp32 = tmp31;		HX_STACK_VAR(tmp32,"tmp32");
								HX_STACK_LINE(3584)
								bool tmp33 = tmp32;		HX_STACK_VAR(tmp33,"tmp33");
								HX_STACK_LINE(3584)
								bool tmp34;		HX_STACK_VAR(tmp34,"tmp34");
								HX_STACK_LINE(3584)
								bool tmp35 = tmp33;		HX_STACK_VAR(tmp35,"tmp35");
								HX_STACK_LINE(3584)
								bool tmp36 = tmp35;		HX_STACK_VAR(tmp36,"tmp36");
								HX_STACK_LINE(3584)
								if ((tmp36)){
									HX_STACK_LINE(3584)
									bool tmp37 = (g2 != null());		HX_STACK_VAR(tmp37,"tmp37");
									HX_STACK_LINE(3584)
									bool tmp38 = tmp37;		HX_STACK_VAR(tmp38,"tmp38");
									HX_STACK_LINE(3584)
									tmp34 = tmp38;
								}
								else{
									HX_STACK_LINE(3584)
									tmp34 = false;
								}
								HX_STACK_LINE(3584)
								bool tmp37 = tmp34;		HX_STACK_VAR(tmp37,"tmp37");
								HX_STACK_LINE(3584)
								bool tmp38 = tmp37;		HX_STACK_VAR(tmp38,"tmp38");
								HX_STACK_LINE(3584)
								bool tmp39 = !(tmp38);		HX_STACK_VAR(tmp39,"tmp39");
								HX_STACK_LINE(3584)
								bool tmp40 = tmp39;		HX_STACK_VAR(tmp40,"tmp40");
								HX_STACK_LINE(3584)
								bool tmp41 = tmp40;		HX_STACK_VAR(tmp41,"tmp41");
								HX_STACK_LINE(3584)
								bool tmp42 = tmp41;		HX_STACK_VAR(tmp42,"tmp42");
								HX_STACK_LINE(3584)
								bool tmp43 = tmp42;		HX_STACK_VAR(tmp43,"tmp43");
								HX_STACK_LINE(3584)
								if ((tmp43)){
									HX_STACK_LINE(3584)
									break;
								}
								HX_STACK_LINE(3584)
								bool tmp44 = (g1 == g2);		HX_STACK_VAR(tmp44,"tmp44");
								HX_STACK_LINE(3584)
								bool tmp45 = tmp44;		HX_STACK_VAR(tmp45,"tmp45");
								HX_STACK_LINE(3584)
								bool tmp46 = tmp45;		HX_STACK_VAR(tmp46,"tmp46");
								HX_STACK_LINE(3584)
								bool tmp47 = tmp46;		HX_STACK_VAR(tmp47,"tmp47");
								HX_STACK_LINE(3584)
								bool tmp48 = tmp47;		HX_STACK_VAR(tmp48,"tmp48");
								HX_STACK_LINE(3584)
								if ((tmp48)){
									HX_STACK_LINE(3584)
									ret = g1->ignore;
									HX_STACK_LINE(3584)
									break;
								}
								HX_STACK_LINE(3584)
								bool tmp49 = (g1->depth < g2->depth);		HX_STACK_VAR(tmp49,"tmp49");
								HX_STACK_LINE(3584)
								bool tmp50 = tmp49;		HX_STACK_VAR(tmp50,"tmp50");
								HX_STACK_LINE(3584)
								bool tmp51 = tmp50;		HX_STACK_VAR(tmp51,"tmp51");
								HX_STACK_LINE(3584)
								bool tmp52 = tmp51;		HX_STACK_VAR(tmp52,"tmp52");
								HX_STACK_LINE(3584)
								bool tmp53 = tmp52;		HX_STACK_VAR(tmp53,"tmp53");
								HX_STACK_LINE(3584)
								if ((tmp53)){
									HX_STACK_LINE(3584)
									g2 = g2->group;
								}
								else{
									HX_STACK_LINE(3584)
									g1 = g1->group;
								}
							}
							HX_STACK_LINE(3584)
							tmp18 = ret;
						}
					}
				}
				HX_STACK_LINE(3584)
				bool tmp19 = tmp18;		HX_STACK_VAR(tmp19,"tmp19");
				HX_STACK_LINE(3584)
				bool tmp20 = tmp19;		HX_STACK_VAR(tmp20,"tmp20");
				HX_STACK_LINE(3584)
				bool tmp21 = !(tmp20);		HX_STACK_VAR(tmp21,"tmp21");
				HX_STACK_LINE(3584)
				tmp16 = tmp21;
			}
			else{
				HX_STACK_LINE(3584)
				tmp16 = false;
			}
			HX_STACK_LINE(3584)
			bool tmp18 = tmp16;		HX_STACK_VAR(tmp18,"tmp18");
			HX_STACK_LINE(3584)
			if ((tmp18)){
				HX_STACK_LINE(3584)
				bool tmp19 = s1->sensorEnabled;		HX_STACK_VAR(tmp19,"tmp19");
				HX_STACK_LINE(3584)
				bool tmp20 = tmp19;		HX_STACK_VAR(tmp20,"tmp20");
				HX_STACK_LINE(3584)
				bool tmp21 = !(tmp20);		HX_STACK_VAR(tmp21,"tmp21");
				HX_STACK_LINE(3584)
				bool tmp22 = tmp21;		HX_STACK_VAR(tmp22,"tmp22");
				HX_STACK_LINE(3584)
				bool tmp23 = tmp22;		HX_STACK_VAR(tmp23,"tmp23");
				HX_STACK_LINE(3584)
				bool tmp24;		HX_STACK_VAR(tmp24,"tmp24");
				HX_STACK_LINE(3584)
				bool tmp25 = tmp23;		HX_STACK_VAR(tmp25,"tmp25");
				HX_STACK_LINE(3584)
				if ((tmp25)){
					HX_STACK_LINE(3584)
					tmp24 = s2->sensorEnabled;
				}
				else{
					HX_STACK_LINE(3584)
					tmp24 = true;
				}
				HX_STACK_LINE(3584)
				bool tmp26;		HX_STACK_VAR(tmp26,"tmp26");
				HX_STACK_LINE(3584)
				bool tmp27 = tmp24;		HX_STACK_VAR(tmp27,"tmp27");
				HX_STACK_LINE(3584)
				if ((tmp27)){
					HX_STACK_LINE(3584)
					::zpp_nape::dynamics::ZPP_InteractionFilter _this = s1->filter;		HX_STACK_VAR(_this,"_this");
					HX_STACK_LINE(3584)
					::zpp_nape::dynamics::ZPP_InteractionFilter x = s2->filter;		HX_STACK_VAR(x,"x");
					HX_STACK_LINE(3584)
					int tmp28 = (int(_this->sensorMask) & int(x->sensorGroup));		HX_STACK_VAR(tmp28,"tmp28");
					HX_STACK_LINE(3584)
					int tmp29 = tmp28;		HX_STACK_VAR(tmp29,"tmp29");
					HX_STACK_LINE(3584)
					int tmp30 = tmp29;		HX_STACK_VAR(tmp30,"tmp30");
					HX_STACK_LINE(3584)
					bool tmp31 = (tmp30 != (int)0);		HX_STACK_VAR(tmp31,"tmp31");
					HX_STACK_LINE(3584)
					bool tmp32 = tmp31;		HX_STACK_VAR(tmp32,"tmp32");
					HX_STACK_LINE(3584)
					bool tmp33 = tmp32;		HX_STACK_VAR(tmp33,"tmp33");
					HX_STACK_LINE(3584)
					bool tmp34 = tmp33;		HX_STACK_VAR(tmp34,"tmp34");
					HX_STACK_LINE(3584)
					bool tmp35 = tmp34;		HX_STACK_VAR(tmp35,"tmp35");
					HX_STACK_LINE(3584)
					if ((tmp35)){
						HX_STACK_LINE(3584)
						int tmp36 = (int(x->sensorMask) & int(_this->sensorGroup));		HX_STACK_VAR(tmp36,"tmp36");
						HX_STACK_LINE(3584)
						int tmp37 = tmp36;		HX_STACK_VAR(tmp37,"tmp37");
						HX_STACK_LINE(3584)
						int tmp38 = tmp37;		HX_STACK_VAR(tmp38,"tmp38");
						HX_STACK_LINE(3584)
						int tmp39 = tmp38;		HX_STACK_VAR(tmp39,"tmp39");
						HX_STACK_LINE(3584)
						bool tmp40 = (tmp39 != (int)0);		HX_STACK_VAR(tmp40,"tmp40");
						HX_STACK_LINE(3584)
						tmp26 = tmp40;
					}
					else{
						HX_STACK_LINE(3584)
						tmp26 = false;
					}
				}
				else{
					HX_STACK_LINE(3584)
					tmp26 = false;
				}
				HX_STACK_LINE(3584)
				bool tmp28 = tmp26;		HX_STACK_VAR(tmp28,"tmp28");
				HX_STACK_LINE(3584)
				if ((tmp28)){
					HX_STACK_LINE(3584)
					tmp10 = (int)2;
				}
				else{
					HX_STACK_LINE(3584)
					bool tmp29 = s1->fluidEnabled;		HX_STACK_VAR(tmp29,"tmp29");
					HX_STACK_LINE(3584)
					bool tmp30 = tmp29;		HX_STACK_VAR(tmp30,"tmp30");
					HX_STACK_LINE(3584)
					bool tmp31 = !(tmp30);		HX_STACK_VAR(tmp31,"tmp31");
					HX_STACK_LINE(3584)
					bool tmp32 = tmp31;		HX_STACK_VAR(tmp32,"tmp32");
					HX_STACK_LINE(3584)
					bool tmp33 = tmp32;		HX_STACK_VAR(tmp33,"tmp33");
					HX_STACK_LINE(3584)
					bool tmp34;		HX_STACK_VAR(tmp34,"tmp34");
					HX_STACK_LINE(3584)
					bool tmp35 = tmp33;		HX_STACK_VAR(tmp35,"tmp35");
					HX_STACK_LINE(3584)
					if ((tmp35)){
						HX_STACK_LINE(3584)
						tmp34 = s2->fluidEnabled;
					}
					else{
						HX_STACK_LINE(3584)
						tmp34 = true;
					}
					HX_STACK_LINE(3584)
					bool tmp36 = tmp34;		HX_STACK_VAR(tmp36,"tmp36");
					HX_STACK_LINE(3584)
					bool tmp37;		HX_STACK_VAR(tmp37,"tmp37");
					HX_STACK_LINE(3584)
					bool tmp38 = tmp36;		HX_STACK_VAR(tmp38,"tmp38");
					HX_STACK_LINE(3584)
					if ((tmp38)){
						HX_STACK_LINE(3584)
						::zpp_nape::dynamics::ZPP_InteractionFilter _this = s1->filter;		HX_STACK_VAR(_this,"_this");
						HX_STACK_LINE(3584)
						::zpp_nape::dynamics::ZPP_InteractionFilter x = s2->filter;		HX_STACK_VAR(x,"x");
						HX_STACK_LINE(3584)
						int tmp39 = (int(_this->fluidMask) & int(x->fluidGroup));		HX_STACK_VAR(tmp39,"tmp39");
						HX_STACK_LINE(3584)
						int tmp40 = tmp39;		HX_STACK_VAR(tmp40,"tmp40");
						HX_STACK_LINE(3584)
						int tmp41 = tmp40;		HX_STACK_VAR(tmp41,"tmp41");
						HX_STACK_LINE(3584)
						int tmp42 = tmp41;		HX_STACK_VAR(tmp42,"tmp42");
						HX_STACK_LINE(3584)
						bool tmp43 = (tmp42 != (int)0);		HX_STACK_VAR(tmp43,"tmp43");
						HX_STACK_LINE(3584)
						bool tmp44 = tmp43;		HX_STACK_VAR(tmp44,"tmp44");
						HX_STACK_LINE(3584)
						bool tmp45 = tmp44;		HX_STACK_VAR(tmp45,"tmp45");
						HX_STACK_LINE(3584)
						bool tmp46 = tmp45;		HX_STACK_VAR(tmp46,"tmp46");
						HX_STACK_LINE(3584)
						bool tmp47 = tmp46;		HX_STACK_VAR(tmp47,"tmp47");
						HX_STACK_LINE(3584)
						bool tmp48 = tmp47;		HX_STACK_VAR(tmp48,"tmp48");
						HX_STACK_LINE(3584)
						bool tmp49 = tmp48;		HX_STACK_VAR(tmp49,"tmp49");
						HX_STACK_LINE(3584)
						if ((tmp49)){
							HX_STACK_LINE(3584)
							int tmp50 = (int(x->fluidMask) & int(_this->fluidGroup));		HX_STACK_VAR(tmp50,"tmp50");
							HX_STACK_LINE(3584)
							int tmp51 = tmp50;		HX_STACK_VAR(tmp51,"tmp51");
							HX_STACK_LINE(3584)
							int tmp52 = tmp51;		HX_STACK_VAR(tmp52,"tmp52");
							HX_STACK_LINE(3584)
							int tmp53 = tmp52;		HX_STACK_VAR(tmp53,"tmp53");
							HX_STACK_LINE(3584)
							int tmp54 = tmp53;		HX_STACK_VAR(tmp54,"tmp54");
							HX_STACK_LINE(3584)
							bool tmp55 = (tmp54 != (int)0);		HX_STACK_VAR(tmp55,"tmp55");
							HX_STACK_LINE(3584)
							tmp37 = tmp55;
						}
						else{
							HX_STACK_LINE(3584)
							tmp37 = false;
						}
					}
					else{
						HX_STACK_LINE(3584)
						tmp37 = false;
					}
					HX_STACK_LINE(3584)
					bool tmp39;		HX_STACK_VAR(tmp39,"tmp39");
					HX_STACK_LINE(3584)
					bool tmp40 = tmp37;		HX_STACK_VAR(tmp40,"tmp40");
					HX_STACK_LINE(3584)
					if ((tmp40)){
						HX_STACK_LINE(3584)
						bool tmp41 = (b1->imass == (int)0);		HX_STACK_VAR(tmp41,"tmp41");
						HX_STACK_LINE(3584)
						bool tmp42 = tmp41;		HX_STACK_VAR(tmp42,"tmp42");
						HX_STACK_LINE(3584)
						bool tmp43 = tmp42;		HX_STACK_VAR(tmp43,"tmp43");
						HX_STACK_LINE(3584)
						bool tmp44 = tmp43;		HX_STACK_VAR(tmp44,"tmp44");
						HX_STACK_LINE(3584)
						bool tmp45;		HX_STACK_VAR(tmp45,"tmp45");
						HX_STACK_LINE(3584)
						bool tmp46 = tmp44;		HX_STACK_VAR(tmp46,"tmp46");
						HX_STACK_LINE(3584)
						bool tmp47 = tmp46;		HX_STACK_VAR(tmp47,"tmp47");
						HX_STACK_LINE(3584)
						if ((tmp47)){
							HX_STACK_LINE(3584)
							bool tmp48 = (b2->imass == (int)0);		HX_STACK_VAR(tmp48,"tmp48");
							HX_STACK_LINE(3584)
							bool tmp49 = tmp48;		HX_STACK_VAR(tmp49,"tmp49");
							HX_STACK_LINE(3584)
							tmp45 = tmp49;
						}
						else{
							HX_STACK_LINE(3584)
							tmp45 = false;
						}
						HX_STACK_LINE(3584)
						bool tmp48 = tmp45;		HX_STACK_VAR(tmp48,"tmp48");
						HX_STACK_LINE(3584)
						bool tmp49;		HX_STACK_VAR(tmp49,"tmp49");
						HX_STACK_LINE(3584)
						bool tmp50 = tmp48;		HX_STACK_VAR(tmp50,"tmp50");
						HX_STACK_LINE(3584)
						bool tmp51 = tmp50;		HX_STACK_VAR(tmp51,"tmp51");
						HX_STACK_LINE(3584)
						if ((tmp51)){
							HX_STACK_LINE(3584)
							bool tmp52 = (b1->iinertia == (int)0);		HX_STACK_VAR(tmp52,"tmp52");
							HX_STACK_LINE(3584)
							bool tmp53 = tmp52;		HX_STACK_VAR(tmp53,"tmp53");
							HX_STACK_LINE(3584)
							tmp49 = tmp53;
						}
						else{
							HX_STACK_LINE(3584)
							tmp49 = false;
						}
						HX_STACK_LINE(3584)
						bool tmp52;		HX_STACK_VAR(tmp52,"tmp52");
						HX_STACK_LINE(3584)
						bool tmp53 = tmp49;		HX_STACK_VAR(tmp53,"tmp53");
						HX_STACK_LINE(3584)
						bool tmp54 = tmp53;		HX_STACK_VAR(tmp54,"tmp54");
						HX_STACK_LINE(3584)
						if ((tmp54)){
							HX_STACK_LINE(3584)
							bool tmp55 = (b2->iinertia == (int)0);		HX_STACK_VAR(tmp55,"tmp55");
							HX_STACK_LINE(3584)
							bool tmp56 = tmp55;		HX_STACK_VAR(tmp56,"tmp56");
							HX_STACK_LINE(3584)
							tmp52 = tmp56;
						}
						else{
							HX_STACK_LINE(3584)
							tmp52 = false;
						}
						HX_STACK_LINE(3584)
						bool tmp55 = tmp52;		HX_STACK_VAR(tmp55,"tmp55");
						HX_STACK_LINE(3584)
						bool tmp56 = tmp55;		HX_STACK_VAR(tmp56,"tmp56");
						HX_STACK_LINE(3584)
						bool tmp57 = !(tmp56);		HX_STACK_VAR(tmp57,"tmp57");
						HX_STACK_LINE(3584)
						tmp39 = tmp57;
					}
					else{
						HX_STACK_LINE(3584)
						tmp39 = false;
					}
					HX_STACK_LINE(3584)
					bool tmp41 = tmp39;		HX_STACK_VAR(tmp41,"tmp41");
					HX_STACK_LINE(3584)
					if ((tmp41)){
						HX_STACK_LINE(3584)
						tmp10 = (int)0;
					}
					else{
						HX_STACK_LINE(3584)
						bool tmp42;		HX_STACK_VAR(tmp42,"tmp42");
						HX_STACK_LINE(3584)
						{
							HX_STACK_LINE(3584)
							::zpp_nape::dynamics::ZPP_InteractionFilter _this = s1->filter;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(3584)
							::zpp_nape::dynamics::ZPP_InteractionFilter x = s2->filter;		HX_STACK_VAR(x,"x");
							HX_STACK_LINE(3584)
							int tmp43 = (int(_this->collisionMask) & int(x->collisionGroup));		HX_STACK_VAR(tmp43,"tmp43");
							HX_STACK_LINE(3584)
							int tmp44 = tmp43;		HX_STACK_VAR(tmp44,"tmp44");
							HX_STACK_LINE(3584)
							int tmp45 = tmp44;		HX_STACK_VAR(tmp45,"tmp45");
							HX_STACK_LINE(3584)
							bool tmp46 = (tmp45 != (int)0);		HX_STACK_VAR(tmp46,"tmp46");
							HX_STACK_LINE(3584)
							bool tmp47 = tmp46;		HX_STACK_VAR(tmp47,"tmp47");
							HX_STACK_LINE(3584)
							bool tmp48 = tmp47;		HX_STACK_VAR(tmp48,"tmp48");
							HX_STACK_LINE(3584)
							bool tmp49 = tmp48;		HX_STACK_VAR(tmp49,"tmp49");
							HX_STACK_LINE(3584)
							bool tmp50 = tmp49;		HX_STACK_VAR(tmp50,"tmp50");
							HX_STACK_LINE(3584)
							if ((tmp50)){
								HX_STACK_LINE(3584)
								int tmp51 = (int(x->collisionMask) & int(_this->collisionGroup));		HX_STACK_VAR(tmp51,"tmp51");
								HX_STACK_LINE(3584)
								int tmp52 = tmp51;		HX_STACK_VAR(tmp52,"tmp52");
								HX_STACK_LINE(3584)
								int tmp53 = tmp52;		HX_STACK_VAR(tmp53,"tmp53");
								HX_STACK_LINE(3584)
								int tmp54 = tmp53;		HX_STACK_VAR(tmp54,"tmp54");
								HX_STACK_LINE(3584)
								bool tmp55 = (tmp54 != (int)0);		HX_STACK_VAR(tmp55,"tmp55");
								HX_STACK_LINE(3584)
								tmp42 = tmp55;
							}
							else{
								HX_STACK_LINE(3584)
								tmp42 = false;
							}
						}
						HX_STACK_LINE(3584)
						bool tmp43;		HX_STACK_VAR(tmp43,"tmp43");
						HX_STACK_LINE(3584)
						bool tmp44 = tmp42;		HX_STACK_VAR(tmp44,"tmp44");
						HX_STACK_LINE(3584)
						if ((tmp44)){
							HX_STACK_LINE(3584)
							bool tmp45 = (b1->imass == (int)0);		HX_STACK_VAR(tmp45,"tmp45");
							HX_STACK_LINE(3584)
							bool tmp46 = tmp45;		HX_STACK_VAR(tmp46,"tmp46");
							HX_STACK_LINE(3584)
							bool tmp47 = tmp46;		HX_STACK_VAR(tmp47,"tmp47");
							HX_STACK_LINE(3584)
							bool tmp48 = tmp47;		HX_STACK_VAR(tmp48,"tmp48");
							HX_STACK_LINE(3584)
							bool tmp49;		HX_STACK_VAR(tmp49,"tmp49");
							HX_STACK_LINE(3584)
							bool tmp50 = tmp48;		HX_STACK_VAR(tmp50,"tmp50");
							HX_STACK_LINE(3584)
							bool tmp51 = tmp50;		HX_STACK_VAR(tmp51,"tmp51");
							HX_STACK_LINE(3584)
							if ((tmp51)){
								HX_STACK_LINE(3584)
								bool tmp52 = (b2->imass == (int)0);		HX_STACK_VAR(tmp52,"tmp52");
								HX_STACK_LINE(3584)
								bool tmp53 = tmp52;		HX_STACK_VAR(tmp53,"tmp53");
								HX_STACK_LINE(3584)
								tmp49 = tmp53;
							}
							else{
								HX_STACK_LINE(3584)
								tmp49 = false;
							}
							HX_STACK_LINE(3584)
							bool tmp52 = tmp49;		HX_STACK_VAR(tmp52,"tmp52");
							HX_STACK_LINE(3584)
							bool tmp53;		HX_STACK_VAR(tmp53,"tmp53");
							HX_STACK_LINE(3584)
							bool tmp54 = tmp52;		HX_STACK_VAR(tmp54,"tmp54");
							HX_STACK_LINE(3584)
							bool tmp55 = tmp54;		HX_STACK_VAR(tmp55,"tmp55");
							HX_STACK_LINE(3584)
							if ((tmp55)){
								HX_STACK_LINE(3584)
								bool tmp56 = (b1->iinertia == (int)0);		HX_STACK_VAR(tmp56,"tmp56");
								HX_STACK_LINE(3584)
								bool tmp57 = tmp56;		HX_STACK_VAR(tmp57,"tmp57");
								HX_STACK_LINE(3584)
								tmp53 = tmp57;
							}
							else{
								HX_STACK_LINE(3584)
								tmp53 = false;
							}
							HX_STACK_LINE(3584)
							bool tmp56;		HX_STACK_VAR(tmp56,"tmp56");
							HX_STACK_LINE(3584)
							bool tmp57 = tmp53;		HX_STACK_VAR(tmp57,"tmp57");
							HX_STACK_LINE(3584)
							bool tmp58 = tmp57;		HX_STACK_VAR(tmp58,"tmp58");
							HX_STACK_LINE(3584)
							if ((tmp58)){
								HX_STACK_LINE(3584)
								bool tmp59 = (b2->iinertia == (int)0);		HX_STACK_VAR(tmp59,"tmp59");
								HX_STACK_LINE(3584)
								bool tmp60 = tmp59;		HX_STACK_VAR(tmp60,"tmp60");
								HX_STACK_LINE(3584)
								tmp56 = tmp60;
							}
							else{
								HX_STACK_LINE(3584)
								tmp56 = false;
							}
							HX_STACK_LINE(3584)
							bool tmp59 = tmp56;		HX_STACK_VAR(tmp59,"tmp59");
							HX_STACK_LINE(3584)
							bool tmp60 = tmp59;		HX_STACK_VAR(tmp60,"tmp60");
							HX_STACK_LINE(3584)
							bool tmp61 = !(tmp60);		HX_STACK_VAR(tmp61,"tmp61");
							HX_STACK_LINE(3584)
							tmp43 = tmp61;
						}
						else{
							HX_STACK_LINE(3584)
							tmp43 = false;
						}
						HX_STACK_LINE(3584)
						bool tmp45 = tmp43;		HX_STACK_VAR(tmp45,"tmp45");
						HX_STACK_LINE(3584)
						if ((tmp45)){
							HX_STACK_LINE(3584)
							tmp10 = (int)1;
						}
						else{
							HX_STACK_LINE(3584)
							tmp10 = (int)-1;
						}
					}
				}
			}
			else{
				HX_STACK_LINE(3584)
				tmp10 = (int)-1;
			}
		}
		HX_STACK_LINE(3584)
		tmp9 = (tmp10 <= (int)0);
	}
	else{
		HX_STACK_LINE(3584)
		tmp9 = true;
	}
	HX_STACK_LINE(3584)
	if ((tmp9)){
		HX_STACK_LINE(3585)
		::zpp_nape::dynamics::ZPP_Arbiter tmp10 = in_arb;		HX_STACK_VAR(tmp10,"tmp10");
		HX_STACK_LINE(3585)
		return tmp10;
	}
	HX_STACK_LINE(3587)
	::zpp_nape::phys::ZPP_Body b1 = s1->body;		HX_STACK_VAR(b1,"b1");
	HX_STACK_LINE(3588)
	::zpp_nape::phys::ZPP_Body b2 = s2->body;		HX_STACK_VAR(b2,"b2");
	HX_STACK_LINE(3589)
	bool tmp10 = stat;		HX_STACK_VAR(tmp10,"tmp10");
	HX_STACK_LINE(3589)
	bool tmp11 = !(tmp10);		HX_STACK_VAR(tmp11,"tmp11");
	HX_STACK_LINE(3589)
	bool tmp12 = tmp11;		HX_STACK_VAR(tmp12,"tmp12");
	HX_STACK_LINE(3589)
	bool tmp13;		HX_STACK_VAR(tmp13,"tmp13");
	HX_STACK_LINE(3589)
	if ((tmp12)){
		HX_STACK_LINE(3589)
		tmp13 = b1->bullet;
	}
	else{
		HX_STACK_LINE(3589)
		tmp13 = true;
	}
	HX_STACK_LINE(3589)
	bool tmp14 = !(tmp13);		HX_STACK_VAR(tmp14,"tmp14");
	HX_STACK_LINE(3589)
	bool tmp15;		HX_STACK_VAR(tmp15,"tmp15");
	HX_STACK_LINE(3589)
	if ((tmp14)){
		HX_STACK_LINE(3589)
		tmp15 = b2->bullet;
	}
	else{
		HX_STACK_LINE(3589)
		tmp15 = true;
	}
	HX_STACK_LINE(3589)
	if ((tmp15)){
		HX_STACK_LINE(3590)
		::zpp_nape::geom::ZPP_ToiEvent toi;		HX_STACK_VAR(toi,"toi");
		HX_STACK_LINE(3591)
		{
			HX_STACK_LINE(3592)
			::zpp_nape::geom::ZPP_ToiEvent tmp16 = ::zpp_nape::geom::ZPP_ToiEvent_obj::zpp_pool;		HX_STACK_VAR(tmp16,"tmp16");
			HX_STACK_LINE(3592)
			bool tmp17 = (tmp16 == null());		HX_STACK_VAR(tmp17,"tmp17");
			HX_STACK_LINE(3592)
			if ((tmp17)){
				HX_STACK_LINE(3593)
				::zpp_nape::geom::ZPP_ToiEvent tmp18 = ::zpp_nape::geom::ZPP_ToiEvent_obj::__new();		HX_STACK_VAR(tmp18,"tmp18");
				HX_STACK_LINE(3593)
				toi = tmp18;
			}
			else{
				HX_STACK_LINE(3599)
				::zpp_nape::geom::ZPP_ToiEvent tmp18 = ::zpp_nape::geom::ZPP_ToiEvent_obj::zpp_pool;		HX_STACK_VAR(tmp18,"tmp18");
				HX_STACK_LINE(3599)
				toi = tmp18;
				HX_STACK_LINE(3600)
				::zpp_nape::geom::ZPP_ToiEvent_obj::zpp_pool = toi->next;
				HX_STACK_LINE(3601)
				toi->next = null();
			}
			HX_STACK_LINE(3606)
			{
				HX_STACK_LINE(3606)
				toi->failed = false;
				HX_STACK_LINE(3606)
				::zpp_nape::shape::ZPP_Shape tmp18 = toi->s2 = null();		HX_STACK_VAR(tmp18,"tmp18");
				HX_STACK_LINE(3606)
				toi->s1 = tmp18;
				HX_STACK_LINE(3606)
				toi->arbiter = null();
			}
		}
		HX_STACK_LINE(3608)
		int tmp16 = b1->type;		HX_STACK_VAR(tmp16,"tmp16");
		HX_STACK_LINE(3608)
		int tmp17 = ::zpp_nape::util::ZPP_Flags_obj::id_BodyType_KINEMATIC;		HX_STACK_VAR(tmp17,"tmp17");
		HX_STACK_LINE(3608)
		bool tmp18 = (tmp16 == tmp17);		HX_STACK_VAR(tmp18,"tmp18");
		HX_STACK_LINE(3608)
		bool tmp19 = !(tmp18);		HX_STACK_VAR(tmp19,"tmp19");
		HX_STACK_LINE(3608)
		bool tmp20;		HX_STACK_VAR(tmp20,"tmp20");
		HX_STACK_LINE(3608)
		if ((tmp19)){
			HX_STACK_LINE(3608)
			int tmp21 = b2->type;		HX_STACK_VAR(tmp21,"tmp21");
			HX_STACK_LINE(3608)
			int tmp22 = ::zpp_nape::util::ZPP_Flags_obj::id_BodyType_KINEMATIC;		HX_STACK_VAR(tmp22,"tmp22");
			HX_STACK_LINE(3608)
			int tmp23 = tmp22;		HX_STACK_VAR(tmp23,"tmp23");
			HX_STACK_LINE(3608)
			tmp20 = (tmp21 == tmp23);
		}
		else{
			HX_STACK_LINE(3608)
			tmp20 = true;
		}
		HX_STACK_LINE(3608)
		bool kin = tmp20;		HX_STACK_VAR(kin,"kin");
		HX_STACK_LINE(3609)
		bool tmp21 = stat;		HX_STACK_VAR(tmp21,"tmp21");
		HX_STACK_LINE(3609)
		bool tmp22;		HX_STACK_VAR(tmp22,"tmp22");
		HX_STACK_LINE(3609)
		if ((tmp21)){
			HX_STACK_LINE(3609)
			bool tmp23 = kin;		HX_STACK_VAR(tmp23,"tmp23");
			HX_STACK_LINE(3609)
			bool tmp24 = tmp23;		HX_STACK_VAR(tmp24,"tmp24");
			HX_STACK_LINE(3609)
			tmp22 = !(tmp24);
		}
		else{
			HX_STACK_LINE(3609)
			tmp22 = false;
		}
		HX_STACK_LINE(3609)
		if ((tmp22)){
			HX_STACK_LINE(3610)
			int tmp23 = s1->body->type;		HX_STACK_VAR(tmp23,"tmp23");
			HX_STACK_LINE(3610)
			int tmp24 = ::zpp_nape::util::ZPP_Flags_obj::id_BodyType_DYNAMIC;		HX_STACK_VAR(tmp24,"tmp24");
			HX_STACK_LINE(3610)
			bool tmp25 = (tmp23 == tmp24);		HX_STACK_VAR(tmp25,"tmp25");
			HX_STACK_LINE(3610)
			bool tmp26 = !(tmp25);		HX_STACK_VAR(tmp26,"tmp26");
			HX_STACK_LINE(3610)
			if ((tmp26)){
				HX_STACK_LINE(3611)
				toi->s2 = s1;
				HX_STACK_LINE(3612)
				toi->s1 = s2;
			}
			else{
				HX_STACK_LINE(3615)
				toi->s1 = s1;
				HX_STACK_LINE(3616)
				toi->s2 = s2;
			}
			HX_STACK_LINE(3618)
			toi->kinematic = false;
			HX_STACK_LINE(3619)
			::zpp_nape::geom::ZPP_ToiEvent tmp27 = toi;		HX_STACK_VAR(tmp27,"tmp27");
			HX_STACK_LINE(3619)
			Float tmp28 = this->pre_dt;		HX_STACK_VAR(tmp28,"tmp28");
			HX_STACK_LINE(3619)
			Float tmp29 = ::nape::Config_obj::collisionSlopCCD;		HX_STACK_VAR(tmp29,"tmp29");
			HX_STACK_LINE(3619)
			::zpp_nape::geom::ZPP_SweepDistance_obj::staticSweep(tmp27,tmp28,(int)0,tmp29);
		}
		else{
			HX_STACK_LINE(3622)
			toi->s1 = s1;
			HX_STACK_LINE(3623)
			toi->s2 = s2;
			HX_STACK_LINE(3624)
			toi->kinematic = kin;
			HX_STACK_LINE(3625)
			::zpp_nape::phys::ZPP_Body tmp23 = toi->s1->body;		HX_STACK_VAR(tmp23,"tmp23");
			HX_STACK_LINE(3625)
			bool tmp24 = tmp23->sweepFrozen;		HX_STACK_VAR(tmp24,"tmp24");
			HX_STACK_LINE(3625)
			bool tmp25 = !(tmp24);		HX_STACK_VAR(tmp25,"tmp25");
			HX_STACK_LINE(3625)
			bool tmp26;		HX_STACK_VAR(tmp26,"tmp26");
			HX_STACK_LINE(3625)
			if ((tmp25)){
				HX_STACK_LINE(3625)
				::zpp_nape::phys::ZPP_Body tmp27 = toi->s2->body;		HX_STACK_VAR(tmp27,"tmp27");
				HX_STACK_LINE(3625)
				::zpp_nape::phys::ZPP_Body tmp28 = tmp27;		HX_STACK_VAR(tmp28,"tmp28");
				HX_STACK_LINE(3625)
				tmp26 = tmp28->sweepFrozen;
			}
			else{
				HX_STACK_LINE(3625)
				tmp26 = true;
			}
			HX_STACK_LINE(3625)
			if ((tmp26)){
				HX_STACK_LINE(3626)
				::zpp_nape::phys::ZPP_Body tmp27 = toi->s1->body;		HX_STACK_VAR(tmp27,"tmp27");
				HX_STACK_LINE(3626)
				bool tmp28 = tmp27->sweepFrozen;		HX_STACK_VAR(tmp28,"tmp28");
				HX_STACK_LINE(3626)
				if ((tmp28)){
					HX_STACK_LINE(3627)
					::zpp_nape::shape::ZPP_Shape tmp29 = toi->s1;		HX_STACK_VAR(tmp29,"tmp29");
					HX_STACK_LINE(3628)
					toi->s1 = toi->s2;
					HX_STACK_LINE(3629)
					toi->s2 = tmp29;
					HX_STACK_LINE(3630)
					toi->frozen1 = false;
					HX_STACK_LINE(3631)
					toi->frozen2 = true;
				}
				HX_STACK_LINE(3633)
				::zpp_nape::geom::ZPP_ToiEvent tmp29 = toi;		HX_STACK_VAR(tmp29,"tmp29");
				HX_STACK_LINE(3633)
				Float tmp30 = this->pre_dt;		HX_STACK_VAR(tmp30,"tmp30");
				HX_STACK_LINE(3633)
				Float tmp31 = ::nape::Config_obj::collisionSlopCCD;		HX_STACK_VAR(tmp31,"tmp31");
				HX_STACK_LINE(3633)
				::zpp_nape::geom::ZPP_SweepDistance_obj::staticSweep(tmp29,tmp30,(int)0,tmp31);
			}
			else{
				HX_STACK_LINE(3636)
				::zpp_nape::geom::ZPP_ToiEvent tmp27 = toi;		HX_STACK_VAR(tmp27,"tmp27");
				HX_STACK_LINE(3636)
				Float tmp28 = this->pre_dt;		HX_STACK_VAR(tmp28,"tmp28");
				HX_STACK_LINE(3636)
				Float tmp29 = ::nape::Config_obj::collisionSlopCCD;		HX_STACK_VAR(tmp29,"tmp29");
				HX_STACK_LINE(3636)
				::zpp_nape::geom::ZPP_SweepDistance_obj::dynamicSweep(tmp27,tmp28,(int)0,tmp29,null());
			}
		}
		HX_STACK_LINE(3639)
		bool tmp23 = stat;		HX_STACK_VAR(tmp23,"tmp23");
		HX_STACK_LINE(3639)
		bool tmp24 = tmp23;		HX_STACK_VAR(tmp24,"tmp24");
		HX_STACK_LINE(3639)
		bool tmp25;		HX_STACK_VAR(tmp25,"tmp25");
		HX_STACK_LINE(3639)
		if ((tmp24)){
			HX_STACK_LINE(3639)
			tmp25 = (toi->toi < (int)0);
		}
		else{
			HX_STACK_LINE(3639)
			tmp25 = false;
		}
		HX_STACK_LINE(3639)
		bool tmp26 = !(tmp25);		HX_STACK_VAR(tmp26,"tmp26");
		HX_STACK_LINE(3639)
		bool tmp27;		HX_STACK_VAR(tmp27,"tmp27");
		HX_STACK_LINE(3639)
		if ((tmp26)){
			HX_STACK_LINE(3639)
			tmp27 = toi->failed;
		}
		else{
			HX_STACK_LINE(3639)
			tmp27 = true;
		}
		HX_STACK_LINE(3639)
		if ((tmp27)){
			HX_STACK_LINE(3641)
			::zpp_nape::geom::ZPP_ToiEvent o = toi;		HX_STACK_VAR(o,"o");
			HX_STACK_LINE(3651)
			::zpp_nape::geom::ZPP_ToiEvent tmp28 = ::zpp_nape::geom::ZPP_ToiEvent_obj::zpp_pool;		HX_STACK_VAR(tmp28,"tmp28");
			HX_STACK_LINE(3651)
			o->next = tmp28;
			HX_STACK_LINE(3652)
			::zpp_nape::geom::ZPP_ToiEvent_obj::zpp_pool = o;
		}
		else{
			HX_STACK_LINE(3659)
			::zpp_nape::util::ZNPList_ZPP_ToiEvent tmp28 = this->toiEvents;		HX_STACK_VAR(tmp28,"tmp28");
			HX_STACK_LINE(3659)
			::zpp_nape::geom::ZPP_ToiEvent tmp29 = toi;		HX_STACK_VAR(tmp29,"tmp29");
			HX_STACK_LINE(3659)
			tmp28->add(tmp29);
			HX_STACK_LINE(3660)
			::zpp_nape::phys::ZPP_Body tmp30 = toi->s1->body;		HX_STACK_VAR(tmp30,"tmp30");
			HX_STACK_LINE(3660)
			toi->frozen1 = tmp30->sweepFrozen;
			HX_STACK_LINE(3661)
			::zpp_nape::phys::ZPP_Body tmp31 = toi->s2->body;		HX_STACK_VAR(tmp31,"tmp31");
			HX_STACK_LINE(3661)
			toi->frozen2 = tmp31->sweepFrozen;
			HX_STACK_LINE(3662)
			bool tmp32 = (in_arb != null());		HX_STACK_VAR(tmp32,"tmp32");
			HX_STACK_LINE(3662)
			::zpp_nape::dynamics::ZPP_ColArbiter tmp33;		HX_STACK_VAR(tmp33,"tmp33");
			HX_STACK_LINE(3662)
			if ((tmp32)){
				HX_STACK_LINE(3662)
				tmp33 = in_arb->colarb;
			}
			else{
				HX_STACK_LINE(3662)
				tmp33 = null();
			}
			HX_STACK_LINE(3662)
			toi->arbiter = tmp33;
		}
	}
	HX_STACK_LINE(3665)
	::zpp_nape::dynamics::ZPP_Arbiter tmp16 = in_arb;		HX_STACK_VAR(tmp16,"tmp16");
	HX_STACK_LINE(3665)
	return tmp16;
}


HX_DEFINE_DYNAMIC_FUNC5(ZPP_Space_obj,continuousEvent,return )

Void ZPP_Space_obj::bodyCbWake( ::zpp_nape::phys::ZPP_Body b){
{
		HX_STACK_FRAME("zpp_nape.space.ZPP_Space","bodyCbWake",0x1bbe819b,"zpp_nape.space.ZPP_Space.bodyCbWake","zpp_nape/space/Space.hx",3667,0x2b65ed03)
		HX_STACK_THIS(this)
		HX_STACK_ARG(b,"b")
		HX_STACK_LINE(3668)
		int tmp = b->type;		HX_STACK_VAR(tmp,"tmp");
		HX_STACK_LINE(3668)
		int tmp1 = ::zpp_nape::util::ZPP_Flags_obj::id_BodyType_DYNAMIC;		HX_STACK_VAR(tmp1,"tmp1");
		HX_STACK_LINE(3668)
		bool tmp2 = (tmp == tmp1);		HX_STACK_VAR(tmp2,"tmp2");
		HX_STACK_LINE(3668)
		bool tmp3;		HX_STACK_VAR(tmp3,"tmp3");
		HX_STACK_LINE(3668)
		if ((tmp2)){
			HX_STACK_LINE(3668)
			tmp3 = (b->cbSet != null());
		}
		else{
			HX_STACK_LINE(3668)
			tmp3 = false;
		}
		HX_STACK_LINE(3668)
		if ((tmp3)){
			HX_STACK_LINE(3669)
			bool tmp4 = this->midstep;		HX_STACK_VAR(tmp4,"tmp4");
			HX_STACK_LINE(3669)
			if ((tmp4)){
				HX_STACK_LINE(3671)
				::zpp_nape::util::ZNPList_ZPP_BodyListener tmp5 = b->cbSet->bodylisteners;		HX_STACK_VAR(tmp5,"tmp5");
				HX_STACK_LINE(3671)
				::zpp_nape::util::ZNPNode_ZPP_BodyListener cx_ite = tmp5->head;		HX_STACK_VAR(cx_ite,"cx_ite");
				HX_STACK_LINE(3672)
				while((true)){
					HX_STACK_LINE(3672)
					bool tmp6 = (cx_ite != null());		HX_STACK_VAR(tmp6,"tmp6");
					HX_STACK_LINE(3672)
					bool tmp7 = !(tmp6);		HX_STACK_VAR(tmp7,"tmp7");
					HX_STACK_LINE(3672)
					if ((tmp7)){
						HX_STACK_LINE(3672)
						break;
					}
					HX_STACK_LINE(3673)
					::zpp_nape::callbacks::ZPP_BodyListener i = cx_ite->elt;		HX_STACK_VAR(i,"i");
					HX_STACK_LINE(3674)
					{
						HX_STACK_LINE(3675)
						int tmp8 = i->event;		HX_STACK_VAR(tmp8,"tmp8");
						HX_STACK_LINE(3675)
						int tmp9 = ::zpp_nape::util::ZPP_Flags_obj::id_CbEvent_WAKE;		HX_STACK_VAR(tmp9,"tmp9");
						HX_STACK_LINE(3675)
						bool tmp10 = (tmp8 != tmp9);		HX_STACK_VAR(tmp10,"tmp10");
						HX_STACK_LINE(3675)
						if ((tmp10)){
							HX_STACK_LINE(3676)
							cx_ite = cx_ite->next;
							HX_STACK_LINE(3677)
							continue;
						}
						HX_STACK_LINE(3679)
						::zpp_nape::callbacks::ZPP_BodyListener tmp11 = i;		HX_STACK_VAR(tmp11,"tmp11");
						HX_STACK_LINE(3679)
						::zpp_nape::callbacks::ZPP_Callback tmp12 = this->push_callback(tmp11);		HX_STACK_VAR(tmp12,"tmp12");
						HX_STACK_LINE(3679)
						::zpp_nape::callbacks::ZPP_Callback cb = tmp12;		HX_STACK_VAR(cb,"cb");
						HX_STACK_LINE(3680)
						int tmp13 = ::zpp_nape::util::ZPP_Flags_obj::id_CbEvent_WAKE;		HX_STACK_VAR(tmp13,"tmp13");
						HX_STACK_LINE(3680)
						cb->event = tmp13;
						HX_STACK_LINE(3681)
						cb->body = b;
					}
					HX_STACK_LINE(3683)
					cx_ite = cx_ite->next;
				}
			}
			else{
				HX_STACK_LINE(3687)
				b->component->woken = true;
			}
		}
	}
return null();
}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Space_obj,bodyCbWake,(void))

Void ZPP_Space_obj::bodyCbSleep( ::zpp_nape::phys::ZPP_Body b){
{
		HX_STACK_FRAME("zpp_nape.space.ZPP_Space","bodyCbSleep",0xe4995fc0,"zpp_nape.space.ZPP_Space.bodyCbSleep","zpp_nape/space/Space.hx",3690,0x2b65ed03)
		HX_STACK_THIS(this)
		HX_STACK_ARG(b,"b")
		HX_STACK_LINE(3691)
		int tmp = b->type;		HX_STACK_VAR(tmp,"tmp");
		HX_STACK_LINE(3691)
		int tmp1 = ::zpp_nape::util::ZPP_Flags_obj::id_BodyType_DYNAMIC;		HX_STACK_VAR(tmp1,"tmp1");
		HX_STACK_LINE(3691)
		bool tmp2 = (tmp == tmp1);		HX_STACK_VAR(tmp2,"tmp2");
		HX_STACK_LINE(3691)
		bool tmp3;		HX_STACK_VAR(tmp3,"tmp3");
		HX_STACK_LINE(3691)
		if ((tmp2)){
			HX_STACK_LINE(3691)
			tmp3 = (b->cbSet != null());
		}
		else{
			HX_STACK_LINE(3691)
			tmp3 = false;
		}
		HX_STACK_LINE(3691)
		if ((tmp3)){
			HX_STACK_LINE(3693)
			::zpp_nape::util::ZNPList_ZPP_BodyListener tmp4 = b->cbSet->bodylisteners;		HX_STACK_VAR(tmp4,"tmp4");
			HX_STACK_LINE(3693)
			::zpp_nape::util::ZNPNode_ZPP_BodyListener cx_ite = tmp4->head;		HX_STACK_VAR(cx_ite,"cx_ite");
			HX_STACK_LINE(3694)
			while((true)){
				HX_STACK_LINE(3694)
				bool tmp5 = (cx_ite != null());		HX_STACK_VAR(tmp5,"tmp5");
				HX_STACK_LINE(3694)
				bool tmp6 = !(tmp5);		HX_STACK_VAR(tmp6,"tmp6");
				HX_STACK_LINE(3694)
				if ((tmp6)){
					HX_STACK_LINE(3694)
					break;
				}
				HX_STACK_LINE(3695)
				::zpp_nape::callbacks::ZPP_BodyListener i = cx_ite->elt;		HX_STACK_VAR(i,"i");
				HX_STACK_LINE(3696)
				{
					HX_STACK_LINE(3697)
					int tmp7 = i->event;		HX_STACK_VAR(tmp7,"tmp7");
					HX_STACK_LINE(3697)
					int tmp8 = ::zpp_nape::util::ZPP_Flags_obj::id_CbEvent_SLEEP;		HX_STACK_VAR(tmp8,"tmp8");
					HX_STACK_LINE(3697)
					bool tmp9 = (tmp7 != tmp8);		HX_STACK_VAR(tmp9,"tmp9");
					HX_STACK_LINE(3697)
					if ((tmp9)){
						HX_STACK_LINE(3698)
						cx_ite = cx_ite->next;
						HX_STACK_LINE(3699)
						continue;
					}
					HX_STACK_LINE(3701)
					::zpp_nape::callbacks::ZPP_BodyListener tmp10 = i;		HX_STACK_VAR(tmp10,"tmp10");
					HX_STACK_LINE(3701)
					::zpp_nape::callbacks::ZPP_Callback tmp11 = this->push_callback(tmp10);		HX_STACK_VAR(tmp11,"tmp11");
					HX_STACK_LINE(3701)
					::zpp_nape::callbacks::ZPP_Callback cb = tmp11;		HX_STACK_VAR(cb,"cb");
					HX_STACK_LINE(3702)
					int tmp12 = ::zpp_nape::util::ZPP_Flags_obj::id_CbEvent_SLEEP;		HX_STACK_VAR(tmp12,"tmp12");
					HX_STACK_LINE(3702)
					cb->event = tmp12;
					HX_STACK_LINE(3703)
					cb->body = b;
				}
				HX_STACK_LINE(3705)
				cx_ite = cx_ite->next;
			}
		}
	}
return null();
}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Space_obj,bodyCbSleep,(void))

Void ZPP_Space_obj::constraintCbWake( ::zpp_nape::constraint::ZPP_Constraint con){
{
		HX_STACK_FRAME("zpp_nape.space.ZPP_Space","constraintCbWake",0x06582216,"zpp_nape.space.ZPP_Space.constraintCbWake","zpp_nape/space/Space.hx",3710,0x2b65ed03)
		HX_STACK_THIS(this)
		HX_STACK_ARG(con,"con")
		HX_STACK_LINE(3711)
		bool tmp = (con->cbSet != null());		HX_STACK_VAR(tmp,"tmp");
		HX_STACK_LINE(3711)
		if ((tmp)){
			HX_STACK_LINE(3712)
			bool tmp1 = this->midstep;		HX_STACK_VAR(tmp1,"tmp1");
			HX_STACK_LINE(3712)
			if ((tmp1)){
				HX_STACK_LINE(3714)
				::zpp_nape::util::ZNPList_ZPP_ConstraintListener tmp2 = con->cbSet->conlisteners;		HX_STACK_VAR(tmp2,"tmp2");
				HX_STACK_LINE(3714)
				::zpp_nape::util::ZNPNode_ZPP_ConstraintListener cx_ite = tmp2->head;		HX_STACK_VAR(cx_ite,"cx_ite");
				HX_STACK_LINE(3715)
				while((true)){
					HX_STACK_LINE(3715)
					bool tmp3 = (cx_ite != null());		HX_STACK_VAR(tmp3,"tmp3");
					HX_STACK_LINE(3715)
					bool tmp4 = !(tmp3);		HX_STACK_VAR(tmp4,"tmp4");
					HX_STACK_LINE(3715)
					if ((tmp4)){
						HX_STACK_LINE(3715)
						break;
					}
					HX_STACK_LINE(3716)
					::zpp_nape::callbacks::ZPP_ConstraintListener i = cx_ite->elt;		HX_STACK_VAR(i,"i");
					HX_STACK_LINE(3717)
					{
						HX_STACK_LINE(3718)
						int tmp5 = i->event;		HX_STACK_VAR(tmp5,"tmp5");
						HX_STACK_LINE(3718)
						int tmp6 = ::zpp_nape::util::ZPP_Flags_obj::id_CbEvent_WAKE;		HX_STACK_VAR(tmp6,"tmp6");
						HX_STACK_LINE(3718)
						bool tmp7 = (tmp5 != tmp6);		HX_STACK_VAR(tmp7,"tmp7");
						HX_STACK_LINE(3718)
						if ((tmp7)){
							HX_STACK_LINE(3719)
							cx_ite = cx_ite->next;
							HX_STACK_LINE(3720)
							continue;
						}
						HX_STACK_LINE(3722)
						::zpp_nape::callbacks::ZPP_ConstraintListener tmp8 = i;		HX_STACK_VAR(tmp8,"tmp8");
						HX_STACK_LINE(3722)
						::zpp_nape::callbacks::ZPP_Callback tmp9 = this->push_callback(tmp8);		HX_STACK_VAR(tmp9,"tmp9");
						HX_STACK_LINE(3722)
						::zpp_nape::callbacks::ZPP_Callback cb = tmp9;		HX_STACK_VAR(cb,"cb");
						HX_STACK_LINE(3723)
						int tmp10 = ::zpp_nape::util::ZPP_Flags_obj::id_CbEvent_WAKE;		HX_STACK_VAR(tmp10,"tmp10");
						HX_STACK_LINE(3723)
						cb->event = tmp10;
						HX_STACK_LINE(3724)
						cb->constraint = con;
					}
					HX_STACK_LINE(3726)
					cx_ite = cx_ite->next;
				}
			}
			else{
				HX_STACK_LINE(3730)
				con->component->woken = true;
			}
		}
	}
return null();
}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Space_obj,constraintCbWake,(void))

Void ZPP_Space_obj::constraintCbSleep( ::zpp_nape::constraint::ZPP_Constraint con){
{
		HX_STACK_FRAME("zpp_nape.space.ZPP_Space","constraintCbSleep",0x406c2ae5,"zpp_nape.space.ZPP_Space.constraintCbSleep","zpp_nape/space/Space.hx",3733,0x2b65ed03)
		HX_STACK_THIS(this)
		HX_STACK_ARG(con,"con")
		HX_STACK_LINE(3734)
		bool tmp = (con->cbSet != null());		HX_STACK_VAR(tmp,"tmp");
		HX_STACK_LINE(3734)
		if ((tmp)){
			HX_STACK_LINE(3736)
			::zpp_nape::util::ZNPList_ZPP_ConstraintListener tmp1 = con->cbSet->conlisteners;		HX_STACK_VAR(tmp1,"tmp1");
			HX_STACK_LINE(3736)
			::zpp_nape::util::ZNPNode_ZPP_ConstraintListener cx_ite = tmp1->head;		HX_STACK_VAR(cx_ite,"cx_ite");
			HX_STACK_LINE(3737)
			while((true)){
				HX_STACK_LINE(3737)
				bool tmp2 = (cx_ite != null());		HX_STACK_VAR(tmp2,"tmp2");
				HX_STACK_LINE(3737)
				bool tmp3 = !(tmp2);		HX_STACK_VAR(tmp3,"tmp3");
				HX_STACK_LINE(3737)
				if ((tmp3)){
					HX_STACK_LINE(3737)
					break;
				}
				HX_STACK_LINE(3738)
				::zpp_nape::callbacks::ZPP_ConstraintListener i = cx_ite->elt;		HX_STACK_VAR(i,"i");
				HX_STACK_LINE(3739)
				{
					HX_STACK_LINE(3740)
					int tmp4 = i->event;		HX_STACK_VAR(tmp4,"tmp4");
					HX_STACK_LINE(3740)
					int tmp5 = ::zpp_nape::util::ZPP_Flags_obj::id_CbEvent_SLEEP;		HX_STACK_VAR(tmp5,"tmp5");
					HX_STACK_LINE(3740)
					bool tmp6 = (tmp4 != tmp5);		HX_STACK_VAR(tmp6,"tmp6");
					HX_STACK_LINE(3740)
					if ((tmp6)){
						HX_STACK_LINE(3741)
						cx_ite = cx_ite->next;
						HX_STACK_LINE(3742)
						continue;
					}
					HX_STACK_LINE(3744)
					::zpp_nape::callbacks::ZPP_ConstraintListener tmp7 = i;		HX_STACK_VAR(tmp7,"tmp7");
					HX_STACK_LINE(3744)
					::zpp_nape::callbacks::ZPP_Callback tmp8 = this->push_callback(tmp7);		HX_STACK_VAR(tmp8,"tmp8");
					HX_STACK_LINE(3744)
					::zpp_nape::callbacks::ZPP_Callback cb = tmp8;		HX_STACK_VAR(cb,"cb");
					HX_STACK_LINE(3745)
					int tmp9 = ::zpp_nape::util::ZPP_Flags_obj::id_CbEvent_SLEEP;		HX_STACK_VAR(tmp9,"tmp9");
					HX_STACK_LINE(3745)
					cb->event = tmp9;
					HX_STACK_LINE(3746)
					cb->constraint = con;
				}
				HX_STACK_LINE(3748)
				cx_ite = cx_ite->next;
			}
		}
	}
return null();
}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Space_obj,constraintCbSleep,(void))

Void ZPP_Space_obj::constraintCbBreak( ::zpp_nape::constraint::ZPP_Constraint con){
{
		HX_STACK_FRAME("zpp_nape.space.ZPP_Space","constraintCbBreak",0x7a93928d,"zpp_nape.space.ZPP_Space.constraintCbBreak","zpp_nape/space/Space.hx",3753,0x2b65ed03)
		HX_STACK_THIS(this)
		HX_STACK_ARG(con,"con")
		HX_STACK_LINE(3754)
		bool tmp = (con->cbSet != null());		HX_STACK_VAR(tmp,"tmp");
		HX_STACK_LINE(3754)
		if ((tmp)){
			HX_STACK_LINE(3756)
			::zpp_nape::util::ZNPList_ZPP_ConstraintListener tmp1 = con->cbSet->conlisteners;		HX_STACK_VAR(tmp1,"tmp1");
			HX_STACK_LINE(3756)
			::zpp_nape::util::ZNPNode_ZPP_ConstraintListener cx_ite = tmp1->head;		HX_STACK_VAR(cx_ite,"cx_ite");
			HX_STACK_LINE(3757)
			while((true)){
				HX_STACK_LINE(3757)
				bool tmp2 = (cx_ite != null());		HX_STACK_VAR(tmp2,"tmp2");
				HX_STACK_LINE(3757)
				bool tmp3 = !(tmp2);		HX_STACK_VAR(tmp3,"tmp3");
				HX_STACK_LINE(3757)
				if ((tmp3)){
					HX_STACK_LINE(3757)
					break;
				}
				HX_STACK_LINE(3758)
				::zpp_nape::callbacks::ZPP_ConstraintListener i = cx_ite->elt;		HX_STACK_VAR(i,"i");
				HX_STACK_LINE(3759)
				{
					HX_STACK_LINE(3760)
					int tmp4 = i->event;		HX_STACK_VAR(tmp4,"tmp4");
					HX_STACK_LINE(3760)
					int tmp5 = ::zpp_nape::util::ZPP_Flags_obj::id_CbEvent_BREAK;		HX_STACK_VAR(tmp5,"tmp5");
					HX_STACK_LINE(3760)
					bool tmp6 = (tmp4 != tmp5);		HX_STACK_VAR(tmp6,"tmp6");
					HX_STACK_LINE(3760)
					if ((tmp6)){
						HX_STACK_LINE(3761)
						cx_ite = cx_ite->next;
						HX_STACK_LINE(3762)
						continue;
					}
					HX_STACK_LINE(3764)
					::zpp_nape::callbacks::ZPP_ConstraintListener tmp7 = i;		HX_STACK_VAR(tmp7,"tmp7");
					HX_STACK_LINE(3764)
					::zpp_nape::callbacks::ZPP_Callback tmp8 = this->push_callback(tmp7);		HX_STACK_VAR(tmp8,"tmp8");
					HX_STACK_LINE(3764)
					::zpp_nape::callbacks::ZPP_Callback cb = tmp8;		HX_STACK_VAR(cb,"cb");
					HX_STACK_LINE(3765)
					int tmp9 = ::zpp_nape::util::ZPP_Flags_obj::id_CbEvent_BREAK;		HX_STACK_VAR(tmp9,"tmp9");
					HX_STACK_LINE(3765)
					cb->event = tmp9;
					HX_STACK_LINE(3766)
					cb->constraint = con;
				}
				HX_STACK_LINE(3768)
				cx_ite = cx_ite->next;
			}
		}
	}
return null();
}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Space_obj,constraintCbBreak,(void))

Void ZPP_Space_obj::nullListenerType( ::zpp_nape::callbacks::ZPP_CbSet cb1,::zpp_nape::callbacks::ZPP_CbSet cb2){
{
		HX_STACK_FRAME("zpp_nape.space.ZPP_Space","nullListenerType",0x3dedf1eb,"zpp_nape.space.ZPP_Space.nullListenerType","zpp_nape/space/Space.hx",3773,0x2b65ed03)
		HX_STACK_THIS(this)
		HX_STACK_ARG(cb1,"cb1")
		HX_STACK_ARG(cb2,"cb2")
		HX_STACK_LINE(3774)
		::zpp_nape::util::ZNPList_ZPP_Interactor stack = ::zpp_nape::util::ZNPList_ZPP_Interactor_obj::__new();		HX_STACK_VAR(stack,"stack");
		HX_STACK_LINE(3775)
		{
			HX_STACK_LINE(3776)
			::zpp_nape::util::ZNPNode_ZPP_Interactor tmp = cb1->interactors->head;		HX_STACK_VAR(tmp,"tmp");
			HX_STACK_LINE(3776)
			::zpp_nape::util::ZNPNode_ZPP_Interactor cx_ite = tmp;		HX_STACK_VAR(cx_ite,"cx_ite");
			HX_STACK_LINE(3777)
			while((true)){
				HX_STACK_LINE(3777)
				bool tmp1 = (cx_ite != null());		HX_STACK_VAR(tmp1,"tmp1");
				HX_STACK_LINE(3777)
				bool tmp2 = !(tmp1);		HX_STACK_VAR(tmp2,"tmp2");
				HX_STACK_LINE(3777)
				if ((tmp2)){
					HX_STACK_LINE(3777)
					break;
				}
				HX_STACK_LINE(3778)
				::zpp_nape::phys::ZPP_Interactor i = cx_ite->elt;		HX_STACK_VAR(i,"i");
				HX_STACK_LINE(3779)
				::zpp_nape::phys::ZPP_Interactor tmp3 = i;		HX_STACK_VAR(tmp3,"tmp3");
				HX_STACK_LINE(3779)
				stack->add(tmp3);
				HX_STACK_LINE(3780)
				cx_ite = cx_ite->next;
			}
		}
		HX_STACK_LINE(3783)
		bool tmp = (cb1 != cb2);		HX_STACK_VAR(tmp,"tmp");
		HX_STACK_LINE(3783)
		if ((tmp)){
			HX_STACK_LINE(3784)
			::zpp_nape::util::ZNPNode_ZPP_Interactor tmp1 = cb2->interactors->head;		HX_STACK_VAR(tmp1,"tmp1");
			HX_STACK_LINE(3784)
			::zpp_nape::util::ZNPNode_ZPP_Interactor cx_ite = tmp1;		HX_STACK_VAR(cx_ite,"cx_ite");
			HX_STACK_LINE(3785)
			while((true)){
				HX_STACK_LINE(3785)
				bool tmp2 = (cx_ite != null());		HX_STACK_VAR(tmp2,"tmp2");
				HX_STACK_LINE(3785)
				bool tmp3 = !(tmp2);		HX_STACK_VAR(tmp3,"tmp3");
				HX_STACK_LINE(3785)
				if ((tmp3)){
					HX_STACK_LINE(3785)
					break;
				}
				HX_STACK_LINE(3786)
				::zpp_nape::phys::ZPP_Interactor i = cx_ite->elt;		HX_STACK_VAR(i,"i");
				HX_STACK_LINE(3787)
				::zpp_nape::phys::ZPP_Interactor tmp4 = i;		HX_STACK_VAR(tmp4,"tmp4");
				HX_STACK_LINE(3787)
				stack->add(tmp4);
				HX_STACK_LINE(3788)
				cx_ite = cx_ite->next;
			}
		}
		HX_STACK_LINE(3791)
		while((true)){
			HX_STACK_LINE(3791)
			bool tmp1 = (stack->head == null());		HX_STACK_VAR(tmp1,"tmp1");
			HX_STACK_LINE(3791)
			bool tmp2 = !(tmp1);		HX_STACK_VAR(tmp2,"tmp2");
			HX_STACK_LINE(3791)
			bool tmp3 = !(tmp2);		HX_STACK_VAR(tmp3,"tmp3");
			HX_STACK_LINE(3791)
			if ((tmp3)){
				HX_STACK_LINE(3791)
				break;
			}
			HX_STACK_LINE(3792)
			::zpp_nape::phys::ZPP_Interactor tmp4 = stack->pop_unsafe();		HX_STACK_VAR(tmp4,"tmp4");
			HX_STACK_LINE(3792)
			::zpp_nape::phys::ZPP_Interactor intx = tmp4;		HX_STACK_VAR(intx,"intx");
			HX_STACK_LINE(3793)
			bool tmp5 = (intx->icompound != null());		HX_STACK_VAR(tmp5,"tmp5");
			HX_STACK_LINE(3793)
			if ((tmp5)){
				HX_STACK_LINE(3794)
				::zpp_nape::phys::ZPP_Compound comp = intx->icompound;		HX_STACK_VAR(comp,"comp");
				HX_STACK_LINE(3795)
				{
					HX_STACK_LINE(3796)
					::zpp_nape::util::ZNPNode_ZPP_Body tmp6 = comp->bodies->head;		HX_STACK_VAR(tmp6,"tmp6");
					HX_STACK_LINE(3796)
					::zpp_nape::util::ZNPNode_ZPP_Body cx_ite = tmp6;		HX_STACK_VAR(cx_ite,"cx_ite");
					HX_STACK_LINE(3797)
					while((true)){
						HX_STACK_LINE(3797)
						bool tmp7 = (cx_ite != null());		HX_STACK_VAR(tmp7,"tmp7");
						HX_STACK_LINE(3797)
						bool tmp8 = !(tmp7);		HX_STACK_VAR(tmp8,"tmp8");
						HX_STACK_LINE(3797)
						if ((tmp8)){
							HX_STACK_LINE(3797)
							break;
						}
						HX_STACK_LINE(3798)
						::zpp_nape::phys::ZPP_Body i = cx_ite->elt;		HX_STACK_VAR(i,"i");
						HX_STACK_LINE(3799)
						::zpp_nape::phys::ZPP_Body tmp9 = i;		HX_STACK_VAR(tmp9,"tmp9");
						HX_STACK_LINE(3799)
						stack->add(tmp9);
						HX_STACK_LINE(3800)
						cx_ite = cx_ite->next;
					}
				}
				HX_STACK_LINE(3803)
				{
					HX_STACK_LINE(3804)
					::zpp_nape::util::ZNPNode_ZPP_Compound tmp6 = comp->compounds->head;		HX_STACK_VAR(tmp6,"tmp6");
					HX_STACK_LINE(3804)
					::zpp_nape::util::ZNPNode_ZPP_Compound cx_ite = tmp6;		HX_STACK_VAR(cx_ite,"cx_ite");
					HX_STACK_LINE(3805)
					while((true)){
						HX_STACK_LINE(3805)
						bool tmp7 = (cx_ite != null());		HX_STACK_VAR(tmp7,"tmp7");
						HX_STACK_LINE(3805)
						bool tmp8 = !(tmp7);		HX_STACK_VAR(tmp8,"tmp8");
						HX_STACK_LINE(3805)
						if ((tmp8)){
							HX_STACK_LINE(3805)
							break;
						}
						HX_STACK_LINE(3806)
						::zpp_nape::phys::ZPP_Compound i = cx_ite->elt;		HX_STACK_VAR(i,"i");
						HX_STACK_LINE(3807)
						::zpp_nape::phys::ZPP_Compound tmp9 = i;		HX_STACK_VAR(tmp9,"tmp9");
						HX_STACK_LINE(3807)
						stack->add(tmp9);
						HX_STACK_LINE(3808)
						cx_ite = cx_ite->next;
					}
				}
			}
			else{
				HX_STACK_LINE(3813)
				bool tmp6 = (intx->ibody != null());		HX_STACK_VAR(tmp6,"tmp6");
				HX_STACK_LINE(3813)
				::zpp_nape::phys::ZPP_Body tmp7;		HX_STACK_VAR(tmp7,"tmp7");
				HX_STACK_LINE(3813)
				if ((tmp6)){
					HX_STACK_LINE(3813)
					tmp7 = intx->ibody;
				}
				else{
					HX_STACK_LINE(3813)
					tmp7 = intx->ishape->body;
				}
				HX_STACK_LINE(3813)
				::zpp_nape::phys::ZPP_Body xbody = tmp7;		HX_STACK_VAR(xbody,"xbody");
				HX_STACK_LINE(3814)
				bool tmp8 = (intx->ishape != null());		HX_STACK_VAR(tmp8,"tmp8");
				HX_STACK_LINE(3814)
				::zpp_nape::shape::ZPP_Shape tmp9;		HX_STACK_VAR(tmp9,"tmp9");
				HX_STACK_LINE(3814)
				if ((tmp8)){
					HX_STACK_LINE(3814)
					tmp9 = intx->ishape;
				}
				else{
					HX_STACK_LINE(3814)
					tmp9 = null();
				}
				HX_STACK_LINE(3814)
				::zpp_nape::shape::ZPP_Shape xshp = tmp9;		HX_STACK_VAR(xshp,"xshp");
				HX_STACK_LINE(3815)
				{
					HX_STACK_LINE(3816)
					::zpp_nape::util::ZNPNode_ZPP_Arbiter tmp10 = xbody->arbiters->head;		HX_STACK_VAR(tmp10,"tmp10");
					HX_STACK_LINE(3816)
					::zpp_nape::util::ZNPNode_ZPP_Arbiter cx_ite = tmp10;		HX_STACK_VAR(cx_ite,"cx_ite");
					HX_STACK_LINE(3817)
					while((true)){
						HX_STACK_LINE(3817)
						bool tmp11 = (cx_ite != null());		HX_STACK_VAR(tmp11,"tmp11");
						HX_STACK_LINE(3817)
						bool tmp12 = !(tmp11);		HX_STACK_VAR(tmp12,"tmp12");
						HX_STACK_LINE(3817)
						if ((tmp12)){
							HX_STACK_LINE(3817)
							break;
						}
						HX_STACK_LINE(3818)
						::zpp_nape::dynamics::ZPP_Arbiter xarb = cx_ite->elt;		HX_STACK_VAR(xarb,"xarb");
						HX_STACK_LINE(3819)
						{
							HX_STACK_LINE(3820)
							bool tmp13 = (xarb->present == (int)0);		HX_STACK_VAR(tmp13,"tmp13");
							HX_STACK_LINE(3820)
							if ((tmp13)){
								HX_STACK_LINE(3821)
								cx_ite = cx_ite->next;
								HX_STACK_LINE(3822)
								continue;
							}
							HX_STACK_LINE(3824)
							bool tmp14 = (xshp != null());		HX_STACK_VAR(tmp14,"tmp14");
							HX_STACK_LINE(3824)
							bool tmp15;		HX_STACK_VAR(tmp15,"tmp15");
							HX_STACK_LINE(3824)
							if ((tmp14)){
								HX_STACK_LINE(3824)
								bool tmp16 = (xarb->ws1 == xshp);		HX_STACK_VAR(tmp16,"tmp16");
								HX_STACK_LINE(3824)
								bool tmp17 = tmp16;		HX_STACK_VAR(tmp17,"tmp17");
								HX_STACK_LINE(3824)
								bool tmp18 = tmp17;		HX_STACK_VAR(tmp18,"tmp18");
								HX_STACK_LINE(3824)
								bool tmp19 = !(tmp18);		HX_STACK_VAR(tmp19,"tmp19");
								HX_STACK_LINE(3824)
								bool tmp20 = tmp19;		HX_STACK_VAR(tmp20,"tmp20");
								HX_STACK_LINE(3824)
								bool tmp21;		HX_STACK_VAR(tmp21,"tmp21");
								HX_STACK_LINE(3824)
								bool tmp22 = tmp20;		HX_STACK_VAR(tmp22,"tmp22");
								HX_STACK_LINE(3824)
								if ((tmp22)){
									HX_STACK_LINE(3824)
									bool tmp23 = (xarb->ws2 == xshp);		HX_STACK_VAR(tmp23,"tmp23");
									HX_STACK_LINE(3824)
									tmp21 = tmp23;
								}
								else{
									HX_STACK_LINE(3824)
									tmp21 = true;
								}
								HX_STACK_LINE(3824)
								bool tmp23 = tmp21;		HX_STACK_VAR(tmp23,"tmp23");
								HX_STACK_LINE(3824)
								tmp15 = !(tmp23);
							}
							else{
								HX_STACK_LINE(3824)
								tmp15 = false;
							}
							HX_STACK_LINE(3824)
							if ((tmp15)){
								HX_STACK_LINE(3825)
								cx_ite = cx_ite->next;
								HX_STACK_LINE(3826)
								continue;
							}
							HX_STACK_LINE(3828)
							::zpp_nape::shape::ZPP_Shape tmp16 = xarb->ws1;		HX_STACK_VAR(tmp16,"tmp16");
							HX_STACK_LINE(3828)
							::zpp_nape::shape::ZPP_Shape tmp17 = xarb->ws2;		HX_STACK_VAR(tmp17,"tmp17");
							HX_STACK_LINE(3828)
							this->MRCA_chains(tmp16,tmp17);
							HX_STACK_LINE(3829)
							{
								HX_STACK_LINE(3830)
								::zpp_nape::util::ZNPList_ZPP_Interactor tmp18 = this->mrca1;		HX_STACK_VAR(tmp18,"tmp18");
								HX_STACK_LINE(3830)
								::zpp_nape::util::ZNPNode_ZPP_Interactor cx_ite1 = tmp18->head;		HX_STACK_VAR(cx_ite1,"cx_ite1");
								HX_STACK_LINE(3831)
								while((true)){
									HX_STACK_LINE(3831)
									bool tmp19 = (cx_ite1 != null());		HX_STACK_VAR(tmp19,"tmp19");
									HX_STACK_LINE(3831)
									bool tmp20 = !(tmp19);		HX_STACK_VAR(tmp20,"tmp20");
									HX_STACK_LINE(3831)
									if ((tmp20)){
										HX_STACK_LINE(3831)
										break;
									}
									HX_STACK_LINE(3832)
									::zpp_nape::phys::ZPP_Interactor i1 = cx_ite1->elt;		HX_STACK_VAR(i1,"i1");
									HX_STACK_LINE(3833)
									{
										HX_STACK_LINE(3834)
										bool tmp21 = (i1->cbSet != cb1);		HX_STACK_VAR(tmp21,"tmp21");
										HX_STACK_LINE(3834)
										bool tmp22;		HX_STACK_VAR(tmp22,"tmp22");
										HX_STACK_LINE(3834)
										if ((tmp21)){
											HX_STACK_LINE(3834)
											tmp22 = (i1->cbSet != cb2);
										}
										else{
											HX_STACK_LINE(3834)
											tmp22 = false;
										}
										HX_STACK_LINE(3834)
										if ((tmp22)){
											HX_STACK_LINE(3835)
											cx_ite1 = cx_ite1->next;
											HX_STACK_LINE(3836)
											continue;
										}
										HX_STACK_LINE(3838)
										{
											HX_STACK_LINE(3839)
											::zpp_nape::util::ZNPList_ZPP_Interactor tmp23 = this->mrca2;		HX_STACK_VAR(tmp23,"tmp23");
											HX_STACK_LINE(3839)
											::zpp_nape::util::ZNPNode_ZPP_Interactor cx_ite2 = tmp23->head;		HX_STACK_VAR(cx_ite2,"cx_ite2");
											HX_STACK_LINE(3840)
											while((true)){
												HX_STACK_LINE(3840)
												bool tmp24 = (cx_ite2 != null());		HX_STACK_VAR(tmp24,"tmp24");
												HX_STACK_LINE(3840)
												bool tmp25 = !(tmp24);		HX_STACK_VAR(tmp25,"tmp25");
												HX_STACK_LINE(3840)
												if ((tmp25)){
													HX_STACK_LINE(3840)
													break;
												}
												HX_STACK_LINE(3841)
												::zpp_nape::phys::ZPP_Interactor i2 = cx_ite2->elt;		HX_STACK_VAR(i2,"i2");
												HX_STACK_LINE(3842)
												{
													HX_STACK_LINE(3843)
													bool tmp26 = (i1->cbSet == cb1);		HX_STACK_VAR(tmp26,"tmp26");
													HX_STACK_LINE(3843)
													bool tmp27 = tmp26;		HX_STACK_VAR(tmp27,"tmp27");
													HX_STACK_LINE(3843)
													bool tmp28;		HX_STACK_VAR(tmp28,"tmp28");
													HX_STACK_LINE(3843)
													if ((tmp27)){
														HX_STACK_LINE(3843)
														tmp28 = (i2->cbSet != cb2);
													}
													else{
														HX_STACK_LINE(3843)
														tmp28 = false;
													}
													HX_STACK_LINE(3843)
													bool tmp29 = !(tmp28);		HX_STACK_VAR(tmp29,"tmp29");
													HX_STACK_LINE(3843)
													bool tmp30;		HX_STACK_VAR(tmp30,"tmp30");
													HX_STACK_LINE(3843)
													if ((tmp29)){
														HX_STACK_LINE(3843)
														bool tmp31 = (i1->cbSet == cb2);		HX_STACK_VAR(tmp31,"tmp31");
														HX_STACK_LINE(3843)
														bool tmp32 = tmp31;		HX_STACK_VAR(tmp32,"tmp32");
														HX_STACK_LINE(3843)
														bool tmp33 = tmp32;		HX_STACK_VAR(tmp33,"tmp33");
														HX_STACK_LINE(3843)
														if ((tmp33)){
															HX_STACK_LINE(3843)
															tmp30 = (i2->cbSet != cb1);
														}
														else{
															HX_STACK_LINE(3843)
															tmp30 = false;
														}
													}
													else{
														HX_STACK_LINE(3843)
														tmp30 = true;
													}
													HX_STACK_LINE(3843)
													if ((tmp30)){
														HX_STACK_LINE(3844)
														cx_ite2 = cx_ite2->next;
														HX_STACK_LINE(3845)
														continue;
													}
													HX_STACK_LINE(3847)
													::zpp_nape::phys::ZPP_Interactor tmp31 = i1;		HX_STACK_VAR(tmp31,"tmp31");
													HX_STACK_LINE(3847)
													::zpp_nape::phys::ZPP_Interactor tmp32 = i2;		HX_STACK_VAR(tmp32,"tmp32");
													HX_STACK_LINE(3847)
													::zpp_nape::space::ZPP_CallbackSet tmp33 = ::zpp_nape::phys::ZPP_Interactor_obj::get(tmp31,tmp32);		HX_STACK_VAR(tmp33,"tmp33");
													HX_STACK_LINE(3847)
													::zpp_nape::space::ZPP_CallbackSet callbackset = tmp33;		HX_STACK_VAR(callbackset,"callbackset");
													HX_STACK_LINE(3848)
													bool tmp34 = (callbackset != null());		HX_STACK_VAR(tmp34,"tmp34");
													HX_STACK_LINE(3848)
													if ((tmp34)){
														HX_STACK_LINE(3850)
														while((true)){
															HX_STACK_LINE(3850)
															::zpp_nape::util::ZNPNode_ZPP_Arbiter tmp35 = callbackset->arbiters->head;		HX_STACK_VAR(tmp35,"tmp35");
															HX_STACK_LINE(3850)
															bool tmp36 = (tmp35 == null());		HX_STACK_VAR(tmp36,"tmp36");
															HX_STACK_LINE(3850)
															bool tmp37 = !(tmp36);		HX_STACK_VAR(tmp37,"tmp37");
															HX_STACK_LINE(3850)
															bool tmp38 = !(tmp37);		HX_STACK_VAR(tmp38,"tmp38");
															HX_STACK_LINE(3850)
															if ((tmp38)){
																HX_STACK_LINE(3850)
																break;
															}
															HX_STACK_LINE(3851)
															::zpp_nape::dynamics::ZPP_Arbiter tmp39 = callbackset->arbiters->pop_unsafe();		HX_STACK_VAR(tmp39,"tmp39");
															HX_STACK_LINE(3851)
															::zpp_nape::dynamics::ZPP_Arbiter arb = tmp39;		HX_STACK_VAR(arb,"arb");
															HX_STACK_LINE(3852)
															{
																HX_STACK_LINE(3853)
																(arb->present)--;
																HX_STACK_LINE(3854)
																{
																}
															}
														}
														HX_STACK_LINE(3865)
														::zpp_nape::space::ZPP_CallbackSet tmp35 = callbackset;		HX_STACK_VAR(tmp35,"tmp35");
														HX_STACK_LINE(3865)
														this->remove_callbackset(tmp35);
													}
												}
												HX_STACK_LINE(3868)
												cx_ite2 = cx_ite2->next;
											}
										}
									}
									HX_STACK_LINE(3872)
									cx_ite1 = cx_ite1->next;
								}
							}
						}
						HX_STACK_LINE(3876)
						cx_ite = cx_ite->next;
					}
				}
			}
		}
	}
return null();
}


HX_DEFINE_DYNAMIC_FUNC2(ZPP_Space_obj,nullListenerType,(void))

Void ZPP_Space_obj::nullInteractorType( ::zpp_nape::phys::ZPP_Interactor intx,::zpp_nape::phys::ZPP_Interactor me){
{
		HX_STACK_FRAME("zpp_nape.space.ZPP_Space","nullInteractorType",0x73de2f90,"zpp_nape.space.ZPP_Space.nullInteractorType","zpp_nape/space/Space.hx",3882,0x2b65ed03)
		HX_STACK_THIS(this)
		HX_STACK_ARG(intx,"intx")
		HX_STACK_ARG(me,"me")
		HX_STACK_LINE(3883)
		bool tmp = (me == null());		HX_STACK_VAR(tmp,"tmp");
		HX_STACK_LINE(3883)
		if ((tmp)){
			HX_STACK_LINE(3883)
			me = intx;
		}
		HX_STACK_LINE(3884)
		bool tmp1 = (intx->icompound != null());		HX_STACK_VAR(tmp1,"tmp1");
		HX_STACK_LINE(3884)
		if ((tmp1)){
			HX_STACK_LINE(3885)
			::zpp_nape::phys::ZPP_Compound comp = intx->icompound;		HX_STACK_VAR(comp,"comp");
			HX_STACK_LINE(3886)
			{
				HX_STACK_LINE(3887)
				::zpp_nape::util::ZNPNode_ZPP_Body tmp2 = comp->bodies->head;		HX_STACK_VAR(tmp2,"tmp2");
				HX_STACK_LINE(3887)
				::zpp_nape::util::ZNPNode_ZPP_Body cx_ite = tmp2;		HX_STACK_VAR(cx_ite,"cx_ite");
				HX_STACK_LINE(3888)
				while((true)){
					HX_STACK_LINE(3888)
					bool tmp3 = (cx_ite != null());		HX_STACK_VAR(tmp3,"tmp3");
					HX_STACK_LINE(3888)
					bool tmp4 = !(tmp3);		HX_STACK_VAR(tmp4,"tmp4");
					HX_STACK_LINE(3888)
					if ((tmp4)){
						HX_STACK_LINE(3888)
						break;
					}
					HX_STACK_LINE(3889)
					::zpp_nape::phys::ZPP_Body body = cx_ite->elt;		HX_STACK_VAR(body,"body");
					HX_STACK_LINE(3890)
					::zpp_nape::phys::ZPP_Body tmp5 = body;		HX_STACK_VAR(tmp5,"tmp5");
					HX_STACK_LINE(3890)
					::zpp_nape::phys::ZPP_Interactor tmp6 = me;		HX_STACK_VAR(tmp6,"tmp6");
					HX_STACK_LINE(3890)
					this->nullInteractorType(tmp5,tmp6);
					HX_STACK_LINE(3891)
					cx_ite = cx_ite->next;
				}
			}
			HX_STACK_LINE(3894)
			{
				HX_STACK_LINE(3895)
				::zpp_nape::util::ZNPNode_ZPP_Compound tmp2 = comp->compounds->head;		HX_STACK_VAR(tmp2,"tmp2");
				HX_STACK_LINE(3895)
				::zpp_nape::util::ZNPNode_ZPP_Compound cx_ite = tmp2;		HX_STACK_VAR(cx_ite,"cx_ite");
				HX_STACK_LINE(3896)
				while((true)){
					HX_STACK_LINE(3896)
					bool tmp3 = (cx_ite != null());		HX_STACK_VAR(tmp3,"tmp3");
					HX_STACK_LINE(3896)
					bool tmp4 = !(tmp3);		HX_STACK_VAR(tmp4,"tmp4");
					HX_STACK_LINE(3896)
					if ((tmp4)){
						HX_STACK_LINE(3896)
						break;
					}
					HX_STACK_LINE(3897)
					::zpp_nape::phys::ZPP_Compound comp1 = cx_ite->elt;		HX_STACK_VAR(comp1,"comp1");
					HX_STACK_LINE(3898)
					::zpp_nape::phys::ZPP_Compound tmp5 = comp1;		HX_STACK_VAR(tmp5,"tmp5");
					HX_STACK_LINE(3898)
					::zpp_nape::phys::ZPP_Interactor tmp6 = me;		HX_STACK_VAR(tmp6,"tmp6");
					HX_STACK_LINE(3898)
					this->nullInteractorType(tmp5,tmp6);
					HX_STACK_LINE(3899)
					cx_ite = cx_ite->next;
				}
			}
		}
		else{
			HX_STACK_LINE(3904)
			bool tmp2 = (intx->ibody != null());		HX_STACK_VAR(tmp2,"tmp2");
			HX_STACK_LINE(3904)
			::zpp_nape::phys::ZPP_Body tmp3;		HX_STACK_VAR(tmp3,"tmp3");
			HX_STACK_LINE(3904)
			if ((tmp2)){
				HX_STACK_LINE(3904)
				tmp3 = intx->ibody;
			}
			else{
				HX_STACK_LINE(3904)
				tmp3 = intx->ishape->body;
			}
			HX_STACK_LINE(3904)
			::zpp_nape::phys::ZPP_Body xbody = tmp3;		HX_STACK_VAR(xbody,"xbody");
			HX_STACK_LINE(3905)
			bool tmp4 = (intx->ishape != null());		HX_STACK_VAR(tmp4,"tmp4");
			HX_STACK_LINE(3905)
			::zpp_nape::shape::ZPP_Shape tmp5;		HX_STACK_VAR(tmp5,"tmp5");
			HX_STACK_LINE(3905)
			if ((tmp4)){
				HX_STACK_LINE(3905)
				tmp5 = intx->ishape;
			}
			else{
				HX_STACK_LINE(3905)
				tmp5 = null();
			}
			HX_STACK_LINE(3905)
			::zpp_nape::shape::ZPP_Shape xshp = tmp5;		HX_STACK_VAR(xshp,"xshp");
			HX_STACK_LINE(3906)
			{
				HX_STACK_LINE(3907)
				::zpp_nape::util::ZNPNode_ZPP_Arbiter tmp6 = xbody->arbiters->head;		HX_STACK_VAR(tmp6,"tmp6");
				HX_STACK_LINE(3907)
				::zpp_nape::util::ZNPNode_ZPP_Arbiter cx_ite = tmp6;		HX_STACK_VAR(cx_ite,"cx_ite");
				HX_STACK_LINE(3908)
				while((true)){
					HX_STACK_LINE(3908)
					bool tmp7 = (cx_ite != null());		HX_STACK_VAR(tmp7,"tmp7");
					HX_STACK_LINE(3908)
					bool tmp8 = !(tmp7);		HX_STACK_VAR(tmp8,"tmp8");
					HX_STACK_LINE(3908)
					if ((tmp8)){
						HX_STACK_LINE(3908)
						break;
					}
					HX_STACK_LINE(3909)
					::zpp_nape::dynamics::ZPP_Arbiter xarb = cx_ite->elt;		HX_STACK_VAR(xarb,"xarb");
					HX_STACK_LINE(3910)
					{
						HX_STACK_LINE(3911)
						bool tmp9 = (xarb->present == (int)0);		HX_STACK_VAR(tmp9,"tmp9");
						HX_STACK_LINE(3911)
						if ((tmp9)){
							HX_STACK_LINE(3912)
							cx_ite = cx_ite->next;
							HX_STACK_LINE(3913)
							continue;
						}
						HX_STACK_LINE(3915)
						bool tmp10 = (xshp != null());		HX_STACK_VAR(tmp10,"tmp10");
						HX_STACK_LINE(3915)
						bool tmp11;		HX_STACK_VAR(tmp11,"tmp11");
						HX_STACK_LINE(3915)
						if ((tmp10)){
							HX_STACK_LINE(3915)
							bool tmp12 = (xarb->ws1 == xshp);		HX_STACK_VAR(tmp12,"tmp12");
							HX_STACK_LINE(3915)
							bool tmp13 = tmp12;		HX_STACK_VAR(tmp13,"tmp13");
							HX_STACK_LINE(3915)
							bool tmp14 = tmp13;		HX_STACK_VAR(tmp14,"tmp14");
							HX_STACK_LINE(3915)
							bool tmp15 = !(tmp14);		HX_STACK_VAR(tmp15,"tmp15");
							HX_STACK_LINE(3915)
							bool tmp16 = tmp15;		HX_STACK_VAR(tmp16,"tmp16");
							HX_STACK_LINE(3915)
							bool tmp17;		HX_STACK_VAR(tmp17,"tmp17");
							HX_STACK_LINE(3915)
							bool tmp18 = tmp16;		HX_STACK_VAR(tmp18,"tmp18");
							HX_STACK_LINE(3915)
							if ((tmp18)){
								HX_STACK_LINE(3915)
								bool tmp19 = (xarb->ws2 == xshp);		HX_STACK_VAR(tmp19,"tmp19");
								HX_STACK_LINE(3915)
								tmp17 = tmp19;
							}
							else{
								HX_STACK_LINE(3915)
								tmp17 = true;
							}
							HX_STACK_LINE(3915)
							bool tmp19 = tmp17;		HX_STACK_VAR(tmp19,"tmp19");
							HX_STACK_LINE(3915)
							tmp11 = !(tmp19);
						}
						else{
							HX_STACK_LINE(3915)
							tmp11 = false;
						}
						HX_STACK_LINE(3915)
						if ((tmp11)){
							HX_STACK_LINE(3916)
							cx_ite = cx_ite->next;
							HX_STACK_LINE(3917)
							continue;
						}
						HX_STACK_LINE(3919)
						::zpp_nape::shape::ZPP_Shape tmp12 = xarb->ws1;		HX_STACK_VAR(tmp12,"tmp12");
						HX_STACK_LINE(3919)
						::zpp_nape::shape::ZPP_Shape tmp13 = xarb->ws2;		HX_STACK_VAR(tmp13,"tmp13");
						HX_STACK_LINE(3919)
						this->MRCA_chains(tmp12,tmp13);
						HX_STACK_LINE(3920)
						{
							HX_STACK_LINE(3921)
							::zpp_nape::util::ZNPList_ZPP_Interactor tmp14 = this->mrca1;		HX_STACK_VAR(tmp14,"tmp14");
							HX_STACK_LINE(3921)
							::zpp_nape::util::ZNPNode_ZPP_Interactor cx_ite1 = tmp14->head;		HX_STACK_VAR(cx_ite1,"cx_ite1");
							HX_STACK_LINE(3922)
							while((true)){
								HX_STACK_LINE(3922)
								bool tmp15 = (cx_ite1 != null());		HX_STACK_VAR(tmp15,"tmp15");
								HX_STACK_LINE(3922)
								bool tmp16 = !(tmp15);		HX_STACK_VAR(tmp16,"tmp16");
								HX_STACK_LINE(3922)
								if ((tmp16)){
									HX_STACK_LINE(3922)
									break;
								}
								HX_STACK_LINE(3923)
								::zpp_nape::phys::ZPP_Interactor i1 = cx_ite1->elt;		HX_STACK_VAR(i1,"i1");
								HX_STACK_LINE(3925)
								{
									HX_STACK_LINE(3926)
									::zpp_nape::util::ZNPList_ZPP_Interactor tmp17 = this->mrca2;		HX_STACK_VAR(tmp17,"tmp17");
									HX_STACK_LINE(3926)
									::zpp_nape::util::ZNPNode_ZPP_Interactor cx_ite2 = tmp17->head;		HX_STACK_VAR(cx_ite2,"cx_ite2");
									HX_STACK_LINE(3927)
									while((true)){
										HX_STACK_LINE(3927)
										bool tmp18 = (cx_ite2 != null());		HX_STACK_VAR(tmp18,"tmp18");
										HX_STACK_LINE(3927)
										bool tmp19 = !(tmp18);		HX_STACK_VAR(tmp19,"tmp19");
										HX_STACK_LINE(3927)
										if ((tmp19)){
											HX_STACK_LINE(3927)
											break;
										}
										HX_STACK_LINE(3928)
										::zpp_nape::phys::ZPP_Interactor i2 = cx_ite2->elt;		HX_STACK_VAR(i2,"i2");
										HX_STACK_LINE(3929)
										{
											HX_STACK_LINE(3930)
											bool tmp20 = (i1 != me);		HX_STACK_VAR(tmp20,"tmp20");
											HX_STACK_LINE(3930)
											bool tmp21;		HX_STACK_VAR(tmp21,"tmp21");
											HX_STACK_LINE(3930)
											if ((tmp20)){
												HX_STACK_LINE(3930)
												tmp21 = (i2 != me);
											}
											else{
												HX_STACK_LINE(3930)
												tmp21 = false;
											}
											HX_STACK_LINE(3930)
											if ((tmp21)){
												HX_STACK_LINE(3931)
												cx_ite2 = cx_ite2->next;
												HX_STACK_LINE(3932)
												continue;
											}
											HX_STACK_LINE(3934)
											::zpp_nape::phys::ZPP_Interactor tmp22 = i1;		HX_STACK_VAR(tmp22,"tmp22");
											HX_STACK_LINE(3934)
											::zpp_nape::phys::ZPP_Interactor tmp23 = i2;		HX_STACK_VAR(tmp23,"tmp23");
											HX_STACK_LINE(3934)
											::zpp_nape::space::ZPP_CallbackSet tmp24 = ::zpp_nape::phys::ZPP_Interactor_obj::get(tmp22,tmp23);		HX_STACK_VAR(tmp24,"tmp24");
											HX_STACK_LINE(3934)
											::zpp_nape::space::ZPP_CallbackSet callbackset = tmp24;		HX_STACK_VAR(callbackset,"callbackset");
											HX_STACK_LINE(3935)
											bool tmp25 = (callbackset != null());		HX_STACK_VAR(tmp25,"tmp25");
											HX_STACK_LINE(3935)
											if ((tmp25)){
												HX_STACK_LINE(3936)
												(xarb->present)--;
												HX_STACK_LINE(3945)
												::zpp_nape::dynamics::ZPP_Arbiter tmp26 = xarb;		HX_STACK_VAR(tmp26,"tmp26");
												HX_STACK_LINE(3945)
												callbackset->remove_arb(tmp26);
												HX_STACK_LINE(3946)
												::zpp_nape::util::ZNPNode_ZPP_Arbiter tmp27 = callbackset->arbiters->head;		HX_STACK_VAR(tmp27,"tmp27");
												HX_STACK_LINE(3946)
												bool tmp28 = (tmp27 == null());		HX_STACK_VAR(tmp28,"tmp28");
												HX_STACK_LINE(3946)
												if ((tmp28)){
													HX_STACK_LINE(3947)
													::zpp_nape::space::ZPP_CallbackSet tmp29 = callbackset;		HX_STACK_VAR(tmp29,"tmp29");
													HX_STACK_LINE(3947)
													this->remove_callbackset(tmp29);
												}
											}
										}
										HX_STACK_LINE(3951)
										cx_ite2 = cx_ite2->next;
									}
								}
								HX_STACK_LINE(3955)
								cx_ite1 = cx_ite1->next;
							}
						}
					}
					HX_STACK_LINE(3959)
					cx_ite = cx_ite->next;
				}
			}
		}
	}
return null();
}


HX_DEFINE_DYNAMIC_FUNC2(ZPP_Space_obj,nullInteractorType,(void))

Void ZPP_Space_obj::freshListenerType( ::zpp_nape::callbacks::ZPP_CbSet cb1,::zpp_nape::callbacks::ZPP_CbSet cb2){
{
		HX_STACK_FRAME("zpp_nape.space.ZPP_Space","freshListenerType",0xf4ea40a6,"zpp_nape.space.ZPP_Space.freshListenerType","zpp_nape/space/Space.hx",3964,0x2b65ed03)
		HX_STACK_THIS(this)
		HX_STACK_ARG(cb1,"cb1")
		HX_STACK_ARG(cb2,"cb2")
		HX_STACK_LINE(3965)
		::zpp_nape::util::ZNPList_ZPP_Interactor stack = ::zpp_nape::util::ZNPList_ZPP_Interactor_obj::__new();		HX_STACK_VAR(stack,"stack");
		HX_STACK_LINE(3966)
		{
			HX_STACK_LINE(3967)
			::zpp_nape::util::ZNPNode_ZPP_Interactor tmp = cb1->interactors->head;		HX_STACK_VAR(tmp,"tmp");
			HX_STACK_LINE(3967)
			::zpp_nape::util::ZNPNode_ZPP_Interactor cx_ite = tmp;		HX_STACK_VAR(cx_ite,"cx_ite");
			HX_STACK_LINE(3968)
			while((true)){
				HX_STACK_LINE(3968)
				bool tmp1 = (cx_ite != null());		HX_STACK_VAR(tmp1,"tmp1");
				HX_STACK_LINE(3968)
				bool tmp2 = !(tmp1);		HX_STACK_VAR(tmp2,"tmp2");
				HX_STACK_LINE(3968)
				if ((tmp2)){
					HX_STACK_LINE(3968)
					break;
				}
				HX_STACK_LINE(3969)
				::zpp_nape::phys::ZPP_Interactor i = cx_ite->elt;		HX_STACK_VAR(i,"i");
				HX_STACK_LINE(3970)
				::zpp_nape::phys::ZPP_Interactor tmp3 = i;		HX_STACK_VAR(tmp3,"tmp3");
				HX_STACK_LINE(3970)
				stack->add(tmp3);
				HX_STACK_LINE(3971)
				cx_ite = cx_ite->next;
			}
		}
		HX_STACK_LINE(3974)
		bool tmp = (cb1 != cb2);		HX_STACK_VAR(tmp,"tmp");
		HX_STACK_LINE(3974)
		if ((tmp)){
			HX_STACK_LINE(3975)
			::zpp_nape::util::ZNPNode_ZPP_Interactor tmp1 = cb2->interactors->head;		HX_STACK_VAR(tmp1,"tmp1");
			HX_STACK_LINE(3975)
			::zpp_nape::util::ZNPNode_ZPP_Interactor cx_ite = tmp1;		HX_STACK_VAR(cx_ite,"cx_ite");
			HX_STACK_LINE(3976)
			while((true)){
				HX_STACK_LINE(3976)
				bool tmp2 = (cx_ite != null());		HX_STACK_VAR(tmp2,"tmp2");
				HX_STACK_LINE(3976)
				bool tmp3 = !(tmp2);		HX_STACK_VAR(tmp3,"tmp3");
				HX_STACK_LINE(3976)
				if ((tmp3)){
					HX_STACK_LINE(3976)
					break;
				}
				HX_STACK_LINE(3977)
				::zpp_nape::phys::ZPP_Interactor i = cx_ite->elt;		HX_STACK_VAR(i,"i");
				HX_STACK_LINE(3978)
				::zpp_nape::phys::ZPP_Interactor tmp4 = i;		HX_STACK_VAR(tmp4,"tmp4");
				HX_STACK_LINE(3978)
				stack->add(tmp4);
				HX_STACK_LINE(3979)
				cx_ite = cx_ite->next;
			}
		}
		HX_STACK_LINE(3982)
		while((true)){
			HX_STACK_LINE(3982)
			bool tmp1 = (stack->head == null());		HX_STACK_VAR(tmp1,"tmp1");
			HX_STACK_LINE(3982)
			bool tmp2 = !(tmp1);		HX_STACK_VAR(tmp2,"tmp2");
			HX_STACK_LINE(3982)
			bool tmp3 = !(tmp2);		HX_STACK_VAR(tmp3,"tmp3");
			HX_STACK_LINE(3982)
			if ((tmp3)){
				HX_STACK_LINE(3982)
				break;
			}
			HX_STACK_LINE(3983)
			::zpp_nape::phys::ZPP_Interactor tmp4 = stack->pop_unsafe();		HX_STACK_VAR(tmp4,"tmp4");
			HX_STACK_LINE(3983)
			::zpp_nape::phys::ZPP_Interactor intx = tmp4;		HX_STACK_VAR(intx,"intx");
			HX_STACK_LINE(3984)
			bool tmp5 = (intx->icompound != null());		HX_STACK_VAR(tmp5,"tmp5");
			HX_STACK_LINE(3984)
			if ((tmp5)){
				HX_STACK_LINE(3985)
				::zpp_nape::phys::ZPP_Compound comp = intx->icompound;		HX_STACK_VAR(comp,"comp");
				HX_STACK_LINE(3986)
				{
					HX_STACK_LINE(3987)
					::zpp_nape::util::ZNPNode_ZPP_Body tmp6 = comp->bodies->head;		HX_STACK_VAR(tmp6,"tmp6");
					HX_STACK_LINE(3987)
					::zpp_nape::util::ZNPNode_ZPP_Body cx_ite = tmp6;		HX_STACK_VAR(cx_ite,"cx_ite");
					HX_STACK_LINE(3988)
					while((true)){
						HX_STACK_LINE(3988)
						bool tmp7 = (cx_ite != null());		HX_STACK_VAR(tmp7,"tmp7");
						HX_STACK_LINE(3988)
						bool tmp8 = !(tmp7);		HX_STACK_VAR(tmp8,"tmp8");
						HX_STACK_LINE(3988)
						if ((tmp8)){
							HX_STACK_LINE(3988)
							break;
						}
						HX_STACK_LINE(3989)
						::zpp_nape::phys::ZPP_Body i = cx_ite->elt;		HX_STACK_VAR(i,"i");
						HX_STACK_LINE(3990)
						::zpp_nape::phys::ZPP_Body tmp9 = i;		HX_STACK_VAR(tmp9,"tmp9");
						HX_STACK_LINE(3990)
						stack->add(tmp9);
						HX_STACK_LINE(3991)
						cx_ite = cx_ite->next;
					}
				}
				HX_STACK_LINE(3994)
				{
					HX_STACK_LINE(3995)
					::zpp_nape::util::ZNPNode_ZPP_Compound tmp6 = comp->compounds->head;		HX_STACK_VAR(tmp6,"tmp6");
					HX_STACK_LINE(3995)
					::zpp_nape::util::ZNPNode_ZPP_Compound cx_ite = tmp6;		HX_STACK_VAR(cx_ite,"cx_ite");
					HX_STACK_LINE(3996)
					while((true)){
						HX_STACK_LINE(3996)
						bool tmp7 = (cx_ite != null());		HX_STACK_VAR(tmp7,"tmp7");
						HX_STACK_LINE(3996)
						bool tmp8 = !(tmp7);		HX_STACK_VAR(tmp8,"tmp8");
						HX_STACK_LINE(3996)
						if ((tmp8)){
							HX_STACK_LINE(3996)
							break;
						}
						HX_STACK_LINE(3997)
						::zpp_nape::phys::ZPP_Compound i = cx_ite->elt;		HX_STACK_VAR(i,"i");
						HX_STACK_LINE(3998)
						::zpp_nape::phys::ZPP_Compound tmp9 = i;		HX_STACK_VAR(tmp9,"tmp9");
						HX_STACK_LINE(3998)
						stack->add(tmp9);
						HX_STACK_LINE(3999)
						cx_ite = cx_ite->next;
					}
				}
			}
			else{
				HX_STACK_LINE(4004)
				bool tmp6 = (intx->ibody != null());		HX_STACK_VAR(tmp6,"tmp6");
				HX_STACK_LINE(4004)
				::zpp_nape::phys::ZPP_Body tmp7;		HX_STACK_VAR(tmp7,"tmp7");
				HX_STACK_LINE(4004)
				if ((tmp6)){
					HX_STACK_LINE(4004)
					tmp7 = intx->ibody;
				}
				else{
					HX_STACK_LINE(4004)
					tmp7 = intx->ishape->body;
				}
				HX_STACK_LINE(4004)
				::zpp_nape::phys::ZPP_Body xbody = tmp7;		HX_STACK_VAR(xbody,"xbody");
				HX_STACK_LINE(4005)
				bool tmp8 = (intx->ishape != null());		HX_STACK_VAR(tmp8,"tmp8");
				HX_STACK_LINE(4005)
				::zpp_nape::shape::ZPP_Shape tmp9;		HX_STACK_VAR(tmp9,"tmp9");
				HX_STACK_LINE(4005)
				if ((tmp8)){
					HX_STACK_LINE(4005)
					tmp9 = intx->ishape;
				}
				else{
					HX_STACK_LINE(4005)
					tmp9 = null();
				}
				HX_STACK_LINE(4005)
				::zpp_nape::shape::ZPP_Shape xshp = tmp9;		HX_STACK_VAR(xshp,"xshp");
				HX_STACK_LINE(4006)
				{
					HX_STACK_LINE(4007)
					::zpp_nape::util::ZNPNode_ZPP_Arbiter tmp10 = xbody->arbiters->head;		HX_STACK_VAR(tmp10,"tmp10");
					HX_STACK_LINE(4007)
					::zpp_nape::util::ZNPNode_ZPP_Arbiter cx_ite = tmp10;		HX_STACK_VAR(cx_ite,"cx_ite");
					HX_STACK_LINE(4008)
					while((true)){
						HX_STACK_LINE(4008)
						bool tmp11 = (cx_ite != null());		HX_STACK_VAR(tmp11,"tmp11");
						HX_STACK_LINE(4008)
						bool tmp12 = !(tmp11);		HX_STACK_VAR(tmp12,"tmp12");
						HX_STACK_LINE(4008)
						if ((tmp12)){
							HX_STACK_LINE(4008)
							break;
						}
						HX_STACK_LINE(4009)
						::zpp_nape::dynamics::ZPP_Arbiter xarb = cx_ite->elt;		HX_STACK_VAR(xarb,"xarb");
						HX_STACK_LINE(4010)
						{
							HX_STACK_LINE(4011)
							bool tmp13 = xarb->presentable;		HX_STACK_VAR(tmp13,"tmp13");
							HX_STACK_LINE(4011)
							bool tmp14 = !(tmp13);		HX_STACK_VAR(tmp14,"tmp14");
							HX_STACK_LINE(4011)
							if ((tmp14)){
								HX_STACK_LINE(4012)
								cx_ite = cx_ite->next;
								HX_STACK_LINE(4013)
								continue;
							}
							HX_STACK_LINE(4015)
							bool tmp15 = (xshp != null());		HX_STACK_VAR(tmp15,"tmp15");
							HX_STACK_LINE(4015)
							bool tmp16;		HX_STACK_VAR(tmp16,"tmp16");
							HX_STACK_LINE(4015)
							if ((tmp15)){
								HX_STACK_LINE(4015)
								bool tmp17 = (xarb->ws1 == xshp);		HX_STACK_VAR(tmp17,"tmp17");
								HX_STACK_LINE(4015)
								bool tmp18 = tmp17;		HX_STACK_VAR(tmp18,"tmp18");
								HX_STACK_LINE(4015)
								bool tmp19 = tmp18;		HX_STACK_VAR(tmp19,"tmp19");
								HX_STACK_LINE(4015)
								bool tmp20 = !(tmp19);		HX_STACK_VAR(tmp20,"tmp20");
								HX_STACK_LINE(4015)
								bool tmp21 = tmp20;		HX_STACK_VAR(tmp21,"tmp21");
								HX_STACK_LINE(4015)
								bool tmp22;		HX_STACK_VAR(tmp22,"tmp22");
								HX_STACK_LINE(4015)
								bool tmp23 = tmp21;		HX_STACK_VAR(tmp23,"tmp23");
								HX_STACK_LINE(4015)
								if ((tmp23)){
									HX_STACK_LINE(4015)
									bool tmp24 = (xarb->ws2 == xshp);		HX_STACK_VAR(tmp24,"tmp24");
									HX_STACK_LINE(4015)
									tmp22 = tmp24;
								}
								else{
									HX_STACK_LINE(4015)
									tmp22 = true;
								}
								HX_STACK_LINE(4015)
								bool tmp24 = tmp22;		HX_STACK_VAR(tmp24,"tmp24");
								HX_STACK_LINE(4015)
								tmp16 = !(tmp24);
							}
							else{
								HX_STACK_LINE(4015)
								tmp16 = false;
							}
							HX_STACK_LINE(4015)
							if ((tmp16)){
								HX_STACK_LINE(4016)
								cx_ite = cx_ite->next;
								HX_STACK_LINE(4017)
								continue;
							}
							HX_STACK_LINE(4019)
							::zpp_nape::shape::ZPP_Shape tmp17 = xarb->ws1;		HX_STACK_VAR(tmp17,"tmp17");
							HX_STACK_LINE(4019)
							::zpp_nape::shape::ZPP_Shape tmp18 = xarb->ws2;		HX_STACK_VAR(tmp18,"tmp18");
							HX_STACK_LINE(4019)
							this->MRCA_chains(tmp17,tmp18);
							HX_STACK_LINE(4020)
							{
								HX_STACK_LINE(4021)
								::zpp_nape::util::ZNPList_ZPP_Interactor tmp19 = this->mrca1;		HX_STACK_VAR(tmp19,"tmp19");
								HX_STACK_LINE(4021)
								::zpp_nape::util::ZNPNode_ZPP_Interactor cx_ite1 = tmp19->head;		HX_STACK_VAR(cx_ite1,"cx_ite1");
								HX_STACK_LINE(4022)
								while((true)){
									HX_STACK_LINE(4022)
									bool tmp20 = (cx_ite1 != null());		HX_STACK_VAR(tmp20,"tmp20");
									HX_STACK_LINE(4022)
									bool tmp21 = !(tmp20);		HX_STACK_VAR(tmp21,"tmp21");
									HX_STACK_LINE(4022)
									if ((tmp21)){
										HX_STACK_LINE(4022)
										break;
									}
									HX_STACK_LINE(4023)
									::zpp_nape::phys::ZPP_Interactor i1 = cx_ite1->elt;		HX_STACK_VAR(i1,"i1");
									HX_STACK_LINE(4024)
									{
										HX_STACK_LINE(4025)
										bool tmp22 = (i1->cbSet != cb1);		HX_STACK_VAR(tmp22,"tmp22");
										HX_STACK_LINE(4025)
										bool tmp23;		HX_STACK_VAR(tmp23,"tmp23");
										HX_STACK_LINE(4025)
										if ((tmp22)){
											HX_STACK_LINE(4025)
											tmp23 = (i1->cbSet != cb2);
										}
										else{
											HX_STACK_LINE(4025)
											tmp23 = false;
										}
										HX_STACK_LINE(4025)
										if ((tmp23)){
											HX_STACK_LINE(4026)
											cx_ite1 = cx_ite1->next;
											HX_STACK_LINE(4027)
											continue;
										}
										HX_STACK_LINE(4029)
										{
											HX_STACK_LINE(4030)
											::zpp_nape::util::ZNPList_ZPP_Interactor tmp24 = this->mrca2;		HX_STACK_VAR(tmp24,"tmp24");
											HX_STACK_LINE(4030)
											::zpp_nape::util::ZNPNode_ZPP_Interactor cx_ite2 = tmp24->head;		HX_STACK_VAR(cx_ite2,"cx_ite2");
											HX_STACK_LINE(4031)
											while((true)){
												HX_STACK_LINE(4031)
												bool tmp25 = (cx_ite2 != null());		HX_STACK_VAR(tmp25,"tmp25");
												HX_STACK_LINE(4031)
												bool tmp26 = !(tmp25);		HX_STACK_VAR(tmp26,"tmp26");
												HX_STACK_LINE(4031)
												if ((tmp26)){
													HX_STACK_LINE(4031)
													break;
												}
												HX_STACK_LINE(4032)
												::zpp_nape::phys::ZPP_Interactor i2 = cx_ite2->elt;		HX_STACK_VAR(i2,"i2");
												HX_STACK_LINE(4033)
												{
													HX_STACK_LINE(4034)
													bool tmp27 = (i1->cbSet == cb1);		HX_STACK_VAR(tmp27,"tmp27");
													HX_STACK_LINE(4034)
													bool tmp28 = tmp27;		HX_STACK_VAR(tmp28,"tmp28");
													HX_STACK_LINE(4034)
													bool tmp29;		HX_STACK_VAR(tmp29,"tmp29");
													HX_STACK_LINE(4034)
													if ((tmp28)){
														HX_STACK_LINE(4034)
														tmp29 = (i2->cbSet != cb2);
													}
													else{
														HX_STACK_LINE(4034)
														tmp29 = false;
													}
													HX_STACK_LINE(4034)
													bool tmp30 = !(tmp29);		HX_STACK_VAR(tmp30,"tmp30");
													HX_STACK_LINE(4034)
													bool tmp31;		HX_STACK_VAR(tmp31,"tmp31");
													HX_STACK_LINE(4034)
													if ((tmp30)){
														HX_STACK_LINE(4034)
														bool tmp32 = (i1->cbSet == cb2);		HX_STACK_VAR(tmp32,"tmp32");
														HX_STACK_LINE(4034)
														bool tmp33 = tmp32;		HX_STACK_VAR(tmp33,"tmp33");
														HX_STACK_LINE(4034)
														bool tmp34 = tmp33;		HX_STACK_VAR(tmp34,"tmp34");
														HX_STACK_LINE(4034)
														if ((tmp34)){
															HX_STACK_LINE(4034)
															tmp31 = (i2->cbSet != cb1);
														}
														else{
															HX_STACK_LINE(4034)
															tmp31 = false;
														}
													}
													else{
														HX_STACK_LINE(4034)
														tmp31 = true;
													}
													HX_STACK_LINE(4034)
													if ((tmp31)){
														HX_STACK_LINE(4035)
														cx_ite2 = cx_ite2->next;
														HX_STACK_LINE(4036)
														continue;
													}
													HX_STACK_LINE(4038)
													::zpp_nape::phys::ZPP_Interactor tmp32 = i1;		HX_STACK_VAR(tmp32,"tmp32");
													HX_STACK_LINE(4038)
													::zpp_nape::phys::ZPP_Interactor tmp33 = i2;		HX_STACK_VAR(tmp33,"tmp33");
													HX_STACK_LINE(4038)
													::zpp_nape::space::ZPP_CallbackSet tmp34 = ::zpp_nape::phys::ZPP_Interactor_obj::get(tmp32,tmp33);		HX_STACK_VAR(tmp34,"tmp34");
													HX_STACK_LINE(4038)
													::zpp_nape::space::ZPP_CallbackSet callbackset = tmp34;		HX_STACK_VAR(callbackset,"callbackset");
													HX_STACK_LINE(4039)
													bool tmp35 = (callbackset == null());		HX_STACK_VAR(tmp35,"tmp35");
													HX_STACK_LINE(4039)
													if ((tmp35)){
														HX_STACK_LINE(4040)
														::zpp_nape::phys::ZPP_Interactor tmp36 = i1;		HX_STACK_VAR(tmp36,"tmp36");
														HX_STACK_LINE(4040)
														::zpp_nape::phys::ZPP_Interactor tmp37 = i2;		HX_STACK_VAR(tmp37,"tmp37");
														HX_STACK_LINE(4040)
														::zpp_nape::space::ZPP_CallbackSet tmp38 = ::zpp_nape::space::ZPP_CallbackSet_obj::get(tmp36,tmp37);		HX_STACK_VAR(tmp38,"tmp38");
														HX_STACK_LINE(4040)
														callbackset = tmp38;
														HX_STACK_LINE(4041)
														::zpp_nape::space::ZPP_CallbackSet tmp39 = callbackset;		HX_STACK_VAR(tmp39,"tmp39");
														HX_STACK_LINE(4041)
														this->add_callbackset(tmp39);
													}
													HX_STACK_LINE(4043)
													bool tmp36;		HX_STACK_VAR(tmp36,"tmp36");
													HX_STACK_LINE(4043)
													{
														HX_STACK_LINE(4043)
														bool ret;		HX_STACK_VAR(ret,"ret");
														HX_STACK_LINE(4043)
														{
															HX_STACK_LINE(4043)
															ret = false;
															HX_STACK_LINE(4043)
															{
																HX_STACK_LINE(4043)
																::zpp_nape::util::ZNPNode_ZPP_Arbiter tmp37 = callbackset->arbiters->head;		HX_STACK_VAR(tmp37,"tmp37");
																HX_STACK_LINE(4043)
																::zpp_nape::util::ZNPNode_ZPP_Arbiter cx_ite3 = tmp37;		HX_STACK_VAR(cx_ite3,"cx_ite3");
																HX_STACK_LINE(4043)
																while((true)){
																	HX_STACK_LINE(4043)
																	bool tmp38 = (cx_ite3 != null());		HX_STACK_VAR(tmp38,"tmp38");
																	HX_STACK_LINE(4043)
																	bool tmp39 = !(tmp38);		HX_STACK_VAR(tmp39,"tmp39");
																	HX_STACK_LINE(4043)
																	if ((tmp39)){
																		HX_STACK_LINE(4043)
																		break;
																	}
																	HX_STACK_LINE(4043)
																	::zpp_nape::dynamics::ZPP_Arbiter npite = cx_ite3->elt;		HX_STACK_VAR(npite,"npite");
																	HX_STACK_LINE(4043)
																	{
																		HX_STACK_LINE(4043)
																		bool tmp40 = (npite == xarb);		HX_STACK_VAR(tmp40,"tmp40");
																		HX_STACK_LINE(4043)
																		if ((tmp40)){
																			HX_STACK_LINE(4043)
																			ret = true;
																			HX_STACK_LINE(4043)
																			break;
																		}
																	}
																	HX_STACK_LINE(4043)
																	cx_ite3 = cx_ite3->next;
																}
															}
														}
														HX_STACK_LINE(4043)
														tmp36 = ret;
													}
													HX_STACK_LINE(4043)
													bool tmp37 = !(tmp36);		HX_STACK_VAR(tmp37,"tmp37");
													HX_STACK_LINE(4043)
													bool tmp38;		HX_STACK_VAR(tmp38,"tmp38");
													HX_STACK_LINE(4043)
													if ((tmp37)){
														HX_STACK_LINE(4043)
														{
															HX_STACK_LINE(4043)
															::zpp_nape::util::ZNPList_ZPP_Arbiter _this = callbackset->arbiters;		HX_STACK_VAR(_this,"_this");
															HX_STACK_LINE(4043)
															::zpp_nape::util::ZNPNode_ZPP_Arbiter tmp39;		HX_STACK_VAR(tmp39,"tmp39");
															HX_STACK_LINE(4043)
															{
																HX_STACK_LINE(4043)
																::zpp_nape::util::ZNPNode_ZPP_Arbiter ret;		HX_STACK_VAR(ret,"ret");
																HX_STACK_LINE(4043)
																{
																	HX_STACK_LINE(4043)
																	::zpp_nape::util::ZNPNode_ZPP_Arbiter tmp40 = ::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool;		HX_STACK_VAR(tmp40,"tmp40");
																	HX_STACK_LINE(4043)
																	bool tmp41 = (tmp40 == null());		HX_STACK_VAR(tmp41,"tmp41");
																	HX_STACK_LINE(4043)
																	if ((tmp41)){
																		HX_STACK_LINE(4043)
																		::zpp_nape::util::ZNPNode_ZPP_Arbiter tmp42 = ::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::__new();		HX_STACK_VAR(tmp42,"tmp42");
																		HX_STACK_LINE(4043)
																		ret = tmp42;
																	}
																	else{
																		HX_STACK_LINE(4043)
																		::zpp_nape::util::ZNPNode_ZPP_Arbiter tmp42 = ::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool;		HX_STACK_VAR(tmp42,"tmp42");
																		HX_STACK_LINE(4043)
																		ret = tmp42;
																		HX_STACK_LINE(4043)
																		::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool = ret->next;
																		HX_STACK_LINE(4043)
																		ret->next = null();
																	}
																	HX_STACK_LINE(4043)
																	Dynamic();
																}
																HX_STACK_LINE(4043)
																ret->elt = xarb;
																HX_STACK_LINE(4043)
																tmp39 = ret;
															}
															HX_STACK_LINE(4043)
															::zpp_nape::util::ZNPNode_ZPP_Arbiter temp = tmp39;		HX_STACK_VAR(temp,"temp");
															HX_STACK_LINE(4043)
															temp->next = _this->head;
															HX_STACK_LINE(4043)
															_this->head = temp;
															HX_STACK_LINE(4043)
															_this->modified = true;
															HX_STACK_LINE(4043)
															(_this->length)++;
															HX_STACK_LINE(4043)
															xarb;
														}
														HX_STACK_LINE(4043)
														tmp38 = true;
													}
													else{
														HX_STACK_LINE(4043)
														tmp38 = false;
													}
													HX_STACK_LINE(4043)
													if ((tmp38)){
														HX_STACK_LINE(4044)
														(xarb->present)++;
													}
												}
												HX_STACK_LINE(4047)
												cx_ite2 = cx_ite2->next;
											}
										}
									}
									HX_STACK_LINE(4051)
									cx_ite1 = cx_ite1->next;
								}
							}
						}
						HX_STACK_LINE(4055)
						cx_ite = cx_ite->next;
					}
				}
			}
		}
	}
return null();
}


HX_DEFINE_DYNAMIC_FUNC2(ZPP_Space_obj,freshListenerType,(void))

Void ZPP_Space_obj::freshInteractorType( ::zpp_nape::phys::ZPP_Interactor intx,::zpp_nape::phys::ZPP_Interactor me){
{
		HX_STACK_FRAME("zpp_nape.space.ZPP_Space","freshInteractorType",0x1d97e30b,"zpp_nape.space.ZPP_Space.freshInteractorType","zpp_nape/space/Space.hx",4061,0x2b65ed03)
		HX_STACK_THIS(this)
		HX_STACK_ARG(intx,"intx")
		HX_STACK_ARG(me,"me")
		HX_STACK_LINE(4062)
		bool tmp = (me == null());		HX_STACK_VAR(tmp,"tmp");
		HX_STACK_LINE(4062)
		if ((tmp)){
			HX_STACK_LINE(4062)
			me = intx;
		}
		HX_STACK_LINE(4063)
		bool tmp1 = (intx->icompound != null());		HX_STACK_VAR(tmp1,"tmp1");
		HX_STACK_LINE(4063)
		if ((tmp1)){
			HX_STACK_LINE(4064)
			::zpp_nape::phys::ZPP_Compound comp = intx->icompound;		HX_STACK_VAR(comp,"comp");
			HX_STACK_LINE(4065)
			{
				HX_STACK_LINE(4066)
				::zpp_nape::util::ZNPNode_ZPP_Body tmp2 = comp->bodies->head;		HX_STACK_VAR(tmp2,"tmp2");
				HX_STACK_LINE(4066)
				::zpp_nape::util::ZNPNode_ZPP_Body cx_ite = tmp2;		HX_STACK_VAR(cx_ite,"cx_ite");
				HX_STACK_LINE(4067)
				while((true)){
					HX_STACK_LINE(4067)
					bool tmp3 = (cx_ite != null());		HX_STACK_VAR(tmp3,"tmp3");
					HX_STACK_LINE(4067)
					bool tmp4 = !(tmp3);		HX_STACK_VAR(tmp4,"tmp4");
					HX_STACK_LINE(4067)
					if ((tmp4)){
						HX_STACK_LINE(4067)
						break;
					}
					HX_STACK_LINE(4068)
					::zpp_nape::phys::ZPP_Body body = cx_ite->elt;		HX_STACK_VAR(body,"body");
					HX_STACK_LINE(4069)
					::zpp_nape::phys::ZPP_Body tmp5 = body;		HX_STACK_VAR(tmp5,"tmp5");
					HX_STACK_LINE(4069)
					::zpp_nape::phys::ZPP_Interactor tmp6 = me;		HX_STACK_VAR(tmp6,"tmp6");
					HX_STACK_LINE(4069)
					this->freshInteractorType(tmp5,tmp6);
					HX_STACK_LINE(4070)
					cx_ite = cx_ite->next;
				}
			}
			HX_STACK_LINE(4073)
			{
				HX_STACK_LINE(4074)
				::zpp_nape::util::ZNPNode_ZPP_Compound tmp2 = comp->compounds->head;		HX_STACK_VAR(tmp2,"tmp2");
				HX_STACK_LINE(4074)
				::zpp_nape::util::ZNPNode_ZPP_Compound cx_ite = tmp2;		HX_STACK_VAR(cx_ite,"cx_ite");
				HX_STACK_LINE(4075)
				while((true)){
					HX_STACK_LINE(4075)
					bool tmp3 = (cx_ite != null());		HX_STACK_VAR(tmp3,"tmp3");
					HX_STACK_LINE(4075)
					bool tmp4 = !(tmp3);		HX_STACK_VAR(tmp4,"tmp4");
					HX_STACK_LINE(4075)
					if ((tmp4)){
						HX_STACK_LINE(4075)
						break;
					}
					HX_STACK_LINE(4076)
					::zpp_nape::phys::ZPP_Compound comp1 = cx_ite->elt;		HX_STACK_VAR(comp1,"comp1");
					HX_STACK_LINE(4077)
					::zpp_nape::phys::ZPP_Compound tmp5 = comp1;		HX_STACK_VAR(tmp5,"tmp5");
					HX_STACK_LINE(4077)
					::zpp_nape::phys::ZPP_Interactor tmp6 = me;		HX_STACK_VAR(tmp6,"tmp6");
					HX_STACK_LINE(4077)
					this->freshInteractorType(tmp5,tmp6);
					HX_STACK_LINE(4078)
					cx_ite = cx_ite->next;
				}
			}
		}
		else{
			HX_STACK_LINE(4083)
			bool tmp2 = (intx->ibody != null());		HX_STACK_VAR(tmp2,"tmp2");
			HX_STACK_LINE(4083)
			::zpp_nape::phys::ZPP_Body tmp3;		HX_STACK_VAR(tmp3,"tmp3");
			HX_STACK_LINE(4083)
			if ((tmp2)){
				HX_STACK_LINE(4083)
				tmp3 = intx->ibody;
			}
			else{
				HX_STACK_LINE(4083)
				tmp3 = intx->ishape->body;
			}
			HX_STACK_LINE(4083)
			::zpp_nape::phys::ZPP_Body xbody = tmp3;		HX_STACK_VAR(xbody,"xbody");
			HX_STACK_LINE(4084)
			bool tmp4 = (intx->ishape != null());		HX_STACK_VAR(tmp4,"tmp4");
			HX_STACK_LINE(4084)
			::zpp_nape::shape::ZPP_Shape tmp5;		HX_STACK_VAR(tmp5,"tmp5");
			HX_STACK_LINE(4084)
			if ((tmp4)){
				HX_STACK_LINE(4084)
				tmp5 = intx->ishape;
			}
			else{
				HX_STACK_LINE(4084)
				tmp5 = null();
			}
			HX_STACK_LINE(4084)
			::zpp_nape::shape::ZPP_Shape xshp = tmp5;		HX_STACK_VAR(xshp,"xshp");
			HX_STACK_LINE(4085)
			{
				HX_STACK_LINE(4086)
				::zpp_nape::util::ZNPNode_ZPP_Arbiter tmp6 = xbody->arbiters->head;		HX_STACK_VAR(tmp6,"tmp6");
				HX_STACK_LINE(4086)
				::zpp_nape::util::ZNPNode_ZPP_Arbiter cx_ite = tmp6;		HX_STACK_VAR(cx_ite,"cx_ite");
				HX_STACK_LINE(4087)
				while((true)){
					HX_STACK_LINE(4087)
					bool tmp7 = (cx_ite != null());		HX_STACK_VAR(tmp7,"tmp7");
					HX_STACK_LINE(4087)
					bool tmp8 = !(tmp7);		HX_STACK_VAR(tmp8,"tmp8");
					HX_STACK_LINE(4087)
					if ((tmp8)){
						HX_STACK_LINE(4087)
						break;
					}
					HX_STACK_LINE(4088)
					::zpp_nape::dynamics::ZPP_Arbiter xarb = cx_ite->elt;		HX_STACK_VAR(xarb,"xarb");
					HX_STACK_LINE(4089)
					{
						HX_STACK_LINE(4090)
						bool tmp9 = xarb->presentable;		HX_STACK_VAR(tmp9,"tmp9");
						HX_STACK_LINE(4090)
						bool tmp10 = !(tmp9);		HX_STACK_VAR(tmp10,"tmp10");
						HX_STACK_LINE(4090)
						if ((tmp10)){
							HX_STACK_LINE(4091)
							cx_ite = cx_ite->next;
							HX_STACK_LINE(4092)
							continue;
						}
						HX_STACK_LINE(4094)
						bool tmp11 = (xshp != null());		HX_STACK_VAR(tmp11,"tmp11");
						HX_STACK_LINE(4094)
						bool tmp12;		HX_STACK_VAR(tmp12,"tmp12");
						HX_STACK_LINE(4094)
						if ((tmp11)){
							HX_STACK_LINE(4094)
							bool tmp13 = (xarb->ws1 == xshp);		HX_STACK_VAR(tmp13,"tmp13");
							HX_STACK_LINE(4094)
							bool tmp14 = tmp13;		HX_STACK_VAR(tmp14,"tmp14");
							HX_STACK_LINE(4094)
							bool tmp15 = tmp14;		HX_STACK_VAR(tmp15,"tmp15");
							HX_STACK_LINE(4094)
							bool tmp16 = !(tmp15);		HX_STACK_VAR(tmp16,"tmp16");
							HX_STACK_LINE(4094)
							bool tmp17 = tmp16;		HX_STACK_VAR(tmp17,"tmp17");
							HX_STACK_LINE(4094)
							bool tmp18;		HX_STACK_VAR(tmp18,"tmp18");
							HX_STACK_LINE(4094)
							bool tmp19 = tmp17;		HX_STACK_VAR(tmp19,"tmp19");
							HX_STACK_LINE(4094)
							if ((tmp19)){
								HX_STACK_LINE(4094)
								bool tmp20 = (xarb->ws2 == xshp);		HX_STACK_VAR(tmp20,"tmp20");
								HX_STACK_LINE(4094)
								tmp18 = tmp20;
							}
							else{
								HX_STACK_LINE(4094)
								tmp18 = true;
							}
							HX_STACK_LINE(4094)
							bool tmp20 = tmp18;		HX_STACK_VAR(tmp20,"tmp20");
							HX_STACK_LINE(4094)
							tmp12 = !(tmp20);
						}
						else{
							HX_STACK_LINE(4094)
							tmp12 = false;
						}
						HX_STACK_LINE(4094)
						if ((tmp12)){
							HX_STACK_LINE(4095)
							cx_ite = cx_ite->next;
							HX_STACK_LINE(4096)
							continue;
						}
						HX_STACK_LINE(4098)
						::zpp_nape::shape::ZPP_Shape tmp13 = xarb->ws1;		HX_STACK_VAR(tmp13,"tmp13");
						HX_STACK_LINE(4098)
						::zpp_nape::shape::ZPP_Shape tmp14 = xarb->ws2;		HX_STACK_VAR(tmp14,"tmp14");
						HX_STACK_LINE(4098)
						this->MRCA_chains(tmp13,tmp14);
						HX_STACK_LINE(4099)
						{
							HX_STACK_LINE(4100)
							::zpp_nape::util::ZNPList_ZPP_Interactor tmp15 = this->mrca1;		HX_STACK_VAR(tmp15,"tmp15");
							HX_STACK_LINE(4100)
							::zpp_nape::util::ZNPNode_ZPP_Interactor cx_ite1 = tmp15->head;		HX_STACK_VAR(cx_ite1,"cx_ite1");
							HX_STACK_LINE(4101)
							while((true)){
								HX_STACK_LINE(4101)
								bool tmp16 = (cx_ite1 != null());		HX_STACK_VAR(tmp16,"tmp16");
								HX_STACK_LINE(4101)
								bool tmp17 = !(tmp16);		HX_STACK_VAR(tmp17,"tmp17");
								HX_STACK_LINE(4101)
								if ((tmp17)){
									HX_STACK_LINE(4101)
									break;
								}
								HX_STACK_LINE(4102)
								::zpp_nape::phys::ZPP_Interactor i1 = cx_ite1->elt;		HX_STACK_VAR(i1,"i1");
								HX_STACK_LINE(4104)
								{
									HX_STACK_LINE(4105)
									::zpp_nape::util::ZNPList_ZPP_Interactor tmp18 = this->mrca2;		HX_STACK_VAR(tmp18,"tmp18");
									HX_STACK_LINE(4105)
									::zpp_nape::util::ZNPNode_ZPP_Interactor cx_ite2 = tmp18->head;		HX_STACK_VAR(cx_ite2,"cx_ite2");
									HX_STACK_LINE(4106)
									while((true)){
										HX_STACK_LINE(4106)
										bool tmp19 = (cx_ite2 != null());		HX_STACK_VAR(tmp19,"tmp19");
										HX_STACK_LINE(4106)
										bool tmp20 = !(tmp19);		HX_STACK_VAR(tmp20,"tmp20");
										HX_STACK_LINE(4106)
										if ((tmp20)){
											HX_STACK_LINE(4106)
											break;
										}
										HX_STACK_LINE(4107)
										::zpp_nape::phys::ZPP_Interactor i2 = cx_ite2->elt;		HX_STACK_VAR(i2,"i2");
										HX_STACK_LINE(4108)
										{
											HX_STACK_LINE(4109)
											bool tmp21 = (i1 != me);		HX_STACK_VAR(tmp21,"tmp21");
											HX_STACK_LINE(4109)
											bool tmp22;		HX_STACK_VAR(tmp22,"tmp22");
											HX_STACK_LINE(4109)
											if ((tmp21)){
												HX_STACK_LINE(4109)
												tmp22 = (i2 != me);
											}
											else{
												HX_STACK_LINE(4109)
												tmp22 = false;
											}
											HX_STACK_LINE(4109)
											if ((tmp22)){
												HX_STACK_LINE(4110)
												cx_ite2 = cx_ite2->next;
												HX_STACK_LINE(4111)
												continue;
											}
											HX_STACK_LINE(4113)
											::zpp_nape::callbacks::ZPP_CbSet cb1 = i1->cbSet;		HX_STACK_VAR(cb1,"cb1");
											HX_STACK_LINE(4114)
											::zpp_nape::callbacks::ZPP_CbSet cb2 = i2->cbSet;		HX_STACK_VAR(cb2,"cb2");
											HX_STACK_LINE(4123)
											cb1->validate();
											HX_STACK_LINE(4124)
											cb2->validate();
											HX_STACK_LINE(4125)
											bool tmp23;		HX_STACK_VAR(tmp23,"tmp23");
											HX_STACK_LINE(4125)
											{
												HX_STACK_LINE(4125)
												::zpp_nape::callbacks::ZPP_CbSetPair tmp24;		HX_STACK_VAR(tmp24,"tmp24");
												HX_STACK_LINE(4125)
												{
													HX_STACK_LINE(4125)
													::zpp_nape::callbacks::ZPP_CbSetPair ret = null();		HX_STACK_VAR(ret,"ret");
													HX_STACK_LINE(4125)
													int tmp25 = cb1->cbpairs->length;		HX_STACK_VAR(tmp25,"tmp25");
													HX_STACK_LINE(4125)
													int tmp26 = cb2->cbpairs->length;		HX_STACK_VAR(tmp26,"tmp26");
													HX_STACK_LINE(4125)
													bool tmp27 = (tmp25 < tmp26);		HX_STACK_VAR(tmp27,"tmp27");
													HX_STACK_LINE(4125)
													::zpp_nape::util::ZNPList_ZPP_CbSetPair tmp28;		HX_STACK_VAR(tmp28,"tmp28");
													HX_STACK_LINE(4125)
													if ((tmp27)){
														HX_STACK_LINE(4125)
														tmp28 = cb1->cbpairs;
													}
													else{
														HX_STACK_LINE(4125)
														tmp28 = cb2->cbpairs;
													}
													HX_STACK_LINE(4125)
													::zpp_nape::util::ZNPList_ZPP_CbSetPair pairs = tmp28;		HX_STACK_VAR(pairs,"pairs");
													HX_STACK_LINE(4125)
													{
														HX_STACK_LINE(4125)
														::zpp_nape::util::ZNPNode_ZPP_CbSetPair cx_ite3 = pairs->head;		HX_STACK_VAR(cx_ite3,"cx_ite3");
														HX_STACK_LINE(4125)
														while((true)){
															HX_STACK_LINE(4125)
															bool tmp29 = (cx_ite3 != null());		HX_STACK_VAR(tmp29,"tmp29");
															HX_STACK_LINE(4125)
															bool tmp30 = !(tmp29);		HX_STACK_VAR(tmp30,"tmp30");
															HX_STACK_LINE(4125)
															if ((tmp30)){
																HX_STACK_LINE(4125)
																break;
															}
															HX_STACK_LINE(4125)
															::zpp_nape::callbacks::ZPP_CbSetPair p = cx_ite3->elt;		HX_STACK_VAR(p,"p");
															HX_STACK_LINE(4125)
															{
																HX_STACK_LINE(4125)
																bool tmp31 = (p->a == cb1);		HX_STACK_VAR(tmp31,"tmp31");
																HX_STACK_LINE(4125)
																bool tmp32 = tmp31;		HX_STACK_VAR(tmp32,"tmp32");
																HX_STACK_LINE(4125)
																bool tmp33;		HX_STACK_VAR(tmp33,"tmp33");
																HX_STACK_LINE(4125)
																if ((tmp32)){
																	HX_STACK_LINE(4125)
																	tmp33 = (p->b == cb2);
																}
																else{
																	HX_STACK_LINE(4125)
																	tmp33 = false;
																}
																HX_STACK_LINE(4125)
																bool tmp34 = !(tmp33);		HX_STACK_VAR(tmp34,"tmp34");
																HX_STACK_LINE(4125)
																bool tmp35;		HX_STACK_VAR(tmp35,"tmp35");
																HX_STACK_LINE(4125)
																if ((tmp34)){
																	HX_STACK_LINE(4125)
																	bool tmp36 = (p->a == cb2);		HX_STACK_VAR(tmp36,"tmp36");
																	HX_STACK_LINE(4125)
																	bool tmp37 = tmp36;		HX_STACK_VAR(tmp37,"tmp37");
																	HX_STACK_LINE(4125)
																	bool tmp38 = tmp37;		HX_STACK_VAR(tmp38,"tmp38");
																	HX_STACK_LINE(4125)
																	if ((tmp38)){
																		HX_STACK_LINE(4125)
																		tmp35 = (p->b == cb1);
																	}
																	else{
																		HX_STACK_LINE(4125)
																		tmp35 = false;
																	}
																}
																else{
																	HX_STACK_LINE(4125)
																	tmp35 = true;
																}
																HX_STACK_LINE(4125)
																if ((tmp35)){
																	HX_STACK_LINE(4125)
																	ret = p;
																	HX_STACK_LINE(4125)
																	break;
																}
															}
															HX_STACK_LINE(4125)
															cx_ite3 = cx_ite3->next;
														}
													}
													HX_STACK_LINE(4125)
													bool tmp29 = (ret == null());		HX_STACK_VAR(tmp29,"tmp29");
													HX_STACK_LINE(4125)
													if ((tmp29)){
														HX_STACK_LINE(4125)
														::zpp_nape::callbacks::ZPP_CbSetPair tmp30;		HX_STACK_VAR(tmp30,"tmp30");
														HX_STACK_LINE(4125)
														{
															HX_STACK_LINE(4125)
															::zpp_nape::callbacks::ZPP_CbSetPair ret1;		HX_STACK_VAR(ret1,"ret1");
															HX_STACK_LINE(4125)
															{
																HX_STACK_LINE(4125)
																::zpp_nape::callbacks::ZPP_CbSetPair tmp31 = ::zpp_nape::callbacks::ZPP_CbSetPair_obj::zpp_pool;		HX_STACK_VAR(tmp31,"tmp31");
																HX_STACK_LINE(4125)
																bool tmp32 = (tmp31 == null());		HX_STACK_VAR(tmp32,"tmp32");
																HX_STACK_LINE(4125)
																if ((tmp32)){
																	HX_STACK_LINE(4125)
																	::zpp_nape::callbacks::ZPP_CbSetPair tmp33 = ::zpp_nape::callbacks::ZPP_CbSetPair_obj::__new();		HX_STACK_VAR(tmp33,"tmp33");
																	HX_STACK_LINE(4125)
																	ret1 = tmp33;
																}
																else{
																	HX_STACK_LINE(4125)
																	::zpp_nape::callbacks::ZPP_CbSetPair tmp33 = ::zpp_nape::callbacks::ZPP_CbSetPair_obj::zpp_pool;		HX_STACK_VAR(tmp33,"tmp33");
																	HX_STACK_LINE(4125)
																	ret1 = tmp33;
																	HX_STACK_LINE(4125)
																	::zpp_nape::callbacks::ZPP_CbSetPair_obj::zpp_pool = ret1->next;
																	HX_STACK_LINE(4125)
																	ret1->next = null();
																}
																HX_STACK_LINE(4125)
																ret1->zip_listeners = true;
															}
															HX_STACK_LINE(4125)
															::zpp_nape::callbacks::ZPP_CbSet tmp31 = cb1;		HX_STACK_VAR(tmp31,"tmp31");
															HX_STACK_LINE(4125)
															::zpp_nape::callbacks::ZPP_CbSet tmp32 = cb2;		HX_STACK_VAR(tmp32,"tmp32");
															HX_STACK_LINE(4125)
															bool tmp33 = ::zpp_nape::callbacks::ZPP_CbSet_obj::setlt(tmp31,tmp32);		HX_STACK_VAR(tmp33,"tmp33");
															HX_STACK_LINE(4125)
															if ((tmp33)){
																HX_STACK_LINE(4125)
																ret1->a = cb1;
																HX_STACK_LINE(4125)
																ret1->b = cb2;
															}
															else{
																HX_STACK_LINE(4125)
																ret1->a = cb2;
																HX_STACK_LINE(4125)
																ret1->b = cb1;
															}
															HX_STACK_LINE(4125)
															tmp30 = ret1;
														}
														HX_STACK_LINE(4125)
														ret = tmp30;
														HX_STACK_LINE(4125)
														::zpp_nape::callbacks::ZPP_CbSetPair tmp31 = ret;		HX_STACK_VAR(tmp31,"tmp31");
														HX_STACK_LINE(4125)
														cb1->cbpairs->add(tmp31);
														HX_STACK_LINE(4125)
														bool tmp32 = (cb2 != cb1);		HX_STACK_VAR(tmp32,"tmp32");
														HX_STACK_LINE(4125)
														if ((tmp32)){
															HX_STACK_LINE(4125)
															::zpp_nape::callbacks::ZPP_CbSetPair tmp33 = ret;		HX_STACK_VAR(tmp33,"tmp33");
															HX_STACK_LINE(4125)
															cb2->cbpairs->add(tmp33);
														}
													}
													HX_STACK_LINE(4125)
													{
														HX_STACK_LINE(4125)
														bool tmp30 = ret->zip_listeners;		HX_STACK_VAR(tmp30,"tmp30");
														HX_STACK_LINE(4125)
														if ((tmp30)){
															HX_STACK_LINE(4125)
															ret->zip_listeners = false;
															HX_STACK_LINE(4125)
															ret->__validate();
														}
													}
													HX_STACK_LINE(4125)
													tmp24 = ret;
												}
												HX_STACK_LINE(4125)
												::zpp_nape::callbacks::ZPP_CbSetPair _this = tmp24;		HX_STACK_VAR(_this,"_this");
												HX_STACK_LINE(4125)
												::zpp_nape::util::ZNPNode_ZPP_InteractionListener tmp25 = _this->listeners->head;		HX_STACK_VAR(tmp25,"tmp25");
												HX_STACK_LINE(4125)
												tmp23 = (tmp25 == null());
											}
											HX_STACK_LINE(4125)
											bool tmp24 = !(tmp23);		HX_STACK_VAR(tmp24,"tmp24");
											HX_STACK_LINE(4125)
											if ((tmp24)){
												HX_STACK_LINE(4126)
												::zpp_nape::phys::ZPP_Interactor tmp25 = i1;		HX_STACK_VAR(tmp25,"tmp25");
												HX_STACK_LINE(4126)
												::zpp_nape::phys::ZPP_Interactor tmp26 = i2;		HX_STACK_VAR(tmp26,"tmp26");
												HX_STACK_LINE(4126)
												::zpp_nape::space::ZPP_CallbackSet tmp27 = ::zpp_nape::phys::ZPP_Interactor_obj::get(tmp25,tmp26);		HX_STACK_VAR(tmp27,"tmp27");
												HX_STACK_LINE(4126)
												::zpp_nape::space::ZPP_CallbackSet callbackset = tmp27;		HX_STACK_VAR(callbackset,"callbackset");
												HX_STACK_LINE(4127)
												bool tmp28 = (callbackset == null());		HX_STACK_VAR(tmp28,"tmp28");
												HX_STACK_LINE(4127)
												if ((tmp28)){
													HX_STACK_LINE(4128)
													::zpp_nape::phys::ZPP_Interactor tmp29 = i1;		HX_STACK_VAR(tmp29,"tmp29");
													HX_STACK_LINE(4128)
													::zpp_nape::phys::ZPP_Interactor tmp30 = i2;		HX_STACK_VAR(tmp30,"tmp30");
													HX_STACK_LINE(4128)
													::zpp_nape::space::ZPP_CallbackSet tmp31 = ::zpp_nape::space::ZPP_CallbackSet_obj::get(tmp29,tmp30);		HX_STACK_VAR(tmp31,"tmp31");
													HX_STACK_LINE(4128)
													callbackset = tmp31;
													HX_STACK_LINE(4129)
													::zpp_nape::space::ZPP_CallbackSet tmp32 = callbackset;		HX_STACK_VAR(tmp32,"tmp32");
													HX_STACK_LINE(4129)
													this->add_callbackset(tmp32);
												}
												HX_STACK_LINE(4131)
												bool tmp29;		HX_STACK_VAR(tmp29,"tmp29");
												HX_STACK_LINE(4131)
												{
													HX_STACK_LINE(4131)
													bool ret;		HX_STACK_VAR(ret,"ret");
													HX_STACK_LINE(4131)
													{
														HX_STACK_LINE(4131)
														ret = false;
														HX_STACK_LINE(4131)
														{
															HX_STACK_LINE(4131)
															::zpp_nape::util::ZNPNode_ZPP_Arbiter tmp30 = callbackset->arbiters->head;		HX_STACK_VAR(tmp30,"tmp30");
															HX_STACK_LINE(4131)
															::zpp_nape::util::ZNPNode_ZPP_Arbiter cx_ite3 = tmp30;		HX_STACK_VAR(cx_ite3,"cx_ite3");
															HX_STACK_LINE(4131)
															while((true)){
																HX_STACK_LINE(4131)
																bool tmp31 = (cx_ite3 != null());		HX_STACK_VAR(tmp31,"tmp31");
																HX_STACK_LINE(4131)
																bool tmp32 = !(tmp31);		HX_STACK_VAR(tmp32,"tmp32");
																HX_STACK_LINE(4131)
																if ((tmp32)){
																	HX_STACK_LINE(4131)
																	break;
																}
																HX_STACK_LINE(4131)
																::zpp_nape::dynamics::ZPP_Arbiter npite = cx_ite3->elt;		HX_STACK_VAR(npite,"npite");
																HX_STACK_LINE(4131)
																{
																	HX_STACK_LINE(4131)
																	bool tmp33 = (npite == xarb);		HX_STACK_VAR(tmp33,"tmp33");
																	HX_STACK_LINE(4131)
																	if ((tmp33)){
																		HX_STACK_LINE(4131)
																		ret = true;
																		HX_STACK_LINE(4131)
																		break;
																	}
																}
																HX_STACK_LINE(4131)
																cx_ite3 = cx_ite3->next;
															}
														}
													}
													HX_STACK_LINE(4131)
													tmp29 = ret;
												}
												HX_STACK_LINE(4131)
												bool tmp30 = !(tmp29);		HX_STACK_VAR(tmp30,"tmp30");
												HX_STACK_LINE(4131)
												bool tmp31;		HX_STACK_VAR(tmp31,"tmp31");
												HX_STACK_LINE(4131)
												if ((tmp30)){
													HX_STACK_LINE(4131)
													{
														HX_STACK_LINE(4131)
														::zpp_nape::util::ZNPList_ZPP_Arbiter _this = callbackset->arbiters;		HX_STACK_VAR(_this,"_this");
														HX_STACK_LINE(4131)
														::zpp_nape::util::ZNPNode_ZPP_Arbiter tmp32;		HX_STACK_VAR(tmp32,"tmp32");
														HX_STACK_LINE(4131)
														{
															HX_STACK_LINE(4131)
															::zpp_nape::util::ZNPNode_ZPP_Arbiter ret;		HX_STACK_VAR(ret,"ret");
															HX_STACK_LINE(4131)
															{
																HX_STACK_LINE(4131)
																::zpp_nape::util::ZNPNode_ZPP_Arbiter tmp33 = ::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool;		HX_STACK_VAR(tmp33,"tmp33");
																HX_STACK_LINE(4131)
																bool tmp34 = (tmp33 == null());		HX_STACK_VAR(tmp34,"tmp34");
																HX_STACK_LINE(4131)
																if ((tmp34)){
																	HX_STACK_LINE(4131)
																	::zpp_nape::util::ZNPNode_ZPP_Arbiter tmp35 = ::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::__new();		HX_STACK_VAR(tmp35,"tmp35");
																	HX_STACK_LINE(4131)
																	ret = tmp35;
																}
																else{
																	HX_STACK_LINE(4131)
																	::zpp_nape::util::ZNPNode_ZPP_Arbiter tmp35 = ::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool;		HX_STACK_VAR(tmp35,"tmp35");
																	HX_STACK_LINE(4131)
																	ret = tmp35;
																	HX_STACK_LINE(4131)
																	::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool = ret->next;
																	HX_STACK_LINE(4131)
																	ret->next = null();
																}
																HX_STACK_LINE(4131)
																Dynamic();
															}
															HX_STACK_LINE(4131)
															ret->elt = xarb;
															HX_STACK_LINE(4131)
															tmp32 = ret;
														}
														HX_STACK_LINE(4131)
														::zpp_nape::util::ZNPNode_ZPP_Arbiter temp = tmp32;		HX_STACK_VAR(temp,"temp");
														HX_STACK_LINE(4131)
														temp->next = _this->head;
														HX_STACK_LINE(4131)
														_this->head = temp;
														HX_STACK_LINE(4131)
														_this->modified = true;
														HX_STACK_LINE(4131)
														(_this->length)++;
														HX_STACK_LINE(4131)
														xarb;
													}
													HX_STACK_LINE(4131)
													tmp31 = true;
												}
												else{
													HX_STACK_LINE(4131)
													tmp31 = false;
												}
												HX_STACK_LINE(4131)
												if ((tmp31)){
													HX_STACK_LINE(4132)
													(xarb->present)++;
												}
											}
										}
										HX_STACK_LINE(4136)
										cx_ite2 = cx_ite2->next;
									}
								}
								HX_STACK_LINE(4140)
								cx_ite1 = cx_ite1->next;
							}
						}
					}
					HX_STACK_LINE(4144)
					cx_ite = cx_ite->next;
				}
			}
		}
	}
return null();
}


HX_DEFINE_DYNAMIC_FUNC2(ZPP_Space_obj,freshInteractorType,(void))

Void ZPP_Space_obj::wakeCompound( ::zpp_nape::phys::ZPP_Compound x){
{
		HX_STACK_FRAME("zpp_nape.space.ZPP_Space","wakeCompound",0x17729c25,"zpp_nape.space.ZPP_Space.wakeCompound","zpp_nape/space/Space.hx",4149,0x2b65ed03)
		HX_STACK_THIS(this)
		HX_STACK_ARG(x,"x")
		HX_STACK_LINE(4150)
		{
			HX_STACK_LINE(4151)
			::zpp_nape::util::ZNPNode_ZPP_Body tmp = x->bodies->head;		HX_STACK_VAR(tmp,"tmp");
			HX_STACK_LINE(4151)
			::zpp_nape::util::ZNPNode_ZPP_Body cx_ite = tmp;		HX_STACK_VAR(cx_ite,"cx_ite");
			HX_STACK_LINE(4152)
			while((true)){
				HX_STACK_LINE(4152)
				bool tmp1 = (cx_ite != null());		HX_STACK_VAR(tmp1,"tmp1");
				HX_STACK_LINE(4152)
				bool tmp2 = !(tmp1);		HX_STACK_VAR(tmp2,"tmp2");
				HX_STACK_LINE(4152)
				if ((tmp2)){
					HX_STACK_LINE(4152)
					break;
				}
				HX_STACK_LINE(4153)
				::zpp_nape::phys::ZPP_Body y = cx_ite->elt;		HX_STACK_VAR(y,"y");
				HX_STACK_LINE(4154)
				{
					HX_STACK_LINE(4155)
					::zpp_nape::phys::ZPP_Body o = y;		HX_STACK_VAR(o,"o");
					HX_STACK_LINE(4164)
					bool tmp3 = o->world;		HX_STACK_VAR(tmp3,"tmp3");
					HX_STACK_LINE(4164)
					bool tmp4 = !(tmp3);		HX_STACK_VAR(tmp4,"tmp4");
					HX_STACK_LINE(4164)
					if ((tmp4)){
						HX_STACK_LINE(4173)
						int tmp5 = this->stamp;		HX_STACK_VAR(tmp5,"tmp5");
						HX_STACK_LINE(4173)
						bool tmp6 = this->midstep;		HX_STACK_VAR(tmp6,"tmp6");
						HX_STACK_LINE(4173)
						int tmp7;		HX_STACK_VAR(tmp7,"tmp7");
						HX_STACK_LINE(4173)
						if ((tmp6)){
							HX_STACK_LINE(4173)
							tmp7 = (int)0;
						}
						else{
							HX_STACK_LINE(4173)
							tmp7 = (int)1;
						}
						HX_STACK_LINE(4173)
						int tmp8 = (tmp5 + tmp7);		HX_STACK_VAR(tmp8,"tmp8");
						HX_STACK_LINE(4173)
						o->component->waket = tmp8;
						HX_STACK_LINE(4174)
						int tmp9 = o->type;		HX_STACK_VAR(tmp9,"tmp9");
						HX_STACK_LINE(4174)
						int tmp10 = ::zpp_nape::util::ZPP_Flags_obj::id_BodyType_KINEMATIC;		HX_STACK_VAR(tmp10,"tmp10");
						HX_STACK_LINE(4174)
						bool tmp11 = (tmp9 == tmp10);		HX_STACK_VAR(tmp11,"tmp11");
						HX_STACK_LINE(4174)
						if ((tmp11)){
							HX_STACK_LINE(4174)
							o->kinematicDelaySleep = true;
						}
						HX_STACK_LINE(4175)
						bool tmp12 = o->component->sleeping;		HX_STACK_VAR(tmp12,"tmp12");
						HX_STACK_LINE(4175)
						if ((tmp12)){
							HX_STACK_LINE(4176)
							::zpp_nape::phys::ZPP_Body tmp13 = o;		HX_STACK_VAR(tmp13,"tmp13");
							HX_STACK_LINE(4176)
							this->really_wake(tmp13,false);
						}
					}
				}
				HX_STACK_LINE(4180)
				cx_ite = cx_ite->next;
			}
		}
		HX_STACK_LINE(4183)
		{
			HX_STACK_LINE(4184)
			::zpp_nape::util::ZNPNode_ZPP_Constraint tmp = x->constraints->head;		HX_STACK_VAR(tmp,"tmp");
			HX_STACK_LINE(4184)
			::zpp_nape::util::ZNPNode_ZPP_Constraint cx_ite = tmp;		HX_STACK_VAR(cx_ite,"cx_ite");
			HX_STACK_LINE(4185)
			while((true)){
				HX_STACK_LINE(4185)
				bool tmp1 = (cx_ite != null());		HX_STACK_VAR(tmp1,"tmp1");
				HX_STACK_LINE(4185)
				bool tmp2 = !(tmp1);		HX_STACK_VAR(tmp2,"tmp2");
				HX_STACK_LINE(4185)
				if ((tmp2)){
					HX_STACK_LINE(4185)
					break;
				}
				HX_STACK_LINE(4186)
				::zpp_nape::constraint::ZPP_Constraint i = cx_ite->elt;		HX_STACK_VAR(i,"i");
				HX_STACK_LINE(4187)
				::zpp_nape::constraint::ZPP_Constraint tmp3 = i;		HX_STACK_VAR(tmp3,"tmp3");
				HX_STACK_LINE(4187)
				this->wake_constraint(tmp3,null());
				HX_STACK_LINE(4188)
				cx_ite = cx_ite->next;
			}
		}
		HX_STACK_LINE(4191)
		{
			HX_STACK_LINE(4192)
			::zpp_nape::util::ZNPNode_ZPP_Compound tmp = x->compounds->head;		HX_STACK_VAR(tmp,"tmp");
			HX_STACK_LINE(4192)
			::zpp_nape::util::ZNPNode_ZPP_Compound cx_ite = tmp;		HX_STACK_VAR(cx_ite,"cx_ite");
			HX_STACK_LINE(4193)
			while((true)){
				HX_STACK_LINE(4193)
				bool tmp1 = (cx_ite != null());		HX_STACK_VAR(tmp1,"tmp1");
				HX_STACK_LINE(4193)
				bool tmp2 = !(tmp1);		HX_STACK_VAR(tmp2,"tmp2");
				HX_STACK_LINE(4193)
				if ((tmp2)){
					HX_STACK_LINE(4193)
					break;
				}
				HX_STACK_LINE(4194)
				::zpp_nape::phys::ZPP_Compound i = cx_ite->elt;		HX_STACK_VAR(i,"i");
				HX_STACK_LINE(4195)
				::zpp_nape::phys::ZPP_Compound tmp3 = i;		HX_STACK_VAR(tmp3,"tmp3");
				HX_STACK_LINE(4195)
				this->wakeCompound(tmp3);
				HX_STACK_LINE(4196)
				cx_ite = cx_ite->next;
			}
		}
	}
return null();
}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Space_obj,wakeCompound,(void))

Void ZPP_Space_obj::wakeIsland( ::zpp_nape::space::ZPP_Island i){
{
		HX_STACK_FRAME("zpp_nape.space.ZPP_Space","wakeIsland",0xe72ff50f,"zpp_nape.space.ZPP_Space.wakeIsland","zpp_nape/space/Space.hx",4200,0x2b65ed03)
		HX_STACK_THIS(this)
		HX_STACK_ARG(i,"i")
		HX_STACK_LINE(4209)
		while((true)){
			HX_STACK_LINE(4209)
			::zpp_nape::util::ZNPNode_ZPP_Component tmp = i->comps->head;		HX_STACK_VAR(tmp,"tmp");
			HX_STACK_LINE(4209)
			bool tmp1 = (tmp == null());		HX_STACK_VAR(tmp1,"tmp1");
			HX_STACK_LINE(4209)
			bool tmp2 = !(tmp1);		HX_STACK_VAR(tmp2,"tmp2");
			HX_STACK_LINE(4209)
			bool tmp3 = !(tmp2);		HX_STACK_VAR(tmp3,"tmp3");
			HX_STACK_LINE(4209)
			if ((tmp3)){
				HX_STACK_LINE(4209)
				break;
			}
			HX_STACK_LINE(4210)
			::zpp_nape::space::ZPP_Component tmp4 = i->comps->pop_unsafe();		HX_STACK_VAR(tmp4,"tmp4");
			HX_STACK_LINE(4210)
			::zpp_nape::space::ZPP_Component c = tmp4;		HX_STACK_VAR(c,"c");
			HX_STACK_LINE(4219)
			int tmp5 = this->stamp;		HX_STACK_VAR(tmp5,"tmp5");
			HX_STACK_LINE(4219)
			bool tmp6 = this->midstep;		HX_STACK_VAR(tmp6,"tmp6");
			HX_STACK_LINE(4219)
			int tmp7;		HX_STACK_VAR(tmp7,"tmp7");
			HX_STACK_LINE(4219)
			if ((tmp6)){
				HX_STACK_LINE(4219)
				tmp7 = (int)0;
			}
			else{
				HX_STACK_LINE(4219)
				tmp7 = (int)1;
			}
			HX_STACK_LINE(4219)
			int tmp8 = (tmp5 + tmp7);		HX_STACK_VAR(tmp8,"tmp8");
			HX_STACK_LINE(4219)
			c->waket = tmp8;
			HX_STACK_LINE(4220)
			bool tmp9 = c->isBody;		HX_STACK_VAR(tmp9,"tmp9");
			HX_STACK_LINE(4220)
			if ((tmp9)){
				HX_STACK_LINE(4221)
				::zpp_nape::phys::ZPP_Body b = c->body;		HX_STACK_VAR(b,"b");
				HX_STACK_LINE(4238)
				::zpp_nape::util::ZNPList_ZPP_Body tmp10 = this->live;		HX_STACK_VAR(tmp10,"tmp10");
				HX_STACK_LINE(4238)
				::zpp_nape::phys::ZPP_Body tmp11 = b;		HX_STACK_VAR(tmp11,"tmp11");
				HX_STACK_LINE(4238)
				tmp10->add(tmp11);
				HX_STACK_LINE(4239)
				{
					HX_STACK_LINE(4240)
					::zpp_nape::util::ZNPNode_ZPP_Arbiter tmp12 = b->arbiters->head;		HX_STACK_VAR(tmp12,"tmp12");
					HX_STACK_LINE(4240)
					::zpp_nape::util::ZNPNode_ZPP_Arbiter cx_ite = tmp12;		HX_STACK_VAR(cx_ite,"cx_ite");
					HX_STACK_LINE(4241)
					while((true)){
						HX_STACK_LINE(4241)
						bool tmp13 = (cx_ite != null());		HX_STACK_VAR(tmp13,"tmp13");
						HX_STACK_LINE(4241)
						bool tmp14 = !(tmp13);		HX_STACK_VAR(tmp14,"tmp14");
						HX_STACK_LINE(4241)
						if ((tmp14)){
							HX_STACK_LINE(4241)
							break;
						}
						HX_STACK_LINE(4242)
						::zpp_nape::dynamics::ZPP_Arbiter arb = cx_ite->elt;		HX_STACK_VAR(arb,"arb");
						HX_STACK_LINE(4243)
						{
							HX_STACK_LINE(4244)
							bool tmp15 = arb->sleeping;		HX_STACK_VAR(tmp15,"tmp15");
							HX_STACK_LINE(4244)
							if ((tmp15)){
								HX_STACK_LINE(4245)
								arb->sleeping = false;
								HX_STACK_LINE(4246)
								int tmp16 = this->stamp;		HX_STACK_VAR(tmp16,"tmp16");
								HX_STACK_LINE(4246)
								int tmp17 = arb->sleep_stamp;		HX_STACK_VAR(tmp17,"tmp17");
								HX_STACK_LINE(4246)
								int tmp18 = (tmp16 - tmp17);		HX_STACK_VAR(tmp18,"tmp18");
								HX_STACK_LINE(4246)
								hx::AddEq(arb->up_stamp,tmp18);
								HX_STACK_LINE(4247)
								int tmp19 = arb->type;		HX_STACK_VAR(tmp19,"tmp19");
								HX_STACK_LINE(4247)
								int tmp20 = ::zpp_nape::dynamics::ZPP_Arbiter_obj::COL;		HX_STACK_VAR(tmp20,"tmp20");
								HX_STACK_LINE(4247)
								bool tmp21 = (tmp19 == tmp20);		HX_STACK_VAR(tmp21,"tmp21");
								HX_STACK_LINE(4247)
								if ((tmp21)){
									HX_STACK_LINE(4248)
									::zpp_nape::dynamics::ZPP_ColArbiter carb = arb->colarb;		HX_STACK_VAR(carb,"carb");
									HX_STACK_LINE(4249)
									bool tmp22 = carb->stat;		HX_STACK_VAR(tmp22,"tmp22");
									HX_STACK_LINE(4249)
									if ((tmp22)){
										HX_STACK_LINE(4249)
										::zpp_nape::util::ZNPList_ZPP_ColArbiter tmp23 = this->c_arbiters_true;		HX_STACK_VAR(tmp23,"tmp23");
										HX_STACK_LINE(4249)
										::zpp_nape::util::ZNPList_ZPP_ColArbiter _this = tmp23;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(4249)
										::zpp_nape::util::ZNPNode_ZPP_ColArbiter tmp24;		HX_STACK_VAR(tmp24,"tmp24");
										HX_STACK_LINE(4249)
										{
											HX_STACK_LINE(4249)
											::zpp_nape::util::ZNPNode_ZPP_ColArbiter ret;		HX_STACK_VAR(ret,"ret");
											HX_STACK_LINE(4249)
											{
												HX_STACK_LINE(4249)
												::zpp_nape::util::ZNPNode_ZPP_ColArbiter tmp25 = ::zpp_nape::util::ZNPNode_ZPP_ColArbiter_obj::zpp_pool;		HX_STACK_VAR(tmp25,"tmp25");
												HX_STACK_LINE(4249)
												bool tmp26 = (tmp25 == null());		HX_STACK_VAR(tmp26,"tmp26");
												HX_STACK_LINE(4249)
												if ((tmp26)){
													HX_STACK_LINE(4249)
													::zpp_nape::util::ZNPNode_ZPP_ColArbiter tmp27 = ::zpp_nape::util::ZNPNode_ZPP_ColArbiter_obj::__new();		HX_STACK_VAR(tmp27,"tmp27");
													HX_STACK_LINE(4249)
													ret = tmp27;
												}
												else{
													HX_STACK_LINE(4249)
													::zpp_nape::util::ZNPNode_ZPP_ColArbiter tmp27 = ::zpp_nape::util::ZNPNode_ZPP_ColArbiter_obj::zpp_pool;		HX_STACK_VAR(tmp27,"tmp27");
													HX_STACK_LINE(4249)
													ret = tmp27;
													HX_STACK_LINE(4249)
													::zpp_nape::util::ZNPNode_ZPP_ColArbiter_obj::zpp_pool = ret->next;
													HX_STACK_LINE(4249)
													ret->next = null();
												}
												HX_STACK_LINE(4249)
												Dynamic();
											}
											HX_STACK_LINE(4249)
											ret->elt = carb;
											HX_STACK_LINE(4249)
											tmp24 = ret;
										}
										HX_STACK_LINE(4249)
										::zpp_nape::util::ZNPNode_ZPP_ColArbiter temp = tmp24;		HX_STACK_VAR(temp,"temp");
										HX_STACK_LINE(4249)
										temp->next = _this->head;
										HX_STACK_LINE(4249)
										_this->head = temp;
										HX_STACK_LINE(4249)
										_this->modified = true;
										HX_STACK_LINE(4249)
										(_this->length)++;
										HX_STACK_LINE(4249)
										carb;
									}
									else{
										HX_STACK_LINE(4250)
										::zpp_nape::util::ZNPList_ZPP_ColArbiter tmp23 = this->c_arbiters_false;		HX_STACK_VAR(tmp23,"tmp23");
										HX_STACK_LINE(4250)
										::zpp_nape::util::ZNPList_ZPP_ColArbiter _this = tmp23;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(4250)
										::zpp_nape::util::ZNPNode_ZPP_ColArbiter tmp24;		HX_STACK_VAR(tmp24,"tmp24");
										HX_STACK_LINE(4250)
										{
											HX_STACK_LINE(4250)
											::zpp_nape::util::ZNPNode_ZPP_ColArbiter ret;		HX_STACK_VAR(ret,"ret");
											HX_STACK_LINE(4250)
											{
												HX_STACK_LINE(4250)
												::zpp_nape::util::ZNPNode_ZPP_ColArbiter tmp25 = ::zpp_nape::util::ZNPNode_ZPP_ColArbiter_obj::zpp_pool;		HX_STACK_VAR(tmp25,"tmp25");
												HX_STACK_LINE(4250)
												bool tmp26 = (tmp25 == null());		HX_STACK_VAR(tmp26,"tmp26");
												HX_STACK_LINE(4250)
												if ((tmp26)){
													HX_STACK_LINE(4250)
													::zpp_nape::util::ZNPNode_ZPP_ColArbiter tmp27 = ::zpp_nape::util::ZNPNode_ZPP_ColArbiter_obj::__new();		HX_STACK_VAR(tmp27,"tmp27");
													HX_STACK_LINE(4250)
													ret = tmp27;
												}
												else{
													HX_STACK_LINE(4250)
													::zpp_nape::util::ZNPNode_ZPP_ColArbiter tmp27 = ::zpp_nape::util::ZNPNode_ZPP_ColArbiter_obj::zpp_pool;		HX_STACK_VAR(tmp27,"tmp27");
													HX_STACK_LINE(4250)
													ret = tmp27;
													HX_STACK_LINE(4250)
													::zpp_nape::util::ZNPNode_ZPP_ColArbiter_obj::zpp_pool = ret->next;
													HX_STACK_LINE(4250)
													ret->next = null();
												}
												HX_STACK_LINE(4250)
												Dynamic();
											}
											HX_STACK_LINE(4250)
											ret->elt = carb;
											HX_STACK_LINE(4250)
											tmp24 = ret;
										}
										HX_STACK_LINE(4250)
										::zpp_nape::util::ZNPNode_ZPP_ColArbiter temp = tmp24;		HX_STACK_VAR(temp,"temp");
										HX_STACK_LINE(4250)
										temp->next = _this->head;
										HX_STACK_LINE(4250)
										_this->head = temp;
										HX_STACK_LINE(4250)
										_this->modified = true;
										HX_STACK_LINE(4250)
										(_this->length)++;
										HX_STACK_LINE(4250)
										carb;
									}
								}
								else{
									HX_STACK_LINE(4252)
									int tmp22 = arb->type;		HX_STACK_VAR(tmp22,"tmp22");
									HX_STACK_LINE(4252)
									int tmp23 = ::zpp_nape::dynamics::ZPP_Arbiter_obj::FLUID;		HX_STACK_VAR(tmp23,"tmp23");
									HX_STACK_LINE(4252)
									bool tmp24 = (tmp22 == tmp23);		HX_STACK_VAR(tmp24,"tmp24");
									HX_STACK_LINE(4252)
									if ((tmp24)){
										HX_STACK_LINE(4252)
										::zpp_nape::util::ZNPList_ZPP_FluidArbiter tmp25 = this->f_arbiters;		HX_STACK_VAR(tmp25,"tmp25");
										HX_STACK_LINE(4252)
										::zpp_nape::util::ZNPList_ZPP_FluidArbiter _this = tmp25;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(4252)
										::zpp_nape::dynamics::ZPP_FluidArbiter o = arb->fluidarb;		HX_STACK_VAR(o,"o");
										HX_STACK_LINE(4252)
										::zpp_nape::util::ZNPNode_ZPP_FluidArbiter tmp26;		HX_STACK_VAR(tmp26,"tmp26");
										HX_STACK_LINE(4252)
										{
											HX_STACK_LINE(4252)
											::zpp_nape::util::ZNPNode_ZPP_FluidArbiter ret;		HX_STACK_VAR(ret,"ret");
											HX_STACK_LINE(4252)
											{
												HX_STACK_LINE(4252)
												::zpp_nape::util::ZNPNode_ZPP_FluidArbiter tmp27 = ::zpp_nape::util::ZNPNode_ZPP_FluidArbiter_obj::zpp_pool;		HX_STACK_VAR(tmp27,"tmp27");
												HX_STACK_LINE(4252)
												bool tmp28 = (tmp27 == null());		HX_STACK_VAR(tmp28,"tmp28");
												HX_STACK_LINE(4252)
												if ((tmp28)){
													HX_STACK_LINE(4252)
													::zpp_nape::util::ZNPNode_ZPP_FluidArbiter tmp29 = ::zpp_nape::util::ZNPNode_ZPP_FluidArbiter_obj::__new();		HX_STACK_VAR(tmp29,"tmp29");
													HX_STACK_LINE(4252)
													ret = tmp29;
												}
												else{
													HX_STACK_LINE(4252)
													::zpp_nape::util::ZNPNode_ZPP_FluidArbiter tmp29 = ::zpp_nape::util::ZNPNode_ZPP_FluidArbiter_obj::zpp_pool;		HX_STACK_VAR(tmp29,"tmp29");
													HX_STACK_LINE(4252)
													ret = tmp29;
													HX_STACK_LINE(4252)
													::zpp_nape::util::ZNPNode_ZPP_FluidArbiter_obj::zpp_pool = ret->next;
													HX_STACK_LINE(4252)
													ret->next = null();
												}
												HX_STACK_LINE(4252)
												Dynamic();
											}
											HX_STACK_LINE(4252)
											ret->elt = o;
											HX_STACK_LINE(4252)
											tmp26 = ret;
										}
										HX_STACK_LINE(4252)
										::zpp_nape::util::ZNPNode_ZPP_FluidArbiter temp = tmp26;		HX_STACK_VAR(temp,"temp");
										HX_STACK_LINE(4252)
										temp->next = _this->head;
										HX_STACK_LINE(4252)
										_this->head = temp;
										HX_STACK_LINE(4252)
										_this->modified = true;
										HX_STACK_LINE(4252)
										(_this->length)++;
										HX_STACK_LINE(4252)
										o;
									}
									else{
										HX_STACK_LINE(4253)
										::zpp_nape::util::ZNPList_ZPP_SensorArbiter tmp25 = this->s_arbiters;		HX_STACK_VAR(tmp25,"tmp25");
										HX_STACK_LINE(4253)
										::zpp_nape::util::ZNPList_ZPP_SensorArbiter _this = tmp25;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(4253)
										::zpp_nape::dynamics::ZPP_SensorArbiter o = arb->sensorarb;		HX_STACK_VAR(o,"o");
										HX_STACK_LINE(4253)
										::zpp_nape::util::ZNPNode_ZPP_SensorArbiter tmp26;		HX_STACK_VAR(tmp26,"tmp26");
										HX_STACK_LINE(4253)
										{
											HX_STACK_LINE(4253)
											::zpp_nape::util::ZNPNode_ZPP_SensorArbiter ret;		HX_STACK_VAR(ret,"ret");
											HX_STACK_LINE(4253)
											{
												HX_STACK_LINE(4253)
												::zpp_nape::util::ZNPNode_ZPP_SensorArbiter tmp27 = ::zpp_nape::util::ZNPNode_ZPP_SensorArbiter_obj::zpp_pool;		HX_STACK_VAR(tmp27,"tmp27");
												HX_STACK_LINE(4253)
												bool tmp28 = (tmp27 == null());		HX_STACK_VAR(tmp28,"tmp28");
												HX_STACK_LINE(4253)
												if ((tmp28)){
													HX_STACK_LINE(4253)
													::zpp_nape::util::ZNPNode_ZPP_SensorArbiter tmp29 = ::zpp_nape::util::ZNPNode_ZPP_SensorArbiter_obj::__new();		HX_STACK_VAR(tmp29,"tmp29");
													HX_STACK_LINE(4253)
													ret = tmp29;
												}
												else{
													HX_STACK_LINE(4253)
													::zpp_nape::util::ZNPNode_ZPP_SensorArbiter tmp29 = ::zpp_nape::util::ZNPNode_ZPP_SensorArbiter_obj::zpp_pool;		HX_STACK_VAR(tmp29,"tmp29");
													HX_STACK_LINE(4253)
													ret = tmp29;
													HX_STACK_LINE(4253)
													::zpp_nape::util::ZNPNode_ZPP_SensorArbiter_obj::zpp_pool = ret->next;
													HX_STACK_LINE(4253)
													ret->next = null();
												}
												HX_STACK_LINE(4253)
												Dynamic();
											}
											HX_STACK_LINE(4253)
											ret->elt = o;
											HX_STACK_LINE(4253)
											tmp26 = ret;
										}
										HX_STACK_LINE(4253)
										::zpp_nape::util::ZNPNode_ZPP_SensorArbiter temp = tmp26;		HX_STACK_VAR(temp,"temp");
										HX_STACK_LINE(4253)
										temp->next = _this->head;
										HX_STACK_LINE(4253)
										_this->head = temp;
										HX_STACK_LINE(4253)
										_this->modified = true;
										HX_STACK_LINE(4253)
										(_this->length)++;
										HX_STACK_LINE(4253)
										o;
									}
								}
							}
						}
						HX_STACK_LINE(4256)
						cx_ite = cx_ite->next;
					}
				}
				HX_STACK_LINE(4259)
				::zpp_nape::phys::ZPP_Body tmp12 = b;		HX_STACK_VAR(tmp12,"tmp12");
				HX_STACK_LINE(4259)
				this->bodyCbWake(tmp12);
				HX_STACK_LINE(4260)
				{
					HX_STACK_LINE(4260)
					c->sleeping = false;
					HX_STACK_LINE(4260)
					c->island = null();
					HX_STACK_LINE(4260)
					c->parent = c;
					HX_STACK_LINE(4260)
					c->rank = (int)0;
				}
				HX_STACK_LINE(4261)
				int tmp13 = b->type;		HX_STACK_VAR(tmp13,"tmp13");
				HX_STACK_LINE(4261)
				int tmp14 = ::zpp_nape::util::ZPP_Flags_obj::id_BodyType_STATIC;		HX_STACK_VAR(tmp14,"tmp14");
				HX_STACK_LINE(4261)
				bool tmp15 = (tmp13 == tmp14);		HX_STACK_VAR(tmp15,"tmp15");
				HX_STACK_LINE(4261)
				bool tmp16 = !(tmp15);		HX_STACK_VAR(tmp16,"tmp16");
				HX_STACK_LINE(4261)
				if ((tmp16)){
					HX_STACK_LINE(4262)
					::zpp_nape::util::ZNPNode_ZPP_Shape tmp17 = b->shapes->head;		HX_STACK_VAR(tmp17,"tmp17");
					HX_STACK_LINE(4262)
					::zpp_nape::util::ZNPNode_ZPP_Shape cx_ite = tmp17;		HX_STACK_VAR(cx_ite,"cx_ite");
					HX_STACK_LINE(4263)
					while((true)){
						HX_STACK_LINE(4263)
						bool tmp18 = (cx_ite != null());		HX_STACK_VAR(tmp18,"tmp18");
						HX_STACK_LINE(4263)
						bool tmp19 = !(tmp18);		HX_STACK_VAR(tmp19,"tmp19");
						HX_STACK_LINE(4263)
						if ((tmp19)){
							HX_STACK_LINE(4263)
							break;
						}
						HX_STACK_LINE(4264)
						::zpp_nape::shape::ZPP_Shape shape = cx_ite->elt;		HX_STACK_VAR(shape,"shape");
						HX_STACK_LINE(4265)
						bool tmp20 = (shape->node != null());		HX_STACK_VAR(tmp20,"tmp20");
						HX_STACK_LINE(4265)
						if ((tmp20)){
							HX_STACK_LINE(4265)
							::zpp_nape::space::ZPP_Broadphase tmp21 = this->bphase;		HX_STACK_VAR(tmp21,"tmp21");
							HX_STACK_LINE(4265)
							::zpp_nape::shape::ZPP_Shape tmp22 = shape;		HX_STACK_VAR(tmp22,"tmp22");
							HX_STACK_LINE(4265)
							tmp21->sync(tmp22);
						}
						HX_STACK_LINE(4266)
						cx_ite = cx_ite->next;
					}
				}
			}
			else{
				HX_STACK_LINE(4271)
				::zpp_nape::constraint::ZPP_Constraint con = c->constraint;		HX_STACK_VAR(con,"con");
				HX_STACK_LINE(4280)
				{
					HX_STACK_LINE(4280)
					::zpp_nape::util::ZNPList_ZPP_Constraint tmp10 = this->live_constraints;		HX_STACK_VAR(tmp10,"tmp10");
					HX_STACK_LINE(4280)
					::zpp_nape::util::ZNPList_ZPP_Constraint _this = tmp10;		HX_STACK_VAR(_this,"_this");
					HX_STACK_LINE(4280)
					::zpp_nape::util::ZNPNode_ZPP_Constraint tmp11;		HX_STACK_VAR(tmp11,"tmp11");
					HX_STACK_LINE(4280)
					{
						HX_STACK_LINE(4280)
						::zpp_nape::util::ZNPNode_ZPP_Constraint ret;		HX_STACK_VAR(ret,"ret");
						HX_STACK_LINE(4280)
						{
							HX_STACK_LINE(4280)
							::zpp_nape::util::ZNPNode_ZPP_Constraint tmp12 = ::zpp_nape::util::ZNPNode_ZPP_Constraint_obj::zpp_pool;		HX_STACK_VAR(tmp12,"tmp12");
							HX_STACK_LINE(4280)
							bool tmp13 = (tmp12 == null());		HX_STACK_VAR(tmp13,"tmp13");
							HX_STACK_LINE(4280)
							if ((tmp13)){
								HX_STACK_LINE(4280)
								::zpp_nape::util::ZNPNode_ZPP_Constraint tmp14 = ::zpp_nape::util::ZNPNode_ZPP_Constraint_obj::__new();		HX_STACK_VAR(tmp14,"tmp14");
								HX_STACK_LINE(4280)
								ret = tmp14;
							}
							else{
								HX_STACK_LINE(4280)
								::zpp_nape::util::ZNPNode_ZPP_Constraint tmp14 = ::zpp_nape::util::ZNPNode_ZPP_Constraint_obj::zpp_pool;		HX_STACK_VAR(tmp14,"tmp14");
								HX_STACK_LINE(4280)
								ret = tmp14;
								HX_STACK_LINE(4280)
								::zpp_nape::util::ZNPNode_ZPP_Constraint_obj::zpp_pool = ret->next;
								HX_STACK_LINE(4280)
								ret->next = null();
							}
							HX_STACK_LINE(4280)
							Dynamic();
						}
						HX_STACK_LINE(4280)
						ret->elt = con;
						HX_STACK_LINE(4280)
						tmp11 = ret;
					}
					HX_STACK_LINE(4280)
					::zpp_nape::util::ZNPNode_ZPP_Constraint temp = tmp11;		HX_STACK_VAR(temp,"temp");
					HX_STACK_LINE(4280)
					temp->next = _this->head;
					HX_STACK_LINE(4280)
					_this->head = temp;
					HX_STACK_LINE(4280)
					_this->modified = true;
					HX_STACK_LINE(4280)
					(_this->length)++;
					HX_STACK_LINE(4280)
					con;
				}
				HX_STACK_LINE(4281)
				::zpp_nape::constraint::ZPP_Constraint tmp10 = con;		HX_STACK_VAR(tmp10,"tmp10");
				HX_STACK_LINE(4281)
				this->constraintCbWake(tmp10);
				HX_STACK_LINE(4282)
				{
					HX_STACK_LINE(4282)
					c->sleeping = false;
					HX_STACK_LINE(4282)
					c->island = null();
					HX_STACK_LINE(4282)
					c->parent = c;
					HX_STACK_LINE(4282)
					c->rank = (int)0;
				}
			}
		}
		HX_STACK_LINE(4285)
		{
			HX_STACK_LINE(4286)
			::zpp_nape::space::ZPP_Island o = i;		HX_STACK_VAR(o,"o");
			HX_STACK_LINE(4296)
			::zpp_nape::space::ZPP_Island tmp = ::zpp_nape::space::ZPP_Island_obj::zpp_pool;		HX_STACK_VAR(tmp,"tmp");
			HX_STACK_LINE(4296)
			o->next = tmp;
			HX_STACK_LINE(4297)
			::zpp_nape::space::ZPP_Island_obj::zpp_pool = o;
		}
	}
return null();
}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Space_obj,wakeIsland,(void))

Void ZPP_Space_obj::non_inlined_wake( ::zpp_nape::phys::ZPP_Body o,hx::Null< bool >  __o_fst){
bool fst = __o_fst.Default(false);
	HX_STACK_FRAME("zpp_nape.space.ZPP_Space","non_inlined_wake",0xabd7e560,"zpp_nape.space.ZPP_Space.non_inlined_wake","zpp_nape/space/Space.hx",4304,0x2b65ed03)
	HX_STACK_THIS(this)
	HX_STACK_ARG(o,"o")
	HX_STACK_ARG(fst,"fst")
{
		HX_STACK_LINE(4305)
		::zpp_nape::phys::ZPP_Body o1 = o;		HX_STACK_VAR(o1,"o1");
		HX_STACK_LINE(4314)
		bool tmp = o1->world;		HX_STACK_VAR(tmp,"tmp");
		HX_STACK_LINE(4314)
		bool tmp1 = !(tmp);		HX_STACK_VAR(tmp1,"tmp1");
		HX_STACK_LINE(4314)
		if ((tmp1)){
			HX_STACK_LINE(4323)
			int tmp2 = this->stamp;		HX_STACK_VAR(tmp2,"tmp2");
			HX_STACK_LINE(4323)
			bool tmp3 = this->midstep;		HX_STACK_VAR(tmp3,"tmp3");
			HX_STACK_LINE(4323)
			int tmp4;		HX_STACK_VAR(tmp4,"tmp4");
			HX_STACK_LINE(4323)
			if ((tmp3)){
				HX_STACK_LINE(4323)
				tmp4 = (int)0;
			}
			else{
				HX_STACK_LINE(4323)
				tmp4 = (int)1;
			}
			HX_STACK_LINE(4323)
			int tmp5 = (tmp2 + tmp4);		HX_STACK_VAR(tmp5,"tmp5");
			HX_STACK_LINE(4323)
			o1->component->waket = tmp5;
			HX_STACK_LINE(4324)
			int tmp6 = o1->type;		HX_STACK_VAR(tmp6,"tmp6");
			HX_STACK_LINE(4324)
			int tmp7 = ::zpp_nape::util::ZPP_Flags_obj::id_BodyType_KINEMATIC;		HX_STACK_VAR(tmp7,"tmp7");
			HX_STACK_LINE(4324)
			bool tmp8 = (tmp6 == tmp7);		HX_STACK_VAR(tmp8,"tmp8");
			HX_STACK_LINE(4324)
			if ((tmp8)){
				HX_STACK_LINE(4324)
				o1->kinematicDelaySleep = true;
			}
			HX_STACK_LINE(4325)
			bool tmp9 = o1->component->sleeping;		HX_STACK_VAR(tmp9,"tmp9");
			HX_STACK_LINE(4325)
			if ((tmp9)){
				HX_STACK_LINE(4326)
				::zpp_nape::phys::ZPP_Body tmp10 = o1;		HX_STACK_VAR(tmp10,"tmp10");
				HX_STACK_LINE(4326)
				bool tmp11 = fst;		HX_STACK_VAR(tmp11,"tmp11");
				HX_STACK_LINE(4326)
				this->really_wake(tmp10,tmp11);
			}
		}
	}
return null();
}


HX_DEFINE_DYNAMIC_FUNC2(ZPP_Space_obj,non_inlined_wake,(void))

Void ZPP_Space_obj::really_wake( ::zpp_nape::phys::ZPP_Body o,hx::Null< bool >  __o_fst){
bool fst = __o_fst.Default(false);
	HX_STACK_FRAME("zpp_nape.space.ZPP_Space","really_wake",0xda69fb02,"zpp_nape.space.ZPP_Space.really_wake","zpp_nape/space/Space.hx",4331,0x2b65ed03)
	HX_STACK_THIS(this)
	HX_STACK_ARG(o,"o")
	HX_STACK_ARG(fst,"fst")
{
		HX_STACK_LINE(4332)
		::zpp_nape::space::ZPP_Island tmp = o->component->island;		HX_STACK_VAR(tmp,"tmp");
		HX_STACK_LINE(4332)
		bool tmp1 = (tmp == null());		HX_STACK_VAR(tmp1,"tmp1");
		HX_STACK_LINE(4332)
		if ((tmp1)){
			HX_STACK_LINE(4333)
			o->component->sleeping = false;
			HX_STACK_LINE(4334)
			int tmp2 = o->type;		HX_STACK_VAR(tmp2,"tmp2");
			HX_STACK_LINE(4334)
			int tmp3 = ::zpp_nape::util::ZPP_Flags_obj::id_BodyType_KINEMATIC;		HX_STACK_VAR(tmp3,"tmp3");
			HX_STACK_LINE(4334)
			bool tmp4 = (tmp2 == tmp3);		HX_STACK_VAR(tmp4,"tmp4");
			HX_STACK_LINE(4334)
			bool tmp5 = !(tmp4);		HX_STACK_VAR(tmp5,"tmp5");
			HX_STACK_LINE(4334)
			bool tmp6;		HX_STACK_VAR(tmp6,"tmp6");
			HX_STACK_LINE(4334)
			if ((tmp5)){
				HX_STACK_LINE(4334)
				int tmp7 = o->type;		HX_STACK_VAR(tmp7,"tmp7");
				HX_STACK_LINE(4334)
				int tmp8 = ::zpp_nape::util::ZPP_Flags_obj::id_BodyType_STATIC;		HX_STACK_VAR(tmp8,"tmp8");
				HX_STACK_LINE(4334)
				int tmp9 = tmp8;		HX_STACK_VAR(tmp9,"tmp9");
				HX_STACK_LINE(4334)
				tmp6 = (tmp7 == tmp9);
			}
			else{
				HX_STACK_LINE(4334)
				tmp6 = true;
			}
			HX_STACK_LINE(4334)
			if ((tmp6)){
				HX_STACK_LINE(4334)
				::zpp_nape::util::ZNPList_ZPP_Body tmp7 = this->staticsleep;		HX_STACK_VAR(tmp7,"tmp7");
				HX_STACK_LINE(4334)
				::zpp_nape::util::ZNPList_ZPP_Body _this = tmp7;		HX_STACK_VAR(_this,"_this");
				HX_STACK_LINE(4334)
				::zpp_nape::util::ZNPNode_ZPP_Body tmp8;		HX_STACK_VAR(tmp8,"tmp8");
				HX_STACK_LINE(4334)
				{
					HX_STACK_LINE(4334)
					::zpp_nape::util::ZNPNode_ZPP_Body ret;		HX_STACK_VAR(ret,"ret");
					HX_STACK_LINE(4334)
					{
						HX_STACK_LINE(4334)
						::zpp_nape::util::ZNPNode_ZPP_Body tmp9 = ::zpp_nape::util::ZNPNode_ZPP_Body_obj::zpp_pool;		HX_STACK_VAR(tmp9,"tmp9");
						HX_STACK_LINE(4334)
						bool tmp10 = (tmp9 == null());		HX_STACK_VAR(tmp10,"tmp10");
						HX_STACK_LINE(4334)
						if ((tmp10)){
							HX_STACK_LINE(4334)
							::zpp_nape::util::ZNPNode_ZPP_Body tmp11 = ::zpp_nape::util::ZNPNode_ZPP_Body_obj::__new();		HX_STACK_VAR(tmp11,"tmp11");
							HX_STACK_LINE(4334)
							ret = tmp11;
						}
						else{
							HX_STACK_LINE(4334)
							::zpp_nape::util::ZNPNode_ZPP_Body tmp11 = ::zpp_nape::util::ZNPNode_ZPP_Body_obj::zpp_pool;		HX_STACK_VAR(tmp11,"tmp11");
							HX_STACK_LINE(4334)
							ret = tmp11;
							HX_STACK_LINE(4334)
							::zpp_nape::util::ZNPNode_ZPP_Body_obj::zpp_pool = ret->next;
							HX_STACK_LINE(4334)
							ret->next = null();
						}
						HX_STACK_LINE(4334)
						Dynamic();
					}
					HX_STACK_LINE(4334)
					ret->elt = o;
					HX_STACK_LINE(4334)
					tmp8 = ret;
				}
				HX_STACK_LINE(4334)
				::zpp_nape::util::ZNPNode_ZPP_Body temp = tmp8;		HX_STACK_VAR(temp,"temp");
				HX_STACK_LINE(4334)
				temp->next = _this->head;
				HX_STACK_LINE(4334)
				_this->head = temp;
				HX_STACK_LINE(4334)
				_this->modified = true;
				HX_STACK_LINE(4334)
				(_this->length)++;
				HX_STACK_LINE(4334)
				o;
			}
			else{
				HX_STACK_LINE(4335)
				::zpp_nape::util::ZNPList_ZPP_Body tmp7 = this->live;		HX_STACK_VAR(tmp7,"tmp7");
				HX_STACK_LINE(4335)
				::zpp_nape::util::ZNPList_ZPP_Body _this = tmp7;		HX_STACK_VAR(_this,"_this");
				HX_STACK_LINE(4335)
				::zpp_nape::util::ZNPNode_ZPP_Body tmp8;		HX_STACK_VAR(tmp8,"tmp8");
				HX_STACK_LINE(4335)
				{
					HX_STACK_LINE(4335)
					::zpp_nape::util::ZNPNode_ZPP_Body ret;		HX_STACK_VAR(ret,"ret");
					HX_STACK_LINE(4335)
					{
						HX_STACK_LINE(4335)
						::zpp_nape::util::ZNPNode_ZPP_Body tmp9 = ::zpp_nape::util::ZNPNode_ZPP_Body_obj::zpp_pool;		HX_STACK_VAR(tmp9,"tmp9");
						HX_STACK_LINE(4335)
						bool tmp10 = (tmp9 == null());		HX_STACK_VAR(tmp10,"tmp10");
						HX_STACK_LINE(4335)
						if ((tmp10)){
							HX_STACK_LINE(4335)
							::zpp_nape::util::ZNPNode_ZPP_Body tmp11 = ::zpp_nape::util::ZNPNode_ZPP_Body_obj::__new();		HX_STACK_VAR(tmp11,"tmp11");
							HX_STACK_LINE(4335)
							ret = tmp11;
						}
						else{
							HX_STACK_LINE(4335)
							::zpp_nape::util::ZNPNode_ZPP_Body tmp11 = ::zpp_nape::util::ZNPNode_ZPP_Body_obj::zpp_pool;		HX_STACK_VAR(tmp11,"tmp11");
							HX_STACK_LINE(4335)
							ret = tmp11;
							HX_STACK_LINE(4335)
							::zpp_nape::util::ZNPNode_ZPP_Body_obj::zpp_pool = ret->next;
							HX_STACK_LINE(4335)
							ret->next = null();
						}
						HX_STACK_LINE(4335)
						Dynamic();
					}
					HX_STACK_LINE(4335)
					ret->elt = o;
					HX_STACK_LINE(4335)
					tmp8 = ret;
				}
				HX_STACK_LINE(4335)
				::zpp_nape::util::ZNPNode_ZPP_Body temp = tmp8;		HX_STACK_VAR(temp,"temp");
				HX_STACK_LINE(4335)
				temp->next = _this->head;
				HX_STACK_LINE(4335)
				_this->head = temp;
				HX_STACK_LINE(4335)
				_this->modified = true;
				HX_STACK_LINE(4335)
				(_this->length)++;
				HX_STACK_LINE(4335)
				o;
			}
			HX_STACK_LINE(4336)
			{
				HX_STACK_LINE(4337)
				::zpp_nape::util::ZNPNode_ZPP_Constraint tmp7 = o->constraints->head;		HX_STACK_VAR(tmp7,"tmp7");
				HX_STACK_LINE(4337)
				::zpp_nape::util::ZNPNode_ZPP_Constraint cx_ite = tmp7;		HX_STACK_VAR(cx_ite,"cx_ite");
				HX_STACK_LINE(4338)
				while((true)){
					HX_STACK_LINE(4338)
					bool tmp8 = (cx_ite != null());		HX_STACK_VAR(tmp8,"tmp8");
					HX_STACK_LINE(4338)
					bool tmp9 = !(tmp8);		HX_STACK_VAR(tmp9,"tmp9");
					HX_STACK_LINE(4338)
					if ((tmp9)){
						HX_STACK_LINE(4338)
						break;
					}
					HX_STACK_LINE(4339)
					::zpp_nape::constraint::ZPP_Constraint con = cx_ite->elt;		HX_STACK_VAR(con,"con");
					HX_STACK_LINE(4340)
					bool tmp10 = (con->space == hx::ObjectPtr<OBJ_>(this));		HX_STACK_VAR(tmp10,"tmp10");
					HX_STACK_LINE(4340)
					if ((tmp10)){
						HX_STACK_LINE(4340)
						::zpp_nape::constraint::ZPP_Constraint tmp11 = con;		HX_STACK_VAR(tmp11,"tmp11");
						HX_STACK_LINE(4340)
						this->wake_constraint(tmp11,null());
					}
					HX_STACK_LINE(4341)
					cx_ite = cx_ite->next;
				}
			}
			HX_STACK_LINE(4344)
			{
				HX_STACK_LINE(4345)
				::zpp_nape::util::ZNPNode_ZPP_Arbiter tmp7 = o->arbiters->head;		HX_STACK_VAR(tmp7,"tmp7");
				HX_STACK_LINE(4345)
				::zpp_nape::util::ZNPNode_ZPP_Arbiter cx_ite = tmp7;		HX_STACK_VAR(cx_ite,"cx_ite");
				HX_STACK_LINE(4346)
				while((true)){
					HX_STACK_LINE(4346)
					bool tmp8 = (cx_ite != null());		HX_STACK_VAR(tmp8,"tmp8");
					HX_STACK_LINE(4346)
					bool tmp9 = !(tmp8);		HX_STACK_VAR(tmp9,"tmp9");
					HX_STACK_LINE(4346)
					if ((tmp9)){
						HX_STACK_LINE(4346)
						break;
					}
					HX_STACK_LINE(4347)
					::zpp_nape::dynamics::ZPP_Arbiter arb = cx_ite->elt;		HX_STACK_VAR(arb,"arb");
					HX_STACK_LINE(4348)
					{
						HX_STACK_LINE(4349)
						bool tmp10 = arb->sleeping;		HX_STACK_VAR(tmp10,"tmp10");
						HX_STACK_LINE(4349)
						if ((tmp10)){
							HX_STACK_LINE(4350)
							arb->sleeping = false;
							HX_STACK_LINE(4351)
							int tmp11 = this->stamp;		HX_STACK_VAR(tmp11,"tmp11");
							HX_STACK_LINE(4351)
							bool tmp12 = this->midstep;		HX_STACK_VAR(tmp12,"tmp12");
							HX_STACK_LINE(4351)
							int tmp13;		HX_STACK_VAR(tmp13,"tmp13");
							HX_STACK_LINE(4351)
							if ((tmp12)){
								HX_STACK_LINE(4351)
								tmp13 = (int)0;
							}
							else{
								HX_STACK_LINE(4351)
								tmp13 = (int)1;
							}
							HX_STACK_LINE(4351)
							int tmp14 = (tmp11 + tmp13);		HX_STACK_VAR(tmp14,"tmp14");
							HX_STACK_LINE(4351)
							int tmp15 = arb->sleep_stamp;		HX_STACK_VAR(tmp15,"tmp15");
							HX_STACK_LINE(4351)
							int tmp16 = (tmp14 - tmp15);		HX_STACK_VAR(tmp16,"tmp16");
							HX_STACK_LINE(4351)
							hx::AddEq(arb->up_stamp,tmp16);
							HX_STACK_LINE(4352)
							int tmp17 = arb->type;		HX_STACK_VAR(tmp17,"tmp17");
							HX_STACK_LINE(4352)
							int tmp18 = ::zpp_nape::dynamics::ZPP_Arbiter_obj::COL;		HX_STACK_VAR(tmp18,"tmp18");
							HX_STACK_LINE(4352)
							bool tmp19 = (tmp17 == tmp18);		HX_STACK_VAR(tmp19,"tmp19");
							HX_STACK_LINE(4352)
							if ((tmp19)){
								HX_STACK_LINE(4353)
								::zpp_nape::dynamics::ZPP_ColArbiter carb = arb->colarb;		HX_STACK_VAR(carb,"carb");
								HX_STACK_LINE(4354)
								bool tmp20 = carb->stat;		HX_STACK_VAR(tmp20,"tmp20");
								HX_STACK_LINE(4354)
								if ((tmp20)){
									HX_STACK_LINE(4354)
									::zpp_nape::util::ZNPList_ZPP_ColArbiter tmp21 = this->c_arbiters_true;		HX_STACK_VAR(tmp21,"tmp21");
									HX_STACK_LINE(4354)
									::zpp_nape::util::ZNPList_ZPP_ColArbiter _this = tmp21;		HX_STACK_VAR(_this,"_this");
									HX_STACK_LINE(4354)
									::zpp_nape::util::ZNPNode_ZPP_ColArbiter tmp22;		HX_STACK_VAR(tmp22,"tmp22");
									HX_STACK_LINE(4354)
									{
										HX_STACK_LINE(4354)
										::zpp_nape::util::ZNPNode_ZPP_ColArbiter ret;		HX_STACK_VAR(ret,"ret");
										HX_STACK_LINE(4354)
										{
											HX_STACK_LINE(4354)
											::zpp_nape::util::ZNPNode_ZPP_ColArbiter tmp23 = ::zpp_nape::util::ZNPNode_ZPP_ColArbiter_obj::zpp_pool;		HX_STACK_VAR(tmp23,"tmp23");
											HX_STACK_LINE(4354)
											bool tmp24 = (tmp23 == null());		HX_STACK_VAR(tmp24,"tmp24");
											HX_STACK_LINE(4354)
											if ((tmp24)){
												HX_STACK_LINE(4354)
												::zpp_nape::util::ZNPNode_ZPP_ColArbiter tmp25 = ::zpp_nape::util::ZNPNode_ZPP_ColArbiter_obj::__new();		HX_STACK_VAR(tmp25,"tmp25");
												HX_STACK_LINE(4354)
												ret = tmp25;
											}
											else{
												HX_STACK_LINE(4354)
												::zpp_nape::util::ZNPNode_ZPP_ColArbiter tmp25 = ::zpp_nape::util::ZNPNode_ZPP_ColArbiter_obj::zpp_pool;		HX_STACK_VAR(tmp25,"tmp25");
												HX_STACK_LINE(4354)
												ret = tmp25;
												HX_STACK_LINE(4354)
												::zpp_nape::util::ZNPNode_ZPP_ColArbiter_obj::zpp_pool = ret->next;
												HX_STACK_LINE(4354)
												ret->next = null();
											}
											HX_STACK_LINE(4354)
											Dynamic();
										}
										HX_STACK_LINE(4354)
										ret->elt = carb;
										HX_STACK_LINE(4354)
										tmp22 = ret;
									}
									HX_STACK_LINE(4354)
									::zpp_nape::util::ZNPNode_ZPP_ColArbiter temp = tmp22;		HX_STACK_VAR(temp,"temp");
									HX_STACK_LINE(4354)
									temp->next = _this->head;
									HX_STACK_LINE(4354)
									_this->head = temp;
									HX_STACK_LINE(4354)
									_this->modified = true;
									HX_STACK_LINE(4354)
									(_this->length)++;
									HX_STACK_LINE(4354)
									carb;
								}
								else{
									HX_STACK_LINE(4355)
									::zpp_nape::util::ZNPList_ZPP_ColArbiter tmp21 = this->c_arbiters_false;		HX_STACK_VAR(tmp21,"tmp21");
									HX_STACK_LINE(4355)
									::zpp_nape::util::ZNPList_ZPP_ColArbiter _this = tmp21;		HX_STACK_VAR(_this,"_this");
									HX_STACK_LINE(4355)
									::zpp_nape::util::ZNPNode_ZPP_ColArbiter tmp22;		HX_STACK_VAR(tmp22,"tmp22");
									HX_STACK_LINE(4355)
									{
										HX_STACK_LINE(4355)
										::zpp_nape::util::ZNPNode_ZPP_ColArbiter ret;		HX_STACK_VAR(ret,"ret");
										HX_STACK_LINE(4355)
										{
											HX_STACK_LINE(4355)
											::zpp_nape::util::ZNPNode_ZPP_ColArbiter tmp23 = ::zpp_nape::util::ZNPNode_ZPP_ColArbiter_obj::zpp_pool;		HX_STACK_VAR(tmp23,"tmp23");
											HX_STACK_LINE(4355)
											bool tmp24 = (tmp23 == null());		HX_STACK_VAR(tmp24,"tmp24");
											HX_STACK_LINE(4355)
											if ((tmp24)){
												HX_STACK_LINE(4355)
												::zpp_nape::util::ZNPNode_ZPP_ColArbiter tmp25 = ::zpp_nape::util::ZNPNode_ZPP_ColArbiter_obj::__new();		HX_STACK_VAR(tmp25,"tmp25");
												HX_STACK_LINE(4355)
												ret = tmp25;
											}
											else{
												HX_STACK_LINE(4355)
												::zpp_nape::util::ZNPNode_ZPP_ColArbiter tmp25 = ::zpp_nape::util::ZNPNode_ZPP_ColArbiter_obj::zpp_pool;		HX_STACK_VAR(tmp25,"tmp25");
												HX_STACK_LINE(4355)
												ret = tmp25;
												HX_STACK_LINE(4355)
												::zpp_nape::util::ZNPNode_ZPP_ColArbiter_obj::zpp_pool = ret->next;
												HX_STACK_LINE(4355)
												ret->next = null();
											}
											HX_STACK_LINE(4355)
											Dynamic();
										}
										HX_STACK_LINE(4355)
										ret->elt = carb;
										HX_STACK_LINE(4355)
										tmp22 = ret;
									}
									HX_STACK_LINE(4355)
									::zpp_nape::util::ZNPNode_ZPP_ColArbiter temp = tmp22;		HX_STACK_VAR(temp,"temp");
									HX_STACK_LINE(4355)
									temp->next = _this->head;
									HX_STACK_LINE(4355)
									_this->head = temp;
									HX_STACK_LINE(4355)
									_this->modified = true;
									HX_STACK_LINE(4355)
									(_this->length)++;
									HX_STACK_LINE(4355)
									carb;
								}
							}
							else{
								HX_STACK_LINE(4357)
								int tmp20 = arb->type;		HX_STACK_VAR(tmp20,"tmp20");
								HX_STACK_LINE(4357)
								int tmp21 = ::zpp_nape::dynamics::ZPP_Arbiter_obj::FLUID;		HX_STACK_VAR(tmp21,"tmp21");
								HX_STACK_LINE(4357)
								bool tmp22 = (tmp20 == tmp21);		HX_STACK_VAR(tmp22,"tmp22");
								HX_STACK_LINE(4357)
								if ((tmp22)){
									HX_STACK_LINE(4357)
									::zpp_nape::util::ZNPList_ZPP_FluidArbiter tmp23 = this->f_arbiters;		HX_STACK_VAR(tmp23,"tmp23");
									HX_STACK_LINE(4357)
									::zpp_nape::util::ZNPList_ZPP_FluidArbiter _this = tmp23;		HX_STACK_VAR(_this,"_this");
									HX_STACK_LINE(4357)
									::zpp_nape::dynamics::ZPP_FluidArbiter o1 = arb->fluidarb;		HX_STACK_VAR(o1,"o1");
									HX_STACK_LINE(4357)
									::zpp_nape::util::ZNPNode_ZPP_FluidArbiter tmp24;		HX_STACK_VAR(tmp24,"tmp24");
									HX_STACK_LINE(4357)
									{
										HX_STACK_LINE(4357)
										::zpp_nape::util::ZNPNode_ZPP_FluidArbiter ret;		HX_STACK_VAR(ret,"ret");
										HX_STACK_LINE(4357)
										{
											HX_STACK_LINE(4357)
											::zpp_nape::util::ZNPNode_ZPP_FluidArbiter tmp25 = ::zpp_nape::util::ZNPNode_ZPP_FluidArbiter_obj::zpp_pool;		HX_STACK_VAR(tmp25,"tmp25");
											HX_STACK_LINE(4357)
											bool tmp26 = (tmp25 == null());		HX_STACK_VAR(tmp26,"tmp26");
											HX_STACK_LINE(4357)
											if ((tmp26)){
												HX_STACK_LINE(4357)
												::zpp_nape::util::ZNPNode_ZPP_FluidArbiter tmp27 = ::zpp_nape::util::ZNPNode_ZPP_FluidArbiter_obj::__new();		HX_STACK_VAR(tmp27,"tmp27");
												HX_STACK_LINE(4357)
												ret = tmp27;
											}
											else{
												HX_STACK_LINE(4357)
												::zpp_nape::util::ZNPNode_ZPP_FluidArbiter tmp27 = ::zpp_nape::util::ZNPNode_ZPP_FluidArbiter_obj::zpp_pool;		HX_STACK_VAR(tmp27,"tmp27");
												HX_STACK_LINE(4357)
												ret = tmp27;
												HX_STACK_LINE(4357)
												::zpp_nape::util::ZNPNode_ZPP_FluidArbiter_obj::zpp_pool = ret->next;
												HX_STACK_LINE(4357)
												ret->next = null();
											}
											HX_STACK_LINE(4357)
											Dynamic();
										}
										HX_STACK_LINE(4357)
										ret->elt = o1;
										HX_STACK_LINE(4357)
										tmp24 = ret;
									}
									HX_STACK_LINE(4357)
									::zpp_nape::util::ZNPNode_ZPP_FluidArbiter temp = tmp24;		HX_STACK_VAR(temp,"temp");
									HX_STACK_LINE(4357)
									temp->next = _this->head;
									HX_STACK_LINE(4357)
									_this->head = temp;
									HX_STACK_LINE(4357)
									_this->modified = true;
									HX_STACK_LINE(4357)
									(_this->length)++;
									HX_STACK_LINE(4357)
									o1;
								}
								else{
									HX_STACK_LINE(4358)
									::zpp_nape::util::ZNPList_ZPP_SensorArbiter tmp23 = this->s_arbiters;		HX_STACK_VAR(tmp23,"tmp23");
									HX_STACK_LINE(4358)
									::zpp_nape::util::ZNPList_ZPP_SensorArbiter _this = tmp23;		HX_STACK_VAR(_this,"_this");
									HX_STACK_LINE(4358)
									::zpp_nape::dynamics::ZPP_SensorArbiter o1 = arb->sensorarb;		HX_STACK_VAR(o1,"o1");
									HX_STACK_LINE(4358)
									::zpp_nape::util::ZNPNode_ZPP_SensorArbiter tmp24;		HX_STACK_VAR(tmp24,"tmp24");
									HX_STACK_LINE(4358)
									{
										HX_STACK_LINE(4358)
										::zpp_nape::util::ZNPNode_ZPP_SensorArbiter ret;		HX_STACK_VAR(ret,"ret");
										HX_STACK_LINE(4358)
										{
											HX_STACK_LINE(4358)
											::zpp_nape::util::ZNPNode_ZPP_SensorArbiter tmp25 = ::zpp_nape::util::ZNPNode_ZPP_SensorArbiter_obj::zpp_pool;		HX_STACK_VAR(tmp25,"tmp25");
											HX_STACK_LINE(4358)
											bool tmp26 = (tmp25 == null());		HX_STACK_VAR(tmp26,"tmp26");
											HX_STACK_LINE(4358)
											if ((tmp26)){
												HX_STACK_LINE(4358)
												::zpp_nape::util::ZNPNode_ZPP_SensorArbiter tmp27 = ::zpp_nape::util::ZNPNode_ZPP_SensorArbiter_obj::__new();		HX_STACK_VAR(tmp27,"tmp27");
												HX_STACK_LINE(4358)
												ret = tmp27;
											}
											else{
												HX_STACK_LINE(4358)
												::zpp_nape::util::ZNPNode_ZPP_SensorArbiter tmp27 = ::zpp_nape::util::ZNPNode_ZPP_SensorArbiter_obj::zpp_pool;		HX_STACK_VAR(tmp27,"tmp27");
												HX_STACK_LINE(4358)
												ret = tmp27;
												HX_STACK_LINE(4358)
												::zpp_nape::util::ZNPNode_ZPP_SensorArbiter_obj::zpp_pool = ret->next;
												HX_STACK_LINE(4358)
												ret->next = null();
											}
											HX_STACK_LINE(4358)
											Dynamic();
										}
										HX_STACK_LINE(4358)
										ret->elt = o1;
										HX_STACK_LINE(4358)
										tmp24 = ret;
									}
									HX_STACK_LINE(4358)
									::zpp_nape::util::ZNPNode_ZPP_SensorArbiter temp = tmp24;		HX_STACK_VAR(temp,"temp");
									HX_STACK_LINE(4358)
									temp->next = _this->head;
									HX_STACK_LINE(4358)
									_this->head = temp;
									HX_STACK_LINE(4358)
									_this->modified = true;
									HX_STACK_LINE(4358)
									(_this->length)++;
									HX_STACK_LINE(4358)
									o1;
								}
							}
						}
						HX_STACK_LINE(4360)
						int tmp11 = arb->type;		HX_STACK_VAR(tmp11,"tmp11");
						HX_STACK_LINE(4360)
						int tmp12 = ::zpp_nape::dynamics::ZPP_Arbiter_obj::SENSOR;		HX_STACK_VAR(tmp12,"tmp12");
						HX_STACK_LINE(4360)
						bool tmp13 = (tmp11 != tmp12);		HX_STACK_VAR(tmp13,"tmp13");
						HX_STACK_LINE(4360)
						bool tmp14 = tmp13;		HX_STACK_VAR(tmp14,"tmp14");
						HX_STACK_LINE(4360)
						bool tmp15;		HX_STACK_VAR(tmp15,"tmp15");
						HX_STACK_LINE(4360)
						if ((tmp14)){
							HX_STACK_LINE(4360)
							bool tmp16 = arb->cleared;		HX_STACK_VAR(tmp16,"tmp16");
							HX_STACK_LINE(4360)
							bool tmp17 = tmp16;		HX_STACK_VAR(tmp17,"tmp17");
							HX_STACK_LINE(4360)
							bool tmp18 = tmp17;		HX_STACK_VAR(tmp18,"tmp18");
							HX_STACK_LINE(4360)
							tmp15 = !(tmp18);
						}
						else{
							HX_STACK_LINE(4360)
							tmp15 = false;
						}
						HX_STACK_LINE(4360)
						bool tmp16 = tmp15;		HX_STACK_VAR(tmp16,"tmp16");
						HX_STACK_LINE(4360)
						bool tmp17;		HX_STACK_VAR(tmp17,"tmp17");
						HX_STACK_LINE(4360)
						if ((tmp16)){
							HX_STACK_LINE(4360)
							int tmp18 = arb->up_stamp;		HX_STACK_VAR(tmp18,"tmp18");
							HX_STACK_LINE(4360)
							int tmp19 = this->stamp;		HX_STACK_VAR(tmp19,"tmp19");
							HX_STACK_LINE(4360)
							int tmp20 = tmp19;		HX_STACK_VAR(tmp20,"tmp20");
							HX_STACK_LINE(4360)
							int tmp21 = tmp20;		HX_STACK_VAR(tmp21,"tmp21");
							HX_STACK_LINE(4360)
							tmp17 = (tmp18 >= tmp21);
						}
						else{
							HX_STACK_LINE(4360)
							tmp17 = false;
						}
						HX_STACK_LINE(4360)
						bool tmp18;		HX_STACK_VAR(tmp18,"tmp18");
						HX_STACK_LINE(4360)
						if ((tmp17)){
							HX_STACK_LINE(4360)
							int tmp19 = arb->immState;		HX_STACK_VAR(tmp19,"tmp19");
							HX_STACK_LINE(4360)
							int tmp20 = ::zpp_nape::util::ZPP_Flags_obj::id_ImmState_ACCEPT;		HX_STACK_VAR(tmp20,"tmp20");
							HX_STACK_LINE(4360)
							int tmp21 = tmp20;		HX_STACK_VAR(tmp21,"tmp21");
							HX_STACK_LINE(4360)
							int tmp22 = (int(tmp19) & int(tmp21));		HX_STACK_VAR(tmp22,"tmp22");
							HX_STACK_LINE(4360)
							int tmp23 = tmp22;		HX_STACK_VAR(tmp23,"tmp23");
							HX_STACK_LINE(4360)
							tmp18 = (tmp23 != (int)0);
						}
						else{
							HX_STACK_LINE(4360)
							tmp18 = false;
						}
						HX_STACK_LINE(4360)
						if ((tmp18)){
							HX_STACK_LINE(4361)
							int tmp19 = arb->b1->type;		HX_STACK_VAR(tmp19,"tmp19");
							HX_STACK_LINE(4361)
							int tmp20 = ::zpp_nape::util::ZPP_Flags_obj::id_BodyType_DYNAMIC;		HX_STACK_VAR(tmp20,"tmp20");
							HX_STACK_LINE(4361)
							bool tmp21 = (tmp19 == tmp20);		HX_STACK_VAR(tmp21,"tmp21");
							HX_STACK_LINE(4361)
							bool tmp22;		HX_STACK_VAR(tmp22,"tmp22");
							HX_STACK_LINE(4361)
							if ((tmp21)){
								HX_STACK_LINE(4361)
								::zpp_nape::space::ZPP_Component tmp23 = arb->b1->component;		HX_STACK_VAR(tmp23,"tmp23");
								HX_STACK_LINE(4361)
								::zpp_nape::space::ZPP_Component tmp24 = tmp23;		HX_STACK_VAR(tmp24,"tmp24");
								HX_STACK_LINE(4361)
								tmp22 = tmp24->sleeping;
							}
							else{
								HX_STACK_LINE(4361)
								tmp22 = false;
							}
							HX_STACK_LINE(4361)
							if ((tmp22)){
								HX_STACK_LINE(4362)
								::zpp_nape::phys::ZPP_Body o1 = arb->b1;		HX_STACK_VAR(o1,"o1");
								HX_STACK_LINE(4371)
								bool tmp23 = o1->world;		HX_STACK_VAR(tmp23,"tmp23");
								HX_STACK_LINE(4371)
								bool tmp24 = !(tmp23);		HX_STACK_VAR(tmp24,"tmp24");
								HX_STACK_LINE(4371)
								if ((tmp24)){
									HX_STACK_LINE(4380)
									int tmp25 = this->stamp;		HX_STACK_VAR(tmp25,"tmp25");
									HX_STACK_LINE(4380)
									bool tmp26 = this->midstep;		HX_STACK_VAR(tmp26,"tmp26");
									HX_STACK_LINE(4380)
									int tmp27;		HX_STACK_VAR(tmp27,"tmp27");
									HX_STACK_LINE(4380)
									if ((tmp26)){
										HX_STACK_LINE(4380)
										tmp27 = (int)0;
									}
									else{
										HX_STACK_LINE(4380)
										tmp27 = (int)1;
									}
									HX_STACK_LINE(4380)
									int tmp28 = (tmp25 + tmp27);		HX_STACK_VAR(tmp28,"tmp28");
									HX_STACK_LINE(4380)
									o1->component->waket = tmp28;
									HX_STACK_LINE(4381)
									int tmp29 = o1->type;		HX_STACK_VAR(tmp29,"tmp29");
									HX_STACK_LINE(4381)
									int tmp30 = ::zpp_nape::util::ZPP_Flags_obj::id_BodyType_KINEMATIC;		HX_STACK_VAR(tmp30,"tmp30");
									HX_STACK_LINE(4381)
									bool tmp31 = (tmp29 == tmp30);		HX_STACK_VAR(tmp31,"tmp31");
									HX_STACK_LINE(4381)
									if ((tmp31)){
										HX_STACK_LINE(4381)
										o1->kinematicDelaySleep = true;
									}
									HX_STACK_LINE(4382)
									bool tmp32 = o1->component->sleeping;		HX_STACK_VAR(tmp32,"tmp32");
									HX_STACK_LINE(4382)
									if ((tmp32)){
										HX_STACK_LINE(4383)
										::zpp_nape::phys::ZPP_Body tmp33 = o1;		HX_STACK_VAR(tmp33,"tmp33");
										HX_STACK_LINE(4383)
										this->really_wake(tmp33,false);
									}
								}
							}
							HX_STACK_LINE(4387)
							int tmp23 = arb->b2->type;		HX_STACK_VAR(tmp23,"tmp23");
							HX_STACK_LINE(4387)
							int tmp24 = ::zpp_nape::util::ZPP_Flags_obj::id_BodyType_DYNAMIC;		HX_STACK_VAR(tmp24,"tmp24");
							HX_STACK_LINE(4387)
							bool tmp25 = (tmp23 == tmp24);		HX_STACK_VAR(tmp25,"tmp25");
							HX_STACK_LINE(4387)
							bool tmp26;		HX_STACK_VAR(tmp26,"tmp26");
							HX_STACK_LINE(4387)
							if ((tmp25)){
								HX_STACK_LINE(4387)
								::zpp_nape::space::ZPP_Component tmp27 = arb->b2->component;		HX_STACK_VAR(tmp27,"tmp27");
								HX_STACK_LINE(4387)
								::zpp_nape::space::ZPP_Component tmp28 = tmp27;		HX_STACK_VAR(tmp28,"tmp28");
								HX_STACK_LINE(4387)
								tmp26 = tmp28->sleeping;
							}
							else{
								HX_STACK_LINE(4387)
								tmp26 = false;
							}
							HX_STACK_LINE(4387)
							if ((tmp26)){
								HX_STACK_LINE(4388)
								::zpp_nape::phys::ZPP_Body o1 = arb->b2;		HX_STACK_VAR(o1,"o1");
								HX_STACK_LINE(4397)
								bool tmp27 = o1->world;		HX_STACK_VAR(tmp27,"tmp27");
								HX_STACK_LINE(4397)
								bool tmp28 = !(tmp27);		HX_STACK_VAR(tmp28,"tmp28");
								HX_STACK_LINE(4397)
								if ((tmp28)){
									HX_STACK_LINE(4406)
									int tmp29 = this->stamp;		HX_STACK_VAR(tmp29,"tmp29");
									HX_STACK_LINE(4406)
									bool tmp30 = this->midstep;		HX_STACK_VAR(tmp30,"tmp30");
									HX_STACK_LINE(4406)
									int tmp31;		HX_STACK_VAR(tmp31,"tmp31");
									HX_STACK_LINE(4406)
									if ((tmp30)){
										HX_STACK_LINE(4406)
										tmp31 = (int)0;
									}
									else{
										HX_STACK_LINE(4406)
										tmp31 = (int)1;
									}
									HX_STACK_LINE(4406)
									int tmp32 = (tmp29 + tmp31);		HX_STACK_VAR(tmp32,"tmp32");
									HX_STACK_LINE(4406)
									o1->component->waket = tmp32;
									HX_STACK_LINE(4407)
									int tmp33 = o1->type;		HX_STACK_VAR(tmp33,"tmp33");
									HX_STACK_LINE(4407)
									int tmp34 = ::zpp_nape::util::ZPP_Flags_obj::id_BodyType_KINEMATIC;		HX_STACK_VAR(tmp34,"tmp34");
									HX_STACK_LINE(4407)
									bool tmp35 = (tmp33 == tmp34);		HX_STACK_VAR(tmp35,"tmp35");
									HX_STACK_LINE(4407)
									if ((tmp35)){
										HX_STACK_LINE(4407)
										o1->kinematicDelaySleep = true;
									}
									HX_STACK_LINE(4408)
									bool tmp36 = o1->component->sleeping;		HX_STACK_VAR(tmp36,"tmp36");
									HX_STACK_LINE(4408)
									if ((tmp36)){
										HX_STACK_LINE(4409)
										::zpp_nape::phys::ZPP_Body tmp37 = o1;		HX_STACK_VAR(tmp37,"tmp37");
										HX_STACK_LINE(4409)
										this->really_wake(tmp37,false);
									}
								}
							}
						}
					}
					HX_STACK_LINE(4415)
					cx_ite = cx_ite->next;
				}
			}
			HX_STACK_LINE(4418)
			bool tmp7 = fst;		HX_STACK_VAR(tmp7,"tmp7");
			HX_STACK_LINE(4418)
			bool tmp8 = tmp7;		HX_STACK_VAR(tmp8,"tmp8");
			HX_STACK_LINE(4418)
			bool tmp9 = !(tmp8);		HX_STACK_VAR(tmp9,"tmp9");
			HX_STACK_LINE(4418)
			bool tmp10;		HX_STACK_VAR(tmp10,"tmp10");
			HX_STACK_LINE(4418)
			if ((tmp9)){
				HX_STACK_LINE(4418)
				int tmp11 = o->type;		HX_STACK_VAR(tmp11,"tmp11");
				HX_STACK_LINE(4418)
				int tmp12 = ::zpp_nape::util::ZPP_Flags_obj::id_BodyType_DYNAMIC;		HX_STACK_VAR(tmp12,"tmp12");
				HX_STACK_LINE(4418)
				int tmp13 = tmp12;		HX_STACK_VAR(tmp13,"tmp13");
				HX_STACK_LINE(4418)
				tmp10 = (tmp11 == tmp13);
			}
			else{
				HX_STACK_LINE(4418)
				tmp10 = false;
			}
			HX_STACK_LINE(4418)
			if ((tmp10)){
				HX_STACK_LINE(4418)
				::zpp_nape::phys::ZPP_Body tmp11 = o;		HX_STACK_VAR(tmp11,"tmp11");
				HX_STACK_LINE(4418)
				this->bodyCbWake(tmp11);
			}
			HX_STACK_LINE(4419)
			bool tmp11 = fst;		HX_STACK_VAR(tmp11,"tmp11");
			HX_STACK_LINE(4419)
			bool tmp12 = tmp11;		HX_STACK_VAR(tmp12,"tmp12");
			HX_STACK_LINE(4419)
			bool tmp13 = !(tmp12);		HX_STACK_VAR(tmp13,"tmp13");
			HX_STACK_LINE(4419)
			bool tmp14 = tmp13;		HX_STACK_VAR(tmp14,"tmp14");
			HX_STACK_LINE(4419)
			bool tmp15;		HX_STACK_VAR(tmp15,"tmp15");
			HX_STACK_LINE(4419)
			if ((tmp14)){
				HX_STACK_LINE(4419)
				::zpp_nape::space::ZPP_Broadphase tmp16 = this->bphase;		HX_STACK_VAR(tmp16,"tmp16");
				HX_STACK_LINE(4419)
				::zpp_nape::space::ZPP_Broadphase tmp17 = tmp16;		HX_STACK_VAR(tmp17,"tmp17");
				HX_STACK_LINE(4419)
				::zpp_nape::space::ZPP_Broadphase tmp18 = tmp17;		HX_STACK_VAR(tmp18,"tmp18");
				HX_STACK_LINE(4419)
				bool tmp19 = tmp18->is_sweep;		HX_STACK_VAR(tmp19,"tmp19");
				HX_STACK_LINE(4419)
				bool tmp20 = tmp19;		HX_STACK_VAR(tmp20,"tmp20");
				HX_STACK_LINE(4419)
				bool tmp21 = tmp20;		HX_STACK_VAR(tmp21,"tmp21");
				HX_STACK_LINE(4419)
				tmp15 = !(tmp21);
			}
			else{
				HX_STACK_LINE(4419)
				tmp15 = false;
			}
			HX_STACK_LINE(4419)
			bool tmp16;		HX_STACK_VAR(tmp16,"tmp16");
			HX_STACK_LINE(4419)
			if ((tmp15)){
				HX_STACK_LINE(4419)
				int tmp17 = o->type;		HX_STACK_VAR(tmp17,"tmp17");
				HX_STACK_LINE(4419)
				int tmp18 = ::zpp_nape::util::ZPP_Flags_obj::id_BodyType_STATIC;		HX_STACK_VAR(tmp18,"tmp18");
				HX_STACK_LINE(4419)
				int tmp19 = tmp18;		HX_STACK_VAR(tmp19,"tmp19");
				HX_STACK_LINE(4419)
				bool tmp20 = (tmp17 == tmp19);		HX_STACK_VAR(tmp20,"tmp20");
				HX_STACK_LINE(4419)
				bool tmp21 = tmp20;		HX_STACK_VAR(tmp21,"tmp21");
				HX_STACK_LINE(4419)
				bool tmp22 = tmp21;		HX_STACK_VAR(tmp22,"tmp22");
				HX_STACK_LINE(4419)
				tmp16 = !(tmp22);
			}
			else{
				HX_STACK_LINE(4419)
				tmp16 = false;
			}
			HX_STACK_LINE(4419)
			if ((tmp16)){
				HX_STACK_LINE(4420)
				::zpp_nape::util::ZNPNode_ZPP_Shape tmp17 = o->shapes->head;		HX_STACK_VAR(tmp17,"tmp17");
				HX_STACK_LINE(4420)
				::zpp_nape::util::ZNPNode_ZPP_Shape cx_ite = tmp17;		HX_STACK_VAR(cx_ite,"cx_ite");
				HX_STACK_LINE(4421)
				while((true)){
					HX_STACK_LINE(4421)
					bool tmp18 = (cx_ite != null());		HX_STACK_VAR(tmp18,"tmp18");
					HX_STACK_LINE(4421)
					bool tmp19 = !(tmp18);		HX_STACK_VAR(tmp19,"tmp19");
					HX_STACK_LINE(4421)
					if ((tmp19)){
						HX_STACK_LINE(4421)
						break;
					}
					HX_STACK_LINE(4422)
					::zpp_nape::shape::ZPP_Shape shape = cx_ite->elt;		HX_STACK_VAR(shape,"shape");
					HX_STACK_LINE(4423)
					bool tmp20 = (shape->node != null());		HX_STACK_VAR(tmp20,"tmp20");
					HX_STACK_LINE(4423)
					if ((tmp20)){
						HX_STACK_LINE(4423)
						::zpp_nape::space::ZPP_Broadphase tmp21 = this->bphase;		HX_STACK_VAR(tmp21,"tmp21");
						HX_STACK_LINE(4423)
						::zpp_nape::shape::ZPP_Shape tmp22 = shape;		HX_STACK_VAR(tmp22,"tmp22");
						HX_STACK_LINE(4423)
						tmp21->sync(tmp22);
					}
					HX_STACK_LINE(4424)
					cx_ite = cx_ite->next;
				}
			}
		}
		else{
			HX_STACK_LINE(4429)
			::zpp_nape::space::ZPP_Island tmp2 = o->component->island;		HX_STACK_VAR(tmp2,"tmp2");
			HX_STACK_LINE(4429)
			this->wakeIsland(tmp2);
		}
		HX_STACK_LINE(4431)
		{
		}
	}
return null();
}


HX_DEFINE_DYNAMIC_FUNC2(ZPP_Space_obj,really_wake,(void))

bool ZPP_Space_obj::wake_constraint( ::zpp_nape::constraint::ZPP_Constraint con,hx::Null< bool >  __o_fst){
bool fst = __o_fst.Default(false);
	HX_STACK_FRAME("zpp_nape.space.ZPP_Space","wake_constraint",0xa5c90d22,"zpp_nape.space.ZPP_Space.wake_constraint","zpp_nape/space/Space.hx",4440,0x2b65ed03)
	HX_STACK_THIS(this)
	HX_STACK_ARG(con,"con")
	HX_STACK_ARG(fst,"fst")
{
		HX_STACK_LINE(4449)
		bool tmp = con->active;		HX_STACK_VAR(tmp,"tmp");
		HX_STACK_LINE(4449)
		if ((tmp)){
			HX_STACK_LINE(4458)
			int tmp1 = this->stamp;		HX_STACK_VAR(tmp1,"tmp1");
			HX_STACK_LINE(4458)
			bool tmp2 = this->midstep;		HX_STACK_VAR(tmp2,"tmp2");
			HX_STACK_LINE(4458)
			int tmp3;		HX_STACK_VAR(tmp3,"tmp3");
			HX_STACK_LINE(4458)
			if ((tmp2)){
				HX_STACK_LINE(4458)
				tmp3 = (int)0;
			}
			else{
				HX_STACK_LINE(4458)
				tmp3 = (int)1;
			}
			HX_STACK_LINE(4458)
			int tmp4 = (tmp1 + tmp3);		HX_STACK_VAR(tmp4,"tmp4");
			HX_STACK_LINE(4458)
			con->component->waket = tmp4;
			HX_STACK_LINE(4459)
			bool tmp5 = con->component->sleeping;		HX_STACK_VAR(tmp5,"tmp5");
			HX_STACK_LINE(4459)
			if ((tmp5)){
				HX_STACK_LINE(4460)
				::zpp_nape::space::ZPP_Island tmp6 = con->component->island;		HX_STACK_VAR(tmp6,"tmp6");
				HX_STACK_LINE(4460)
				bool tmp7 = (tmp6 == null());		HX_STACK_VAR(tmp7,"tmp7");
				HX_STACK_LINE(4460)
				if ((tmp7)){
					HX_STACK_LINE(4461)
					con->component->sleeping = false;
					HX_STACK_LINE(4462)
					{
						HX_STACK_LINE(4462)
						::zpp_nape::util::ZNPList_ZPP_Constraint tmp8 = this->live_constraints;		HX_STACK_VAR(tmp8,"tmp8");
						HX_STACK_LINE(4462)
						::zpp_nape::util::ZNPList_ZPP_Constraint _this = tmp8;		HX_STACK_VAR(_this,"_this");
						HX_STACK_LINE(4462)
						::zpp_nape::util::ZNPNode_ZPP_Constraint tmp9;		HX_STACK_VAR(tmp9,"tmp9");
						HX_STACK_LINE(4462)
						{
							HX_STACK_LINE(4462)
							::zpp_nape::util::ZNPNode_ZPP_Constraint ret;		HX_STACK_VAR(ret,"ret");
							HX_STACK_LINE(4462)
							{
								HX_STACK_LINE(4462)
								::zpp_nape::util::ZNPNode_ZPP_Constraint tmp10 = ::zpp_nape::util::ZNPNode_ZPP_Constraint_obj::zpp_pool;		HX_STACK_VAR(tmp10,"tmp10");
								HX_STACK_LINE(4462)
								bool tmp11 = (tmp10 == null());		HX_STACK_VAR(tmp11,"tmp11");
								HX_STACK_LINE(4462)
								if ((tmp11)){
									HX_STACK_LINE(4462)
									::zpp_nape::util::ZNPNode_ZPP_Constraint tmp12 = ::zpp_nape::util::ZNPNode_ZPP_Constraint_obj::__new();		HX_STACK_VAR(tmp12,"tmp12");
									HX_STACK_LINE(4462)
									ret = tmp12;
								}
								else{
									HX_STACK_LINE(4462)
									::zpp_nape::util::ZNPNode_ZPP_Constraint tmp12 = ::zpp_nape::util::ZNPNode_ZPP_Constraint_obj::zpp_pool;		HX_STACK_VAR(tmp12,"tmp12");
									HX_STACK_LINE(4462)
									ret = tmp12;
									HX_STACK_LINE(4462)
									::zpp_nape::util::ZNPNode_ZPP_Constraint_obj::zpp_pool = ret->next;
									HX_STACK_LINE(4462)
									ret->next = null();
								}
								HX_STACK_LINE(4462)
								Dynamic();
							}
							HX_STACK_LINE(4462)
							ret->elt = con;
							HX_STACK_LINE(4462)
							tmp9 = ret;
						}
						HX_STACK_LINE(4462)
						::zpp_nape::util::ZNPNode_ZPP_Constraint temp = tmp9;		HX_STACK_VAR(temp,"temp");
						HX_STACK_LINE(4462)
						temp->next = _this->head;
						HX_STACK_LINE(4462)
						_this->head = temp;
						HX_STACK_LINE(4462)
						_this->modified = true;
						HX_STACK_LINE(4462)
						(_this->length)++;
						HX_STACK_LINE(4462)
						con;
					}
					HX_STACK_LINE(4463)
					con->wake_connected();
					HX_STACK_LINE(4464)
					bool tmp8 = fst;		HX_STACK_VAR(tmp8,"tmp8");
					HX_STACK_LINE(4464)
					bool tmp9 = !(tmp8);		HX_STACK_VAR(tmp9,"tmp9");
					HX_STACK_LINE(4464)
					if ((tmp9)){
						HX_STACK_LINE(4464)
						::zpp_nape::constraint::ZPP_Constraint tmp10 = con;		HX_STACK_VAR(tmp10,"tmp10");
						HX_STACK_LINE(4464)
						this->constraintCbWake(tmp10);
					}
				}
				else{
					HX_STACK_LINE(4467)
					::zpp_nape::space::ZPP_Island tmp8 = con->component->island;		HX_STACK_VAR(tmp8,"tmp8");
					HX_STACK_LINE(4467)
					this->wakeIsland(tmp8);
				}
				HX_STACK_LINE(4477)
				return true;
			}
			else{
				HX_STACK_LINE(4479)
				return false;
			}
		}
		else{
			HX_STACK_LINE(4481)
			return false;
		}
		HX_STACK_LINE(4449)
		return false;
	}
}


HX_DEFINE_DYNAMIC_FUNC2(ZPP_Space_obj,wake_constraint,return )

Void ZPP_Space_obj::doForests( Float dt){
{
		HX_STACK_FRAME("zpp_nape.space.ZPP_Space","doForests",0x60499a75,"zpp_nape.space.ZPP_Space.doForests","zpp_nape/space/Space.hx",4483,0x2b65ed03)
		HX_STACK_THIS(this)
		HX_STACK_ARG(dt,"dt")
		HX_STACK_LINE(4484)
		{
			HX_STACK_LINE(4485)
			::zpp_nape::util::ZNPList_ZPP_ColArbiter tmp = this->c_arbiters_false;		HX_STACK_VAR(tmp,"tmp");
			HX_STACK_LINE(4485)
			::zpp_nape::util::ZNPNode_ZPP_ColArbiter cx_ite = tmp->head;		HX_STACK_VAR(cx_ite,"cx_ite");
			HX_STACK_LINE(4486)
			while((true)){
				HX_STACK_LINE(4486)
				bool tmp1 = (cx_ite != null());		HX_STACK_VAR(tmp1,"tmp1");
				HX_STACK_LINE(4486)
				bool tmp2 = !(tmp1);		HX_STACK_VAR(tmp2,"tmp2");
				HX_STACK_LINE(4486)
				if ((tmp2)){
					HX_STACK_LINE(4486)
					break;
				}
				HX_STACK_LINE(4487)
				::zpp_nape::dynamics::ZPP_ColArbiter arb = cx_ite->elt;		HX_STACK_VAR(arb,"arb");
				HX_STACK_LINE(4488)
				{
					HX_STACK_LINE(4489)
					bool tmp3 = arb->cleared;		HX_STACK_VAR(tmp3,"tmp3");
					HX_STACK_LINE(4489)
					bool tmp4 = tmp3;		HX_STACK_VAR(tmp4,"tmp4");
					HX_STACK_LINE(4489)
					bool tmp5 = !(tmp4);		HX_STACK_VAR(tmp5,"tmp5");
					HX_STACK_LINE(4489)
					bool tmp6 = tmp5;		HX_STACK_VAR(tmp6,"tmp6");
					HX_STACK_LINE(4489)
					bool tmp7;		HX_STACK_VAR(tmp7,"tmp7");
					HX_STACK_LINE(4489)
					if ((tmp6)){
						HX_STACK_LINE(4489)
						int tmp8 = arb->up_stamp;		HX_STACK_VAR(tmp8,"tmp8");
						HX_STACK_LINE(4489)
						int tmp9 = this->stamp;		HX_STACK_VAR(tmp9,"tmp9");
						HX_STACK_LINE(4489)
						int tmp10 = tmp9;		HX_STACK_VAR(tmp10,"tmp10");
						HX_STACK_LINE(4489)
						int tmp11 = tmp10;		HX_STACK_VAR(tmp11,"tmp11");
						HX_STACK_LINE(4489)
						tmp7 = (tmp8 == tmp11);
					}
					else{
						HX_STACK_LINE(4489)
						tmp7 = false;
					}
					HX_STACK_LINE(4489)
					bool tmp8;		HX_STACK_VAR(tmp8,"tmp8");
					HX_STACK_LINE(4489)
					if ((tmp7)){
						HX_STACK_LINE(4489)
						int tmp9 = arb->immState;		HX_STACK_VAR(tmp9,"tmp9");
						HX_STACK_LINE(4489)
						int tmp10 = ::zpp_nape::util::ZPP_Flags_obj::id_ImmState_ACCEPT;		HX_STACK_VAR(tmp10,"tmp10");
						HX_STACK_LINE(4489)
						int tmp11 = tmp10;		HX_STACK_VAR(tmp11,"tmp11");
						HX_STACK_LINE(4489)
						int tmp12 = (int(tmp9) & int(tmp11));		HX_STACK_VAR(tmp12,"tmp12");
						HX_STACK_LINE(4489)
						int tmp13 = tmp12;		HX_STACK_VAR(tmp13,"tmp13");
						HX_STACK_LINE(4489)
						tmp8 = (tmp13 != (int)0);
					}
					else{
						HX_STACK_LINE(4489)
						tmp8 = false;
					}
					HX_STACK_LINE(4489)
					if ((tmp8)){
						HX_STACK_LINE(4490)
						int tmp9 = arb->b1->type;		HX_STACK_VAR(tmp9,"tmp9");
						HX_STACK_LINE(4490)
						int tmp10 = ::zpp_nape::util::ZPP_Flags_obj::id_BodyType_DYNAMIC;		HX_STACK_VAR(tmp10,"tmp10");
						HX_STACK_LINE(4490)
						bool tmp11 = (tmp9 == tmp10);		HX_STACK_VAR(tmp11,"tmp11");
						HX_STACK_LINE(4490)
						bool tmp12;		HX_STACK_VAR(tmp12,"tmp12");
						HX_STACK_LINE(4490)
						if ((tmp11)){
							HX_STACK_LINE(4490)
							int tmp13 = arb->b2->type;		HX_STACK_VAR(tmp13,"tmp13");
							HX_STACK_LINE(4490)
							int tmp14 = tmp13;		HX_STACK_VAR(tmp14,"tmp14");
							HX_STACK_LINE(4490)
							int tmp15 = ::zpp_nape::util::ZPP_Flags_obj::id_BodyType_DYNAMIC;		HX_STACK_VAR(tmp15,"tmp15");
							HX_STACK_LINE(4490)
							int tmp16 = tmp15;		HX_STACK_VAR(tmp16,"tmp16");
							HX_STACK_LINE(4490)
							tmp12 = (tmp14 == tmp16);
						}
						else{
							HX_STACK_LINE(4490)
							tmp12 = false;
						}
						HX_STACK_LINE(4490)
						if ((tmp12)){
							HX_STACK_LINE(4491)
							::zpp_nape::space::ZPP_Component tmp13;		HX_STACK_VAR(tmp13,"tmp13");
							HX_STACK_LINE(4491)
							{
								HX_STACK_LINE(4492)
								::zpp_nape::space::ZPP_Component tmp14 = arb->b1->component;		HX_STACK_VAR(tmp14,"tmp14");
								HX_STACK_LINE(4492)
								::zpp_nape::space::ZPP_Component tmp15 = arb->b1->component;		HX_STACK_VAR(tmp15,"tmp15");
								HX_STACK_LINE(4492)
								::zpp_nape::space::ZPP_Component tmp16 = tmp15->parent;		HX_STACK_VAR(tmp16,"tmp16");
								HX_STACK_LINE(4492)
								bool tmp17 = (tmp14 == tmp16);		HX_STACK_VAR(tmp17,"tmp17");
								HX_STACK_LINE(4492)
								if ((tmp17)){
									HX_STACK_LINE(4492)
									tmp13 = arb->b1->component;
								}
								else{
									HX_STACK_LINE(4494)
									::zpp_nape::space::ZPP_Component tmp18 = arb->b1->component;		HX_STACK_VAR(tmp18,"tmp18");
									HX_STACK_LINE(4494)
									::zpp_nape::space::ZPP_Component obj = tmp18;		HX_STACK_VAR(obj,"obj");
									HX_STACK_LINE(4495)
									::zpp_nape::space::ZPP_Component stack = null();		HX_STACK_VAR(stack,"stack");
									HX_STACK_LINE(4496)
									while((true)){
										HX_STACK_LINE(4496)
										bool tmp19 = (obj != obj->parent);		HX_STACK_VAR(tmp19,"tmp19");
										HX_STACK_LINE(4496)
										bool tmp20 = !(tmp19);		HX_STACK_VAR(tmp20,"tmp20");
										HX_STACK_LINE(4496)
										if ((tmp20)){
											HX_STACK_LINE(4496)
											break;
										}
										HX_STACK_LINE(4497)
										::zpp_nape::space::ZPP_Component nxt = obj->parent;		HX_STACK_VAR(nxt,"nxt");
										HX_STACK_LINE(4498)
										obj->parent = stack;
										HX_STACK_LINE(4499)
										stack = obj;
										HX_STACK_LINE(4500)
										obj = nxt;
									}
									HX_STACK_LINE(4502)
									while((true)){
										HX_STACK_LINE(4502)
										bool tmp19 = (stack != null());		HX_STACK_VAR(tmp19,"tmp19");
										HX_STACK_LINE(4502)
										bool tmp20 = !(tmp19);		HX_STACK_VAR(tmp20,"tmp20");
										HX_STACK_LINE(4502)
										if ((tmp20)){
											HX_STACK_LINE(4502)
											break;
										}
										HX_STACK_LINE(4503)
										::zpp_nape::space::ZPP_Component nxt = stack->parent;		HX_STACK_VAR(nxt,"nxt");
										HX_STACK_LINE(4504)
										stack->parent = obj;
										HX_STACK_LINE(4505)
										stack = nxt;
									}
									HX_STACK_LINE(4507)
									tmp13 = obj;
								}
							}
							HX_STACK_LINE(4491)
							::zpp_nape::space::ZPP_Component xr = tmp13;		HX_STACK_VAR(xr,"xr");
							HX_STACK_LINE(4510)
							::zpp_nape::space::ZPP_Component tmp14;		HX_STACK_VAR(tmp14,"tmp14");
							HX_STACK_LINE(4510)
							{
								HX_STACK_LINE(4511)
								::zpp_nape::space::ZPP_Component tmp15 = arb->b2->component;		HX_STACK_VAR(tmp15,"tmp15");
								HX_STACK_LINE(4511)
								::zpp_nape::space::ZPP_Component tmp16 = arb->b2->component;		HX_STACK_VAR(tmp16,"tmp16");
								HX_STACK_LINE(4511)
								::zpp_nape::space::ZPP_Component tmp17 = tmp16->parent;		HX_STACK_VAR(tmp17,"tmp17");
								HX_STACK_LINE(4511)
								bool tmp18 = (tmp15 == tmp17);		HX_STACK_VAR(tmp18,"tmp18");
								HX_STACK_LINE(4511)
								if ((tmp18)){
									HX_STACK_LINE(4511)
									tmp14 = arb->b2->component;
								}
								else{
									HX_STACK_LINE(4513)
									::zpp_nape::space::ZPP_Component tmp19 = arb->b2->component;		HX_STACK_VAR(tmp19,"tmp19");
									HX_STACK_LINE(4513)
									::zpp_nape::space::ZPP_Component obj = tmp19;		HX_STACK_VAR(obj,"obj");
									HX_STACK_LINE(4514)
									::zpp_nape::space::ZPP_Component stack = null();		HX_STACK_VAR(stack,"stack");
									HX_STACK_LINE(4515)
									while((true)){
										HX_STACK_LINE(4515)
										bool tmp20 = (obj != obj->parent);		HX_STACK_VAR(tmp20,"tmp20");
										HX_STACK_LINE(4515)
										bool tmp21 = !(tmp20);		HX_STACK_VAR(tmp21,"tmp21");
										HX_STACK_LINE(4515)
										if ((tmp21)){
											HX_STACK_LINE(4515)
											break;
										}
										HX_STACK_LINE(4516)
										::zpp_nape::space::ZPP_Component nxt = obj->parent;		HX_STACK_VAR(nxt,"nxt");
										HX_STACK_LINE(4517)
										obj->parent = stack;
										HX_STACK_LINE(4518)
										stack = obj;
										HX_STACK_LINE(4519)
										obj = nxt;
									}
									HX_STACK_LINE(4521)
									while((true)){
										HX_STACK_LINE(4521)
										bool tmp20 = (stack != null());		HX_STACK_VAR(tmp20,"tmp20");
										HX_STACK_LINE(4521)
										bool tmp21 = !(tmp20);		HX_STACK_VAR(tmp21,"tmp21");
										HX_STACK_LINE(4521)
										if ((tmp21)){
											HX_STACK_LINE(4521)
											break;
										}
										HX_STACK_LINE(4522)
										::zpp_nape::space::ZPP_Component nxt = stack->parent;		HX_STACK_VAR(nxt,"nxt");
										HX_STACK_LINE(4523)
										stack->parent = obj;
										HX_STACK_LINE(4524)
										stack = nxt;
									}
									HX_STACK_LINE(4526)
									tmp14 = obj;
								}
							}
							HX_STACK_LINE(4510)
							::zpp_nape::space::ZPP_Component yr = tmp14;		HX_STACK_VAR(yr,"yr");
							HX_STACK_LINE(4529)
							bool tmp15 = (xr != yr);		HX_STACK_VAR(tmp15,"tmp15");
							HX_STACK_LINE(4529)
							if ((tmp15)){
								HX_STACK_LINE(4530)
								bool tmp16 = (xr->rank < yr->rank);		HX_STACK_VAR(tmp16,"tmp16");
								HX_STACK_LINE(4530)
								if ((tmp16)){
									HX_STACK_LINE(4530)
									xr->parent = yr;
								}
								else{
									HX_STACK_LINE(4531)
									bool tmp17 = (xr->rank > yr->rank);		HX_STACK_VAR(tmp17,"tmp17");
									HX_STACK_LINE(4531)
									if ((tmp17)){
										HX_STACK_LINE(4531)
										yr->parent = xr;
									}
									else{
										HX_STACK_LINE(4533)
										yr->parent = xr;
										HX_STACK_LINE(4534)
										(xr->rank)++;
									}
								}
							}
						}
					}
				}
				HX_STACK_LINE(4540)
				cx_ite = cx_ite->next;
			}
		}
		HX_STACK_LINE(4543)
		{
			HX_STACK_LINE(4544)
			::zpp_nape::util::ZNPList_ZPP_FluidArbiter tmp = this->f_arbiters;		HX_STACK_VAR(tmp,"tmp");
			HX_STACK_LINE(4544)
			::zpp_nape::util::ZNPNode_ZPP_FluidArbiter cx_ite = tmp->head;		HX_STACK_VAR(cx_ite,"cx_ite");
			HX_STACK_LINE(4545)
			while((true)){
				HX_STACK_LINE(4545)
				bool tmp1 = (cx_ite != null());		HX_STACK_VAR(tmp1,"tmp1");
				HX_STACK_LINE(4545)
				bool tmp2 = !(tmp1);		HX_STACK_VAR(tmp2,"tmp2");
				HX_STACK_LINE(4545)
				if ((tmp2)){
					HX_STACK_LINE(4545)
					break;
				}
				HX_STACK_LINE(4546)
				::zpp_nape::dynamics::ZPP_FluidArbiter arb = cx_ite->elt;		HX_STACK_VAR(arb,"arb");
				HX_STACK_LINE(4547)
				{
					HX_STACK_LINE(4548)
					bool tmp3 = arb->cleared;		HX_STACK_VAR(tmp3,"tmp3");
					HX_STACK_LINE(4548)
					bool tmp4 = tmp3;		HX_STACK_VAR(tmp4,"tmp4");
					HX_STACK_LINE(4548)
					bool tmp5 = !(tmp4);		HX_STACK_VAR(tmp5,"tmp5");
					HX_STACK_LINE(4548)
					bool tmp6 = tmp5;		HX_STACK_VAR(tmp6,"tmp6");
					HX_STACK_LINE(4548)
					bool tmp7;		HX_STACK_VAR(tmp7,"tmp7");
					HX_STACK_LINE(4548)
					if ((tmp6)){
						HX_STACK_LINE(4548)
						int tmp8 = arb->up_stamp;		HX_STACK_VAR(tmp8,"tmp8");
						HX_STACK_LINE(4548)
						int tmp9 = this->stamp;		HX_STACK_VAR(tmp9,"tmp9");
						HX_STACK_LINE(4548)
						int tmp10 = tmp9;		HX_STACK_VAR(tmp10,"tmp10");
						HX_STACK_LINE(4548)
						int tmp11 = tmp10;		HX_STACK_VAR(tmp11,"tmp11");
						HX_STACK_LINE(4548)
						tmp7 = (tmp8 == tmp11);
					}
					else{
						HX_STACK_LINE(4548)
						tmp7 = false;
					}
					HX_STACK_LINE(4548)
					bool tmp8;		HX_STACK_VAR(tmp8,"tmp8");
					HX_STACK_LINE(4548)
					if ((tmp7)){
						HX_STACK_LINE(4548)
						int tmp9 = arb->immState;		HX_STACK_VAR(tmp9,"tmp9");
						HX_STACK_LINE(4548)
						int tmp10 = ::zpp_nape::util::ZPP_Flags_obj::id_ImmState_ACCEPT;		HX_STACK_VAR(tmp10,"tmp10");
						HX_STACK_LINE(4548)
						int tmp11 = tmp10;		HX_STACK_VAR(tmp11,"tmp11");
						HX_STACK_LINE(4548)
						int tmp12 = (int(tmp9) & int(tmp11));		HX_STACK_VAR(tmp12,"tmp12");
						HX_STACK_LINE(4548)
						int tmp13 = tmp12;		HX_STACK_VAR(tmp13,"tmp13");
						HX_STACK_LINE(4548)
						tmp8 = (tmp13 != (int)0);
					}
					else{
						HX_STACK_LINE(4548)
						tmp8 = false;
					}
					HX_STACK_LINE(4548)
					if ((tmp8)){
						HX_STACK_LINE(4549)
						int tmp9 = arb->b1->type;		HX_STACK_VAR(tmp9,"tmp9");
						HX_STACK_LINE(4549)
						int tmp10 = ::zpp_nape::util::ZPP_Flags_obj::id_BodyType_DYNAMIC;		HX_STACK_VAR(tmp10,"tmp10");
						HX_STACK_LINE(4549)
						bool tmp11 = (tmp9 == tmp10);		HX_STACK_VAR(tmp11,"tmp11");
						HX_STACK_LINE(4549)
						bool tmp12;		HX_STACK_VAR(tmp12,"tmp12");
						HX_STACK_LINE(4549)
						if ((tmp11)){
							HX_STACK_LINE(4549)
							int tmp13 = arb->b2->type;		HX_STACK_VAR(tmp13,"tmp13");
							HX_STACK_LINE(4549)
							int tmp14 = tmp13;		HX_STACK_VAR(tmp14,"tmp14");
							HX_STACK_LINE(4549)
							int tmp15 = ::zpp_nape::util::ZPP_Flags_obj::id_BodyType_DYNAMIC;		HX_STACK_VAR(tmp15,"tmp15");
							HX_STACK_LINE(4549)
							int tmp16 = tmp15;		HX_STACK_VAR(tmp16,"tmp16");
							HX_STACK_LINE(4549)
							tmp12 = (tmp14 == tmp16);
						}
						else{
							HX_STACK_LINE(4549)
							tmp12 = false;
						}
						HX_STACK_LINE(4549)
						if ((tmp12)){
							HX_STACK_LINE(4550)
							::zpp_nape::space::ZPP_Component tmp13;		HX_STACK_VAR(tmp13,"tmp13");
							HX_STACK_LINE(4550)
							{
								HX_STACK_LINE(4551)
								::zpp_nape::space::ZPP_Component tmp14 = arb->b1->component;		HX_STACK_VAR(tmp14,"tmp14");
								HX_STACK_LINE(4551)
								::zpp_nape::space::ZPP_Component tmp15 = arb->b1->component;		HX_STACK_VAR(tmp15,"tmp15");
								HX_STACK_LINE(4551)
								::zpp_nape::space::ZPP_Component tmp16 = tmp15->parent;		HX_STACK_VAR(tmp16,"tmp16");
								HX_STACK_LINE(4551)
								bool tmp17 = (tmp14 == tmp16);		HX_STACK_VAR(tmp17,"tmp17");
								HX_STACK_LINE(4551)
								if ((tmp17)){
									HX_STACK_LINE(4551)
									tmp13 = arb->b1->component;
								}
								else{
									HX_STACK_LINE(4553)
									::zpp_nape::space::ZPP_Component tmp18 = arb->b1->component;		HX_STACK_VAR(tmp18,"tmp18");
									HX_STACK_LINE(4553)
									::zpp_nape::space::ZPP_Component obj = tmp18;		HX_STACK_VAR(obj,"obj");
									HX_STACK_LINE(4554)
									::zpp_nape::space::ZPP_Component stack = null();		HX_STACK_VAR(stack,"stack");
									HX_STACK_LINE(4555)
									while((true)){
										HX_STACK_LINE(4555)
										bool tmp19 = (obj != obj->parent);		HX_STACK_VAR(tmp19,"tmp19");
										HX_STACK_LINE(4555)
										bool tmp20 = !(tmp19);		HX_STACK_VAR(tmp20,"tmp20");
										HX_STACK_LINE(4555)
										if ((tmp20)){
											HX_STACK_LINE(4555)
											break;
										}
										HX_STACK_LINE(4556)
										::zpp_nape::space::ZPP_Component nxt = obj->parent;		HX_STACK_VAR(nxt,"nxt");
										HX_STACK_LINE(4557)
										obj->parent = stack;
										HX_STACK_LINE(4558)
										stack = obj;
										HX_STACK_LINE(4559)
										obj = nxt;
									}
									HX_STACK_LINE(4561)
									while((true)){
										HX_STACK_LINE(4561)
										bool tmp19 = (stack != null());		HX_STACK_VAR(tmp19,"tmp19");
										HX_STACK_LINE(4561)
										bool tmp20 = !(tmp19);		HX_STACK_VAR(tmp20,"tmp20");
										HX_STACK_LINE(4561)
										if ((tmp20)){
											HX_STACK_LINE(4561)
											break;
										}
										HX_STACK_LINE(4562)
										::zpp_nape::space::ZPP_Component nxt = stack->parent;		HX_STACK_VAR(nxt,"nxt");
										HX_STACK_LINE(4563)
										stack->parent = obj;
										HX_STACK_LINE(4564)
										stack = nxt;
									}
									HX_STACK_LINE(4566)
									tmp13 = obj;
								}
							}
							HX_STACK_LINE(4550)
							::zpp_nape::space::ZPP_Component xr = tmp13;		HX_STACK_VAR(xr,"xr");
							HX_STACK_LINE(4569)
							::zpp_nape::space::ZPP_Component tmp14;		HX_STACK_VAR(tmp14,"tmp14");
							HX_STACK_LINE(4569)
							{
								HX_STACK_LINE(4570)
								::zpp_nape::space::ZPP_Component tmp15 = arb->b2->component;		HX_STACK_VAR(tmp15,"tmp15");
								HX_STACK_LINE(4570)
								::zpp_nape::space::ZPP_Component tmp16 = arb->b2->component;		HX_STACK_VAR(tmp16,"tmp16");
								HX_STACK_LINE(4570)
								::zpp_nape::space::ZPP_Component tmp17 = tmp16->parent;		HX_STACK_VAR(tmp17,"tmp17");
								HX_STACK_LINE(4570)
								bool tmp18 = (tmp15 == tmp17);		HX_STACK_VAR(tmp18,"tmp18");
								HX_STACK_LINE(4570)
								if ((tmp18)){
									HX_STACK_LINE(4570)
									tmp14 = arb->b2->component;
								}
								else{
									HX_STACK_LINE(4572)
									::zpp_nape::space::ZPP_Component tmp19 = arb->b2->component;		HX_STACK_VAR(tmp19,"tmp19");
									HX_STACK_LINE(4572)
									::zpp_nape::space::ZPP_Component obj = tmp19;		HX_STACK_VAR(obj,"obj");
									HX_STACK_LINE(4573)
									::zpp_nape::space::ZPP_Component stack = null();		HX_STACK_VAR(stack,"stack");
									HX_STACK_LINE(4574)
									while((true)){
										HX_STACK_LINE(4574)
										bool tmp20 = (obj != obj->parent);		HX_STACK_VAR(tmp20,"tmp20");
										HX_STACK_LINE(4574)
										bool tmp21 = !(tmp20);		HX_STACK_VAR(tmp21,"tmp21");
										HX_STACK_LINE(4574)
										if ((tmp21)){
											HX_STACK_LINE(4574)
											break;
										}
										HX_STACK_LINE(4575)
										::zpp_nape::space::ZPP_Component nxt = obj->parent;		HX_STACK_VAR(nxt,"nxt");
										HX_STACK_LINE(4576)
										obj->parent = stack;
										HX_STACK_LINE(4577)
										stack = obj;
										HX_STACK_LINE(4578)
										obj = nxt;
									}
									HX_STACK_LINE(4580)
									while((true)){
										HX_STACK_LINE(4580)
										bool tmp20 = (stack != null());		HX_STACK_VAR(tmp20,"tmp20");
										HX_STACK_LINE(4580)
										bool tmp21 = !(tmp20);		HX_STACK_VAR(tmp21,"tmp21");
										HX_STACK_LINE(4580)
										if ((tmp21)){
											HX_STACK_LINE(4580)
											break;
										}
										HX_STACK_LINE(4581)
										::zpp_nape::space::ZPP_Component nxt = stack->parent;		HX_STACK_VAR(nxt,"nxt");
										HX_STACK_LINE(4582)
										stack->parent = obj;
										HX_STACK_LINE(4583)
										stack = nxt;
									}
									HX_STACK_LINE(4585)
									tmp14 = obj;
								}
							}
							HX_STACK_LINE(4569)
							::zpp_nape::space::ZPP_Component yr = tmp14;		HX_STACK_VAR(yr,"yr");
							HX_STACK_LINE(4588)
							bool tmp15 = (xr != yr);		HX_STACK_VAR(tmp15,"tmp15");
							HX_STACK_LINE(4588)
							if ((tmp15)){
								HX_STACK_LINE(4589)
								bool tmp16 = (xr->rank < yr->rank);		HX_STACK_VAR(tmp16,"tmp16");
								HX_STACK_LINE(4589)
								if ((tmp16)){
									HX_STACK_LINE(4589)
									xr->parent = yr;
								}
								else{
									HX_STACK_LINE(4590)
									bool tmp17 = (xr->rank > yr->rank);		HX_STACK_VAR(tmp17,"tmp17");
									HX_STACK_LINE(4590)
									if ((tmp17)){
										HX_STACK_LINE(4590)
										yr->parent = xr;
									}
									else{
										HX_STACK_LINE(4592)
										yr->parent = xr;
										HX_STACK_LINE(4593)
										(xr->rank)++;
									}
								}
							}
						}
					}
				}
				HX_STACK_LINE(4599)
				cx_ite = cx_ite->next;
			}
		}
		HX_STACK_LINE(4602)
		{
			HX_STACK_LINE(4603)
			::zpp_nape::util::ZNPList_ZPP_Constraint tmp = this->live_constraints;		HX_STACK_VAR(tmp,"tmp");
			HX_STACK_LINE(4603)
			::zpp_nape::util::ZNPNode_ZPP_Constraint cx_ite = tmp->head;		HX_STACK_VAR(cx_ite,"cx_ite");
			HX_STACK_LINE(4604)
			while((true)){
				HX_STACK_LINE(4604)
				bool tmp1 = (cx_ite != null());		HX_STACK_VAR(tmp1,"tmp1");
				HX_STACK_LINE(4604)
				bool tmp2 = !(tmp1);		HX_STACK_VAR(tmp2,"tmp2");
				HX_STACK_LINE(4604)
				if ((tmp2)){
					HX_STACK_LINE(4604)
					break;
				}
				HX_STACK_LINE(4605)
				::zpp_nape::constraint::ZPP_Constraint con = cx_ite->elt;		HX_STACK_VAR(con,"con");
				HX_STACK_LINE(4606)
				con->forest();
				HX_STACK_LINE(4607)
				cx_ite = cx_ite->next;
			}
		}
		HX_STACK_LINE(4610)
		while((true)){
			HX_STACK_LINE(4610)
			::zpp_nape::util::ZNPList_ZPP_Body tmp = this->live;		HX_STACK_VAR(tmp,"tmp");
			HX_STACK_LINE(4610)
			::zpp_nape::util::ZNPNode_ZPP_Body tmp1 = tmp->head;		HX_STACK_VAR(tmp1,"tmp1");
			HX_STACK_LINE(4610)
			bool tmp2 = (tmp1 == null());		HX_STACK_VAR(tmp2,"tmp2");
			HX_STACK_LINE(4610)
			bool tmp3 = !(tmp2);		HX_STACK_VAR(tmp3,"tmp3");
			HX_STACK_LINE(4610)
			bool tmp4 = !(tmp3);		HX_STACK_VAR(tmp4,"tmp4");
			HX_STACK_LINE(4610)
			if ((tmp4)){
				HX_STACK_LINE(4610)
				break;
			}
			HX_STACK_LINE(4611)
			::zpp_nape::phys::ZPP_Body tmp5;		HX_STACK_VAR(tmp5,"tmp5");
			HX_STACK_LINE(4611)
			{
				HX_STACK_LINE(4611)
				::zpp_nape::util::ZNPList_ZPP_Body tmp6 = this->live;		HX_STACK_VAR(tmp6,"tmp6");
				HX_STACK_LINE(4611)
				::zpp_nape::util::ZNPList_ZPP_Body _this = tmp6;		HX_STACK_VAR(_this,"_this");
				HX_STACK_LINE(4611)
				::zpp_nape::phys::ZPP_Body tmp7 = _this->head->elt;		HX_STACK_VAR(tmp7,"tmp7");
				HX_STACK_LINE(4611)
				::zpp_nape::phys::ZPP_Body ret = tmp7;		HX_STACK_VAR(ret,"ret");
				HX_STACK_LINE(4611)
				_this->pop();
				HX_STACK_LINE(4611)
				tmp5 = ret;
			}
			HX_STACK_LINE(4611)
			::zpp_nape::phys::ZPP_Body o = tmp5;		HX_STACK_VAR(o,"o");
			HX_STACK_LINE(4612)
			::zpp_nape::space::ZPP_Component oc = o->component;		HX_STACK_VAR(oc,"oc");
			HX_STACK_LINE(4613)
			::zpp_nape::space::ZPP_Component tmp6;		HX_STACK_VAR(tmp6,"tmp6");
			HX_STACK_LINE(4613)
			{
				HX_STACK_LINE(4614)
				bool tmp7 = (oc == oc->parent);		HX_STACK_VAR(tmp7,"tmp7");
				HX_STACK_LINE(4614)
				if ((tmp7)){
					HX_STACK_LINE(4614)
					tmp6 = oc;
				}
				else{
					HX_STACK_LINE(4616)
					::zpp_nape::space::ZPP_Component obj = oc;		HX_STACK_VAR(obj,"obj");
					HX_STACK_LINE(4617)
					::zpp_nape::space::ZPP_Component stack = null();		HX_STACK_VAR(stack,"stack");
					HX_STACK_LINE(4618)
					while((true)){
						HX_STACK_LINE(4618)
						bool tmp8 = (obj != obj->parent);		HX_STACK_VAR(tmp8,"tmp8");
						HX_STACK_LINE(4618)
						bool tmp9 = !(tmp8);		HX_STACK_VAR(tmp9,"tmp9");
						HX_STACK_LINE(4618)
						if ((tmp9)){
							HX_STACK_LINE(4618)
							break;
						}
						HX_STACK_LINE(4619)
						::zpp_nape::space::ZPP_Component nxt = obj->parent;		HX_STACK_VAR(nxt,"nxt");
						HX_STACK_LINE(4620)
						obj->parent = stack;
						HX_STACK_LINE(4621)
						stack = obj;
						HX_STACK_LINE(4622)
						obj = nxt;
					}
					HX_STACK_LINE(4624)
					while((true)){
						HX_STACK_LINE(4624)
						bool tmp8 = (stack != null());		HX_STACK_VAR(tmp8,"tmp8");
						HX_STACK_LINE(4624)
						bool tmp9 = !(tmp8);		HX_STACK_VAR(tmp9,"tmp9");
						HX_STACK_LINE(4624)
						if ((tmp9)){
							HX_STACK_LINE(4624)
							break;
						}
						HX_STACK_LINE(4625)
						::zpp_nape::space::ZPP_Component nxt = stack->parent;		HX_STACK_VAR(nxt,"nxt");
						HX_STACK_LINE(4626)
						stack->parent = obj;
						HX_STACK_LINE(4627)
						stack = nxt;
					}
					HX_STACK_LINE(4629)
					tmp6 = obj;
				}
			}
			HX_STACK_LINE(4613)
			::zpp_nape::space::ZPP_Component root = tmp6;		HX_STACK_VAR(root,"root");
			HX_STACK_LINE(4632)
			bool tmp7 = (root->island == null());		HX_STACK_VAR(tmp7,"tmp7");
			HX_STACK_LINE(4632)
			if ((tmp7)){
				HX_STACK_LINE(4633)
				{
					HX_STACK_LINE(4634)
					::zpp_nape::space::ZPP_Island tmp8 = ::zpp_nape::space::ZPP_Island_obj::zpp_pool;		HX_STACK_VAR(tmp8,"tmp8");
					HX_STACK_LINE(4634)
					bool tmp9 = (tmp8 == null());		HX_STACK_VAR(tmp9,"tmp9");
					HX_STACK_LINE(4634)
					if ((tmp9)){
						HX_STACK_LINE(4635)
						::zpp_nape::space::ZPP_Island tmp10 = ::zpp_nape::space::ZPP_Island_obj::__new();		HX_STACK_VAR(tmp10,"tmp10");
						HX_STACK_LINE(4635)
						root->island = tmp10;
					}
					else{
						HX_STACK_LINE(4641)
						::zpp_nape::space::ZPP_Island tmp10 = ::zpp_nape::space::ZPP_Island_obj::zpp_pool;		HX_STACK_VAR(tmp10,"tmp10");
						HX_STACK_LINE(4641)
						root->island = tmp10;
						HX_STACK_LINE(4642)
						::zpp_nape::space::ZPP_Island tmp11 = root->island->next;		HX_STACK_VAR(tmp11,"tmp11");
						HX_STACK_LINE(4642)
						::zpp_nape::space::ZPP_Island_obj::zpp_pool = tmp11;
						HX_STACK_LINE(4643)
						root->island->next = null();
					}
					HX_STACK_LINE(4648)
					root->island->waket = (int)0;
				}
				HX_STACK_LINE(4650)
				{
					HX_STACK_LINE(4650)
					::zpp_nape::space::ZPP_Island tmp8 = this->islands;		HX_STACK_VAR(tmp8,"tmp8");
					HX_STACK_LINE(4650)
					::zpp_nape::space::ZPP_Island _this = tmp8;		HX_STACK_VAR(_this,"_this");
					HX_STACK_LINE(4650)
					::zpp_nape::space::ZPP_Island o1 = root->island;		HX_STACK_VAR(o1,"o1");
					HX_STACK_LINE(4650)
					::zpp_nape::space::ZPP_Island tmp9;		HX_STACK_VAR(tmp9,"tmp9");
					HX_STACK_LINE(4650)
					{
						HX_STACK_LINE(4650)
						o1->_inuse = true;
						HX_STACK_LINE(4650)
						tmp9 = o1;
					}
					HX_STACK_LINE(4650)
					::zpp_nape::space::ZPP_Island temp = tmp9;		HX_STACK_VAR(temp,"temp");
					HX_STACK_LINE(4650)
					temp->next = _this->next;
					HX_STACK_LINE(4650)
					_this->next = temp;
					HX_STACK_LINE(4650)
					_this->modified = true;
					HX_STACK_LINE(4650)
					(_this->length)++;
					HX_STACK_LINE(4650)
					o1;
				}
				HX_STACK_LINE(4651)
				root->island->sleep = true;
			}
			HX_STACK_LINE(4653)
			oc->island = root->island;
			HX_STACK_LINE(4654)
			{
				HX_STACK_LINE(4654)
				::zpp_nape::util::ZNPList_ZPP_Component tmp8 = oc->island->comps;		HX_STACK_VAR(tmp8,"tmp8");
				HX_STACK_LINE(4654)
				::zpp_nape::util::ZNPList_ZPP_Component _this = tmp8;		HX_STACK_VAR(_this,"_this");
				HX_STACK_LINE(4654)
				::zpp_nape::util::ZNPNode_ZPP_Component tmp9;		HX_STACK_VAR(tmp9,"tmp9");
				HX_STACK_LINE(4654)
				{
					HX_STACK_LINE(4654)
					::zpp_nape::util::ZNPNode_ZPP_Component ret;		HX_STACK_VAR(ret,"ret");
					HX_STACK_LINE(4654)
					{
						HX_STACK_LINE(4654)
						::zpp_nape::util::ZNPNode_ZPP_Component tmp10 = ::zpp_nape::util::ZNPNode_ZPP_Component_obj::zpp_pool;		HX_STACK_VAR(tmp10,"tmp10");
						HX_STACK_LINE(4654)
						bool tmp11 = (tmp10 == null());		HX_STACK_VAR(tmp11,"tmp11");
						HX_STACK_LINE(4654)
						if ((tmp11)){
							HX_STACK_LINE(4654)
							::zpp_nape::util::ZNPNode_ZPP_Component tmp12 = ::zpp_nape::util::ZNPNode_ZPP_Component_obj::__new();		HX_STACK_VAR(tmp12,"tmp12");
							HX_STACK_LINE(4654)
							ret = tmp12;
						}
						else{
							HX_STACK_LINE(4654)
							::zpp_nape::util::ZNPNode_ZPP_Component tmp12 = ::zpp_nape::util::ZNPNode_ZPP_Component_obj::zpp_pool;		HX_STACK_VAR(tmp12,"tmp12");
							HX_STACK_LINE(4654)
							ret = tmp12;
							HX_STACK_LINE(4654)
							::zpp_nape::util::ZNPNode_ZPP_Component_obj::zpp_pool = ret->next;
							HX_STACK_LINE(4654)
							ret->next = null();
						}
						HX_STACK_LINE(4654)
						Dynamic();
					}
					HX_STACK_LINE(4654)
					ret->elt = oc;
					HX_STACK_LINE(4654)
					tmp9 = ret;
				}
				HX_STACK_LINE(4654)
				::zpp_nape::util::ZNPNode_ZPP_Component temp = tmp9;		HX_STACK_VAR(temp,"temp");
				HX_STACK_LINE(4654)
				temp->next = _this->head;
				HX_STACK_LINE(4654)
				_this->head = temp;
				HX_STACK_LINE(4654)
				_this->modified = true;
				HX_STACK_LINE(4654)
				(_this->length)++;
				HX_STACK_LINE(4654)
				oc;
			}
			HX_STACK_LINE(4655)
			Float tmp8 = dt;		HX_STACK_VAR(tmp8,"tmp8");
			HX_STACK_LINE(4655)
			bool tmp9 = o->atRest(tmp8);		HX_STACK_VAR(tmp9,"tmp9");
			HX_STACK_LINE(4655)
			bool rest = tmp9;		HX_STACK_VAR(rest,"rest");
			HX_STACK_LINE(4656)
			bool tmp10 = oc->island->sleep;		HX_STACK_VAR(tmp10,"tmp10");
			HX_STACK_LINE(4656)
			bool tmp11;		HX_STACK_VAR(tmp11,"tmp11");
			HX_STACK_LINE(4656)
			if ((tmp10)){
				HX_STACK_LINE(4656)
				tmp11 = rest;
			}
			else{
				HX_STACK_LINE(4656)
				tmp11 = false;
			}
			HX_STACK_LINE(4656)
			oc->island->sleep = tmp11;
			HX_STACK_LINE(4657)
			int tmp12 = oc->waket;		HX_STACK_VAR(tmp12,"tmp12");
			HX_STACK_LINE(4657)
			int tmp13 = oc->island->waket;		HX_STACK_VAR(tmp13,"tmp13");
			HX_STACK_LINE(4657)
			bool tmp14 = (tmp12 > tmp13);		HX_STACK_VAR(tmp14,"tmp14");
			HX_STACK_LINE(4657)
			if ((tmp14)){
				HX_STACK_LINE(4657)
				oc->island->waket = oc->waket;
			}
		}
		HX_STACK_LINE(4659)
		while((true)){
			HX_STACK_LINE(4659)
			::zpp_nape::util::ZNPList_ZPP_Constraint tmp = this->live_constraints;		HX_STACK_VAR(tmp,"tmp");
			HX_STACK_LINE(4659)
			::zpp_nape::util::ZNPNode_ZPP_Constraint tmp1 = tmp->head;		HX_STACK_VAR(tmp1,"tmp1");
			HX_STACK_LINE(4659)
			bool tmp2 = (tmp1 == null());		HX_STACK_VAR(tmp2,"tmp2");
			HX_STACK_LINE(4659)
			bool tmp3 = !(tmp2);		HX_STACK_VAR(tmp3,"tmp3");
			HX_STACK_LINE(4659)
			bool tmp4 = !(tmp3);		HX_STACK_VAR(tmp4,"tmp4");
			HX_STACK_LINE(4659)
			if ((tmp4)){
				HX_STACK_LINE(4659)
				break;
			}
			HX_STACK_LINE(4660)
			::zpp_nape::constraint::ZPP_Constraint tmp5;		HX_STACK_VAR(tmp5,"tmp5");
			HX_STACK_LINE(4660)
			{
				HX_STACK_LINE(4660)
				::zpp_nape::util::ZNPList_ZPP_Constraint tmp6 = this->live_constraints;		HX_STACK_VAR(tmp6,"tmp6");
				HX_STACK_LINE(4660)
				::zpp_nape::util::ZNPList_ZPP_Constraint _this = tmp6;		HX_STACK_VAR(_this,"_this");
				HX_STACK_LINE(4660)
				::zpp_nape::constraint::ZPP_Constraint tmp7 = _this->head->elt;		HX_STACK_VAR(tmp7,"tmp7");
				HX_STACK_LINE(4660)
				::zpp_nape::constraint::ZPP_Constraint ret = tmp7;		HX_STACK_VAR(ret,"ret");
				HX_STACK_LINE(4660)
				_this->pop();
				HX_STACK_LINE(4660)
				tmp5 = ret;
			}
			HX_STACK_LINE(4660)
			::zpp_nape::constraint::ZPP_Constraint o = tmp5;		HX_STACK_VAR(o,"o");
			HX_STACK_LINE(4661)
			::zpp_nape::space::ZPP_Component oc = o->component;		HX_STACK_VAR(oc,"oc");
			HX_STACK_LINE(4662)
			::zpp_nape::space::ZPP_Component tmp6;		HX_STACK_VAR(tmp6,"tmp6");
			HX_STACK_LINE(4662)
			{
				HX_STACK_LINE(4663)
				bool tmp7 = (oc == oc->parent);		HX_STACK_VAR(tmp7,"tmp7");
				HX_STACK_LINE(4663)
				if ((tmp7)){
					HX_STACK_LINE(4663)
					tmp6 = oc;
				}
				else{
					HX_STACK_LINE(4665)
					::zpp_nape::space::ZPP_Component obj = oc;		HX_STACK_VAR(obj,"obj");
					HX_STACK_LINE(4666)
					::zpp_nape::space::ZPP_Component stack = null();		HX_STACK_VAR(stack,"stack");
					HX_STACK_LINE(4667)
					while((true)){
						HX_STACK_LINE(4667)
						bool tmp8 = (obj != obj->parent);		HX_STACK_VAR(tmp8,"tmp8");
						HX_STACK_LINE(4667)
						bool tmp9 = !(tmp8);		HX_STACK_VAR(tmp9,"tmp9");
						HX_STACK_LINE(4667)
						if ((tmp9)){
							HX_STACK_LINE(4667)
							break;
						}
						HX_STACK_LINE(4668)
						::zpp_nape::space::ZPP_Component nxt = obj->parent;		HX_STACK_VAR(nxt,"nxt");
						HX_STACK_LINE(4669)
						obj->parent = stack;
						HX_STACK_LINE(4670)
						stack = obj;
						HX_STACK_LINE(4671)
						obj = nxt;
					}
					HX_STACK_LINE(4673)
					while((true)){
						HX_STACK_LINE(4673)
						bool tmp8 = (stack != null());		HX_STACK_VAR(tmp8,"tmp8");
						HX_STACK_LINE(4673)
						bool tmp9 = !(tmp8);		HX_STACK_VAR(tmp9,"tmp9");
						HX_STACK_LINE(4673)
						if ((tmp9)){
							HX_STACK_LINE(4673)
							break;
						}
						HX_STACK_LINE(4674)
						::zpp_nape::space::ZPP_Component nxt = stack->parent;		HX_STACK_VAR(nxt,"nxt");
						HX_STACK_LINE(4675)
						stack->parent = obj;
						HX_STACK_LINE(4676)
						stack = nxt;
					}
					HX_STACK_LINE(4678)
					tmp6 = obj;
				}
			}
			HX_STACK_LINE(4662)
			::zpp_nape::space::ZPP_Component root = tmp6;		HX_STACK_VAR(root,"root");
			HX_STACK_LINE(4689)
			oc->island = root->island;
			HX_STACK_LINE(4690)
			{
				HX_STACK_LINE(4690)
				::zpp_nape::util::ZNPList_ZPP_Component tmp7 = oc->island->comps;		HX_STACK_VAR(tmp7,"tmp7");
				HX_STACK_LINE(4690)
				::zpp_nape::util::ZNPList_ZPP_Component _this = tmp7;		HX_STACK_VAR(_this,"_this");
				HX_STACK_LINE(4690)
				::zpp_nape::util::ZNPNode_ZPP_Component tmp8;		HX_STACK_VAR(tmp8,"tmp8");
				HX_STACK_LINE(4690)
				{
					HX_STACK_LINE(4690)
					::zpp_nape::util::ZNPNode_ZPP_Component ret;		HX_STACK_VAR(ret,"ret");
					HX_STACK_LINE(4690)
					{
						HX_STACK_LINE(4690)
						::zpp_nape::util::ZNPNode_ZPP_Component tmp9 = ::zpp_nape::util::ZNPNode_ZPP_Component_obj::zpp_pool;		HX_STACK_VAR(tmp9,"tmp9");
						HX_STACK_LINE(4690)
						bool tmp10 = (tmp9 == null());		HX_STACK_VAR(tmp10,"tmp10");
						HX_STACK_LINE(4690)
						if ((tmp10)){
							HX_STACK_LINE(4690)
							::zpp_nape::util::ZNPNode_ZPP_Component tmp11 = ::zpp_nape::util::ZNPNode_ZPP_Component_obj::__new();		HX_STACK_VAR(tmp11,"tmp11");
							HX_STACK_LINE(4690)
							ret = tmp11;
						}
						else{
							HX_STACK_LINE(4690)
							::zpp_nape::util::ZNPNode_ZPP_Component tmp11 = ::zpp_nape::util::ZNPNode_ZPP_Component_obj::zpp_pool;		HX_STACK_VAR(tmp11,"tmp11");
							HX_STACK_LINE(4690)
							ret = tmp11;
							HX_STACK_LINE(4690)
							::zpp_nape::util::ZNPNode_ZPP_Component_obj::zpp_pool = ret->next;
							HX_STACK_LINE(4690)
							ret->next = null();
						}
						HX_STACK_LINE(4690)
						Dynamic();
					}
					HX_STACK_LINE(4690)
					ret->elt = oc;
					HX_STACK_LINE(4690)
					tmp8 = ret;
				}
				HX_STACK_LINE(4690)
				::zpp_nape::util::ZNPNode_ZPP_Component temp = tmp8;		HX_STACK_VAR(temp,"temp");
				HX_STACK_LINE(4690)
				temp->next = _this->head;
				HX_STACK_LINE(4690)
				_this->head = temp;
				HX_STACK_LINE(4690)
				_this->modified = true;
				HX_STACK_LINE(4690)
				(_this->length)++;
				HX_STACK_LINE(4690)
				oc;
			}
			HX_STACK_LINE(4691)
			int tmp7 = oc->waket;		HX_STACK_VAR(tmp7,"tmp7");
			HX_STACK_LINE(4691)
			int tmp8 = oc->island->waket;		HX_STACK_VAR(tmp8,"tmp8");
			HX_STACK_LINE(4691)
			bool tmp9 = (tmp7 > tmp8);		HX_STACK_VAR(tmp9,"tmp9");
			HX_STACK_LINE(4691)
			if ((tmp9)){
				HX_STACK_LINE(4691)
				oc->island->waket = oc->waket;
			}
		}
		HX_STACK_LINE(4693)
		while((true)){
			HX_STACK_LINE(4693)
			::zpp_nape::space::ZPP_Island tmp = this->islands;		HX_STACK_VAR(tmp,"tmp");
			HX_STACK_LINE(4693)
			::zpp_nape::space::ZPP_Island tmp1 = tmp->next;		HX_STACK_VAR(tmp1,"tmp1");
			HX_STACK_LINE(4693)
			bool tmp2 = (tmp1 == null());		HX_STACK_VAR(tmp2,"tmp2");
			HX_STACK_LINE(4693)
			bool tmp3 = !(tmp2);		HX_STACK_VAR(tmp3,"tmp3");
			HX_STACK_LINE(4693)
			bool tmp4 = !(tmp3);		HX_STACK_VAR(tmp4,"tmp4");
			HX_STACK_LINE(4693)
			if ((tmp4)){
				HX_STACK_LINE(4693)
				break;
			}
			HX_STACK_LINE(4694)
			::zpp_nape::space::ZPP_Island tmp5;		HX_STACK_VAR(tmp5,"tmp5");
			HX_STACK_LINE(4694)
			{
				HX_STACK_LINE(4694)
				::zpp_nape::space::ZPP_Island tmp6 = this->islands;		HX_STACK_VAR(tmp6,"tmp6");
				HX_STACK_LINE(4694)
				::zpp_nape::space::ZPP_Island _this = tmp6;		HX_STACK_VAR(_this,"_this");
				HX_STACK_LINE(4694)
				::zpp_nape::space::ZPP_Island ret = _this->next;		HX_STACK_VAR(ret,"ret");
				HX_STACK_LINE(4694)
				_this->pop();
				HX_STACK_LINE(4694)
				tmp5 = ret;
			}
			HX_STACK_LINE(4694)
			::zpp_nape::space::ZPP_Island i = tmp5;		HX_STACK_VAR(i,"i");
			HX_STACK_LINE(4695)
			bool tmp6 = i->sleep;		HX_STACK_VAR(tmp6,"tmp6");
			HX_STACK_LINE(4695)
			if ((tmp6)){
				HX_STACK_LINE(4697)
				::zpp_nape::util::ZNPNode_ZPP_Component tmp7 = i->comps->head;		HX_STACK_VAR(tmp7,"tmp7");
				HX_STACK_LINE(4697)
				::zpp_nape::util::ZNPNode_ZPP_Component cx_ite = tmp7;		HX_STACK_VAR(cx_ite,"cx_ite");
				HX_STACK_LINE(4698)
				while((true)){
					HX_STACK_LINE(4698)
					bool tmp8 = (cx_ite != null());		HX_STACK_VAR(tmp8,"tmp8");
					HX_STACK_LINE(4698)
					bool tmp9 = !(tmp8);		HX_STACK_VAR(tmp9,"tmp9");
					HX_STACK_LINE(4698)
					if ((tmp9)){
						HX_STACK_LINE(4698)
						break;
					}
					HX_STACK_LINE(4699)
					::zpp_nape::space::ZPP_Component c = cx_ite->elt;		HX_STACK_VAR(c,"c");
					HX_STACK_LINE(4700)
					{
						HX_STACK_LINE(4701)
						bool tmp10 = c->isBody;		HX_STACK_VAR(tmp10,"tmp10");
						HX_STACK_LINE(4701)
						if ((tmp10)){
							HX_STACK_LINE(4702)
							::zpp_nape::phys::ZPP_Body b = c->body;		HX_STACK_VAR(b,"b");
							HX_STACK_LINE(4703)
							{
								HX_STACK_LINE(4704)
								b->velx = (int)0;
								HX_STACK_LINE(4705)
								b->vely = (int)0;
								HX_STACK_LINE(4714)
								{
								}
							}
							HX_STACK_LINE(4723)
							b->angvel = (int)0;
							HX_STACK_LINE(4724)
							c->sleeping = true;
							HX_STACK_LINE(4725)
							{
								HX_STACK_LINE(4726)
								::zpp_nape::util::ZNPNode_ZPP_Shape tmp11 = b->shapes->head;		HX_STACK_VAR(tmp11,"tmp11");
								HX_STACK_LINE(4726)
								::zpp_nape::util::ZNPNode_ZPP_Shape cx_ite1 = tmp11;		HX_STACK_VAR(cx_ite1,"cx_ite1");
								HX_STACK_LINE(4727)
								while((true)){
									HX_STACK_LINE(4727)
									bool tmp12 = (cx_ite1 != null());		HX_STACK_VAR(tmp12,"tmp12");
									HX_STACK_LINE(4727)
									bool tmp13 = !(tmp12);		HX_STACK_VAR(tmp13,"tmp13");
									HX_STACK_LINE(4727)
									if ((tmp13)){
										HX_STACK_LINE(4727)
										break;
									}
									HX_STACK_LINE(4728)
									::zpp_nape::shape::ZPP_Shape shape = cx_ite1->elt;		HX_STACK_VAR(shape,"shape");
									HX_STACK_LINE(4729)
									::zpp_nape::space::ZPP_Broadphase tmp14 = this->bphase;		HX_STACK_VAR(tmp14,"tmp14");
									HX_STACK_LINE(4729)
									::zpp_nape::shape::ZPP_Shape tmp15 = shape;		HX_STACK_VAR(tmp15,"tmp15");
									HX_STACK_LINE(4729)
									tmp14->sync(tmp15);
									HX_STACK_LINE(4730)
									cx_ite1 = cx_ite1->next;
								}
							}
							HX_STACK_LINE(4733)
							::zpp_nape::phys::ZPP_Body tmp11 = b;		HX_STACK_VAR(tmp11,"tmp11");
							HX_STACK_LINE(4733)
							this->bodyCbSleep(tmp11);
						}
						else{
							HX_STACK_LINE(4736)
							::zpp_nape::constraint::ZPP_Constraint con = c->constraint;		HX_STACK_VAR(con,"con");
							HX_STACK_LINE(4737)
							::zpp_nape::constraint::ZPP_Constraint tmp11 = con;		HX_STACK_VAR(tmp11,"tmp11");
							HX_STACK_LINE(4737)
							this->constraintCbSleep(tmp11);
							HX_STACK_LINE(4738)
							c->sleeping = true;
						}
					}
					HX_STACK_LINE(4741)
					cx_ite = cx_ite->next;
				}
			}
			else{
				HX_STACK_LINE(4746)
				while((true)){
					HX_STACK_LINE(4746)
					::zpp_nape::util::ZNPNode_ZPP_Component tmp7 = i->comps->head;		HX_STACK_VAR(tmp7,"tmp7");
					HX_STACK_LINE(4746)
					bool tmp8 = (tmp7 == null());		HX_STACK_VAR(tmp8,"tmp8");
					HX_STACK_LINE(4746)
					bool tmp9 = !(tmp8);		HX_STACK_VAR(tmp9,"tmp9");
					HX_STACK_LINE(4746)
					bool tmp10 = !(tmp9);		HX_STACK_VAR(tmp10,"tmp10");
					HX_STACK_LINE(4746)
					if ((tmp10)){
						HX_STACK_LINE(4746)
						break;
					}
					HX_STACK_LINE(4747)
					::zpp_nape::space::ZPP_Component tmp11;		HX_STACK_VAR(tmp11,"tmp11");
					HX_STACK_LINE(4747)
					{
						HX_STACK_LINE(4747)
						::zpp_nape::util::ZNPList_ZPP_Component _this = i->comps;		HX_STACK_VAR(_this,"_this");
						HX_STACK_LINE(4747)
						::zpp_nape::space::ZPP_Component tmp12 = _this->head->elt;		HX_STACK_VAR(tmp12,"tmp12");
						HX_STACK_LINE(4747)
						::zpp_nape::space::ZPP_Component ret = tmp12;		HX_STACK_VAR(ret,"ret");
						HX_STACK_LINE(4747)
						_this->pop();
						HX_STACK_LINE(4747)
						tmp11 = ret;
					}
					HX_STACK_LINE(4747)
					::zpp_nape::space::ZPP_Component c = tmp11;		HX_STACK_VAR(c,"c");
					HX_STACK_LINE(4748)
					c->waket = i->waket;
					HX_STACK_LINE(4749)
					bool tmp12 = c->isBody;		HX_STACK_VAR(tmp12,"tmp12");
					HX_STACK_LINE(4749)
					if ((tmp12)){
						HX_STACK_LINE(4749)
						::zpp_nape::util::ZNPList_ZPP_Body tmp13 = this->live;		HX_STACK_VAR(tmp13,"tmp13");
						HX_STACK_LINE(4749)
						::zpp_nape::util::ZNPList_ZPP_Body _this = tmp13;		HX_STACK_VAR(_this,"_this");
						HX_STACK_LINE(4749)
						::zpp_nape::phys::ZPP_Body o = c->body;		HX_STACK_VAR(o,"o");
						HX_STACK_LINE(4749)
						::zpp_nape::util::ZNPNode_ZPP_Body tmp14;		HX_STACK_VAR(tmp14,"tmp14");
						HX_STACK_LINE(4749)
						{
							HX_STACK_LINE(4749)
							::zpp_nape::util::ZNPNode_ZPP_Body ret;		HX_STACK_VAR(ret,"ret");
							HX_STACK_LINE(4749)
							{
								HX_STACK_LINE(4749)
								::zpp_nape::util::ZNPNode_ZPP_Body tmp15 = ::zpp_nape::util::ZNPNode_ZPP_Body_obj::zpp_pool;		HX_STACK_VAR(tmp15,"tmp15");
								HX_STACK_LINE(4749)
								bool tmp16 = (tmp15 == null());		HX_STACK_VAR(tmp16,"tmp16");
								HX_STACK_LINE(4749)
								if ((tmp16)){
									HX_STACK_LINE(4749)
									::zpp_nape::util::ZNPNode_ZPP_Body tmp17 = ::zpp_nape::util::ZNPNode_ZPP_Body_obj::__new();		HX_STACK_VAR(tmp17,"tmp17");
									HX_STACK_LINE(4749)
									ret = tmp17;
								}
								else{
									HX_STACK_LINE(4749)
									::zpp_nape::util::ZNPNode_ZPP_Body tmp17 = ::zpp_nape::util::ZNPNode_ZPP_Body_obj::zpp_pool;		HX_STACK_VAR(tmp17,"tmp17");
									HX_STACK_LINE(4749)
									ret = tmp17;
									HX_STACK_LINE(4749)
									::zpp_nape::util::ZNPNode_ZPP_Body_obj::zpp_pool = ret->next;
									HX_STACK_LINE(4749)
									ret->next = null();
								}
								HX_STACK_LINE(4749)
								Dynamic();
							}
							HX_STACK_LINE(4749)
							ret->elt = o;
							HX_STACK_LINE(4749)
							tmp14 = ret;
						}
						HX_STACK_LINE(4749)
						::zpp_nape::util::ZNPNode_ZPP_Body temp = tmp14;		HX_STACK_VAR(temp,"temp");
						HX_STACK_LINE(4749)
						temp->next = _this->head;
						HX_STACK_LINE(4749)
						_this->head = temp;
						HX_STACK_LINE(4749)
						_this->modified = true;
						HX_STACK_LINE(4749)
						(_this->length)++;
						HX_STACK_LINE(4749)
						o;
					}
					else{
						HX_STACK_LINE(4750)
						::zpp_nape::util::ZNPList_ZPP_Constraint tmp13 = this->live_constraints;		HX_STACK_VAR(tmp13,"tmp13");
						HX_STACK_LINE(4750)
						::zpp_nape::util::ZNPList_ZPP_Constraint _this = tmp13;		HX_STACK_VAR(_this,"_this");
						HX_STACK_LINE(4750)
						::zpp_nape::constraint::ZPP_Constraint o = c->constraint;		HX_STACK_VAR(o,"o");
						HX_STACK_LINE(4750)
						::zpp_nape::util::ZNPNode_ZPP_Constraint tmp14;		HX_STACK_VAR(tmp14,"tmp14");
						HX_STACK_LINE(4750)
						{
							HX_STACK_LINE(4750)
							::zpp_nape::util::ZNPNode_ZPP_Constraint ret;		HX_STACK_VAR(ret,"ret");
							HX_STACK_LINE(4750)
							{
								HX_STACK_LINE(4750)
								::zpp_nape::util::ZNPNode_ZPP_Constraint tmp15 = ::zpp_nape::util::ZNPNode_ZPP_Constraint_obj::zpp_pool;		HX_STACK_VAR(tmp15,"tmp15");
								HX_STACK_LINE(4750)
								bool tmp16 = (tmp15 == null());		HX_STACK_VAR(tmp16,"tmp16");
								HX_STACK_LINE(4750)
								if ((tmp16)){
									HX_STACK_LINE(4750)
									::zpp_nape::util::ZNPNode_ZPP_Constraint tmp17 = ::zpp_nape::util::ZNPNode_ZPP_Constraint_obj::__new();		HX_STACK_VAR(tmp17,"tmp17");
									HX_STACK_LINE(4750)
									ret = tmp17;
								}
								else{
									HX_STACK_LINE(4750)
									::zpp_nape::util::ZNPNode_ZPP_Constraint tmp17 = ::zpp_nape::util::ZNPNode_ZPP_Constraint_obj::zpp_pool;		HX_STACK_VAR(tmp17,"tmp17");
									HX_STACK_LINE(4750)
									ret = tmp17;
									HX_STACK_LINE(4750)
									::zpp_nape::util::ZNPNode_ZPP_Constraint_obj::zpp_pool = ret->next;
									HX_STACK_LINE(4750)
									ret->next = null();
								}
								HX_STACK_LINE(4750)
								Dynamic();
							}
							HX_STACK_LINE(4750)
							ret->elt = o;
							HX_STACK_LINE(4750)
							tmp14 = ret;
						}
						HX_STACK_LINE(4750)
						::zpp_nape::util::ZNPNode_ZPP_Constraint temp = tmp14;		HX_STACK_VAR(temp,"temp");
						HX_STACK_LINE(4750)
						temp->next = _this->head;
						HX_STACK_LINE(4750)
						_this->head = temp;
						HX_STACK_LINE(4750)
						_this->modified = true;
						HX_STACK_LINE(4750)
						(_this->length)++;
						HX_STACK_LINE(4750)
						o;
					}
					HX_STACK_LINE(4751)
					{
						HX_STACK_LINE(4751)
						c->sleeping = false;
						HX_STACK_LINE(4751)
						c->island = null();
						HX_STACK_LINE(4751)
						c->parent = c;
						HX_STACK_LINE(4751)
						c->rank = (int)0;
					}
				}
				HX_STACK_LINE(4753)
				{
					HX_STACK_LINE(4754)
					::zpp_nape::space::ZPP_Island o = i;		HX_STACK_VAR(o,"o");
					HX_STACK_LINE(4764)
					::zpp_nape::space::ZPP_Island tmp7 = ::zpp_nape::space::ZPP_Island_obj::zpp_pool;		HX_STACK_VAR(tmp7,"tmp7");
					HX_STACK_LINE(4764)
					o->next = tmp7;
					HX_STACK_LINE(4765)
					::zpp_nape::space::ZPP_Island_obj::zpp_pool = o;
				}
			}
		}
	}
return null();
}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Space_obj,doForests,(void))

Void ZPP_Space_obj::sleepArbiters( ){
{
		HX_STACK_FRAME("zpp_nape.space.ZPP_Space","sleepArbiters",0xb30aff6b,"zpp_nape.space.ZPP_Space.sleepArbiters","zpp_nape/space/Space.hx",4773,0x2b65ed03)
		HX_STACK_THIS(this)
		HX_STACK_LINE(4774)
		{
			HX_STACK_LINE(4775)
			::zpp_nape::util::ZNPNode_ZPP_ColArbiter pre = null();		HX_STACK_VAR(pre,"pre");
			HX_STACK_LINE(4776)
			::zpp_nape::util::ZNPList_ZPP_ColArbiter tmp = this->c_arbiters_true;		HX_STACK_VAR(tmp,"tmp");
			HX_STACK_LINE(4776)
			::zpp_nape::util::ZNPList_ZPP_ColArbiter arbs = tmp;		HX_STACK_VAR(arbs,"arbs");
			HX_STACK_LINE(4777)
			::zpp_nape::util::ZNPNode_ZPP_ColArbiter arbite = arbs->head;		HX_STACK_VAR(arbite,"arbite");
			HX_STACK_LINE(4778)
			::zpp_nape::util::ZNPList_ZPP_ColArbiter tmp1 = this->c_arbiters_false;		HX_STACK_VAR(tmp1,"tmp1");
			HX_STACK_LINE(4778)
			bool tmp2 = (tmp1 != null());		HX_STACK_VAR(tmp2,"tmp2");
			HX_STACK_LINE(4778)
			bool fst = tmp2;		HX_STACK_VAR(fst,"fst");
			HX_STACK_LINE(4779)
			{
				HX_STACK_LINE(4780)
				bool tmp3 = fst;		HX_STACK_VAR(tmp3,"tmp3");
				HX_STACK_LINE(4780)
				bool tmp4;		HX_STACK_VAR(tmp4,"tmp4");
				HX_STACK_LINE(4780)
				if ((tmp3)){
					HX_STACK_LINE(4780)
					tmp4 = (arbite == null());
				}
				else{
					HX_STACK_LINE(4780)
					tmp4 = false;
				}
				HX_STACK_LINE(4780)
				if ((tmp4)){
					HX_STACK_LINE(4781)
					fst = false;
					HX_STACK_LINE(4782)
					::zpp_nape::util::ZNPList_ZPP_ColArbiter tmp5 = this->c_arbiters_false;		HX_STACK_VAR(tmp5,"tmp5");
					HX_STACK_LINE(4782)
					arbite = tmp5->head;
					HX_STACK_LINE(4783)
					::zpp_nape::util::ZNPList_ZPP_ColArbiter tmp6 = this->c_arbiters_false;		HX_STACK_VAR(tmp6,"tmp6");
					HX_STACK_LINE(4783)
					arbs = tmp6;
					HX_STACK_LINE(4784)
					pre = null();
				}
			}
			HX_STACK_LINE(4787)
			while((true)){
				HX_STACK_LINE(4787)
				bool tmp3 = (arbite != null());		HX_STACK_VAR(tmp3,"tmp3");
				HX_STACK_LINE(4787)
				bool tmp4 = !(tmp3);		HX_STACK_VAR(tmp4,"tmp4");
				HX_STACK_LINE(4787)
				if ((tmp4)){
					HX_STACK_LINE(4787)
					break;
				}
				HX_STACK_LINE(4788)
				::zpp_nape::dynamics::ZPP_ColArbiter arb = arbite->elt;		HX_STACK_VAR(arb,"arb");
				HX_STACK_LINE(4797)
				::zpp_nape::space::ZPP_Component tmp5 = arb->b1->component;		HX_STACK_VAR(tmp5,"tmp5");
				HX_STACK_LINE(4797)
				bool tmp6 = tmp5->sleeping;		HX_STACK_VAR(tmp6,"tmp6");
				HX_STACK_LINE(4797)
				bool tmp7;		HX_STACK_VAR(tmp7,"tmp7");
				HX_STACK_LINE(4797)
				if ((tmp6)){
					HX_STACK_LINE(4797)
					::zpp_nape::space::ZPP_Component tmp8 = arb->b2->component;		HX_STACK_VAR(tmp8,"tmp8");
					HX_STACK_LINE(4797)
					::zpp_nape::space::ZPP_Component tmp9 = tmp8;		HX_STACK_VAR(tmp9,"tmp9");
					HX_STACK_LINE(4797)
					tmp7 = tmp9->sleeping;
				}
				else{
					HX_STACK_LINE(4797)
					tmp7 = false;
				}
				HX_STACK_LINE(4797)
				if ((tmp7)){
					HX_STACK_LINE(4798)
					int tmp8 = this->stamp;		HX_STACK_VAR(tmp8,"tmp8");
					HX_STACK_LINE(4798)
					arb->sleep_stamp = tmp8;
					HX_STACK_LINE(4799)
					arb->sleeping = true;
					HX_STACK_LINE(4800)
					::zpp_nape::util::ZNPNode_ZPP_ColArbiter tmp9;		HX_STACK_VAR(tmp9,"tmp9");
					HX_STACK_LINE(4800)
					{
						HX_STACK_LINE(4800)
						::zpp_nape::util::ZNPNode_ZPP_ColArbiter old;		HX_STACK_VAR(old,"old");
						HX_STACK_LINE(4800)
						::zpp_nape::util::ZNPNode_ZPP_ColArbiter ret;		HX_STACK_VAR(ret,"ret");
						HX_STACK_LINE(4800)
						bool tmp10 = (pre == null());		HX_STACK_VAR(tmp10,"tmp10");
						HX_STACK_LINE(4800)
						if ((tmp10)){
							HX_STACK_LINE(4800)
							old = arbs->head;
							HX_STACK_LINE(4800)
							ret = old->next;
							HX_STACK_LINE(4800)
							arbs->head = ret;
							HX_STACK_LINE(4800)
							bool tmp11 = (arbs->head == null());		HX_STACK_VAR(tmp11,"tmp11");
							HX_STACK_LINE(4800)
							if ((tmp11)){
								HX_STACK_LINE(4800)
								arbs->pushmod = true;
							}
						}
						else{
							HX_STACK_LINE(4800)
							old = pre->next;
							HX_STACK_LINE(4800)
							ret = old->next;
							HX_STACK_LINE(4800)
							pre->next = ret;
							HX_STACK_LINE(4800)
							bool tmp11 = (ret == null());		HX_STACK_VAR(tmp11,"tmp11");
							HX_STACK_LINE(4800)
							if ((tmp11)){
								HX_STACK_LINE(4800)
								arbs->pushmod = true;
							}
						}
						HX_STACK_LINE(4800)
						{
							HX_STACK_LINE(4800)
							::zpp_nape::util::ZNPNode_ZPP_ColArbiter o = old;		HX_STACK_VAR(o,"o");
							HX_STACK_LINE(4800)
							o->elt = null();
							HX_STACK_LINE(4800)
							::zpp_nape::util::ZNPNode_ZPP_ColArbiter tmp11 = ::zpp_nape::util::ZNPNode_ZPP_ColArbiter_obj::zpp_pool;		HX_STACK_VAR(tmp11,"tmp11");
							HX_STACK_LINE(4800)
							o->next = tmp11;
							HX_STACK_LINE(4800)
							::zpp_nape::util::ZNPNode_ZPP_ColArbiter_obj::zpp_pool = o;
						}
						HX_STACK_LINE(4800)
						arbs->modified = true;
						HX_STACK_LINE(4800)
						(arbs->length)--;
						HX_STACK_LINE(4800)
						arbs->pushmod = true;
						HX_STACK_LINE(4800)
						tmp9 = ret;
					}
					HX_STACK_LINE(4800)
					arbite = tmp9;
					HX_STACK_LINE(4801)
					{
						HX_STACK_LINE(4802)
						bool tmp10 = fst;		HX_STACK_VAR(tmp10,"tmp10");
						HX_STACK_LINE(4802)
						bool tmp11;		HX_STACK_VAR(tmp11,"tmp11");
						HX_STACK_LINE(4802)
						if ((tmp10)){
							HX_STACK_LINE(4802)
							tmp11 = (arbite == null());
						}
						else{
							HX_STACK_LINE(4802)
							tmp11 = false;
						}
						HX_STACK_LINE(4802)
						if ((tmp11)){
							HX_STACK_LINE(4803)
							fst = false;
							HX_STACK_LINE(4804)
							::zpp_nape::util::ZNPList_ZPP_ColArbiter tmp12 = this->c_arbiters_false;		HX_STACK_VAR(tmp12,"tmp12");
							HX_STACK_LINE(4804)
							arbite = tmp12->head;
							HX_STACK_LINE(4805)
							::zpp_nape::util::ZNPList_ZPP_ColArbiter tmp13 = this->c_arbiters_false;		HX_STACK_VAR(tmp13,"tmp13");
							HX_STACK_LINE(4805)
							arbs = tmp13;
							HX_STACK_LINE(4806)
							pre = null();
						}
					}
					HX_STACK_LINE(4809)
					continue;
				}
				HX_STACK_LINE(4811)
				pre = arbite;
				HX_STACK_LINE(4812)
				arbite = arbite->next;
				HX_STACK_LINE(4813)
				{
					HX_STACK_LINE(4814)
					bool tmp8 = fst;		HX_STACK_VAR(tmp8,"tmp8");
					HX_STACK_LINE(4814)
					bool tmp9;		HX_STACK_VAR(tmp9,"tmp9");
					HX_STACK_LINE(4814)
					if ((tmp8)){
						HX_STACK_LINE(4814)
						tmp9 = (arbite == null());
					}
					else{
						HX_STACK_LINE(4814)
						tmp9 = false;
					}
					HX_STACK_LINE(4814)
					if ((tmp9)){
						HX_STACK_LINE(4815)
						fst = false;
						HX_STACK_LINE(4816)
						::zpp_nape::util::ZNPList_ZPP_ColArbiter tmp10 = this->c_arbiters_false;		HX_STACK_VAR(tmp10,"tmp10");
						HX_STACK_LINE(4816)
						arbite = tmp10->head;
						HX_STACK_LINE(4817)
						::zpp_nape::util::ZNPList_ZPP_ColArbiter tmp11 = this->c_arbiters_false;		HX_STACK_VAR(tmp11,"tmp11");
						HX_STACK_LINE(4817)
						arbs = tmp11;
						HX_STACK_LINE(4818)
						pre = null();
					}
				}
			}
		}
		HX_STACK_LINE(4823)
		{
			HX_STACK_LINE(4824)
			::zpp_nape::util::ZNPNode_ZPP_FluidArbiter pre = null();		HX_STACK_VAR(pre,"pre");
			HX_STACK_LINE(4825)
			::zpp_nape::util::ZNPList_ZPP_FluidArbiter tmp = this->f_arbiters;		HX_STACK_VAR(tmp,"tmp");
			HX_STACK_LINE(4825)
			::zpp_nape::util::ZNPList_ZPP_FluidArbiter arbs = tmp;		HX_STACK_VAR(arbs,"arbs");
			HX_STACK_LINE(4826)
			::zpp_nape::util::ZNPNode_ZPP_FluidArbiter arbite = arbs->head;		HX_STACK_VAR(arbite,"arbite");
			HX_STACK_LINE(4827)
			bool tmp1 = false;		HX_STACK_VAR(tmp1,"tmp1");
			HX_STACK_LINE(4827)
			bool fst = tmp1;		HX_STACK_VAR(fst,"fst");
			HX_STACK_LINE(4828)
			{
				HX_STACK_LINE(4829)
				bool tmp2 = fst;		HX_STACK_VAR(tmp2,"tmp2");
				HX_STACK_LINE(4829)
				bool tmp3;		HX_STACK_VAR(tmp3,"tmp3");
				HX_STACK_LINE(4829)
				if ((tmp2)){
					HX_STACK_LINE(4829)
					tmp3 = (arbite == null());
				}
				else{
					HX_STACK_LINE(4829)
					tmp3 = false;
				}
				HX_STACK_LINE(4829)
				if ((tmp3)){
					HX_STACK_LINE(4830)
					fst = false;
					HX_STACK_LINE(4832)
					arbs = null();
					HX_STACK_LINE(4833)
					pre = null();
				}
			}
			HX_STACK_LINE(4836)
			while((true)){
				HX_STACK_LINE(4836)
				bool tmp2 = (arbite != null());		HX_STACK_VAR(tmp2,"tmp2");
				HX_STACK_LINE(4836)
				bool tmp3 = !(tmp2);		HX_STACK_VAR(tmp3,"tmp3");
				HX_STACK_LINE(4836)
				if ((tmp3)){
					HX_STACK_LINE(4836)
					break;
				}
				HX_STACK_LINE(4837)
				::zpp_nape::dynamics::ZPP_FluidArbiter arb = arbite->elt;		HX_STACK_VAR(arb,"arb");
				HX_STACK_LINE(4846)
				::zpp_nape::space::ZPP_Component tmp4 = arb->b1->component;		HX_STACK_VAR(tmp4,"tmp4");
				HX_STACK_LINE(4846)
				bool tmp5 = tmp4->sleeping;		HX_STACK_VAR(tmp5,"tmp5");
				HX_STACK_LINE(4846)
				bool tmp6;		HX_STACK_VAR(tmp6,"tmp6");
				HX_STACK_LINE(4846)
				if ((tmp5)){
					HX_STACK_LINE(4846)
					::zpp_nape::space::ZPP_Component tmp7 = arb->b2->component;		HX_STACK_VAR(tmp7,"tmp7");
					HX_STACK_LINE(4846)
					::zpp_nape::space::ZPP_Component tmp8 = tmp7;		HX_STACK_VAR(tmp8,"tmp8");
					HX_STACK_LINE(4846)
					tmp6 = tmp8->sleeping;
				}
				else{
					HX_STACK_LINE(4846)
					tmp6 = false;
				}
				HX_STACK_LINE(4846)
				if ((tmp6)){
					HX_STACK_LINE(4847)
					int tmp7 = this->stamp;		HX_STACK_VAR(tmp7,"tmp7");
					HX_STACK_LINE(4847)
					arb->sleep_stamp = tmp7;
					HX_STACK_LINE(4848)
					arb->sleeping = true;
					HX_STACK_LINE(4849)
					::zpp_nape::util::ZNPNode_ZPP_FluidArbiter tmp8;		HX_STACK_VAR(tmp8,"tmp8");
					HX_STACK_LINE(4849)
					{
						HX_STACK_LINE(4849)
						::zpp_nape::util::ZNPNode_ZPP_FluidArbiter old;		HX_STACK_VAR(old,"old");
						HX_STACK_LINE(4849)
						::zpp_nape::util::ZNPNode_ZPP_FluidArbiter ret;		HX_STACK_VAR(ret,"ret");
						HX_STACK_LINE(4849)
						bool tmp9 = (pre == null());		HX_STACK_VAR(tmp9,"tmp9");
						HX_STACK_LINE(4849)
						if ((tmp9)){
							HX_STACK_LINE(4849)
							old = arbs->head;
							HX_STACK_LINE(4849)
							ret = old->next;
							HX_STACK_LINE(4849)
							arbs->head = ret;
							HX_STACK_LINE(4849)
							bool tmp10 = (arbs->head == null());		HX_STACK_VAR(tmp10,"tmp10");
							HX_STACK_LINE(4849)
							if ((tmp10)){
								HX_STACK_LINE(4849)
								arbs->pushmod = true;
							}
						}
						else{
							HX_STACK_LINE(4849)
							old = pre->next;
							HX_STACK_LINE(4849)
							ret = old->next;
							HX_STACK_LINE(4849)
							pre->next = ret;
							HX_STACK_LINE(4849)
							bool tmp10 = (ret == null());		HX_STACK_VAR(tmp10,"tmp10");
							HX_STACK_LINE(4849)
							if ((tmp10)){
								HX_STACK_LINE(4849)
								arbs->pushmod = true;
							}
						}
						HX_STACK_LINE(4849)
						{
							HX_STACK_LINE(4849)
							::zpp_nape::util::ZNPNode_ZPP_FluidArbiter o = old;		HX_STACK_VAR(o,"o");
							HX_STACK_LINE(4849)
							o->elt = null();
							HX_STACK_LINE(4849)
							::zpp_nape::util::ZNPNode_ZPP_FluidArbiter tmp10 = ::zpp_nape::util::ZNPNode_ZPP_FluidArbiter_obj::zpp_pool;		HX_STACK_VAR(tmp10,"tmp10");
							HX_STACK_LINE(4849)
							o->next = tmp10;
							HX_STACK_LINE(4849)
							::zpp_nape::util::ZNPNode_ZPP_FluidArbiter_obj::zpp_pool = o;
						}
						HX_STACK_LINE(4849)
						arbs->modified = true;
						HX_STACK_LINE(4849)
						(arbs->length)--;
						HX_STACK_LINE(4849)
						arbs->pushmod = true;
						HX_STACK_LINE(4849)
						tmp8 = ret;
					}
					HX_STACK_LINE(4849)
					arbite = tmp8;
					HX_STACK_LINE(4850)
					{
						HX_STACK_LINE(4851)
						bool tmp9 = fst;		HX_STACK_VAR(tmp9,"tmp9");
						HX_STACK_LINE(4851)
						bool tmp10;		HX_STACK_VAR(tmp10,"tmp10");
						HX_STACK_LINE(4851)
						if ((tmp9)){
							HX_STACK_LINE(4851)
							tmp10 = (arbite == null());
						}
						else{
							HX_STACK_LINE(4851)
							tmp10 = false;
						}
						HX_STACK_LINE(4851)
						if ((tmp10)){
							HX_STACK_LINE(4852)
							fst = false;
							HX_STACK_LINE(4854)
							arbs = null();
							HX_STACK_LINE(4855)
							pre = null();
						}
					}
					HX_STACK_LINE(4858)
					continue;
				}
				HX_STACK_LINE(4860)
				pre = arbite;
				HX_STACK_LINE(4861)
				arbite = arbite->next;
				HX_STACK_LINE(4862)
				{
					HX_STACK_LINE(4863)
					bool tmp7 = fst;		HX_STACK_VAR(tmp7,"tmp7");
					HX_STACK_LINE(4863)
					bool tmp8;		HX_STACK_VAR(tmp8,"tmp8");
					HX_STACK_LINE(4863)
					if ((tmp7)){
						HX_STACK_LINE(4863)
						tmp8 = (arbite == null());
					}
					else{
						HX_STACK_LINE(4863)
						tmp8 = false;
					}
					HX_STACK_LINE(4863)
					if ((tmp8)){
						HX_STACK_LINE(4864)
						fst = false;
						HX_STACK_LINE(4866)
						arbs = null();
						HX_STACK_LINE(4867)
						pre = null();
					}
				}
			}
		}
		HX_STACK_LINE(4872)
		{
			HX_STACK_LINE(4873)
			::zpp_nape::util::ZNPNode_ZPP_SensorArbiter pre = null();		HX_STACK_VAR(pre,"pre");
			HX_STACK_LINE(4874)
			::zpp_nape::util::ZNPList_ZPP_SensorArbiter tmp = this->s_arbiters;		HX_STACK_VAR(tmp,"tmp");
			HX_STACK_LINE(4874)
			::zpp_nape::util::ZNPList_ZPP_SensorArbiter arbs = tmp;		HX_STACK_VAR(arbs,"arbs");
			HX_STACK_LINE(4875)
			::zpp_nape::util::ZNPNode_ZPP_SensorArbiter arbite = arbs->head;		HX_STACK_VAR(arbite,"arbite");
			HX_STACK_LINE(4876)
			bool tmp1 = false;		HX_STACK_VAR(tmp1,"tmp1");
			HX_STACK_LINE(4876)
			bool fst = tmp1;		HX_STACK_VAR(fst,"fst");
			HX_STACK_LINE(4877)
			{
				HX_STACK_LINE(4878)
				bool tmp2 = fst;		HX_STACK_VAR(tmp2,"tmp2");
				HX_STACK_LINE(4878)
				bool tmp3;		HX_STACK_VAR(tmp3,"tmp3");
				HX_STACK_LINE(4878)
				if ((tmp2)){
					HX_STACK_LINE(4878)
					tmp3 = (arbite == null());
				}
				else{
					HX_STACK_LINE(4878)
					tmp3 = false;
				}
				HX_STACK_LINE(4878)
				if ((tmp3)){
					HX_STACK_LINE(4879)
					fst = false;
					HX_STACK_LINE(4881)
					arbs = null();
					HX_STACK_LINE(4882)
					pre = null();
				}
			}
			HX_STACK_LINE(4885)
			while((true)){
				HX_STACK_LINE(4885)
				bool tmp2 = (arbite != null());		HX_STACK_VAR(tmp2,"tmp2");
				HX_STACK_LINE(4885)
				bool tmp3 = !(tmp2);		HX_STACK_VAR(tmp3,"tmp3");
				HX_STACK_LINE(4885)
				if ((tmp3)){
					HX_STACK_LINE(4885)
					break;
				}
				HX_STACK_LINE(4886)
				::zpp_nape::dynamics::ZPP_SensorArbiter arb = arbite->elt;		HX_STACK_VAR(arb,"arb");
				HX_STACK_LINE(4895)
				::zpp_nape::space::ZPP_Component tmp4 = arb->b1->component;		HX_STACK_VAR(tmp4,"tmp4");
				HX_STACK_LINE(4895)
				bool tmp5 = tmp4->sleeping;		HX_STACK_VAR(tmp5,"tmp5");
				HX_STACK_LINE(4895)
				bool tmp6;		HX_STACK_VAR(tmp6,"tmp6");
				HX_STACK_LINE(4895)
				if ((tmp5)){
					HX_STACK_LINE(4895)
					::zpp_nape::space::ZPP_Component tmp7 = arb->b2->component;		HX_STACK_VAR(tmp7,"tmp7");
					HX_STACK_LINE(4895)
					::zpp_nape::space::ZPP_Component tmp8 = tmp7;		HX_STACK_VAR(tmp8,"tmp8");
					HX_STACK_LINE(4895)
					tmp6 = tmp8->sleeping;
				}
				else{
					HX_STACK_LINE(4895)
					tmp6 = false;
				}
				HX_STACK_LINE(4895)
				if ((tmp6)){
					HX_STACK_LINE(4896)
					int tmp7 = this->stamp;		HX_STACK_VAR(tmp7,"tmp7");
					HX_STACK_LINE(4896)
					arb->sleep_stamp = tmp7;
					HX_STACK_LINE(4897)
					arb->sleeping = true;
					HX_STACK_LINE(4898)
					::zpp_nape::util::ZNPNode_ZPP_SensorArbiter tmp8;		HX_STACK_VAR(tmp8,"tmp8");
					HX_STACK_LINE(4898)
					{
						HX_STACK_LINE(4898)
						::zpp_nape::util::ZNPNode_ZPP_SensorArbiter old;		HX_STACK_VAR(old,"old");
						HX_STACK_LINE(4898)
						::zpp_nape::util::ZNPNode_ZPP_SensorArbiter ret;		HX_STACK_VAR(ret,"ret");
						HX_STACK_LINE(4898)
						bool tmp9 = (pre == null());		HX_STACK_VAR(tmp9,"tmp9");
						HX_STACK_LINE(4898)
						if ((tmp9)){
							HX_STACK_LINE(4898)
							old = arbs->head;
							HX_STACK_LINE(4898)
							ret = old->next;
							HX_STACK_LINE(4898)
							arbs->head = ret;
							HX_STACK_LINE(4898)
							bool tmp10 = (arbs->head == null());		HX_STACK_VAR(tmp10,"tmp10");
							HX_STACK_LINE(4898)
							if ((tmp10)){
								HX_STACK_LINE(4898)
								arbs->pushmod = true;
							}
						}
						else{
							HX_STACK_LINE(4898)
							old = pre->next;
							HX_STACK_LINE(4898)
							ret = old->next;
							HX_STACK_LINE(4898)
							pre->next = ret;
							HX_STACK_LINE(4898)
							bool tmp10 = (ret == null());		HX_STACK_VAR(tmp10,"tmp10");
							HX_STACK_LINE(4898)
							if ((tmp10)){
								HX_STACK_LINE(4898)
								arbs->pushmod = true;
							}
						}
						HX_STACK_LINE(4898)
						{
							HX_STACK_LINE(4898)
							::zpp_nape::util::ZNPNode_ZPP_SensorArbiter o = old;		HX_STACK_VAR(o,"o");
							HX_STACK_LINE(4898)
							o->elt = null();
							HX_STACK_LINE(4898)
							::zpp_nape::util::ZNPNode_ZPP_SensorArbiter tmp10 = ::zpp_nape::util::ZNPNode_ZPP_SensorArbiter_obj::zpp_pool;		HX_STACK_VAR(tmp10,"tmp10");
							HX_STACK_LINE(4898)
							o->next = tmp10;
							HX_STACK_LINE(4898)
							::zpp_nape::util::ZNPNode_ZPP_SensorArbiter_obj::zpp_pool = o;
						}
						HX_STACK_LINE(4898)
						arbs->modified = true;
						HX_STACK_LINE(4898)
						(arbs->length)--;
						HX_STACK_LINE(4898)
						arbs->pushmod = true;
						HX_STACK_LINE(4898)
						tmp8 = ret;
					}
					HX_STACK_LINE(4898)
					arbite = tmp8;
					HX_STACK_LINE(4899)
					{
						HX_STACK_LINE(4900)
						bool tmp9 = fst;		HX_STACK_VAR(tmp9,"tmp9");
						HX_STACK_LINE(4900)
						bool tmp10;		HX_STACK_VAR(tmp10,"tmp10");
						HX_STACK_LINE(4900)
						if ((tmp9)){
							HX_STACK_LINE(4900)
							tmp10 = (arbite == null());
						}
						else{
							HX_STACK_LINE(4900)
							tmp10 = false;
						}
						HX_STACK_LINE(4900)
						if ((tmp10)){
							HX_STACK_LINE(4901)
							fst = false;
							HX_STACK_LINE(4903)
							arbs = null();
							HX_STACK_LINE(4904)
							pre = null();
						}
					}
					HX_STACK_LINE(4907)
					continue;
				}
				HX_STACK_LINE(4909)
				pre = arbite;
				HX_STACK_LINE(4910)
				arbite = arbite->next;
				HX_STACK_LINE(4911)
				{
					HX_STACK_LINE(4912)
					bool tmp7 = fst;		HX_STACK_VAR(tmp7,"tmp7");
					HX_STACK_LINE(4912)
					bool tmp8;		HX_STACK_VAR(tmp8,"tmp8");
					HX_STACK_LINE(4912)
					if ((tmp7)){
						HX_STACK_LINE(4912)
						tmp8 = (arbite == null());
					}
					else{
						HX_STACK_LINE(4912)
						tmp8 = false;
					}
					HX_STACK_LINE(4912)
					if ((tmp8)){
						HX_STACK_LINE(4913)
						fst = false;
						HX_STACK_LINE(4915)
						arbs = null();
						HX_STACK_LINE(4916)
						pre = null();
					}
				}
			}
		}
	}
return null();
}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Space_obj,sleepArbiters,(void))

Void ZPP_Space_obj::static_validation( ::zpp_nape::phys::ZPP_Body body){
{
		HX_STACK_FRAME("zpp_nape.space.ZPP_Space","static_validation",0xfc081734,"zpp_nape.space.ZPP_Space.static_validation","zpp_nape/space/Space.hx",4922,0x2b65ed03)
		HX_STACK_THIS(this)
		HX_STACK_ARG(body,"body")
		HX_STACK_LINE(4923)
		::zpp_nape::util::ZNPNode_ZPP_Shape tmp = body->shapes->head;		HX_STACK_VAR(tmp,"tmp");
		HX_STACK_LINE(4923)
		bool tmp1 = (tmp == null());		HX_STACK_VAR(tmp1,"tmp1");
		HX_STACK_LINE(4923)
		bool tmp2 = !(tmp1);		HX_STACK_VAR(tmp2,"tmp2");
		HX_STACK_LINE(4923)
		if ((tmp2)){
			HX_STACK_LINE(4924)
			::zpp_nape::util::ZNPNode_ZPP_Shape tmp3 = body->shapes->head;		HX_STACK_VAR(tmp3,"tmp3");
			HX_STACK_LINE(4924)
			bool tmp4 = (tmp3 == null());		HX_STACK_VAR(tmp4,"tmp4");
			HX_STACK_LINE(4924)
			if ((tmp4)){
				HX_STACK_LINE(4924)
				HX_STACK_DO_THROW(HX_HCSTRING("Error: Body bounds only makes sense if it contains shapes","\x7b","\xb0","\x85","\x6c"));
			}
			HX_STACK_LINE(4924)
			bool tmp5 = body->zip_aabb;		HX_STACK_VAR(tmp5,"tmp5");
			HX_STACK_LINE(4924)
			if ((tmp5)){
				HX_STACK_LINE(4924)
				body->zip_aabb = false;
				HX_STACK_LINE(4924)
				{
					HX_STACK_LINE(4924)
					Float tmp6 = ::Math_obj::POSITIVE_INFINITY;		HX_STACK_VAR(tmp6,"tmp6");
					HX_STACK_LINE(4924)
					body->aabb->minx = tmp6;
					HX_STACK_LINE(4924)
					Float tmp7 = ::Math_obj::POSITIVE_INFINITY;		HX_STACK_VAR(tmp7,"tmp7");
					HX_STACK_LINE(4924)
					body->aabb->miny = tmp7;
					HX_STACK_LINE(4924)
					{
					}
				}
				HX_STACK_LINE(4924)
				{
					HX_STACK_LINE(4924)
					Float tmp6 = ::Math_obj::NEGATIVE_INFINITY;		HX_STACK_VAR(tmp6,"tmp6");
					HX_STACK_LINE(4924)
					body->aabb->maxx = tmp6;
					HX_STACK_LINE(4924)
					Float tmp7 = ::Math_obj::NEGATIVE_INFINITY;		HX_STACK_VAR(tmp7,"tmp7");
					HX_STACK_LINE(4924)
					body->aabb->maxy = tmp7;
					HX_STACK_LINE(4924)
					{
					}
				}
				HX_STACK_LINE(4924)
				{
					HX_STACK_LINE(4924)
					::zpp_nape::util::ZNPNode_ZPP_Shape tmp6 = body->shapes->head;		HX_STACK_VAR(tmp6,"tmp6");
					HX_STACK_LINE(4924)
					::zpp_nape::util::ZNPNode_ZPP_Shape cx_ite = tmp6;		HX_STACK_VAR(cx_ite,"cx_ite");
					HX_STACK_LINE(4924)
					while((true)){
						HX_STACK_LINE(4924)
						bool tmp7 = (cx_ite != null());		HX_STACK_VAR(tmp7,"tmp7");
						HX_STACK_LINE(4924)
						bool tmp8 = !(tmp7);		HX_STACK_VAR(tmp8,"tmp8");
						HX_STACK_LINE(4924)
						if ((tmp8)){
							HX_STACK_LINE(4924)
							break;
						}
						HX_STACK_LINE(4924)
						::zpp_nape::shape::ZPP_Shape s = cx_ite->elt;		HX_STACK_VAR(s,"s");
						HX_STACK_LINE(4924)
						{
							HX_STACK_LINE(4924)
							{
								HX_STACK_LINE(4924)
								bool tmp9 = s->zip_aabb;		HX_STACK_VAR(tmp9,"tmp9");
								HX_STACK_LINE(4924)
								if ((tmp9)){
									HX_STACK_LINE(4924)
									bool tmp10 = (s->body != null());		HX_STACK_VAR(tmp10,"tmp10");
									HX_STACK_LINE(4924)
									if ((tmp10)){
										HX_STACK_LINE(4924)
										s->zip_aabb = false;
										HX_STACK_LINE(4924)
										int tmp11 = s->type;		HX_STACK_VAR(tmp11,"tmp11");
										HX_STACK_LINE(4924)
										int tmp12 = ::zpp_nape::util::ZPP_Flags_obj::id_ShapeType_CIRCLE;		HX_STACK_VAR(tmp12,"tmp12");
										HX_STACK_LINE(4924)
										bool tmp13 = (tmp11 == tmp12);		HX_STACK_VAR(tmp13,"tmp13");
										HX_STACK_LINE(4924)
										if ((tmp13)){
											HX_STACK_LINE(4924)
											::zpp_nape::shape::ZPP_Circle _this = s->circle;		HX_STACK_VAR(_this,"_this");
											HX_STACK_LINE(4924)
											{
												HX_STACK_LINE(4924)
												bool tmp14 = _this->zip_worldCOM;		HX_STACK_VAR(tmp14,"tmp14");
												HX_STACK_LINE(4924)
												if ((tmp14)){
													HX_STACK_LINE(4924)
													bool tmp15 = (_this->body != null());		HX_STACK_VAR(tmp15,"tmp15");
													HX_STACK_LINE(4924)
													if ((tmp15)){
														HX_STACK_LINE(4924)
														_this->zip_worldCOM = false;
														HX_STACK_LINE(4924)
														{
															HX_STACK_LINE(4924)
															bool tmp16 = _this->zip_localCOM;		HX_STACK_VAR(tmp16,"tmp16");
															HX_STACK_LINE(4924)
															if ((tmp16)){
																HX_STACK_LINE(4924)
																_this->zip_localCOM = false;
																HX_STACK_LINE(4924)
																int tmp17 = _this->type;		HX_STACK_VAR(tmp17,"tmp17");
																HX_STACK_LINE(4924)
																int tmp18 = ::zpp_nape::util::ZPP_Flags_obj::id_ShapeType_POLYGON;		HX_STACK_VAR(tmp18,"tmp18");
																HX_STACK_LINE(4924)
																bool tmp19 = (tmp17 == tmp18);		HX_STACK_VAR(tmp19,"tmp19");
																HX_STACK_LINE(4924)
																if ((tmp19)){
																	HX_STACK_LINE(4924)
																	::zpp_nape::shape::ZPP_Polygon _this1 = _this->polygon;		HX_STACK_VAR(_this1,"_this1");
																	HX_STACK_LINE(4924)
																	::zpp_nape::geom::ZPP_Vec2 tmp20 = _this1->lverts->next;		HX_STACK_VAR(tmp20,"tmp20");
																	HX_STACK_LINE(4924)
																	bool tmp21 = (tmp20 == null());		HX_STACK_VAR(tmp21,"tmp21");
																	HX_STACK_LINE(4924)
																	if ((tmp21)){
																		HX_STACK_LINE(4924)
																		HX_STACK_DO_THROW(HX_HCSTRING("Error: An empty polygon has no meaningful localCOM","\x3b","\x8d","\x96","\xf3"));
																	}
																	HX_STACK_LINE(4924)
																	::zpp_nape::geom::ZPP_Vec2 tmp22 = _this1->lverts->next;		HX_STACK_VAR(tmp22,"tmp22");
																	HX_STACK_LINE(4924)
																	::zpp_nape::geom::ZPP_Vec2 tmp23 = tmp22->next;		HX_STACK_VAR(tmp23,"tmp23");
																	HX_STACK_LINE(4924)
																	bool tmp24 = (tmp23 == null());		HX_STACK_VAR(tmp24,"tmp24");
																	HX_STACK_LINE(4924)
																	if ((tmp24)){
																		HX_STACK_LINE(4924)
																		::zpp_nape::geom::ZPP_Vec2 tmp25 = _this1->lverts->next;		HX_STACK_VAR(tmp25,"tmp25");
																		HX_STACK_LINE(4924)
																		_this1->localCOMx = tmp25->x;
																		HX_STACK_LINE(4924)
																		::zpp_nape::geom::ZPP_Vec2 tmp26 = _this1->lverts->next;		HX_STACK_VAR(tmp26,"tmp26");
																		HX_STACK_LINE(4924)
																		_this1->localCOMy = tmp26->y;
																		HX_STACK_LINE(4924)
																		Dynamic();
																	}
																	else{
																		HX_STACK_LINE(4924)
																		::zpp_nape::geom::ZPP_Vec2 tmp25 = _this1->lverts->next;		HX_STACK_VAR(tmp25,"tmp25");
																		HX_STACK_LINE(4924)
																		::zpp_nape::geom::ZPP_Vec2 tmp26 = tmp25->next->next;		HX_STACK_VAR(tmp26,"tmp26");
																		HX_STACK_LINE(4924)
																		bool tmp27 = (tmp26 == null());		HX_STACK_VAR(tmp27,"tmp27");
																		HX_STACK_LINE(4924)
																		if ((tmp27)){
																			HX_STACK_LINE(4924)
																			{
																				HX_STACK_LINE(4924)
																				::zpp_nape::geom::ZPP_Vec2 tmp28 = _this1->lverts->next;		HX_STACK_VAR(tmp28,"tmp28");
																				HX_STACK_LINE(4924)
																				_this1->localCOMx = tmp28->x;
																				HX_STACK_LINE(4924)
																				::zpp_nape::geom::ZPP_Vec2 tmp29 = _this1->lverts->next;		HX_STACK_VAR(tmp29,"tmp29");
																				HX_STACK_LINE(4924)
																				_this1->localCOMy = tmp29->y;
																				HX_STACK_LINE(4924)
																				{
																				}
																			}
																			HX_STACK_LINE(4924)
																			{
																				HX_STACK_LINE(4924)
																				Float t = ((Float)1.0);		HX_STACK_VAR(t,"t");
																				HX_STACK_LINE(4924)
																				::zpp_nape::geom::ZPP_Vec2 tmp28 = _this1->lverts->next;		HX_STACK_VAR(tmp28,"tmp28");
																				HX_STACK_LINE(4924)
																				Float tmp29 = tmp28->next->x;		HX_STACK_VAR(tmp29,"tmp29");
																				HX_STACK_LINE(4924)
																				Float tmp30 = t;		HX_STACK_VAR(tmp30,"tmp30");
																				HX_STACK_LINE(4924)
																				Float tmp31 = (tmp29 * tmp30);		HX_STACK_VAR(tmp31,"tmp31");
																				HX_STACK_LINE(4924)
																				hx::AddEq(_this1->localCOMx,tmp31);
																				HX_STACK_LINE(4924)
																				::zpp_nape::geom::ZPP_Vec2 tmp32 = _this1->lverts->next;		HX_STACK_VAR(tmp32,"tmp32");
																				HX_STACK_LINE(4924)
																				Float tmp33 = tmp32->next->y;		HX_STACK_VAR(tmp33,"tmp33");
																				HX_STACK_LINE(4924)
																				Float tmp34 = t;		HX_STACK_VAR(tmp34,"tmp34");
																				HX_STACK_LINE(4924)
																				Float tmp35 = (tmp33 * tmp34);		HX_STACK_VAR(tmp35,"tmp35");
																				HX_STACK_LINE(4924)
																				hx::AddEq(_this1->localCOMy,tmp35);
																			}
																			HX_STACK_LINE(4924)
																			{
																				HX_STACK_LINE(4924)
																				Float t = ((Float)0.5);		HX_STACK_VAR(t,"t");
																				HX_STACK_LINE(4924)
																				hx::MultEq(_this1->localCOMx,t);
																				HX_STACK_LINE(4924)
																				hx::MultEq(_this1->localCOMy,t);
																			}
																		}
																		else{
																			HX_STACK_LINE(4924)
																			{
																				HX_STACK_LINE(4924)
																				_this1->localCOMx = (int)0;
																				HX_STACK_LINE(4924)
																				_this1->localCOMy = (int)0;
																				HX_STACK_LINE(4924)
																				{
																				}
																			}
																			HX_STACK_LINE(4924)
																			Float area = ((Float)0.0);		HX_STACK_VAR(area,"area");
																			HX_STACK_LINE(4924)
																			{
																				HX_STACK_LINE(4924)
																				::zpp_nape::geom::ZPP_Vec2 tmp28 = _this1->lverts->next;		HX_STACK_VAR(tmp28,"tmp28");
																				HX_STACK_LINE(4924)
																				::zpp_nape::geom::ZPP_Vec2 cx_ite1 = tmp28;		HX_STACK_VAR(cx_ite1,"cx_ite1");
																				HX_STACK_LINE(4924)
																				::zpp_nape::geom::ZPP_Vec2 u = cx_ite1;		HX_STACK_VAR(u,"u");
																				HX_STACK_LINE(4924)
																				cx_ite1 = cx_ite1->next;
																				HX_STACK_LINE(4924)
																				::zpp_nape::geom::ZPP_Vec2 v = cx_ite1;		HX_STACK_VAR(v,"v");
																				HX_STACK_LINE(4924)
																				cx_ite1 = cx_ite1->next;
																				HX_STACK_LINE(4924)
																				while((true)){
																					HX_STACK_LINE(4924)
																					bool tmp29 = (cx_ite1 != null());		HX_STACK_VAR(tmp29,"tmp29");
																					HX_STACK_LINE(4924)
																					bool tmp30 = !(tmp29);		HX_STACK_VAR(tmp30,"tmp30");
																					HX_STACK_LINE(4924)
																					if ((tmp30)){
																						HX_STACK_LINE(4924)
																						break;
																					}
																					HX_STACK_LINE(4924)
																					::zpp_nape::geom::ZPP_Vec2 w = cx_ite1;		HX_STACK_VAR(w,"w");
																					HX_STACK_LINE(4924)
																					{
																						HX_STACK_LINE(4924)
																						Float tmp31 = v->x;		HX_STACK_VAR(tmp31,"tmp31");
																						HX_STACK_LINE(4924)
																						Float tmp32 = (w->y - u->y);		HX_STACK_VAR(tmp32,"tmp32");
																						HX_STACK_LINE(4924)
																						Float tmp33 = (tmp31 * tmp32);		HX_STACK_VAR(tmp33,"tmp33");
																						HX_STACK_LINE(4924)
																						hx::AddEq(area,tmp33);
																						HX_STACK_LINE(4924)
																						Float tmp34 = (w->y * v->x);		HX_STACK_VAR(tmp34,"tmp34");
																						HX_STACK_LINE(4924)
																						Float tmp35 = (w->x * v->y);		HX_STACK_VAR(tmp35,"tmp35");
																						HX_STACK_LINE(4924)
																						Float tmp36 = (tmp34 - tmp35);		HX_STACK_VAR(tmp36,"tmp36");
																						HX_STACK_LINE(4924)
																						Float cf = tmp36;		HX_STACK_VAR(cf,"cf");
																						HX_STACK_LINE(4924)
																						Float tmp37 = (v->x + w->x);		HX_STACK_VAR(tmp37,"tmp37");
																						HX_STACK_LINE(4924)
																						Float tmp38 = cf;		HX_STACK_VAR(tmp38,"tmp38");
																						HX_STACK_LINE(4924)
																						Float tmp39 = (tmp37 * tmp38);		HX_STACK_VAR(tmp39,"tmp39");
																						HX_STACK_LINE(4924)
																						hx::AddEq(_this1->localCOMx,tmp39);
																						HX_STACK_LINE(4924)
																						Float tmp40 = (v->y + w->y);		HX_STACK_VAR(tmp40,"tmp40");
																						HX_STACK_LINE(4924)
																						Float tmp41 = cf;		HX_STACK_VAR(tmp41,"tmp41");
																						HX_STACK_LINE(4924)
																						Float tmp42 = (tmp40 * tmp41);		HX_STACK_VAR(tmp42,"tmp42");
																						HX_STACK_LINE(4924)
																						hx::AddEq(_this1->localCOMy,tmp42);
																					}
																					HX_STACK_LINE(4924)
																					u = v;
																					HX_STACK_LINE(4924)
																					v = w;
																					HX_STACK_LINE(4924)
																					cx_ite1 = cx_ite1->next;
																				}
																				HX_STACK_LINE(4924)
																				::zpp_nape::geom::ZPP_Vec2 tmp29 = _this1->lverts->next;		HX_STACK_VAR(tmp29,"tmp29");
																				HX_STACK_LINE(4924)
																				cx_ite1 = tmp29;
																				HX_STACK_LINE(4924)
																				::zpp_nape::geom::ZPP_Vec2 w = cx_ite1;		HX_STACK_VAR(w,"w");
																				HX_STACK_LINE(4924)
																				{
																					HX_STACK_LINE(4924)
																					Float tmp30 = v->x;		HX_STACK_VAR(tmp30,"tmp30");
																					HX_STACK_LINE(4924)
																					Float tmp31 = (w->y - u->y);		HX_STACK_VAR(tmp31,"tmp31");
																					HX_STACK_LINE(4924)
																					Float tmp32 = (tmp30 * tmp31);		HX_STACK_VAR(tmp32,"tmp32");
																					HX_STACK_LINE(4924)
																					hx::AddEq(area,tmp32);
																					HX_STACK_LINE(4924)
																					Float tmp33 = (w->y * v->x);		HX_STACK_VAR(tmp33,"tmp33");
																					HX_STACK_LINE(4924)
																					Float tmp34 = (w->x * v->y);		HX_STACK_VAR(tmp34,"tmp34");
																					HX_STACK_LINE(4924)
																					Float tmp35 = (tmp33 - tmp34);		HX_STACK_VAR(tmp35,"tmp35");
																					HX_STACK_LINE(4924)
																					Float cf = tmp35;		HX_STACK_VAR(cf,"cf");
																					HX_STACK_LINE(4924)
																					Float tmp36 = (v->x + w->x);		HX_STACK_VAR(tmp36,"tmp36");
																					HX_STACK_LINE(4924)
																					Float tmp37 = cf;		HX_STACK_VAR(tmp37,"tmp37");
																					HX_STACK_LINE(4924)
																					Float tmp38 = (tmp36 * tmp37);		HX_STACK_VAR(tmp38,"tmp38");
																					HX_STACK_LINE(4924)
																					hx::AddEq(_this1->localCOMx,tmp38);
																					HX_STACK_LINE(4924)
																					Float tmp39 = (v->y + w->y);		HX_STACK_VAR(tmp39,"tmp39");
																					HX_STACK_LINE(4924)
																					Float tmp40 = cf;		HX_STACK_VAR(tmp40,"tmp40");
																					HX_STACK_LINE(4924)
																					Float tmp41 = (tmp39 * tmp40);		HX_STACK_VAR(tmp41,"tmp41");
																					HX_STACK_LINE(4924)
																					hx::AddEq(_this1->localCOMy,tmp41);
																				}
																				HX_STACK_LINE(4924)
																				u = v;
																				HX_STACK_LINE(4924)
																				v = w;
																				HX_STACK_LINE(4924)
																				cx_ite1 = cx_ite1->next;
																				HX_STACK_LINE(4924)
																				::zpp_nape::geom::ZPP_Vec2 w1 = cx_ite1;		HX_STACK_VAR(w1,"w1");
																				HX_STACK_LINE(4924)
																				{
																					HX_STACK_LINE(4924)
																					Float tmp30 = v->x;		HX_STACK_VAR(tmp30,"tmp30");
																					HX_STACK_LINE(4924)
																					Float tmp31 = (w1->y - u->y);		HX_STACK_VAR(tmp31,"tmp31");
																					HX_STACK_LINE(4924)
																					Float tmp32 = (tmp30 * tmp31);		HX_STACK_VAR(tmp32,"tmp32");
																					HX_STACK_LINE(4924)
																					hx::AddEq(area,tmp32);
																					HX_STACK_LINE(4924)
																					Float tmp33 = (w1->y * v->x);		HX_STACK_VAR(tmp33,"tmp33");
																					HX_STACK_LINE(4924)
																					Float tmp34 = (w1->x * v->y);		HX_STACK_VAR(tmp34,"tmp34");
																					HX_STACK_LINE(4924)
																					Float tmp35 = (tmp33 - tmp34);		HX_STACK_VAR(tmp35,"tmp35");
																					HX_STACK_LINE(4924)
																					Float cf = tmp35;		HX_STACK_VAR(cf,"cf");
																					HX_STACK_LINE(4924)
																					Float tmp36 = (v->x + w1->x);		HX_STACK_VAR(tmp36,"tmp36");
																					HX_STACK_LINE(4924)
																					Float tmp37 = cf;		HX_STACK_VAR(tmp37,"tmp37");
																					HX_STACK_LINE(4924)
																					Float tmp38 = (tmp36 * tmp37);		HX_STACK_VAR(tmp38,"tmp38");
																					HX_STACK_LINE(4924)
																					hx::AddEq(_this1->localCOMx,tmp38);
																					HX_STACK_LINE(4924)
																					Float tmp39 = (v->y + w1->y);		HX_STACK_VAR(tmp39,"tmp39");
																					HX_STACK_LINE(4924)
																					Float tmp40 = cf;		HX_STACK_VAR(tmp40,"tmp40");
																					HX_STACK_LINE(4924)
																					Float tmp41 = (tmp39 * tmp40);		HX_STACK_VAR(tmp41,"tmp41");
																					HX_STACK_LINE(4924)
																					hx::AddEq(_this1->localCOMy,tmp41);
																				}
																			}
																			HX_STACK_LINE(4924)
																			Float tmp28 = ((int)3 * area);		HX_STACK_VAR(tmp28,"tmp28");
																			HX_STACK_LINE(4924)
																			Float tmp29 = (Float((int)1) / Float(tmp28));		HX_STACK_VAR(tmp29,"tmp29");
																			HX_STACK_LINE(4924)
																			area = tmp29;
																			HX_STACK_LINE(4924)
																			{
																				HX_STACK_LINE(4924)
																				Float t = area;		HX_STACK_VAR(t,"t");
																				HX_STACK_LINE(4924)
																				hx::MultEq(_this1->localCOMx,t);
																				HX_STACK_LINE(4924)
																				hx::MultEq(_this1->localCOMy,t);
																			}
																		}
																	}
																}
																HX_STACK_LINE(4924)
																bool tmp20 = (_this->wrap_localCOM != null());		HX_STACK_VAR(tmp20,"tmp20");
																HX_STACK_LINE(4924)
																if ((tmp20)){
																	HX_STACK_LINE(4924)
																	::zpp_nape::geom::ZPP_Vec2 tmp21 = _this->wrap_localCOM->zpp_inner;		HX_STACK_VAR(tmp21,"tmp21");
																	HX_STACK_LINE(4924)
																	tmp21->x = _this->localCOMx;
																	HX_STACK_LINE(4924)
																	::zpp_nape::geom::ZPP_Vec2 tmp22 = _this->wrap_localCOM->zpp_inner;		HX_STACK_VAR(tmp22,"tmp22");
																	HX_STACK_LINE(4924)
																	tmp22->y = _this->localCOMy;
																	HX_STACK_LINE(4924)
																	{
																	}
																}
															}
														}
														HX_STACK_LINE(4924)
														{
															HX_STACK_LINE(4924)
															::zpp_nape::phys::ZPP_Body _this1 = _this->body;		HX_STACK_VAR(_this1,"_this1");
															HX_STACK_LINE(4924)
															bool tmp16 = _this1->zip_axis;		HX_STACK_VAR(tmp16,"tmp16");
															HX_STACK_LINE(4924)
															if ((tmp16)){
																HX_STACK_LINE(4924)
																_this1->zip_axis = false;
																HX_STACK_LINE(4924)
																{
																	HX_STACK_LINE(4924)
																	Float tmp17 = _this1->rot;		HX_STACK_VAR(tmp17,"tmp17");
																	HX_STACK_LINE(4924)
																	Float tmp18 = ::Math_obj::sin(tmp17);		HX_STACK_VAR(tmp18,"tmp18");
																	HX_STACK_LINE(4924)
																	_this1->axisx = tmp18;
																	HX_STACK_LINE(4924)
																	Float tmp19 = _this1->rot;		HX_STACK_VAR(tmp19,"tmp19");
																	HX_STACK_LINE(4924)
																	Float tmp20 = ::Math_obj::cos(tmp19);		HX_STACK_VAR(tmp20,"tmp20");
																	HX_STACK_LINE(4924)
																	_this1->axisy = tmp20;
																	HX_STACK_LINE(4924)
																	Dynamic();
																}
															}
														}
														HX_STACK_LINE(4924)
														{
															HX_STACK_LINE(4924)
															Float tmp16 = _this->body->posx;		HX_STACK_VAR(tmp16,"tmp16");
															HX_STACK_LINE(4924)
															Float tmp17 = _this->body->axisy;		HX_STACK_VAR(tmp17,"tmp17");
															HX_STACK_LINE(4924)
															Float tmp18 = _this->localCOMx;		HX_STACK_VAR(tmp18,"tmp18");
															HX_STACK_LINE(4924)
															Float tmp19 = (tmp17 * tmp18);		HX_STACK_VAR(tmp19,"tmp19");
															HX_STACK_LINE(4924)
															Float tmp20 = _this->body->axisx;		HX_STACK_VAR(tmp20,"tmp20");
															HX_STACK_LINE(4924)
															Float tmp21 = _this->localCOMy;		HX_STACK_VAR(tmp21,"tmp21");
															HX_STACK_LINE(4924)
															Float tmp22 = (tmp20 * tmp21);		HX_STACK_VAR(tmp22,"tmp22");
															HX_STACK_LINE(4924)
															Float tmp23 = (tmp19 - tmp22);		HX_STACK_VAR(tmp23,"tmp23");
															HX_STACK_LINE(4924)
															Float tmp24 = (tmp16 + tmp23);		HX_STACK_VAR(tmp24,"tmp24");
															HX_STACK_LINE(4924)
															_this->worldCOMx = tmp24;
															HX_STACK_LINE(4924)
															Float tmp25 = _this->body->posy;		HX_STACK_VAR(tmp25,"tmp25");
															HX_STACK_LINE(4924)
															Float tmp26 = _this->localCOMx;		HX_STACK_VAR(tmp26,"tmp26");
															HX_STACK_LINE(4924)
															Float tmp27 = _this->body->axisx;		HX_STACK_VAR(tmp27,"tmp27");
															HX_STACK_LINE(4924)
															Float tmp28 = (tmp26 * tmp27);		HX_STACK_VAR(tmp28,"tmp28");
															HX_STACK_LINE(4924)
															Float tmp29 = _this->localCOMy;		HX_STACK_VAR(tmp29,"tmp29");
															HX_STACK_LINE(4924)
															Float tmp30 = _this->body->axisy;		HX_STACK_VAR(tmp30,"tmp30");
															HX_STACK_LINE(4924)
															Float tmp31 = (tmp29 * tmp30);		HX_STACK_VAR(tmp31,"tmp31");
															HX_STACK_LINE(4924)
															Float tmp32 = (tmp28 + tmp31);		HX_STACK_VAR(tmp32,"tmp32");
															HX_STACK_LINE(4924)
															Float tmp33 = (tmp25 + tmp32);		HX_STACK_VAR(tmp33,"tmp33");
															HX_STACK_LINE(4924)
															_this->worldCOMy = tmp33;
														}
													}
												}
											}
											HX_STACK_LINE(4924)
											Float rx = _this->radius;		HX_STACK_VAR(rx,"rx");
											HX_STACK_LINE(4924)
											Float ry = _this->radius;		HX_STACK_VAR(ry,"ry");
											HX_STACK_LINE(4924)
											{
												HX_STACK_LINE(4924)
												Float tmp14 = (_this->worldCOMx - rx);		HX_STACK_VAR(tmp14,"tmp14");
												HX_STACK_LINE(4924)
												_this->aabb->minx = tmp14;
												HX_STACK_LINE(4924)
												Float tmp15 = (_this->worldCOMy - ry);		HX_STACK_VAR(tmp15,"tmp15");
												HX_STACK_LINE(4924)
												_this->aabb->miny = tmp15;
											}
											HX_STACK_LINE(4924)
											{
												HX_STACK_LINE(4924)
												Float tmp14 = (_this->worldCOMx + rx);		HX_STACK_VAR(tmp14,"tmp14");
												HX_STACK_LINE(4924)
												_this->aabb->maxx = tmp14;
												HX_STACK_LINE(4924)
												Float tmp15 = (_this->worldCOMy + ry);		HX_STACK_VAR(tmp15,"tmp15");
												HX_STACK_LINE(4924)
												_this->aabb->maxy = tmp15;
											}
										}
										else{
											HX_STACK_LINE(4924)
											::zpp_nape::shape::ZPP_Polygon _this = s->polygon;		HX_STACK_VAR(_this,"_this");
											HX_STACK_LINE(4924)
											{
												HX_STACK_LINE(4924)
												bool tmp14 = _this->zip_gverts;		HX_STACK_VAR(tmp14,"tmp14");
												HX_STACK_LINE(4924)
												if ((tmp14)){
													HX_STACK_LINE(4924)
													bool tmp15 = (_this->body != null());		HX_STACK_VAR(tmp15,"tmp15");
													HX_STACK_LINE(4924)
													if ((tmp15)){
														HX_STACK_LINE(4924)
														_this->zip_gverts = false;
														HX_STACK_LINE(4924)
														_this->validate_lverts();
														HX_STACK_LINE(4924)
														{
															HX_STACK_LINE(4924)
															::zpp_nape::phys::ZPP_Body _this1 = _this->body;		HX_STACK_VAR(_this1,"_this1");
															HX_STACK_LINE(4924)
															bool tmp16 = _this1->zip_axis;		HX_STACK_VAR(tmp16,"tmp16");
															HX_STACK_LINE(4924)
															if ((tmp16)){
																HX_STACK_LINE(4924)
																_this1->zip_axis = false;
																HX_STACK_LINE(4924)
																{
																	HX_STACK_LINE(4924)
																	Float tmp17 = _this1->rot;		HX_STACK_VAR(tmp17,"tmp17");
																	HX_STACK_LINE(4924)
																	Float tmp18 = ::Math_obj::sin(tmp17);		HX_STACK_VAR(tmp18,"tmp18");
																	HX_STACK_LINE(4924)
																	_this1->axisx = tmp18;
																	HX_STACK_LINE(4924)
																	Float tmp19 = _this1->rot;		HX_STACK_VAR(tmp19,"tmp19");
																	HX_STACK_LINE(4924)
																	Float tmp20 = ::Math_obj::cos(tmp19);		HX_STACK_VAR(tmp20,"tmp20");
																	HX_STACK_LINE(4924)
																	_this1->axisy = tmp20;
																	HX_STACK_LINE(4924)
																	Dynamic();
																}
															}
														}
														HX_STACK_LINE(4924)
														::zpp_nape::geom::ZPP_Vec2 tmp16 = _this->lverts->next;		HX_STACK_VAR(tmp16,"tmp16");
														HX_STACK_LINE(4924)
														::zpp_nape::geom::ZPP_Vec2 li = tmp16;		HX_STACK_VAR(li,"li");
														HX_STACK_LINE(4924)
														{
															HX_STACK_LINE(4924)
															::zpp_nape::geom::ZPP_Vec2 tmp17 = _this->gverts->next;		HX_STACK_VAR(tmp17,"tmp17");
															HX_STACK_LINE(4924)
															::zpp_nape::geom::ZPP_Vec2 cx_ite1 = tmp17;		HX_STACK_VAR(cx_ite1,"cx_ite1");
															HX_STACK_LINE(4924)
															while((true)){
																HX_STACK_LINE(4924)
																bool tmp18 = (cx_ite1 != null());		HX_STACK_VAR(tmp18,"tmp18");
																HX_STACK_LINE(4924)
																bool tmp19 = !(tmp18);		HX_STACK_VAR(tmp19,"tmp19");
																HX_STACK_LINE(4924)
																if ((tmp19)){
																	HX_STACK_LINE(4924)
																	break;
																}
																HX_STACK_LINE(4924)
																::zpp_nape::geom::ZPP_Vec2 g = cx_ite1;		HX_STACK_VAR(g,"g");
																HX_STACK_LINE(4924)
																{
																	HX_STACK_LINE(4924)
																	::zpp_nape::geom::ZPP_Vec2 l = li;		HX_STACK_VAR(l,"l");
																	HX_STACK_LINE(4924)
																	li = li->next;
																	HX_STACK_LINE(4924)
																	{
																		HX_STACK_LINE(4924)
																		Float tmp20 = _this->body->posx;		HX_STACK_VAR(tmp20,"tmp20");
																		HX_STACK_LINE(4924)
																		Float tmp21 = _this->body->axisy;		HX_STACK_VAR(tmp21,"tmp21");
																		HX_STACK_LINE(4924)
																		Float tmp22 = l->x;		HX_STACK_VAR(tmp22,"tmp22");
																		HX_STACK_LINE(4924)
																		Float tmp23 = (tmp21 * tmp22);		HX_STACK_VAR(tmp23,"tmp23");
																		HX_STACK_LINE(4924)
																		Float tmp24 = _this->body->axisx;		HX_STACK_VAR(tmp24,"tmp24");
																		HX_STACK_LINE(4924)
																		Float tmp25 = l->y;		HX_STACK_VAR(tmp25,"tmp25");
																		HX_STACK_LINE(4924)
																		Float tmp26 = (tmp24 * tmp25);		HX_STACK_VAR(tmp26,"tmp26");
																		HX_STACK_LINE(4924)
																		Float tmp27 = (tmp23 - tmp26);		HX_STACK_VAR(tmp27,"tmp27");
																		HX_STACK_LINE(4924)
																		Float tmp28 = (tmp20 + tmp27);		HX_STACK_VAR(tmp28,"tmp28");
																		HX_STACK_LINE(4924)
																		g->x = tmp28;
																		HX_STACK_LINE(4924)
																		Float tmp29 = _this->body->posy;		HX_STACK_VAR(tmp29,"tmp29");
																		HX_STACK_LINE(4924)
																		Float tmp30 = l->x;		HX_STACK_VAR(tmp30,"tmp30");
																		HX_STACK_LINE(4924)
																		Float tmp31 = _this->body->axisx;		HX_STACK_VAR(tmp31,"tmp31");
																		HX_STACK_LINE(4924)
																		Float tmp32 = (tmp30 * tmp31);		HX_STACK_VAR(tmp32,"tmp32");
																		HX_STACK_LINE(4924)
																		Float tmp33 = l->y;		HX_STACK_VAR(tmp33,"tmp33");
																		HX_STACK_LINE(4924)
																		Float tmp34 = _this->body->axisy;		HX_STACK_VAR(tmp34,"tmp34");
																		HX_STACK_LINE(4924)
																		Float tmp35 = (tmp33 * tmp34);		HX_STACK_VAR(tmp35,"tmp35");
																		HX_STACK_LINE(4924)
																		Float tmp36 = (tmp32 + tmp35);		HX_STACK_VAR(tmp36,"tmp36");
																		HX_STACK_LINE(4924)
																		Float tmp37 = (tmp29 + tmp36);		HX_STACK_VAR(tmp37,"tmp37");
																		HX_STACK_LINE(4924)
																		g->y = tmp37;
																	}
																}
																HX_STACK_LINE(4924)
																cx_ite1 = cx_ite1->next;
															}
														}
													}
												}
											}
											HX_STACK_LINE(4924)
											::zpp_nape::geom::ZPP_Vec2 tmp14 = _this->lverts->next;		HX_STACK_VAR(tmp14,"tmp14");
											HX_STACK_LINE(4924)
											bool tmp15 = (tmp14 == null());		HX_STACK_VAR(tmp15,"tmp15");
											HX_STACK_LINE(4924)
											if ((tmp15)){
												HX_STACK_LINE(4924)
												HX_STACK_DO_THROW(HX_HCSTRING("Error: An empty polygon has no meaningful bounds","\xda","\x28","\x5b","\xf5"));
											}
											HX_STACK_LINE(4924)
											::zpp_nape::geom::ZPP_Vec2 tmp16 = _this->gverts->next;		HX_STACK_VAR(tmp16,"tmp16");
											HX_STACK_LINE(4924)
											::zpp_nape::geom::ZPP_Vec2 p0 = tmp16;		HX_STACK_VAR(p0,"p0");
											HX_STACK_LINE(4924)
											{
												HX_STACK_LINE(4924)
												_this->aabb->minx = p0->x;
												HX_STACK_LINE(4924)
												_this->aabb->miny = p0->y;
												HX_STACK_LINE(4924)
												{
												}
											}
											HX_STACK_LINE(4924)
											{
												HX_STACK_LINE(4924)
												_this->aabb->maxx = p0->x;
												HX_STACK_LINE(4924)
												_this->aabb->maxy = p0->y;
												HX_STACK_LINE(4924)
												{
												}
											}
											HX_STACK_LINE(4924)
											{
												HX_STACK_LINE(4924)
												::zpp_nape::geom::ZPP_Vec2 tmp17 = _this->gverts->next;		HX_STACK_VAR(tmp17,"tmp17");
												HX_STACK_LINE(4924)
												::zpp_nape::geom::ZPP_Vec2 cx_ite1 = tmp17->next;		HX_STACK_VAR(cx_ite1,"cx_ite1");
												HX_STACK_LINE(4924)
												while((true)){
													HX_STACK_LINE(4924)
													bool tmp18 = (cx_ite1 != null());		HX_STACK_VAR(tmp18,"tmp18");
													HX_STACK_LINE(4924)
													bool tmp19 = !(tmp18);		HX_STACK_VAR(tmp19,"tmp19");
													HX_STACK_LINE(4924)
													if ((tmp19)){
														HX_STACK_LINE(4924)
														break;
													}
													HX_STACK_LINE(4924)
													::zpp_nape::geom::ZPP_Vec2 p = cx_ite1;		HX_STACK_VAR(p,"p");
													HX_STACK_LINE(4924)
													{
														HX_STACK_LINE(4924)
														Float tmp20 = p->x;		HX_STACK_VAR(tmp20,"tmp20");
														HX_STACK_LINE(4924)
														Float tmp21 = _this->aabb->minx;		HX_STACK_VAR(tmp21,"tmp21");
														HX_STACK_LINE(4924)
														bool tmp22 = (tmp20 < tmp21);		HX_STACK_VAR(tmp22,"tmp22");
														HX_STACK_LINE(4924)
														if ((tmp22)){
															HX_STACK_LINE(4924)
															_this->aabb->minx = p->x;
														}
														HX_STACK_LINE(4924)
														Float tmp23 = p->x;		HX_STACK_VAR(tmp23,"tmp23");
														HX_STACK_LINE(4924)
														Float tmp24 = _this->aabb->maxx;		HX_STACK_VAR(tmp24,"tmp24");
														HX_STACK_LINE(4924)
														bool tmp25 = (tmp23 > tmp24);		HX_STACK_VAR(tmp25,"tmp25");
														HX_STACK_LINE(4924)
														if ((tmp25)){
															HX_STACK_LINE(4924)
															_this->aabb->maxx = p->x;
														}
														HX_STACK_LINE(4924)
														Float tmp26 = p->y;		HX_STACK_VAR(tmp26,"tmp26");
														HX_STACK_LINE(4924)
														Float tmp27 = _this->aabb->miny;		HX_STACK_VAR(tmp27,"tmp27");
														HX_STACK_LINE(4924)
														bool tmp28 = (tmp26 < tmp27);		HX_STACK_VAR(tmp28,"tmp28");
														HX_STACK_LINE(4924)
														if ((tmp28)){
															HX_STACK_LINE(4924)
															_this->aabb->miny = p->y;
														}
														HX_STACK_LINE(4924)
														Float tmp29 = p->y;		HX_STACK_VAR(tmp29,"tmp29");
														HX_STACK_LINE(4924)
														Float tmp30 = _this->aabb->maxy;		HX_STACK_VAR(tmp30,"tmp30");
														HX_STACK_LINE(4924)
														bool tmp31 = (tmp29 > tmp30);		HX_STACK_VAR(tmp31,"tmp31");
														HX_STACK_LINE(4924)
														if ((tmp31)){
															HX_STACK_LINE(4924)
															_this->aabb->maxy = p->y;
														}
													}
													HX_STACK_LINE(4924)
													cx_ite1 = cx_ite1->next;
												}
											}
										}
									}
								}
							}
							HX_STACK_LINE(4924)
							{
								HX_STACK_LINE(4924)
								::zpp_nape::geom::ZPP_AABB _this = body->aabb;		HX_STACK_VAR(_this,"_this");
								HX_STACK_LINE(4924)
								::zpp_nape::geom::ZPP_AABB x = s->aabb;		HX_STACK_VAR(x,"x");
								HX_STACK_LINE(4924)
								bool tmp9 = (x->minx < _this->minx);		HX_STACK_VAR(tmp9,"tmp9");
								HX_STACK_LINE(4924)
								if ((tmp9)){
									HX_STACK_LINE(4924)
									_this->minx = x->minx;
								}
								HX_STACK_LINE(4924)
								bool tmp10 = (x->maxx > _this->maxx);		HX_STACK_VAR(tmp10,"tmp10");
								HX_STACK_LINE(4924)
								if ((tmp10)){
									HX_STACK_LINE(4924)
									_this->maxx = x->maxx;
								}
								HX_STACK_LINE(4924)
								bool tmp11 = (x->miny < _this->miny);		HX_STACK_VAR(tmp11,"tmp11");
								HX_STACK_LINE(4924)
								if ((tmp11)){
									HX_STACK_LINE(4924)
									_this->miny = x->miny;
								}
								HX_STACK_LINE(4924)
								bool tmp12 = (x->maxy > _this->maxy);		HX_STACK_VAR(tmp12,"tmp12");
								HX_STACK_LINE(4924)
								if ((tmp12)){
									HX_STACK_LINE(4924)
									_this->maxy = x->maxy;
								}
							}
						}
						HX_STACK_LINE(4924)
						cx_ite = cx_ite->next;
					}
				}
			}
		}
		HX_STACK_LINE(4926)
		body->validate_mass();
		HX_STACK_LINE(4927)
		body->validate_inertia();
		HX_STACK_LINE(4929)
		bool tmp3 = (body->velx != (int)0);		HX_STACK_VAR(tmp3,"tmp3");
		HX_STACK_LINE(4929)
		bool tmp4 = !(tmp3);		HX_STACK_VAR(tmp4,"tmp4");
		HX_STACK_LINE(4929)
		bool tmp5 = tmp4;		HX_STACK_VAR(tmp5,"tmp5");
		HX_STACK_LINE(4929)
		bool tmp6;		HX_STACK_VAR(tmp6,"tmp6");
		HX_STACK_LINE(4929)
		if ((tmp5)){
			HX_STACK_LINE(4929)
			tmp6 = (body->vely != (int)0);
		}
		else{
			HX_STACK_LINE(4929)
			tmp6 = true;
		}
		HX_STACK_LINE(4929)
		bool tmp7 = !(tmp6);		HX_STACK_VAR(tmp7,"tmp7");
		HX_STACK_LINE(4929)
		bool tmp8;		HX_STACK_VAR(tmp8,"tmp8");
		HX_STACK_LINE(4929)
		if ((tmp7)){
			HX_STACK_LINE(4929)
			tmp8 = (body->angvel != (int)0);
		}
		else{
			HX_STACK_LINE(4929)
			tmp8 = true;
		}
		HX_STACK_LINE(4929)
		if ((tmp8)){
			HX_STACK_LINE(4929)
			HX_STACK_DO_THROW(HX_HCSTRING("Error: Static body cannot have any real velocity, only kinematic or surface velocities","\x46","\x0b","\x8d","\x80"));
		}
		HX_STACK_LINE(4931)
		{
			HX_STACK_LINE(4932)
			::zpp_nape::util::ZNPNode_ZPP_Shape tmp9 = body->shapes->head;		HX_STACK_VAR(tmp9,"tmp9");
			HX_STACK_LINE(4932)
			::zpp_nape::util::ZNPNode_ZPP_Shape cx_ite = tmp9;		HX_STACK_VAR(cx_ite,"cx_ite");
			HX_STACK_LINE(4933)
			while((true)){
				HX_STACK_LINE(4933)
				bool tmp10 = (cx_ite != null());		HX_STACK_VAR(tmp10,"tmp10");
				HX_STACK_LINE(4933)
				bool tmp11 = !(tmp10);		HX_STACK_VAR(tmp11,"tmp11");
				HX_STACK_LINE(4933)
				if ((tmp11)){
					HX_STACK_LINE(4933)
					break;
				}
				HX_STACK_LINE(4934)
				::zpp_nape::shape::ZPP_Shape s = cx_ite->elt;		HX_STACK_VAR(s,"s");
				HX_STACK_LINE(4935)
				{
					HX_STACK_LINE(4936)
					int tmp12 = s->type;		HX_STACK_VAR(tmp12,"tmp12");
					HX_STACK_LINE(4936)
					int tmp13 = ::zpp_nape::util::ZPP_Flags_obj::id_ShapeType_POLYGON;		HX_STACK_VAR(tmp13,"tmp13");
					HX_STACK_LINE(4936)
					bool tmp14 = (tmp12 == tmp13);		HX_STACK_VAR(tmp14,"tmp14");
					HX_STACK_LINE(4936)
					if ((tmp14)){
						HX_STACK_LINE(4937)
						{
							HX_STACK_LINE(4937)
							::zpp_nape::shape::ZPP_Polygon _this = s->polygon;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(4937)
							bool tmp15 = _this->zip_sanitation;		HX_STACK_VAR(tmp15,"tmp15");
							HX_STACK_LINE(4937)
							if ((tmp15)){
								HX_STACK_LINE(4937)
								_this->zip_sanitation = false;
								HX_STACK_LINE(4937)
								_this->splice_collinear_real();
							}
						}
						HX_STACK_LINE(4939)
						::nape::shape::ValidationResult tmp15 = s->polygon->valid();		HX_STACK_VAR(tmp15,"tmp15");
						HX_STACK_LINE(4939)
						::nape::shape::ValidationResult res = tmp15;		HX_STACK_VAR(res,"res");
						HX_STACK_LINE(4940)
						::nape::shape::ValidationResult tmp16 = res;		HX_STACK_VAR(tmp16,"tmp16");
						HX_STACK_LINE(4940)
						::nape::shape::ValidationResult tmp17;		HX_STACK_VAR(tmp17,"tmp17");
						HX_STACK_LINE(4940)
						{
							HX_STACK_LINE(4940)
							::nape::shape::ValidationResult tmp18 = ::zpp_nape::util::ZPP_Flags_obj::ValidationResult_VALID;		HX_STACK_VAR(tmp18,"tmp18");
							HX_STACK_LINE(4940)
							bool tmp19 = (tmp18 == null());		HX_STACK_VAR(tmp19,"tmp19");
							HX_STACK_LINE(4940)
							if ((tmp19)){
								HX_STACK_LINE(4940)
								::zpp_nape::util::ZPP_Flags_obj::internal = true;
								HX_STACK_LINE(4940)
								::nape::shape::ValidationResult tmp20 = ::nape::shape::ValidationResult_obj::__new();		HX_STACK_VAR(tmp20,"tmp20");
								HX_STACK_LINE(4940)
								::zpp_nape::util::ZPP_Flags_obj::ValidationResult_VALID = tmp20;
								HX_STACK_LINE(4940)
								::zpp_nape::util::ZPP_Flags_obj::internal = false;
							}
							HX_STACK_LINE(4940)
							tmp17 = ::zpp_nape::util::ZPP_Flags_obj::ValidationResult_VALID;
						}
						HX_STACK_LINE(4940)
						bool tmp18 = (tmp16 != tmp17);		HX_STACK_VAR(tmp18,"tmp18");
						HX_STACK_LINE(4940)
						if ((tmp18)){
							HX_STACK_LINE(4941)
							::nape::shape::Shape tmp19 = s->polygon->outer;		HX_STACK_VAR(tmp19,"tmp19");
							HX_STACK_LINE(4941)
							::String tmp20 = tmp19->toString();		HX_STACK_VAR(tmp20,"tmp20");
							HX_STACK_LINE(4941)
							::String tmp21 = (HX_HCSTRING("Error: Cannot simulate with an invalid Polygon : ","\x3b","\x8a","\x46","\x28") + tmp20);		HX_STACK_VAR(tmp21,"tmp21");
							HX_STACK_LINE(4941)
							::String tmp22 = (tmp21 + HX_HCSTRING(" is invalid : ","\x85","\x20","\x62","\x1d"));		HX_STACK_VAR(tmp22,"tmp22");
							HX_STACK_LINE(4941)
							::String tmp23 = res->toString();		HX_STACK_VAR(tmp23,"tmp23");
							HX_STACK_LINE(4941)
							::String tmp24 = (tmp22 + tmp23);		HX_STACK_VAR(tmp24,"tmp24");
							HX_STACK_LINE(4941)
							HX_STACK_DO_THROW(tmp24);
						}
						HX_STACK_LINE(4944)
						{
							HX_STACK_LINE(4944)
							::zpp_nape::shape::ZPP_Polygon _this = s->polygon;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(4944)
							bool tmp19 = _this->zip_gaxi;		HX_STACK_VAR(tmp19,"tmp19");
							HX_STACK_LINE(4944)
							if ((tmp19)){
								HX_STACK_LINE(4944)
								bool tmp20 = (_this->body != null());		HX_STACK_VAR(tmp20,"tmp20");
								HX_STACK_LINE(4944)
								if ((tmp20)){
									HX_STACK_LINE(4944)
									_this->zip_gaxi = false;
									HX_STACK_LINE(4944)
									_this->validate_laxi();
									HX_STACK_LINE(4944)
									{
										HX_STACK_LINE(4944)
										::zpp_nape::phys::ZPP_Body _this1 = _this->body;		HX_STACK_VAR(_this1,"_this1");
										HX_STACK_LINE(4944)
										bool tmp21 = _this1->zip_axis;		HX_STACK_VAR(tmp21,"tmp21");
										HX_STACK_LINE(4944)
										if ((tmp21)){
											HX_STACK_LINE(4944)
											_this1->zip_axis = false;
											HX_STACK_LINE(4944)
											{
												HX_STACK_LINE(4944)
												Float tmp22 = _this1->rot;		HX_STACK_VAR(tmp22,"tmp22");
												HX_STACK_LINE(4944)
												Float tmp23 = ::Math_obj::sin(tmp22);		HX_STACK_VAR(tmp23,"tmp23");
												HX_STACK_LINE(4944)
												_this1->axisx = tmp23;
												HX_STACK_LINE(4944)
												Float tmp24 = _this1->rot;		HX_STACK_VAR(tmp24,"tmp24");
												HX_STACK_LINE(4944)
												Float tmp25 = ::Math_obj::cos(tmp24);		HX_STACK_VAR(tmp25,"tmp25");
												HX_STACK_LINE(4944)
												_this1->axisy = tmp25;
												HX_STACK_LINE(4944)
												Dynamic();
											}
										}
									}
									HX_STACK_LINE(4944)
									{
										HX_STACK_LINE(4944)
										bool tmp21 = _this->zip_gverts;		HX_STACK_VAR(tmp21,"tmp21");
										HX_STACK_LINE(4944)
										if ((tmp21)){
											HX_STACK_LINE(4944)
											bool tmp22 = (_this->body != null());		HX_STACK_VAR(tmp22,"tmp22");
											HX_STACK_LINE(4944)
											if ((tmp22)){
												HX_STACK_LINE(4944)
												_this->zip_gverts = false;
												HX_STACK_LINE(4944)
												_this->validate_lverts();
												HX_STACK_LINE(4944)
												{
													HX_STACK_LINE(4944)
													::zpp_nape::phys::ZPP_Body _this1 = _this->body;		HX_STACK_VAR(_this1,"_this1");
													HX_STACK_LINE(4944)
													bool tmp23 = _this1->zip_axis;		HX_STACK_VAR(tmp23,"tmp23");
													HX_STACK_LINE(4944)
													if ((tmp23)){
														HX_STACK_LINE(4944)
														_this1->zip_axis = false;
														HX_STACK_LINE(4944)
														{
															HX_STACK_LINE(4944)
															Float tmp24 = _this1->rot;		HX_STACK_VAR(tmp24,"tmp24");
															HX_STACK_LINE(4944)
															Float tmp25 = ::Math_obj::sin(tmp24);		HX_STACK_VAR(tmp25,"tmp25");
															HX_STACK_LINE(4944)
															_this1->axisx = tmp25;
															HX_STACK_LINE(4944)
															Float tmp26 = _this1->rot;		HX_STACK_VAR(tmp26,"tmp26");
															HX_STACK_LINE(4944)
															Float tmp27 = ::Math_obj::cos(tmp26);		HX_STACK_VAR(tmp27,"tmp27");
															HX_STACK_LINE(4944)
															_this1->axisy = tmp27;
															HX_STACK_LINE(4944)
															Dynamic();
														}
													}
												}
												HX_STACK_LINE(4944)
												::zpp_nape::geom::ZPP_Vec2 tmp23 = _this->lverts->next;		HX_STACK_VAR(tmp23,"tmp23");
												HX_STACK_LINE(4944)
												::zpp_nape::geom::ZPP_Vec2 li = tmp23;		HX_STACK_VAR(li,"li");
												HX_STACK_LINE(4944)
												{
													HX_STACK_LINE(4944)
													::zpp_nape::geom::ZPP_Vec2 tmp24 = _this->gverts->next;		HX_STACK_VAR(tmp24,"tmp24");
													HX_STACK_LINE(4944)
													::zpp_nape::geom::ZPP_Vec2 cx_ite1 = tmp24;		HX_STACK_VAR(cx_ite1,"cx_ite1");
													HX_STACK_LINE(4944)
													while((true)){
														HX_STACK_LINE(4944)
														bool tmp25 = (cx_ite1 != null());		HX_STACK_VAR(tmp25,"tmp25");
														HX_STACK_LINE(4944)
														bool tmp26 = !(tmp25);		HX_STACK_VAR(tmp26,"tmp26");
														HX_STACK_LINE(4944)
														if ((tmp26)){
															HX_STACK_LINE(4944)
															break;
														}
														HX_STACK_LINE(4944)
														::zpp_nape::geom::ZPP_Vec2 g = cx_ite1;		HX_STACK_VAR(g,"g");
														HX_STACK_LINE(4944)
														{
															HX_STACK_LINE(4944)
															::zpp_nape::geom::ZPP_Vec2 l = li;		HX_STACK_VAR(l,"l");
															HX_STACK_LINE(4944)
															li = li->next;
															HX_STACK_LINE(4944)
															{
																HX_STACK_LINE(4944)
																Float tmp27 = _this->body->posx;		HX_STACK_VAR(tmp27,"tmp27");
																HX_STACK_LINE(4944)
																Float tmp28 = _this->body->axisy;		HX_STACK_VAR(tmp28,"tmp28");
																HX_STACK_LINE(4944)
																Float tmp29 = l->x;		HX_STACK_VAR(tmp29,"tmp29");
																HX_STACK_LINE(4944)
																Float tmp30 = (tmp28 * tmp29);		HX_STACK_VAR(tmp30,"tmp30");
																HX_STACK_LINE(4944)
																Float tmp31 = _this->body->axisx;		HX_STACK_VAR(tmp31,"tmp31");
																HX_STACK_LINE(4944)
																Float tmp32 = l->y;		HX_STACK_VAR(tmp32,"tmp32");
																HX_STACK_LINE(4944)
																Float tmp33 = (tmp31 * tmp32);		HX_STACK_VAR(tmp33,"tmp33");
																HX_STACK_LINE(4944)
																Float tmp34 = (tmp30 - tmp33);		HX_STACK_VAR(tmp34,"tmp34");
																HX_STACK_LINE(4944)
																Float tmp35 = (tmp27 + tmp34);		HX_STACK_VAR(tmp35,"tmp35");
																HX_STACK_LINE(4944)
																g->x = tmp35;
																HX_STACK_LINE(4944)
																Float tmp36 = _this->body->posy;		HX_STACK_VAR(tmp36,"tmp36");
																HX_STACK_LINE(4944)
																Float tmp37 = l->x;		HX_STACK_VAR(tmp37,"tmp37");
																HX_STACK_LINE(4944)
																Float tmp38 = _this->body->axisx;		HX_STACK_VAR(tmp38,"tmp38");
																HX_STACK_LINE(4944)
																Float tmp39 = (tmp37 * tmp38);		HX_STACK_VAR(tmp39,"tmp39");
																HX_STACK_LINE(4944)
																Float tmp40 = l->y;		HX_STACK_VAR(tmp40,"tmp40");
																HX_STACK_LINE(4944)
																Float tmp41 = _this->body->axisy;		HX_STACK_VAR(tmp41,"tmp41");
																HX_STACK_LINE(4944)
																Float tmp42 = (tmp40 * tmp41);		HX_STACK_VAR(tmp42,"tmp42");
																HX_STACK_LINE(4944)
																Float tmp43 = (tmp39 + tmp42);		HX_STACK_VAR(tmp43,"tmp43");
																HX_STACK_LINE(4944)
																Float tmp44 = (tmp36 + tmp43);		HX_STACK_VAR(tmp44,"tmp44");
																HX_STACK_LINE(4944)
																g->y = tmp44;
															}
														}
														HX_STACK_LINE(4944)
														cx_ite1 = cx_ite1->next;
													}
												}
											}
										}
									}
									HX_STACK_LINE(4944)
									::zpp_nape::util::ZNPNode_ZPP_Edge tmp21 = _this->edges->head;		HX_STACK_VAR(tmp21,"tmp21");
									HX_STACK_LINE(4944)
									::zpp_nape::util::ZNPNode_ZPP_Edge ite = tmp21;		HX_STACK_VAR(ite,"ite");
									HX_STACK_LINE(4944)
									{
										HX_STACK_LINE(4944)
										::zpp_nape::geom::ZPP_Vec2 tmp22 = _this->gverts->next;		HX_STACK_VAR(tmp22,"tmp22");
										HX_STACK_LINE(4944)
										::zpp_nape::geom::ZPP_Vec2 cx_ite1 = tmp22;		HX_STACK_VAR(cx_ite1,"cx_ite1");
										HX_STACK_LINE(4944)
										::zpp_nape::geom::ZPP_Vec2 u = cx_ite1;		HX_STACK_VAR(u,"u");
										HX_STACK_LINE(4944)
										cx_ite1 = cx_ite1->next;
										HX_STACK_LINE(4944)
										while((true)){
											HX_STACK_LINE(4944)
											bool tmp23 = (cx_ite1 != null());		HX_STACK_VAR(tmp23,"tmp23");
											HX_STACK_LINE(4944)
											bool tmp24 = !(tmp23);		HX_STACK_VAR(tmp24,"tmp24");
											HX_STACK_LINE(4944)
											if ((tmp24)){
												HX_STACK_LINE(4944)
												break;
											}
											HX_STACK_LINE(4944)
											::zpp_nape::geom::ZPP_Vec2 v = cx_ite1;		HX_STACK_VAR(v,"v");
											HX_STACK_LINE(4944)
											{
												HX_STACK_LINE(4944)
												::zpp_nape::shape::ZPP_Edge e = ite->elt;		HX_STACK_VAR(e,"e");
												HX_STACK_LINE(4944)
												ite = ite->next;
												HX_STACK_LINE(4944)
												e->gp0 = u;
												HX_STACK_LINE(4944)
												e->gp1 = v;
												HX_STACK_LINE(4944)
												{
													HX_STACK_LINE(4944)
													Float tmp25 = _this->body->axisy;		HX_STACK_VAR(tmp25,"tmp25");
													HX_STACK_LINE(4944)
													Float tmp26 = e->lnormx;		HX_STACK_VAR(tmp26,"tmp26");
													HX_STACK_LINE(4944)
													Float tmp27 = (tmp25 * tmp26);		HX_STACK_VAR(tmp27,"tmp27");
													HX_STACK_LINE(4944)
													Float tmp28 = _this->body->axisx;		HX_STACK_VAR(tmp28,"tmp28");
													HX_STACK_LINE(4944)
													Float tmp29 = e->lnormy;		HX_STACK_VAR(tmp29,"tmp29");
													HX_STACK_LINE(4944)
													Float tmp30 = (tmp28 * tmp29);		HX_STACK_VAR(tmp30,"tmp30");
													HX_STACK_LINE(4944)
													Float tmp31 = (tmp27 - tmp30);		HX_STACK_VAR(tmp31,"tmp31");
													HX_STACK_LINE(4944)
													e->gnormx = tmp31;
													HX_STACK_LINE(4944)
													Float tmp32 = e->lnormx;		HX_STACK_VAR(tmp32,"tmp32");
													HX_STACK_LINE(4944)
													Float tmp33 = _this->body->axisx;		HX_STACK_VAR(tmp33,"tmp33");
													HX_STACK_LINE(4944)
													Float tmp34 = (tmp32 * tmp33);		HX_STACK_VAR(tmp34,"tmp34");
													HX_STACK_LINE(4944)
													Float tmp35 = e->lnormy;		HX_STACK_VAR(tmp35,"tmp35");
													HX_STACK_LINE(4944)
													Float tmp36 = _this->body->axisy;		HX_STACK_VAR(tmp36,"tmp36");
													HX_STACK_LINE(4944)
													Float tmp37 = (tmp35 * tmp36);		HX_STACK_VAR(tmp37,"tmp37");
													HX_STACK_LINE(4944)
													Float tmp38 = (tmp34 + tmp37);		HX_STACK_VAR(tmp38,"tmp38");
													HX_STACK_LINE(4944)
													e->gnormy = tmp38;
												}
												HX_STACK_LINE(4944)
												Float tmp25 = _this->body->posx;		HX_STACK_VAR(tmp25,"tmp25");
												HX_STACK_LINE(4944)
												Float tmp26 = e->gnormx;		HX_STACK_VAR(tmp26,"tmp26");
												HX_STACK_LINE(4944)
												Float tmp27 = (tmp25 * tmp26);		HX_STACK_VAR(tmp27,"tmp27");
												HX_STACK_LINE(4944)
												Float tmp28 = _this->body->posy;		HX_STACK_VAR(tmp28,"tmp28");
												HX_STACK_LINE(4944)
												Float tmp29 = e->gnormy;		HX_STACK_VAR(tmp29,"tmp29");
												HX_STACK_LINE(4944)
												Float tmp30 = (tmp28 * tmp29);		HX_STACK_VAR(tmp30,"tmp30");
												HX_STACK_LINE(4944)
												Float tmp31 = (tmp27 + tmp30);		HX_STACK_VAR(tmp31,"tmp31");
												HX_STACK_LINE(4944)
												Float tmp32 = e->lprojection;		HX_STACK_VAR(tmp32,"tmp32");
												HX_STACK_LINE(4944)
												Float tmp33 = (tmp31 + tmp32);		HX_STACK_VAR(tmp33,"tmp33");
												HX_STACK_LINE(4944)
												e->gprojection = tmp33;
												HX_STACK_LINE(4944)
												bool tmp34 = (e->wrap_gnorm != null());		HX_STACK_VAR(tmp34,"tmp34");
												HX_STACK_LINE(4944)
												if ((tmp34)){
													HX_STACK_LINE(4944)
													::zpp_nape::geom::ZPP_Vec2 tmp35 = e->wrap_gnorm->zpp_inner;		HX_STACK_VAR(tmp35,"tmp35");
													HX_STACK_LINE(4944)
													tmp35->x = e->gnormx;
													HX_STACK_LINE(4944)
													::zpp_nape::geom::ZPP_Vec2 tmp36 = e->wrap_gnorm->zpp_inner;		HX_STACK_VAR(tmp36,"tmp36");
													HX_STACK_LINE(4944)
													tmp36->y = e->gnormy;
													HX_STACK_LINE(4944)
													{
													}
												}
												HX_STACK_LINE(4944)
												Float tmp35 = e->gp0->y;		HX_STACK_VAR(tmp35,"tmp35");
												HX_STACK_LINE(4944)
												Float tmp36 = e->gnormx;		HX_STACK_VAR(tmp36,"tmp36");
												HX_STACK_LINE(4944)
												Float tmp37 = (tmp35 * tmp36);		HX_STACK_VAR(tmp37,"tmp37");
												HX_STACK_LINE(4944)
												Float tmp38 = e->gp0->x;		HX_STACK_VAR(tmp38,"tmp38");
												HX_STACK_LINE(4944)
												Float tmp39 = e->gnormy;		HX_STACK_VAR(tmp39,"tmp39");
												HX_STACK_LINE(4944)
												Float tmp40 = (tmp38 * tmp39);		HX_STACK_VAR(tmp40,"tmp40");
												HX_STACK_LINE(4944)
												Float tmp41 = (tmp37 - tmp40);		HX_STACK_VAR(tmp41,"tmp41");
												HX_STACK_LINE(4944)
												e->tp0 = tmp41;
												HX_STACK_LINE(4944)
												Float tmp42 = e->gp1->y;		HX_STACK_VAR(tmp42,"tmp42");
												HX_STACK_LINE(4944)
												Float tmp43 = e->gnormx;		HX_STACK_VAR(tmp43,"tmp43");
												HX_STACK_LINE(4944)
												Float tmp44 = (tmp42 * tmp43);		HX_STACK_VAR(tmp44,"tmp44");
												HX_STACK_LINE(4944)
												Float tmp45 = e->gp1->x;		HX_STACK_VAR(tmp45,"tmp45");
												HX_STACK_LINE(4944)
												Float tmp46 = e->gnormy;		HX_STACK_VAR(tmp46,"tmp46");
												HX_STACK_LINE(4944)
												Float tmp47 = (tmp45 * tmp46);		HX_STACK_VAR(tmp47,"tmp47");
												HX_STACK_LINE(4944)
												Float tmp48 = (tmp44 - tmp47);		HX_STACK_VAR(tmp48,"tmp48");
												HX_STACK_LINE(4944)
												e->tp1 = tmp48;
											}
											HX_STACK_LINE(4944)
											u = v;
											HX_STACK_LINE(4944)
											cx_ite1 = cx_ite1->next;
										}
										HX_STACK_LINE(4944)
										::zpp_nape::geom::ZPP_Vec2 tmp23 = _this->gverts->next;		HX_STACK_VAR(tmp23,"tmp23");
										HX_STACK_LINE(4944)
										::zpp_nape::geom::ZPP_Vec2 v = tmp23;		HX_STACK_VAR(v,"v");
										HX_STACK_LINE(4944)
										{
											HX_STACK_LINE(4944)
											::zpp_nape::shape::ZPP_Edge e = ite->elt;		HX_STACK_VAR(e,"e");
											HX_STACK_LINE(4944)
											ite = ite->next;
											HX_STACK_LINE(4944)
											e->gp0 = u;
											HX_STACK_LINE(4944)
											e->gp1 = v;
											HX_STACK_LINE(4944)
											{
												HX_STACK_LINE(4944)
												Float tmp24 = _this->body->axisy;		HX_STACK_VAR(tmp24,"tmp24");
												HX_STACK_LINE(4944)
												Float tmp25 = e->lnormx;		HX_STACK_VAR(tmp25,"tmp25");
												HX_STACK_LINE(4944)
												Float tmp26 = (tmp24 * tmp25);		HX_STACK_VAR(tmp26,"tmp26");
												HX_STACK_LINE(4944)
												Float tmp27 = _this->body->axisx;		HX_STACK_VAR(tmp27,"tmp27");
												HX_STACK_LINE(4944)
												Float tmp28 = e->lnormy;		HX_STACK_VAR(tmp28,"tmp28");
												HX_STACK_LINE(4944)
												Float tmp29 = (tmp27 * tmp28);		HX_STACK_VAR(tmp29,"tmp29");
												HX_STACK_LINE(4944)
												Float tmp30 = (tmp26 - tmp29);		HX_STACK_VAR(tmp30,"tmp30");
												HX_STACK_LINE(4944)
												e->gnormx = tmp30;
												HX_STACK_LINE(4944)
												Float tmp31 = e->lnormx;		HX_STACK_VAR(tmp31,"tmp31");
												HX_STACK_LINE(4944)
												Float tmp32 = _this->body->axisx;		HX_STACK_VAR(tmp32,"tmp32");
												HX_STACK_LINE(4944)
												Float tmp33 = (tmp31 * tmp32);		HX_STACK_VAR(tmp33,"tmp33");
												HX_STACK_LINE(4944)
												Float tmp34 = e->lnormy;		HX_STACK_VAR(tmp34,"tmp34");
												HX_STACK_LINE(4944)
												Float tmp35 = _this->body->axisy;		HX_STACK_VAR(tmp35,"tmp35");
												HX_STACK_LINE(4944)
												Float tmp36 = (tmp34 * tmp35);		HX_STACK_VAR(tmp36,"tmp36");
												HX_STACK_LINE(4944)
												Float tmp37 = (tmp33 + tmp36);		HX_STACK_VAR(tmp37,"tmp37");
												HX_STACK_LINE(4944)
												e->gnormy = tmp37;
											}
											HX_STACK_LINE(4944)
											Float tmp24 = _this->body->posx;		HX_STACK_VAR(tmp24,"tmp24");
											HX_STACK_LINE(4944)
											Float tmp25 = e->gnormx;		HX_STACK_VAR(tmp25,"tmp25");
											HX_STACK_LINE(4944)
											Float tmp26 = (tmp24 * tmp25);		HX_STACK_VAR(tmp26,"tmp26");
											HX_STACK_LINE(4944)
											Float tmp27 = _this->body->posy;		HX_STACK_VAR(tmp27,"tmp27");
											HX_STACK_LINE(4944)
											Float tmp28 = e->gnormy;		HX_STACK_VAR(tmp28,"tmp28");
											HX_STACK_LINE(4944)
											Float tmp29 = (tmp27 * tmp28);		HX_STACK_VAR(tmp29,"tmp29");
											HX_STACK_LINE(4944)
											Float tmp30 = (tmp26 + tmp29);		HX_STACK_VAR(tmp30,"tmp30");
											HX_STACK_LINE(4944)
											Float tmp31 = e->lprojection;		HX_STACK_VAR(tmp31,"tmp31");
											HX_STACK_LINE(4944)
											Float tmp32 = (tmp30 + tmp31);		HX_STACK_VAR(tmp32,"tmp32");
											HX_STACK_LINE(4944)
											e->gprojection = tmp32;
											HX_STACK_LINE(4944)
											bool tmp33 = (e->wrap_gnorm != null());		HX_STACK_VAR(tmp33,"tmp33");
											HX_STACK_LINE(4944)
											if ((tmp33)){
												HX_STACK_LINE(4944)
												::zpp_nape::geom::ZPP_Vec2 tmp34 = e->wrap_gnorm->zpp_inner;		HX_STACK_VAR(tmp34,"tmp34");
												HX_STACK_LINE(4944)
												tmp34->x = e->gnormx;
												HX_STACK_LINE(4944)
												::zpp_nape::geom::ZPP_Vec2 tmp35 = e->wrap_gnorm->zpp_inner;		HX_STACK_VAR(tmp35,"tmp35");
												HX_STACK_LINE(4944)
												tmp35->y = e->gnormy;
												HX_STACK_LINE(4944)
												{
												}
											}
											HX_STACK_LINE(4944)
											Float tmp34 = e->gp0->y;		HX_STACK_VAR(tmp34,"tmp34");
											HX_STACK_LINE(4944)
											Float tmp35 = e->gnormx;		HX_STACK_VAR(tmp35,"tmp35");
											HX_STACK_LINE(4944)
											Float tmp36 = (tmp34 * tmp35);		HX_STACK_VAR(tmp36,"tmp36");
											HX_STACK_LINE(4944)
											Float tmp37 = e->gp0->x;		HX_STACK_VAR(tmp37,"tmp37");
											HX_STACK_LINE(4944)
											Float tmp38 = e->gnormy;		HX_STACK_VAR(tmp38,"tmp38");
											HX_STACK_LINE(4944)
											Float tmp39 = (tmp37 * tmp38);		HX_STACK_VAR(tmp39,"tmp39");
											HX_STACK_LINE(4944)
											Float tmp40 = (tmp36 - tmp39);		HX_STACK_VAR(tmp40,"tmp40");
											HX_STACK_LINE(4944)
											e->tp0 = tmp40;
											HX_STACK_LINE(4944)
											Float tmp41 = e->gp1->y;		HX_STACK_VAR(tmp41,"tmp41");
											HX_STACK_LINE(4944)
											Float tmp42 = e->gnormx;		HX_STACK_VAR(tmp42,"tmp42");
											HX_STACK_LINE(4944)
											Float tmp43 = (tmp41 * tmp42);		HX_STACK_VAR(tmp43,"tmp43");
											HX_STACK_LINE(4944)
											Float tmp44 = e->gp1->x;		HX_STACK_VAR(tmp44,"tmp44");
											HX_STACK_LINE(4944)
											Float tmp45 = e->gnormy;		HX_STACK_VAR(tmp45,"tmp45");
											HX_STACK_LINE(4944)
											Float tmp46 = (tmp44 * tmp45);		HX_STACK_VAR(tmp46,"tmp46");
											HX_STACK_LINE(4944)
											Float tmp47 = (tmp43 - tmp46);		HX_STACK_VAR(tmp47,"tmp47");
											HX_STACK_LINE(4944)
											e->tp1 = tmp47;
										}
									}
								}
							}
						}
					}
				}
				HX_STACK_LINE(4947)
				cx_ite = cx_ite->next;
			}
		}
		HX_STACK_LINE(4950)
		body->sweepFrozen = true;
	}
return null();
}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Space_obj,static_validation,(void))

Void ZPP_Space_obj::validation( ){
{
		HX_STACK_FRAME("zpp_nape.space.ZPP_Space","validation",0x7a29df2f,"zpp_nape.space.ZPP_Space.validation","zpp_nape/space/Space.hx",4952,0x2b65ed03)
		HX_STACK_THIS(this)
		HX_STACK_LINE(4953)
		{
			HX_STACK_LINE(4953)
			::zpp_nape::space::ZPP_CbSetManager tmp = this->cbsets;		HX_STACK_VAR(tmp,"tmp");
			HX_STACK_LINE(4953)
			::zpp_nape::space::ZPP_CbSetManager _this = tmp;		HX_STACK_VAR(_this,"_this");
			HX_STACK_LINE(4953)
			{
				HX_STACK_LINE(4953)
				bool tmp1 = _this->cbsets->empty();		HX_STACK_VAR(tmp1,"tmp1");
				HX_STACK_LINE(4953)
				bool tmp2 = !(tmp1);		HX_STACK_VAR(tmp2,"tmp2");
				HX_STACK_LINE(4953)
				if ((tmp2)){
					HX_STACK_LINE(4953)
					::zpp_nape::util::ZPP_Set_ZPP_CbSet tmp3 = _this->cbsets->parent;		HX_STACK_VAR(tmp3,"tmp3");
					HX_STACK_LINE(4953)
					::zpp_nape::util::ZPP_Set_ZPP_CbSet set_ite = tmp3;		HX_STACK_VAR(set_ite,"set_ite");
					HX_STACK_LINE(4953)
					while((true)){
						HX_STACK_LINE(4953)
						bool tmp4 = (set_ite->prev != null());		HX_STACK_VAR(tmp4,"tmp4");
						HX_STACK_LINE(4953)
						bool tmp5 = !(tmp4);		HX_STACK_VAR(tmp5,"tmp5");
						HX_STACK_LINE(4953)
						if ((tmp5)){
							HX_STACK_LINE(4953)
							break;
						}
						HX_STACK_LINE(4953)
						set_ite = set_ite->prev;
					}
					HX_STACK_LINE(4953)
					while((true)){
						HX_STACK_LINE(4953)
						bool tmp4 = (set_ite != null());		HX_STACK_VAR(tmp4,"tmp4");
						HX_STACK_LINE(4953)
						bool tmp5 = !(tmp4);		HX_STACK_VAR(tmp5,"tmp5");
						HX_STACK_LINE(4953)
						if ((tmp5)){
							HX_STACK_LINE(4953)
							break;
						}
						HX_STACK_LINE(4953)
						::zpp_nape::callbacks::ZPP_CbSet cb = set_ite->data;		HX_STACK_VAR(cb,"cb");
						HX_STACK_LINE(4953)
						cb->validate();
						HX_STACK_LINE(4953)
						bool tmp6 = (set_ite->next != null());		HX_STACK_VAR(tmp6,"tmp6");
						HX_STACK_LINE(4953)
						if ((tmp6)){
							HX_STACK_LINE(4953)
							set_ite = set_ite->next;
							HX_STACK_LINE(4953)
							while((true)){
								HX_STACK_LINE(4953)
								bool tmp7 = (set_ite->prev != null());		HX_STACK_VAR(tmp7,"tmp7");
								HX_STACK_LINE(4953)
								bool tmp8 = !(tmp7);		HX_STACK_VAR(tmp8,"tmp8");
								HX_STACK_LINE(4953)
								if ((tmp8)){
									HX_STACK_LINE(4953)
									break;
								}
								HX_STACK_LINE(4953)
								set_ite = set_ite->prev;
							}
						}
						else{
							HX_STACK_LINE(4953)
							while((true)){
								HX_STACK_LINE(4953)
								bool tmp7 = (set_ite->parent != null());		HX_STACK_VAR(tmp7,"tmp7");
								HX_STACK_LINE(4953)
								bool tmp8;		HX_STACK_VAR(tmp8,"tmp8");
								HX_STACK_LINE(4953)
								if ((tmp7)){
									HX_STACK_LINE(4953)
									::zpp_nape::util::ZPP_Set_ZPP_CbSet tmp9 = set_ite;		HX_STACK_VAR(tmp9,"tmp9");
									HX_STACK_LINE(4953)
									::zpp_nape::util::ZPP_Set_ZPP_CbSet tmp10 = set_ite->parent->next;		HX_STACK_VAR(tmp10,"tmp10");
									HX_STACK_LINE(4953)
									::zpp_nape::util::ZPP_Set_ZPP_CbSet tmp11 = tmp10;		HX_STACK_VAR(tmp11,"tmp11");
									HX_STACK_LINE(4953)
									tmp8 = (tmp9 == tmp11);
								}
								else{
									HX_STACK_LINE(4953)
									tmp8 = false;
								}
								HX_STACK_LINE(4953)
								bool tmp9 = !(tmp8);		HX_STACK_VAR(tmp9,"tmp9");
								HX_STACK_LINE(4953)
								if ((tmp9)){
									HX_STACK_LINE(4953)
									break;
								}
								HX_STACK_LINE(4953)
								set_ite = set_ite->parent;
							}
							HX_STACK_LINE(4953)
							set_ite = set_ite->parent;
						}
					}
				}
			}
		}
		HX_STACK_LINE(4955)
		{
			HX_STACK_LINE(4956)
			::zpp_nape::util::ZNPList_ZPP_Body tmp = this->live;		HX_STACK_VAR(tmp,"tmp");
			HX_STACK_LINE(4956)
			::zpp_nape::util::ZNPNode_ZPP_Body cx_ite = tmp->head;		HX_STACK_VAR(cx_ite,"cx_ite");
			HX_STACK_LINE(4957)
			while((true)){
				HX_STACK_LINE(4957)
				bool tmp1 = (cx_ite != null());		HX_STACK_VAR(tmp1,"tmp1");
				HX_STACK_LINE(4957)
				bool tmp2 = !(tmp1);		HX_STACK_VAR(tmp2,"tmp2");
				HX_STACK_LINE(4957)
				if ((tmp2)){
					HX_STACK_LINE(4957)
					break;
				}
				HX_STACK_LINE(4958)
				::zpp_nape::phys::ZPP_Body cur = cx_ite->elt;		HX_STACK_VAR(cur,"cur");
				HX_STACK_LINE(4959)
				{
					HX_STACK_LINE(4960)
					cur->sweepRadius = (int)0;
					HX_STACK_LINE(4961)
					{
						HX_STACK_LINE(4962)
						::zpp_nape::util::ZNPNode_ZPP_Shape tmp3 = cur->shapes->head;		HX_STACK_VAR(tmp3,"tmp3");
						HX_STACK_LINE(4962)
						::zpp_nape::util::ZNPNode_ZPP_Shape cx_ite1 = tmp3;		HX_STACK_VAR(cx_ite1,"cx_ite1");
						HX_STACK_LINE(4963)
						while((true)){
							HX_STACK_LINE(4963)
							bool tmp4 = (cx_ite1 != null());		HX_STACK_VAR(tmp4,"tmp4");
							HX_STACK_LINE(4963)
							bool tmp5 = !(tmp4);		HX_STACK_VAR(tmp5,"tmp5");
							HX_STACK_LINE(4963)
							if ((tmp5)){
								HX_STACK_LINE(4963)
								break;
							}
							HX_STACK_LINE(4964)
							::zpp_nape::shape::ZPP_Shape s = cx_ite1->elt;		HX_STACK_VAR(s,"s");
							HX_STACK_LINE(4965)
							{
								HX_STACK_LINE(4966)
								int tmp6 = s->type;		HX_STACK_VAR(tmp6,"tmp6");
								HX_STACK_LINE(4966)
								int tmp7 = ::zpp_nape::util::ZPP_Flags_obj::id_ShapeType_POLYGON;		HX_STACK_VAR(tmp7,"tmp7");
								HX_STACK_LINE(4966)
								bool tmp8 = (tmp6 == tmp7);		HX_STACK_VAR(tmp8,"tmp8");
								HX_STACK_LINE(4966)
								if ((tmp8)){
									HX_STACK_LINE(4967)
									{
										HX_STACK_LINE(4967)
										::zpp_nape::shape::ZPP_Polygon _this = s->polygon;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(4967)
										bool tmp9 = _this->zip_sanitation;		HX_STACK_VAR(tmp9,"tmp9");
										HX_STACK_LINE(4967)
										if ((tmp9)){
											HX_STACK_LINE(4967)
											_this->zip_sanitation = false;
											HX_STACK_LINE(4967)
											_this->splice_collinear_real();
										}
									}
									HX_STACK_LINE(4969)
									::nape::shape::ValidationResult tmp9 = s->polygon->valid();		HX_STACK_VAR(tmp9,"tmp9");
									HX_STACK_LINE(4969)
									::nape::shape::ValidationResult res = tmp9;		HX_STACK_VAR(res,"res");
									HX_STACK_LINE(4970)
									::nape::shape::ValidationResult tmp10 = res;		HX_STACK_VAR(tmp10,"tmp10");
									HX_STACK_LINE(4970)
									::nape::shape::ValidationResult tmp11;		HX_STACK_VAR(tmp11,"tmp11");
									HX_STACK_LINE(4970)
									{
										HX_STACK_LINE(4970)
										::nape::shape::ValidationResult tmp12 = ::zpp_nape::util::ZPP_Flags_obj::ValidationResult_VALID;		HX_STACK_VAR(tmp12,"tmp12");
										HX_STACK_LINE(4970)
										bool tmp13 = (tmp12 == null());		HX_STACK_VAR(tmp13,"tmp13");
										HX_STACK_LINE(4970)
										if ((tmp13)){
											HX_STACK_LINE(4970)
											::zpp_nape::util::ZPP_Flags_obj::internal = true;
											HX_STACK_LINE(4970)
											::nape::shape::ValidationResult tmp14 = ::nape::shape::ValidationResult_obj::__new();		HX_STACK_VAR(tmp14,"tmp14");
											HX_STACK_LINE(4970)
											::zpp_nape::util::ZPP_Flags_obj::ValidationResult_VALID = tmp14;
											HX_STACK_LINE(4970)
											::zpp_nape::util::ZPP_Flags_obj::internal = false;
										}
										HX_STACK_LINE(4970)
										tmp11 = ::zpp_nape::util::ZPP_Flags_obj::ValidationResult_VALID;
									}
									HX_STACK_LINE(4970)
									bool tmp12 = (tmp10 != tmp11);		HX_STACK_VAR(tmp12,"tmp12");
									HX_STACK_LINE(4970)
									if ((tmp12)){
										HX_STACK_LINE(4971)
										::nape::shape::Shape tmp13 = s->polygon->outer;		HX_STACK_VAR(tmp13,"tmp13");
										HX_STACK_LINE(4971)
										::String tmp14 = tmp13->toString();		HX_STACK_VAR(tmp14,"tmp14");
										HX_STACK_LINE(4971)
										::String tmp15 = (HX_HCSTRING("Error: Cannot simulate with an invalid Polygon : ","\x3b","\x8a","\x46","\x28") + tmp14);		HX_STACK_VAR(tmp15,"tmp15");
										HX_STACK_LINE(4971)
										::String tmp16 = (tmp15 + HX_HCSTRING(" is invalid : ","\x85","\x20","\x62","\x1d"));		HX_STACK_VAR(tmp16,"tmp16");
										HX_STACK_LINE(4971)
										::String tmp17 = res->toString();		HX_STACK_VAR(tmp17,"tmp17");
										HX_STACK_LINE(4971)
										::String tmp18 = (tmp16 + tmp17);		HX_STACK_VAR(tmp18,"tmp18");
										HX_STACK_LINE(4971)
										HX_STACK_DO_THROW(tmp18);
									}
									HX_STACK_LINE(4974)
									{
										HX_STACK_LINE(4974)
										::zpp_nape::shape::ZPP_Polygon _this = s->polygon;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(4974)
										bool tmp13 = _this->zip_gaxi;		HX_STACK_VAR(tmp13,"tmp13");
										HX_STACK_LINE(4974)
										if ((tmp13)){
											HX_STACK_LINE(4974)
											bool tmp14 = (_this->body != null());		HX_STACK_VAR(tmp14,"tmp14");
											HX_STACK_LINE(4974)
											if ((tmp14)){
												HX_STACK_LINE(4974)
												_this->zip_gaxi = false;
												HX_STACK_LINE(4974)
												_this->validate_laxi();
												HX_STACK_LINE(4974)
												{
													HX_STACK_LINE(4974)
													::zpp_nape::phys::ZPP_Body _this1 = _this->body;		HX_STACK_VAR(_this1,"_this1");
													HX_STACK_LINE(4974)
													bool tmp15 = _this1->zip_axis;		HX_STACK_VAR(tmp15,"tmp15");
													HX_STACK_LINE(4974)
													if ((tmp15)){
														HX_STACK_LINE(4974)
														_this1->zip_axis = false;
														HX_STACK_LINE(4974)
														{
															HX_STACK_LINE(4974)
															Float tmp16 = _this1->rot;		HX_STACK_VAR(tmp16,"tmp16");
															HX_STACK_LINE(4974)
															Float tmp17 = ::Math_obj::sin(tmp16);		HX_STACK_VAR(tmp17,"tmp17");
															HX_STACK_LINE(4974)
															_this1->axisx = tmp17;
															HX_STACK_LINE(4974)
															Float tmp18 = _this1->rot;		HX_STACK_VAR(tmp18,"tmp18");
															HX_STACK_LINE(4974)
															Float tmp19 = ::Math_obj::cos(tmp18);		HX_STACK_VAR(tmp19,"tmp19");
															HX_STACK_LINE(4974)
															_this1->axisy = tmp19;
															HX_STACK_LINE(4974)
															Dynamic();
														}
													}
												}
												HX_STACK_LINE(4974)
												{
													HX_STACK_LINE(4974)
													bool tmp15 = _this->zip_gverts;		HX_STACK_VAR(tmp15,"tmp15");
													HX_STACK_LINE(4974)
													if ((tmp15)){
														HX_STACK_LINE(4974)
														bool tmp16 = (_this->body != null());		HX_STACK_VAR(tmp16,"tmp16");
														HX_STACK_LINE(4974)
														if ((tmp16)){
															HX_STACK_LINE(4974)
															_this->zip_gverts = false;
															HX_STACK_LINE(4974)
															_this->validate_lverts();
															HX_STACK_LINE(4974)
															{
																HX_STACK_LINE(4974)
																::zpp_nape::phys::ZPP_Body _this1 = _this->body;		HX_STACK_VAR(_this1,"_this1");
																HX_STACK_LINE(4974)
																bool tmp17 = _this1->zip_axis;		HX_STACK_VAR(tmp17,"tmp17");
																HX_STACK_LINE(4974)
																if ((tmp17)){
																	HX_STACK_LINE(4974)
																	_this1->zip_axis = false;
																	HX_STACK_LINE(4974)
																	{
																		HX_STACK_LINE(4974)
																		Float tmp18 = _this1->rot;		HX_STACK_VAR(tmp18,"tmp18");
																		HX_STACK_LINE(4974)
																		Float tmp19 = ::Math_obj::sin(tmp18);		HX_STACK_VAR(tmp19,"tmp19");
																		HX_STACK_LINE(4974)
																		_this1->axisx = tmp19;
																		HX_STACK_LINE(4974)
																		Float tmp20 = _this1->rot;		HX_STACK_VAR(tmp20,"tmp20");
																		HX_STACK_LINE(4974)
																		Float tmp21 = ::Math_obj::cos(tmp20);		HX_STACK_VAR(tmp21,"tmp21");
																		HX_STACK_LINE(4974)
																		_this1->axisy = tmp21;
																		HX_STACK_LINE(4974)
																		Dynamic();
																	}
																}
															}
															HX_STACK_LINE(4974)
															::zpp_nape::geom::ZPP_Vec2 tmp17 = _this->lverts->next;		HX_STACK_VAR(tmp17,"tmp17");
															HX_STACK_LINE(4974)
															::zpp_nape::geom::ZPP_Vec2 li = tmp17;		HX_STACK_VAR(li,"li");
															HX_STACK_LINE(4974)
															{
																HX_STACK_LINE(4974)
																::zpp_nape::geom::ZPP_Vec2 tmp18 = _this->gverts->next;		HX_STACK_VAR(tmp18,"tmp18");
																HX_STACK_LINE(4974)
																::zpp_nape::geom::ZPP_Vec2 cx_ite2 = tmp18;		HX_STACK_VAR(cx_ite2,"cx_ite2");
																HX_STACK_LINE(4974)
																while((true)){
																	HX_STACK_LINE(4974)
																	bool tmp19 = (cx_ite2 != null());		HX_STACK_VAR(tmp19,"tmp19");
																	HX_STACK_LINE(4974)
																	bool tmp20 = !(tmp19);		HX_STACK_VAR(tmp20,"tmp20");
																	HX_STACK_LINE(4974)
																	if ((tmp20)){
																		HX_STACK_LINE(4974)
																		break;
																	}
																	HX_STACK_LINE(4974)
																	::zpp_nape::geom::ZPP_Vec2 g = cx_ite2;		HX_STACK_VAR(g,"g");
																	HX_STACK_LINE(4974)
																	{
																		HX_STACK_LINE(4974)
																		::zpp_nape::geom::ZPP_Vec2 l = li;		HX_STACK_VAR(l,"l");
																		HX_STACK_LINE(4974)
																		li = li->next;
																		HX_STACK_LINE(4974)
																		{
																			HX_STACK_LINE(4974)
																			Float tmp21 = _this->body->posx;		HX_STACK_VAR(tmp21,"tmp21");
																			HX_STACK_LINE(4974)
																			Float tmp22 = _this->body->axisy;		HX_STACK_VAR(tmp22,"tmp22");
																			HX_STACK_LINE(4974)
																			Float tmp23 = l->x;		HX_STACK_VAR(tmp23,"tmp23");
																			HX_STACK_LINE(4974)
																			Float tmp24 = (tmp22 * tmp23);		HX_STACK_VAR(tmp24,"tmp24");
																			HX_STACK_LINE(4974)
																			Float tmp25 = _this->body->axisx;		HX_STACK_VAR(tmp25,"tmp25");
																			HX_STACK_LINE(4974)
																			Float tmp26 = l->y;		HX_STACK_VAR(tmp26,"tmp26");
																			HX_STACK_LINE(4974)
																			Float tmp27 = (tmp25 * tmp26);		HX_STACK_VAR(tmp27,"tmp27");
																			HX_STACK_LINE(4974)
																			Float tmp28 = (tmp24 - tmp27);		HX_STACK_VAR(tmp28,"tmp28");
																			HX_STACK_LINE(4974)
																			Float tmp29 = (tmp21 + tmp28);		HX_STACK_VAR(tmp29,"tmp29");
																			HX_STACK_LINE(4974)
																			g->x = tmp29;
																			HX_STACK_LINE(4974)
																			Float tmp30 = _this->body->posy;		HX_STACK_VAR(tmp30,"tmp30");
																			HX_STACK_LINE(4974)
																			Float tmp31 = l->x;		HX_STACK_VAR(tmp31,"tmp31");
																			HX_STACK_LINE(4974)
																			Float tmp32 = _this->body->axisx;		HX_STACK_VAR(tmp32,"tmp32");
																			HX_STACK_LINE(4974)
																			Float tmp33 = (tmp31 * tmp32);		HX_STACK_VAR(tmp33,"tmp33");
																			HX_STACK_LINE(4974)
																			Float tmp34 = l->y;		HX_STACK_VAR(tmp34,"tmp34");
																			HX_STACK_LINE(4974)
																			Float tmp35 = _this->body->axisy;		HX_STACK_VAR(tmp35,"tmp35");
																			HX_STACK_LINE(4974)
																			Float tmp36 = (tmp34 * tmp35);		HX_STACK_VAR(tmp36,"tmp36");
																			HX_STACK_LINE(4974)
																			Float tmp37 = (tmp33 + tmp36);		HX_STACK_VAR(tmp37,"tmp37");
																			HX_STACK_LINE(4974)
																			Float tmp38 = (tmp30 + tmp37);		HX_STACK_VAR(tmp38,"tmp38");
																			HX_STACK_LINE(4974)
																			g->y = tmp38;
																		}
																	}
																	HX_STACK_LINE(4974)
																	cx_ite2 = cx_ite2->next;
																}
															}
														}
													}
												}
												HX_STACK_LINE(4974)
												::zpp_nape::util::ZNPNode_ZPP_Edge tmp15 = _this->edges->head;		HX_STACK_VAR(tmp15,"tmp15");
												HX_STACK_LINE(4974)
												::zpp_nape::util::ZNPNode_ZPP_Edge ite = tmp15;		HX_STACK_VAR(ite,"ite");
												HX_STACK_LINE(4974)
												{
													HX_STACK_LINE(4974)
													::zpp_nape::geom::ZPP_Vec2 tmp16 = _this->gverts->next;		HX_STACK_VAR(tmp16,"tmp16");
													HX_STACK_LINE(4974)
													::zpp_nape::geom::ZPP_Vec2 cx_ite2 = tmp16;		HX_STACK_VAR(cx_ite2,"cx_ite2");
													HX_STACK_LINE(4974)
													::zpp_nape::geom::ZPP_Vec2 u = cx_ite2;		HX_STACK_VAR(u,"u");
													HX_STACK_LINE(4974)
													cx_ite2 = cx_ite2->next;
													HX_STACK_LINE(4974)
													while((true)){
														HX_STACK_LINE(4974)
														bool tmp17 = (cx_ite2 != null());		HX_STACK_VAR(tmp17,"tmp17");
														HX_STACK_LINE(4974)
														bool tmp18 = !(tmp17);		HX_STACK_VAR(tmp18,"tmp18");
														HX_STACK_LINE(4974)
														if ((tmp18)){
															HX_STACK_LINE(4974)
															break;
														}
														HX_STACK_LINE(4974)
														::zpp_nape::geom::ZPP_Vec2 v = cx_ite2;		HX_STACK_VAR(v,"v");
														HX_STACK_LINE(4974)
														{
															HX_STACK_LINE(4974)
															::zpp_nape::shape::ZPP_Edge e = ite->elt;		HX_STACK_VAR(e,"e");
															HX_STACK_LINE(4974)
															ite = ite->next;
															HX_STACK_LINE(4974)
															e->gp0 = u;
															HX_STACK_LINE(4974)
															e->gp1 = v;
															HX_STACK_LINE(4974)
															{
																HX_STACK_LINE(4974)
																Float tmp19 = _this->body->axisy;		HX_STACK_VAR(tmp19,"tmp19");
																HX_STACK_LINE(4974)
																Float tmp20 = e->lnormx;		HX_STACK_VAR(tmp20,"tmp20");
																HX_STACK_LINE(4974)
																Float tmp21 = (tmp19 * tmp20);		HX_STACK_VAR(tmp21,"tmp21");
																HX_STACK_LINE(4974)
																Float tmp22 = _this->body->axisx;		HX_STACK_VAR(tmp22,"tmp22");
																HX_STACK_LINE(4974)
																Float tmp23 = e->lnormy;		HX_STACK_VAR(tmp23,"tmp23");
																HX_STACK_LINE(4974)
																Float tmp24 = (tmp22 * tmp23);		HX_STACK_VAR(tmp24,"tmp24");
																HX_STACK_LINE(4974)
																Float tmp25 = (tmp21 - tmp24);		HX_STACK_VAR(tmp25,"tmp25");
																HX_STACK_LINE(4974)
																e->gnormx = tmp25;
																HX_STACK_LINE(4974)
																Float tmp26 = e->lnormx;		HX_STACK_VAR(tmp26,"tmp26");
																HX_STACK_LINE(4974)
																Float tmp27 = _this->body->axisx;		HX_STACK_VAR(tmp27,"tmp27");
																HX_STACK_LINE(4974)
																Float tmp28 = (tmp26 * tmp27);		HX_STACK_VAR(tmp28,"tmp28");
																HX_STACK_LINE(4974)
																Float tmp29 = e->lnormy;		HX_STACK_VAR(tmp29,"tmp29");
																HX_STACK_LINE(4974)
																Float tmp30 = _this->body->axisy;		HX_STACK_VAR(tmp30,"tmp30");
																HX_STACK_LINE(4974)
																Float tmp31 = (tmp29 * tmp30);		HX_STACK_VAR(tmp31,"tmp31");
																HX_STACK_LINE(4974)
																Float tmp32 = (tmp28 + tmp31);		HX_STACK_VAR(tmp32,"tmp32");
																HX_STACK_LINE(4974)
																e->gnormy = tmp32;
															}
															HX_STACK_LINE(4974)
															Float tmp19 = _this->body->posx;		HX_STACK_VAR(tmp19,"tmp19");
															HX_STACK_LINE(4974)
															Float tmp20 = e->gnormx;		HX_STACK_VAR(tmp20,"tmp20");
															HX_STACK_LINE(4974)
															Float tmp21 = (tmp19 * tmp20);		HX_STACK_VAR(tmp21,"tmp21");
															HX_STACK_LINE(4974)
															Float tmp22 = _this->body->posy;		HX_STACK_VAR(tmp22,"tmp22");
															HX_STACK_LINE(4974)
															Float tmp23 = e->gnormy;		HX_STACK_VAR(tmp23,"tmp23");
															HX_STACK_LINE(4974)
															Float tmp24 = (tmp22 * tmp23);		HX_STACK_VAR(tmp24,"tmp24");
															HX_STACK_LINE(4974)
															Float tmp25 = (tmp21 + tmp24);		HX_STACK_VAR(tmp25,"tmp25");
															HX_STACK_LINE(4974)
															Float tmp26 = e->lprojection;		HX_STACK_VAR(tmp26,"tmp26");
															HX_STACK_LINE(4974)
															Float tmp27 = (tmp25 + tmp26);		HX_STACK_VAR(tmp27,"tmp27");
															HX_STACK_LINE(4974)
															e->gprojection = tmp27;
															HX_STACK_LINE(4974)
															bool tmp28 = (e->wrap_gnorm != null());		HX_STACK_VAR(tmp28,"tmp28");
															HX_STACK_LINE(4974)
															if ((tmp28)){
																HX_STACK_LINE(4974)
																::zpp_nape::geom::ZPP_Vec2 tmp29 = e->wrap_gnorm->zpp_inner;		HX_STACK_VAR(tmp29,"tmp29");
																HX_STACK_LINE(4974)
																tmp29->x = e->gnormx;
																HX_STACK_LINE(4974)
																::zpp_nape::geom::ZPP_Vec2 tmp30 = e->wrap_gnorm->zpp_inner;		HX_STACK_VAR(tmp30,"tmp30");
																HX_STACK_LINE(4974)
																tmp30->y = e->gnormy;
																HX_STACK_LINE(4974)
																{
																}
															}
															HX_STACK_LINE(4974)
															Float tmp29 = e->gp0->y;		HX_STACK_VAR(tmp29,"tmp29");
															HX_STACK_LINE(4974)
															Float tmp30 = e->gnormx;		HX_STACK_VAR(tmp30,"tmp30");
															HX_STACK_LINE(4974)
															Float tmp31 = (tmp29 * tmp30);		HX_STACK_VAR(tmp31,"tmp31");
															HX_STACK_LINE(4974)
															Float tmp32 = e->gp0->x;		HX_STACK_VAR(tmp32,"tmp32");
															HX_STACK_LINE(4974)
															Float tmp33 = e->gnormy;		HX_STACK_VAR(tmp33,"tmp33");
															HX_STACK_LINE(4974)
															Float tmp34 = (tmp32 * tmp33);		HX_STACK_VAR(tmp34,"tmp34");
															HX_STACK_LINE(4974)
															Float tmp35 = (tmp31 - tmp34);		HX_STACK_VAR(tmp35,"tmp35");
															HX_STACK_LINE(4974)
															e->tp0 = tmp35;
															HX_STACK_LINE(4974)
															Float tmp36 = e->gp1->y;		HX_STACK_VAR(tmp36,"tmp36");
															HX_STACK_LINE(4974)
															Float tmp37 = e->gnormx;		HX_STACK_VAR(tmp37,"tmp37");
															HX_STACK_LINE(4974)
															Float tmp38 = (tmp36 * tmp37);		HX_STACK_VAR(tmp38,"tmp38");
															HX_STACK_LINE(4974)
															Float tmp39 = e->gp1->x;		HX_STACK_VAR(tmp39,"tmp39");
															HX_STACK_LINE(4974)
															Float tmp40 = e->gnormy;		HX_STACK_VAR(tmp40,"tmp40");
															HX_STACK_LINE(4974)
															Float tmp41 = (tmp39 * tmp40);		HX_STACK_VAR(tmp41,"tmp41");
															HX_STACK_LINE(4974)
															Float tmp42 = (tmp38 - tmp41);		HX_STACK_VAR(tmp42,"tmp42");
															HX_STACK_LINE(4974)
															e->tp1 = tmp42;
														}
														HX_STACK_LINE(4974)
														u = v;
														HX_STACK_LINE(4974)
														cx_ite2 = cx_ite2->next;
													}
													HX_STACK_LINE(4974)
													::zpp_nape::geom::ZPP_Vec2 tmp17 = _this->gverts->next;		HX_STACK_VAR(tmp17,"tmp17");
													HX_STACK_LINE(4974)
													::zpp_nape::geom::ZPP_Vec2 v = tmp17;		HX_STACK_VAR(v,"v");
													HX_STACK_LINE(4974)
													{
														HX_STACK_LINE(4974)
														::zpp_nape::shape::ZPP_Edge e = ite->elt;		HX_STACK_VAR(e,"e");
														HX_STACK_LINE(4974)
														ite = ite->next;
														HX_STACK_LINE(4974)
														e->gp0 = u;
														HX_STACK_LINE(4974)
														e->gp1 = v;
														HX_STACK_LINE(4974)
														{
															HX_STACK_LINE(4974)
															Float tmp18 = _this->body->axisy;		HX_STACK_VAR(tmp18,"tmp18");
															HX_STACK_LINE(4974)
															Float tmp19 = e->lnormx;		HX_STACK_VAR(tmp19,"tmp19");
															HX_STACK_LINE(4974)
															Float tmp20 = (tmp18 * tmp19);		HX_STACK_VAR(tmp20,"tmp20");
															HX_STACK_LINE(4974)
															Float tmp21 = _this->body->axisx;		HX_STACK_VAR(tmp21,"tmp21");
															HX_STACK_LINE(4974)
															Float tmp22 = e->lnormy;		HX_STACK_VAR(tmp22,"tmp22");
															HX_STACK_LINE(4974)
															Float tmp23 = (tmp21 * tmp22);		HX_STACK_VAR(tmp23,"tmp23");
															HX_STACK_LINE(4974)
															Float tmp24 = (tmp20 - tmp23);		HX_STACK_VAR(tmp24,"tmp24");
															HX_STACK_LINE(4974)
															e->gnormx = tmp24;
															HX_STACK_LINE(4974)
															Float tmp25 = e->lnormx;		HX_STACK_VAR(tmp25,"tmp25");
															HX_STACK_LINE(4974)
															Float tmp26 = _this->body->axisx;		HX_STACK_VAR(tmp26,"tmp26");
															HX_STACK_LINE(4974)
															Float tmp27 = (tmp25 * tmp26);		HX_STACK_VAR(tmp27,"tmp27");
															HX_STACK_LINE(4974)
															Float tmp28 = e->lnormy;		HX_STACK_VAR(tmp28,"tmp28");
															HX_STACK_LINE(4974)
															Float tmp29 = _this->body->axisy;		HX_STACK_VAR(tmp29,"tmp29");
															HX_STACK_LINE(4974)
															Float tmp30 = (tmp28 * tmp29);		HX_STACK_VAR(tmp30,"tmp30");
															HX_STACK_LINE(4974)
															Float tmp31 = (tmp27 + tmp30);		HX_STACK_VAR(tmp31,"tmp31");
															HX_STACK_LINE(4974)
															e->gnormy = tmp31;
														}
														HX_STACK_LINE(4974)
														Float tmp18 = _this->body->posx;		HX_STACK_VAR(tmp18,"tmp18");
														HX_STACK_LINE(4974)
														Float tmp19 = e->gnormx;		HX_STACK_VAR(tmp19,"tmp19");
														HX_STACK_LINE(4974)
														Float tmp20 = (tmp18 * tmp19);		HX_STACK_VAR(tmp20,"tmp20");
														HX_STACK_LINE(4974)
														Float tmp21 = _this->body->posy;		HX_STACK_VAR(tmp21,"tmp21");
														HX_STACK_LINE(4974)
														Float tmp22 = e->gnormy;		HX_STACK_VAR(tmp22,"tmp22");
														HX_STACK_LINE(4974)
														Float tmp23 = (tmp21 * tmp22);		HX_STACK_VAR(tmp23,"tmp23");
														HX_STACK_LINE(4974)
														Float tmp24 = (tmp20 + tmp23);		HX_STACK_VAR(tmp24,"tmp24");
														HX_STACK_LINE(4974)
														Float tmp25 = e->lprojection;		HX_STACK_VAR(tmp25,"tmp25");
														HX_STACK_LINE(4974)
														Float tmp26 = (tmp24 + tmp25);		HX_STACK_VAR(tmp26,"tmp26");
														HX_STACK_LINE(4974)
														e->gprojection = tmp26;
														HX_STACK_LINE(4974)
														bool tmp27 = (e->wrap_gnorm != null());		HX_STACK_VAR(tmp27,"tmp27");
														HX_STACK_LINE(4974)
														if ((tmp27)){
															HX_STACK_LINE(4974)
															::zpp_nape::geom::ZPP_Vec2 tmp28 = e->wrap_gnorm->zpp_inner;		HX_STACK_VAR(tmp28,"tmp28");
															HX_STACK_LINE(4974)
															tmp28->x = e->gnormx;
															HX_STACK_LINE(4974)
															::zpp_nape::geom::ZPP_Vec2 tmp29 = e->wrap_gnorm->zpp_inner;		HX_STACK_VAR(tmp29,"tmp29");
															HX_STACK_LINE(4974)
															tmp29->y = e->gnormy;
															HX_STACK_LINE(4974)
															{
															}
														}
														HX_STACK_LINE(4974)
														Float tmp28 = e->gp0->y;		HX_STACK_VAR(tmp28,"tmp28");
														HX_STACK_LINE(4974)
														Float tmp29 = e->gnormx;		HX_STACK_VAR(tmp29,"tmp29");
														HX_STACK_LINE(4974)
														Float tmp30 = (tmp28 * tmp29);		HX_STACK_VAR(tmp30,"tmp30");
														HX_STACK_LINE(4974)
														Float tmp31 = e->gp0->x;		HX_STACK_VAR(tmp31,"tmp31");
														HX_STACK_LINE(4974)
														Float tmp32 = e->gnormy;		HX_STACK_VAR(tmp32,"tmp32");
														HX_STACK_LINE(4974)
														Float tmp33 = (tmp31 * tmp32);		HX_STACK_VAR(tmp33,"tmp33");
														HX_STACK_LINE(4974)
														Float tmp34 = (tmp30 - tmp33);		HX_STACK_VAR(tmp34,"tmp34");
														HX_STACK_LINE(4974)
														e->tp0 = tmp34;
														HX_STACK_LINE(4974)
														Float tmp35 = e->gp1->y;		HX_STACK_VAR(tmp35,"tmp35");
														HX_STACK_LINE(4974)
														Float tmp36 = e->gnormx;		HX_STACK_VAR(tmp36,"tmp36");
														HX_STACK_LINE(4974)
														Float tmp37 = (tmp35 * tmp36);		HX_STACK_VAR(tmp37,"tmp37");
														HX_STACK_LINE(4974)
														Float tmp38 = e->gp1->x;		HX_STACK_VAR(tmp38,"tmp38");
														HX_STACK_LINE(4974)
														Float tmp39 = e->gnormy;		HX_STACK_VAR(tmp39,"tmp39");
														HX_STACK_LINE(4974)
														Float tmp40 = (tmp38 * tmp39);		HX_STACK_VAR(tmp40,"tmp40");
														HX_STACK_LINE(4974)
														Float tmp41 = (tmp37 - tmp40);		HX_STACK_VAR(tmp41,"tmp41");
														HX_STACK_LINE(4974)
														e->tp1 = tmp41;
													}
												}
											}
										}
									}
								}
								HX_STACK_LINE(4976)
								s->validate_sweepRadius();
								HX_STACK_LINE(4977)
								bool tmp9 = (s->sweepRadius > cur->sweepRadius);		HX_STACK_VAR(tmp9,"tmp9");
								HX_STACK_LINE(4977)
								if ((tmp9)){
									HX_STACK_LINE(4977)
									cur->sweepRadius = s->sweepRadius;
								}
							}
							HX_STACK_LINE(4979)
							cx_ite1 = cx_ite1->next;
						}
					}
					HX_STACK_LINE(4982)
					cur->validate_mass();
					HX_STACK_LINE(4983)
					cur->validate_inertia();
					HX_STACK_LINE(4984)
					::zpp_nape::util::ZNPNode_ZPP_Shape tmp3 = cur->shapes->head;		HX_STACK_VAR(tmp3,"tmp3");
					HX_STACK_LINE(4984)
					bool tmp4 = (tmp3 == null());		HX_STACK_VAR(tmp4,"tmp4");
					HX_STACK_LINE(4984)
					bool tmp5 = !(tmp4);		HX_STACK_VAR(tmp5,"tmp5");
					HX_STACK_LINE(4984)
					if ((tmp5)){
						HX_STACK_LINE(4985)
						{
							HX_STACK_LINE(4985)
							::zpp_nape::util::ZNPNode_ZPP_Shape tmp6 = cur->shapes->head;		HX_STACK_VAR(tmp6,"tmp6");
							HX_STACK_LINE(4985)
							bool tmp7 = (tmp6 == null());		HX_STACK_VAR(tmp7,"tmp7");
							HX_STACK_LINE(4985)
							if ((tmp7)){
								HX_STACK_LINE(4985)
								HX_STACK_DO_THROW(HX_HCSTRING("Error: Body bounds only makes sense if it contains shapes","\x7b","\xb0","\x85","\x6c"));
							}
							HX_STACK_LINE(4985)
							bool tmp8 = cur->zip_aabb;		HX_STACK_VAR(tmp8,"tmp8");
							HX_STACK_LINE(4985)
							if ((tmp8)){
								HX_STACK_LINE(4985)
								cur->zip_aabb = false;
								HX_STACK_LINE(4985)
								{
									HX_STACK_LINE(4985)
									Float tmp9 = ::Math_obj::POSITIVE_INFINITY;		HX_STACK_VAR(tmp9,"tmp9");
									HX_STACK_LINE(4985)
									cur->aabb->minx = tmp9;
									HX_STACK_LINE(4985)
									Float tmp10 = ::Math_obj::POSITIVE_INFINITY;		HX_STACK_VAR(tmp10,"tmp10");
									HX_STACK_LINE(4985)
									cur->aabb->miny = tmp10;
									HX_STACK_LINE(4985)
									{
									}
								}
								HX_STACK_LINE(4985)
								{
									HX_STACK_LINE(4985)
									Float tmp9 = ::Math_obj::NEGATIVE_INFINITY;		HX_STACK_VAR(tmp9,"tmp9");
									HX_STACK_LINE(4985)
									cur->aabb->maxx = tmp9;
									HX_STACK_LINE(4985)
									Float tmp10 = ::Math_obj::NEGATIVE_INFINITY;		HX_STACK_VAR(tmp10,"tmp10");
									HX_STACK_LINE(4985)
									cur->aabb->maxy = tmp10;
									HX_STACK_LINE(4985)
									{
									}
								}
								HX_STACK_LINE(4985)
								{
									HX_STACK_LINE(4985)
									::zpp_nape::util::ZNPNode_ZPP_Shape tmp9 = cur->shapes->head;		HX_STACK_VAR(tmp9,"tmp9");
									HX_STACK_LINE(4985)
									::zpp_nape::util::ZNPNode_ZPP_Shape cx_ite1 = tmp9;		HX_STACK_VAR(cx_ite1,"cx_ite1");
									HX_STACK_LINE(4985)
									while((true)){
										HX_STACK_LINE(4985)
										bool tmp10 = (cx_ite1 != null());		HX_STACK_VAR(tmp10,"tmp10");
										HX_STACK_LINE(4985)
										bool tmp11 = !(tmp10);		HX_STACK_VAR(tmp11,"tmp11");
										HX_STACK_LINE(4985)
										if ((tmp11)){
											HX_STACK_LINE(4985)
											break;
										}
										HX_STACK_LINE(4985)
										::zpp_nape::shape::ZPP_Shape s = cx_ite1->elt;		HX_STACK_VAR(s,"s");
										HX_STACK_LINE(4985)
										{
											HX_STACK_LINE(4985)
											{
												HX_STACK_LINE(4985)
												bool tmp12 = s->zip_aabb;		HX_STACK_VAR(tmp12,"tmp12");
												HX_STACK_LINE(4985)
												if ((tmp12)){
													HX_STACK_LINE(4985)
													bool tmp13 = (s->body != null());		HX_STACK_VAR(tmp13,"tmp13");
													HX_STACK_LINE(4985)
													if ((tmp13)){
														HX_STACK_LINE(4985)
														s->zip_aabb = false;
														HX_STACK_LINE(4985)
														int tmp14 = s->type;		HX_STACK_VAR(tmp14,"tmp14");
														HX_STACK_LINE(4985)
														int tmp15 = ::zpp_nape::util::ZPP_Flags_obj::id_ShapeType_CIRCLE;		HX_STACK_VAR(tmp15,"tmp15");
														HX_STACK_LINE(4985)
														bool tmp16 = (tmp14 == tmp15);		HX_STACK_VAR(tmp16,"tmp16");
														HX_STACK_LINE(4985)
														if ((tmp16)){
															HX_STACK_LINE(4985)
															::zpp_nape::shape::ZPP_Circle _this = s->circle;		HX_STACK_VAR(_this,"_this");
															HX_STACK_LINE(4985)
															{
																HX_STACK_LINE(4985)
																bool tmp17 = _this->zip_worldCOM;		HX_STACK_VAR(tmp17,"tmp17");
																HX_STACK_LINE(4985)
																if ((tmp17)){
																	HX_STACK_LINE(4985)
																	bool tmp18 = (_this->body != null());		HX_STACK_VAR(tmp18,"tmp18");
																	HX_STACK_LINE(4985)
																	if ((tmp18)){
																		HX_STACK_LINE(4985)
																		_this->zip_worldCOM = false;
																		HX_STACK_LINE(4985)
																		{
																			HX_STACK_LINE(4985)
																			bool tmp19 = _this->zip_localCOM;		HX_STACK_VAR(tmp19,"tmp19");
																			HX_STACK_LINE(4985)
																			if ((tmp19)){
																				HX_STACK_LINE(4985)
																				_this->zip_localCOM = false;
																				HX_STACK_LINE(4985)
																				int tmp20 = _this->type;		HX_STACK_VAR(tmp20,"tmp20");
																				HX_STACK_LINE(4985)
																				int tmp21 = ::zpp_nape::util::ZPP_Flags_obj::id_ShapeType_POLYGON;		HX_STACK_VAR(tmp21,"tmp21");
																				HX_STACK_LINE(4985)
																				bool tmp22 = (tmp20 == tmp21);		HX_STACK_VAR(tmp22,"tmp22");
																				HX_STACK_LINE(4985)
																				if ((tmp22)){
																					HX_STACK_LINE(4985)
																					::zpp_nape::shape::ZPP_Polygon _this1 = _this->polygon;		HX_STACK_VAR(_this1,"_this1");
																					HX_STACK_LINE(4985)
																					::zpp_nape::geom::ZPP_Vec2 tmp23 = _this1->lverts->next;		HX_STACK_VAR(tmp23,"tmp23");
																					HX_STACK_LINE(4985)
																					bool tmp24 = (tmp23 == null());		HX_STACK_VAR(tmp24,"tmp24");
																					HX_STACK_LINE(4985)
																					if ((tmp24)){
																						HX_STACK_LINE(4985)
																						HX_STACK_DO_THROW(HX_HCSTRING("Error: An empty polygon has no meaningful localCOM","\x3b","\x8d","\x96","\xf3"));
																					}
																					HX_STACK_LINE(4985)
																					::zpp_nape::geom::ZPP_Vec2 tmp25 = _this1->lverts->next;		HX_STACK_VAR(tmp25,"tmp25");
																					HX_STACK_LINE(4985)
																					::zpp_nape::geom::ZPP_Vec2 tmp26 = tmp25->next;		HX_STACK_VAR(tmp26,"tmp26");
																					HX_STACK_LINE(4985)
																					bool tmp27 = (tmp26 == null());		HX_STACK_VAR(tmp27,"tmp27");
																					HX_STACK_LINE(4985)
																					if ((tmp27)){
																						HX_STACK_LINE(4985)
																						::zpp_nape::geom::ZPP_Vec2 tmp28 = _this1->lverts->next;		HX_STACK_VAR(tmp28,"tmp28");
																						HX_STACK_LINE(4985)
																						_this1->localCOMx = tmp28->x;
																						HX_STACK_LINE(4985)
																						::zpp_nape::geom::ZPP_Vec2 tmp29 = _this1->lverts->next;		HX_STACK_VAR(tmp29,"tmp29");
																						HX_STACK_LINE(4985)
																						_this1->localCOMy = tmp29->y;
																						HX_STACK_LINE(4985)
																						Dynamic();
																					}
																					else{
																						HX_STACK_LINE(4985)
																						::zpp_nape::geom::ZPP_Vec2 tmp28 = _this1->lverts->next;		HX_STACK_VAR(tmp28,"tmp28");
																						HX_STACK_LINE(4985)
																						::zpp_nape::geom::ZPP_Vec2 tmp29 = tmp28->next->next;		HX_STACK_VAR(tmp29,"tmp29");
																						HX_STACK_LINE(4985)
																						bool tmp30 = (tmp29 == null());		HX_STACK_VAR(tmp30,"tmp30");
																						HX_STACK_LINE(4985)
																						if ((tmp30)){
																							HX_STACK_LINE(4985)
																							{
																								HX_STACK_LINE(4985)
																								::zpp_nape::geom::ZPP_Vec2 tmp31 = _this1->lverts->next;		HX_STACK_VAR(tmp31,"tmp31");
																								HX_STACK_LINE(4985)
																								_this1->localCOMx = tmp31->x;
																								HX_STACK_LINE(4985)
																								::zpp_nape::geom::ZPP_Vec2 tmp32 = _this1->lverts->next;		HX_STACK_VAR(tmp32,"tmp32");
																								HX_STACK_LINE(4985)
																								_this1->localCOMy = tmp32->y;
																								HX_STACK_LINE(4985)
																								{
																								}
																							}
																							HX_STACK_LINE(4985)
																							{
																								HX_STACK_LINE(4985)
																								Float t = ((Float)1.0);		HX_STACK_VAR(t,"t");
																								HX_STACK_LINE(4985)
																								::zpp_nape::geom::ZPP_Vec2 tmp31 = _this1->lverts->next;		HX_STACK_VAR(tmp31,"tmp31");
																								HX_STACK_LINE(4985)
																								Float tmp32 = tmp31->next->x;		HX_STACK_VAR(tmp32,"tmp32");
																								HX_STACK_LINE(4985)
																								Float tmp33 = t;		HX_STACK_VAR(tmp33,"tmp33");
																								HX_STACK_LINE(4985)
																								Float tmp34 = (tmp32 * tmp33);		HX_STACK_VAR(tmp34,"tmp34");
																								HX_STACK_LINE(4985)
																								hx::AddEq(_this1->localCOMx,tmp34);
																								HX_STACK_LINE(4985)
																								::zpp_nape::geom::ZPP_Vec2 tmp35 = _this1->lverts->next;		HX_STACK_VAR(tmp35,"tmp35");
																								HX_STACK_LINE(4985)
																								Float tmp36 = tmp35->next->y;		HX_STACK_VAR(tmp36,"tmp36");
																								HX_STACK_LINE(4985)
																								Float tmp37 = t;		HX_STACK_VAR(tmp37,"tmp37");
																								HX_STACK_LINE(4985)
																								Float tmp38 = (tmp36 * tmp37);		HX_STACK_VAR(tmp38,"tmp38");
																								HX_STACK_LINE(4985)
																								hx::AddEq(_this1->localCOMy,tmp38);
																							}
																							HX_STACK_LINE(4985)
																							{
																								HX_STACK_LINE(4985)
																								Float t = ((Float)0.5);		HX_STACK_VAR(t,"t");
																								HX_STACK_LINE(4985)
																								hx::MultEq(_this1->localCOMx,t);
																								HX_STACK_LINE(4985)
																								hx::MultEq(_this1->localCOMy,t);
																							}
																						}
																						else{
																							HX_STACK_LINE(4985)
																							{
																								HX_STACK_LINE(4985)
																								_this1->localCOMx = (int)0;
																								HX_STACK_LINE(4985)
																								_this1->localCOMy = (int)0;
																								HX_STACK_LINE(4985)
																								{
																								}
																							}
																							HX_STACK_LINE(4985)
																							Float area = ((Float)0.0);		HX_STACK_VAR(area,"area");
																							HX_STACK_LINE(4985)
																							{
																								HX_STACK_LINE(4985)
																								::zpp_nape::geom::ZPP_Vec2 tmp31 = _this1->lverts->next;		HX_STACK_VAR(tmp31,"tmp31");
																								HX_STACK_LINE(4985)
																								::zpp_nape::geom::ZPP_Vec2 cx_ite2 = tmp31;		HX_STACK_VAR(cx_ite2,"cx_ite2");
																								HX_STACK_LINE(4985)
																								::zpp_nape::geom::ZPP_Vec2 u = cx_ite2;		HX_STACK_VAR(u,"u");
																								HX_STACK_LINE(4985)
																								cx_ite2 = cx_ite2->next;
																								HX_STACK_LINE(4985)
																								::zpp_nape::geom::ZPP_Vec2 v = cx_ite2;		HX_STACK_VAR(v,"v");
																								HX_STACK_LINE(4985)
																								cx_ite2 = cx_ite2->next;
																								HX_STACK_LINE(4985)
																								while((true)){
																									HX_STACK_LINE(4985)
																									bool tmp32 = (cx_ite2 != null());		HX_STACK_VAR(tmp32,"tmp32");
																									HX_STACK_LINE(4985)
																									bool tmp33 = !(tmp32);		HX_STACK_VAR(tmp33,"tmp33");
																									HX_STACK_LINE(4985)
																									if ((tmp33)){
																										HX_STACK_LINE(4985)
																										break;
																									}
																									HX_STACK_LINE(4985)
																									::zpp_nape::geom::ZPP_Vec2 w = cx_ite2;		HX_STACK_VAR(w,"w");
																									HX_STACK_LINE(4985)
																									{
																										HX_STACK_LINE(4985)
																										Float tmp34 = v->x;		HX_STACK_VAR(tmp34,"tmp34");
																										HX_STACK_LINE(4985)
																										Float tmp35 = (w->y - u->y);		HX_STACK_VAR(tmp35,"tmp35");
																										HX_STACK_LINE(4985)
																										Float tmp36 = (tmp34 * tmp35);		HX_STACK_VAR(tmp36,"tmp36");
																										HX_STACK_LINE(4985)
																										hx::AddEq(area,tmp36);
																										HX_STACK_LINE(4985)
																										Float tmp37 = (w->y * v->x);		HX_STACK_VAR(tmp37,"tmp37");
																										HX_STACK_LINE(4985)
																										Float tmp38 = (w->x * v->y);		HX_STACK_VAR(tmp38,"tmp38");
																										HX_STACK_LINE(4985)
																										Float tmp39 = (tmp37 - tmp38);		HX_STACK_VAR(tmp39,"tmp39");
																										HX_STACK_LINE(4985)
																										Float cf = tmp39;		HX_STACK_VAR(cf,"cf");
																										HX_STACK_LINE(4985)
																										Float tmp40 = (v->x + w->x);		HX_STACK_VAR(tmp40,"tmp40");
																										HX_STACK_LINE(4985)
																										Float tmp41 = cf;		HX_STACK_VAR(tmp41,"tmp41");
																										HX_STACK_LINE(4985)
																										Float tmp42 = (tmp40 * tmp41);		HX_STACK_VAR(tmp42,"tmp42");
																										HX_STACK_LINE(4985)
																										hx::AddEq(_this1->localCOMx,tmp42);
																										HX_STACK_LINE(4985)
																										Float tmp43 = (v->y + w->y);		HX_STACK_VAR(tmp43,"tmp43");
																										HX_STACK_LINE(4985)
																										Float tmp44 = cf;		HX_STACK_VAR(tmp44,"tmp44");
																										HX_STACK_LINE(4985)
																										Float tmp45 = (tmp43 * tmp44);		HX_STACK_VAR(tmp45,"tmp45");
																										HX_STACK_LINE(4985)
																										hx::AddEq(_this1->localCOMy,tmp45);
																									}
																									HX_STACK_LINE(4985)
																									u = v;
																									HX_STACK_LINE(4985)
																									v = w;
																									HX_STACK_LINE(4985)
																									cx_ite2 = cx_ite2->next;
																								}
																								HX_STACK_LINE(4985)
																								::zpp_nape::geom::ZPP_Vec2 tmp32 = _this1->lverts->next;		HX_STACK_VAR(tmp32,"tmp32");
																								HX_STACK_LINE(4985)
																								cx_ite2 = tmp32;
																								HX_STACK_LINE(4985)
																								::zpp_nape::geom::ZPP_Vec2 w = cx_ite2;		HX_STACK_VAR(w,"w");
																								HX_STACK_LINE(4985)
																								{
																									HX_STACK_LINE(4985)
																									Float tmp33 = v->x;		HX_STACK_VAR(tmp33,"tmp33");
																									HX_STACK_LINE(4985)
																									Float tmp34 = (w->y - u->y);		HX_STACK_VAR(tmp34,"tmp34");
																									HX_STACK_LINE(4985)
																									Float tmp35 = (tmp33 * tmp34);		HX_STACK_VAR(tmp35,"tmp35");
																									HX_STACK_LINE(4985)
																									hx::AddEq(area,tmp35);
																									HX_STACK_LINE(4985)
																									Float tmp36 = (w->y * v->x);		HX_STACK_VAR(tmp36,"tmp36");
																									HX_STACK_LINE(4985)
																									Float tmp37 = (w->x * v->y);		HX_STACK_VAR(tmp37,"tmp37");
																									HX_STACK_LINE(4985)
																									Float tmp38 = (tmp36 - tmp37);		HX_STACK_VAR(tmp38,"tmp38");
																									HX_STACK_LINE(4985)
																									Float cf = tmp38;		HX_STACK_VAR(cf,"cf");
																									HX_STACK_LINE(4985)
																									Float tmp39 = (v->x + w->x);		HX_STACK_VAR(tmp39,"tmp39");
																									HX_STACK_LINE(4985)
																									Float tmp40 = cf;		HX_STACK_VAR(tmp40,"tmp40");
																									HX_STACK_LINE(4985)
																									Float tmp41 = (tmp39 * tmp40);		HX_STACK_VAR(tmp41,"tmp41");
																									HX_STACK_LINE(4985)
																									hx::AddEq(_this1->localCOMx,tmp41);
																									HX_STACK_LINE(4985)
																									Float tmp42 = (v->y + w->y);		HX_STACK_VAR(tmp42,"tmp42");
																									HX_STACK_LINE(4985)
																									Float tmp43 = cf;		HX_STACK_VAR(tmp43,"tmp43");
																									HX_STACK_LINE(4985)
																									Float tmp44 = (tmp42 * tmp43);		HX_STACK_VAR(tmp44,"tmp44");
																									HX_STACK_LINE(4985)
																									hx::AddEq(_this1->localCOMy,tmp44);
																								}
																								HX_STACK_LINE(4985)
																								u = v;
																								HX_STACK_LINE(4985)
																								v = w;
																								HX_STACK_LINE(4985)
																								cx_ite2 = cx_ite2->next;
																								HX_STACK_LINE(4985)
																								::zpp_nape::geom::ZPP_Vec2 w1 = cx_ite2;		HX_STACK_VAR(w1,"w1");
																								HX_STACK_LINE(4985)
																								{
																									HX_STACK_LINE(4985)
																									Float tmp33 = v->x;		HX_STACK_VAR(tmp33,"tmp33");
																									HX_STACK_LINE(4985)
																									Float tmp34 = (w1->y - u->y);		HX_STACK_VAR(tmp34,"tmp34");
																									HX_STACK_LINE(4985)
																									Float tmp35 = (tmp33 * tmp34);		HX_STACK_VAR(tmp35,"tmp35");
																									HX_STACK_LINE(4985)
																									hx::AddEq(area,tmp35);
																									HX_STACK_LINE(4985)
																									Float tmp36 = (w1->y * v->x);		HX_STACK_VAR(tmp36,"tmp36");
																									HX_STACK_LINE(4985)
																									Float tmp37 = (w1->x * v->y);		HX_STACK_VAR(tmp37,"tmp37");
																									HX_STACK_LINE(4985)
																									Float tmp38 = (tmp36 - tmp37);		HX_STACK_VAR(tmp38,"tmp38");
																									HX_STACK_LINE(4985)
																									Float cf = tmp38;		HX_STACK_VAR(cf,"cf");
																									HX_STACK_LINE(4985)
																									Float tmp39 = (v->x + w1->x);		HX_STACK_VAR(tmp39,"tmp39");
																									HX_STACK_LINE(4985)
																									Float tmp40 = cf;		HX_STACK_VAR(tmp40,"tmp40");
																									HX_STACK_LINE(4985)
																									Float tmp41 = (tmp39 * tmp40);		HX_STACK_VAR(tmp41,"tmp41");
																									HX_STACK_LINE(4985)
																									hx::AddEq(_this1->localCOMx,tmp41);
																									HX_STACK_LINE(4985)
																									Float tmp42 = (v->y + w1->y);		HX_STACK_VAR(tmp42,"tmp42");
																									HX_STACK_LINE(4985)
																									Float tmp43 = cf;		HX_STACK_VAR(tmp43,"tmp43");
																									HX_STACK_LINE(4985)
																									Float tmp44 = (tmp42 * tmp43);		HX_STACK_VAR(tmp44,"tmp44");
																									HX_STACK_LINE(4985)
																									hx::AddEq(_this1->localCOMy,tmp44);
																								}
																							}
																							HX_STACK_LINE(4985)
																							Float tmp31 = ((int)3 * area);		HX_STACK_VAR(tmp31,"tmp31");
																							HX_STACK_LINE(4985)
																							Float tmp32 = (Float((int)1) / Float(tmp31));		HX_STACK_VAR(tmp32,"tmp32");
																							HX_STACK_LINE(4985)
																							area = tmp32;
																							HX_STACK_LINE(4985)
																							{
																								HX_STACK_LINE(4985)
																								Float t = area;		HX_STACK_VAR(t,"t");
																								HX_STACK_LINE(4985)
																								hx::MultEq(_this1->localCOMx,t);
																								HX_STACK_LINE(4985)
																								hx::MultEq(_this1->localCOMy,t);
																							}
																						}
																					}
																				}
																				HX_STACK_LINE(4985)
																				bool tmp23 = (_this->wrap_localCOM != null());		HX_STACK_VAR(tmp23,"tmp23");
																				HX_STACK_LINE(4985)
																				if ((tmp23)){
																					HX_STACK_LINE(4985)
																					::zpp_nape::geom::ZPP_Vec2 tmp24 = _this->wrap_localCOM->zpp_inner;		HX_STACK_VAR(tmp24,"tmp24");
																					HX_STACK_LINE(4985)
																					tmp24->x = _this->localCOMx;
																					HX_STACK_LINE(4985)
																					::zpp_nape::geom::ZPP_Vec2 tmp25 = _this->wrap_localCOM->zpp_inner;		HX_STACK_VAR(tmp25,"tmp25");
																					HX_STACK_LINE(4985)
																					tmp25->y = _this->localCOMy;
																					HX_STACK_LINE(4985)
																					{
																					}
																				}
																			}
																		}
																		HX_STACK_LINE(4985)
																		{
																			HX_STACK_LINE(4985)
																			::zpp_nape::phys::ZPP_Body _this1 = _this->body;		HX_STACK_VAR(_this1,"_this1");
																			HX_STACK_LINE(4985)
																			bool tmp19 = _this1->zip_axis;		HX_STACK_VAR(tmp19,"tmp19");
																			HX_STACK_LINE(4985)
																			if ((tmp19)){
																				HX_STACK_LINE(4985)
																				_this1->zip_axis = false;
																				HX_STACK_LINE(4985)
																				{
																					HX_STACK_LINE(4985)
																					Float tmp20 = _this1->rot;		HX_STACK_VAR(tmp20,"tmp20");
																					HX_STACK_LINE(4985)
																					Float tmp21 = ::Math_obj::sin(tmp20);		HX_STACK_VAR(tmp21,"tmp21");
																					HX_STACK_LINE(4985)
																					_this1->axisx = tmp21;
																					HX_STACK_LINE(4985)
																					Float tmp22 = _this1->rot;		HX_STACK_VAR(tmp22,"tmp22");
																					HX_STACK_LINE(4985)
																					Float tmp23 = ::Math_obj::cos(tmp22);		HX_STACK_VAR(tmp23,"tmp23");
																					HX_STACK_LINE(4985)
																					_this1->axisy = tmp23;
																					HX_STACK_LINE(4985)
																					Dynamic();
																				}
																			}
																		}
																		HX_STACK_LINE(4985)
																		{
																			HX_STACK_LINE(4985)
																			Float tmp19 = _this->body->posx;		HX_STACK_VAR(tmp19,"tmp19");
																			HX_STACK_LINE(4985)
																			Float tmp20 = _this->body->axisy;		HX_STACK_VAR(tmp20,"tmp20");
																			HX_STACK_LINE(4985)
																			Float tmp21 = _this->localCOMx;		HX_STACK_VAR(tmp21,"tmp21");
																			HX_STACK_LINE(4985)
																			Float tmp22 = (tmp20 * tmp21);		HX_STACK_VAR(tmp22,"tmp22");
																			HX_STACK_LINE(4985)
																			Float tmp23 = _this->body->axisx;		HX_STACK_VAR(tmp23,"tmp23");
																			HX_STACK_LINE(4985)
																			Float tmp24 = _this->localCOMy;		HX_STACK_VAR(tmp24,"tmp24");
																			HX_STACK_LINE(4985)
																			Float tmp25 = (tmp23 * tmp24);		HX_STACK_VAR(tmp25,"tmp25");
																			HX_STACK_LINE(4985)
																			Float tmp26 = (tmp22 - tmp25);		HX_STACK_VAR(tmp26,"tmp26");
																			HX_STACK_LINE(4985)
																			Float tmp27 = (tmp19 + tmp26);		HX_STACK_VAR(tmp27,"tmp27");
																			HX_STACK_LINE(4985)
																			_this->worldCOMx = tmp27;
																			HX_STACK_LINE(4985)
																			Float tmp28 = _this->body->posy;		HX_STACK_VAR(tmp28,"tmp28");
																			HX_STACK_LINE(4985)
																			Float tmp29 = _this->localCOMx;		HX_STACK_VAR(tmp29,"tmp29");
																			HX_STACK_LINE(4985)
																			Float tmp30 = _this->body->axisx;		HX_STACK_VAR(tmp30,"tmp30");
																			HX_STACK_LINE(4985)
																			Float tmp31 = (tmp29 * tmp30);		HX_STACK_VAR(tmp31,"tmp31");
																			HX_STACK_LINE(4985)
																			Float tmp32 = _this->localCOMy;		HX_STACK_VAR(tmp32,"tmp32");
																			HX_STACK_LINE(4985)
																			Float tmp33 = _this->body->axisy;		HX_STACK_VAR(tmp33,"tmp33");
																			HX_STACK_LINE(4985)
																			Float tmp34 = (tmp32 * tmp33);		HX_STACK_VAR(tmp34,"tmp34");
																			HX_STACK_LINE(4985)
																			Float tmp35 = (tmp31 + tmp34);		HX_STACK_VAR(tmp35,"tmp35");
																			HX_STACK_LINE(4985)
																			Float tmp36 = (tmp28 + tmp35);		HX_STACK_VAR(tmp36,"tmp36");
																			HX_STACK_LINE(4985)
																			_this->worldCOMy = tmp36;
																		}
																	}
																}
															}
															HX_STACK_LINE(4985)
															Float rx = _this->radius;		HX_STACK_VAR(rx,"rx");
															HX_STACK_LINE(4985)
															Float ry = _this->radius;		HX_STACK_VAR(ry,"ry");
															HX_STACK_LINE(4985)
															{
																HX_STACK_LINE(4985)
																Float tmp17 = (_this->worldCOMx - rx);		HX_STACK_VAR(tmp17,"tmp17");
																HX_STACK_LINE(4985)
																_this->aabb->minx = tmp17;
																HX_STACK_LINE(4985)
																Float tmp18 = (_this->worldCOMy - ry);		HX_STACK_VAR(tmp18,"tmp18");
																HX_STACK_LINE(4985)
																_this->aabb->miny = tmp18;
															}
															HX_STACK_LINE(4985)
															{
																HX_STACK_LINE(4985)
																Float tmp17 = (_this->worldCOMx + rx);		HX_STACK_VAR(tmp17,"tmp17");
																HX_STACK_LINE(4985)
																_this->aabb->maxx = tmp17;
																HX_STACK_LINE(4985)
																Float tmp18 = (_this->worldCOMy + ry);		HX_STACK_VAR(tmp18,"tmp18");
																HX_STACK_LINE(4985)
																_this->aabb->maxy = tmp18;
															}
														}
														else{
															HX_STACK_LINE(4985)
															::zpp_nape::shape::ZPP_Polygon _this = s->polygon;		HX_STACK_VAR(_this,"_this");
															HX_STACK_LINE(4985)
															{
																HX_STACK_LINE(4985)
																bool tmp17 = _this->zip_gverts;		HX_STACK_VAR(tmp17,"tmp17");
																HX_STACK_LINE(4985)
																if ((tmp17)){
																	HX_STACK_LINE(4985)
																	bool tmp18 = (_this->body != null());		HX_STACK_VAR(tmp18,"tmp18");
																	HX_STACK_LINE(4985)
																	if ((tmp18)){
																		HX_STACK_LINE(4985)
																		_this->zip_gverts = false;
																		HX_STACK_LINE(4985)
																		_this->validate_lverts();
																		HX_STACK_LINE(4985)
																		{
																			HX_STACK_LINE(4985)
																			::zpp_nape::phys::ZPP_Body _this1 = _this->body;		HX_STACK_VAR(_this1,"_this1");
																			HX_STACK_LINE(4985)
																			bool tmp19 = _this1->zip_axis;		HX_STACK_VAR(tmp19,"tmp19");
																			HX_STACK_LINE(4985)
																			if ((tmp19)){
																				HX_STACK_LINE(4985)
																				_this1->zip_axis = false;
																				HX_STACK_LINE(4985)
																				{
																					HX_STACK_LINE(4985)
																					Float tmp20 = _this1->rot;		HX_STACK_VAR(tmp20,"tmp20");
																					HX_STACK_LINE(4985)
																					Float tmp21 = ::Math_obj::sin(tmp20);		HX_STACK_VAR(tmp21,"tmp21");
																					HX_STACK_LINE(4985)
																					_this1->axisx = tmp21;
																					HX_STACK_LINE(4985)
																					Float tmp22 = _this1->rot;		HX_STACK_VAR(tmp22,"tmp22");
																					HX_STACK_LINE(4985)
																					Float tmp23 = ::Math_obj::cos(tmp22);		HX_STACK_VAR(tmp23,"tmp23");
																					HX_STACK_LINE(4985)
																					_this1->axisy = tmp23;
																					HX_STACK_LINE(4985)
																					Dynamic();
																				}
																			}
																		}
																		HX_STACK_LINE(4985)
																		::zpp_nape::geom::ZPP_Vec2 tmp19 = _this->lverts->next;		HX_STACK_VAR(tmp19,"tmp19");
																		HX_STACK_LINE(4985)
																		::zpp_nape::geom::ZPP_Vec2 li = tmp19;		HX_STACK_VAR(li,"li");
																		HX_STACK_LINE(4985)
																		{
																			HX_STACK_LINE(4985)
																			::zpp_nape::geom::ZPP_Vec2 tmp20 = _this->gverts->next;		HX_STACK_VAR(tmp20,"tmp20");
																			HX_STACK_LINE(4985)
																			::zpp_nape::geom::ZPP_Vec2 cx_ite2 = tmp20;		HX_STACK_VAR(cx_ite2,"cx_ite2");
																			HX_STACK_LINE(4985)
																			while((true)){
																				HX_STACK_LINE(4985)
																				bool tmp21 = (cx_ite2 != null());		HX_STACK_VAR(tmp21,"tmp21");
																				HX_STACK_LINE(4985)
																				bool tmp22 = !(tmp21);		HX_STACK_VAR(tmp22,"tmp22");
																				HX_STACK_LINE(4985)
																				if ((tmp22)){
																					HX_STACK_LINE(4985)
																					break;
																				}
																				HX_STACK_LINE(4985)
																				::zpp_nape::geom::ZPP_Vec2 g = cx_ite2;		HX_STACK_VAR(g,"g");
																				HX_STACK_LINE(4985)
																				{
																					HX_STACK_LINE(4985)
																					::zpp_nape::geom::ZPP_Vec2 l = li;		HX_STACK_VAR(l,"l");
																					HX_STACK_LINE(4985)
																					li = li->next;
																					HX_STACK_LINE(4985)
																					{
																						HX_STACK_LINE(4985)
																						Float tmp23 = _this->body->posx;		HX_STACK_VAR(tmp23,"tmp23");
																						HX_STACK_LINE(4985)
																						Float tmp24 = _this->body->axisy;		HX_STACK_VAR(tmp24,"tmp24");
																						HX_STACK_LINE(4985)
																						Float tmp25 = l->x;		HX_STACK_VAR(tmp25,"tmp25");
																						HX_STACK_LINE(4985)
																						Float tmp26 = (tmp24 * tmp25);		HX_STACK_VAR(tmp26,"tmp26");
																						HX_STACK_LINE(4985)
																						Float tmp27 = _this->body->axisx;		HX_STACK_VAR(tmp27,"tmp27");
																						HX_STACK_LINE(4985)
																						Float tmp28 = l->y;		HX_STACK_VAR(tmp28,"tmp28");
																						HX_STACK_LINE(4985)
																						Float tmp29 = (tmp27 * tmp28);		HX_STACK_VAR(tmp29,"tmp29");
																						HX_STACK_LINE(4985)
																						Float tmp30 = (tmp26 - tmp29);		HX_STACK_VAR(tmp30,"tmp30");
																						HX_STACK_LINE(4985)
																						Float tmp31 = (tmp23 + tmp30);		HX_STACK_VAR(tmp31,"tmp31");
																						HX_STACK_LINE(4985)
																						g->x = tmp31;
																						HX_STACK_LINE(4985)
																						Float tmp32 = _this->body->posy;		HX_STACK_VAR(tmp32,"tmp32");
																						HX_STACK_LINE(4985)
																						Float tmp33 = l->x;		HX_STACK_VAR(tmp33,"tmp33");
																						HX_STACK_LINE(4985)
																						Float tmp34 = _this->body->axisx;		HX_STACK_VAR(tmp34,"tmp34");
																						HX_STACK_LINE(4985)
																						Float tmp35 = (tmp33 * tmp34);		HX_STACK_VAR(tmp35,"tmp35");
																						HX_STACK_LINE(4985)
																						Float tmp36 = l->y;		HX_STACK_VAR(tmp36,"tmp36");
																						HX_STACK_LINE(4985)
																						Float tmp37 = _this->body->axisy;		HX_STACK_VAR(tmp37,"tmp37");
																						HX_STACK_LINE(4985)
																						Float tmp38 = (tmp36 * tmp37);		HX_STACK_VAR(tmp38,"tmp38");
																						HX_STACK_LINE(4985)
																						Float tmp39 = (tmp35 + tmp38);		HX_STACK_VAR(tmp39,"tmp39");
																						HX_STACK_LINE(4985)
																						Float tmp40 = (tmp32 + tmp39);		HX_STACK_VAR(tmp40,"tmp40");
																						HX_STACK_LINE(4985)
																						g->y = tmp40;
																					}
																				}
																				HX_STACK_LINE(4985)
																				cx_ite2 = cx_ite2->next;
																			}
																		}
																	}
																}
															}
															HX_STACK_LINE(4985)
															::zpp_nape::geom::ZPP_Vec2 tmp17 = _this->lverts->next;		HX_STACK_VAR(tmp17,"tmp17");
															HX_STACK_LINE(4985)
															bool tmp18 = (tmp17 == null());		HX_STACK_VAR(tmp18,"tmp18");
															HX_STACK_LINE(4985)
															if ((tmp18)){
																HX_STACK_LINE(4985)
																HX_STACK_DO_THROW(HX_HCSTRING("Error: An empty polygon has no meaningful bounds","\xda","\x28","\x5b","\xf5"));
															}
															HX_STACK_LINE(4985)
															::zpp_nape::geom::ZPP_Vec2 tmp19 = _this->gverts->next;		HX_STACK_VAR(tmp19,"tmp19");
															HX_STACK_LINE(4985)
															::zpp_nape::geom::ZPP_Vec2 p0 = tmp19;		HX_STACK_VAR(p0,"p0");
															HX_STACK_LINE(4985)
															{
																HX_STACK_LINE(4985)
																_this->aabb->minx = p0->x;
																HX_STACK_LINE(4985)
																_this->aabb->miny = p0->y;
																HX_STACK_LINE(4985)
																{
																}
															}
															HX_STACK_LINE(4985)
															{
																HX_STACK_LINE(4985)
																_this->aabb->maxx = p0->x;
																HX_STACK_LINE(4985)
																_this->aabb->maxy = p0->y;
																HX_STACK_LINE(4985)
																{
																}
															}
															HX_STACK_LINE(4985)
															{
																HX_STACK_LINE(4985)
																::zpp_nape::geom::ZPP_Vec2 tmp20 = _this->gverts->next;		HX_STACK_VAR(tmp20,"tmp20");
																HX_STACK_LINE(4985)
																::zpp_nape::geom::ZPP_Vec2 cx_ite2 = tmp20->next;		HX_STACK_VAR(cx_ite2,"cx_ite2");
																HX_STACK_LINE(4985)
																while((true)){
																	HX_STACK_LINE(4985)
																	bool tmp21 = (cx_ite2 != null());		HX_STACK_VAR(tmp21,"tmp21");
																	HX_STACK_LINE(4985)
																	bool tmp22 = !(tmp21);		HX_STACK_VAR(tmp22,"tmp22");
																	HX_STACK_LINE(4985)
																	if ((tmp22)){
																		HX_STACK_LINE(4985)
																		break;
																	}
																	HX_STACK_LINE(4985)
																	::zpp_nape::geom::ZPP_Vec2 p = cx_ite2;		HX_STACK_VAR(p,"p");
																	HX_STACK_LINE(4985)
																	{
																		HX_STACK_LINE(4985)
																		Float tmp23 = p->x;		HX_STACK_VAR(tmp23,"tmp23");
																		HX_STACK_LINE(4985)
																		Float tmp24 = _this->aabb->minx;		HX_STACK_VAR(tmp24,"tmp24");
																		HX_STACK_LINE(4985)
																		bool tmp25 = (tmp23 < tmp24);		HX_STACK_VAR(tmp25,"tmp25");
																		HX_STACK_LINE(4985)
																		if ((tmp25)){
																			HX_STACK_LINE(4985)
																			_this->aabb->minx = p->x;
																		}
																		HX_STACK_LINE(4985)
																		Float tmp26 = p->x;		HX_STACK_VAR(tmp26,"tmp26");
																		HX_STACK_LINE(4985)
																		Float tmp27 = _this->aabb->maxx;		HX_STACK_VAR(tmp27,"tmp27");
																		HX_STACK_LINE(4985)
																		bool tmp28 = (tmp26 > tmp27);		HX_STACK_VAR(tmp28,"tmp28");
																		HX_STACK_LINE(4985)
																		if ((tmp28)){
																			HX_STACK_LINE(4985)
																			_this->aabb->maxx = p->x;
																		}
																		HX_STACK_LINE(4985)
																		Float tmp29 = p->y;		HX_STACK_VAR(tmp29,"tmp29");
																		HX_STACK_LINE(4985)
																		Float tmp30 = _this->aabb->miny;		HX_STACK_VAR(tmp30,"tmp30");
																		HX_STACK_LINE(4985)
																		bool tmp31 = (tmp29 < tmp30);		HX_STACK_VAR(tmp31,"tmp31");
																		HX_STACK_LINE(4985)
																		if ((tmp31)){
																			HX_STACK_LINE(4985)
																			_this->aabb->miny = p->y;
																		}
																		HX_STACK_LINE(4985)
																		Float tmp32 = p->y;		HX_STACK_VAR(tmp32,"tmp32");
																		HX_STACK_LINE(4985)
																		Float tmp33 = _this->aabb->maxy;		HX_STACK_VAR(tmp33,"tmp33");
																		HX_STACK_LINE(4985)
																		bool tmp34 = (tmp32 > tmp33);		HX_STACK_VAR(tmp34,"tmp34");
																		HX_STACK_LINE(4985)
																		if ((tmp34)){
																			HX_STACK_LINE(4985)
																			_this->aabb->maxy = p->y;
																		}
																	}
																	HX_STACK_LINE(4985)
																	cx_ite2 = cx_ite2->next;
																}
															}
														}
													}
												}
											}
											HX_STACK_LINE(4985)
											{
												HX_STACK_LINE(4985)
												::zpp_nape::geom::ZPP_AABB _this = cur->aabb;		HX_STACK_VAR(_this,"_this");
												HX_STACK_LINE(4985)
												::zpp_nape::geom::ZPP_AABB x = s->aabb;		HX_STACK_VAR(x,"x");
												HX_STACK_LINE(4985)
												bool tmp12 = (x->minx < _this->minx);		HX_STACK_VAR(tmp12,"tmp12");
												HX_STACK_LINE(4985)
												if ((tmp12)){
													HX_STACK_LINE(4985)
													_this->minx = x->minx;
												}
												HX_STACK_LINE(4985)
												bool tmp13 = (x->maxx > _this->maxx);		HX_STACK_VAR(tmp13,"tmp13");
												HX_STACK_LINE(4985)
												if ((tmp13)){
													HX_STACK_LINE(4985)
													_this->maxx = x->maxx;
												}
												HX_STACK_LINE(4985)
												bool tmp14 = (x->miny < _this->miny);		HX_STACK_VAR(tmp14,"tmp14");
												HX_STACK_LINE(4985)
												if ((tmp14)){
													HX_STACK_LINE(4985)
													_this->miny = x->miny;
												}
												HX_STACK_LINE(4985)
												bool tmp15 = (x->maxy > _this->maxy);		HX_STACK_VAR(tmp15,"tmp15");
												HX_STACK_LINE(4985)
												if ((tmp15)){
													HX_STACK_LINE(4985)
													_this->maxy = x->maxy;
												}
											}
										}
										HX_STACK_LINE(4985)
										cx_ite1 = cx_ite1->next;
									}
								}
							}
						}
						HX_STACK_LINE(4986)
						cur->validate_worldCOM();
					}
					HX_STACK_LINE(4988)
					cur->validate_gravMass();
					HX_STACK_LINE(4989)
					{
						HX_STACK_LINE(4989)
						bool tmp6 = cur->zip_axis;		HX_STACK_VAR(tmp6,"tmp6");
						HX_STACK_LINE(4989)
						if ((tmp6)){
							HX_STACK_LINE(4989)
							cur->zip_axis = false;
							HX_STACK_LINE(4989)
							{
								HX_STACK_LINE(4989)
								Float tmp7 = cur->rot;		HX_STACK_VAR(tmp7,"tmp7");
								HX_STACK_LINE(4989)
								Float tmp8 = ::Math_obj::sin(tmp7);		HX_STACK_VAR(tmp8,"tmp8");
								HX_STACK_LINE(4989)
								cur->axisx = tmp8;
								HX_STACK_LINE(4989)
								Float tmp9 = cur->rot;		HX_STACK_VAR(tmp9,"tmp9");
								HX_STACK_LINE(4989)
								Float tmp10 = ::Math_obj::cos(tmp9);		HX_STACK_VAR(tmp10,"tmp10");
								HX_STACK_LINE(4989)
								cur->axisy = tmp10;
								HX_STACK_LINE(4989)
								Dynamic();
							}
						}
					}
					HX_STACK_LINE(4991)
					bool tmp6 = cur->nomove;		HX_STACK_VAR(tmp6,"tmp6");
					HX_STACK_LINE(4991)
					bool tmp7 = tmp6;		HX_STACK_VAR(tmp7,"tmp7");
					HX_STACK_LINE(4991)
					bool tmp8 = !(tmp7);		HX_STACK_VAR(tmp8,"tmp8");
					HX_STACK_LINE(4991)
					bool tmp9 = tmp8;		HX_STACK_VAR(tmp9,"tmp9");
					HX_STACK_LINE(4991)
					bool tmp10;		HX_STACK_VAR(tmp10,"tmp10");
					HX_STACK_LINE(4991)
					if ((tmp9)){
						HX_STACK_LINE(4991)
						int tmp11 = cur->type;		HX_STACK_VAR(tmp11,"tmp11");
						HX_STACK_LINE(4991)
						int tmp12 = ::zpp_nape::util::ZPP_Flags_obj::id_BodyType_DYNAMIC;		HX_STACK_VAR(tmp12,"tmp12");
						HX_STACK_LINE(4991)
						int tmp13 = tmp12;		HX_STACK_VAR(tmp13,"tmp13");
						HX_STACK_LINE(4991)
						int tmp14 = tmp13;		HX_STACK_VAR(tmp14,"tmp14");
						HX_STACK_LINE(4991)
						tmp10 = (tmp11 == tmp14);
					}
					else{
						HX_STACK_LINE(4991)
						tmp10 = false;
					}
					HX_STACK_LINE(4991)
					bool tmp11;		HX_STACK_VAR(tmp11,"tmp11");
					HX_STACK_LINE(4991)
					if ((tmp10)){
						HX_STACK_LINE(4991)
						tmp11 = (cur->mass == (int)0);
					}
					else{
						HX_STACK_LINE(4991)
						tmp11 = false;
					}
					HX_STACK_LINE(4991)
					if ((tmp11)){
						HX_STACK_LINE(4992)
						HX_STACK_DO_THROW(HX_HCSTRING("Error: Dynamic Body cannot be simulated with 0 mass unless allowMovement is false","\x52","\xb2","\x78","\x1f"));
					}
					HX_STACK_LINE(4994)
					bool tmp12 = cur->norotate;		HX_STACK_VAR(tmp12,"tmp12");
					HX_STACK_LINE(4994)
					bool tmp13 = tmp12;		HX_STACK_VAR(tmp13,"tmp13");
					HX_STACK_LINE(4994)
					bool tmp14 = !(tmp13);		HX_STACK_VAR(tmp14,"tmp14");
					HX_STACK_LINE(4994)
					bool tmp15 = tmp14;		HX_STACK_VAR(tmp15,"tmp15");
					HX_STACK_LINE(4994)
					bool tmp16;		HX_STACK_VAR(tmp16,"tmp16");
					HX_STACK_LINE(4994)
					if ((tmp15)){
						HX_STACK_LINE(4994)
						int tmp17 = cur->type;		HX_STACK_VAR(tmp17,"tmp17");
						HX_STACK_LINE(4994)
						int tmp18 = ::zpp_nape::util::ZPP_Flags_obj::id_BodyType_DYNAMIC;		HX_STACK_VAR(tmp18,"tmp18");
						HX_STACK_LINE(4994)
						int tmp19 = tmp18;		HX_STACK_VAR(tmp19,"tmp19");
						HX_STACK_LINE(4994)
						int tmp20 = tmp19;		HX_STACK_VAR(tmp20,"tmp20");
						HX_STACK_LINE(4994)
						tmp16 = (tmp17 == tmp20);
					}
					else{
						HX_STACK_LINE(4994)
						tmp16 = false;
					}
					HX_STACK_LINE(4994)
					bool tmp17;		HX_STACK_VAR(tmp17,"tmp17");
					HX_STACK_LINE(4994)
					if ((tmp16)){
						HX_STACK_LINE(4994)
						tmp17 = (cur->inertia == (int)0);
					}
					else{
						HX_STACK_LINE(4994)
						tmp17 = false;
					}
					HX_STACK_LINE(4994)
					if ((tmp17)){
						HX_STACK_LINE(4995)
						HX_STACK_DO_THROW(HX_HCSTRING("Error: Dynamic Body cannot be simulated with 0 inertia unless allowRotation is false","\x93","\x3f","\x65","\x99"));
					}
					HX_STACK_LINE(4998)
					bool tmp18 = true;		HX_STACK_VAR(tmp18,"tmp18");
					HX_STACK_LINE(4998)
					if ((tmp18)){
						HX_STACK_LINE(4999)
						bool tmp19 = cur->component->woken;		HX_STACK_VAR(tmp19,"tmp19");
						HX_STACK_LINE(4999)
						bool tmp20;		HX_STACK_VAR(tmp20,"tmp20");
						HX_STACK_LINE(4999)
						if ((tmp19)){
							HX_STACK_LINE(4999)
							tmp20 = (cur->cbSet != null());
						}
						else{
							HX_STACK_LINE(4999)
							tmp20 = false;
						}
						HX_STACK_LINE(4999)
						if ((tmp20)){
							HX_STACK_LINE(5001)
							::zpp_nape::util::ZNPList_ZPP_BodyListener tmp21 = cur->cbSet->bodylisteners;		HX_STACK_VAR(tmp21,"tmp21");
							HX_STACK_LINE(5001)
							::zpp_nape::util::ZNPNode_ZPP_BodyListener cx_ite1 = tmp21->head;		HX_STACK_VAR(cx_ite1,"cx_ite1");
							HX_STACK_LINE(5002)
							while((true)){
								HX_STACK_LINE(5002)
								bool tmp22 = (cx_ite1 != null());		HX_STACK_VAR(tmp22,"tmp22");
								HX_STACK_LINE(5002)
								bool tmp23 = !(tmp22);		HX_STACK_VAR(tmp23,"tmp23");
								HX_STACK_LINE(5002)
								if ((tmp23)){
									HX_STACK_LINE(5002)
									break;
								}
								HX_STACK_LINE(5003)
								::zpp_nape::callbacks::ZPP_BodyListener i = cx_ite1->elt;		HX_STACK_VAR(i,"i");
								HX_STACK_LINE(5004)
								{
									HX_STACK_LINE(5005)
									int tmp24 = i->event;		HX_STACK_VAR(tmp24,"tmp24");
									HX_STACK_LINE(5005)
									int tmp25 = ::zpp_nape::util::ZPP_Flags_obj::id_CbEvent_WAKE;		HX_STACK_VAR(tmp25,"tmp25");
									HX_STACK_LINE(5005)
									bool tmp26 = (tmp24 != tmp25);		HX_STACK_VAR(tmp26,"tmp26");
									HX_STACK_LINE(5005)
									if ((tmp26)){
										HX_STACK_LINE(5006)
										cx_ite1 = cx_ite1->next;
										HX_STACK_LINE(5007)
										continue;
									}
									HX_STACK_LINE(5009)
									::zpp_nape::callbacks::ZPP_BodyListener tmp27 = i;		HX_STACK_VAR(tmp27,"tmp27");
									HX_STACK_LINE(5009)
									::zpp_nape::callbacks::ZPP_Callback tmp28 = this->push_callback(tmp27);		HX_STACK_VAR(tmp28,"tmp28");
									HX_STACK_LINE(5009)
									::zpp_nape::callbacks::ZPP_Callback cb = tmp28;		HX_STACK_VAR(cb,"cb");
									HX_STACK_LINE(5010)
									int tmp29 = ::zpp_nape::util::ZPP_Flags_obj::id_CbEvent_WAKE;		HX_STACK_VAR(tmp29,"tmp29");
									HX_STACK_LINE(5010)
									cb->event = tmp29;
									HX_STACK_LINE(5011)
									cb->body = cur;
								}
								HX_STACK_LINE(5013)
								cx_ite1 = cx_ite1->next;
							}
						}
						HX_STACK_LINE(5017)
						cur->component->woken = false;
					}
					HX_STACK_LINE(5019)
					{
						HX_STACK_LINE(5020)
						::zpp_nape::util::ZNPNode_ZPP_Shape tmp19 = cur->shapes->head;		HX_STACK_VAR(tmp19,"tmp19");
						HX_STACK_LINE(5020)
						::zpp_nape::util::ZNPNode_ZPP_Shape cx_ite1 = tmp19;		HX_STACK_VAR(cx_ite1,"cx_ite1");
						HX_STACK_LINE(5021)
						while((true)){
							HX_STACK_LINE(5021)
							bool tmp20 = (cx_ite1 != null());		HX_STACK_VAR(tmp20,"tmp20");
							HX_STACK_LINE(5021)
							bool tmp21 = !(tmp20);		HX_STACK_VAR(tmp21,"tmp21");
							HX_STACK_LINE(5021)
							if ((tmp21)){
								HX_STACK_LINE(5021)
								break;
							}
							HX_STACK_LINE(5022)
							::zpp_nape::shape::ZPP_Shape shape = cx_ite1->elt;		HX_STACK_VAR(shape,"shape");
							HX_STACK_LINE(5023)
							::zpp_nape::space::ZPP_Broadphase tmp22 = this->bphase;		HX_STACK_VAR(tmp22,"tmp22");
							HX_STACK_LINE(5023)
							::zpp_nape::shape::ZPP_Shape tmp23 = shape;		HX_STACK_VAR(tmp23,"tmp23");
							HX_STACK_LINE(5023)
							tmp22->sync(tmp23);
							HX_STACK_LINE(5024)
							cx_ite1 = cx_ite1->next;
						}
					}
				}
				HX_STACK_LINE(5028)
				cx_ite = cx_ite->next;
			}
		}
		HX_STACK_LINE(5033)
		{
			HX_STACK_LINE(5034)
			::zpp_nape::util::ZNPList_ZPP_Body tmp = this->kinematics;		HX_STACK_VAR(tmp,"tmp");
			HX_STACK_LINE(5034)
			::zpp_nape::util::ZNPNode_ZPP_Body cx_ite = tmp->head;		HX_STACK_VAR(cx_ite,"cx_ite");
			HX_STACK_LINE(5035)
			while((true)){
				HX_STACK_LINE(5035)
				bool tmp1 = (cx_ite != null());		HX_STACK_VAR(tmp1,"tmp1");
				HX_STACK_LINE(5035)
				bool tmp2 = !(tmp1);		HX_STACK_VAR(tmp2,"tmp2");
				HX_STACK_LINE(5035)
				if ((tmp2)){
					HX_STACK_LINE(5035)
					break;
				}
				HX_STACK_LINE(5036)
				::zpp_nape::phys::ZPP_Body cur = cx_ite->elt;		HX_STACK_VAR(cur,"cur");
				HX_STACK_LINE(5037)
				{
					HX_STACK_LINE(5038)
					cur->sweepRadius = (int)0;
					HX_STACK_LINE(5039)
					{
						HX_STACK_LINE(5040)
						::zpp_nape::util::ZNPNode_ZPP_Shape tmp3 = cur->shapes->head;		HX_STACK_VAR(tmp3,"tmp3");
						HX_STACK_LINE(5040)
						::zpp_nape::util::ZNPNode_ZPP_Shape cx_ite1 = tmp3;		HX_STACK_VAR(cx_ite1,"cx_ite1");
						HX_STACK_LINE(5041)
						while((true)){
							HX_STACK_LINE(5041)
							bool tmp4 = (cx_ite1 != null());		HX_STACK_VAR(tmp4,"tmp4");
							HX_STACK_LINE(5041)
							bool tmp5 = !(tmp4);		HX_STACK_VAR(tmp5,"tmp5");
							HX_STACK_LINE(5041)
							if ((tmp5)){
								HX_STACK_LINE(5041)
								break;
							}
							HX_STACK_LINE(5042)
							::zpp_nape::shape::ZPP_Shape s = cx_ite1->elt;		HX_STACK_VAR(s,"s");
							HX_STACK_LINE(5043)
							{
								HX_STACK_LINE(5044)
								int tmp6 = s->type;		HX_STACK_VAR(tmp6,"tmp6");
								HX_STACK_LINE(5044)
								int tmp7 = ::zpp_nape::util::ZPP_Flags_obj::id_ShapeType_POLYGON;		HX_STACK_VAR(tmp7,"tmp7");
								HX_STACK_LINE(5044)
								bool tmp8 = (tmp6 == tmp7);		HX_STACK_VAR(tmp8,"tmp8");
								HX_STACK_LINE(5044)
								if ((tmp8)){
									HX_STACK_LINE(5045)
									{
										HX_STACK_LINE(5045)
										::zpp_nape::shape::ZPP_Polygon _this = s->polygon;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(5045)
										bool tmp9 = _this->zip_sanitation;		HX_STACK_VAR(tmp9,"tmp9");
										HX_STACK_LINE(5045)
										if ((tmp9)){
											HX_STACK_LINE(5045)
											_this->zip_sanitation = false;
											HX_STACK_LINE(5045)
											_this->splice_collinear_real();
										}
									}
									HX_STACK_LINE(5047)
									::nape::shape::ValidationResult tmp9 = s->polygon->valid();		HX_STACK_VAR(tmp9,"tmp9");
									HX_STACK_LINE(5047)
									::nape::shape::ValidationResult res = tmp9;		HX_STACK_VAR(res,"res");
									HX_STACK_LINE(5048)
									::nape::shape::ValidationResult tmp10 = res;		HX_STACK_VAR(tmp10,"tmp10");
									HX_STACK_LINE(5048)
									::nape::shape::ValidationResult tmp11;		HX_STACK_VAR(tmp11,"tmp11");
									HX_STACK_LINE(5048)
									{
										HX_STACK_LINE(5048)
										::nape::shape::ValidationResult tmp12 = ::zpp_nape::util::ZPP_Flags_obj::ValidationResult_VALID;		HX_STACK_VAR(tmp12,"tmp12");
										HX_STACK_LINE(5048)
										bool tmp13 = (tmp12 == null());		HX_STACK_VAR(tmp13,"tmp13");
										HX_STACK_LINE(5048)
										if ((tmp13)){
											HX_STACK_LINE(5048)
											::zpp_nape::util::ZPP_Flags_obj::internal = true;
											HX_STACK_LINE(5048)
											::nape::shape::ValidationResult tmp14 = ::nape::shape::ValidationResult_obj::__new();		HX_STACK_VAR(tmp14,"tmp14");
											HX_STACK_LINE(5048)
											::zpp_nape::util::ZPP_Flags_obj::ValidationResult_VALID = tmp14;
											HX_STACK_LINE(5048)
											::zpp_nape::util::ZPP_Flags_obj::internal = false;
										}
										HX_STACK_LINE(5048)
										tmp11 = ::zpp_nape::util::ZPP_Flags_obj::ValidationResult_VALID;
									}
									HX_STACK_LINE(5048)
									bool tmp12 = (tmp10 != tmp11);		HX_STACK_VAR(tmp12,"tmp12");
									HX_STACK_LINE(5048)
									if ((tmp12)){
										HX_STACK_LINE(5049)
										::nape::shape::Shape tmp13 = s->polygon->outer;		HX_STACK_VAR(tmp13,"tmp13");
										HX_STACK_LINE(5049)
										::String tmp14 = tmp13->toString();		HX_STACK_VAR(tmp14,"tmp14");
										HX_STACK_LINE(5049)
										::String tmp15 = (HX_HCSTRING("Error: Cannot simulate with an invalid Polygon : ","\x3b","\x8a","\x46","\x28") + tmp14);		HX_STACK_VAR(tmp15,"tmp15");
										HX_STACK_LINE(5049)
										::String tmp16 = (tmp15 + HX_HCSTRING(" is invalid : ","\x85","\x20","\x62","\x1d"));		HX_STACK_VAR(tmp16,"tmp16");
										HX_STACK_LINE(5049)
										::String tmp17 = res->toString();		HX_STACK_VAR(tmp17,"tmp17");
										HX_STACK_LINE(5049)
										::String tmp18 = (tmp16 + tmp17);		HX_STACK_VAR(tmp18,"tmp18");
										HX_STACK_LINE(5049)
										HX_STACK_DO_THROW(tmp18);
									}
									HX_STACK_LINE(5052)
									{
										HX_STACK_LINE(5052)
										::zpp_nape::shape::ZPP_Polygon _this = s->polygon;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(5052)
										bool tmp13 = _this->zip_gaxi;		HX_STACK_VAR(tmp13,"tmp13");
										HX_STACK_LINE(5052)
										if ((tmp13)){
											HX_STACK_LINE(5052)
											bool tmp14 = (_this->body != null());		HX_STACK_VAR(tmp14,"tmp14");
											HX_STACK_LINE(5052)
											if ((tmp14)){
												HX_STACK_LINE(5052)
												_this->zip_gaxi = false;
												HX_STACK_LINE(5052)
												_this->validate_laxi();
												HX_STACK_LINE(5052)
												{
													HX_STACK_LINE(5052)
													::zpp_nape::phys::ZPP_Body _this1 = _this->body;		HX_STACK_VAR(_this1,"_this1");
													HX_STACK_LINE(5052)
													bool tmp15 = _this1->zip_axis;		HX_STACK_VAR(tmp15,"tmp15");
													HX_STACK_LINE(5052)
													if ((tmp15)){
														HX_STACK_LINE(5052)
														_this1->zip_axis = false;
														HX_STACK_LINE(5052)
														{
															HX_STACK_LINE(5052)
															Float tmp16 = _this1->rot;		HX_STACK_VAR(tmp16,"tmp16");
															HX_STACK_LINE(5052)
															Float tmp17 = ::Math_obj::sin(tmp16);		HX_STACK_VAR(tmp17,"tmp17");
															HX_STACK_LINE(5052)
															_this1->axisx = tmp17;
															HX_STACK_LINE(5052)
															Float tmp18 = _this1->rot;		HX_STACK_VAR(tmp18,"tmp18");
															HX_STACK_LINE(5052)
															Float tmp19 = ::Math_obj::cos(tmp18);		HX_STACK_VAR(tmp19,"tmp19");
															HX_STACK_LINE(5052)
															_this1->axisy = tmp19;
															HX_STACK_LINE(5052)
															Dynamic();
														}
													}
												}
												HX_STACK_LINE(5052)
												{
													HX_STACK_LINE(5052)
													bool tmp15 = _this->zip_gverts;		HX_STACK_VAR(tmp15,"tmp15");
													HX_STACK_LINE(5052)
													if ((tmp15)){
														HX_STACK_LINE(5052)
														bool tmp16 = (_this->body != null());		HX_STACK_VAR(tmp16,"tmp16");
														HX_STACK_LINE(5052)
														if ((tmp16)){
															HX_STACK_LINE(5052)
															_this->zip_gverts = false;
															HX_STACK_LINE(5052)
															_this->validate_lverts();
															HX_STACK_LINE(5052)
															{
																HX_STACK_LINE(5052)
																::zpp_nape::phys::ZPP_Body _this1 = _this->body;		HX_STACK_VAR(_this1,"_this1");
																HX_STACK_LINE(5052)
																bool tmp17 = _this1->zip_axis;		HX_STACK_VAR(tmp17,"tmp17");
																HX_STACK_LINE(5052)
																if ((tmp17)){
																	HX_STACK_LINE(5052)
																	_this1->zip_axis = false;
																	HX_STACK_LINE(5052)
																	{
																		HX_STACK_LINE(5052)
																		Float tmp18 = _this1->rot;		HX_STACK_VAR(tmp18,"tmp18");
																		HX_STACK_LINE(5052)
																		Float tmp19 = ::Math_obj::sin(tmp18);		HX_STACK_VAR(tmp19,"tmp19");
																		HX_STACK_LINE(5052)
																		_this1->axisx = tmp19;
																		HX_STACK_LINE(5052)
																		Float tmp20 = _this1->rot;		HX_STACK_VAR(tmp20,"tmp20");
																		HX_STACK_LINE(5052)
																		Float tmp21 = ::Math_obj::cos(tmp20);		HX_STACK_VAR(tmp21,"tmp21");
																		HX_STACK_LINE(5052)
																		_this1->axisy = tmp21;
																		HX_STACK_LINE(5052)
																		Dynamic();
																	}
																}
															}
															HX_STACK_LINE(5052)
															::zpp_nape::geom::ZPP_Vec2 tmp17 = _this->lverts->next;		HX_STACK_VAR(tmp17,"tmp17");
															HX_STACK_LINE(5052)
															::zpp_nape::geom::ZPP_Vec2 li = tmp17;		HX_STACK_VAR(li,"li");
															HX_STACK_LINE(5052)
															{
																HX_STACK_LINE(5052)
																::zpp_nape::geom::ZPP_Vec2 tmp18 = _this->gverts->next;		HX_STACK_VAR(tmp18,"tmp18");
																HX_STACK_LINE(5052)
																::zpp_nape::geom::ZPP_Vec2 cx_ite2 = tmp18;		HX_STACK_VAR(cx_ite2,"cx_ite2");
																HX_STACK_LINE(5052)
																while((true)){
																	HX_STACK_LINE(5052)
																	bool tmp19 = (cx_ite2 != null());		HX_STACK_VAR(tmp19,"tmp19");
																	HX_STACK_LINE(5052)
																	bool tmp20 = !(tmp19);		HX_STACK_VAR(tmp20,"tmp20");
																	HX_STACK_LINE(5052)
																	if ((tmp20)){
																		HX_STACK_LINE(5052)
																		break;
																	}
																	HX_STACK_LINE(5052)
																	::zpp_nape::geom::ZPP_Vec2 g = cx_ite2;		HX_STACK_VAR(g,"g");
																	HX_STACK_LINE(5052)
																	{
																		HX_STACK_LINE(5052)
																		::zpp_nape::geom::ZPP_Vec2 l = li;		HX_STACK_VAR(l,"l");
																		HX_STACK_LINE(5052)
																		li = li->next;
																		HX_STACK_LINE(5052)
																		{
																			HX_STACK_LINE(5052)
																			Float tmp21 = _this->body->posx;		HX_STACK_VAR(tmp21,"tmp21");
																			HX_STACK_LINE(5052)
																			Float tmp22 = _this->body->axisy;		HX_STACK_VAR(tmp22,"tmp22");
																			HX_STACK_LINE(5052)
																			Float tmp23 = l->x;		HX_STACK_VAR(tmp23,"tmp23");
																			HX_STACK_LINE(5052)
																			Float tmp24 = (tmp22 * tmp23);		HX_STACK_VAR(tmp24,"tmp24");
																			HX_STACK_LINE(5052)
																			Float tmp25 = _this->body->axisx;		HX_STACK_VAR(tmp25,"tmp25");
																			HX_STACK_LINE(5052)
																			Float tmp26 = l->y;		HX_STACK_VAR(tmp26,"tmp26");
																			HX_STACK_LINE(5052)
																			Float tmp27 = (tmp25 * tmp26);		HX_STACK_VAR(tmp27,"tmp27");
																			HX_STACK_LINE(5052)
																			Float tmp28 = (tmp24 - tmp27);		HX_STACK_VAR(tmp28,"tmp28");
																			HX_STACK_LINE(5052)
																			Float tmp29 = (tmp21 + tmp28);		HX_STACK_VAR(tmp29,"tmp29");
																			HX_STACK_LINE(5052)
																			g->x = tmp29;
																			HX_STACK_LINE(5052)
																			Float tmp30 = _this->body->posy;		HX_STACK_VAR(tmp30,"tmp30");
																			HX_STACK_LINE(5052)
																			Float tmp31 = l->x;		HX_STACK_VAR(tmp31,"tmp31");
																			HX_STACK_LINE(5052)
																			Float tmp32 = _this->body->axisx;		HX_STACK_VAR(tmp32,"tmp32");
																			HX_STACK_LINE(5052)
																			Float tmp33 = (tmp31 * tmp32);		HX_STACK_VAR(tmp33,"tmp33");
																			HX_STACK_LINE(5052)
																			Float tmp34 = l->y;		HX_STACK_VAR(tmp34,"tmp34");
																			HX_STACK_LINE(5052)
																			Float tmp35 = _this->body->axisy;		HX_STACK_VAR(tmp35,"tmp35");
																			HX_STACK_LINE(5052)
																			Float tmp36 = (tmp34 * tmp35);		HX_STACK_VAR(tmp36,"tmp36");
																			HX_STACK_LINE(5052)
																			Float tmp37 = (tmp33 + tmp36);		HX_STACK_VAR(tmp37,"tmp37");
																			HX_STACK_LINE(5052)
																			Float tmp38 = (tmp30 + tmp37);		HX_STACK_VAR(tmp38,"tmp38");
																			HX_STACK_LINE(5052)
																			g->y = tmp38;
																		}
																	}
																	HX_STACK_LINE(5052)
																	cx_ite2 = cx_ite2->next;
																}
															}
														}
													}
												}
												HX_STACK_LINE(5052)
												::zpp_nape::util::ZNPNode_ZPP_Edge tmp15 = _this->edges->head;		HX_STACK_VAR(tmp15,"tmp15");
												HX_STACK_LINE(5052)
												::zpp_nape::util::ZNPNode_ZPP_Edge ite = tmp15;		HX_STACK_VAR(ite,"ite");
												HX_STACK_LINE(5052)
												{
													HX_STACK_LINE(5052)
													::zpp_nape::geom::ZPP_Vec2 tmp16 = _this->gverts->next;		HX_STACK_VAR(tmp16,"tmp16");
													HX_STACK_LINE(5052)
													::zpp_nape::geom::ZPP_Vec2 cx_ite2 = tmp16;		HX_STACK_VAR(cx_ite2,"cx_ite2");
													HX_STACK_LINE(5052)
													::zpp_nape::geom::ZPP_Vec2 u = cx_ite2;		HX_STACK_VAR(u,"u");
													HX_STACK_LINE(5052)
													cx_ite2 = cx_ite2->next;
													HX_STACK_LINE(5052)
													while((true)){
														HX_STACK_LINE(5052)
														bool tmp17 = (cx_ite2 != null());		HX_STACK_VAR(tmp17,"tmp17");
														HX_STACK_LINE(5052)
														bool tmp18 = !(tmp17);		HX_STACK_VAR(tmp18,"tmp18");
														HX_STACK_LINE(5052)
														if ((tmp18)){
															HX_STACK_LINE(5052)
															break;
														}
														HX_STACK_LINE(5052)
														::zpp_nape::geom::ZPP_Vec2 v = cx_ite2;		HX_STACK_VAR(v,"v");
														HX_STACK_LINE(5052)
														{
															HX_STACK_LINE(5052)
															::zpp_nape::shape::ZPP_Edge e = ite->elt;		HX_STACK_VAR(e,"e");
															HX_STACK_LINE(5052)
															ite = ite->next;
															HX_STACK_LINE(5052)
															e->gp0 = u;
															HX_STACK_LINE(5052)
															e->gp1 = v;
															HX_STACK_LINE(5052)
															{
																HX_STACK_LINE(5052)
																Float tmp19 = _this->body->axisy;		HX_STACK_VAR(tmp19,"tmp19");
																HX_STACK_LINE(5052)
																Float tmp20 = e->lnormx;		HX_STACK_VAR(tmp20,"tmp20");
																HX_STACK_LINE(5052)
																Float tmp21 = (tmp19 * tmp20);		HX_STACK_VAR(tmp21,"tmp21");
																HX_STACK_LINE(5052)
																Float tmp22 = _this->body->axisx;		HX_STACK_VAR(tmp22,"tmp22");
																HX_STACK_LINE(5052)
																Float tmp23 = e->lnormy;		HX_STACK_VAR(tmp23,"tmp23");
																HX_STACK_LINE(5052)
																Float tmp24 = (tmp22 * tmp23);		HX_STACK_VAR(tmp24,"tmp24");
																HX_STACK_LINE(5052)
																Float tmp25 = (tmp21 - tmp24);		HX_STACK_VAR(tmp25,"tmp25");
																HX_STACK_LINE(5052)
																e->gnormx = tmp25;
																HX_STACK_LINE(5052)
																Float tmp26 = e->lnormx;		HX_STACK_VAR(tmp26,"tmp26");
																HX_STACK_LINE(5052)
																Float tmp27 = _this->body->axisx;		HX_STACK_VAR(tmp27,"tmp27");
																HX_STACK_LINE(5052)
																Float tmp28 = (tmp26 * tmp27);		HX_STACK_VAR(tmp28,"tmp28");
																HX_STACK_LINE(5052)
																Float tmp29 = e->lnormy;		HX_STACK_VAR(tmp29,"tmp29");
																HX_STACK_LINE(5052)
																Float tmp30 = _this->body->axisy;		HX_STACK_VAR(tmp30,"tmp30");
																HX_STACK_LINE(5052)
																Float tmp31 = (tmp29 * tmp30);		HX_STACK_VAR(tmp31,"tmp31");
																HX_STACK_LINE(5052)
																Float tmp32 = (tmp28 + tmp31);		HX_STACK_VAR(tmp32,"tmp32");
																HX_STACK_LINE(5052)
																e->gnormy = tmp32;
															}
															HX_STACK_LINE(5052)
															Float tmp19 = _this->body->posx;		HX_STACK_VAR(tmp19,"tmp19");
															HX_STACK_LINE(5052)
															Float tmp20 = e->gnormx;		HX_STACK_VAR(tmp20,"tmp20");
															HX_STACK_LINE(5052)
															Float tmp21 = (tmp19 * tmp20);		HX_STACK_VAR(tmp21,"tmp21");
															HX_STACK_LINE(5052)
															Float tmp22 = _this->body->posy;		HX_STACK_VAR(tmp22,"tmp22");
															HX_STACK_LINE(5052)
															Float tmp23 = e->gnormy;		HX_STACK_VAR(tmp23,"tmp23");
															HX_STACK_LINE(5052)
															Float tmp24 = (tmp22 * tmp23);		HX_STACK_VAR(tmp24,"tmp24");
															HX_STACK_LINE(5052)
															Float tmp25 = (tmp21 + tmp24);		HX_STACK_VAR(tmp25,"tmp25");
															HX_STACK_LINE(5052)
															Float tmp26 = e->lprojection;		HX_STACK_VAR(tmp26,"tmp26");
															HX_STACK_LINE(5052)
															Float tmp27 = (tmp25 + tmp26);		HX_STACK_VAR(tmp27,"tmp27");
															HX_STACK_LINE(5052)
															e->gprojection = tmp27;
															HX_STACK_LINE(5052)
															bool tmp28 = (e->wrap_gnorm != null());		HX_STACK_VAR(tmp28,"tmp28");
															HX_STACK_LINE(5052)
															if ((tmp28)){
																HX_STACK_LINE(5052)
																::zpp_nape::geom::ZPP_Vec2 tmp29 = e->wrap_gnorm->zpp_inner;		HX_STACK_VAR(tmp29,"tmp29");
																HX_STACK_LINE(5052)
																tmp29->x = e->gnormx;
																HX_STACK_LINE(5052)
																::zpp_nape::geom::ZPP_Vec2 tmp30 = e->wrap_gnorm->zpp_inner;		HX_STACK_VAR(tmp30,"tmp30");
																HX_STACK_LINE(5052)
																tmp30->y = e->gnormy;
																HX_STACK_LINE(5052)
																{
																}
															}
															HX_STACK_LINE(5052)
															Float tmp29 = e->gp0->y;		HX_STACK_VAR(tmp29,"tmp29");
															HX_STACK_LINE(5052)
															Float tmp30 = e->gnormx;		HX_STACK_VAR(tmp30,"tmp30");
															HX_STACK_LINE(5052)
															Float tmp31 = (tmp29 * tmp30);		HX_STACK_VAR(tmp31,"tmp31");
															HX_STACK_LINE(5052)
															Float tmp32 = e->gp0->x;		HX_STACK_VAR(tmp32,"tmp32");
															HX_STACK_LINE(5052)
															Float tmp33 = e->gnormy;		HX_STACK_VAR(tmp33,"tmp33");
															HX_STACK_LINE(5052)
															Float tmp34 = (tmp32 * tmp33);		HX_STACK_VAR(tmp34,"tmp34");
															HX_STACK_LINE(5052)
															Float tmp35 = (tmp31 - tmp34);		HX_STACK_VAR(tmp35,"tmp35");
															HX_STACK_LINE(5052)
															e->tp0 = tmp35;
															HX_STACK_LINE(5052)
															Float tmp36 = e->gp1->y;		HX_STACK_VAR(tmp36,"tmp36");
															HX_STACK_LINE(5052)
															Float tmp37 = e->gnormx;		HX_STACK_VAR(tmp37,"tmp37");
															HX_STACK_LINE(5052)
															Float tmp38 = (tmp36 * tmp37);		HX_STACK_VAR(tmp38,"tmp38");
															HX_STACK_LINE(5052)
															Float tmp39 = e->gp1->x;		HX_STACK_VAR(tmp39,"tmp39");
															HX_STACK_LINE(5052)
															Float tmp40 = e->gnormy;		HX_STACK_VAR(tmp40,"tmp40");
															HX_STACK_LINE(5052)
															Float tmp41 = (tmp39 * tmp40);		HX_STACK_VAR(tmp41,"tmp41");
															HX_STACK_LINE(5052)
															Float tmp42 = (tmp38 - tmp41);		HX_STACK_VAR(tmp42,"tmp42");
															HX_STACK_LINE(5052)
															e->tp1 = tmp42;
														}
														HX_STACK_LINE(5052)
														u = v;
														HX_STACK_LINE(5052)
														cx_ite2 = cx_ite2->next;
													}
													HX_STACK_LINE(5052)
													::zpp_nape::geom::ZPP_Vec2 tmp17 = _this->gverts->next;		HX_STACK_VAR(tmp17,"tmp17");
													HX_STACK_LINE(5052)
													::zpp_nape::geom::ZPP_Vec2 v = tmp17;		HX_STACK_VAR(v,"v");
													HX_STACK_LINE(5052)
													{
														HX_STACK_LINE(5052)
														::zpp_nape::shape::ZPP_Edge e = ite->elt;		HX_STACK_VAR(e,"e");
														HX_STACK_LINE(5052)
														ite = ite->next;
														HX_STACK_LINE(5052)
														e->gp0 = u;
														HX_STACK_LINE(5052)
														e->gp1 = v;
														HX_STACK_LINE(5052)
														{
															HX_STACK_LINE(5052)
															Float tmp18 = _this->body->axisy;		HX_STACK_VAR(tmp18,"tmp18");
															HX_STACK_LINE(5052)
															Float tmp19 = e->lnormx;		HX_STACK_VAR(tmp19,"tmp19");
															HX_STACK_LINE(5052)
															Float tmp20 = (tmp18 * tmp19);		HX_STACK_VAR(tmp20,"tmp20");
															HX_STACK_LINE(5052)
															Float tmp21 = _this->body->axisx;		HX_STACK_VAR(tmp21,"tmp21");
															HX_STACK_LINE(5052)
															Float tmp22 = e->lnormy;		HX_STACK_VAR(tmp22,"tmp22");
															HX_STACK_LINE(5052)
															Float tmp23 = (tmp21 * tmp22);		HX_STACK_VAR(tmp23,"tmp23");
															HX_STACK_LINE(5052)
															Float tmp24 = (tmp20 - tmp23);		HX_STACK_VAR(tmp24,"tmp24");
															HX_STACK_LINE(5052)
															e->gnormx = tmp24;
															HX_STACK_LINE(5052)
															Float tmp25 = e->lnormx;		HX_STACK_VAR(tmp25,"tmp25");
															HX_STACK_LINE(5052)
															Float tmp26 = _this->body->axisx;		HX_STACK_VAR(tmp26,"tmp26");
															HX_STACK_LINE(5052)
															Float tmp27 = (tmp25 * tmp26);		HX_STACK_VAR(tmp27,"tmp27");
															HX_STACK_LINE(5052)
															Float tmp28 = e->lnormy;		HX_STACK_VAR(tmp28,"tmp28");
															HX_STACK_LINE(5052)
															Float tmp29 = _this->body->axisy;		HX_STACK_VAR(tmp29,"tmp29");
															HX_STACK_LINE(5052)
															Float tmp30 = (tmp28 * tmp29);		HX_STACK_VAR(tmp30,"tmp30");
															HX_STACK_LINE(5052)
															Float tmp31 = (tmp27 + tmp30);		HX_STACK_VAR(tmp31,"tmp31");
															HX_STACK_LINE(5052)
															e->gnormy = tmp31;
														}
														HX_STACK_LINE(5052)
														Float tmp18 = _this->body->posx;		HX_STACK_VAR(tmp18,"tmp18");
														HX_STACK_LINE(5052)
														Float tmp19 = e->gnormx;		HX_STACK_VAR(tmp19,"tmp19");
														HX_STACK_LINE(5052)
														Float tmp20 = (tmp18 * tmp19);		HX_STACK_VAR(tmp20,"tmp20");
														HX_STACK_LINE(5052)
														Float tmp21 = _this->body->posy;		HX_STACK_VAR(tmp21,"tmp21");
														HX_STACK_LINE(5052)
														Float tmp22 = e->gnormy;		HX_STACK_VAR(tmp22,"tmp22");
														HX_STACK_LINE(5052)
														Float tmp23 = (tmp21 * tmp22);		HX_STACK_VAR(tmp23,"tmp23");
														HX_STACK_LINE(5052)
														Float tmp24 = (tmp20 + tmp23);		HX_STACK_VAR(tmp24,"tmp24");
														HX_STACK_LINE(5052)
														Float tmp25 = e->lprojection;		HX_STACK_VAR(tmp25,"tmp25");
														HX_STACK_LINE(5052)
														Float tmp26 = (tmp24 + tmp25);		HX_STACK_VAR(tmp26,"tmp26");
														HX_STACK_LINE(5052)
														e->gprojection = tmp26;
														HX_STACK_LINE(5052)
														bool tmp27 = (e->wrap_gnorm != null());		HX_STACK_VAR(tmp27,"tmp27");
														HX_STACK_LINE(5052)
														if ((tmp27)){
															HX_STACK_LINE(5052)
															::zpp_nape::geom::ZPP_Vec2 tmp28 = e->wrap_gnorm->zpp_inner;		HX_STACK_VAR(tmp28,"tmp28");
															HX_STACK_LINE(5052)
															tmp28->x = e->gnormx;
															HX_STACK_LINE(5052)
															::zpp_nape::geom::ZPP_Vec2 tmp29 = e->wrap_gnorm->zpp_inner;		HX_STACK_VAR(tmp29,"tmp29");
															HX_STACK_LINE(5052)
															tmp29->y = e->gnormy;
															HX_STACK_LINE(5052)
															{
															}
														}
														HX_STACK_LINE(5052)
														Float tmp28 = e->gp0->y;		HX_STACK_VAR(tmp28,"tmp28");
														HX_STACK_LINE(5052)
														Float tmp29 = e->gnormx;		HX_STACK_VAR(tmp29,"tmp29");
														HX_STACK_LINE(5052)
														Float tmp30 = (tmp28 * tmp29);		HX_STACK_VAR(tmp30,"tmp30");
														HX_STACK_LINE(5052)
														Float tmp31 = e->gp0->x;		HX_STACK_VAR(tmp31,"tmp31");
														HX_STACK_LINE(5052)
														Float tmp32 = e->gnormy;		HX_STACK_VAR(tmp32,"tmp32");
														HX_STACK_LINE(5052)
														Float tmp33 = (tmp31 * tmp32);		HX_STACK_VAR(tmp33,"tmp33");
														HX_STACK_LINE(5052)
														Float tmp34 = (tmp30 - tmp33);		HX_STACK_VAR(tmp34,"tmp34");
														HX_STACK_LINE(5052)
														e->tp0 = tmp34;
														HX_STACK_LINE(5052)
														Float tmp35 = e->gp1->y;		HX_STACK_VAR(tmp35,"tmp35");
														HX_STACK_LINE(5052)
														Float tmp36 = e->gnormx;		HX_STACK_VAR(tmp36,"tmp36");
														HX_STACK_LINE(5052)
														Float tmp37 = (tmp35 * tmp36);		HX_STACK_VAR(tmp37,"tmp37");
														HX_STACK_LINE(5052)
														Float tmp38 = e->gp1->x;		HX_STACK_VAR(tmp38,"tmp38");
														HX_STACK_LINE(5052)
														Float tmp39 = e->gnormy;		HX_STACK_VAR(tmp39,"tmp39");
														HX_STACK_LINE(5052)
														Float tmp40 = (tmp38 * tmp39);		HX_STACK_VAR(tmp40,"tmp40");
														HX_STACK_LINE(5052)
														Float tmp41 = (tmp37 - tmp40);		HX_STACK_VAR(tmp41,"tmp41");
														HX_STACK_LINE(5052)
														e->tp1 = tmp41;
													}
												}
											}
										}
									}
								}
								HX_STACK_LINE(5054)
								s->validate_sweepRadius();
								HX_STACK_LINE(5055)
								bool tmp9 = (s->sweepRadius > cur->sweepRadius);		HX_STACK_VAR(tmp9,"tmp9");
								HX_STACK_LINE(5055)
								if ((tmp9)){
									HX_STACK_LINE(5055)
									cur->sweepRadius = s->sweepRadius;
								}
							}
							HX_STACK_LINE(5057)
							cx_ite1 = cx_ite1->next;
						}
					}
					HX_STACK_LINE(5060)
					cur->validate_mass();
					HX_STACK_LINE(5061)
					cur->validate_inertia();
					HX_STACK_LINE(5062)
					::zpp_nape::util::ZNPNode_ZPP_Shape tmp3 = cur->shapes->head;		HX_STACK_VAR(tmp3,"tmp3");
					HX_STACK_LINE(5062)
					bool tmp4 = (tmp3 == null());		HX_STACK_VAR(tmp4,"tmp4");
					HX_STACK_LINE(5062)
					bool tmp5 = !(tmp4);		HX_STACK_VAR(tmp5,"tmp5");
					HX_STACK_LINE(5062)
					if ((tmp5)){
						HX_STACK_LINE(5063)
						{
							HX_STACK_LINE(5063)
							::zpp_nape::util::ZNPNode_ZPP_Shape tmp6 = cur->shapes->head;		HX_STACK_VAR(tmp6,"tmp6");
							HX_STACK_LINE(5063)
							bool tmp7 = (tmp6 == null());		HX_STACK_VAR(tmp7,"tmp7");
							HX_STACK_LINE(5063)
							if ((tmp7)){
								HX_STACK_LINE(5063)
								HX_STACK_DO_THROW(HX_HCSTRING("Error: Body bounds only makes sense if it contains shapes","\x7b","\xb0","\x85","\x6c"));
							}
							HX_STACK_LINE(5063)
							bool tmp8 = cur->zip_aabb;		HX_STACK_VAR(tmp8,"tmp8");
							HX_STACK_LINE(5063)
							if ((tmp8)){
								HX_STACK_LINE(5063)
								cur->zip_aabb = false;
								HX_STACK_LINE(5063)
								{
									HX_STACK_LINE(5063)
									Float tmp9 = ::Math_obj::POSITIVE_INFINITY;		HX_STACK_VAR(tmp9,"tmp9");
									HX_STACK_LINE(5063)
									cur->aabb->minx = tmp9;
									HX_STACK_LINE(5063)
									Float tmp10 = ::Math_obj::POSITIVE_INFINITY;		HX_STACK_VAR(tmp10,"tmp10");
									HX_STACK_LINE(5063)
									cur->aabb->miny = tmp10;
									HX_STACK_LINE(5063)
									{
									}
								}
								HX_STACK_LINE(5063)
								{
									HX_STACK_LINE(5063)
									Float tmp9 = ::Math_obj::NEGATIVE_INFINITY;		HX_STACK_VAR(tmp9,"tmp9");
									HX_STACK_LINE(5063)
									cur->aabb->maxx = tmp9;
									HX_STACK_LINE(5063)
									Float tmp10 = ::Math_obj::NEGATIVE_INFINITY;		HX_STACK_VAR(tmp10,"tmp10");
									HX_STACK_LINE(5063)
									cur->aabb->maxy = tmp10;
									HX_STACK_LINE(5063)
									{
									}
								}
								HX_STACK_LINE(5063)
								{
									HX_STACK_LINE(5063)
									::zpp_nape::util::ZNPNode_ZPP_Shape tmp9 = cur->shapes->head;		HX_STACK_VAR(tmp9,"tmp9");
									HX_STACK_LINE(5063)
									::zpp_nape::util::ZNPNode_ZPP_Shape cx_ite1 = tmp9;		HX_STACK_VAR(cx_ite1,"cx_ite1");
									HX_STACK_LINE(5063)
									while((true)){
										HX_STACK_LINE(5063)
										bool tmp10 = (cx_ite1 != null());		HX_STACK_VAR(tmp10,"tmp10");
										HX_STACK_LINE(5063)
										bool tmp11 = !(tmp10);		HX_STACK_VAR(tmp11,"tmp11");
										HX_STACK_LINE(5063)
										if ((tmp11)){
											HX_STACK_LINE(5063)
											break;
										}
										HX_STACK_LINE(5063)
										::zpp_nape::shape::ZPP_Shape s = cx_ite1->elt;		HX_STACK_VAR(s,"s");
										HX_STACK_LINE(5063)
										{
											HX_STACK_LINE(5063)
											{
												HX_STACK_LINE(5063)
												bool tmp12 = s->zip_aabb;		HX_STACK_VAR(tmp12,"tmp12");
												HX_STACK_LINE(5063)
												if ((tmp12)){
													HX_STACK_LINE(5063)
													bool tmp13 = (s->body != null());		HX_STACK_VAR(tmp13,"tmp13");
													HX_STACK_LINE(5063)
													if ((tmp13)){
														HX_STACK_LINE(5063)
														s->zip_aabb = false;
														HX_STACK_LINE(5063)
														int tmp14 = s->type;		HX_STACK_VAR(tmp14,"tmp14");
														HX_STACK_LINE(5063)
														int tmp15 = ::zpp_nape::util::ZPP_Flags_obj::id_ShapeType_CIRCLE;		HX_STACK_VAR(tmp15,"tmp15");
														HX_STACK_LINE(5063)
														bool tmp16 = (tmp14 == tmp15);		HX_STACK_VAR(tmp16,"tmp16");
														HX_STACK_LINE(5063)
														if ((tmp16)){
															HX_STACK_LINE(5063)
															::zpp_nape::shape::ZPP_Circle _this = s->circle;		HX_STACK_VAR(_this,"_this");
															HX_STACK_LINE(5063)
															{
																HX_STACK_LINE(5063)
																bool tmp17 = _this->zip_worldCOM;		HX_STACK_VAR(tmp17,"tmp17");
																HX_STACK_LINE(5063)
																if ((tmp17)){
																	HX_STACK_LINE(5063)
																	bool tmp18 = (_this->body != null());		HX_STACK_VAR(tmp18,"tmp18");
																	HX_STACK_LINE(5063)
																	if ((tmp18)){
																		HX_STACK_LINE(5063)
																		_this->zip_worldCOM = false;
																		HX_STACK_LINE(5063)
																		{
																			HX_STACK_LINE(5063)
																			bool tmp19 = _this->zip_localCOM;		HX_STACK_VAR(tmp19,"tmp19");
																			HX_STACK_LINE(5063)
																			if ((tmp19)){
																				HX_STACK_LINE(5063)
																				_this->zip_localCOM = false;
																				HX_STACK_LINE(5063)
																				int tmp20 = _this->type;		HX_STACK_VAR(tmp20,"tmp20");
																				HX_STACK_LINE(5063)
																				int tmp21 = ::zpp_nape::util::ZPP_Flags_obj::id_ShapeType_POLYGON;		HX_STACK_VAR(tmp21,"tmp21");
																				HX_STACK_LINE(5063)
																				bool tmp22 = (tmp20 == tmp21);		HX_STACK_VAR(tmp22,"tmp22");
																				HX_STACK_LINE(5063)
																				if ((tmp22)){
																					HX_STACK_LINE(5063)
																					::zpp_nape::shape::ZPP_Polygon _this1 = _this->polygon;		HX_STACK_VAR(_this1,"_this1");
																					HX_STACK_LINE(5063)
																					::zpp_nape::geom::ZPP_Vec2 tmp23 = _this1->lverts->next;		HX_STACK_VAR(tmp23,"tmp23");
																					HX_STACK_LINE(5063)
																					bool tmp24 = (tmp23 == null());		HX_STACK_VAR(tmp24,"tmp24");
																					HX_STACK_LINE(5063)
																					if ((tmp24)){
																						HX_STACK_LINE(5063)
																						HX_STACK_DO_THROW(HX_HCSTRING("Error: An empty polygon has no meaningful localCOM","\x3b","\x8d","\x96","\xf3"));
																					}
																					HX_STACK_LINE(5063)
																					::zpp_nape::geom::ZPP_Vec2 tmp25 = _this1->lverts->next;		HX_STACK_VAR(tmp25,"tmp25");
																					HX_STACK_LINE(5063)
																					::zpp_nape::geom::ZPP_Vec2 tmp26 = tmp25->next;		HX_STACK_VAR(tmp26,"tmp26");
																					HX_STACK_LINE(5063)
																					bool tmp27 = (tmp26 == null());		HX_STACK_VAR(tmp27,"tmp27");
																					HX_STACK_LINE(5063)
																					if ((tmp27)){
																						HX_STACK_LINE(5063)
																						::zpp_nape::geom::ZPP_Vec2 tmp28 = _this1->lverts->next;		HX_STACK_VAR(tmp28,"tmp28");
																						HX_STACK_LINE(5063)
																						_this1->localCOMx = tmp28->x;
																						HX_STACK_LINE(5063)
																						::zpp_nape::geom::ZPP_Vec2 tmp29 = _this1->lverts->next;		HX_STACK_VAR(tmp29,"tmp29");
																						HX_STACK_LINE(5063)
																						_this1->localCOMy = tmp29->y;
																						HX_STACK_LINE(5063)
																						Dynamic();
																					}
																					else{
																						HX_STACK_LINE(5063)
																						::zpp_nape::geom::ZPP_Vec2 tmp28 = _this1->lverts->next;		HX_STACK_VAR(tmp28,"tmp28");
																						HX_STACK_LINE(5063)
																						::zpp_nape::geom::ZPP_Vec2 tmp29 = tmp28->next->next;		HX_STACK_VAR(tmp29,"tmp29");
																						HX_STACK_LINE(5063)
																						bool tmp30 = (tmp29 == null());		HX_STACK_VAR(tmp30,"tmp30");
																						HX_STACK_LINE(5063)
																						if ((tmp30)){
																							HX_STACK_LINE(5063)
																							{
																								HX_STACK_LINE(5063)
																								::zpp_nape::geom::ZPP_Vec2 tmp31 = _this1->lverts->next;		HX_STACK_VAR(tmp31,"tmp31");
																								HX_STACK_LINE(5063)
																								_this1->localCOMx = tmp31->x;
																								HX_STACK_LINE(5063)
																								::zpp_nape::geom::ZPP_Vec2 tmp32 = _this1->lverts->next;		HX_STACK_VAR(tmp32,"tmp32");
																								HX_STACK_LINE(5063)
																								_this1->localCOMy = tmp32->y;
																								HX_STACK_LINE(5063)
																								{
																								}
																							}
																							HX_STACK_LINE(5063)
																							{
																								HX_STACK_LINE(5063)
																								Float t = ((Float)1.0);		HX_STACK_VAR(t,"t");
																								HX_STACK_LINE(5063)
																								::zpp_nape::geom::ZPP_Vec2 tmp31 = _this1->lverts->next;		HX_STACK_VAR(tmp31,"tmp31");
																								HX_STACK_LINE(5063)
																								Float tmp32 = tmp31->next->x;		HX_STACK_VAR(tmp32,"tmp32");
																								HX_STACK_LINE(5063)
																								Float tmp33 = t;		HX_STACK_VAR(tmp33,"tmp33");
																								HX_STACK_LINE(5063)
																								Float tmp34 = (tmp32 * tmp33);		HX_STACK_VAR(tmp34,"tmp34");
																								HX_STACK_LINE(5063)
																								hx::AddEq(_this1->localCOMx,tmp34);
																								HX_STACK_LINE(5063)
																								::zpp_nape::geom::ZPP_Vec2 tmp35 = _this1->lverts->next;		HX_STACK_VAR(tmp35,"tmp35");
																								HX_STACK_LINE(5063)
																								Float tmp36 = tmp35->next->y;		HX_STACK_VAR(tmp36,"tmp36");
																								HX_STACK_LINE(5063)
																								Float tmp37 = t;		HX_STACK_VAR(tmp37,"tmp37");
																								HX_STACK_LINE(5063)
																								Float tmp38 = (tmp36 * tmp37);		HX_STACK_VAR(tmp38,"tmp38");
																								HX_STACK_LINE(5063)
																								hx::AddEq(_this1->localCOMy,tmp38);
																							}
																							HX_STACK_LINE(5063)
																							{
																								HX_STACK_LINE(5063)
																								Float t = ((Float)0.5);		HX_STACK_VAR(t,"t");
																								HX_STACK_LINE(5063)
																								hx::MultEq(_this1->localCOMx,t);
																								HX_STACK_LINE(5063)
																								hx::MultEq(_this1->localCOMy,t);
																							}
																						}
																						else{
																							HX_STACK_LINE(5063)
																							{
																								HX_STACK_LINE(5063)
																								_this1->localCOMx = (int)0;
																								HX_STACK_LINE(5063)
																								_this1->localCOMy = (int)0;
																								HX_STACK_LINE(5063)
																								{
																								}
																							}
																							HX_STACK_LINE(5063)
																							Float area = ((Float)0.0);		HX_STACK_VAR(area,"area");
																							HX_STACK_LINE(5063)
																							{
																								HX_STACK_LINE(5063)
																								::zpp_nape::geom::ZPP_Vec2 tmp31 = _this1->lverts->next;		HX_STACK_VAR(tmp31,"tmp31");
																								HX_STACK_LINE(5063)
																								::zpp_nape::geom::ZPP_Vec2 cx_ite2 = tmp31;		HX_STACK_VAR(cx_ite2,"cx_ite2");
																								HX_STACK_LINE(5063)
																								::zpp_nape::geom::ZPP_Vec2 u = cx_ite2;		HX_STACK_VAR(u,"u");
																								HX_STACK_LINE(5063)
																								cx_ite2 = cx_ite2->next;
																								HX_STACK_LINE(5063)
																								::zpp_nape::geom::ZPP_Vec2 v = cx_ite2;		HX_STACK_VAR(v,"v");
																								HX_STACK_LINE(5063)
																								cx_ite2 = cx_ite2->next;
																								HX_STACK_LINE(5063)
																								while((true)){
																									HX_STACK_LINE(5063)
																									bool tmp32 = (cx_ite2 != null());		HX_STACK_VAR(tmp32,"tmp32");
																									HX_STACK_LINE(5063)
																									bool tmp33 = !(tmp32);		HX_STACK_VAR(tmp33,"tmp33");
																									HX_STACK_LINE(5063)
																									if ((tmp33)){
																										HX_STACK_LINE(5063)
																										break;
																									}
																									HX_STACK_LINE(5063)
																									::zpp_nape::geom::ZPP_Vec2 w = cx_ite2;		HX_STACK_VAR(w,"w");
																									HX_STACK_LINE(5063)
																									{
																										HX_STACK_LINE(5063)
																										Float tmp34 = v->x;		HX_STACK_VAR(tmp34,"tmp34");
																										HX_STACK_LINE(5063)
																										Float tmp35 = (w->y - u->y);		HX_STACK_VAR(tmp35,"tmp35");
																										HX_STACK_LINE(5063)
																										Float tmp36 = (tmp34 * tmp35);		HX_STACK_VAR(tmp36,"tmp36");
																										HX_STACK_LINE(5063)
																										hx::AddEq(area,tmp36);
																										HX_STACK_LINE(5063)
																										Float tmp37 = (w->y * v->x);		HX_STACK_VAR(tmp37,"tmp37");
																										HX_STACK_LINE(5063)
																										Float tmp38 = (w->x * v->y);		HX_STACK_VAR(tmp38,"tmp38");
																										HX_STACK_LINE(5063)
																										Float tmp39 = (tmp37 - tmp38);		HX_STACK_VAR(tmp39,"tmp39");
																										HX_STACK_LINE(5063)
																										Float cf = tmp39;		HX_STACK_VAR(cf,"cf");
																										HX_STACK_LINE(5063)
																										Float tmp40 = (v->x + w->x);		HX_STACK_VAR(tmp40,"tmp40");
																										HX_STACK_LINE(5063)
																										Float tmp41 = cf;		HX_STACK_VAR(tmp41,"tmp41");
																										HX_STACK_LINE(5063)
																										Float tmp42 = (tmp40 * tmp41);		HX_STACK_VAR(tmp42,"tmp42");
																										HX_STACK_LINE(5063)
																										hx::AddEq(_this1->localCOMx,tmp42);
																										HX_STACK_LINE(5063)
																										Float tmp43 = (v->y + w->y);		HX_STACK_VAR(tmp43,"tmp43");
																										HX_STACK_LINE(5063)
																										Float tmp44 = cf;		HX_STACK_VAR(tmp44,"tmp44");
																										HX_STACK_LINE(5063)
																										Float tmp45 = (tmp43 * tmp44);		HX_STACK_VAR(tmp45,"tmp45");
																										HX_STACK_LINE(5063)
																										hx::AddEq(_this1->localCOMy,tmp45);
																									}
																									HX_STACK_LINE(5063)
																									u = v;
																									HX_STACK_LINE(5063)
																									v = w;
																									HX_STACK_LINE(5063)
																									cx_ite2 = cx_ite2->next;
																								}
																								HX_STACK_LINE(5063)
																								::zpp_nape::geom::ZPP_Vec2 tmp32 = _this1->lverts->next;		HX_STACK_VAR(tmp32,"tmp32");
																								HX_STACK_LINE(5063)
																								cx_ite2 = tmp32;
																								HX_STACK_LINE(5063)
																								::zpp_nape::geom::ZPP_Vec2 w = cx_ite2;		HX_STACK_VAR(w,"w");
																								HX_STACK_LINE(5063)
																								{
																									HX_STACK_LINE(5063)
																									Float tmp33 = v->x;		HX_STACK_VAR(tmp33,"tmp33");
																									HX_STACK_LINE(5063)
																									Float tmp34 = (w->y - u->y);		HX_STACK_VAR(tmp34,"tmp34");
																									HX_STACK_LINE(5063)
																									Float tmp35 = (tmp33 * tmp34);		HX_STACK_VAR(tmp35,"tmp35");
																									HX_STACK_LINE(5063)
																									hx::AddEq(area,tmp35);
																									HX_STACK_LINE(5063)
																									Float tmp36 = (w->y * v->x);		HX_STACK_VAR(tmp36,"tmp36");
																									HX_STACK_LINE(5063)
																									Float tmp37 = (w->x * v->y);		HX_STACK_VAR(tmp37,"tmp37");
																									HX_STACK_LINE(5063)
																									Float tmp38 = (tmp36 - tmp37);		HX_STACK_VAR(tmp38,"tmp38");
																									HX_STACK_LINE(5063)
																									Float cf = tmp38;		HX_STACK_VAR(cf,"cf");
																									HX_STACK_LINE(5063)
																									Float tmp39 = (v->x + w->x);		HX_STACK_VAR(tmp39,"tmp39");
																									HX_STACK_LINE(5063)
																									Float tmp40 = cf;		HX_STACK_VAR(tmp40,"tmp40");
																									HX_STACK_LINE(5063)
																									Float tmp41 = (tmp39 * tmp40);		HX_STACK_VAR(tmp41,"tmp41");
																									HX_STACK_LINE(5063)
																									hx::AddEq(_this1->localCOMx,tmp41);
																									HX_STACK_LINE(5063)
																									Float tmp42 = (v->y + w->y);		HX_STACK_VAR(tmp42,"tmp42");
																									HX_STACK_LINE(5063)
																									Float tmp43 = cf;		HX_STACK_VAR(tmp43,"tmp43");
																									HX_STACK_LINE(5063)
																									Float tmp44 = (tmp42 * tmp43);		HX_STACK_VAR(tmp44,"tmp44");
																									HX_STACK_LINE(5063)
																									hx::AddEq(_this1->localCOMy,tmp44);
																								}
																								HX_STACK_LINE(5063)
																								u = v;
																								HX_STACK_LINE(5063)
																								v = w;
																								HX_STACK_LINE(5063)
																								cx_ite2 = cx_ite2->next;
																								HX_STACK_LINE(5063)
																								::zpp_nape::geom::ZPP_Vec2 w1 = cx_ite2;		HX_STACK_VAR(w1,"w1");
																								HX_STACK_LINE(5063)
																								{
																									HX_STACK_LINE(5063)
																									Float tmp33 = v->x;		HX_STACK_VAR(tmp33,"tmp33");
																									HX_STACK_LINE(5063)
																									Float tmp34 = (w1->y - u->y);		HX_STACK_VAR(tmp34,"tmp34");
																									HX_STACK_LINE(5063)
																									Float tmp35 = (tmp33 * tmp34);		HX_STACK_VAR(tmp35,"tmp35");
																									HX_STACK_LINE(5063)
																									hx::AddEq(area,tmp35);
																									HX_STACK_LINE(5063)
																									Float tmp36 = (w1->y * v->x);		HX_STACK_VAR(tmp36,"tmp36");
																									HX_STACK_LINE(5063)
																									Float tmp37 = (w1->x * v->y);		HX_STACK_VAR(tmp37,"tmp37");
																									HX_STACK_LINE(5063)
																									Float tmp38 = (tmp36 - tmp37);		HX_STACK_VAR(tmp38,"tmp38");
																									HX_STACK_LINE(5063)
																									Float cf = tmp38;		HX_STACK_VAR(cf,"cf");
																									HX_STACK_LINE(5063)
																									Float tmp39 = (v->x + w1->x);		HX_STACK_VAR(tmp39,"tmp39");
																									HX_STACK_LINE(5063)
																									Float tmp40 = cf;		HX_STACK_VAR(tmp40,"tmp40");
																									HX_STACK_LINE(5063)
																									Float tmp41 = (tmp39 * tmp40);		HX_STACK_VAR(tmp41,"tmp41");
																									HX_STACK_LINE(5063)
																									hx::AddEq(_this1->localCOMx,tmp41);
																									HX_STACK_LINE(5063)
																									Float tmp42 = (v->y + w1->y);		HX_STACK_VAR(tmp42,"tmp42");
																									HX_STACK_LINE(5063)
																									Float tmp43 = cf;		HX_STACK_VAR(tmp43,"tmp43");
																									HX_STACK_LINE(5063)
																									Float tmp44 = (tmp42 * tmp43);		HX_STACK_VAR(tmp44,"tmp44");
																									HX_STACK_LINE(5063)
																									hx::AddEq(_this1->localCOMy,tmp44);
																								}
																							}
																							HX_STACK_LINE(5063)
																							Float tmp31 = ((int)3 * area);		HX_STACK_VAR(tmp31,"tmp31");
																							HX_STACK_LINE(5063)
																							Float tmp32 = (Float((int)1) / Float(tmp31));		HX_STACK_VAR(tmp32,"tmp32");
																							HX_STACK_LINE(5063)
																							area = tmp32;
																							HX_STACK_LINE(5063)
																							{
																								HX_STACK_LINE(5063)
																								Float t = area;		HX_STACK_VAR(t,"t");
																								HX_STACK_LINE(5063)
																								hx::MultEq(_this1->localCOMx,t);
																								HX_STACK_LINE(5063)
																								hx::MultEq(_this1->localCOMy,t);
																							}
																						}
																					}
																				}
																				HX_STACK_LINE(5063)
																				bool tmp23 = (_this->wrap_localCOM != null());		HX_STACK_VAR(tmp23,"tmp23");
																				HX_STACK_LINE(5063)
																				if ((tmp23)){
																					HX_STACK_LINE(5063)
																					::zpp_nape::geom::ZPP_Vec2 tmp24 = _this->wrap_localCOM->zpp_inner;		HX_STACK_VAR(tmp24,"tmp24");
																					HX_STACK_LINE(5063)
																					tmp24->x = _this->localCOMx;
																					HX_STACK_LINE(5063)
																					::zpp_nape::geom::ZPP_Vec2 tmp25 = _this->wrap_localCOM->zpp_inner;		HX_STACK_VAR(tmp25,"tmp25");
																					HX_STACK_LINE(5063)
																					tmp25->y = _this->localCOMy;
																					HX_STACK_LINE(5063)
																					{
																					}
																				}
																			}
																		}
																		HX_STACK_LINE(5063)
																		{
																			HX_STACK_LINE(5063)
																			::zpp_nape::phys::ZPP_Body _this1 = _this->body;		HX_STACK_VAR(_this1,"_this1");
																			HX_STACK_LINE(5063)
																			bool tmp19 = _this1->zip_axis;		HX_STACK_VAR(tmp19,"tmp19");
																			HX_STACK_LINE(5063)
																			if ((tmp19)){
																				HX_STACK_LINE(5063)
																				_this1->zip_axis = false;
																				HX_STACK_LINE(5063)
																				{
																					HX_STACK_LINE(5063)
																					Float tmp20 = _this1->rot;		HX_STACK_VAR(tmp20,"tmp20");
																					HX_STACK_LINE(5063)
																					Float tmp21 = ::Math_obj::sin(tmp20);		HX_STACK_VAR(tmp21,"tmp21");
																					HX_STACK_LINE(5063)
																					_this1->axisx = tmp21;
																					HX_STACK_LINE(5063)
																					Float tmp22 = _this1->rot;		HX_STACK_VAR(tmp22,"tmp22");
																					HX_STACK_LINE(5063)
																					Float tmp23 = ::Math_obj::cos(tmp22);		HX_STACK_VAR(tmp23,"tmp23");
																					HX_STACK_LINE(5063)
																					_this1->axisy = tmp23;
																					HX_STACK_LINE(5063)
																					Dynamic();
																				}
																			}
																		}
																		HX_STACK_LINE(5063)
																		{
																			HX_STACK_LINE(5063)
																			Float tmp19 = _this->body->posx;		HX_STACK_VAR(tmp19,"tmp19");
																			HX_STACK_LINE(5063)
																			Float tmp20 = _this->body->axisy;		HX_STACK_VAR(tmp20,"tmp20");
																			HX_STACK_LINE(5063)
																			Float tmp21 = _this->localCOMx;		HX_STACK_VAR(tmp21,"tmp21");
																			HX_STACK_LINE(5063)
																			Float tmp22 = (tmp20 * tmp21);		HX_STACK_VAR(tmp22,"tmp22");
																			HX_STACK_LINE(5063)
																			Float tmp23 = _this->body->axisx;		HX_STACK_VAR(tmp23,"tmp23");
																			HX_STACK_LINE(5063)
																			Float tmp24 = _this->localCOMy;		HX_STACK_VAR(tmp24,"tmp24");
																			HX_STACK_LINE(5063)
																			Float tmp25 = (tmp23 * tmp24);		HX_STACK_VAR(tmp25,"tmp25");
																			HX_STACK_LINE(5063)
																			Float tmp26 = (tmp22 - tmp25);		HX_STACK_VAR(tmp26,"tmp26");
																			HX_STACK_LINE(5063)
																			Float tmp27 = (tmp19 + tmp26);		HX_STACK_VAR(tmp27,"tmp27");
																			HX_STACK_LINE(5063)
																			_this->worldCOMx = tmp27;
																			HX_STACK_LINE(5063)
																			Float tmp28 = _this->body->posy;		HX_STACK_VAR(tmp28,"tmp28");
																			HX_STACK_LINE(5063)
																			Float tmp29 = _this->localCOMx;		HX_STACK_VAR(tmp29,"tmp29");
																			HX_STACK_LINE(5063)
																			Float tmp30 = _this->body->axisx;		HX_STACK_VAR(tmp30,"tmp30");
																			HX_STACK_LINE(5063)
																			Float tmp31 = (tmp29 * tmp30);		HX_STACK_VAR(tmp31,"tmp31");
																			HX_STACK_LINE(5063)
																			Float tmp32 = _this->localCOMy;		HX_STACK_VAR(tmp32,"tmp32");
																			HX_STACK_LINE(5063)
																			Float tmp33 = _this->body->axisy;		HX_STACK_VAR(tmp33,"tmp33");
																			HX_STACK_LINE(5063)
																			Float tmp34 = (tmp32 * tmp33);		HX_STACK_VAR(tmp34,"tmp34");
																			HX_STACK_LINE(5063)
																			Float tmp35 = (tmp31 + tmp34);		HX_STACK_VAR(tmp35,"tmp35");
																			HX_STACK_LINE(5063)
																			Float tmp36 = (tmp28 + tmp35);		HX_STACK_VAR(tmp36,"tmp36");
																			HX_STACK_LINE(5063)
																			_this->worldCOMy = tmp36;
																		}
																	}
																}
															}
															HX_STACK_LINE(5063)
															Float rx = _this->radius;		HX_STACK_VAR(rx,"rx");
															HX_STACK_LINE(5063)
															Float ry = _this->radius;		HX_STACK_VAR(ry,"ry");
															HX_STACK_LINE(5063)
															{
																HX_STACK_LINE(5063)
																Float tmp17 = (_this->worldCOMx - rx);		HX_STACK_VAR(tmp17,"tmp17");
																HX_STACK_LINE(5063)
																_this->aabb->minx = tmp17;
																HX_STACK_LINE(5063)
																Float tmp18 = (_this->worldCOMy - ry);		HX_STACK_VAR(tmp18,"tmp18");
																HX_STACK_LINE(5063)
																_this->aabb->miny = tmp18;
															}
															HX_STACK_LINE(5063)
															{
																HX_STACK_LINE(5063)
																Float tmp17 = (_this->worldCOMx + rx);		HX_STACK_VAR(tmp17,"tmp17");
																HX_STACK_LINE(5063)
																_this->aabb->maxx = tmp17;
																HX_STACK_LINE(5063)
																Float tmp18 = (_this->worldCOMy + ry);		HX_STACK_VAR(tmp18,"tmp18");
																HX_STACK_LINE(5063)
																_this->aabb->maxy = tmp18;
															}
														}
														else{
															HX_STACK_LINE(5063)
															::zpp_nape::shape::ZPP_Polygon _this = s->polygon;		HX_STACK_VAR(_this,"_this");
															HX_STACK_LINE(5063)
															{
																HX_STACK_LINE(5063)
																bool tmp17 = _this->zip_gverts;		HX_STACK_VAR(tmp17,"tmp17");
																HX_STACK_LINE(5063)
																if ((tmp17)){
																	HX_STACK_LINE(5063)
																	bool tmp18 = (_this->body != null());		HX_STACK_VAR(tmp18,"tmp18");
																	HX_STACK_LINE(5063)
																	if ((tmp18)){
																		HX_STACK_LINE(5063)
																		_this->zip_gverts = false;
																		HX_STACK_LINE(5063)
																		_this->validate_lverts();
																		HX_STACK_LINE(5063)
																		{
																			HX_STACK_LINE(5063)
																			::zpp_nape::phys::ZPP_Body _this1 = _this->body;		HX_STACK_VAR(_this1,"_this1");
																			HX_STACK_LINE(5063)
																			bool tmp19 = _this1->zip_axis;		HX_STACK_VAR(tmp19,"tmp19");
																			HX_STACK_LINE(5063)
																			if ((tmp19)){
																				HX_STACK_LINE(5063)
																				_this1->zip_axis = false;
																				HX_STACK_LINE(5063)
																				{
																					HX_STACK_LINE(5063)
																					Float tmp20 = _this1->rot;		HX_STACK_VAR(tmp20,"tmp20");
																					HX_STACK_LINE(5063)
																					Float tmp21 = ::Math_obj::sin(tmp20);		HX_STACK_VAR(tmp21,"tmp21");
																					HX_STACK_LINE(5063)
																					_this1->axisx = tmp21;
																					HX_STACK_LINE(5063)
																					Float tmp22 = _this1->rot;		HX_STACK_VAR(tmp22,"tmp22");
																					HX_STACK_LINE(5063)
																					Float tmp23 = ::Math_obj::cos(tmp22);		HX_STACK_VAR(tmp23,"tmp23");
																					HX_STACK_LINE(5063)
																					_this1->axisy = tmp23;
																					HX_STACK_LINE(5063)
																					Dynamic();
																				}
																			}
																		}
																		HX_STACK_LINE(5063)
																		::zpp_nape::geom::ZPP_Vec2 tmp19 = _this->lverts->next;		HX_STACK_VAR(tmp19,"tmp19");
																		HX_STACK_LINE(5063)
																		::zpp_nape::geom::ZPP_Vec2 li = tmp19;		HX_STACK_VAR(li,"li");
																		HX_STACK_LINE(5063)
																		{
																			HX_STACK_LINE(5063)
																			::zpp_nape::geom::ZPP_Vec2 tmp20 = _this->gverts->next;		HX_STACK_VAR(tmp20,"tmp20");
																			HX_STACK_LINE(5063)
																			::zpp_nape::geom::ZPP_Vec2 cx_ite2 = tmp20;		HX_STACK_VAR(cx_ite2,"cx_ite2");
																			HX_STACK_LINE(5063)
																			while((true)){
																				HX_STACK_LINE(5063)
																				bool tmp21 = (cx_ite2 != null());		HX_STACK_VAR(tmp21,"tmp21");
																				HX_STACK_LINE(5063)
																				bool tmp22 = !(tmp21);		HX_STACK_VAR(tmp22,"tmp22");
																				HX_STACK_LINE(5063)
																				if ((tmp22)){
																					HX_STACK_LINE(5063)
																					break;
																				}
																				HX_STACK_LINE(5063)
																				::zpp_nape::geom::ZPP_Vec2 g = cx_ite2;		HX_STACK_VAR(g,"g");
																				HX_STACK_LINE(5063)
																				{
																					HX_STACK_LINE(5063)
																					::zpp_nape::geom::ZPP_Vec2 l = li;		HX_STACK_VAR(l,"l");
																					HX_STACK_LINE(5063)
																					li = li->next;
																					HX_STACK_LINE(5063)
																					{
																						HX_STACK_LINE(5063)
																						Float tmp23 = _this->body->posx;		HX_STACK_VAR(tmp23,"tmp23");
																						HX_STACK_LINE(5063)
																						Float tmp24 = _this->body->axisy;		HX_STACK_VAR(tmp24,"tmp24");
																						HX_STACK_LINE(5063)
																						Float tmp25 = l->x;		HX_STACK_VAR(tmp25,"tmp25");
																						HX_STACK_LINE(5063)
																						Float tmp26 = (tmp24 * tmp25);		HX_STACK_VAR(tmp26,"tmp26");
																						HX_STACK_LINE(5063)
																						Float tmp27 = _this->body->axisx;		HX_STACK_VAR(tmp27,"tmp27");
																						HX_STACK_LINE(5063)
																						Float tmp28 = l->y;		HX_STACK_VAR(tmp28,"tmp28");
																						HX_STACK_LINE(5063)
																						Float tmp29 = (tmp27 * tmp28);		HX_STACK_VAR(tmp29,"tmp29");
																						HX_STACK_LINE(5063)
																						Float tmp30 = (tmp26 - tmp29);		HX_STACK_VAR(tmp30,"tmp30");
																						HX_STACK_LINE(5063)
																						Float tmp31 = (tmp23 + tmp30);		HX_STACK_VAR(tmp31,"tmp31");
																						HX_STACK_LINE(5063)
																						g->x = tmp31;
																						HX_STACK_LINE(5063)
																						Float tmp32 = _this->body->posy;		HX_STACK_VAR(tmp32,"tmp32");
																						HX_STACK_LINE(5063)
																						Float tmp33 = l->x;		HX_STACK_VAR(tmp33,"tmp33");
																						HX_STACK_LINE(5063)
																						Float tmp34 = _this->body->axisx;		HX_STACK_VAR(tmp34,"tmp34");
																						HX_STACK_LINE(5063)
																						Float tmp35 = (tmp33 * tmp34);		HX_STACK_VAR(tmp35,"tmp35");
																						HX_STACK_LINE(5063)
																						Float tmp36 = l->y;		HX_STACK_VAR(tmp36,"tmp36");
																						HX_STACK_LINE(5063)
																						Float tmp37 = _this->body->axisy;		HX_STACK_VAR(tmp37,"tmp37");
																						HX_STACK_LINE(5063)
																						Float tmp38 = (tmp36 * tmp37);		HX_STACK_VAR(tmp38,"tmp38");
																						HX_STACK_LINE(5063)
																						Float tmp39 = (tmp35 + tmp38);		HX_STACK_VAR(tmp39,"tmp39");
																						HX_STACK_LINE(5063)
																						Float tmp40 = (tmp32 + tmp39);		HX_STACK_VAR(tmp40,"tmp40");
																						HX_STACK_LINE(5063)
																						g->y = tmp40;
																					}
																				}
																				HX_STACK_LINE(5063)
																				cx_ite2 = cx_ite2->next;
																			}
																		}
																	}
																}
															}
															HX_STACK_LINE(5063)
															::zpp_nape::geom::ZPP_Vec2 tmp17 = _this->lverts->next;		HX_STACK_VAR(tmp17,"tmp17");
															HX_STACK_LINE(5063)
															bool tmp18 = (tmp17 == null());		HX_STACK_VAR(tmp18,"tmp18");
															HX_STACK_LINE(5063)
															if ((tmp18)){
																HX_STACK_LINE(5063)
																HX_STACK_DO_THROW(HX_HCSTRING("Error: An empty polygon has no meaningful bounds","\xda","\x28","\x5b","\xf5"));
															}
															HX_STACK_LINE(5063)
															::zpp_nape::geom::ZPP_Vec2 tmp19 = _this->gverts->next;		HX_STACK_VAR(tmp19,"tmp19");
															HX_STACK_LINE(5063)
															::zpp_nape::geom::ZPP_Vec2 p0 = tmp19;		HX_STACK_VAR(p0,"p0");
															HX_STACK_LINE(5063)
															{
																HX_STACK_LINE(5063)
																_this->aabb->minx = p0->x;
																HX_STACK_LINE(5063)
																_this->aabb->miny = p0->y;
																HX_STACK_LINE(5063)
																{
																}
															}
															HX_STACK_LINE(5063)
															{
																HX_STACK_LINE(5063)
																_this->aabb->maxx = p0->x;
																HX_STACK_LINE(5063)
																_this->aabb->maxy = p0->y;
																HX_STACK_LINE(5063)
																{
																}
															}
															HX_STACK_LINE(5063)
															{
																HX_STACK_LINE(5063)
																::zpp_nape::geom::ZPP_Vec2 tmp20 = _this->gverts->next;		HX_STACK_VAR(tmp20,"tmp20");
																HX_STACK_LINE(5063)
																::zpp_nape::geom::ZPP_Vec2 cx_ite2 = tmp20->next;		HX_STACK_VAR(cx_ite2,"cx_ite2");
																HX_STACK_LINE(5063)
																while((true)){
																	HX_STACK_LINE(5063)
																	bool tmp21 = (cx_ite2 != null());		HX_STACK_VAR(tmp21,"tmp21");
																	HX_STACK_LINE(5063)
																	bool tmp22 = !(tmp21);		HX_STACK_VAR(tmp22,"tmp22");
																	HX_STACK_LINE(5063)
																	if ((tmp22)){
																		HX_STACK_LINE(5063)
																		break;
																	}
																	HX_STACK_LINE(5063)
																	::zpp_nape::geom::ZPP_Vec2 p = cx_ite2;		HX_STACK_VAR(p,"p");
																	HX_STACK_LINE(5063)
																	{
																		HX_STACK_LINE(5063)
																		Float tmp23 = p->x;		HX_STACK_VAR(tmp23,"tmp23");
																		HX_STACK_LINE(5063)
																		Float tmp24 = _this->aabb->minx;		HX_STACK_VAR(tmp24,"tmp24");
																		HX_STACK_LINE(5063)
																		bool tmp25 = (tmp23 < tmp24);		HX_STACK_VAR(tmp25,"tmp25");
																		HX_STACK_LINE(5063)
																		if ((tmp25)){
																			HX_STACK_LINE(5063)
																			_this->aabb->minx = p->x;
																		}
																		HX_STACK_LINE(5063)
																		Float tmp26 = p->x;		HX_STACK_VAR(tmp26,"tmp26");
																		HX_STACK_LINE(5063)
																		Float tmp27 = _this->aabb->maxx;		HX_STACK_VAR(tmp27,"tmp27");
																		HX_STACK_LINE(5063)
																		bool tmp28 = (tmp26 > tmp27);		HX_STACK_VAR(tmp28,"tmp28");
																		HX_STACK_LINE(5063)
																		if ((tmp28)){
																			HX_STACK_LINE(5063)
																			_this->aabb->maxx = p->x;
																		}
																		HX_STACK_LINE(5063)
																		Float tmp29 = p->y;		HX_STACK_VAR(tmp29,"tmp29");
																		HX_STACK_LINE(5063)
																		Float tmp30 = _this->aabb->miny;		HX_STACK_VAR(tmp30,"tmp30");
																		HX_STACK_LINE(5063)
																		bool tmp31 = (tmp29 < tmp30);		HX_STACK_VAR(tmp31,"tmp31");
																		HX_STACK_LINE(5063)
																		if ((tmp31)){
																			HX_STACK_LINE(5063)
																			_this->aabb->miny = p->y;
																		}
																		HX_STACK_LINE(5063)
																		Float tmp32 = p->y;		HX_STACK_VAR(tmp32,"tmp32");
																		HX_STACK_LINE(5063)
																		Float tmp33 = _this->aabb->maxy;		HX_STACK_VAR(tmp33,"tmp33");
																		HX_STACK_LINE(5063)
																		bool tmp34 = (tmp32 > tmp33);		HX_STACK_VAR(tmp34,"tmp34");
																		HX_STACK_LINE(5063)
																		if ((tmp34)){
																			HX_STACK_LINE(5063)
																			_this->aabb->maxy = p->y;
																		}
																	}
																	HX_STACK_LINE(5063)
																	cx_ite2 = cx_ite2->next;
																}
															}
														}
													}
												}
											}
											HX_STACK_LINE(5063)
											{
												HX_STACK_LINE(5063)
												::zpp_nape::geom::ZPP_AABB _this = cur->aabb;		HX_STACK_VAR(_this,"_this");
												HX_STACK_LINE(5063)
												::zpp_nape::geom::ZPP_AABB x = s->aabb;		HX_STACK_VAR(x,"x");
												HX_STACK_LINE(5063)
												bool tmp12 = (x->minx < _this->minx);		HX_STACK_VAR(tmp12,"tmp12");
												HX_STACK_LINE(5063)
												if ((tmp12)){
													HX_STACK_LINE(5063)
													_this->minx = x->minx;
												}
												HX_STACK_LINE(5063)
												bool tmp13 = (x->maxx > _this->maxx);		HX_STACK_VAR(tmp13,"tmp13");
												HX_STACK_LINE(5063)
												if ((tmp13)){
													HX_STACK_LINE(5063)
													_this->maxx = x->maxx;
												}
												HX_STACK_LINE(5063)
												bool tmp14 = (x->miny < _this->miny);		HX_STACK_VAR(tmp14,"tmp14");
												HX_STACK_LINE(5063)
												if ((tmp14)){
													HX_STACK_LINE(5063)
													_this->miny = x->miny;
												}
												HX_STACK_LINE(5063)
												bool tmp15 = (x->maxy > _this->maxy);		HX_STACK_VAR(tmp15,"tmp15");
												HX_STACK_LINE(5063)
												if ((tmp15)){
													HX_STACK_LINE(5063)
													_this->maxy = x->maxy;
												}
											}
										}
										HX_STACK_LINE(5063)
										cx_ite1 = cx_ite1->next;
									}
								}
							}
						}
						HX_STACK_LINE(5064)
						cur->validate_worldCOM();
					}
					HX_STACK_LINE(5066)
					cur->validate_gravMass();
					HX_STACK_LINE(5067)
					{
						HX_STACK_LINE(5067)
						bool tmp6 = cur->zip_axis;		HX_STACK_VAR(tmp6,"tmp6");
						HX_STACK_LINE(5067)
						if ((tmp6)){
							HX_STACK_LINE(5067)
							cur->zip_axis = false;
							HX_STACK_LINE(5067)
							{
								HX_STACK_LINE(5067)
								Float tmp7 = cur->rot;		HX_STACK_VAR(tmp7,"tmp7");
								HX_STACK_LINE(5067)
								Float tmp8 = ::Math_obj::sin(tmp7);		HX_STACK_VAR(tmp8,"tmp8");
								HX_STACK_LINE(5067)
								cur->axisx = tmp8;
								HX_STACK_LINE(5067)
								Float tmp9 = cur->rot;		HX_STACK_VAR(tmp9,"tmp9");
								HX_STACK_LINE(5067)
								Float tmp10 = ::Math_obj::cos(tmp9);		HX_STACK_VAR(tmp10,"tmp10");
								HX_STACK_LINE(5067)
								cur->axisy = tmp10;
								HX_STACK_LINE(5067)
								Dynamic();
							}
						}
					}
					HX_STACK_LINE(5069)
					bool tmp6 = cur->nomove;		HX_STACK_VAR(tmp6,"tmp6");
					HX_STACK_LINE(5069)
					bool tmp7 = tmp6;		HX_STACK_VAR(tmp7,"tmp7");
					HX_STACK_LINE(5069)
					bool tmp8 = !(tmp7);		HX_STACK_VAR(tmp8,"tmp8");
					HX_STACK_LINE(5069)
					bool tmp9 = tmp8;		HX_STACK_VAR(tmp9,"tmp9");
					HX_STACK_LINE(5069)
					bool tmp10;		HX_STACK_VAR(tmp10,"tmp10");
					HX_STACK_LINE(5069)
					if ((tmp9)){
						HX_STACK_LINE(5069)
						int tmp11 = cur->type;		HX_STACK_VAR(tmp11,"tmp11");
						HX_STACK_LINE(5069)
						int tmp12 = ::zpp_nape::util::ZPP_Flags_obj::id_BodyType_DYNAMIC;		HX_STACK_VAR(tmp12,"tmp12");
						HX_STACK_LINE(5069)
						int tmp13 = tmp12;		HX_STACK_VAR(tmp13,"tmp13");
						HX_STACK_LINE(5069)
						int tmp14 = tmp13;		HX_STACK_VAR(tmp14,"tmp14");
						HX_STACK_LINE(5069)
						tmp10 = (tmp11 == tmp14);
					}
					else{
						HX_STACK_LINE(5069)
						tmp10 = false;
					}
					HX_STACK_LINE(5069)
					bool tmp11;		HX_STACK_VAR(tmp11,"tmp11");
					HX_STACK_LINE(5069)
					if ((tmp10)){
						HX_STACK_LINE(5069)
						tmp11 = (cur->mass == (int)0);
					}
					else{
						HX_STACK_LINE(5069)
						tmp11 = false;
					}
					HX_STACK_LINE(5069)
					if ((tmp11)){
						HX_STACK_LINE(5070)
						HX_STACK_DO_THROW(HX_HCSTRING("Error: Dynamic Body cannot be simulated with 0 mass unless allowMovement is false","\x52","\xb2","\x78","\x1f"));
					}
					HX_STACK_LINE(5072)
					bool tmp12 = cur->norotate;		HX_STACK_VAR(tmp12,"tmp12");
					HX_STACK_LINE(5072)
					bool tmp13 = tmp12;		HX_STACK_VAR(tmp13,"tmp13");
					HX_STACK_LINE(5072)
					bool tmp14 = !(tmp13);		HX_STACK_VAR(tmp14,"tmp14");
					HX_STACK_LINE(5072)
					bool tmp15 = tmp14;		HX_STACK_VAR(tmp15,"tmp15");
					HX_STACK_LINE(5072)
					bool tmp16;		HX_STACK_VAR(tmp16,"tmp16");
					HX_STACK_LINE(5072)
					if ((tmp15)){
						HX_STACK_LINE(5072)
						int tmp17 = cur->type;		HX_STACK_VAR(tmp17,"tmp17");
						HX_STACK_LINE(5072)
						int tmp18 = ::zpp_nape::util::ZPP_Flags_obj::id_BodyType_DYNAMIC;		HX_STACK_VAR(tmp18,"tmp18");
						HX_STACK_LINE(5072)
						int tmp19 = tmp18;		HX_STACK_VAR(tmp19,"tmp19");
						HX_STACK_LINE(5072)
						int tmp20 = tmp19;		HX_STACK_VAR(tmp20,"tmp20");
						HX_STACK_LINE(5072)
						tmp16 = (tmp17 == tmp20);
					}
					else{
						HX_STACK_LINE(5072)
						tmp16 = false;
					}
					HX_STACK_LINE(5072)
					bool tmp17;		HX_STACK_VAR(tmp17,"tmp17");
					HX_STACK_LINE(5072)
					if ((tmp16)){
						HX_STACK_LINE(5072)
						tmp17 = (cur->inertia == (int)0);
					}
					else{
						HX_STACK_LINE(5072)
						tmp17 = false;
					}
					HX_STACK_LINE(5072)
					if ((tmp17)){
						HX_STACK_LINE(5073)
						HX_STACK_DO_THROW(HX_HCSTRING("Error: Dynamic Body cannot be simulated with 0 inertia unless allowRotation is false","\x93","\x3f","\x65","\x99"));
					}
					HX_STACK_LINE(5076)
					bool tmp18 = false;		HX_STACK_VAR(tmp18,"tmp18");
					HX_STACK_LINE(5076)
					if ((tmp18)){
						HX_STACK_LINE(5077)
						bool tmp19 = cur->component->woken;		HX_STACK_VAR(tmp19,"tmp19");
						HX_STACK_LINE(5077)
						bool tmp20;		HX_STACK_VAR(tmp20,"tmp20");
						HX_STACK_LINE(5077)
						if ((tmp19)){
							HX_STACK_LINE(5077)
							tmp20 = (cur->cbSet != null());
						}
						else{
							HX_STACK_LINE(5077)
							tmp20 = false;
						}
						HX_STACK_LINE(5077)
						if ((tmp20)){
							HX_STACK_LINE(5079)
							::zpp_nape::util::ZNPList_ZPP_BodyListener tmp21 = cur->cbSet->bodylisteners;		HX_STACK_VAR(tmp21,"tmp21");
							HX_STACK_LINE(5079)
							::zpp_nape::util::ZNPNode_ZPP_BodyListener cx_ite1 = tmp21->head;		HX_STACK_VAR(cx_ite1,"cx_ite1");
							HX_STACK_LINE(5080)
							while((true)){
								HX_STACK_LINE(5080)
								bool tmp22 = (cx_ite1 != null());		HX_STACK_VAR(tmp22,"tmp22");
								HX_STACK_LINE(5080)
								bool tmp23 = !(tmp22);		HX_STACK_VAR(tmp23,"tmp23");
								HX_STACK_LINE(5080)
								if ((tmp23)){
									HX_STACK_LINE(5080)
									break;
								}
								HX_STACK_LINE(5081)
								::zpp_nape::callbacks::ZPP_BodyListener i = cx_ite1->elt;		HX_STACK_VAR(i,"i");
								HX_STACK_LINE(5082)
								{
									HX_STACK_LINE(5083)
									int tmp24 = i->event;		HX_STACK_VAR(tmp24,"tmp24");
									HX_STACK_LINE(5083)
									int tmp25 = ::zpp_nape::util::ZPP_Flags_obj::id_CbEvent_WAKE;		HX_STACK_VAR(tmp25,"tmp25");
									HX_STACK_LINE(5083)
									bool tmp26 = (tmp24 != tmp25);		HX_STACK_VAR(tmp26,"tmp26");
									HX_STACK_LINE(5083)
									if ((tmp26)){
										HX_STACK_LINE(5084)
										cx_ite1 = cx_ite1->next;
										HX_STACK_LINE(5085)
										continue;
									}
									HX_STACK_LINE(5087)
									::zpp_nape::callbacks::ZPP_BodyListener tmp27 = i;		HX_STACK_VAR(tmp27,"tmp27");
									HX_STACK_LINE(5087)
									::zpp_nape::callbacks::ZPP_Callback tmp28 = this->push_callback(tmp27);		HX_STACK_VAR(tmp28,"tmp28");
									HX_STACK_LINE(5087)
									::zpp_nape::callbacks::ZPP_Callback cb = tmp28;		HX_STACK_VAR(cb,"cb");
									HX_STACK_LINE(5088)
									int tmp29 = ::zpp_nape::util::ZPP_Flags_obj::id_CbEvent_WAKE;		HX_STACK_VAR(tmp29,"tmp29");
									HX_STACK_LINE(5088)
									cb->event = tmp29;
									HX_STACK_LINE(5089)
									cb->body = cur;
								}
								HX_STACK_LINE(5091)
								cx_ite1 = cx_ite1->next;
							}
						}
						HX_STACK_LINE(5095)
						cur->component->woken = false;
					}
					HX_STACK_LINE(5097)
					{
						HX_STACK_LINE(5098)
						::zpp_nape::util::ZNPNode_ZPP_Shape tmp19 = cur->shapes->head;		HX_STACK_VAR(tmp19,"tmp19");
						HX_STACK_LINE(5098)
						::zpp_nape::util::ZNPNode_ZPP_Shape cx_ite1 = tmp19;		HX_STACK_VAR(cx_ite1,"cx_ite1");
						HX_STACK_LINE(5099)
						while((true)){
							HX_STACK_LINE(5099)
							bool tmp20 = (cx_ite1 != null());		HX_STACK_VAR(tmp20,"tmp20");
							HX_STACK_LINE(5099)
							bool tmp21 = !(tmp20);		HX_STACK_VAR(tmp21,"tmp21");
							HX_STACK_LINE(5099)
							if ((tmp21)){
								HX_STACK_LINE(5099)
								break;
							}
							HX_STACK_LINE(5100)
							::zpp_nape::shape::ZPP_Shape shape = cx_ite1->elt;		HX_STACK_VAR(shape,"shape");
							HX_STACK_LINE(5101)
							::zpp_nape::space::ZPP_Broadphase tmp22 = this->bphase;		HX_STACK_VAR(tmp22,"tmp22");
							HX_STACK_LINE(5101)
							::zpp_nape::shape::ZPP_Shape tmp23 = shape;		HX_STACK_VAR(tmp23,"tmp23");
							HX_STACK_LINE(5101)
							tmp22->sync(tmp23);
							HX_STACK_LINE(5102)
							cx_ite1 = cx_ite1->next;
						}
					}
				}
				HX_STACK_LINE(5106)
				cx_ite = cx_ite->next;
			}
		}
		HX_STACK_LINE(5110)
		{
			HX_STACK_LINE(5111)
			::zpp_nape::util::ZNPList_ZPP_Constraint tmp = this->live_constraints;		HX_STACK_VAR(tmp,"tmp");
			HX_STACK_LINE(5111)
			::zpp_nape::util::ZNPNode_ZPP_Constraint cx_ite = tmp->head;		HX_STACK_VAR(cx_ite,"cx_ite");
			HX_STACK_LINE(5112)
			while((true)){
				HX_STACK_LINE(5112)
				bool tmp1 = (cx_ite != null());		HX_STACK_VAR(tmp1,"tmp1");
				HX_STACK_LINE(5112)
				bool tmp2 = !(tmp1);		HX_STACK_VAR(tmp2,"tmp2");
				HX_STACK_LINE(5112)
				if ((tmp2)){
					HX_STACK_LINE(5112)
					break;
				}
				HX_STACK_LINE(5113)
				::zpp_nape::constraint::ZPP_Constraint con = cx_ite->elt;		HX_STACK_VAR(con,"con");
				HX_STACK_LINE(5114)
				{
					HX_STACK_LINE(5115)
					bool tmp3 = con->active;		HX_STACK_VAR(tmp3,"tmp3");
					HX_STACK_LINE(5115)
					if ((tmp3)){
						HX_STACK_LINE(5117)
						con->validate();
						HX_STACK_LINE(5119)
						bool tmp4 = con->component->woken;		HX_STACK_VAR(tmp4,"tmp4");
						HX_STACK_LINE(5119)
						bool tmp5;		HX_STACK_VAR(tmp5,"tmp5");
						HX_STACK_LINE(5119)
						if ((tmp4)){
							HX_STACK_LINE(5119)
							tmp5 = (con->cbSet != null());
						}
						else{
							HX_STACK_LINE(5119)
							tmp5 = false;
						}
						HX_STACK_LINE(5119)
						if ((tmp5)){
							HX_STACK_LINE(5121)
							::zpp_nape::util::ZNPList_ZPP_ConstraintListener tmp6 = con->cbSet->conlisteners;		HX_STACK_VAR(tmp6,"tmp6");
							HX_STACK_LINE(5121)
							::zpp_nape::util::ZNPNode_ZPP_ConstraintListener cx_ite1 = tmp6->head;		HX_STACK_VAR(cx_ite1,"cx_ite1");
							HX_STACK_LINE(5122)
							while((true)){
								HX_STACK_LINE(5122)
								bool tmp7 = (cx_ite1 != null());		HX_STACK_VAR(tmp7,"tmp7");
								HX_STACK_LINE(5122)
								bool tmp8 = !(tmp7);		HX_STACK_VAR(tmp8,"tmp8");
								HX_STACK_LINE(5122)
								if ((tmp8)){
									HX_STACK_LINE(5122)
									break;
								}
								HX_STACK_LINE(5123)
								::zpp_nape::callbacks::ZPP_ConstraintListener i = cx_ite1->elt;		HX_STACK_VAR(i,"i");
								HX_STACK_LINE(5124)
								{
									HX_STACK_LINE(5125)
									int tmp9 = i->event;		HX_STACK_VAR(tmp9,"tmp9");
									HX_STACK_LINE(5125)
									int tmp10 = ::zpp_nape::util::ZPP_Flags_obj::id_CbEvent_WAKE;		HX_STACK_VAR(tmp10,"tmp10");
									HX_STACK_LINE(5125)
									bool tmp11 = (tmp9 != tmp10);		HX_STACK_VAR(tmp11,"tmp11");
									HX_STACK_LINE(5125)
									if ((tmp11)){
										HX_STACK_LINE(5126)
										cx_ite1 = cx_ite1->next;
										HX_STACK_LINE(5127)
										continue;
									}
									HX_STACK_LINE(5129)
									::zpp_nape::callbacks::ZPP_ConstraintListener tmp12 = i;		HX_STACK_VAR(tmp12,"tmp12");
									HX_STACK_LINE(5129)
									::zpp_nape::callbacks::ZPP_Callback tmp13 = this->push_callback(tmp12);		HX_STACK_VAR(tmp13,"tmp13");
									HX_STACK_LINE(5129)
									::zpp_nape::callbacks::ZPP_Callback cb = tmp13;		HX_STACK_VAR(cb,"cb");
									HX_STACK_LINE(5130)
									int tmp14 = ::zpp_nape::util::ZPP_Flags_obj::id_CbEvent_WAKE;		HX_STACK_VAR(tmp14,"tmp14");
									HX_STACK_LINE(5130)
									cb->event = tmp14;
									HX_STACK_LINE(5131)
									cb->constraint = con;
								}
								HX_STACK_LINE(5133)
								cx_ite1 = cx_ite1->next;
							}
						}
						HX_STACK_LINE(5137)
						con->component->woken = false;
					}
				}
				HX_STACK_LINE(5140)
				cx_ite = cx_ite->next;
			}
		}
	}
return null();
}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Space_obj,validation,(void))

Void ZPP_Space_obj::updateVel( Float dt){
{
		HX_STACK_FRAME("zpp_nape.space.ZPP_Space","updateVel",0x08bffd9e,"zpp_nape.space.ZPP_Space.updateVel","zpp_nape/space/Space.hx",5144,0x2b65ed03)
		HX_STACK_THIS(this)
		HX_STACK_ARG(dt,"dt")
		HX_STACK_LINE(5145)
		::zpp_nape::util::ZNPNode_ZPP_Body pre = null();		HX_STACK_VAR(pre,"pre");
		HX_STACK_LINE(5146)
		Float tmp = dt;		HX_STACK_VAR(tmp,"tmp");
		HX_STACK_LINE(5146)
		Float tmp1 = this->global_lin_drag;		HX_STACK_VAR(tmp1,"tmp1");
		HX_STACK_LINE(5146)
		Float tmp2 = (tmp * tmp1);		HX_STACK_VAR(tmp2,"tmp2");
		HX_STACK_LINE(5146)
		Float tmp3 = ((int)1 - tmp2);		HX_STACK_VAR(tmp3,"tmp3");
		HX_STACK_LINE(5146)
		Float linDrag = tmp3;		HX_STACK_VAR(linDrag,"linDrag");
		HX_STACK_LINE(5147)
		Float tmp4 = dt;		HX_STACK_VAR(tmp4,"tmp4");
		HX_STACK_LINE(5147)
		Float tmp5 = this->global_ang_drag;		HX_STACK_VAR(tmp5,"tmp5");
		HX_STACK_LINE(5147)
		Float tmp6 = (tmp4 * tmp5);		HX_STACK_VAR(tmp6,"tmp6");
		HX_STACK_LINE(5147)
		Float tmp7 = ((int)1 - tmp6);		HX_STACK_VAR(tmp7,"tmp7");
		HX_STACK_LINE(5147)
		Float angDrag = tmp7;		HX_STACK_VAR(angDrag,"angDrag");
		HX_STACK_LINE(5148)
		{
			HX_STACK_LINE(5149)
			::zpp_nape::util::ZNPList_ZPP_Body tmp8 = this->live;		HX_STACK_VAR(tmp8,"tmp8");
			HX_STACK_LINE(5149)
			::zpp_nape::util::ZNPNode_ZPP_Body cx_ite = tmp8->head;		HX_STACK_VAR(cx_ite,"cx_ite");
			HX_STACK_LINE(5150)
			while((true)){
				HX_STACK_LINE(5150)
				bool tmp9 = (cx_ite != null());		HX_STACK_VAR(tmp9,"tmp9");
				HX_STACK_LINE(5150)
				bool tmp10 = !(tmp9);		HX_STACK_VAR(tmp10,"tmp10");
				HX_STACK_LINE(5150)
				if ((tmp10)){
					HX_STACK_LINE(5150)
					break;
				}
				HX_STACK_LINE(5151)
				::zpp_nape::phys::ZPP_Body cur = cx_ite->elt;		HX_STACK_VAR(cur,"cur");
				HX_STACK_LINE(5152)
				{
					HX_STACK_LINE(5153)
					bool tmp11 = (cur->smass != ((Float)0.0));		HX_STACK_VAR(tmp11,"tmp11");
					HX_STACK_LINE(5153)
					if ((tmp11)){
						HX_STACK_LINE(5154)
						Float tmp12 = (dt * cur->imass);		HX_STACK_VAR(tmp12,"tmp12");
						HX_STACK_LINE(5154)
						Float time = tmp12;		HX_STACK_VAR(time,"time");
						HX_STACK_LINE(5155)
						Float tmp13 = (linDrag * cur->velx);		HX_STACK_VAR(tmp13,"tmp13");
						HX_STACK_LINE(5155)
						Float tmp14 = cur->forcex;		HX_STACK_VAR(tmp14,"tmp14");
						HX_STACK_LINE(5155)
						Float tmp15 = this->gravityx;		HX_STACK_VAR(tmp15,"tmp15");
						HX_STACK_LINE(5155)
						Float tmp16 = cur->gravMass;		HX_STACK_VAR(tmp16,"tmp16");
						HX_STACK_LINE(5155)
						Float tmp17 = (tmp15 * tmp16);		HX_STACK_VAR(tmp17,"tmp17");
						HX_STACK_LINE(5155)
						Float tmp18 = (tmp14 + tmp17);		HX_STACK_VAR(tmp18,"tmp18");
						HX_STACK_LINE(5155)
						Float tmp19 = time;		HX_STACK_VAR(tmp19,"tmp19");
						HX_STACK_LINE(5155)
						Float tmp20 = (tmp18 * tmp19);		HX_STACK_VAR(tmp20,"tmp20");
						HX_STACK_LINE(5155)
						Float tmp21 = (tmp13 + tmp20);		HX_STACK_VAR(tmp21,"tmp21");
						HX_STACK_LINE(5155)
						cur->velx = tmp21;
						HX_STACK_LINE(5156)
						Float tmp22 = (linDrag * cur->vely);		HX_STACK_VAR(tmp22,"tmp22");
						HX_STACK_LINE(5156)
						Float tmp23 = cur->forcey;		HX_STACK_VAR(tmp23,"tmp23");
						HX_STACK_LINE(5156)
						Float tmp24 = this->gravityy;		HX_STACK_VAR(tmp24,"tmp24");
						HX_STACK_LINE(5156)
						Float tmp25 = cur->gravMass;		HX_STACK_VAR(tmp25,"tmp25");
						HX_STACK_LINE(5156)
						Float tmp26 = (tmp24 * tmp25);		HX_STACK_VAR(tmp26,"tmp26");
						HX_STACK_LINE(5156)
						Float tmp27 = (tmp23 + tmp26);		HX_STACK_VAR(tmp27,"tmp27");
						HX_STACK_LINE(5156)
						Float tmp28 = time;		HX_STACK_VAR(tmp28,"tmp28");
						HX_STACK_LINE(5156)
						Float tmp29 = (tmp27 * tmp28);		HX_STACK_VAR(tmp29,"tmp29");
						HX_STACK_LINE(5156)
						Float tmp30 = (tmp22 + tmp29);		HX_STACK_VAR(tmp30,"tmp30");
						HX_STACK_LINE(5156)
						cur->vely = tmp30;
					}
					HX_STACK_LINE(5158)
					bool tmp12 = (cur->sinertia != ((Float)0.0));		HX_STACK_VAR(tmp12,"tmp12");
					HX_STACK_LINE(5158)
					if ((tmp12)){
						HX_STACK_LINE(5159)
						Float dpx = ((Float)0.0);		HX_STACK_VAR(dpx,"dpx");
						HX_STACK_LINE(5160)
						Float dpy = ((Float)0.0);		HX_STACK_VAR(dpy,"dpy");
						HX_STACK_LINE(5161)
						{
							HX_STACK_LINE(5162)
							Float tmp13 = (cur->worldCOMx - cur->posx);		HX_STACK_VAR(tmp13,"tmp13");
							HX_STACK_LINE(5162)
							dpx = tmp13;
							HX_STACK_LINE(5163)
							Float tmp14 = (cur->worldCOMy - cur->posy);		HX_STACK_VAR(tmp14,"tmp14");
							HX_STACK_LINE(5163)
							dpy = tmp14;
						}
						HX_STACK_LINE(5165)
						Float tmp13 = cur->torque;		HX_STACK_VAR(tmp13,"tmp13");
						HX_STACK_LINE(5165)
						Float tmp14 = this->gravityy;		HX_STACK_VAR(tmp14,"tmp14");
						HX_STACK_LINE(5165)
						Float tmp15 = dpx;		HX_STACK_VAR(tmp15,"tmp15");
						HX_STACK_LINE(5165)
						Float tmp16 = (tmp14 * tmp15);		HX_STACK_VAR(tmp16,"tmp16");
						HX_STACK_LINE(5165)
						Float tmp17 = this->gravityx;		HX_STACK_VAR(tmp17,"tmp17");
						HX_STACK_LINE(5165)
						Float tmp18 = dpy;		HX_STACK_VAR(tmp18,"tmp18");
						HX_STACK_LINE(5165)
						Float tmp19 = (tmp17 * tmp18);		HX_STACK_VAR(tmp19,"tmp19");
						HX_STACK_LINE(5165)
						Float tmp20 = (tmp16 - tmp19);		HX_STACK_VAR(tmp20,"tmp20");
						HX_STACK_LINE(5165)
						Float tmp21 = cur->gravMass;		HX_STACK_VAR(tmp21,"tmp21");
						HX_STACK_LINE(5165)
						Float tmp22 = (tmp20 * tmp21);		HX_STACK_VAR(tmp22,"tmp22");
						HX_STACK_LINE(5165)
						Float tmp23 = (tmp13 + tmp22);		HX_STACK_VAR(tmp23,"tmp23");
						HX_STACK_LINE(5165)
						Float torque = tmp23;		HX_STACK_VAR(torque,"torque");
						HX_STACK_LINE(5166)
						Float tmp24 = (angDrag * cur->angvel);		HX_STACK_VAR(tmp24,"tmp24");
						HX_STACK_LINE(5166)
						Float tmp25 = (torque * dt);		HX_STACK_VAR(tmp25,"tmp25");
						HX_STACK_LINE(5166)
						Float tmp26 = cur->iinertia;		HX_STACK_VAR(tmp26,"tmp26");
						HX_STACK_LINE(5166)
						Float tmp27 = (tmp25 * tmp26);		HX_STACK_VAR(tmp27,"tmp27");
						HX_STACK_LINE(5166)
						Float tmp28 = (tmp24 + tmp27);		HX_STACK_VAR(tmp28,"tmp28");
						HX_STACK_LINE(5166)
						cur->angvel = tmp28;
					}
					HX_STACK_LINE(5168)
					pre = cx_ite;
				}
				HX_STACK_LINE(5170)
				cx_ite = cx_ite->next;
			}
		}
	}
return null();
}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Space_obj,updateVel,(void))

Void ZPP_Space_obj::updatePos( Float dt){
{
		HX_STACK_FRAME("zpp_nape.space.ZPP_Space","updatePos",0x08bb78d5,"zpp_nape.space.ZPP_Space.updatePos","zpp_nape/space/Space.hx",5174,0x2b65ed03)
		HX_STACK_THIS(this)
		HX_STACK_ARG(dt,"dt")
		HX_STACK_LINE(5175)
		Float tmp = ::Math_obj::PI;		HX_STACK_VAR(tmp,"tmp");
		HX_STACK_LINE(5175)
		Float tmp1 = ((int)2 * tmp);		HX_STACK_VAR(tmp1,"tmp1");
		HX_STACK_LINE(5175)
		Float tmp2 = dt;		HX_STACK_VAR(tmp2,"tmp2");
		HX_STACK_LINE(5175)
		Float tmp3 = (Float(tmp1) / Float(tmp2));		HX_STACK_VAR(tmp3,"tmp3");
		HX_STACK_LINE(5175)
		Float MAX_VEL = tmp3;		HX_STACK_VAR(MAX_VEL,"MAX_VEL");
		HX_STACK_LINE(5177)
		{
			HX_STACK_LINE(5178)
			::zpp_nape::util::ZNPList_ZPP_Body tmp4 = this->live;		HX_STACK_VAR(tmp4,"tmp4");
			HX_STACK_LINE(5178)
			::zpp_nape::util::ZNPNode_ZPP_Body cx_ite = tmp4->head;		HX_STACK_VAR(cx_ite,"cx_ite");
			HX_STACK_LINE(5179)
			while((true)){
				HX_STACK_LINE(5179)
				bool tmp5 = (cx_ite != null());		HX_STACK_VAR(tmp5,"tmp5");
				HX_STACK_LINE(5179)
				bool tmp6 = !(tmp5);		HX_STACK_VAR(tmp6,"tmp6");
				HX_STACK_LINE(5179)
				if ((tmp6)){
					HX_STACK_LINE(5179)
					break;
				}
				HX_STACK_LINE(5180)
				::zpp_nape::phys::ZPP_Body cur = cx_ite->elt;		HX_STACK_VAR(cur,"cur");
				HX_STACK_LINE(5181)
				{
					HX_STACK_LINE(5182)
					{
						HX_STACK_LINE(5183)
						cur->pre_posx = cur->posx;
						HX_STACK_LINE(5184)
						cur->pre_posy = cur->posy;
						HX_STACK_LINE(5193)
						{
						}
					}
					HX_STACK_LINE(5202)
					cur->pre_rot = cur->rot;
					HX_STACK_LINE(5203)
					cur->sweepTime = (int)0;
					HX_STACK_LINE(5204)
					Float tmp7 = hx::Mod(cur->angvel,MAX_VEL);		HX_STACK_VAR(tmp7,"tmp7");
					HX_STACK_LINE(5204)
					cur->sweep_angvel = tmp7;
					HX_STACK_LINE(5205)
					{
						HX_STACK_LINE(5205)
						Float tmp8 = (dt - cur->sweepTime);		HX_STACK_VAR(tmp8,"tmp8");
						HX_STACK_LINE(5205)
						Float delta = tmp8;		HX_STACK_VAR(delta,"delta");
						HX_STACK_LINE(5205)
						bool tmp9 = (delta != (int)0);		HX_STACK_VAR(tmp9,"tmp9");
						HX_STACK_LINE(5205)
						if ((tmp9)){
							HX_STACK_LINE(5205)
							cur->sweepTime = dt;
							HX_STACK_LINE(5205)
							{
								HX_STACK_LINE(5205)
								Float t = delta;		HX_STACK_VAR(t,"t");
								HX_STACK_LINE(5205)
								Float tmp10 = (cur->velx * t);		HX_STACK_VAR(tmp10,"tmp10");
								HX_STACK_LINE(5205)
								hx::AddEq(cur->posx,tmp10);
								HX_STACK_LINE(5205)
								Float tmp11 = (cur->vely * t);		HX_STACK_VAR(tmp11,"tmp11");
								HX_STACK_LINE(5205)
								hx::AddEq(cur->posy,tmp11);
							}
							HX_STACK_LINE(5205)
							bool tmp10 = (cur->angvel != (int)0);		HX_STACK_VAR(tmp10,"tmp10");
							HX_STACK_LINE(5205)
							if ((tmp10)){
								HX_STACK_LINE(5205)
								Float tmp11 = (cur->sweep_angvel * delta);		HX_STACK_VAR(tmp11,"tmp11");
								HX_STACK_LINE(5205)
								Float dr = tmp11;		HX_STACK_VAR(dr,"dr");
								HX_STACK_LINE(5205)
								hx::AddEq(cur->rot,dr);
								HX_STACK_LINE(5205)
								Float tmp12 = (dr * dr);		HX_STACK_VAR(tmp12,"tmp12");
								HX_STACK_LINE(5205)
								bool tmp13 = (tmp12 > ((Float)0.0001));		HX_STACK_VAR(tmp13,"tmp13");
								HX_STACK_LINE(5205)
								if ((tmp13)){
									HX_STACK_LINE(5205)
									Float tmp14 = cur->rot;		HX_STACK_VAR(tmp14,"tmp14");
									HX_STACK_LINE(5205)
									Float tmp15 = ::Math_obj::sin(tmp14);		HX_STACK_VAR(tmp15,"tmp15");
									HX_STACK_LINE(5205)
									cur->axisx = tmp15;
									HX_STACK_LINE(5205)
									Float tmp16 = cur->rot;		HX_STACK_VAR(tmp16,"tmp16");
									HX_STACK_LINE(5205)
									Float tmp17 = ::Math_obj::cos(tmp16);		HX_STACK_VAR(tmp17,"tmp17");
									HX_STACK_LINE(5205)
									cur->axisy = tmp17;
									HX_STACK_LINE(5205)
									Dynamic();
								}
								else{
									HX_STACK_LINE(5205)
									Float tmp14 = (dr * dr);		HX_STACK_VAR(tmp14,"tmp14");
									HX_STACK_LINE(5205)
									Float d2 = tmp14;		HX_STACK_VAR(d2,"d2");
									HX_STACK_LINE(5205)
									Float tmp15 = (((Float)0.5) * d2);		HX_STACK_VAR(tmp15,"tmp15");
									HX_STACK_LINE(5205)
									Float tmp16 = ((int)1 - tmp15);		HX_STACK_VAR(tmp16,"tmp16");
									HX_STACK_LINE(5205)
									Float p = tmp16;		HX_STACK_VAR(p,"p");
									HX_STACK_LINE(5205)
									Float tmp17 = (d2 * d2);		HX_STACK_VAR(tmp17,"tmp17");
									HX_STACK_LINE(5205)
									Float tmp18 = (Float(tmp17) / Float((int)8));		HX_STACK_VAR(tmp18,"tmp18");
									HX_STACK_LINE(5205)
									Float tmp19 = ((int)1 - tmp18);		HX_STACK_VAR(tmp19,"tmp19");
									HX_STACK_LINE(5205)
									Float m = tmp19;		HX_STACK_VAR(m,"m");
									HX_STACK_LINE(5205)
									Float tmp20 = (p * cur->axisx);		HX_STACK_VAR(tmp20,"tmp20");
									HX_STACK_LINE(5205)
									Float tmp21 = (dr * cur->axisy);		HX_STACK_VAR(tmp21,"tmp21");
									HX_STACK_LINE(5205)
									Float tmp22 = (tmp20 + tmp21);		HX_STACK_VAR(tmp22,"tmp22");
									HX_STACK_LINE(5205)
									Float tmp23 = m;		HX_STACK_VAR(tmp23,"tmp23");
									HX_STACK_LINE(5205)
									Float tmp24 = (tmp22 * tmp23);		HX_STACK_VAR(tmp24,"tmp24");
									HX_STACK_LINE(5205)
									Float nx = tmp24;		HX_STACK_VAR(nx,"nx");
									HX_STACK_LINE(5205)
									Float tmp25 = (p * cur->axisy);		HX_STACK_VAR(tmp25,"tmp25");
									HX_STACK_LINE(5205)
									Float tmp26 = (dr * cur->axisx);		HX_STACK_VAR(tmp26,"tmp26");
									HX_STACK_LINE(5205)
									Float tmp27 = (tmp25 - tmp26);		HX_STACK_VAR(tmp27,"tmp27");
									HX_STACK_LINE(5205)
									Float tmp28 = m;		HX_STACK_VAR(tmp28,"tmp28");
									HX_STACK_LINE(5205)
									Float tmp29 = (tmp27 * tmp28);		HX_STACK_VAR(tmp29,"tmp29");
									HX_STACK_LINE(5205)
									cur->axisy = tmp29;
									HX_STACK_LINE(5205)
									cur->axisx = nx;
								}
							}
						}
					}
					HX_STACK_LINE(5206)
					bool tmp8 = cur->disableCCD;		HX_STACK_VAR(tmp8,"tmp8");
					HX_STACK_LINE(5206)
					bool tmp9 = !(tmp8);		HX_STACK_VAR(tmp9,"tmp9");
					HX_STACK_LINE(5206)
					if ((tmp9)){
						HX_STACK_LINE(5207)
						Float tmp10 = ::nape::Config_obj::staticCCDLinearThreshold;		HX_STACK_VAR(tmp10,"tmp10");
						HX_STACK_LINE(5207)
						Float tmp11 = cur->sweepRadius;		HX_STACK_VAR(tmp11,"tmp11");
						HX_STACK_LINE(5207)
						Float tmp12 = (tmp10 * tmp11);		HX_STACK_VAR(tmp12,"tmp12");
						HX_STACK_LINE(5207)
						Float linThreshold = tmp12;		HX_STACK_VAR(linThreshold,"linThreshold");
						HX_STACK_LINE(5208)
						Float tmp13 = ::nape::Config_obj::staticCCDAngularThreshold;		HX_STACK_VAR(tmp13,"tmp13");
						HX_STACK_LINE(5208)
						Float angThreshold = tmp13;		HX_STACK_VAR(angThreshold,"angThreshold");
						HX_STACK_LINE(5209)
						Float tmp14 = (cur->velx * cur->velx);		HX_STACK_VAR(tmp14,"tmp14");
						HX_STACK_LINE(5209)
						Float tmp15 = (cur->vely * cur->vely);		HX_STACK_VAR(tmp15,"tmp15");
						HX_STACK_LINE(5209)
						Float tmp16 = (tmp14 + tmp15);		HX_STACK_VAR(tmp16,"tmp16");
						HX_STACK_LINE(5209)
						Float tmp17 = dt;		HX_STACK_VAR(tmp17,"tmp17");
						HX_STACK_LINE(5209)
						Float tmp18 = (tmp16 * tmp17);		HX_STACK_VAR(tmp18,"tmp18");
						HX_STACK_LINE(5209)
						Float tmp19 = dt;		HX_STACK_VAR(tmp19,"tmp19");
						HX_STACK_LINE(5209)
						Float tmp20 = (tmp18 * tmp19);		HX_STACK_VAR(tmp20,"tmp20");
						HX_STACK_LINE(5209)
						Float tmp21 = (linThreshold * linThreshold);		HX_STACK_VAR(tmp21,"tmp21");
						HX_STACK_LINE(5209)
						bool tmp22 = (tmp20 > tmp21);		HX_STACK_VAR(tmp22,"tmp22");
						HX_STACK_LINE(5209)
						bool tmp23 = !(tmp22);		HX_STACK_VAR(tmp23,"tmp23");
						HX_STACK_LINE(5209)
						bool tmp24 = tmp23;		HX_STACK_VAR(tmp24,"tmp24");
						HX_STACK_LINE(5209)
						bool tmp25;		HX_STACK_VAR(tmp25,"tmp25");
						HX_STACK_LINE(5209)
						if ((tmp24)){
							HX_STACK_LINE(5209)
							Float tmp26 = (cur->angvel * cur->angvel);		HX_STACK_VAR(tmp26,"tmp26");
							HX_STACK_LINE(5209)
							Float tmp27 = tmp26;		HX_STACK_VAR(tmp27,"tmp27");
							HX_STACK_LINE(5209)
							Float tmp28 = tmp27;		HX_STACK_VAR(tmp28,"tmp28");
							HX_STACK_LINE(5209)
							Float tmp29 = dt;		HX_STACK_VAR(tmp29,"tmp29");
							HX_STACK_LINE(5209)
							Float tmp30 = (tmp28 * tmp29);		HX_STACK_VAR(tmp30,"tmp30");
							HX_STACK_LINE(5209)
							Float tmp31 = tmp30;		HX_STACK_VAR(tmp31,"tmp31");
							HX_STACK_LINE(5209)
							Float tmp32 = tmp31;		HX_STACK_VAR(tmp32,"tmp32");
							HX_STACK_LINE(5209)
							Float tmp33 = dt;		HX_STACK_VAR(tmp33,"tmp33");
							HX_STACK_LINE(5209)
							Float tmp34 = (tmp32 * tmp33);		HX_STACK_VAR(tmp34,"tmp34");
							HX_STACK_LINE(5209)
							Float tmp35 = tmp34;		HX_STACK_VAR(tmp35,"tmp35");
							HX_STACK_LINE(5209)
							Float tmp36 = tmp35;		HX_STACK_VAR(tmp36,"tmp36");
							HX_STACK_LINE(5209)
							Float tmp37 = (angThreshold * angThreshold);		HX_STACK_VAR(tmp37,"tmp37");
							HX_STACK_LINE(5209)
							Float tmp38 = tmp37;		HX_STACK_VAR(tmp38,"tmp38");
							HX_STACK_LINE(5209)
							Float tmp39 = tmp38;		HX_STACK_VAR(tmp39,"tmp39");
							HX_STACK_LINE(5209)
							tmp25 = (tmp36 > tmp39);
						}
						else{
							HX_STACK_LINE(5209)
							tmp25 = true;
						}
						HX_STACK_LINE(5209)
						bool tmp26 = !(tmp25);		HX_STACK_VAR(tmp26,"tmp26");
						HX_STACK_LINE(5209)
						bool tmp27;		HX_STACK_VAR(tmp27,"tmp27");
						HX_STACK_LINE(5209)
						if ((tmp26)){
							HX_STACK_LINE(5209)
							int tmp28 = cur->type;		HX_STACK_VAR(tmp28,"tmp28");
							HX_STACK_LINE(5209)
							int tmp29 = ::zpp_nape::util::ZPP_Flags_obj::id_BodyType_KINEMATIC;		HX_STACK_VAR(tmp29,"tmp29");
							HX_STACK_LINE(5209)
							int tmp30 = tmp29;		HX_STACK_VAR(tmp30,"tmp30");
							HX_STACK_LINE(5209)
							tmp27 = (tmp28 == tmp30);
						}
						else{
							HX_STACK_LINE(5209)
							tmp27 = true;
						}
						HX_STACK_LINE(5209)
						if ((tmp27)){
							HX_STACK_LINE(5210)
							Float angvel = cur->sweep_angvel;		HX_STACK_VAR(angvel,"angvel");
							HX_STACK_LINE(5211)
							bool tmp28 = (angvel < (int)0);		HX_STACK_VAR(tmp28,"tmp28");
							HX_STACK_LINE(5211)
							if ((tmp28)){
								HX_STACK_LINE(5211)
								Float tmp29 = angvel;		HX_STACK_VAR(tmp29,"tmp29");
								HX_STACK_LINE(5211)
								Float tmp30 = -(tmp29);		HX_STACK_VAR(tmp30,"tmp30");
								HX_STACK_LINE(5211)
								angvel = tmp30;
							}
							HX_STACK_LINE(5212)
							Float tmp29 = (Float((int)1) / Float(angvel));		HX_STACK_VAR(tmp29,"tmp29");
							HX_STACK_LINE(5212)
							Float iangvel = tmp29;		HX_STACK_VAR(iangvel,"iangvel");
							HX_STACK_LINE(5213)
							{
								HX_STACK_LINE(5214)
								::zpp_nape::util::ZNPNode_ZPP_Shape tmp30 = cur->shapes->head;		HX_STACK_VAR(tmp30,"tmp30");
								HX_STACK_LINE(5214)
								::zpp_nape::util::ZNPNode_ZPP_Shape cx_ite1 = tmp30;		HX_STACK_VAR(cx_ite1,"cx_ite1");
								HX_STACK_LINE(5215)
								while((true)){
									HX_STACK_LINE(5215)
									bool tmp31 = (cx_ite1 != null());		HX_STACK_VAR(tmp31,"tmp31");
									HX_STACK_LINE(5215)
									bool tmp32 = !(tmp31);		HX_STACK_VAR(tmp32,"tmp32");
									HX_STACK_LINE(5215)
									if ((tmp32)){
										HX_STACK_LINE(5215)
										break;
									}
									HX_STACK_LINE(5216)
									::zpp_nape::shape::ZPP_Shape s = cx_ite1->elt;		HX_STACK_VAR(s,"s");
									HX_STACK_LINE(5217)
									{
										HX_STACK_LINE(5218)
										::zpp_nape::geom::ZPP_AABB aabb = s->aabb;		HX_STACK_VAR(aabb,"aabb");
										HX_STACK_LINE(5219)
										Float minx = aabb->minx;		HX_STACK_VAR(minx,"minx");
										HX_STACK_LINE(5220)
										Float miny = aabb->miny;		HX_STACK_VAR(miny,"miny");
										HX_STACK_LINE(5221)
										Float maxx = aabb->maxx;		HX_STACK_VAR(maxx,"maxx");
										HX_STACK_LINE(5222)
										Float maxy = aabb->maxy;		HX_STACK_VAR(maxy,"maxy");
										HX_STACK_LINE(5223)
										Float tmp33 = (angvel * dt);		HX_STACK_VAR(tmp33,"tmp33");
										HX_STACK_LINE(5223)
										Float tmp34 = s->sweepCoef;		HX_STACK_VAR(tmp34,"tmp34");
										HX_STACK_LINE(5223)
										Float tmp35 = (tmp33 * tmp34);		HX_STACK_VAR(tmp35,"tmp35");
										HX_STACK_LINE(5223)
										Float tmp36 = ((Float)0.00833333333333333322);		HX_STACK_VAR(tmp36,"tmp36");
										HX_STACK_LINE(5223)
										Float tmp37 = (tmp35 * tmp36);		HX_STACK_VAR(tmp37,"tmp37");
										HX_STACK_LINE(5223)
										int tmp38 = ::Std_obj::_int(tmp37);		HX_STACK_VAR(tmp38,"tmp38");
										HX_STACK_LINE(5223)
										int count = tmp38;		HX_STACK_VAR(count,"count");
										HX_STACK_LINE(5224)
										bool tmp39 = (count > (int)8);		HX_STACK_VAR(tmp39,"tmp39");
										HX_STACK_LINE(5224)
										if ((tmp39)){
											HX_STACK_LINE(5224)
											count = (int)8;
										}
										HX_STACK_LINE(5225)
										Float tmp40 = (angvel * dt);		HX_STACK_VAR(tmp40,"tmp40");
										HX_STACK_LINE(5225)
										int tmp41 = count;		HX_STACK_VAR(tmp41,"tmp41");
										HX_STACK_LINE(5225)
										Float tmp42 = (Float(tmp40) / Float(tmp41));		HX_STACK_VAR(tmp42,"tmp42");
										HX_STACK_LINE(5225)
										Float anginc = tmp42;		HX_STACK_VAR(anginc,"anginc");
										HX_STACK_LINE(5226)
										{
											HX_STACK_LINE(5226)
											Float tmp43 = (dt - cur->sweepTime);		HX_STACK_VAR(tmp43,"tmp43");
											HX_STACK_LINE(5226)
											Float delta = tmp43;		HX_STACK_VAR(delta,"delta");
											HX_STACK_LINE(5226)
											bool tmp44 = (delta != (int)0);		HX_STACK_VAR(tmp44,"tmp44");
											HX_STACK_LINE(5226)
											if ((tmp44)){
												HX_STACK_LINE(5226)
												cur->sweepTime = dt;
												HX_STACK_LINE(5226)
												{
													HX_STACK_LINE(5226)
													Float t = delta;		HX_STACK_VAR(t,"t");
													HX_STACK_LINE(5226)
													Float tmp45 = (cur->velx * t);		HX_STACK_VAR(tmp45,"tmp45");
													HX_STACK_LINE(5226)
													hx::AddEq(cur->posx,tmp45);
													HX_STACK_LINE(5226)
													Float tmp46 = (cur->vely * t);		HX_STACK_VAR(tmp46,"tmp46");
													HX_STACK_LINE(5226)
													hx::AddEq(cur->posy,tmp46);
												}
												HX_STACK_LINE(5226)
												bool tmp45 = (cur->angvel != (int)0);		HX_STACK_VAR(tmp45,"tmp45");
												HX_STACK_LINE(5226)
												if ((tmp45)){
													HX_STACK_LINE(5226)
													Float tmp46 = (cur->sweep_angvel * delta);		HX_STACK_VAR(tmp46,"tmp46");
													HX_STACK_LINE(5226)
													Float dr = tmp46;		HX_STACK_VAR(dr,"dr");
													HX_STACK_LINE(5226)
													hx::AddEq(cur->rot,dr);
													HX_STACK_LINE(5226)
													Float tmp47 = (dr * dr);		HX_STACK_VAR(tmp47,"tmp47");
													HX_STACK_LINE(5226)
													bool tmp48 = (tmp47 > ((Float)0.0001));		HX_STACK_VAR(tmp48,"tmp48");
													HX_STACK_LINE(5226)
													if ((tmp48)){
														HX_STACK_LINE(5226)
														Float tmp49 = cur->rot;		HX_STACK_VAR(tmp49,"tmp49");
														HX_STACK_LINE(5226)
														Float tmp50 = ::Math_obj::sin(tmp49);		HX_STACK_VAR(tmp50,"tmp50");
														HX_STACK_LINE(5226)
														cur->axisx = tmp50;
														HX_STACK_LINE(5226)
														Float tmp51 = cur->rot;		HX_STACK_VAR(tmp51,"tmp51");
														HX_STACK_LINE(5226)
														Float tmp52 = ::Math_obj::cos(tmp51);		HX_STACK_VAR(tmp52,"tmp52");
														HX_STACK_LINE(5226)
														cur->axisy = tmp52;
														HX_STACK_LINE(5226)
														Dynamic();
													}
													else{
														HX_STACK_LINE(5226)
														Float tmp49 = (dr * dr);		HX_STACK_VAR(tmp49,"tmp49");
														HX_STACK_LINE(5226)
														Float d2 = tmp49;		HX_STACK_VAR(d2,"d2");
														HX_STACK_LINE(5226)
														Float tmp50 = (((Float)0.5) * d2);		HX_STACK_VAR(tmp50,"tmp50");
														HX_STACK_LINE(5226)
														Float tmp51 = ((int)1 - tmp50);		HX_STACK_VAR(tmp51,"tmp51");
														HX_STACK_LINE(5226)
														Float p = tmp51;		HX_STACK_VAR(p,"p");
														HX_STACK_LINE(5226)
														Float tmp52 = (d2 * d2);		HX_STACK_VAR(tmp52,"tmp52");
														HX_STACK_LINE(5226)
														Float tmp53 = (Float(tmp52) / Float((int)8));		HX_STACK_VAR(tmp53,"tmp53");
														HX_STACK_LINE(5226)
														Float tmp54 = ((int)1 - tmp53);		HX_STACK_VAR(tmp54,"tmp54");
														HX_STACK_LINE(5226)
														Float m = tmp54;		HX_STACK_VAR(m,"m");
														HX_STACK_LINE(5226)
														Float tmp55 = (p * cur->axisx);		HX_STACK_VAR(tmp55,"tmp55");
														HX_STACK_LINE(5226)
														Float tmp56 = (dr * cur->axisy);		HX_STACK_VAR(tmp56,"tmp56");
														HX_STACK_LINE(5226)
														Float tmp57 = (tmp55 + tmp56);		HX_STACK_VAR(tmp57,"tmp57");
														HX_STACK_LINE(5226)
														Float tmp58 = m;		HX_STACK_VAR(tmp58,"tmp58");
														HX_STACK_LINE(5226)
														Float tmp59 = (tmp57 * tmp58);		HX_STACK_VAR(tmp59,"tmp59");
														HX_STACK_LINE(5226)
														Float nx = tmp59;		HX_STACK_VAR(nx,"nx");
														HX_STACK_LINE(5226)
														Float tmp60 = (p * cur->axisy);		HX_STACK_VAR(tmp60,"tmp60");
														HX_STACK_LINE(5226)
														Float tmp61 = (dr * cur->axisx);		HX_STACK_VAR(tmp61,"tmp61");
														HX_STACK_LINE(5226)
														Float tmp62 = (tmp60 - tmp61);		HX_STACK_VAR(tmp62,"tmp62");
														HX_STACK_LINE(5226)
														Float tmp63 = m;		HX_STACK_VAR(tmp63,"tmp63");
														HX_STACK_LINE(5226)
														Float tmp64 = (tmp62 * tmp63);		HX_STACK_VAR(tmp64,"tmp64");
														HX_STACK_LINE(5226)
														cur->axisy = tmp64;
														HX_STACK_LINE(5226)
														cur->axisx = nx;
													}
												}
											}
										}
										HX_STACK_LINE(5227)
										{
											HX_STACK_LINE(5227)
											int tmp43 = s->type;		HX_STACK_VAR(tmp43,"tmp43");
											HX_STACK_LINE(5227)
											int tmp44 = ::zpp_nape::util::ZPP_Flags_obj::id_ShapeType_CIRCLE;		HX_STACK_VAR(tmp44,"tmp44");
											HX_STACK_LINE(5227)
											bool tmp45 = (tmp43 == tmp44);		HX_STACK_VAR(tmp45,"tmp45");
											HX_STACK_LINE(5227)
											if ((tmp45)){
												HX_STACK_LINE(5227)
												::zpp_nape::shape::ZPP_Circle _this = s->circle;		HX_STACK_VAR(_this,"_this");
												HX_STACK_LINE(5227)
												{
													HX_STACK_LINE(5227)
													Float tmp46 = _this->body->posx;		HX_STACK_VAR(tmp46,"tmp46");
													HX_STACK_LINE(5227)
													Float tmp47 = _this->body->axisy;		HX_STACK_VAR(tmp47,"tmp47");
													HX_STACK_LINE(5227)
													Float tmp48 = _this->localCOMx;		HX_STACK_VAR(tmp48,"tmp48");
													HX_STACK_LINE(5227)
													Float tmp49 = (tmp47 * tmp48);		HX_STACK_VAR(tmp49,"tmp49");
													HX_STACK_LINE(5227)
													Float tmp50 = _this->body->axisx;		HX_STACK_VAR(tmp50,"tmp50");
													HX_STACK_LINE(5227)
													Float tmp51 = _this->localCOMy;		HX_STACK_VAR(tmp51,"tmp51");
													HX_STACK_LINE(5227)
													Float tmp52 = (tmp50 * tmp51);		HX_STACK_VAR(tmp52,"tmp52");
													HX_STACK_LINE(5227)
													Float tmp53 = (tmp49 - tmp52);		HX_STACK_VAR(tmp53,"tmp53");
													HX_STACK_LINE(5227)
													Float tmp54 = (tmp46 + tmp53);		HX_STACK_VAR(tmp54,"tmp54");
													HX_STACK_LINE(5227)
													_this->worldCOMx = tmp54;
													HX_STACK_LINE(5227)
													Float tmp55 = _this->body->posy;		HX_STACK_VAR(tmp55,"tmp55");
													HX_STACK_LINE(5227)
													Float tmp56 = _this->localCOMx;		HX_STACK_VAR(tmp56,"tmp56");
													HX_STACK_LINE(5227)
													Float tmp57 = _this->body->axisx;		HX_STACK_VAR(tmp57,"tmp57");
													HX_STACK_LINE(5227)
													Float tmp58 = (tmp56 * tmp57);		HX_STACK_VAR(tmp58,"tmp58");
													HX_STACK_LINE(5227)
													Float tmp59 = _this->localCOMy;		HX_STACK_VAR(tmp59,"tmp59");
													HX_STACK_LINE(5227)
													Float tmp60 = _this->body->axisy;		HX_STACK_VAR(tmp60,"tmp60");
													HX_STACK_LINE(5227)
													Float tmp61 = (tmp59 * tmp60);		HX_STACK_VAR(tmp61,"tmp61");
													HX_STACK_LINE(5227)
													Float tmp62 = (tmp58 + tmp61);		HX_STACK_VAR(tmp62,"tmp62");
													HX_STACK_LINE(5227)
													Float tmp63 = (tmp55 + tmp62);		HX_STACK_VAR(tmp63,"tmp63");
													HX_STACK_LINE(5227)
													_this->worldCOMy = tmp63;
												}
												HX_STACK_LINE(5227)
												Float tmp46 = (_this->worldCOMx - _this->radius);		HX_STACK_VAR(tmp46,"tmp46");
												HX_STACK_LINE(5227)
												_this->aabb->minx = tmp46;
												HX_STACK_LINE(5227)
												Float tmp47 = (_this->worldCOMy - _this->radius);		HX_STACK_VAR(tmp47,"tmp47");
												HX_STACK_LINE(5227)
												_this->aabb->miny = tmp47;
												HX_STACK_LINE(5227)
												Float tmp48 = (_this->worldCOMx + _this->radius);		HX_STACK_VAR(tmp48,"tmp48");
												HX_STACK_LINE(5227)
												_this->aabb->maxx = tmp48;
												HX_STACK_LINE(5227)
												Float tmp49 = (_this->worldCOMy + _this->radius);		HX_STACK_VAR(tmp49,"tmp49");
												HX_STACK_LINE(5227)
												_this->aabb->maxy = tmp49;
											}
											else{
												HX_STACK_LINE(5227)
												::zpp_nape::shape::ZPP_Polygon _this = s->polygon;		HX_STACK_VAR(_this,"_this");
												HX_STACK_LINE(5227)
												::zpp_nape::geom::ZPP_Vec2 tmp46 = _this->lverts->next;		HX_STACK_VAR(tmp46,"tmp46");
												HX_STACK_LINE(5227)
												::zpp_nape::geom::ZPP_Vec2 li = tmp46;		HX_STACK_VAR(li,"li");
												HX_STACK_LINE(5227)
												::zpp_nape::geom::ZPP_Vec2 tmp47 = _this->gverts->next;		HX_STACK_VAR(tmp47,"tmp47");
												HX_STACK_LINE(5227)
												::zpp_nape::geom::ZPP_Vec2 p0 = tmp47;		HX_STACK_VAR(p0,"p0");
												HX_STACK_LINE(5227)
												::zpp_nape::geom::ZPP_Vec2 l = li;		HX_STACK_VAR(l,"l");
												HX_STACK_LINE(5227)
												li = li->next;
												HX_STACK_LINE(5227)
												{
													HX_STACK_LINE(5227)
													Float tmp48 = _this->body->posx;		HX_STACK_VAR(tmp48,"tmp48");
													HX_STACK_LINE(5227)
													Float tmp49 = _this->body->axisy;		HX_STACK_VAR(tmp49,"tmp49");
													HX_STACK_LINE(5227)
													Float tmp50 = l->x;		HX_STACK_VAR(tmp50,"tmp50");
													HX_STACK_LINE(5227)
													Float tmp51 = (tmp49 * tmp50);		HX_STACK_VAR(tmp51,"tmp51");
													HX_STACK_LINE(5227)
													Float tmp52 = _this->body->axisx;		HX_STACK_VAR(tmp52,"tmp52");
													HX_STACK_LINE(5227)
													Float tmp53 = l->y;		HX_STACK_VAR(tmp53,"tmp53");
													HX_STACK_LINE(5227)
													Float tmp54 = (tmp52 * tmp53);		HX_STACK_VAR(tmp54,"tmp54");
													HX_STACK_LINE(5227)
													Float tmp55 = (tmp51 - tmp54);		HX_STACK_VAR(tmp55,"tmp55");
													HX_STACK_LINE(5227)
													Float tmp56 = (tmp48 + tmp55);		HX_STACK_VAR(tmp56,"tmp56");
													HX_STACK_LINE(5227)
													p0->x = tmp56;
													HX_STACK_LINE(5227)
													Float tmp57 = _this->body->posy;		HX_STACK_VAR(tmp57,"tmp57");
													HX_STACK_LINE(5227)
													Float tmp58 = l->x;		HX_STACK_VAR(tmp58,"tmp58");
													HX_STACK_LINE(5227)
													Float tmp59 = _this->body->axisx;		HX_STACK_VAR(tmp59,"tmp59");
													HX_STACK_LINE(5227)
													Float tmp60 = (tmp58 * tmp59);		HX_STACK_VAR(tmp60,"tmp60");
													HX_STACK_LINE(5227)
													Float tmp61 = l->y;		HX_STACK_VAR(tmp61,"tmp61");
													HX_STACK_LINE(5227)
													Float tmp62 = _this->body->axisy;		HX_STACK_VAR(tmp62,"tmp62");
													HX_STACK_LINE(5227)
													Float tmp63 = (tmp61 * tmp62);		HX_STACK_VAR(tmp63,"tmp63");
													HX_STACK_LINE(5227)
													Float tmp64 = (tmp60 + tmp63);		HX_STACK_VAR(tmp64,"tmp64");
													HX_STACK_LINE(5227)
													Float tmp65 = (tmp57 + tmp64);		HX_STACK_VAR(tmp65,"tmp65");
													HX_STACK_LINE(5227)
													p0->y = tmp65;
												}
												HX_STACK_LINE(5227)
												{
													HX_STACK_LINE(5227)
													_this->aabb->minx = p0->x;
													HX_STACK_LINE(5227)
													_this->aabb->miny = p0->y;
													HX_STACK_LINE(5227)
													{
													}
												}
												HX_STACK_LINE(5227)
												{
													HX_STACK_LINE(5227)
													_this->aabb->maxx = p0->x;
													HX_STACK_LINE(5227)
													_this->aabb->maxy = p0->y;
													HX_STACK_LINE(5227)
													{
													}
												}
												HX_STACK_LINE(5227)
												{
													HX_STACK_LINE(5227)
													::zpp_nape::geom::ZPP_Vec2 tmp48 = _this->gverts->next;		HX_STACK_VAR(tmp48,"tmp48");
													HX_STACK_LINE(5227)
													::zpp_nape::geom::ZPP_Vec2 cx_ite2 = tmp48->next;		HX_STACK_VAR(cx_ite2,"cx_ite2");
													HX_STACK_LINE(5227)
													while((true)){
														HX_STACK_LINE(5227)
														bool tmp49 = (cx_ite2 != null());		HX_STACK_VAR(tmp49,"tmp49");
														HX_STACK_LINE(5227)
														bool tmp50 = !(tmp49);		HX_STACK_VAR(tmp50,"tmp50");
														HX_STACK_LINE(5227)
														if ((tmp50)){
															HX_STACK_LINE(5227)
															break;
														}
														HX_STACK_LINE(5227)
														::zpp_nape::geom::ZPP_Vec2 p = cx_ite2;		HX_STACK_VAR(p,"p");
														HX_STACK_LINE(5227)
														{
															HX_STACK_LINE(5227)
															::zpp_nape::geom::ZPP_Vec2 l1 = li;		HX_STACK_VAR(l1,"l1");
															HX_STACK_LINE(5227)
															li = li->next;
															HX_STACK_LINE(5227)
															{
																HX_STACK_LINE(5227)
																Float tmp51 = _this->body->posx;		HX_STACK_VAR(tmp51,"tmp51");
																HX_STACK_LINE(5227)
																Float tmp52 = _this->body->axisy;		HX_STACK_VAR(tmp52,"tmp52");
																HX_STACK_LINE(5227)
																Float tmp53 = l1->x;		HX_STACK_VAR(tmp53,"tmp53");
																HX_STACK_LINE(5227)
																Float tmp54 = (tmp52 * tmp53);		HX_STACK_VAR(tmp54,"tmp54");
																HX_STACK_LINE(5227)
																Float tmp55 = _this->body->axisx;		HX_STACK_VAR(tmp55,"tmp55");
																HX_STACK_LINE(5227)
																Float tmp56 = l1->y;		HX_STACK_VAR(tmp56,"tmp56");
																HX_STACK_LINE(5227)
																Float tmp57 = (tmp55 * tmp56);		HX_STACK_VAR(tmp57,"tmp57");
																HX_STACK_LINE(5227)
																Float tmp58 = (tmp54 - tmp57);		HX_STACK_VAR(tmp58,"tmp58");
																HX_STACK_LINE(5227)
																Float tmp59 = (tmp51 + tmp58);		HX_STACK_VAR(tmp59,"tmp59");
																HX_STACK_LINE(5227)
																p->x = tmp59;
																HX_STACK_LINE(5227)
																Float tmp60 = _this->body->posy;		HX_STACK_VAR(tmp60,"tmp60");
																HX_STACK_LINE(5227)
																Float tmp61 = l1->x;		HX_STACK_VAR(tmp61,"tmp61");
																HX_STACK_LINE(5227)
																Float tmp62 = _this->body->axisx;		HX_STACK_VAR(tmp62,"tmp62");
																HX_STACK_LINE(5227)
																Float tmp63 = (tmp61 * tmp62);		HX_STACK_VAR(tmp63,"tmp63");
																HX_STACK_LINE(5227)
																Float tmp64 = l1->y;		HX_STACK_VAR(tmp64,"tmp64");
																HX_STACK_LINE(5227)
																Float tmp65 = _this->body->axisy;		HX_STACK_VAR(tmp65,"tmp65");
																HX_STACK_LINE(5227)
																Float tmp66 = (tmp64 * tmp65);		HX_STACK_VAR(tmp66,"tmp66");
																HX_STACK_LINE(5227)
																Float tmp67 = (tmp63 + tmp66);		HX_STACK_VAR(tmp67,"tmp67");
																HX_STACK_LINE(5227)
																Float tmp68 = (tmp60 + tmp67);		HX_STACK_VAR(tmp68,"tmp68");
																HX_STACK_LINE(5227)
																p->y = tmp68;
															}
															HX_STACK_LINE(5227)
															Float tmp51 = p->x;		HX_STACK_VAR(tmp51,"tmp51");
															HX_STACK_LINE(5227)
															Float tmp52 = _this->aabb->minx;		HX_STACK_VAR(tmp52,"tmp52");
															HX_STACK_LINE(5227)
															bool tmp53 = (tmp51 < tmp52);		HX_STACK_VAR(tmp53,"tmp53");
															HX_STACK_LINE(5227)
															if ((tmp53)){
																HX_STACK_LINE(5227)
																_this->aabb->minx = p->x;
															}
															HX_STACK_LINE(5227)
															Float tmp54 = p->x;		HX_STACK_VAR(tmp54,"tmp54");
															HX_STACK_LINE(5227)
															Float tmp55 = _this->aabb->maxx;		HX_STACK_VAR(tmp55,"tmp55");
															HX_STACK_LINE(5227)
															bool tmp56 = (tmp54 > tmp55);		HX_STACK_VAR(tmp56,"tmp56");
															HX_STACK_LINE(5227)
															if ((tmp56)){
																HX_STACK_LINE(5227)
																_this->aabb->maxx = p->x;
															}
															HX_STACK_LINE(5227)
															Float tmp57 = p->y;		HX_STACK_VAR(tmp57,"tmp57");
															HX_STACK_LINE(5227)
															Float tmp58 = _this->aabb->miny;		HX_STACK_VAR(tmp58,"tmp58");
															HX_STACK_LINE(5227)
															bool tmp59 = (tmp57 < tmp58);		HX_STACK_VAR(tmp59,"tmp59");
															HX_STACK_LINE(5227)
															if ((tmp59)){
																HX_STACK_LINE(5227)
																_this->aabb->miny = p->y;
															}
															HX_STACK_LINE(5227)
															Float tmp60 = p->y;		HX_STACK_VAR(tmp60,"tmp60");
															HX_STACK_LINE(5227)
															Float tmp61 = _this->aabb->maxy;		HX_STACK_VAR(tmp61,"tmp61");
															HX_STACK_LINE(5227)
															bool tmp62 = (tmp60 > tmp61);		HX_STACK_VAR(tmp62,"tmp62");
															HX_STACK_LINE(5227)
															if ((tmp62)){
																HX_STACK_LINE(5227)
																_this->aabb->maxy = p->y;
															}
														}
														HX_STACK_LINE(5227)
														cx_ite2 = cx_ite2->next;
													}
												}
											}
										}
										HX_STACK_LINE(5228)
										bool tmp43 = (minx < aabb->minx);		HX_STACK_VAR(tmp43,"tmp43");
										HX_STACK_LINE(5228)
										if ((tmp43)){
											HX_STACK_LINE(5228)
											aabb->minx = minx;
										}
										else{
											HX_STACK_LINE(5228)
											minx = aabb->minx;
										}
										HX_STACK_LINE(5229)
										bool tmp44 = (miny < aabb->miny);		HX_STACK_VAR(tmp44,"tmp44");
										HX_STACK_LINE(5229)
										if ((tmp44)){
											HX_STACK_LINE(5229)
											aabb->miny = miny;
										}
										else{
											HX_STACK_LINE(5229)
											miny = aabb->miny;
										}
										HX_STACK_LINE(5230)
										bool tmp45 = (maxx > aabb->maxx);		HX_STACK_VAR(tmp45,"tmp45");
										HX_STACK_LINE(5230)
										if ((tmp45)){
											HX_STACK_LINE(5230)
											aabb->maxx = maxx;
										}
										else{
											HX_STACK_LINE(5230)
											maxx = aabb->maxx;
										}
										HX_STACK_LINE(5231)
										bool tmp46 = (maxy > aabb->maxy);		HX_STACK_VAR(tmp46,"tmp46");
										HX_STACK_LINE(5231)
										if ((tmp46)){
											HX_STACK_LINE(5231)
											aabb->maxy = maxy;
										}
										else{
											HX_STACK_LINE(5231)
											maxy = aabb->maxy;
										}
										HX_STACK_LINE(5232)
										{
											HX_STACK_LINE(5232)
											int _g = (int)1;		HX_STACK_VAR(_g,"_g");
											HX_STACK_LINE(5232)
											while((true)){
												HX_STACK_LINE(5232)
												bool tmp47 = (_g < count);		HX_STACK_VAR(tmp47,"tmp47");
												HX_STACK_LINE(5232)
												bool tmp48 = !(tmp47);		HX_STACK_VAR(tmp48,"tmp48");
												HX_STACK_LINE(5232)
												if ((tmp48)){
													HX_STACK_LINE(5232)
													break;
												}
												HX_STACK_LINE(5232)
												int tmp49 = (_g)++;		HX_STACK_VAR(tmp49,"tmp49");
												HX_STACK_LINE(5232)
												int i = tmp49;		HX_STACK_VAR(i,"i");
												HX_STACK_LINE(5233)
												{
													HX_STACK_LINE(5233)
													Float tmp50 = (anginc * i);		HX_STACK_VAR(tmp50,"tmp50");
													HX_STACK_LINE(5233)
													Float tmp51 = iangvel;		HX_STACK_VAR(tmp51,"tmp51");
													HX_STACK_LINE(5233)
													Float tmp52 = (tmp50 * tmp51);		HX_STACK_VAR(tmp52,"tmp52");
													HX_STACK_LINE(5233)
													Float dt1 = tmp52;		HX_STACK_VAR(dt1,"dt1");
													HX_STACK_LINE(5233)
													Float tmp53 = (dt1 - cur->sweepTime);		HX_STACK_VAR(tmp53,"tmp53");
													HX_STACK_LINE(5233)
													Float delta = tmp53;		HX_STACK_VAR(delta,"delta");
													HX_STACK_LINE(5233)
													bool tmp54 = (delta != (int)0);		HX_STACK_VAR(tmp54,"tmp54");
													HX_STACK_LINE(5233)
													if ((tmp54)){
														HX_STACK_LINE(5233)
														cur->sweepTime = dt1;
														HX_STACK_LINE(5233)
														{
															HX_STACK_LINE(5233)
															Float t = delta;		HX_STACK_VAR(t,"t");
															HX_STACK_LINE(5233)
															Float tmp55 = (cur->velx * t);		HX_STACK_VAR(tmp55,"tmp55");
															HX_STACK_LINE(5233)
															hx::AddEq(cur->posx,tmp55);
															HX_STACK_LINE(5233)
															Float tmp56 = (cur->vely * t);		HX_STACK_VAR(tmp56,"tmp56");
															HX_STACK_LINE(5233)
															hx::AddEq(cur->posy,tmp56);
														}
														HX_STACK_LINE(5233)
														bool tmp55 = (cur->angvel != (int)0);		HX_STACK_VAR(tmp55,"tmp55");
														HX_STACK_LINE(5233)
														if ((tmp55)){
															HX_STACK_LINE(5233)
															Float tmp56 = (cur->sweep_angvel * delta);		HX_STACK_VAR(tmp56,"tmp56");
															HX_STACK_LINE(5233)
															Float dr = tmp56;		HX_STACK_VAR(dr,"dr");
															HX_STACK_LINE(5233)
															hx::AddEq(cur->rot,dr);
															HX_STACK_LINE(5233)
															Float tmp57 = (dr * dr);		HX_STACK_VAR(tmp57,"tmp57");
															HX_STACK_LINE(5233)
															bool tmp58 = (tmp57 > ((Float)0.0001));		HX_STACK_VAR(tmp58,"tmp58");
															HX_STACK_LINE(5233)
															if ((tmp58)){
																HX_STACK_LINE(5233)
																Float tmp59 = cur->rot;		HX_STACK_VAR(tmp59,"tmp59");
																HX_STACK_LINE(5233)
																Float tmp60 = ::Math_obj::sin(tmp59);		HX_STACK_VAR(tmp60,"tmp60");
																HX_STACK_LINE(5233)
																cur->axisx = tmp60;
																HX_STACK_LINE(5233)
																Float tmp61 = cur->rot;		HX_STACK_VAR(tmp61,"tmp61");
																HX_STACK_LINE(5233)
																Float tmp62 = ::Math_obj::cos(tmp61);		HX_STACK_VAR(tmp62,"tmp62");
																HX_STACK_LINE(5233)
																cur->axisy = tmp62;
																HX_STACK_LINE(5233)
																Dynamic();
															}
															else{
																HX_STACK_LINE(5233)
																Float tmp59 = (dr * dr);		HX_STACK_VAR(tmp59,"tmp59");
																HX_STACK_LINE(5233)
																Float d2 = tmp59;		HX_STACK_VAR(d2,"d2");
																HX_STACK_LINE(5233)
																Float tmp60 = (((Float)0.5) * d2);		HX_STACK_VAR(tmp60,"tmp60");
																HX_STACK_LINE(5233)
																Float tmp61 = ((int)1 - tmp60);		HX_STACK_VAR(tmp61,"tmp61");
																HX_STACK_LINE(5233)
																Float p = tmp61;		HX_STACK_VAR(p,"p");
																HX_STACK_LINE(5233)
																Float tmp62 = (d2 * d2);		HX_STACK_VAR(tmp62,"tmp62");
																HX_STACK_LINE(5233)
																Float tmp63 = (Float(tmp62) / Float((int)8));		HX_STACK_VAR(tmp63,"tmp63");
																HX_STACK_LINE(5233)
																Float tmp64 = ((int)1 - tmp63);		HX_STACK_VAR(tmp64,"tmp64");
																HX_STACK_LINE(5233)
																Float m = tmp64;		HX_STACK_VAR(m,"m");
																HX_STACK_LINE(5233)
																Float tmp65 = (p * cur->axisx);		HX_STACK_VAR(tmp65,"tmp65");
																HX_STACK_LINE(5233)
																Float tmp66 = (dr * cur->axisy);		HX_STACK_VAR(tmp66,"tmp66");
																HX_STACK_LINE(5233)
																Float tmp67 = (tmp65 + tmp66);		HX_STACK_VAR(tmp67,"tmp67");
																HX_STACK_LINE(5233)
																Float tmp68 = m;		HX_STACK_VAR(tmp68,"tmp68");
																HX_STACK_LINE(5233)
																Float tmp69 = (tmp67 * tmp68);		HX_STACK_VAR(tmp69,"tmp69");
																HX_STACK_LINE(5233)
																Float nx = tmp69;		HX_STACK_VAR(nx,"nx");
																HX_STACK_LINE(5233)
																Float tmp70 = (p * cur->axisy);		HX_STACK_VAR(tmp70,"tmp70");
																HX_STACK_LINE(5233)
																Float tmp71 = (dr * cur->axisx);		HX_STACK_VAR(tmp71,"tmp71");
																HX_STACK_LINE(5233)
																Float tmp72 = (tmp70 - tmp71);		HX_STACK_VAR(tmp72,"tmp72");
																HX_STACK_LINE(5233)
																Float tmp73 = m;		HX_STACK_VAR(tmp73,"tmp73");
																HX_STACK_LINE(5233)
																Float tmp74 = (tmp72 * tmp73);		HX_STACK_VAR(tmp74,"tmp74");
																HX_STACK_LINE(5233)
																cur->axisy = tmp74;
																HX_STACK_LINE(5233)
																cur->axisx = nx;
															}
														}
													}
												}
												HX_STACK_LINE(5234)
												{
													HX_STACK_LINE(5234)
													int tmp50 = s->type;		HX_STACK_VAR(tmp50,"tmp50");
													HX_STACK_LINE(5234)
													int tmp51 = ::zpp_nape::util::ZPP_Flags_obj::id_ShapeType_CIRCLE;		HX_STACK_VAR(tmp51,"tmp51");
													HX_STACK_LINE(5234)
													bool tmp52 = (tmp50 == tmp51);		HX_STACK_VAR(tmp52,"tmp52");
													HX_STACK_LINE(5234)
													if ((tmp52)){
														HX_STACK_LINE(5234)
														::zpp_nape::shape::ZPP_Circle _this = s->circle;		HX_STACK_VAR(_this,"_this");
														HX_STACK_LINE(5234)
														{
															HX_STACK_LINE(5234)
															Float tmp53 = _this->body->posx;		HX_STACK_VAR(tmp53,"tmp53");
															HX_STACK_LINE(5234)
															Float tmp54 = _this->body->axisy;		HX_STACK_VAR(tmp54,"tmp54");
															HX_STACK_LINE(5234)
															Float tmp55 = _this->localCOMx;		HX_STACK_VAR(tmp55,"tmp55");
															HX_STACK_LINE(5234)
															Float tmp56 = (tmp54 * tmp55);		HX_STACK_VAR(tmp56,"tmp56");
															HX_STACK_LINE(5234)
															Float tmp57 = _this->body->axisx;		HX_STACK_VAR(tmp57,"tmp57");
															HX_STACK_LINE(5234)
															Float tmp58 = _this->localCOMy;		HX_STACK_VAR(tmp58,"tmp58");
															HX_STACK_LINE(5234)
															Float tmp59 = (tmp57 * tmp58);		HX_STACK_VAR(tmp59,"tmp59");
															HX_STACK_LINE(5234)
															Float tmp60 = (tmp56 - tmp59);		HX_STACK_VAR(tmp60,"tmp60");
															HX_STACK_LINE(5234)
															Float tmp61 = (tmp53 + tmp60);		HX_STACK_VAR(tmp61,"tmp61");
															HX_STACK_LINE(5234)
															_this->worldCOMx = tmp61;
															HX_STACK_LINE(5234)
															Float tmp62 = _this->body->posy;		HX_STACK_VAR(tmp62,"tmp62");
															HX_STACK_LINE(5234)
															Float tmp63 = _this->localCOMx;		HX_STACK_VAR(tmp63,"tmp63");
															HX_STACK_LINE(5234)
															Float tmp64 = _this->body->axisx;		HX_STACK_VAR(tmp64,"tmp64");
															HX_STACK_LINE(5234)
															Float tmp65 = (tmp63 * tmp64);		HX_STACK_VAR(tmp65,"tmp65");
															HX_STACK_LINE(5234)
															Float tmp66 = _this->localCOMy;		HX_STACK_VAR(tmp66,"tmp66");
															HX_STACK_LINE(5234)
															Float tmp67 = _this->body->axisy;		HX_STACK_VAR(tmp67,"tmp67");
															HX_STACK_LINE(5234)
															Float tmp68 = (tmp66 * tmp67);		HX_STACK_VAR(tmp68,"tmp68");
															HX_STACK_LINE(5234)
															Float tmp69 = (tmp65 + tmp68);		HX_STACK_VAR(tmp69,"tmp69");
															HX_STACK_LINE(5234)
															Float tmp70 = (tmp62 + tmp69);		HX_STACK_VAR(tmp70,"tmp70");
															HX_STACK_LINE(5234)
															_this->worldCOMy = tmp70;
														}
														HX_STACK_LINE(5234)
														Float tmp53 = (_this->worldCOMx - _this->radius);		HX_STACK_VAR(tmp53,"tmp53");
														HX_STACK_LINE(5234)
														_this->aabb->minx = tmp53;
														HX_STACK_LINE(5234)
														Float tmp54 = (_this->worldCOMy - _this->radius);		HX_STACK_VAR(tmp54,"tmp54");
														HX_STACK_LINE(5234)
														_this->aabb->miny = tmp54;
														HX_STACK_LINE(5234)
														Float tmp55 = (_this->worldCOMx + _this->radius);		HX_STACK_VAR(tmp55,"tmp55");
														HX_STACK_LINE(5234)
														_this->aabb->maxx = tmp55;
														HX_STACK_LINE(5234)
														Float tmp56 = (_this->worldCOMy + _this->radius);		HX_STACK_VAR(tmp56,"tmp56");
														HX_STACK_LINE(5234)
														_this->aabb->maxy = tmp56;
													}
													else{
														HX_STACK_LINE(5234)
														::zpp_nape::shape::ZPP_Polygon _this = s->polygon;		HX_STACK_VAR(_this,"_this");
														HX_STACK_LINE(5234)
														::zpp_nape::geom::ZPP_Vec2 tmp53 = _this->lverts->next;		HX_STACK_VAR(tmp53,"tmp53");
														HX_STACK_LINE(5234)
														::zpp_nape::geom::ZPP_Vec2 li = tmp53;		HX_STACK_VAR(li,"li");
														HX_STACK_LINE(5234)
														::zpp_nape::geom::ZPP_Vec2 tmp54 = _this->gverts->next;		HX_STACK_VAR(tmp54,"tmp54");
														HX_STACK_LINE(5234)
														::zpp_nape::geom::ZPP_Vec2 p0 = tmp54;		HX_STACK_VAR(p0,"p0");
														HX_STACK_LINE(5234)
														::zpp_nape::geom::ZPP_Vec2 l = li;		HX_STACK_VAR(l,"l");
														HX_STACK_LINE(5234)
														li = li->next;
														HX_STACK_LINE(5234)
														{
															HX_STACK_LINE(5234)
															Float tmp55 = _this->body->posx;		HX_STACK_VAR(tmp55,"tmp55");
															HX_STACK_LINE(5234)
															Float tmp56 = _this->body->axisy;		HX_STACK_VAR(tmp56,"tmp56");
															HX_STACK_LINE(5234)
															Float tmp57 = l->x;		HX_STACK_VAR(tmp57,"tmp57");
															HX_STACK_LINE(5234)
															Float tmp58 = (tmp56 * tmp57);		HX_STACK_VAR(tmp58,"tmp58");
															HX_STACK_LINE(5234)
															Float tmp59 = _this->body->axisx;		HX_STACK_VAR(tmp59,"tmp59");
															HX_STACK_LINE(5234)
															Float tmp60 = l->y;		HX_STACK_VAR(tmp60,"tmp60");
															HX_STACK_LINE(5234)
															Float tmp61 = (tmp59 * tmp60);		HX_STACK_VAR(tmp61,"tmp61");
															HX_STACK_LINE(5234)
															Float tmp62 = (tmp58 - tmp61);		HX_STACK_VAR(tmp62,"tmp62");
															HX_STACK_LINE(5234)
															Float tmp63 = (tmp55 + tmp62);		HX_STACK_VAR(tmp63,"tmp63");
															HX_STACK_LINE(5234)
															p0->x = tmp63;
															HX_STACK_LINE(5234)
															Float tmp64 = _this->body->posy;		HX_STACK_VAR(tmp64,"tmp64");
															HX_STACK_LINE(5234)
															Float tmp65 = l->x;		HX_STACK_VAR(tmp65,"tmp65");
															HX_STACK_LINE(5234)
															Float tmp66 = _this->body->axisx;		HX_STACK_VAR(tmp66,"tmp66");
															HX_STACK_LINE(5234)
															Float tmp67 = (tmp65 * tmp66);		HX_STACK_VAR(tmp67,"tmp67");
															HX_STACK_LINE(5234)
															Float tmp68 = l->y;		HX_STACK_VAR(tmp68,"tmp68");
															HX_STACK_LINE(5234)
															Float tmp69 = _this->body->axisy;		HX_STACK_VAR(tmp69,"tmp69");
															HX_STACK_LINE(5234)
															Float tmp70 = (tmp68 * tmp69);		HX_STACK_VAR(tmp70,"tmp70");
															HX_STACK_LINE(5234)
															Float tmp71 = (tmp67 + tmp70);		HX_STACK_VAR(tmp71,"tmp71");
															HX_STACK_LINE(5234)
															Float tmp72 = (tmp64 + tmp71);		HX_STACK_VAR(tmp72,"tmp72");
															HX_STACK_LINE(5234)
															p0->y = tmp72;
														}
														HX_STACK_LINE(5234)
														{
															HX_STACK_LINE(5234)
															_this->aabb->minx = p0->x;
															HX_STACK_LINE(5234)
															_this->aabb->miny = p0->y;
															HX_STACK_LINE(5234)
															{
															}
														}
														HX_STACK_LINE(5234)
														{
															HX_STACK_LINE(5234)
															_this->aabb->maxx = p0->x;
															HX_STACK_LINE(5234)
															_this->aabb->maxy = p0->y;
															HX_STACK_LINE(5234)
															{
															}
														}
														HX_STACK_LINE(5234)
														{
															HX_STACK_LINE(5234)
															::zpp_nape::geom::ZPP_Vec2 tmp55 = _this->gverts->next;		HX_STACK_VAR(tmp55,"tmp55");
															HX_STACK_LINE(5234)
															::zpp_nape::geom::ZPP_Vec2 cx_ite2 = tmp55->next;		HX_STACK_VAR(cx_ite2,"cx_ite2");
															HX_STACK_LINE(5234)
															while((true)){
																HX_STACK_LINE(5234)
																bool tmp56 = (cx_ite2 != null());		HX_STACK_VAR(tmp56,"tmp56");
																HX_STACK_LINE(5234)
																bool tmp57 = !(tmp56);		HX_STACK_VAR(tmp57,"tmp57");
																HX_STACK_LINE(5234)
																if ((tmp57)){
																	HX_STACK_LINE(5234)
																	break;
																}
																HX_STACK_LINE(5234)
																::zpp_nape::geom::ZPP_Vec2 p = cx_ite2;		HX_STACK_VAR(p,"p");
																HX_STACK_LINE(5234)
																{
																	HX_STACK_LINE(5234)
																	::zpp_nape::geom::ZPP_Vec2 l1 = li;		HX_STACK_VAR(l1,"l1");
																	HX_STACK_LINE(5234)
																	li = li->next;
																	HX_STACK_LINE(5234)
																	{
																		HX_STACK_LINE(5234)
																		Float tmp58 = _this->body->posx;		HX_STACK_VAR(tmp58,"tmp58");
																		HX_STACK_LINE(5234)
																		Float tmp59 = _this->body->axisy;		HX_STACK_VAR(tmp59,"tmp59");
																		HX_STACK_LINE(5234)
																		Float tmp60 = l1->x;		HX_STACK_VAR(tmp60,"tmp60");
																		HX_STACK_LINE(5234)
																		Float tmp61 = (tmp59 * tmp60);		HX_STACK_VAR(tmp61,"tmp61");
																		HX_STACK_LINE(5234)
																		Float tmp62 = _this->body->axisx;		HX_STACK_VAR(tmp62,"tmp62");
																		HX_STACK_LINE(5234)
																		Float tmp63 = l1->y;		HX_STACK_VAR(tmp63,"tmp63");
																		HX_STACK_LINE(5234)
																		Float tmp64 = (tmp62 * tmp63);		HX_STACK_VAR(tmp64,"tmp64");
																		HX_STACK_LINE(5234)
																		Float tmp65 = (tmp61 - tmp64);		HX_STACK_VAR(tmp65,"tmp65");
																		HX_STACK_LINE(5234)
																		Float tmp66 = (tmp58 + tmp65);		HX_STACK_VAR(tmp66,"tmp66");
																		HX_STACK_LINE(5234)
																		p->x = tmp66;
																		HX_STACK_LINE(5234)
																		Float tmp67 = _this->body->posy;		HX_STACK_VAR(tmp67,"tmp67");
																		HX_STACK_LINE(5234)
																		Float tmp68 = l1->x;		HX_STACK_VAR(tmp68,"tmp68");
																		HX_STACK_LINE(5234)
																		Float tmp69 = _this->body->axisx;		HX_STACK_VAR(tmp69,"tmp69");
																		HX_STACK_LINE(5234)
																		Float tmp70 = (tmp68 * tmp69);		HX_STACK_VAR(tmp70,"tmp70");
																		HX_STACK_LINE(5234)
																		Float tmp71 = l1->y;		HX_STACK_VAR(tmp71,"tmp71");
																		HX_STACK_LINE(5234)
																		Float tmp72 = _this->body->axisy;		HX_STACK_VAR(tmp72,"tmp72");
																		HX_STACK_LINE(5234)
																		Float tmp73 = (tmp71 * tmp72);		HX_STACK_VAR(tmp73,"tmp73");
																		HX_STACK_LINE(5234)
																		Float tmp74 = (tmp70 + tmp73);		HX_STACK_VAR(tmp74,"tmp74");
																		HX_STACK_LINE(5234)
																		Float tmp75 = (tmp67 + tmp74);		HX_STACK_VAR(tmp75,"tmp75");
																		HX_STACK_LINE(5234)
																		p->y = tmp75;
																	}
																	HX_STACK_LINE(5234)
																	Float tmp58 = p->x;		HX_STACK_VAR(tmp58,"tmp58");
																	HX_STACK_LINE(5234)
																	Float tmp59 = _this->aabb->minx;		HX_STACK_VAR(tmp59,"tmp59");
																	HX_STACK_LINE(5234)
																	bool tmp60 = (tmp58 < tmp59);		HX_STACK_VAR(tmp60,"tmp60");
																	HX_STACK_LINE(5234)
																	if ((tmp60)){
																		HX_STACK_LINE(5234)
																		_this->aabb->minx = p->x;
																	}
																	HX_STACK_LINE(5234)
																	Float tmp61 = p->x;		HX_STACK_VAR(tmp61,"tmp61");
																	HX_STACK_LINE(5234)
																	Float tmp62 = _this->aabb->maxx;		HX_STACK_VAR(tmp62,"tmp62");
																	HX_STACK_LINE(5234)
																	bool tmp63 = (tmp61 > tmp62);		HX_STACK_VAR(tmp63,"tmp63");
																	HX_STACK_LINE(5234)
																	if ((tmp63)){
																		HX_STACK_LINE(5234)
																		_this->aabb->maxx = p->x;
																	}
																	HX_STACK_LINE(5234)
																	Float tmp64 = p->y;		HX_STACK_VAR(tmp64,"tmp64");
																	HX_STACK_LINE(5234)
																	Float tmp65 = _this->aabb->miny;		HX_STACK_VAR(tmp65,"tmp65");
																	HX_STACK_LINE(5234)
																	bool tmp66 = (tmp64 < tmp65);		HX_STACK_VAR(tmp66,"tmp66");
																	HX_STACK_LINE(5234)
																	if ((tmp66)){
																		HX_STACK_LINE(5234)
																		_this->aabb->miny = p->y;
																	}
																	HX_STACK_LINE(5234)
																	Float tmp67 = p->y;		HX_STACK_VAR(tmp67,"tmp67");
																	HX_STACK_LINE(5234)
																	Float tmp68 = _this->aabb->maxy;		HX_STACK_VAR(tmp68,"tmp68");
																	HX_STACK_LINE(5234)
																	bool tmp69 = (tmp67 > tmp68);		HX_STACK_VAR(tmp69,"tmp69");
																	HX_STACK_LINE(5234)
																	if ((tmp69)){
																		HX_STACK_LINE(5234)
																		_this->aabb->maxy = p->y;
																	}
																}
																HX_STACK_LINE(5234)
																cx_ite2 = cx_ite2->next;
															}
														}
													}
												}
												HX_STACK_LINE(5235)
												bool tmp50 = (minx < aabb->minx);		HX_STACK_VAR(tmp50,"tmp50");
												HX_STACK_LINE(5235)
												if ((tmp50)){
													HX_STACK_LINE(5235)
													aabb->minx = minx;
												}
												else{
													HX_STACK_LINE(5235)
													minx = aabb->minx;
												}
												HX_STACK_LINE(5236)
												bool tmp51 = (miny < aabb->miny);		HX_STACK_VAR(tmp51,"tmp51");
												HX_STACK_LINE(5236)
												if ((tmp51)){
													HX_STACK_LINE(5236)
													aabb->miny = miny;
												}
												else{
													HX_STACK_LINE(5236)
													miny = aabb->miny;
												}
												HX_STACK_LINE(5237)
												bool tmp52 = (maxx > aabb->maxx);		HX_STACK_VAR(tmp52,"tmp52");
												HX_STACK_LINE(5237)
												if ((tmp52)){
													HX_STACK_LINE(5237)
													aabb->maxx = maxx;
												}
												else{
													HX_STACK_LINE(5237)
													maxx = aabb->maxx;
												}
												HX_STACK_LINE(5238)
												bool tmp53 = (maxy > aabb->maxy);		HX_STACK_VAR(tmp53,"tmp53");
												HX_STACK_LINE(5238)
												if ((tmp53)){
													HX_STACK_LINE(5238)
													aabb->maxy = maxy;
												}
												else{
													HX_STACK_LINE(5238)
													maxy = aabb->maxy;
												}
											}
										}
										HX_STACK_LINE(5240)
										::zpp_nape::space::ZPP_Broadphase tmp47 = this->bphase;		HX_STACK_VAR(tmp47,"tmp47");
										HX_STACK_LINE(5240)
										::zpp_nape::shape::ZPP_Shape tmp48 = s;		HX_STACK_VAR(tmp48,"tmp48");
										HX_STACK_LINE(5240)
										tmp47->sync(tmp48);
									}
									HX_STACK_LINE(5242)
									cx_ite1 = cx_ite1->next;
								}
							}
							HX_STACK_LINE(5245)
							cur->sweepFrozen = false;
							HX_STACK_LINE(5246)
							int tmp30 = cur->type;		HX_STACK_VAR(tmp30,"tmp30");
							HX_STACK_LINE(5246)
							int tmp31 = ::zpp_nape::util::ZPP_Flags_obj::id_BodyType_DYNAMIC;		HX_STACK_VAR(tmp31,"tmp31");
							HX_STACK_LINE(5246)
							bool tmp32 = (tmp30 == tmp31);		HX_STACK_VAR(tmp32,"tmp32");
							HX_STACK_LINE(5246)
							bool tmp33;		HX_STACK_VAR(tmp33,"tmp33");
							HX_STACK_LINE(5246)
							if ((tmp32)){
								HX_STACK_LINE(5246)
								tmp33 = cur->bulletEnabled;
							}
							else{
								HX_STACK_LINE(5246)
								tmp33 = false;
							}
							HX_STACK_LINE(5246)
							if ((tmp33)){
								HX_STACK_LINE(5247)
								Float tmp34 = ::nape::Config_obj::bulletCCDLinearThreshold;		HX_STACK_VAR(tmp34,"tmp34");
								HX_STACK_LINE(5247)
								Float tmp35 = cur->sweepRadius;		HX_STACK_VAR(tmp35,"tmp35");
								HX_STACK_LINE(5247)
								Float tmp36 = (tmp34 * tmp35);		HX_STACK_VAR(tmp36,"tmp36");
								HX_STACK_LINE(5247)
								Float linThreshold2 = tmp36;		HX_STACK_VAR(linThreshold2,"linThreshold2");
								HX_STACK_LINE(5248)
								Float tmp37 = ::nape::Config_obj::bulletCCDAngularThreshold;		HX_STACK_VAR(tmp37,"tmp37");
								HX_STACK_LINE(5248)
								Float angThreshold2 = tmp37;		HX_STACK_VAR(angThreshold2,"angThreshold2");
								HX_STACK_LINE(5249)
								Float tmp38 = (cur->velx * cur->velx);		HX_STACK_VAR(tmp38,"tmp38");
								HX_STACK_LINE(5249)
								Float tmp39 = (cur->vely * cur->vely);		HX_STACK_VAR(tmp39,"tmp39");
								HX_STACK_LINE(5249)
								Float tmp40 = (tmp38 + tmp39);		HX_STACK_VAR(tmp40,"tmp40");
								HX_STACK_LINE(5249)
								Float tmp41 = dt;		HX_STACK_VAR(tmp41,"tmp41");
								HX_STACK_LINE(5249)
								Float tmp42 = (tmp40 * tmp41);		HX_STACK_VAR(tmp42,"tmp42");
								HX_STACK_LINE(5249)
								Float tmp43 = dt;		HX_STACK_VAR(tmp43,"tmp43");
								HX_STACK_LINE(5249)
								Float tmp44 = (tmp42 * tmp43);		HX_STACK_VAR(tmp44,"tmp44");
								HX_STACK_LINE(5249)
								Float tmp45 = (linThreshold2 * linThreshold2);		HX_STACK_VAR(tmp45,"tmp45");
								HX_STACK_LINE(5249)
								bool tmp46 = (tmp44 > tmp45);		HX_STACK_VAR(tmp46,"tmp46");
								HX_STACK_LINE(5249)
								bool tmp47 = !(tmp46);		HX_STACK_VAR(tmp47,"tmp47");
								HX_STACK_LINE(5249)
								bool tmp48;		HX_STACK_VAR(tmp48,"tmp48");
								HX_STACK_LINE(5249)
								if ((tmp47)){
									HX_STACK_LINE(5249)
									Float tmp49 = (cur->angvel * cur->angvel);		HX_STACK_VAR(tmp49,"tmp49");
									HX_STACK_LINE(5249)
									Float tmp50 = tmp49;		HX_STACK_VAR(tmp50,"tmp50");
									HX_STACK_LINE(5249)
									Float tmp51 = dt;		HX_STACK_VAR(tmp51,"tmp51");
									HX_STACK_LINE(5249)
									Float tmp52 = (tmp50 * tmp51);		HX_STACK_VAR(tmp52,"tmp52");
									HX_STACK_LINE(5249)
									Float tmp53 = tmp52;		HX_STACK_VAR(tmp53,"tmp53");
									HX_STACK_LINE(5249)
									Float tmp54 = dt;		HX_STACK_VAR(tmp54,"tmp54");
									HX_STACK_LINE(5249)
									Float tmp55 = (tmp53 * tmp54);		HX_STACK_VAR(tmp55,"tmp55");
									HX_STACK_LINE(5249)
									Float tmp56 = tmp55;		HX_STACK_VAR(tmp56,"tmp56");
									HX_STACK_LINE(5249)
									Float tmp57 = (angThreshold2 * angThreshold2);		HX_STACK_VAR(tmp57,"tmp57");
									HX_STACK_LINE(5249)
									Float tmp58 = tmp57;		HX_STACK_VAR(tmp58,"tmp58");
									HX_STACK_LINE(5249)
									tmp48 = (tmp56 > tmp58);
								}
								else{
									HX_STACK_LINE(5249)
									tmp48 = true;
								}
								HX_STACK_LINE(5249)
								if ((tmp48)){
									HX_STACK_LINE(5250)
									cur->bullet = true;
								}
							}
						}
						else{
							HX_STACK_LINE(5255)
							cur->sweepFrozen = true;
							HX_STACK_LINE(5256)
							cur->bullet = false;
						}
					}
					else{
						HX_STACK_LINE(5260)
						cur->sweepFrozen = true;
						HX_STACK_LINE(5261)
						cur->bullet = false;
					}
				}
				HX_STACK_LINE(5264)
				cx_ite = cx_ite->next;
			}
		}
		HX_STACK_LINE(5269)
		{
			HX_STACK_LINE(5270)
			::zpp_nape::util::ZNPList_ZPP_Body tmp4 = this->kinematics;		HX_STACK_VAR(tmp4,"tmp4");
			HX_STACK_LINE(5270)
			::zpp_nape::util::ZNPNode_ZPP_Body cx_ite = tmp4->head;		HX_STACK_VAR(cx_ite,"cx_ite");
			HX_STACK_LINE(5271)
			while((true)){
				HX_STACK_LINE(5271)
				bool tmp5 = (cx_ite != null());		HX_STACK_VAR(tmp5,"tmp5");
				HX_STACK_LINE(5271)
				bool tmp6 = !(tmp5);		HX_STACK_VAR(tmp6,"tmp6");
				HX_STACK_LINE(5271)
				if ((tmp6)){
					HX_STACK_LINE(5271)
					break;
				}
				HX_STACK_LINE(5272)
				::zpp_nape::phys::ZPP_Body cur = cx_ite->elt;		HX_STACK_VAR(cur,"cur");
				HX_STACK_LINE(5273)
				{
					HX_STACK_LINE(5274)
					{
						HX_STACK_LINE(5275)
						cur->pre_posx = cur->posx;
						HX_STACK_LINE(5276)
						cur->pre_posy = cur->posy;
						HX_STACK_LINE(5285)
						{
						}
					}
					HX_STACK_LINE(5294)
					cur->pre_rot = cur->rot;
					HX_STACK_LINE(5295)
					cur->sweepTime = (int)0;
					HX_STACK_LINE(5296)
					Float tmp7 = hx::Mod(cur->angvel,MAX_VEL);		HX_STACK_VAR(tmp7,"tmp7");
					HX_STACK_LINE(5296)
					cur->sweep_angvel = tmp7;
					HX_STACK_LINE(5297)
					{
						HX_STACK_LINE(5297)
						Float tmp8 = (dt - cur->sweepTime);		HX_STACK_VAR(tmp8,"tmp8");
						HX_STACK_LINE(5297)
						Float delta = tmp8;		HX_STACK_VAR(delta,"delta");
						HX_STACK_LINE(5297)
						bool tmp9 = (delta != (int)0);		HX_STACK_VAR(tmp9,"tmp9");
						HX_STACK_LINE(5297)
						if ((tmp9)){
							HX_STACK_LINE(5297)
							cur->sweepTime = dt;
							HX_STACK_LINE(5297)
							{
								HX_STACK_LINE(5297)
								Float t = delta;		HX_STACK_VAR(t,"t");
								HX_STACK_LINE(5297)
								Float tmp10 = (cur->velx * t);		HX_STACK_VAR(tmp10,"tmp10");
								HX_STACK_LINE(5297)
								hx::AddEq(cur->posx,tmp10);
								HX_STACK_LINE(5297)
								Float tmp11 = (cur->vely * t);		HX_STACK_VAR(tmp11,"tmp11");
								HX_STACK_LINE(5297)
								hx::AddEq(cur->posy,tmp11);
							}
							HX_STACK_LINE(5297)
							bool tmp10 = (cur->angvel != (int)0);		HX_STACK_VAR(tmp10,"tmp10");
							HX_STACK_LINE(5297)
							if ((tmp10)){
								HX_STACK_LINE(5297)
								Float tmp11 = (cur->sweep_angvel * delta);		HX_STACK_VAR(tmp11,"tmp11");
								HX_STACK_LINE(5297)
								Float dr = tmp11;		HX_STACK_VAR(dr,"dr");
								HX_STACK_LINE(5297)
								hx::AddEq(cur->rot,dr);
								HX_STACK_LINE(5297)
								Float tmp12 = (dr * dr);		HX_STACK_VAR(tmp12,"tmp12");
								HX_STACK_LINE(5297)
								bool tmp13 = (tmp12 > ((Float)0.0001));		HX_STACK_VAR(tmp13,"tmp13");
								HX_STACK_LINE(5297)
								if ((tmp13)){
									HX_STACK_LINE(5297)
									Float tmp14 = cur->rot;		HX_STACK_VAR(tmp14,"tmp14");
									HX_STACK_LINE(5297)
									Float tmp15 = ::Math_obj::sin(tmp14);		HX_STACK_VAR(tmp15,"tmp15");
									HX_STACK_LINE(5297)
									cur->axisx = tmp15;
									HX_STACK_LINE(5297)
									Float tmp16 = cur->rot;		HX_STACK_VAR(tmp16,"tmp16");
									HX_STACK_LINE(5297)
									Float tmp17 = ::Math_obj::cos(tmp16);		HX_STACK_VAR(tmp17,"tmp17");
									HX_STACK_LINE(5297)
									cur->axisy = tmp17;
									HX_STACK_LINE(5297)
									Dynamic();
								}
								else{
									HX_STACK_LINE(5297)
									Float tmp14 = (dr * dr);		HX_STACK_VAR(tmp14,"tmp14");
									HX_STACK_LINE(5297)
									Float d2 = tmp14;		HX_STACK_VAR(d2,"d2");
									HX_STACK_LINE(5297)
									Float tmp15 = (((Float)0.5) * d2);		HX_STACK_VAR(tmp15,"tmp15");
									HX_STACK_LINE(5297)
									Float tmp16 = ((int)1 - tmp15);		HX_STACK_VAR(tmp16,"tmp16");
									HX_STACK_LINE(5297)
									Float p = tmp16;		HX_STACK_VAR(p,"p");
									HX_STACK_LINE(5297)
									Float tmp17 = (d2 * d2);		HX_STACK_VAR(tmp17,"tmp17");
									HX_STACK_LINE(5297)
									Float tmp18 = (Float(tmp17) / Float((int)8));		HX_STACK_VAR(tmp18,"tmp18");
									HX_STACK_LINE(5297)
									Float tmp19 = ((int)1 - tmp18);		HX_STACK_VAR(tmp19,"tmp19");
									HX_STACK_LINE(5297)
									Float m = tmp19;		HX_STACK_VAR(m,"m");
									HX_STACK_LINE(5297)
									Float tmp20 = (p * cur->axisx);		HX_STACK_VAR(tmp20,"tmp20");
									HX_STACK_LINE(5297)
									Float tmp21 = (dr * cur->axisy);		HX_STACK_VAR(tmp21,"tmp21");
									HX_STACK_LINE(5297)
									Float tmp22 = (tmp20 + tmp21);		HX_STACK_VAR(tmp22,"tmp22");
									HX_STACK_LINE(5297)
									Float tmp23 = m;		HX_STACK_VAR(tmp23,"tmp23");
									HX_STACK_LINE(5297)
									Float tmp24 = (tmp22 * tmp23);		HX_STACK_VAR(tmp24,"tmp24");
									HX_STACK_LINE(5297)
									Float nx = tmp24;		HX_STACK_VAR(nx,"nx");
									HX_STACK_LINE(5297)
									Float tmp25 = (p * cur->axisy);		HX_STACK_VAR(tmp25,"tmp25");
									HX_STACK_LINE(5297)
									Float tmp26 = (dr * cur->axisx);		HX_STACK_VAR(tmp26,"tmp26");
									HX_STACK_LINE(5297)
									Float tmp27 = (tmp25 - tmp26);		HX_STACK_VAR(tmp27,"tmp27");
									HX_STACK_LINE(5297)
									Float tmp28 = m;		HX_STACK_VAR(tmp28,"tmp28");
									HX_STACK_LINE(5297)
									Float tmp29 = (tmp27 * tmp28);		HX_STACK_VAR(tmp29,"tmp29");
									HX_STACK_LINE(5297)
									cur->axisy = tmp29;
									HX_STACK_LINE(5297)
									cur->axisx = nx;
								}
							}
						}
					}
					HX_STACK_LINE(5298)
					bool tmp8 = cur->disableCCD;		HX_STACK_VAR(tmp8,"tmp8");
					HX_STACK_LINE(5298)
					bool tmp9 = !(tmp8);		HX_STACK_VAR(tmp9,"tmp9");
					HX_STACK_LINE(5298)
					if ((tmp9)){
						HX_STACK_LINE(5299)
						Float tmp10 = ::nape::Config_obj::staticCCDLinearThreshold;		HX_STACK_VAR(tmp10,"tmp10");
						HX_STACK_LINE(5299)
						Float tmp11 = cur->sweepRadius;		HX_STACK_VAR(tmp11,"tmp11");
						HX_STACK_LINE(5299)
						Float tmp12 = (tmp10 * tmp11);		HX_STACK_VAR(tmp12,"tmp12");
						HX_STACK_LINE(5299)
						Float linThreshold = tmp12;		HX_STACK_VAR(linThreshold,"linThreshold");
						HX_STACK_LINE(5300)
						Float tmp13 = ::nape::Config_obj::staticCCDAngularThreshold;		HX_STACK_VAR(tmp13,"tmp13");
						HX_STACK_LINE(5300)
						Float angThreshold = tmp13;		HX_STACK_VAR(angThreshold,"angThreshold");
						HX_STACK_LINE(5301)
						Float tmp14 = (cur->velx * cur->velx);		HX_STACK_VAR(tmp14,"tmp14");
						HX_STACK_LINE(5301)
						Float tmp15 = (cur->vely * cur->vely);		HX_STACK_VAR(tmp15,"tmp15");
						HX_STACK_LINE(5301)
						Float tmp16 = (tmp14 + tmp15);		HX_STACK_VAR(tmp16,"tmp16");
						HX_STACK_LINE(5301)
						Float tmp17 = dt;		HX_STACK_VAR(tmp17,"tmp17");
						HX_STACK_LINE(5301)
						Float tmp18 = (tmp16 * tmp17);		HX_STACK_VAR(tmp18,"tmp18");
						HX_STACK_LINE(5301)
						Float tmp19 = dt;		HX_STACK_VAR(tmp19,"tmp19");
						HX_STACK_LINE(5301)
						Float tmp20 = (tmp18 * tmp19);		HX_STACK_VAR(tmp20,"tmp20");
						HX_STACK_LINE(5301)
						Float tmp21 = (linThreshold * linThreshold);		HX_STACK_VAR(tmp21,"tmp21");
						HX_STACK_LINE(5301)
						bool tmp22 = (tmp20 > tmp21);		HX_STACK_VAR(tmp22,"tmp22");
						HX_STACK_LINE(5301)
						bool tmp23 = !(tmp22);		HX_STACK_VAR(tmp23,"tmp23");
						HX_STACK_LINE(5301)
						bool tmp24 = tmp23;		HX_STACK_VAR(tmp24,"tmp24");
						HX_STACK_LINE(5301)
						bool tmp25;		HX_STACK_VAR(tmp25,"tmp25");
						HX_STACK_LINE(5301)
						if ((tmp24)){
							HX_STACK_LINE(5301)
							Float tmp26 = (cur->angvel * cur->angvel);		HX_STACK_VAR(tmp26,"tmp26");
							HX_STACK_LINE(5301)
							Float tmp27 = tmp26;		HX_STACK_VAR(tmp27,"tmp27");
							HX_STACK_LINE(5301)
							Float tmp28 = tmp27;		HX_STACK_VAR(tmp28,"tmp28");
							HX_STACK_LINE(5301)
							Float tmp29 = dt;		HX_STACK_VAR(tmp29,"tmp29");
							HX_STACK_LINE(5301)
							Float tmp30 = (tmp28 * tmp29);		HX_STACK_VAR(tmp30,"tmp30");
							HX_STACK_LINE(5301)
							Float tmp31 = tmp30;		HX_STACK_VAR(tmp31,"tmp31");
							HX_STACK_LINE(5301)
							Float tmp32 = tmp31;		HX_STACK_VAR(tmp32,"tmp32");
							HX_STACK_LINE(5301)
							Float tmp33 = dt;		HX_STACK_VAR(tmp33,"tmp33");
							HX_STACK_LINE(5301)
							Float tmp34 = (tmp32 * tmp33);		HX_STACK_VAR(tmp34,"tmp34");
							HX_STACK_LINE(5301)
							Float tmp35 = tmp34;		HX_STACK_VAR(tmp35,"tmp35");
							HX_STACK_LINE(5301)
							Float tmp36 = tmp35;		HX_STACK_VAR(tmp36,"tmp36");
							HX_STACK_LINE(5301)
							Float tmp37 = (angThreshold * angThreshold);		HX_STACK_VAR(tmp37,"tmp37");
							HX_STACK_LINE(5301)
							Float tmp38 = tmp37;		HX_STACK_VAR(tmp38,"tmp38");
							HX_STACK_LINE(5301)
							Float tmp39 = tmp38;		HX_STACK_VAR(tmp39,"tmp39");
							HX_STACK_LINE(5301)
							tmp25 = (tmp36 > tmp39);
						}
						else{
							HX_STACK_LINE(5301)
							tmp25 = true;
						}
						HX_STACK_LINE(5301)
						bool tmp26 = !(tmp25);		HX_STACK_VAR(tmp26,"tmp26");
						HX_STACK_LINE(5301)
						bool tmp27;		HX_STACK_VAR(tmp27,"tmp27");
						HX_STACK_LINE(5301)
						if ((tmp26)){
							HX_STACK_LINE(5301)
							int tmp28 = cur->type;		HX_STACK_VAR(tmp28,"tmp28");
							HX_STACK_LINE(5301)
							int tmp29 = ::zpp_nape::util::ZPP_Flags_obj::id_BodyType_KINEMATIC;		HX_STACK_VAR(tmp29,"tmp29");
							HX_STACK_LINE(5301)
							int tmp30 = tmp29;		HX_STACK_VAR(tmp30,"tmp30");
							HX_STACK_LINE(5301)
							tmp27 = (tmp28 == tmp30);
						}
						else{
							HX_STACK_LINE(5301)
							tmp27 = true;
						}
						HX_STACK_LINE(5301)
						if ((tmp27)){
							HX_STACK_LINE(5302)
							Float angvel = cur->sweep_angvel;		HX_STACK_VAR(angvel,"angvel");
							HX_STACK_LINE(5303)
							bool tmp28 = (angvel < (int)0);		HX_STACK_VAR(tmp28,"tmp28");
							HX_STACK_LINE(5303)
							if ((tmp28)){
								HX_STACK_LINE(5303)
								Float tmp29 = angvel;		HX_STACK_VAR(tmp29,"tmp29");
								HX_STACK_LINE(5303)
								Float tmp30 = -(tmp29);		HX_STACK_VAR(tmp30,"tmp30");
								HX_STACK_LINE(5303)
								angvel = tmp30;
							}
							HX_STACK_LINE(5304)
							Float tmp29 = (Float((int)1) / Float(angvel));		HX_STACK_VAR(tmp29,"tmp29");
							HX_STACK_LINE(5304)
							Float iangvel = tmp29;		HX_STACK_VAR(iangvel,"iangvel");
							HX_STACK_LINE(5305)
							{
								HX_STACK_LINE(5306)
								::zpp_nape::util::ZNPNode_ZPP_Shape tmp30 = cur->shapes->head;		HX_STACK_VAR(tmp30,"tmp30");
								HX_STACK_LINE(5306)
								::zpp_nape::util::ZNPNode_ZPP_Shape cx_ite1 = tmp30;		HX_STACK_VAR(cx_ite1,"cx_ite1");
								HX_STACK_LINE(5307)
								while((true)){
									HX_STACK_LINE(5307)
									bool tmp31 = (cx_ite1 != null());		HX_STACK_VAR(tmp31,"tmp31");
									HX_STACK_LINE(5307)
									bool tmp32 = !(tmp31);		HX_STACK_VAR(tmp32,"tmp32");
									HX_STACK_LINE(5307)
									if ((tmp32)){
										HX_STACK_LINE(5307)
										break;
									}
									HX_STACK_LINE(5308)
									::zpp_nape::shape::ZPP_Shape s = cx_ite1->elt;		HX_STACK_VAR(s,"s");
									HX_STACK_LINE(5309)
									{
										HX_STACK_LINE(5310)
										::zpp_nape::geom::ZPP_AABB aabb = s->aabb;		HX_STACK_VAR(aabb,"aabb");
										HX_STACK_LINE(5311)
										Float minx = aabb->minx;		HX_STACK_VAR(minx,"minx");
										HX_STACK_LINE(5312)
										Float miny = aabb->miny;		HX_STACK_VAR(miny,"miny");
										HX_STACK_LINE(5313)
										Float maxx = aabb->maxx;		HX_STACK_VAR(maxx,"maxx");
										HX_STACK_LINE(5314)
										Float maxy = aabb->maxy;		HX_STACK_VAR(maxy,"maxy");
										HX_STACK_LINE(5315)
										Float tmp33 = (angvel * dt);		HX_STACK_VAR(tmp33,"tmp33");
										HX_STACK_LINE(5315)
										Float tmp34 = s->sweepCoef;		HX_STACK_VAR(tmp34,"tmp34");
										HX_STACK_LINE(5315)
										Float tmp35 = (tmp33 * tmp34);		HX_STACK_VAR(tmp35,"tmp35");
										HX_STACK_LINE(5315)
										Float tmp36 = ((Float)0.00833333333333333322);		HX_STACK_VAR(tmp36,"tmp36");
										HX_STACK_LINE(5315)
										Float tmp37 = (tmp35 * tmp36);		HX_STACK_VAR(tmp37,"tmp37");
										HX_STACK_LINE(5315)
										int tmp38 = ::Std_obj::_int(tmp37);		HX_STACK_VAR(tmp38,"tmp38");
										HX_STACK_LINE(5315)
										int count = tmp38;		HX_STACK_VAR(count,"count");
										HX_STACK_LINE(5316)
										bool tmp39 = (count > (int)8);		HX_STACK_VAR(tmp39,"tmp39");
										HX_STACK_LINE(5316)
										if ((tmp39)){
											HX_STACK_LINE(5316)
											count = (int)8;
										}
										HX_STACK_LINE(5317)
										Float tmp40 = (angvel * dt);		HX_STACK_VAR(tmp40,"tmp40");
										HX_STACK_LINE(5317)
										int tmp41 = count;		HX_STACK_VAR(tmp41,"tmp41");
										HX_STACK_LINE(5317)
										Float tmp42 = (Float(tmp40) / Float(tmp41));		HX_STACK_VAR(tmp42,"tmp42");
										HX_STACK_LINE(5317)
										Float anginc = tmp42;		HX_STACK_VAR(anginc,"anginc");
										HX_STACK_LINE(5318)
										{
											HX_STACK_LINE(5318)
											Float tmp43 = (dt - cur->sweepTime);		HX_STACK_VAR(tmp43,"tmp43");
											HX_STACK_LINE(5318)
											Float delta = tmp43;		HX_STACK_VAR(delta,"delta");
											HX_STACK_LINE(5318)
											bool tmp44 = (delta != (int)0);		HX_STACK_VAR(tmp44,"tmp44");
											HX_STACK_LINE(5318)
											if ((tmp44)){
												HX_STACK_LINE(5318)
												cur->sweepTime = dt;
												HX_STACK_LINE(5318)
												{
													HX_STACK_LINE(5318)
													Float t = delta;		HX_STACK_VAR(t,"t");
													HX_STACK_LINE(5318)
													Float tmp45 = (cur->velx * t);		HX_STACK_VAR(tmp45,"tmp45");
													HX_STACK_LINE(5318)
													hx::AddEq(cur->posx,tmp45);
													HX_STACK_LINE(5318)
													Float tmp46 = (cur->vely * t);		HX_STACK_VAR(tmp46,"tmp46");
													HX_STACK_LINE(5318)
													hx::AddEq(cur->posy,tmp46);
												}
												HX_STACK_LINE(5318)
												bool tmp45 = (cur->angvel != (int)0);		HX_STACK_VAR(tmp45,"tmp45");
												HX_STACK_LINE(5318)
												if ((tmp45)){
													HX_STACK_LINE(5318)
													Float tmp46 = (cur->sweep_angvel * delta);		HX_STACK_VAR(tmp46,"tmp46");
													HX_STACK_LINE(5318)
													Float dr = tmp46;		HX_STACK_VAR(dr,"dr");
													HX_STACK_LINE(5318)
													hx::AddEq(cur->rot,dr);
													HX_STACK_LINE(5318)
													Float tmp47 = (dr * dr);		HX_STACK_VAR(tmp47,"tmp47");
													HX_STACK_LINE(5318)
													bool tmp48 = (tmp47 > ((Float)0.0001));		HX_STACK_VAR(tmp48,"tmp48");
													HX_STACK_LINE(5318)
													if ((tmp48)){
														HX_STACK_LINE(5318)
														Float tmp49 = cur->rot;		HX_STACK_VAR(tmp49,"tmp49");
														HX_STACK_LINE(5318)
														Float tmp50 = ::Math_obj::sin(tmp49);		HX_STACK_VAR(tmp50,"tmp50");
														HX_STACK_LINE(5318)
														cur->axisx = tmp50;
														HX_STACK_LINE(5318)
														Float tmp51 = cur->rot;		HX_STACK_VAR(tmp51,"tmp51");
														HX_STACK_LINE(5318)
														Float tmp52 = ::Math_obj::cos(tmp51);		HX_STACK_VAR(tmp52,"tmp52");
														HX_STACK_LINE(5318)
														cur->axisy = tmp52;
														HX_STACK_LINE(5318)
														Dynamic();
													}
													else{
														HX_STACK_LINE(5318)
														Float tmp49 = (dr * dr);		HX_STACK_VAR(tmp49,"tmp49");
														HX_STACK_LINE(5318)
														Float d2 = tmp49;		HX_STACK_VAR(d2,"d2");
														HX_STACK_LINE(5318)
														Float tmp50 = (((Float)0.5) * d2);		HX_STACK_VAR(tmp50,"tmp50");
														HX_STACK_LINE(5318)
														Float tmp51 = ((int)1 - tmp50);		HX_STACK_VAR(tmp51,"tmp51");
														HX_STACK_LINE(5318)
														Float p = tmp51;		HX_STACK_VAR(p,"p");
														HX_STACK_LINE(5318)
														Float tmp52 = (d2 * d2);		HX_STACK_VAR(tmp52,"tmp52");
														HX_STACK_LINE(5318)
														Float tmp53 = (Float(tmp52) / Float((int)8));		HX_STACK_VAR(tmp53,"tmp53");
														HX_STACK_LINE(5318)
														Float tmp54 = ((int)1 - tmp53);		HX_STACK_VAR(tmp54,"tmp54");
														HX_STACK_LINE(5318)
														Float m = tmp54;		HX_STACK_VAR(m,"m");
														HX_STACK_LINE(5318)
														Float tmp55 = (p * cur->axisx);		HX_STACK_VAR(tmp55,"tmp55");
														HX_STACK_LINE(5318)
														Float tmp56 = (dr * cur->axisy);		HX_STACK_VAR(tmp56,"tmp56");
														HX_STACK_LINE(5318)
														Float tmp57 = (tmp55 + tmp56);		HX_STACK_VAR(tmp57,"tmp57");
														HX_STACK_LINE(5318)
														Float tmp58 = m;		HX_STACK_VAR(tmp58,"tmp58");
														HX_STACK_LINE(5318)
														Float tmp59 = (tmp57 * tmp58);		HX_STACK_VAR(tmp59,"tmp59");
														HX_STACK_LINE(5318)
														Float nx = tmp59;		HX_STACK_VAR(nx,"nx");
														HX_STACK_LINE(5318)
														Float tmp60 = (p * cur->axisy);		HX_STACK_VAR(tmp60,"tmp60");
														HX_STACK_LINE(5318)
														Float tmp61 = (dr * cur->axisx);		HX_STACK_VAR(tmp61,"tmp61");
														HX_STACK_LINE(5318)
														Float tmp62 = (tmp60 - tmp61);		HX_STACK_VAR(tmp62,"tmp62");
														HX_STACK_LINE(5318)
														Float tmp63 = m;		HX_STACK_VAR(tmp63,"tmp63");
														HX_STACK_LINE(5318)
														Float tmp64 = (tmp62 * tmp63);		HX_STACK_VAR(tmp64,"tmp64");
														HX_STACK_LINE(5318)
														cur->axisy = tmp64;
														HX_STACK_LINE(5318)
														cur->axisx = nx;
													}
												}
											}
										}
										HX_STACK_LINE(5319)
										{
											HX_STACK_LINE(5319)
											int tmp43 = s->type;		HX_STACK_VAR(tmp43,"tmp43");
											HX_STACK_LINE(5319)
											int tmp44 = ::zpp_nape::util::ZPP_Flags_obj::id_ShapeType_CIRCLE;		HX_STACK_VAR(tmp44,"tmp44");
											HX_STACK_LINE(5319)
											bool tmp45 = (tmp43 == tmp44);		HX_STACK_VAR(tmp45,"tmp45");
											HX_STACK_LINE(5319)
											if ((tmp45)){
												HX_STACK_LINE(5319)
												::zpp_nape::shape::ZPP_Circle _this = s->circle;		HX_STACK_VAR(_this,"_this");
												HX_STACK_LINE(5319)
												{
													HX_STACK_LINE(5319)
													Float tmp46 = _this->body->posx;		HX_STACK_VAR(tmp46,"tmp46");
													HX_STACK_LINE(5319)
													Float tmp47 = _this->body->axisy;		HX_STACK_VAR(tmp47,"tmp47");
													HX_STACK_LINE(5319)
													Float tmp48 = _this->localCOMx;		HX_STACK_VAR(tmp48,"tmp48");
													HX_STACK_LINE(5319)
													Float tmp49 = (tmp47 * tmp48);		HX_STACK_VAR(tmp49,"tmp49");
													HX_STACK_LINE(5319)
													Float tmp50 = _this->body->axisx;		HX_STACK_VAR(tmp50,"tmp50");
													HX_STACK_LINE(5319)
													Float tmp51 = _this->localCOMy;		HX_STACK_VAR(tmp51,"tmp51");
													HX_STACK_LINE(5319)
													Float tmp52 = (tmp50 * tmp51);		HX_STACK_VAR(tmp52,"tmp52");
													HX_STACK_LINE(5319)
													Float tmp53 = (tmp49 - tmp52);		HX_STACK_VAR(tmp53,"tmp53");
													HX_STACK_LINE(5319)
													Float tmp54 = (tmp46 + tmp53);		HX_STACK_VAR(tmp54,"tmp54");
													HX_STACK_LINE(5319)
													_this->worldCOMx = tmp54;
													HX_STACK_LINE(5319)
													Float tmp55 = _this->body->posy;		HX_STACK_VAR(tmp55,"tmp55");
													HX_STACK_LINE(5319)
													Float tmp56 = _this->localCOMx;		HX_STACK_VAR(tmp56,"tmp56");
													HX_STACK_LINE(5319)
													Float tmp57 = _this->body->axisx;		HX_STACK_VAR(tmp57,"tmp57");
													HX_STACK_LINE(5319)
													Float tmp58 = (tmp56 * tmp57);		HX_STACK_VAR(tmp58,"tmp58");
													HX_STACK_LINE(5319)
													Float tmp59 = _this->localCOMy;		HX_STACK_VAR(tmp59,"tmp59");
													HX_STACK_LINE(5319)
													Float tmp60 = _this->body->axisy;		HX_STACK_VAR(tmp60,"tmp60");
													HX_STACK_LINE(5319)
													Float tmp61 = (tmp59 * tmp60);		HX_STACK_VAR(tmp61,"tmp61");
													HX_STACK_LINE(5319)
													Float tmp62 = (tmp58 + tmp61);		HX_STACK_VAR(tmp62,"tmp62");
													HX_STACK_LINE(5319)
													Float tmp63 = (tmp55 + tmp62);		HX_STACK_VAR(tmp63,"tmp63");
													HX_STACK_LINE(5319)
													_this->worldCOMy = tmp63;
												}
												HX_STACK_LINE(5319)
												Float tmp46 = (_this->worldCOMx - _this->radius);		HX_STACK_VAR(tmp46,"tmp46");
												HX_STACK_LINE(5319)
												_this->aabb->minx = tmp46;
												HX_STACK_LINE(5319)
												Float tmp47 = (_this->worldCOMy - _this->radius);		HX_STACK_VAR(tmp47,"tmp47");
												HX_STACK_LINE(5319)
												_this->aabb->miny = tmp47;
												HX_STACK_LINE(5319)
												Float tmp48 = (_this->worldCOMx + _this->radius);		HX_STACK_VAR(tmp48,"tmp48");
												HX_STACK_LINE(5319)
												_this->aabb->maxx = tmp48;
												HX_STACK_LINE(5319)
												Float tmp49 = (_this->worldCOMy + _this->radius);		HX_STACK_VAR(tmp49,"tmp49");
												HX_STACK_LINE(5319)
												_this->aabb->maxy = tmp49;
											}
											else{
												HX_STACK_LINE(5319)
												::zpp_nape::shape::ZPP_Polygon _this = s->polygon;		HX_STACK_VAR(_this,"_this");
												HX_STACK_LINE(5319)
												::zpp_nape::geom::ZPP_Vec2 tmp46 = _this->lverts->next;		HX_STACK_VAR(tmp46,"tmp46");
												HX_STACK_LINE(5319)
												::zpp_nape::geom::ZPP_Vec2 li = tmp46;		HX_STACK_VAR(li,"li");
												HX_STACK_LINE(5319)
												::zpp_nape::geom::ZPP_Vec2 tmp47 = _this->gverts->next;		HX_STACK_VAR(tmp47,"tmp47");
												HX_STACK_LINE(5319)
												::zpp_nape::geom::ZPP_Vec2 p0 = tmp47;		HX_STACK_VAR(p0,"p0");
												HX_STACK_LINE(5319)
												::zpp_nape::geom::ZPP_Vec2 l = li;		HX_STACK_VAR(l,"l");
												HX_STACK_LINE(5319)
												li = li->next;
												HX_STACK_LINE(5319)
												{
													HX_STACK_LINE(5319)
													Float tmp48 = _this->body->posx;		HX_STACK_VAR(tmp48,"tmp48");
													HX_STACK_LINE(5319)
													Float tmp49 = _this->body->axisy;		HX_STACK_VAR(tmp49,"tmp49");
													HX_STACK_LINE(5319)
													Float tmp50 = l->x;		HX_STACK_VAR(tmp50,"tmp50");
													HX_STACK_LINE(5319)
													Float tmp51 = (tmp49 * tmp50);		HX_STACK_VAR(tmp51,"tmp51");
													HX_STACK_LINE(5319)
													Float tmp52 = _this->body->axisx;		HX_STACK_VAR(tmp52,"tmp52");
													HX_STACK_LINE(5319)
													Float tmp53 = l->y;		HX_STACK_VAR(tmp53,"tmp53");
													HX_STACK_LINE(5319)
													Float tmp54 = (tmp52 * tmp53);		HX_STACK_VAR(tmp54,"tmp54");
													HX_STACK_LINE(5319)
													Float tmp55 = (tmp51 - tmp54);		HX_STACK_VAR(tmp55,"tmp55");
													HX_STACK_LINE(5319)
													Float tmp56 = (tmp48 + tmp55);		HX_STACK_VAR(tmp56,"tmp56");
													HX_STACK_LINE(5319)
													p0->x = tmp56;
													HX_STACK_LINE(5319)
													Float tmp57 = _this->body->posy;		HX_STACK_VAR(tmp57,"tmp57");
													HX_STACK_LINE(5319)
													Float tmp58 = l->x;		HX_STACK_VAR(tmp58,"tmp58");
													HX_STACK_LINE(5319)
													Float tmp59 = _this->body->axisx;		HX_STACK_VAR(tmp59,"tmp59");
													HX_STACK_LINE(5319)
													Float tmp60 = (tmp58 * tmp59);		HX_STACK_VAR(tmp60,"tmp60");
													HX_STACK_LINE(5319)
													Float tmp61 = l->y;		HX_STACK_VAR(tmp61,"tmp61");
													HX_STACK_LINE(5319)
													Float tmp62 = _this->body->axisy;		HX_STACK_VAR(tmp62,"tmp62");
													HX_STACK_LINE(5319)
													Float tmp63 = (tmp61 * tmp62);		HX_STACK_VAR(tmp63,"tmp63");
													HX_STACK_LINE(5319)
													Float tmp64 = (tmp60 + tmp63);		HX_STACK_VAR(tmp64,"tmp64");
													HX_STACK_LINE(5319)
													Float tmp65 = (tmp57 + tmp64);		HX_STACK_VAR(tmp65,"tmp65");
													HX_STACK_LINE(5319)
													p0->y = tmp65;
												}
												HX_STACK_LINE(5319)
												{
													HX_STACK_LINE(5319)
													_this->aabb->minx = p0->x;
													HX_STACK_LINE(5319)
													_this->aabb->miny = p0->y;
													HX_STACK_LINE(5319)
													{
													}
												}
												HX_STACK_LINE(5319)
												{
													HX_STACK_LINE(5319)
													_this->aabb->maxx = p0->x;
													HX_STACK_LINE(5319)
													_this->aabb->maxy = p0->y;
													HX_STACK_LINE(5319)
													{
													}
												}
												HX_STACK_LINE(5319)
												{
													HX_STACK_LINE(5319)
													::zpp_nape::geom::ZPP_Vec2 tmp48 = _this->gverts->next;		HX_STACK_VAR(tmp48,"tmp48");
													HX_STACK_LINE(5319)
													::zpp_nape::geom::ZPP_Vec2 cx_ite2 = tmp48->next;		HX_STACK_VAR(cx_ite2,"cx_ite2");
													HX_STACK_LINE(5319)
													while((true)){
														HX_STACK_LINE(5319)
														bool tmp49 = (cx_ite2 != null());		HX_STACK_VAR(tmp49,"tmp49");
														HX_STACK_LINE(5319)
														bool tmp50 = !(tmp49);		HX_STACK_VAR(tmp50,"tmp50");
														HX_STACK_LINE(5319)
														if ((tmp50)){
															HX_STACK_LINE(5319)
															break;
														}
														HX_STACK_LINE(5319)
														::zpp_nape::geom::ZPP_Vec2 p = cx_ite2;		HX_STACK_VAR(p,"p");
														HX_STACK_LINE(5319)
														{
															HX_STACK_LINE(5319)
															::zpp_nape::geom::ZPP_Vec2 l1 = li;		HX_STACK_VAR(l1,"l1");
															HX_STACK_LINE(5319)
															li = li->next;
															HX_STACK_LINE(5319)
															{
																HX_STACK_LINE(5319)
																Float tmp51 = _this->body->posx;		HX_STACK_VAR(tmp51,"tmp51");
																HX_STACK_LINE(5319)
																Float tmp52 = _this->body->axisy;		HX_STACK_VAR(tmp52,"tmp52");
																HX_STACK_LINE(5319)
																Float tmp53 = l1->x;		HX_STACK_VAR(tmp53,"tmp53");
																HX_STACK_LINE(5319)
																Float tmp54 = (tmp52 * tmp53);		HX_STACK_VAR(tmp54,"tmp54");
																HX_STACK_LINE(5319)
																Float tmp55 = _this->body->axisx;		HX_STACK_VAR(tmp55,"tmp55");
																HX_STACK_LINE(5319)
																Float tmp56 = l1->y;		HX_STACK_VAR(tmp56,"tmp56");
																HX_STACK_LINE(5319)
																Float tmp57 = (tmp55 * tmp56);		HX_STACK_VAR(tmp57,"tmp57");
																HX_STACK_LINE(5319)
																Float tmp58 = (tmp54 - tmp57);		HX_STACK_VAR(tmp58,"tmp58");
																HX_STACK_LINE(5319)
																Float tmp59 = (tmp51 + tmp58);		HX_STACK_VAR(tmp59,"tmp59");
																HX_STACK_LINE(5319)
																p->x = tmp59;
																HX_STACK_LINE(5319)
																Float tmp60 = _this->body->posy;		HX_STACK_VAR(tmp60,"tmp60");
																HX_STACK_LINE(5319)
																Float tmp61 = l1->x;		HX_STACK_VAR(tmp61,"tmp61");
																HX_STACK_LINE(5319)
																Float tmp62 = _this->body->axisx;		HX_STACK_VAR(tmp62,"tmp62");
																HX_STACK_LINE(5319)
																Float tmp63 = (tmp61 * tmp62);		HX_STACK_VAR(tmp63,"tmp63");
																HX_STACK_LINE(5319)
																Float tmp64 = l1->y;		HX_STACK_VAR(tmp64,"tmp64");
																HX_STACK_LINE(5319)
																Float tmp65 = _this->body->axisy;		HX_STACK_VAR(tmp65,"tmp65");
																HX_STACK_LINE(5319)
																Float tmp66 = (tmp64 * tmp65);		HX_STACK_VAR(tmp66,"tmp66");
																HX_STACK_LINE(5319)
																Float tmp67 = (tmp63 + tmp66);		HX_STACK_VAR(tmp67,"tmp67");
																HX_STACK_LINE(5319)
																Float tmp68 = (tmp60 + tmp67);		HX_STACK_VAR(tmp68,"tmp68");
																HX_STACK_LINE(5319)
																p->y = tmp68;
															}
															HX_STACK_LINE(5319)
															Float tmp51 = p->x;		HX_STACK_VAR(tmp51,"tmp51");
															HX_STACK_LINE(5319)
															Float tmp52 = _this->aabb->minx;		HX_STACK_VAR(tmp52,"tmp52");
															HX_STACK_LINE(5319)
															bool tmp53 = (tmp51 < tmp52);		HX_STACK_VAR(tmp53,"tmp53");
															HX_STACK_LINE(5319)
															if ((tmp53)){
																HX_STACK_LINE(5319)
																_this->aabb->minx = p->x;
															}
															HX_STACK_LINE(5319)
															Float tmp54 = p->x;		HX_STACK_VAR(tmp54,"tmp54");
															HX_STACK_LINE(5319)
															Float tmp55 = _this->aabb->maxx;		HX_STACK_VAR(tmp55,"tmp55");
															HX_STACK_LINE(5319)
															bool tmp56 = (tmp54 > tmp55);		HX_STACK_VAR(tmp56,"tmp56");
															HX_STACK_LINE(5319)
															if ((tmp56)){
																HX_STACK_LINE(5319)
																_this->aabb->maxx = p->x;
															}
															HX_STACK_LINE(5319)
															Float tmp57 = p->y;		HX_STACK_VAR(tmp57,"tmp57");
															HX_STACK_LINE(5319)
															Float tmp58 = _this->aabb->miny;		HX_STACK_VAR(tmp58,"tmp58");
															HX_STACK_LINE(5319)
															bool tmp59 = (tmp57 < tmp58);		HX_STACK_VAR(tmp59,"tmp59");
															HX_STACK_LINE(5319)
															if ((tmp59)){
																HX_STACK_LINE(5319)
																_this->aabb->miny = p->y;
															}
															HX_STACK_LINE(5319)
															Float tmp60 = p->y;		HX_STACK_VAR(tmp60,"tmp60");
															HX_STACK_LINE(5319)
															Float tmp61 = _this->aabb->maxy;		HX_STACK_VAR(tmp61,"tmp61");
															HX_STACK_LINE(5319)
															bool tmp62 = (tmp60 > tmp61);		HX_STACK_VAR(tmp62,"tmp62");
															HX_STACK_LINE(5319)
															if ((tmp62)){
																HX_STACK_LINE(5319)
																_this->aabb->maxy = p->y;
															}
														}
														HX_STACK_LINE(5319)
														cx_ite2 = cx_ite2->next;
													}
												}
											}
										}
										HX_STACK_LINE(5320)
										bool tmp43 = (minx < aabb->minx);		HX_STACK_VAR(tmp43,"tmp43");
										HX_STACK_LINE(5320)
										if ((tmp43)){
											HX_STACK_LINE(5320)
											aabb->minx = minx;
										}
										else{
											HX_STACK_LINE(5320)
											minx = aabb->minx;
										}
										HX_STACK_LINE(5321)
										bool tmp44 = (miny < aabb->miny);		HX_STACK_VAR(tmp44,"tmp44");
										HX_STACK_LINE(5321)
										if ((tmp44)){
											HX_STACK_LINE(5321)
											aabb->miny = miny;
										}
										else{
											HX_STACK_LINE(5321)
											miny = aabb->miny;
										}
										HX_STACK_LINE(5322)
										bool tmp45 = (maxx > aabb->maxx);		HX_STACK_VAR(tmp45,"tmp45");
										HX_STACK_LINE(5322)
										if ((tmp45)){
											HX_STACK_LINE(5322)
											aabb->maxx = maxx;
										}
										else{
											HX_STACK_LINE(5322)
											maxx = aabb->maxx;
										}
										HX_STACK_LINE(5323)
										bool tmp46 = (maxy > aabb->maxy);		HX_STACK_VAR(tmp46,"tmp46");
										HX_STACK_LINE(5323)
										if ((tmp46)){
											HX_STACK_LINE(5323)
											aabb->maxy = maxy;
										}
										else{
											HX_STACK_LINE(5323)
											maxy = aabb->maxy;
										}
										HX_STACK_LINE(5324)
										{
											HX_STACK_LINE(5324)
											int _g = (int)1;		HX_STACK_VAR(_g,"_g");
											HX_STACK_LINE(5324)
											while((true)){
												HX_STACK_LINE(5324)
												bool tmp47 = (_g < count);		HX_STACK_VAR(tmp47,"tmp47");
												HX_STACK_LINE(5324)
												bool tmp48 = !(tmp47);		HX_STACK_VAR(tmp48,"tmp48");
												HX_STACK_LINE(5324)
												if ((tmp48)){
													HX_STACK_LINE(5324)
													break;
												}
												HX_STACK_LINE(5324)
												int tmp49 = (_g)++;		HX_STACK_VAR(tmp49,"tmp49");
												HX_STACK_LINE(5324)
												int i = tmp49;		HX_STACK_VAR(i,"i");
												HX_STACK_LINE(5325)
												{
													HX_STACK_LINE(5325)
													Float tmp50 = (anginc * i);		HX_STACK_VAR(tmp50,"tmp50");
													HX_STACK_LINE(5325)
													Float tmp51 = iangvel;		HX_STACK_VAR(tmp51,"tmp51");
													HX_STACK_LINE(5325)
													Float tmp52 = (tmp50 * tmp51);		HX_STACK_VAR(tmp52,"tmp52");
													HX_STACK_LINE(5325)
													Float dt1 = tmp52;		HX_STACK_VAR(dt1,"dt1");
													HX_STACK_LINE(5325)
													Float tmp53 = (dt1 - cur->sweepTime);		HX_STACK_VAR(tmp53,"tmp53");
													HX_STACK_LINE(5325)
													Float delta = tmp53;		HX_STACK_VAR(delta,"delta");
													HX_STACK_LINE(5325)
													bool tmp54 = (delta != (int)0);		HX_STACK_VAR(tmp54,"tmp54");
													HX_STACK_LINE(5325)
													if ((tmp54)){
														HX_STACK_LINE(5325)
														cur->sweepTime = dt1;
														HX_STACK_LINE(5325)
														{
															HX_STACK_LINE(5325)
															Float t = delta;		HX_STACK_VAR(t,"t");
															HX_STACK_LINE(5325)
															Float tmp55 = (cur->velx * t);		HX_STACK_VAR(tmp55,"tmp55");
															HX_STACK_LINE(5325)
															hx::AddEq(cur->posx,tmp55);
															HX_STACK_LINE(5325)
															Float tmp56 = (cur->vely * t);		HX_STACK_VAR(tmp56,"tmp56");
															HX_STACK_LINE(5325)
															hx::AddEq(cur->posy,tmp56);
														}
														HX_STACK_LINE(5325)
														bool tmp55 = (cur->angvel != (int)0);		HX_STACK_VAR(tmp55,"tmp55");
														HX_STACK_LINE(5325)
														if ((tmp55)){
															HX_STACK_LINE(5325)
															Float tmp56 = (cur->sweep_angvel * delta);		HX_STACK_VAR(tmp56,"tmp56");
															HX_STACK_LINE(5325)
															Float dr = tmp56;		HX_STACK_VAR(dr,"dr");
															HX_STACK_LINE(5325)
															hx::AddEq(cur->rot,dr);
															HX_STACK_LINE(5325)
															Float tmp57 = (dr * dr);		HX_STACK_VAR(tmp57,"tmp57");
															HX_STACK_LINE(5325)
															bool tmp58 = (tmp57 > ((Float)0.0001));		HX_STACK_VAR(tmp58,"tmp58");
															HX_STACK_LINE(5325)
															if ((tmp58)){
																HX_STACK_LINE(5325)
																Float tmp59 = cur->rot;		HX_STACK_VAR(tmp59,"tmp59");
																HX_STACK_LINE(5325)
																Float tmp60 = ::Math_obj::sin(tmp59);		HX_STACK_VAR(tmp60,"tmp60");
																HX_STACK_LINE(5325)
																cur->axisx = tmp60;
																HX_STACK_LINE(5325)
																Float tmp61 = cur->rot;		HX_STACK_VAR(tmp61,"tmp61");
																HX_STACK_LINE(5325)
																Float tmp62 = ::Math_obj::cos(tmp61);		HX_STACK_VAR(tmp62,"tmp62");
																HX_STACK_LINE(5325)
																cur->axisy = tmp62;
																HX_STACK_LINE(5325)
																Dynamic();
															}
															else{
																HX_STACK_LINE(5325)
																Float tmp59 = (dr * dr);		HX_STACK_VAR(tmp59,"tmp59");
																HX_STACK_LINE(5325)
																Float d2 = tmp59;		HX_STACK_VAR(d2,"d2");
																HX_STACK_LINE(5325)
																Float tmp60 = (((Float)0.5) * d2);		HX_STACK_VAR(tmp60,"tmp60");
																HX_STACK_LINE(5325)
																Float tmp61 = ((int)1 - tmp60);		HX_STACK_VAR(tmp61,"tmp61");
																HX_STACK_LINE(5325)
																Float p = tmp61;		HX_STACK_VAR(p,"p");
																HX_STACK_LINE(5325)
																Float tmp62 = (d2 * d2);		HX_STACK_VAR(tmp62,"tmp62");
																HX_STACK_LINE(5325)
																Float tmp63 = (Float(tmp62) / Float((int)8));		HX_STACK_VAR(tmp63,"tmp63");
																HX_STACK_LINE(5325)
																Float tmp64 = ((int)1 - tmp63);		HX_STACK_VAR(tmp64,"tmp64");
																HX_STACK_LINE(5325)
																Float m = tmp64;		HX_STACK_VAR(m,"m");
																HX_STACK_LINE(5325)
																Float tmp65 = (p * cur->axisx);		HX_STACK_VAR(tmp65,"tmp65");
																HX_STACK_LINE(5325)
																Float tmp66 = (dr * cur->axisy);		HX_STACK_VAR(tmp66,"tmp66");
																HX_STACK_LINE(5325)
																Float tmp67 = (tmp65 + tmp66);		HX_STACK_VAR(tmp67,"tmp67");
																HX_STACK_LINE(5325)
																Float tmp68 = m;		HX_STACK_VAR(tmp68,"tmp68");
																HX_STACK_LINE(5325)
																Float tmp69 = (tmp67 * tmp68);		HX_STACK_VAR(tmp69,"tmp69");
																HX_STACK_LINE(5325)
																Float nx = tmp69;		HX_STACK_VAR(nx,"nx");
																HX_STACK_LINE(5325)
																Float tmp70 = (p * cur->axisy);		HX_STACK_VAR(tmp70,"tmp70");
																HX_STACK_LINE(5325)
																Float tmp71 = (dr * cur->axisx);		HX_STACK_VAR(tmp71,"tmp71");
																HX_STACK_LINE(5325)
																Float tmp72 = (tmp70 - tmp71);		HX_STACK_VAR(tmp72,"tmp72");
																HX_STACK_LINE(5325)
																Float tmp73 = m;		HX_STACK_VAR(tmp73,"tmp73");
																HX_STACK_LINE(5325)
																Float tmp74 = (tmp72 * tmp73);		HX_STACK_VAR(tmp74,"tmp74");
																HX_STACK_LINE(5325)
																cur->axisy = tmp74;
																HX_STACK_LINE(5325)
																cur->axisx = nx;
															}
														}
													}
												}
												HX_STACK_LINE(5326)
												{
													HX_STACK_LINE(5326)
													int tmp50 = s->type;		HX_STACK_VAR(tmp50,"tmp50");
													HX_STACK_LINE(5326)
													int tmp51 = ::zpp_nape::util::ZPP_Flags_obj::id_ShapeType_CIRCLE;		HX_STACK_VAR(tmp51,"tmp51");
													HX_STACK_LINE(5326)
													bool tmp52 = (tmp50 == tmp51);		HX_STACK_VAR(tmp52,"tmp52");
													HX_STACK_LINE(5326)
													if ((tmp52)){
														HX_STACK_LINE(5326)
														::zpp_nape::shape::ZPP_Circle _this = s->circle;		HX_STACK_VAR(_this,"_this");
														HX_STACK_LINE(5326)
														{
															HX_STACK_LINE(5326)
															Float tmp53 = _this->body->posx;		HX_STACK_VAR(tmp53,"tmp53");
															HX_STACK_LINE(5326)
															Float tmp54 = _this->body->axisy;		HX_STACK_VAR(tmp54,"tmp54");
															HX_STACK_LINE(5326)
															Float tmp55 = _this->localCOMx;		HX_STACK_VAR(tmp55,"tmp55");
															HX_STACK_LINE(5326)
															Float tmp56 = (tmp54 * tmp55);		HX_STACK_VAR(tmp56,"tmp56");
															HX_STACK_LINE(5326)
															Float tmp57 = _this->body->axisx;		HX_STACK_VAR(tmp57,"tmp57");
															HX_STACK_LINE(5326)
															Float tmp58 = _this->localCOMy;		HX_STACK_VAR(tmp58,"tmp58");
															HX_STACK_LINE(5326)
															Float tmp59 = (tmp57 * tmp58);		HX_STACK_VAR(tmp59,"tmp59");
															HX_STACK_LINE(5326)
															Float tmp60 = (tmp56 - tmp59);		HX_STACK_VAR(tmp60,"tmp60");
															HX_STACK_LINE(5326)
															Float tmp61 = (tmp53 + tmp60);		HX_STACK_VAR(tmp61,"tmp61");
															HX_STACK_LINE(5326)
															_this->worldCOMx = tmp61;
															HX_STACK_LINE(5326)
															Float tmp62 = _this->body->posy;		HX_STACK_VAR(tmp62,"tmp62");
															HX_STACK_LINE(5326)
															Float tmp63 = _this->localCOMx;		HX_STACK_VAR(tmp63,"tmp63");
															HX_STACK_LINE(5326)
															Float tmp64 = _this->body->axisx;		HX_STACK_VAR(tmp64,"tmp64");
															HX_STACK_LINE(5326)
															Float tmp65 = (tmp63 * tmp64);		HX_STACK_VAR(tmp65,"tmp65");
															HX_STACK_LINE(5326)
															Float tmp66 = _this->localCOMy;		HX_STACK_VAR(tmp66,"tmp66");
															HX_STACK_LINE(5326)
															Float tmp67 = _this->body->axisy;		HX_STACK_VAR(tmp67,"tmp67");
															HX_STACK_LINE(5326)
															Float tmp68 = (tmp66 * tmp67);		HX_STACK_VAR(tmp68,"tmp68");
															HX_STACK_LINE(5326)
															Float tmp69 = (tmp65 + tmp68);		HX_STACK_VAR(tmp69,"tmp69");
															HX_STACK_LINE(5326)
															Float tmp70 = (tmp62 + tmp69);		HX_STACK_VAR(tmp70,"tmp70");
															HX_STACK_LINE(5326)
															_this->worldCOMy = tmp70;
														}
														HX_STACK_LINE(5326)
														Float tmp53 = (_this->worldCOMx - _this->radius);		HX_STACK_VAR(tmp53,"tmp53");
														HX_STACK_LINE(5326)
														_this->aabb->minx = tmp53;
														HX_STACK_LINE(5326)
														Float tmp54 = (_this->worldCOMy - _this->radius);		HX_STACK_VAR(tmp54,"tmp54");
														HX_STACK_LINE(5326)
														_this->aabb->miny = tmp54;
														HX_STACK_LINE(5326)
														Float tmp55 = (_this->worldCOMx + _this->radius);		HX_STACK_VAR(tmp55,"tmp55");
														HX_STACK_LINE(5326)
														_this->aabb->maxx = tmp55;
														HX_STACK_LINE(5326)
														Float tmp56 = (_this->worldCOMy + _this->radius);		HX_STACK_VAR(tmp56,"tmp56");
														HX_STACK_LINE(5326)
														_this->aabb->maxy = tmp56;
													}
													else{
														HX_STACK_LINE(5326)
														::zpp_nape::shape::ZPP_Polygon _this = s->polygon;		HX_STACK_VAR(_this,"_this");
														HX_STACK_LINE(5326)
														::zpp_nape::geom::ZPP_Vec2 tmp53 = _this->lverts->next;		HX_STACK_VAR(tmp53,"tmp53");
														HX_STACK_LINE(5326)
														::zpp_nape::geom::ZPP_Vec2 li = tmp53;		HX_STACK_VAR(li,"li");
														HX_STACK_LINE(5326)
														::zpp_nape::geom::ZPP_Vec2 tmp54 = _this->gverts->next;		HX_STACK_VAR(tmp54,"tmp54");
														HX_STACK_LINE(5326)
														::zpp_nape::geom::ZPP_Vec2 p0 = tmp54;		HX_STACK_VAR(p0,"p0");
														HX_STACK_LINE(5326)
														::zpp_nape::geom::ZPP_Vec2 l = li;		HX_STACK_VAR(l,"l");
														HX_STACK_LINE(5326)
														li = li->next;
														HX_STACK_LINE(5326)
														{
															HX_STACK_LINE(5326)
															Float tmp55 = _this->body->posx;		HX_STACK_VAR(tmp55,"tmp55");
															HX_STACK_LINE(5326)
															Float tmp56 = _this->body->axisy;		HX_STACK_VAR(tmp56,"tmp56");
															HX_STACK_LINE(5326)
															Float tmp57 = l->x;		HX_STACK_VAR(tmp57,"tmp57");
															HX_STACK_LINE(5326)
															Float tmp58 = (tmp56 * tmp57);		HX_STACK_VAR(tmp58,"tmp58");
															HX_STACK_LINE(5326)
															Float tmp59 = _this->body->axisx;		HX_STACK_VAR(tmp59,"tmp59");
															HX_STACK_LINE(5326)
															Float tmp60 = l->y;		HX_STACK_VAR(tmp60,"tmp60");
															HX_STACK_LINE(5326)
															Float tmp61 = (tmp59 * tmp60);		HX_STACK_VAR(tmp61,"tmp61");
															HX_STACK_LINE(5326)
															Float tmp62 = (tmp58 - tmp61);		HX_STACK_VAR(tmp62,"tmp62");
															HX_STACK_LINE(5326)
															Float tmp63 = (tmp55 + tmp62);		HX_STACK_VAR(tmp63,"tmp63");
															HX_STACK_LINE(5326)
															p0->x = tmp63;
															HX_STACK_LINE(5326)
															Float tmp64 = _this->body->posy;		HX_STACK_VAR(tmp64,"tmp64");
															HX_STACK_LINE(5326)
															Float tmp65 = l->x;		HX_STACK_VAR(tmp65,"tmp65");
															HX_STACK_LINE(5326)
															Float tmp66 = _this->body->axisx;		HX_STACK_VAR(tmp66,"tmp66");
															HX_STACK_LINE(5326)
															Float tmp67 = (tmp65 * tmp66);		HX_STACK_VAR(tmp67,"tmp67");
															HX_STACK_LINE(5326)
															Float tmp68 = l->y;		HX_STACK_VAR(tmp68,"tmp68");
															HX_STACK_LINE(5326)
															Float tmp69 = _this->body->axisy;		HX_STACK_VAR(tmp69,"tmp69");
															HX_STACK_LINE(5326)
															Float tmp70 = (tmp68 * tmp69);		HX_STACK_VAR(tmp70,"tmp70");
															HX_STACK_LINE(5326)
															Float tmp71 = (tmp67 + tmp70);		HX_STACK_VAR(tmp71,"tmp71");
															HX_STACK_LINE(5326)
															Float tmp72 = (tmp64 + tmp71);		HX_STACK_VAR(tmp72,"tmp72");
															HX_STACK_LINE(5326)
															p0->y = tmp72;
														}
														HX_STACK_LINE(5326)
														{
															HX_STACK_LINE(5326)
															_this->aabb->minx = p0->x;
															HX_STACK_LINE(5326)
															_this->aabb->miny = p0->y;
															HX_STACK_LINE(5326)
															{
															}
														}
														HX_STACK_LINE(5326)
														{
															HX_STACK_LINE(5326)
															_this->aabb->maxx = p0->x;
															HX_STACK_LINE(5326)
															_this->aabb->maxy = p0->y;
															HX_STACK_LINE(5326)
															{
															}
														}
														HX_STACK_LINE(5326)
														{
															HX_STACK_LINE(5326)
															::zpp_nape::geom::ZPP_Vec2 tmp55 = _this->gverts->next;		HX_STACK_VAR(tmp55,"tmp55");
															HX_STACK_LINE(5326)
															::zpp_nape::geom::ZPP_Vec2 cx_ite2 = tmp55->next;		HX_STACK_VAR(cx_ite2,"cx_ite2");
															HX_STACK_LINE(5326)
															while((true)){
																HX_STACK_LINE(5326)
																bool tmp56 = (cx_ite2 != null());		HX_STACK_VAR(tmp56,"tmp56");
																HX_STACK_LINE(5326)
																bool tmp57 = !(tmp56);		HX_STACK_VAR(tmp57,"tmp57");
																HX_STACK_LINE(5326)
																if ((tmp57)){
																	HX_STACK_LINE(5326)
																	break;
																}
																HX_STACK_LINE(5326)
																::zpp_nape::geom::ZPP_Vec2 p = cx_ite2;		HX_STACK_VAR(p,"p");
																HX_STACK_LINE(5326)
																{
																	HX_STACK_LINE(5326)
																	::zpp_nape::geom::ZPP_Vec2 l1 = li;		HX_STACK_VAR(l1,"l1");
																	HX_STACK_LINE(5326)
																	li = li->next;
																	HX_STACK_LINE(5326)
																	{
																		HX_STACK_LINE(5326)
																		Float tmp58 = _this->body->posx;		HX_STACK_VAR(tmp58,"tmp58");
																		HX_STACK_LINE(5326)
																		Float tmp59 = _this->body->axisy;		HX_STACK_VAR(tmp59,"tmp59");
																		HX_STACK_LINE(5326)
																		Float tmp60 = l1->x;		HX_STACK_VAR(tmp60,"tmp60");
																		HX_STACK_LINE(5326)
																		Float tmp61 = (tmp59 * tmp60);		HX_STACK_VAR(tmp61,"tmp61");
																		HX_STACK_LINE(5326)
																		Float tmp62 = _this->body->axisx;		HX_STACK_VAR(tmp62,"tmp62");
																		HX_STACK_LINE(5326)
																		Float tmp63 = l1->y;		HX_STACK_VAR(tmp63,"tmp63");
																		HX_STACK_LINE(5326)
																		Float tmp64 = (tmp62 * tmp63);		HX_STACK_VAR(tmp64,"tmp64");
																		HX_STACK_LINE(5326)
																		Float tmp65 = (tmp61 - tmp64);		HX_STACK_VAR(tmp65,"tmp65");
																		HX_STACK_LINE(5326)
																		Float tmp66 = (tmp58 + tmp65);		HX_STACK_VAR(tmp66,"tmp66");
																		HX_STACK_LINE(5326)
																		p->x = tmp66;
																		HX_STACK_LINE(5326)
																		Float tmp67 = _this->body->posy;		HX_STACK_VAR(tmp67,"tmp67");
																		HX_STACK_LINE(5326)
																		Float tmp68 = l1->x;		HX_STACK_VAR(tmp68,"tmp68");
																		HX_STACK_LINE(5326)
																		Float tmp69 = _this->body->axisx;		HX_STACK_VAR(tmp69,"tmp69");
																		HX_STACK_LINE(5326)
																		Float tmp70 = (tmp68 * tmp69);		HX_STACK_VAR(tmp70,"tmp70");
																		HX_STACK_LINE(5326)
																		Float tmp71 = l1->y;		HX_STACK_VAR(tmp71,"tmp71");
																		HX_STACK_LINE(5326)
																		Float tmp72 = _this->body->axisy;		HX_STACK_VAR(tmp72,"tmp72");
																		HX_STACK_LINE(5326)
																		Float tmp73 = (tmp71 * tmp72);		HX_STACK_VAR(tmp73,"tmp73");
																		HX_STACK_LINE(5326)
																		Float tmp74 = (tmp70 + tmp73);		HX_STACK_VAR(tmp74,"tmp74");
																		HX_STACK_LINE(5326)
																		Float tmp75 = (tmp67 + tmp74);		HX_STACK_VAR(tmp75,"tmp75");
																		HX_STACK_LINE(5326)
																		p->y = tmp75;
																	}
																	HX_STACK_LINE(5326)
																	Float tmp58 = p->x;		HX_STACK_VAR(tmp58,"tmp58");
																	HX_STACK_LINE(5326)
																	Float tmp59 = _this->aabb->minx;		HX_STACK_VAR(tmp59,"tmp59");
																	HX_STACK_LINE(5326)
																	bool tmp60 = (tmp58 < tmp59);		HX_STACK_VAR(tmp60,"tmp60");
																	HX_STACK_LINE(5326)
																	if ((tmp60)){
																		HX_STACK_LINE(5326)
																		_this->aabb->minx = p->x;
																	}
																	HX_STACK_LINE(5326)
																	Float tmp61 = p->x;		HX_STACK_VAR(tmp61,"tmp61");
																	HX_STACK_LINE(5326)
																	Float tmp62 = _this->aabb->maxx;		HX_STACK_VAR(tmp62,"tmp62");
																	HX_STACK_LINE(5326)
																	bool tmp63 = (tmp61 > tmp62);		HX_STACK_VAR(tmp63,"tmp63");
																	HX_STACK_LINE(5326)
																	if ((tmp63)){
																		HX_STACK_LINE(5326)
																		_this->aabb->maxx = p->x;
																	}
																	HX_STACK_LINE(5326)
																	Float tmp64 = p->y;		HX_STACK_VAR(tmp64,"tmp64");
																	HX_STACK_LINE(5326)
																	Float tmp65 = _this->aabb->miny;		HX_STACK_VAR(tmp65,"tmp65");
																	HX_STACK_LINE(5326)
																	bool tmp66 = (tmp64 < tmp65);		HX_STACK_VAR(tmp66,"tmp66");
																	HX_STACK_LINE(5326)
																	if ((tmp66)){
																		HX_STACK_LINE(5326)
																		_this->aabb->miny = p->y;
																	}
																	HX_STACK_LINE(5326)
																	Float tmp67 = p->y;		HX_STACK_VAR(tmp67,"tmp67");
																	HX_STACK_LINE(5326)
																	Float tmp68 = _this->aabb->maxy;		HX_STACK_VAR(tmp68,"tmp68");
																	HX_STACK_LINE(5326)
																	bool tmp69 = (tmp67 > tmp68);		HX_STACK_VAR(tmp69,"tmp69");
																	HX_STACK_LINE(5326)
																	if ((tmp69)){
																		HX_STACK_LINE(5326)
																		_this->aabb->maxy = p->y;
																	}
																}
																HX_STACK_LINE(5326)
																cx_ite2 = cx_ite2->next;
															}
														}
													}
												}
												HX_STACK_LINE(5327)
												bool tmp50 = (minx < aabb->minx);		HX_STACK_VAR(tmp50,"tmp50");
												HX_STACK_LINE(5327)
												if ((tmp50)){
													HX_STACK_LINE(5327)
													aabb->minx = minx;
												}
												else{
													HX_STACK_LINE(5327)
													minx = aabb->minx;
												}
												HX_STACK_LINE(5328)
												bool tmp51 = (miny < aabb->miny);		HX_STACK_VAR(tmp51,"tmp51");
												HX_STACK_LINE(5328)
												if ((tmp51)){
													HX_STACK_LINE(5328)
													aabb->miny = miny;
												}
												else{
													HX_STACK_LINE(5328)
													miny = aabb->miny;
												}
												HX_STACK_LINE(5329)
												bool tmp52 = (maxx > aabb->maxx);		HX_STACK_VAR(tmp52,"tmp52");
												HX_STACK_LINE(5329)
												if ((tmp52)){
													HX_STACK_LINE(5329)
													aabb->maxx = maxx;
												}
												else{
													HX_STACK_LINE(5329)
													maxx = aabb->maxx;
												}
												HX_STACK_LINE(5330)
												bool tmp53 = (maxy > aabb->maxy);		HX_STACK_VAR(tmp53,"tmp53");
												HX_STACK_LINE(5330)
												if ((tmp53)){
													HX_STACK_LINE(5330)
													aabb->maxy = maxy;
												}
												else{
													HX_STACK_LINE(5330)
													maxy = aabb->maxy;
												}
											}
										}
										HX_STACK_LINE(5332)
										::zpp_nape::space::ZPP_Broadphase tmp47 = this->bphase;		HX_STACK_VAR(tmp47,"tmp47");
										HX_STACK_LINE(5332)
										::zpp_nape::shape::ZPP_Shape tmp48 = s;		HX_STACK_VAR(tmp48,"tmp48");
										HX_STACK_LINE(5332)
										tmp47->sync(tmp48);
									}
									HX_STACK_LINE(5334)
									cx_ite1 = cx_ite1->next;
								}
							}
							HX_STACK_LINE(5337)
							cur->sweepFrozen = false;
							HX_STACK_LINE(5338)
							int tmp30 = cur->type;		HX_STACK_VAR(tmp30,"tmp30");
							HX_STACK_LINE(5338)
							int tmp31 = ::zpp_nape::util::ZPP_Flags_obj::id_BodyType_DYNAMIC;		HX_STACK_VAR(tmp31,"tmp31");
							HX_STACK_LINE(5338)
							bool tmp32 = (tmp30 == tmp31);		HX_STACK_VAR(tmp32,"tmp32");
							HX_STACK_LINE(5338)
							bool tmp33;		HX_STACK_VAR(tmp33,"tmp33");
							HX_STACK_LINE(5338)
							if ((tmp32)){
								HX_STACK_LINE(5338)
								tmp33 = cur->bulletEnabled;
							}
							else{
								HX_STACK_LINE(5338)
								tmp33 = false;
							}
							HX_STACK_LINE(5338)
							if ((tmp33)){
								HX_STACK_LINE(5339)
								Float tmp34 = ::nape::Config_obj::bulletCCDLinearThreshold;		HX_STACK_VAR(tmp34,"tmp34");
								HX_STACK_LINE(5339)
								Float tmp35 = cur->sweepRadius;		HX_STACK_VAR(tmp35,"tmp35");
								HX_STACK_LINE(5339)
								Float tmp36 = (tmp34 * tmp35);		HX_STACK_VAR(tmp36,"tmp36");
								HX_STACK_LINE(5339)
								Float linThreshold2 = tmp36;		HX_STACK_VAR(linThreshold2,"linThreshold2");
								HX_STACK_LINE(5340)
								Float tmp37 = ::nape::Config_obj::bulletCCDAngularThreshold;		HX_STACK_VAR(tmp37,"tmp37");
								HX_STACK_LINE(5340)
								Float angThreshold2 = tmp37;		HX_STACK_VAR(angThreshold2,"angThreshold2");
								HX_STACK_LINE(5341)
								Float tmp38 = (cur->velx * cur->velx);		HX_STACK_VAR(tmp38,"tmp38");
								HX_STACK_LINE(5341)
								Float tmp39 = (cur->vely * cur->vely);		HX_STACK_VAR(tmp39,"tmp39");
								HX_STACK_LINE(5341)
								Float tmp40 = (tmp38 + tmp39);		HX_STACK_VAR(tmp40,"tmp40");
								HX_STACK_LINE(5341)
								Float tmp41 = dt;		HX_STACK_VAR(tmp41,"tmp41");
								HX_STACK_LINE(5341)
								Float tmp42 = (tmp40 * tmp41);		HX_STACK_VAR(tmp42,"tmp42");
								HX_STACK_LINE(5341)
								Float tmp43 = dt;		HX_STACK_VAR(tmp43,"tmp43");
								HX_STACK_LINE(5341)
								Float tmp44 = (tmp42 * tmp43);		HX_STACK_VAR(tmp44,"tmp44");
								HX_STACK_LINE(5341)
								Float tmp45 = (linThreshold2 * linThreshold2);		HX_STACK_VAR(tmp45,"tmp45");
								HX_STACK_LINE(5341)
								bool tmp46 = (tmp44 > tmp45);		HX_STACK_VAR(tmp46,"tmp46");
								HX_STACK_LINE(5341)
								bool tmp47 = !(tmp46);		HX_STACK_VAR(tmp47,"tmp47");
								HX_STACK_LINE(5341)
								bool tmp48;		HX_STACK_VAR(tmp48,"tmp48");
								HX_STACK_LINE(5341)
								if ((tmp47)){
									HX_STACK_LINE(5341)
									Float tmp49 = (cur->angvel * cur->angvel);		HX_STACK_VAR(tmp49,"tmp49");
									HX_STACK_LINE(5341)
									Float tmp50 = tmp49;		HX_STACK_VAR(tmp50,"tmp50");
									HX_STACK_LINE(5341)
									Float tmp51 = dt;		HX_STACK_VAR(tmp51,"tmp51");
									HX_STACK_LINE(5341)
									Float tmp52 = (tmp50 * tmp51);		HX_STACK_VAR(tmp52,"tmp52");
									HX_STACK_LINE(5341)
									Float tmp53 = tmp52;		HX_STACK_VAR(tmp53,"tmp53");
									HX_STACK_LINE(5341)
									Float tmp54 = dt;		HX_STACK_VAR(tmp54,"tmp54");
									HX_STACK_LINE(5341)
									Float tmp55 = (tmp53 * tmp54);		HX_STACK_VAR(tmp55,"tmp55");
									HX_STACK_LINE(5341)
									Float tmp56 = tmp55;		HX_STACK_VAR(tmp56,"tmp56");
									HX_STACK_LINE(5341)
									Float tmp57 = (angThreshold2 * angThreshold2);		HX_STACK_VAR(tmp57,"tmp57");
									HX_STACK_LINE(5341)
									Float tmp58 = tmp57;		HX_STACK_VAR(tmp58,"tmp58");
									HX_STACK_LINE(5341)
									tmp48 = (tmp56 > tmp58);
								}
								else{
									HX_STACK_LINE(5341)
									tmp48 = true;
								}
								HX_STACK_LINE(5341)
								if ((tmp48)){
									HX_STACK_LINE(5342)
									cur->bullet = true;
								}
							}
						}
						else{
							HX_STACK_LINE(5347)
							cur->sweepFrozen = true;
							HX_STACK_LINE(5348)
							cur->bullet = false;
						}
					}
					else{
						HX_STACK_LINE(5352)
						cur->sweepFrozen = true;
						HX_STACK_LINE(5353)
						cur->bullet = false;
					}
				}
				HX_STACK_LINE(5356)
				cx_ite = cx_ite->next;
			}
		}
	}
return null();
}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Space_obj,updatePos,(void))

bool ZPP_Space_obj::presteparb( ::zpp_nape::dynamics::ZPP_Arbiter arb,Float dt,Dynamic __o_cont){
Dynamic cont = __o_cont.Default(false);
	HX_STACK_FRAME("zpp_nape.space.ZPP_Space","presteparb",0xba8dbbb8,"zpp_nape.space.ZPP_Space.presteparb","zpp_nape/space/Space.hx",5362,0x2b65ed03)
	HX_STACK_THIS(this)
	HX_STACK_ARG(arb,"arb")
	HX_STACK_ARG(dt,"dt")
	HX_STACK_ARG(cont,"cont")
{
		HX_STACK_LINE(5362)
		::zpp_nape::space::ZPP_Space _g = hx::ObjectPtr<OBJ_>(this);		HX_STACK_VAR(_g,"_g");
		HX_STACK_LINE(5363)
		bool tmp = arb->cleared;		HX_STACK_VAR(tmp,"tmp");
		HX_STACK_LINE(5363)
		bool tmp1 = tmp;		HX_STACK_VAR(tmp1,"tmp1");
		HX_STACK_LINE(5363)
		bool tmp2 = !(tmp1);		HX_STACK_VAR(tmp2,"tmp2");
		HX_STACK_LINE(5363)
		bool tmp3;		HX_STACK_VAR(tmp3,"tmp3");
		HX_STACK_LINE(5363)
		if ((tmp2)){
			HX_STACK_LINE(5363)
			::zpp_nape::space::ZPP_Component tmp4 = arb->b1->component;		HX_STACK_VAR(tmp4,"tmp4");
			HX_STACK_LINE(5363)
			::zpp_nape::space::ZPP_Component tmp5 = tmp4;		HX_STACK_VAR(tmp5,"tmp5");
			HX_STACK_LINE(5363)
			bool tmp6 = tmp5->sleeping;		HX_STACK_VAR(tmp6,"tmp6");
			HX_STACK_LINE(5363)
			bool tmp7 = tmp6;		HX_STACK_VAR(tmp7,"tmp7");
			HX_STACK_LINE(5363)
			if ((tmp7)){
				HX_STACK_LINE(5363)
				::zpp_nape::space::ZPP_Component tmp8 = arb->b2->component;		HX_STACK_VAR(tmp8,"tmp8");
				HX_STACK_LINE(5363)
				::zpp_nape::space::ZPP_Component tmp9 = tmp8;		HX_STACK_VAR(tmp9,"tmp9");
				HX_STACK_LINE(5363)
				::zpp_nape::space::ZPP_Component tmp10 = tmp9;		HX_STACK_VAR(tmp10,"tmp10");
				HX_STACK_LINE(5363)
				tmp3 = tmp10->sleeping;
			}
			else{
				HX_STACK_LINE(5363)
				tmp3 = false;
			}
		}
		else{
			HX_STACK_LINE(5363)
			tmp3 = false;
		}
		HX_STACK_LINE(5363)
		if ((tmp3)){
			HX_STACK_LINE(5372)
			int tmp4 = this->stamp;		HX_STACK_VAR(tmp4,"tmp4");
			HX_STACK_LINE(5372)
			arb->sleep_stamp = tmp4;
			HX_STACK_LINE(5373)
			arb->sleeping = true;
			HX_STACK_LINE(5374)
			return true;
		}
		HX_STACK_LINE(5378)
		bool tmp4 = arb->cleared;		HX_STACK_VAR(tmp4,"tmp4");
		HX_STACK_LINE(5378)
		bool tmp5 = tmp4;		HX_STACK_VAR(tmp5,"tmp5");
		HX_STACK_LINE(5378)
		bool tmp6 = !(tmp5);		HX_STACK_VAR(tmp6,"tmp6");
		HX_STACK_LINE(5378)
		bool tmp7 = !(tmp6);		HX_STACK_VAR(tmp7,"tmp7");
		HX_STACK_LINE(5378)
		bool tmp8 = tmp7;		HX_STACK_VAR(tmp8,"tmp8");
		HX_STACK_LINE(5378)
		bool tmp9;		HX_STACK_VAR(tmp9,"tmp9");
		HX_STACK_LINE(5378)
		if ((tmp8)){
			HX_STACK_LINE(5378)
			tmp9 = (arb->present != (int)0);
		}
		else{
			HX_STACK_LINE(5378)
			tmp9 = true;
		}
		HX_STACK_LINE(5378)
		bool tmp10 = !(tmp9);		HX_STACK_VAR(tmp10,"tmp10");
		HX_STACK_LINE(5378)
		bool tmp11;		HX_STACK_VAR(tmp11,"tmp11");
		HX_STACK_LINE(5378)
		if ((tmp10)){
			HX_STACK_LINE(5378)
			tmp11 = arb->intchange;
		}
		else{
			HX_STACK_LINE(5378)
			tmp11 = true;
		}
		HX_STACK_LINE(5378)
		if ((tmp11)){
			HX_STACK_LINE(5379)
			Dynamic tmp12 = cont;		HX_STACK_VAR(tmp12,"tmp12");
			HX_STACK_LINE(5379)
			Dynamic tmp13 = tmp12;		HX_STACK_VAR(tmp13,"tmp13");
			HX_STACK_LINE(5379)
			bool tmp14 = !(tmp13);		HX_STACK_VAR(tmp14,"tmp14");
			HX_STACK_LINE(5379)
			bool tmp15 = tmp14;		HX_STACK_VAR(tmp15,"tmp15");
			HX_STACK_LINE(5379)
			bool tmp16;		HX_STACK_VAR(tmp16,"tmp16");
			HX_STACK_LINE(5379)
			if ((tmp15)){
				HX_STACK_LINE(5379)
				int tmp17 = arb->up_stamp;		HX_STACK_VAR(tmp17,"tmp17");
				HX_STACK_LINE(5379)
				int tmp18 = this->stamp;		HX_STACK_VAR(tmp18,"tmp18");
				HX_STACK_LINE(5379)
				int tmp19 = tmp18;		HX_STACK_VAR(tmp19,"tmp19");
				HX_STACK_LINE(5379)
				int tmp20 = tmp19;		HX_STACK_VAR(tmp20,"tmp20");
				HX_STACK_LINE(5379)
				int tmp21 = (tmp20 - (int)1);		HX_STACK_VAR(tmp21,"tmp21");
				HX_STACK_LINE(5379)
				int tmp22 = tmp21;		HX_STACK_VAR(tmp22,"tmp22");
				HX_STACK_LINE(5379)
				int tmp23 = tmp22;		HX_STACK_VAR(tmp23,"tmp23");
				HX_STACK_LINE(5379)
				tmp16 = (tmp17 == tmp23);
			}
			else{
				HX_STACK_LINE(5379)
				tmp16 = false;
			}
			HX_STACK_LINE(5379)
			bool tmp17 = tmp16;		HX_STACK_VAR(tmp17,"tmp17");
			HX_STACK_LINE(5379)
			bool tmp18;		HX_STACK_VAR(tmp18,"tmp18");
			HX_STACK_LINE(5379)
			if ((tmp17)){
				HX_STACK_LINE(5379)
				bool tmp19 = arb->cleared;		HX_STACK_VAR(tmp19,"tmp19");
				HX_STACK_LINE(5379)
				bool tmp20 = tmp19;		HX_STACK_VAR(tmp20,"tmp20");
				HX_STACK_LINE(5379)
				bool tmp21 = tmp20;		HX_STACK_VAR(tmp21,"tmp21");
				HX_STACK_LINE(5379)
				tmp18 = !(tmp21);
			}
			else{
				HX_STACK_LINE(5379)
				tmp18 = false;
			}
			HX_STACK_LINE(5379)
			bool tmp19;		HX_STACK_VAR(tmp19,"tmp19");
			HX_STACK_LINE(5379)
			if ((tmp18)){
				HX_STACK_LINE(5379)
				bool tmp20 = arb->intchange;		HX_STACK_VAR(tmp20,"tmp20");
				HX_STACK_LINE(5379)
				bool tmp21 = tmp20;		HX_STACK_VAR(tmp21,"tmp21");
				HX_STACK_LINE(5379)
				tmp19 = !(tmp21);
			}
			else{
				HX_STACK_LINE(5379)
				tmp19 = false;
			}
			HX_STACK_LINE(5379)
			bool endcb = tmp19;		HX_STACK_VAR(endcb,"endcb");
			HX_STACK_LINE(5380)
			bool tmp20 = arb->fresh;		HX_STACK_VAR(tmp20,"tmp20");
			HX_STACK_LINE(5380)
			bool tmp21 = tmp20;		HX_STACK_VAR(tmp21,"tmp21");
			HX_STACK_LINE(5380)
			bool tmp22;		HX_STACK_VAR(tmp22,"tmp22");
			HX_STACK_LINE(5380)
			if ((tmp21)){
				HX_STACK_LINE(5380)
				bool tmp23 = arb->cleared;		HX_STACK_VAR(tmp23,"tmp23");
				HX_STACK_LINE(5380)
				bool tmp24 = tmp23;		HX_STACK_VAR(tmp24,"tmp24");
				HX_STACK_LINE(5380)
				bool tmp25 = tmp24;		HX_STACK_VAR(tmp25,"tmp25");
				HX_STACK_LINE(5380)
				tmp22 = !(tmp25);
			}
			else{
				HX_STACK_LINE(5380)
				tmp22 = false;
			}
			HX_STACK_LINE(5380)
			bool tmp23;		HX_STACK_VAR(tmp23,"tmp23");
			HX_STACK_LINE(5380)
			if ((tmp22)){
				HX_STACK_LINE(5380)
				bool tmp24 = arb->intchange;		HX_STACK_VAR(tmp24,"tmp24");
				HX_STACK_LINE(5380)
				bool tmp25 = tmp24;		HX_STACK_VAR(tmp25,"tmp25");
				HX_STACK_LINE(5380)
				tmp23 = !(tmp25);
			}
			else{
				HX_STACK_LINE(5380)
				tmp23 = false;
			}
			HX_STACK_LINE(5380)
			bool begcb = tmp23;		HX_STACK_VAR(begcb,"begcb");
			HX_STACK_LINE(5389)
			bool tmp24 = endcb;		HX_STACK_VAR(tmp24,"tmp24");
			HX_STACK_LINE(5389)
			if ((tmp24)){
				HX_STACK_LINE(5390)
				int tmp25 = this->stamp;		HX_STACK_VAR(tmp25,"tmp25");
				HX_STACK_LINE(5390)
				arb->endGenerated = tmp25;
			}
			HX_STACK_LINE(5392)
			bool tmp25 = begcb;		HX_STACK_VAR(tmp25,"tmp25");
			HX_STACK_LINE(5392)
			bool tmp26 = !(tmp25);		HX_STACK_VAR(tmp26,"tmp26");
			HX_STACK_LINE(5392)
			bool tmp27 = tmp26;		HX_STACK_VAR(tmp27,"tmp27");
			HX_STACK_LINE(5392)
			bool tmp28;		HX_STACK_VAR(tmp28,"tmp28");
			HX_STACK_LINE(5392)
			if ((tmp27)){
				HX_STACK_LINE(5392)
				tmp28 = endcb;
			}
			else{
				HX_STACK_LINE(5392)
				tmp28 = true;
			}
			HX_STACK_LINE(5392)
			bool tmp29 = !(tmp28);		HX_STACK_VAR(tmp29,"tmp29");
			HX_STACK_LINE(5392)
			bool tmp30 = tmp29;		HX_STACK_VAR(tmp30,"tmp30");
			HX_STACK_LINE(5392)
			bool tmp31;		HX_STACK_VAR(tmp31,"tmp31");
			HX_STACK_LINE(5392)
			if ((tmp30)){
				HX_STACK_LINE(5392)
				tmp31 = arb->cleared;
			}
			else{
				HX_STACK_LINE(5392)
				tmp31 = true;
			}
			HX_STACK_LINE(5392)
			bool tmp32 = !(tmp31);		HX_STACK_VAR(tmp32,"tmp32");
			HX_STACK_LINE(5392)
			bool tmp33;		HX_STACK_VAR(tmp33,"tmp33");
			HX_STACK_LINE(5392)
			if ((tmp32)){
				HX_STACK_LINE(5392)
				tmp33 = arb->intchange;
			}
			else{
				HX_STACK_LINE(5392)
				tmp33 = true;
			}
			HX_STACK_LINE(5392)
			if ((tmp33)){
				HX_STACK_LINE(5393)
				{
					HX_STACK_LINE(5393)
					::zpp_nape::shape::ZPP_Shape s1 = arb->ws1;		HX_STACK_VAR(s1,"s1");
					HX_STACK_LINE(5393)
					::zpp_nape::shape::ZPP_Shape s2 = arb->ws2;		HX_STACK_VAR(s2,"s2");
					HX_STACK_LINE(5393)
					{
						HX_STACK_LINE(5393)
						::zpp_nape::util::ZNPList_ZPP_Interactor tmp34 = this->mrca1;		HX_STACK_VAR(tmp34,"tmp34");
						HX_STACK_LINE(5393)
						::zpp_nape::util::ZNPList_ZPP_Interactor _this = tmp34;		HX_STACK_VAR(_this,"_this");
						HX_STACK_LINE(5393)
						{
							HX_STACK_LINE(5393)
							while((true)){
								HX_STACK_LINE(5393)
								bool tmp35 = (_this->head == null());		HX_STACK_VAR(tmp35,"tmp35");
								HX_STACK_LINE(5393)
								bool tmp36 = !(tmp35);		HX_STACK_VAR(tmp36,"tmp36");
								HX_STACK_LINE(5393)
								bool tmp37 = !(tmp36);		HX_STACK_VAR(tmp37,"tmp37");
								HX_STACK_LINE(5393)
								if ((tmp37)){
									HX_STACK_LINE(5393)
									break;
								}
								HX_STACK_LINE(5393)
								::zpp_nape::util::ZNPNode_ZPP_Interactor ret = _this->head;		HX_STACK_VAR(ret,"ret");
								HX_STACK_LINE(5393)
								_this->head = ret->next;
								HX_STACK_LINE(5393)
								{
									HX_STACK_LINE(5393)
									::zpp_nape::util::ZNPNode_ZPP_Interactor o = ret;		HX_STACK_VAR(o,"o");
									HX_STACK_LINE(5393)
									o->elt = null();
									HX_STACK_LINE(5393)
									::zpp_nape::util::ZNPNode_ZPP_Interactor tmp38 = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool;		HX_STACK_VAR(tmp38,"tmp38");
									HX_STACK_LINE(5393)
									o->next = tmp38;
									HX_STACK_LINE(5393)
									::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool = o;
								}
								HX_STACK_LINE(5393)
								bool tmp38 = (_this->head == null());		HX_STACK_VAR(tmp38,"tmp38");
								HX_STACK_LINE(5393)
								if ((tmp38)){
									HX_STACK_LINE(5393)
									_this->pushmod = true;
								}
								HX_STACK_LINE(5393)
								_this->modified = true;
								HX_STACK_LINE(5393)
								(_this->length)--;
							}
							HX_STACK_LINE(5393)
							_this->pushmod = true;
						}
					}
					HX_STACK_LINE(5393)
					{
						HX_STACK_LINE(5393)
						::zpp_nape::util::ZNPList_ZPP_Interactor tmp34 = this->mrca2;		HX_STACK_VAR(tmp34,"tmp34");
						HX_STACK_LINE(5393)
						::zpp_nape::util::ZNPList_ZPP_Interactor _this = tmp34;		HX_STACK_VAR(_this,"_this");
						HX_STACK_LINE(5393)
						{
							HX_STACK_LINE(5393)
							while((true)){
								HX_STACK_LINE(5393)
								bool tmp35 = (_this->head == null());		HX_STACK_VAR(tmp35,"tmp35");
								HX_STACK_LINE(5393)
								bool tmp36 = !(tmp35);		HX_STACK_VAR(tmp36,"tmp36");
								HX_STACK_LINE(5393)
								bool tmp37 = !(tmp36);		HX_STACK_VAR(tmp37,"tmp37");
								HX_STACK_LINE(5393)
								if ((tmp37)){
									HX_STACK_LINE(5393)
									break;
								}
								HX_STACK_LINE(5393)
								::zpp_nape::util::ZNPNode_ZPP_Interactor ret = _this->head;		HX_STACK_VAR(ret,"ret");
								HX_STACK_LINE(5393)
								_this->head = ret->next;
								HX_STACK_LINE(5393)
								{
									HX_STACK_LINE(5393)
									::zpp_nape::util::ZNPNode_ZPP_Interactor o = ret;		HX_STACK_VAR(o,"o");
									HX_STACK_LINE(5393)
									o->elt = null();
									HX_STACK_LINE(5393)
									::zpp_nape::util::ZNPNode_ZPP_Interactor tmp38 = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool;		HX_STACK_VAR(tmp38,"tmp38");
									HX_STACK_LINE(5393)
									o->next = tmp38;
									HX_STACK_LINE(5393)
									::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool = o;
								}
								HX_STACK_LINE(5393)
								bool tmp38 = (_this->head == null());		HX_STACK_VAR(tmp38,"tmp38");
								HX_STACK_LINE(5393)
								if ((tmp38)){
									HX_STACK_LINE(5393)
									_this->pushmod = true;
								}
								HX_STACK_LINE(5393)
								_this->modified = true;
								HX_STACK_LINE(5393)
								(_this->length)--;
							}
							HX_STACK_LINE(5393)
							_this->pushmod = true;
						}
					}
					HX_STACK_LINE(5393)
					bool tmp34 = (s1->cbSet != null());		HX_STACK_VAR(tmp34,"tmp34");
					HX_STACK_LINE(5393)
					if ((tmp34)){
						HX_STACK_LINE(5393)
						::zpp_nape::util::ZNPList_ZPP_Interactor tmp35 = this->mrca1;		HX_STACK_VAR(tmp35,"tmp35");
						HX_STACK_LINE(5393)
						::zpp_nape::util::ZNPList_ZPP_Interactor _this = tmp35;		HX_STACK_VAR(_this,"_this");
						HX_STACK_LINE(5393)
						::zpp_nape::util::ZNPNode_ZPP_Interactor tmp36;		HX_STACK_VAR(tmp36,"tmp36");
						HX_STACK_LINE(5393)
						{
							HX_STACK_LINE(5393)
							::zpp_nape::util::ZNPNode_ZPP_Interactor ret;		HX_STACK_VAR(ret,"ret");
							HX_STACK_LINE(5393)
							{
								HX_STACK_LINE(5393)
								::zpp_nape::util::ZNPNode_ZPP_Interactor tmp37 = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool;		HX_STACK_VAR(tmp37,"tmp37");
								HX_STACK_LINE(5393)
								bool tmp38 = (tmp37 == null());		HX_STACK_VAR(tmp38,"tmp38");
								HX_STACK_LINE(5393)
								if ((tmp38)){
									HX_STACK_LINE(5393)
									::zpp_nape::util::ZNPNode_ZPP_Interactor tmp39 = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::__new();		HX_STACK_VAR(tmp39,"tmp39");
									HX_STACK_LINE(5393)
									ret = tmp39;
								}
								else{
									HX_STACK_LINE(5393)
									::zpp_nape::util::ZNPNode_ZPP_Interactor tmp39 = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool;		HX_STACK_VAR(tmp39,"tmp39");
									HX_STACK_LINE(5393)
									ret = tmp39;
									HX_STACK_LINE(5393)
									::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool = ret->next;
									HX_STACK_LINE(5393)
									ret->next = null();
								}
								HX_STACK_LINE(5393)
								Dynamic();
							}
							HX_STACK_LINE(5393)
							ret->elt = s1;
							HX_STACK_LINE(5393)
							tmp36 = ret;
						}
						HX_STACK_LINE(5393)
						::zpp_nape::util::ZNPNode_ZPP_Interactor temp = tmp36;		HX_STACK_VAR(temp,"temp");
						HX_STACK_LINE(5393)
						temp->next = _this->head;
						HX_STACK_LINE(5393)
						_this->head = temp;
						HX_STACK_LINE(5393)
						_this->modified = true;
						HX_STACK_LINE(5393)
						(_this->length)++;
						HX_STACK_LINE(5393)
						s1;
					}
					HX_STACK_LINE(5393)
					::zpp_nape::callbacks::ZPP_CbSet tmp35 = s1->body->cbSet;		HX_STACK_VAR(tmp35,"tmp35");
					HX_STACK_LINE(5393)
					bool tmp36 = (tmp35 != null());		HX_STACK_VAR(tmp36,"tmp36");
					HX_STACK_LINE(5393)
					if ((tmp36)){
						HX_STACK_LINE(5393)
						::zpp_nape::util::ZNPList_ZPP_Interactor tmp37 = this->mrca1;		HX_STACK_VAR(tmp37,"tmp37");
						HX_STACK_LINE(5393)
						::zpp_nape::util::ZNPList_ZPP_Interactor _this = tmp37;		HX_STACK_VAR(_this,"_this");
						HX_STACK_LINE(5393)
						::zpp_nape::phys::ZPP_Interactor o = s1->body;		HX_STACK_VAR(o,"o");
						HX_STACK_LINE(5393)
						::zpp_nape::util::ZNPNode_ZPP_Interactor tmp38;		HX_STACK_VAR(tmp38,"tmp38");
						HX_STACK_LINE(5393)
						{
							HX_STACK_LINE(5393)
							::zpp_nape::util::ZNPNode_ZPP_Interactor ret;		HX_STACK_VAR(ret,"ret");
							HX_STACK_LINE(5393)
							{
								HX_STACK_LINE(5393)
								::zpp_nape::util::ZNPNode_ZPP_Interactor tmp39 = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool;		HX_STACK_VAR(tmp39,"tmp39");
								HX_STACK_LINE(5393)
								bool tmp40 = (tmp39 == null());		HX_STACK_VAR(tmp40,"tmp40");
								HX_STACK_LINE(5393)
								if ((tmp40)){
									HX_STACK_LINE(5393)
									::zpp_nape::util::ZNPNode_ZPP_Interactor tmp41 = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::__new();		HX_STACK_VAR(tmp41,"tmp41");
									HX_STACK_LINE(5393)
									ret = tmp41;
								}
								else{
									HX_STACK_LINE(5393)
									::zpp_nape::util::ZNPNode_ZPP_Interactor tmp41 = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool;		HX_STACK_VAR(tmp41,"tmp41");
									HX_STACK_LINE(5393)
									ret = tmp41;
									HX_STACK_LINE(5393)
									::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool = ret->next;
									HX_STACK_LINE(5393)
									ret->next = null();
								}
								HX_STACK_LINE(5393)
								Dynamic();
							}
							HX_STACK_LINE(5393)
							ret->elt = o;
							HX_STACK_LINE(5393)
							tmp38 = ret;
						}
						HX_STACK_LINE(5393)
						::zpp_nape::util::ZNPNode_ZPP_Interactor temp = tmp38;		HX_STACK_VAR(temp,"temp");
						HX_STACK_LINE(5393)
						temp->next = _this->head;
						HX_STACK_LINE(5393)
						_this->head = temp;
						HX_STACK_LINE(5393)
						_this->modified = true;
						HX_STACK_LINE(5393)
						(_this->length)++;
						HX_STACK_LINE(5393)
						o;
					}
					HX_STACK_LINE(5393)
					bool tmp37 = (s2->cbSet != null());		HX_STACK_VAR(tmp37,"tmp37");
					HX_STACK_LINE(5393)
					if ((tmp37)){
						HX_STACK_LINE(5393)
						::zpp_nape::util::ZNPList_ZPP_Interactor tmp38 = this->mrca2;		HX_STACK_VAR(tmp38,"tmp38");
						HX_STACK_LINE(5393)
						::zpp_nape::util::ZNPList_ZPP_Interactor _this = tmp38;		HX_STACK_VAR(_this,"_this");
						HX_STACK_LINE(5393)
						::zpp_nape::util::ZNPNode_ZPP_Interactor tmp39;		HX_STACK_VAR(tmp39,"tmp39");
						HX_STACK_LINE(5393)
						{
							HX_STACK_LINE(5393)
							::zpp_nape::util::ZNPNode_ZPP_Interactor ret;		HX_STACK_VAR(ret,"ret");
							HX_STACK_LINE(5393)
							{
								HX_STACK_LINE(5393)
								::zpp_nape::util::ZNPNode_ZPP_Interactor tmp40 = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool;		HX_STACK_VAR(tmp40,"tmp40");
								HX_STACK_LINE(5393)
								bool tmp41 = (tmp40 == null());		HX_STACK_VAR(tmp41,"tmp41");
								HX_STACK_LINE(5393)
								if ((tmp41)){
									HX_STACK_LINE(5393)
									::zpp_nape::util::ZNPNode_ZPP_Interactor tmp42 = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::__new();		HX_STACK_VAR(tmp42,"tmp42");
									HX_STACK_LINE(5393)
									ret = tmp42;
								}
								else{
									HX_STACK_LINE(5393)
									::zpp_nape::util::ZNPNode_ZPP_Interactor tmp42 = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool;		HX_STACK_VAR(tmp42,"tmp42");
									HX_STACK_LINE(5393)
									ret = tmp42;
									HX_STACK_LINE(5393)
									::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool = ret->next;
									HX_STACK_LINE(5393)
									ret->next = null();
								}
								HX_STACK_LINE(5393)
								Dynamic();
							}
							HX_STACK_LINE(5393)
							ret->elt = s2;
							HX_STACK_LINE(5393)
							tmp39 = ret;
						}
						HX_STACK_LINE(5393)
						::zpp_nape::util::ZNPNode_ZPP_Interactor temp = tmp39;		HX_STACK_VAR(temp,"temp");
						HX_STACK_LINE(5393)
						temp->next = _this->head;
						HX_STACK_LINE(5393)
						_this->head = temp;
						HX_STACK_LINE(5393)
						_this->modified = true;
						HX_STACK_LINE(5393)
						(_this->length)++;
						HX_STACK_LINE(5393)
						s2;
					}
					HX_STACK_LINE(5393)
					::zpp_nape::callbacks::ZPP_CbSet tmp38 = s2->body->cbSet;		HX_STACK_VAR(tmp38,"tmp38");
					HX_STACK_LINE(5393)
					bool tmp39 = (tmp38 != null());		HX_STACK_VAR(tmp39,"tmp39");
					HX_STACK_LINE(5393)
					if ((tmp39)){
						HX_STACK_LINE(5393)
						::zpp_nape::util::ZNPList_ZPP_Interactor tmp40 = this->mrca2;		HX_STACK_VAR(tmp40,"tmp40");
						HX_STACK_LINE(5393)
						::zpp_nape::util::ZNPList_ZPP_Interactor _this = tmp40;		HX_STACK_VAR(_this,"_this");
						HX_STACK_LINE(5393)
						::zpp_nape::phys::ZPP_Interactor o = s2->body;		HX_STACK_VAR(o,"o");
						HX_STACK_LINE(5393)
						::zpp_nape::util::ZNPNode_ZPP_Interactor tmp41;		HX_STACK_VAR(tmp41,"tmp41");
						HX_STACK_LINE(5393)
						{
							HX_STACK_LINE(5393)
							::zpp_nape::util::ZNPNode_ZPP_Interactor ret;		HX_STACK_VAR(ret,"ret");
							HX_STACK_LINE(5393)
							{
								HX_STACK_LINE(5393)
								::zpp_nape::util::ZNPNode_ZPP_Interactor tmp42 = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool;		HX_STACK_VAR(tmp42,"tmp42");
								HX_STACK_LINE(5393)
								bool tmp43 = (tmp42 == null());		HX_STACK_VAR(tmp43,"tmp43");
								HX_STACK_LINE(5393)
								if ((tmp43)){
									HX_STACK_LINE(5393)
									::zpp_nape::util::ZNPNode_ZPP_Interactor tmp44 = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::__new();		HX_STACK_VAR(tmp44,"tmp44");
									HX_STACK_LINE(5393)
									ret = tmp44;
								}
								else{
									HX_STACK_LINE(5393)
									::zpp_nape::util::ZNPNode_ZPP_Interactor tmp44 = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool;		HX_STACK_VAR(tmp44,"tmp44");
									HX_STACK_LINE(5393)
									ret = tmp44;
									HX_STACK_LINE(5393)
									::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool = ret->next;
									HX_STACK_LINE(5393)
									ret->next = null();
								}
								HX_STACK_LINE(5393)
								Dynamic();
							}
							HX_STACK_LINE(5393)
							ret->elt = o;
							HX_STACK_LINE(5393)
							tmp41 = ret;
						}
						HX_STACK_LINE(5393)
						::zpp_nape::util::ZNPNode_ZPP_Interactor temp = tmp41;		HX_STACK_VAR(temp,"temp");
						HX_STACK_LINE(5393)
						temp->next = _this->head;
						HX_STACK_LINE(5393)
						_this->head = temp;
						HX_STACK_LINE(5393)
						_this->modified = true;
						HX_STACK_LINE(5393)
						(_this->length)++;
						HX_STACK_LINE(5393)
						o;
					}
					HX_STACK_LINE(5393)
					::zpp_nape::phys::ZPP_Compound tmp40 = s1->body->compound;		HX_STACK_VAR(tmp40,"tmp40");
					HX_STACK_LINE(5393)
					::zpp_nape::phys::ZPP_Compound c1 = tmp40;		HX_STACK_VAR(c1,"c1");
					HX_STACK_LINE(5393)
					::zpp_nape::phys::ZPP_Compound tmp41 = s2->body->compound;		HX_STACK_VAR(tmp41,"tmp41");
					HX_STACK_LINE(5393)
					::zpp_nape::phys::ZPP_Compound c2 = tmp41;		HX_STACK_VAR(c2,"c2");
					HX_STACK_LINE(5393)
					while((true)){
						HX_STACK_LINE(5393)
						bool tmp42 = (c1 != c2);		HX_STACK_VAR(tmp42,"tmp42");
						HX_STACK_LINE(5393)
						bool tmp43 = !(tmp42);		HX_STACK_VAR(tmp43,"tmp43");
						HX_STACK_LINE(5393)
						if ((tmp43)){
							HX_STACK_LINE(5393)
							break;
						}
						HX_STACK_LINE(5393)
						bool tmp44 = (c1 == null());		HX_STACK_VAR(tmp44,"tmp44");
						HX_STACK_LINE(5393)
						int tmp45;		HX_STACK_VAR(tmp45,"tmp45");
						HX_STACK_LINE(5393)
						if ((tmp44)){
							HX_STACK_LINE(5393)
							tmp45 = (int)0;
						}
						else{
							HX_STACK_LINE(5393)
							tmp45 = c1->depth;
						}
						HX_STACK_LINE(5393)
						int d1 = tmp45;		HX_STACK_VAR(d1,"d1");
						HX_STACK_LINE(5393)
						bool tmp46 = (c2 == null());		HX_STACK_VAR(tmp46,"tmp46");
						HX_STACK_LINE(5393)
						int tmp47;		HX_STACK_VAR(tmp47,"tmp47");
						HX_STACK_LINE(5393)
						if ((tmp46)){
							HX_STACK_LINE(5393)
							tmp47 = (int)0;
						}
						else{
							HX_STACK_LINE(5393)
							tmp47 = c2->depth;
						}
						HX_STACK_LINE(5393)
						int d2 = tmp47;		HX_STACK_VAR(d2,"d2");
						HX_STACK_LINE(5393)
						bool tmp48 = (d1 < d2);		HX_STACK_VAR(tmp48,"tmp48");
						HX_STACK_LINE(5393)
						if ((tmp48)){
							HX_STACK_LINE(5393)
							bool tmp49 = (c2->cbSet != null());		HX_STACK_VAR(tmp49,"tmp49");
							HX_STACK_LINE(5393)
							if ((tmp49)){
								HX_STACK_LINE(5393)
								::zpp_nape::util::ZNPList_ZPP_Interactor tmp50 = this->mrca2;		HX_STACK_VAR(tmp50,"tmp50");
								HX_STACK_LINE(5393)
								::zpp_nape::util::ZNPList_ZPP_Interactor _this = tmp50;		HX_STACK_VAR(_this,"_this");
								HX_STACK_LINE(5393)
								::zpp_nape::util::ZNPNode_ZPP_Interactor tmp51;		HX_STACK_VAR(tmp51,"tmp51");
								HX_STACK_LINE(5393)
								{
									HX_STACK_LINE(5393)
									::zpp_nape::util::ZNPNode_ZPP_Interactor ret;		HX_STACK_VAR(ret,"ret");
									HX_STACK_LINE(5393)
									{
										HX_STACK_LINE(5393)
										::zpp_nape::util::ZNPNode_ZPP_Interactor tmp52 = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool;		HX_STACK_VAR(tmp52,"tmp52");
										HX_STACK_LINE(5393)
										bool tmp53 = (tmp52 == null());		HX_STACK_VAR(tmp53,"tmp53");
										HX_STACK_LINE(5393)
										if ((tmp53)){
											HX_STACK_LINE(5393)
											::zpp_nape::util::ZNPNode_ZPP_Interactor tmp54 = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::__new();		HX_STACK_VAR(tmp54,"tmp54");
											HX_STACK_LINE(5393)
											ret = tmp54;
										}
										else{
											HX_STACK_LINE(5393)
											::zpp_nape::util::ZNPNode_ZPP_Interactor tmp54 = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool;		HX_STACK_VAR(tmp54,"tmp54");
											HX_STACK_LINE(5393)
											ret = tmp54;
											HX_STACK_LINE(5393)
											::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool = ret->next;
											HX_STACK_LINE(5393)
											ret->next = null();
										}
										HX_STACK_LINE(5393)
										Dynamic();
									}
									HX_STACK_LINE(5393)
									ret->elt = c2;
									HX_STACK_LINE(5393)
									tmp51 = ret;
								}
								HX_STACK_LINE(5393)
								::zpp_nape::util::ZNPNode_ZPP_Interactor temp = tmp51;		HX_STACK_VAR(temp,"temp");
								HX_STACK_LINE(5393)
								temp->next = _this->head;
								HX_STACK_LINE(5393)
								_this->head = temp;
								HX_STACK_LINE(5393)
								_this->modified = true;
								HX_STACK_LINE(5393)
								(_this->length)++;
								HX_STACK_LINE(5393)
								c2;
							}
							HX_STACK_LINE(5393)
							c2 = c2->compound;
						}
						else{
							HX_STACK_LINE(5393)
							bool tmp49 = (c1->cbSet != null());		HX_STACK_VAR(tmp49,"tmp49");
							HX_STACK_LINE(5393)
							if ((tmp49)){
								HX_STACK_LINE(5393)
								::zpp_nape::util::ZNPList_ZPP_Interactor tmp50 = this->mrca1;		HX_STACK_VAR(tmp50,"tmp50");
								HX_STACK_LINE(5393)
								::zpp_nape::util::ZNPList_ZPP_Interactor _this = tmp50;		HX_STACK_VAR(_this,"_this");
								HX_STACK_LINE(5393)
								::zpp_nape::util::ZNPNode_ZPP_Interactor tmp51;		HX_STACK_VAR(tmp51,"tmp51");
								HX_STACK_LINE(5393)
								{
									HX_STACK_LINE(5393)
									::zpp_nape::util::ZNPNode_ZPP_Interactor ret;		HX_STACK_VAR(ret,"ret");
									HX_STACK_LINE(5393)
									{
										HX_STACK_LINE(5393)
										::zpp_nape::util::ZNPNode_ZPP_Interactor tmp52 = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool;		HX_STACK_VAR(tmp52,"tmp52");
										HX_STACK_LINE(5393)
										bool tmp53 = (tmp52 == null());		HX_STACK_VAR(tmp53,"tmp53");
										HX_STACK_LINE(5393)
										if ((tmp53)){
											HX_STACK_LINE(5393)
											::zpp_nape::util::ZNPNode_ZPP_Interactor tmp54 = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::__new();		HX_STACK_VAR(tmp54,"tmp54");
											HX_STACK_LINE(5393)
											ret = tmp54;
										}
										else{
											HX_STACK_LINE(5393)
											::zpp_nape::util::ZNPNode_ZPP_Interactor tmp54 = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool;		HX_STACK_VAR(tmp54,"tmp54");
											HX_STACK_LINE(5393)
											ret = tmp54;
											HX_STACK_LINE(5393)
											::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool = ret->next;
											HX_STACK_LINE(5393)
											ret->next = null();
										}
										HX_STACK_LINE(5393)
										Dynamic();
									}
									HX_STACK_LINE(5393)
									ret->elt = c1;
									HX_STACK_LINE(5393)
									tmp51 = ret;
								}
								HX_STACK_LINE(5393)
								::zpp_nape::util::ZNPNode_ZPP_Interactor temp = tmp51;		HX_STACK_VAR(temp,"temp");
								HX_STACK_LINE(5393)
								temp->next = _this->head;
								HX_STACK_LINE(5393)
								_this->head = temp;
								HX_STACK_LINE(5393)
								_this->modified = true;
								HX_STACK_LINE(5393)
								(_this->length)++;
								HX_STACK_LINE(5393)
								c1;
							}
							HX_STACK_LINE(5393)
							c1 = c1->compound;
						}
					}
				}
				HX_STACK_LINE(5394)
				{
					HX_STACK_LINE(5395)
					::zpp_nape::util::ZNPList_ZPP_Interactor tmp34 = this->mrca1;		HX_STACK_VAR(tmp34,"tmp34");
					HX_STACK_LINE(5395)
					::zpp_nape::util::ZNPNode_ZPP_Interactor cx_ite = tmp34->head;		HX_STACK_VAR(cx_ite,"cx_ite");
					HX_STACK_LINE(5396)
					while((true)){
						HX_STACK_LINE(5396)
						bool tmp35 = (cx_ite != null());		HX_STACK_VAR(tmp35,"tmp35");
						HX_STACK_LINE(5396)
						bool tmp36 = !(tmp35);		HX_STACK_VAR(tmp36,"tmp36");
						HX_STACK_LINE(5396)
						if ((tmp36)){
							HX_STACK_LINE(5396)
							break;
						}
						HX_STACK_LINE(5397)
						::zpp_nape::phys::ZPP_Interactor i1 = cx_ite->elt;		HX_STACK_VAR(i1,"i1");
						HX_STACK_LINE(5399)
						{
							HX_STACK_LINE(5400)
							::zpp_nape::util::ZNPList_ZPP_Interactor tmp37 = this->mrca2;		HX_STACK_VAR(tmp37,"tmp37");
							HX_STACK_LINE(5400)
							::zpp_nape::util::ZNPNode_ZPP_Interactor cx_ite1 = tmp37->head;		HX_STACK_VAR(cx_ite1,"cx_ite1");
							HX_STACK_LINE(5401)
							while((true)){
								HX_STACK_LINE(5401)
								bool tmp38 = (cx_ite1 != null());		HX_STACK_VAR(tmp38,"tmp38");
								HX_STACK_LINE(5401)
								bool tmp39 = !(tmp38);		HX_STACK_VAR(tmp39,"tmp39");
								HX_STACK_LINE(5401)
								if ((tmp39)){
									HX_STACK_LINE(5401)
									break;
								}
								HX_STACK_LINE(5402)
								::zpp_nape::phys::ZPP_Interactor i2 = cx_ite1->elt;		HX_STACK_VAR(i2,"i2");
								HX_STACK_LINE(5403)
								{
									HX_STACK_LINE(5404)
									::zpp_nape::callbacks::ZPP_CbSet cb1 = i1->cbSet;		HX_STACK_VAR(cb1,"cb1");
									HX_STACK_LINE(5405)
									::zpp_nape::callbacks::ZPP_CbSet cb2 = i2->cbSet;		HX_STACK_VAR(cb2,"cb2");
									HX_STACK_LINE(5414)
									bool tmp40;		HX_STACK_VAR(tmp40,"tmp40");
									HX_STACK_LINE(5414)
									{
										HX_STACK_LINE(5414)
										::zpp_nape::callbacks::ZPP_CbSetPair tmp41;		HX_STACK_VAR(tmp41,"tmp41");
										HX_STACK_LINE(5414)
										{
											HX_STACK_LINE(5414)
											::zpp_nape::callbacks::ZPP_CbSetPair ret = null();		HX_STACK_VAR(ret,"ret");
											HX_STACK_LINE(5414)
											int tmp42 = cb1->cbpairs->length;		HX_STACK_VAR(tmp42,"tmp42");
											HX_STACK_LINE(5414)
											int tmp43 = cb2->cbpairs->length;		HX_STACK_VAR(tmp43,"tmp43");
											HX_STACK_LINE(5414)
											bool tmp44 = (tmp42 < tmp43);		HX_STACK_VAR(tmp44,"tmp44");
											HX_STACK_LINE(5414)
											::zpp_nape::util::ZNPList_ZPP_CbSetPair tmp45;		HX_STACK_VAR(tmp45,"tmp45");
											HX_STACK_LINE(5414)
											if ((tmp44)){
												HX_STACK_LINE(5414)
												tmp45 = cb1->cbpairs;
											}
											else{
												HX_STACK_LINE(5414)
												tmp45 = cb2->cbpairs;
											}
											HX_STACK_LINE(5414)
											::zpp_nape::util::ZNPList_ZPP_CbSetPair pairs = tmp45;		HX_STACK_VAR(pairs,"pairs");
											HX_STACK_LINE(5414)
											{
												HX_STACK_LINE(5414)
												::zpp_nape::util::ZNPNode_ZPP_CbSetPair cx_ite2 = pairs->head;		HX_STACK_VAR(cx_ite2,"cx_ite2");
												HX_STACK_LINE(5414)
												while((true)){
													HX_STACK_LINE(5414)
													bool tmp46 = (cx_ite2 != null());		HX_STACK_VAR(tmp46,"tmp46");
													HX_STACK_LINE(5414)
													bool tmp47 = !(tmp46);		HX_STACK_VAR(tmp47,"tmp47");
													HX_STACK_LINE(5414)
													if ((tmp47)){
														HX_STACK_LINE(5414)
														break;
													}
													HX_STACK_LINE(5414)
													::zpp_nape::callbacks::ZPP_CbSetPair p = cx_ite2->elt;		HX_STACK_VAR(p,"p");
													HX_STACK_LINE(5414)
													{
														HX_STACK_LINE(5414)
														bool tmp48 = (p->a == cb1);		HX_STACK_VAR(tmp48,"tmp48");
														HX_STACK_LINE(5414)
														bool tmp49 = tmp48;		HX_STACK_VAR(tmp49,"tmp49");
														HX_STACK_LINE(5414)
														bool tmp50;		HX_STACK_VAR(tmp50,"tmp50");
														HX_STACK_LINE(5414)
														if ((tmp49)){
															HX_STACK_LINE(5414)
															tmp50 = (p->b == cb2);
														}
														else{
															HX_STACK_LINE(5414)
															tmp50 = false;
														}
														HX_STACK_LINE(5414)
														bool tmp51 = !(tmp50);		HX_STACK_VAR(tmp51,"tmp51");
														HX_STACK_LINE(5414)
														bool tmp52;		HX_STACK_VAR(tmp52,"tmp52");
														HX_STACK_LINE(5414)
														if ((tmp51)){
															HX_STACK_LINE(5414)
															bool tmp53 = (p->a == cb2);		HX_STACK_VAR(tmp53,"tmp53");
															HX_STACK_LINE(5414)
															bool tmp54 = tmp53;		HX_STACK_VAR(tmp54,"tmp54");
															HX_STACK_LINE(5414)
															bool tmp55 = tmp54;		HX_STACK_VAR(tmp55,"tmp55");
															HX_STACK_LINE(5414)
															if ((tmp55)){
																HX_STACK_LINE(5414)
																tmp52 = (p->b == cb1);
															}
															else{
																HX_STACK_LINE(5414)
																tmp52 = false;
															}
														}
														else{
															HX_STACK_LINE(5414)
															tmp52 = true;
														}
														HX_STACK_LINE(5414)
														if ((tmp52)){
															HX_STACK_LINE(5414)
															ret = p;
															HX_STACK_LINE(5414)
															break;
														}
													}
													HX_STACK_LINE(5414)
													cx_ite2 = cx_ite2->next;
												}
											}
											HX_STACK_LINE(5414)
											bool tmp46 = (ret == null());		HX_STACK_VAR(tmp46,"tmp46");
											HX_STACK_LINE(5414)
											if ((tmp46)){
												HX_STACK_LINE(5414)
												::zpp_nape::callbacks::ZPP_CbSetPair tmp47;		HX_STACK_VAR(tmp47,"tmp47");
												HX_STACK_LINE(5414)
												{
													HX_STACK_LINE(5414)
													::zpp_nape::callbacks::ZPP_CbSetPair ret1;		HX_STACK_VAR(ret1,"ret1");
													HX_STACK_LINE(5414)
													{
														HX_STACK_LINE(5414)
														::zpp_nape::callbacks::ZPP_CbSetPair tmp48 = ::zpp_nape::callbacks::ZPP_CbSetPair_obj::zpp_pool;		HX_STACK_VAR(tmp48,"tmp48");
														HX_STACK_LINE(5414)
														bool tmp49 = (tmp48 == null());		HX_STACK_VAR(tmp49,"tmp49");
														HX_STACK_LINE(5414)
														if ((tmp49)){
															HX_STACK_LINE(5414)
															::zpp_nape::callbacks::ZPP_CbSetPair tmp50 = ::zpp_nape::callbacks::ZPP_CbSetPair_obj::__new();		HX_STACK_VAR(tmp50,"tmp50");
															HX_STACK_LINE(5414)
															ret1 = tmp50;
														}
														else{
															HX_STACK_LINE(5414)
															::zpp_nape::callbacks::ZPP_CbSetPair tmp50 = ::zpp_nape::callbacks::ZPP_CbSetPair_obj::zpp_pool;		HX_STACK_VAR(tmp50,"tmp50");
															HX_STACK_LINE(5414)
															ret1 = tmp50;
															HX_STACK_LINE(5414)
															::zpp_nape::callbacks::ZPP_CbSetPair_obj::zpp_pool = ret1->next;
															HX_STACK_LINE(5414)
															ret1->next = null();
														}
														HX_STACK_LINE(5414)
														ret1->zip_listeners = true;
													}
													HX_STACK_LINE(5414)
													::zpp_nape::callbacks::ZPP_CbSet tmp48 = cb1;		HX_STACK_VAR(tmp48,"tmp48");
													HX_STACK_LINE(5414)
													::zpp_nape::callbacks::ZPP_CbSet tmp49 = cb2;		HX_STACK_VAR(tmp49,"tmp49");
													HX_STACK_LINE(5414)
													bool tmp50 = ::zpp_nape::callbacks::ZPP_CbSet_obj::setlt(tmp48,tmp49);		HX_STACK_VAR(tmp50,"tmp50");
													HX_STACK_LINE(5414)
													if ((tmp50)){
														HX_STACK_LINE(5414)
														ret1->a = cb1;
														HX_STACK_LINE(5414)
														ret1->b = cb2;
													}
													else{
														HX_STACK_LINE(5414)
														ret1->a = cb2;
														HX_STACK_LINE(5414)
														ret1->b = cb1;
													}
													HX_STACK_LINE(5414)
													tmp47 = ret1;
												}
												HX_STACK_LINE(5414)
												ret = tmp47;
												HX_STACK_LINE(5414)
												::zpp_nape::callbacks::ZPP_CbSetPair tmp48 = ret;		HX_STACK_VAR(tmp48,"tmp48");
												HX_STACK_LINE(5414)
												cb1->cbpairs->add(tmp48);
												HX_STACK_LINE(5414)
												bool tmp49 = (cb2 != cb1);		HX_STACK_VAR(tmp49,"tmp49");
												HX_STACK_LINE(5414)
												if ((tmp49)){
													HX_STACK_LINE(5414)
													::zpp_nape::callbacks::ZPP_CbSetPair tmp50 = ret;		HX_STACK_VAR(tmp50,"tmp50");
													HX_STACK_LINE(5414)
													cb2->cbpairs->add(tmp50);
												}
											}
											HX_STACK_LINE(5414)
											{
												HX_STACK_LINE(5414)
												bool tmp47 = ret->zip_listeners;		HX_STACK_VAR(tmp47,"tmp47");
												HX_STACK_LINE(5414)
												if ((tmp47)){
													HX_STACK_LINE(5414)
													ret->zip_listeners = false;
													HX_STACK_LINE(5414)
													ret->__validate();
												}
											}
											HX_STACK_LINE(5414)
											tmp41 = ret;
										}
										HX_STACK_LINE(5414)
										::zpp_nape::callbacks::ZPP_CbSetPair _this = tmp41;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(5414)
										::zpp_nape::util::ZNPNode_ZPP_InteractionListener tmp42 = _this->listeners->head;		HX_STACK_VAR(tmp42,"tmp42");
										HX_STACK_LINE(5414)
										tmp40 = (tmp42 == null());
									}
									HX_STACK_LINE(5414)
									if ((tmp40)){
										HX_STACK_LINE(5415)
										cx_ite1 = cx_ite1->next;
										HX_STACK_LINE(5416)
										continue;
									}
									HX_STACK_LINE(5418)
									::zpp_nape::phys::ZPP_Interactor tmp41 = i1;		HX_STACK_VAR(tmp41,"tmp41");
									HX_STACK_LINE(5418)
									::zpp_nape::phys::ZPP_Interactor tmp42 = i2;		HX_STACK_VAR(tmp42,"tmp42");
									HX_STACK_LINE(5418)
									::zpp_nape::space::ZPP_CallbackSet tmp43 = ::zpp_nape::phys::ZPP_Interactor_obj::get(tmp41,tmp42);		HX_STACK_VAR(tmp43,"tmp43");
									HX_STACK_LINE(5418)
									::zpp_nape::space::ZPP_CallbackSet callbackset = tmp43;		HX_STACK_VAR(callbackset,"callbackset");
									HX_STACK_LINE(5419)
									bool tmp44 = begcb;		HX_STACK_VAR(tmp44,"tmp44");
									HX_STACK_LINE(5419)
									bool tmp45 = !(tmp44);		HX_STACK_VAR(tmp45,"tmp45");
									HX_STACK_LINE(5419)
									bool tmp46;		HX_STACK_VAR(tmp46,"tmp46");
									HX_STACK_LINE(5419)
									if ((tmp45)){
										HX_STACK_LINE(5419)
										tmp46 = arb->intchange;
									}
									else{
										HX_STACK_LINE(5419)
										tmp46 = true;
									}
									HX_STACK_LINE(5419)
									if ((tmp46)){
										HX_STACK_LINE(5420)
										bool tmp47 = (callbackset == null());		HX_STACK_VAR(tmp47,"tmp47");
										HX_STACK_LINE(5420)
										if ((tmp47)){
											HX_STACK_LINE(5421)
											::zpp_nape::phys::ZPP_Interactor tmp48 = i1;		HX_STACK_VAR(tmp48,"tmp48");
											HX_STACK_LINE(5421)
											::zpp_nape::phys::ZPP_Interactor tmp49 = i2;		HX_STACK_VAR(tmp49,"tmp49");
											HX_STACK_LINE(5421)
											::zpp_nape::space::ZPP_CallbackSet tmp50 = ::zpp_nape::space::ZPP_CallbackSet_obj::get(tmp48,tmp49);		HX_STACK_VAR(tmp50,"tmp50");
											HX_STACK_LINE(5421)
											callbackset = tmp50;
											HX_STACK_LINE(5422)
											::zpp_nape::space::ZPP_CallbackSet tmp51 = callbackset;		HX_STACK_VAR(tmp51,"tmp51");
											HX_STACK_LINE(5422)
											this->add_callbackset(tmp51);
										}
										HX_STACK_LINE(5424)
										{
											HX_STACK_LINE(5424)
											int tmp48 = ::zpp_nape::util::ZPP_Flags_obj::id_CbEvent_BEGIN;		HX_STACK_VAR(tmp48,"tmp48");
											HX_STACK_LINE(5424)
											int event = tmp48;		HX_STACK_VAR(event,"event");
											HX_STACK_LINE(5424)
											{
												HX_STACK_LINE(5424)
												::zpp_nape::callbacks::ZPP_CbSetPair tmp49;		HX_STACK_VAR(tmp49,"tmp49");
												HX_STACK_LINE(5424)
												{
													HX_STACK_LINE(5424)
													::zpp_nape::callbacks::ZPP_CbSetPair ret = null();		HX_STACK_VAR(ret,"ret");
													HX_STACK_LINE(5424)
													int tmp50 = cb1->cbpairs->length;		HX_STACK_VAR(tmp50,"tmp50");
													HX_STACK_LINE(5424)
													int tmp51 = cb2->cbpairs->length;		HX_STACK_VAR(tmp51,"tmp51");
													HX_STACK_LINE(5424)
													bool tmp52 = (tmp50 < tmp51);		HX_STACK_VAR(tmp52,"tmp52");
													HX_STACK_LINE(5424)
													::zpp_nape::util::ZNPList_ZPP_CbSetPair tmp53;		HX_STACK_VAR(tmp53,"tmp53");
													HX_STACK_LINE(5424)
													if ((tmp52)){
														HX_STACK_LINE(5424)
														tmp53 = cb1->cbpairs;
													}
													else{
														HX_STACK_LINE(5424)
														tmp53 = cb2->cbpairs;
													}
													HX_STACK_LINE(5424)
													::zpp_nape::util::ZNPList_ZPP_CbSetPair pairs = tmp53;		HX_STACK_VAR(pairs,"pairs");
													HX_STACK_LINE(5424)
													{
														HX_STACK_LINE(5424)
														::zpp_nape::util::ZNPNode_ZPP_CbSetPair cx_ite2 = pairs->head;		HX_STACK_VAR(cx_ite2,"cx_ite2");
														HX_STACK_LINE(5424)
														while((true)){
															HX_STACK_LINE(5424)
															bool tmp54 = (cx_ite2 != null());		HX_STACK_VAR(tmp54,"tmp54");
															HX_STACK_LINE(5424)
															bool tmp55 = !(tmp54);		HX_STACK_VAR(tmp55,"tmp55");
															HX_STACK_LINE(5424)
															if ((tmp55)){
																HX_STACK_LINE(5424)
																break;
															}
															HX_STACK_LINE(5424)
															::zpp_nape::callbacks::ZPP_CbSetPair p = cx_ite2->elt;		HX_STACK_VAR(p,"p");
															HX_STACK_LINE(5424)
															{
																HX_STACK_LINE(5424)
																bool tmp56 = (p->a == cb1);		HX_STACK_VAR(tmp56,"tmp56");
																HX_STACK_LINE(5424)
																bool tmp57 = tmp56;		HX_STACK_VAR(tmp57,"tmp57");
																HX_STACK_LINE(5424)
																bool tmp58;		HX_STACK_VAR(tmp58,"tmp58");
																HX_STACK_LINE(5424)
																if ((tmp57)){
																	HX_STACK_LINE(5424)
																	tmp58 = (p->b == cb2);
																}
																else{
																	HX_STACK_LINE(5424)
																	tmp58 = false;
																}
																HX_STACK_LINE(5424)
																bool tmp59 = !(tmp58);		HX_STACK_VAR(tmp59,"tmp59");
																HX_STACK_LINE(5424)
																bool tmp60;		HX_STACK_VAR(tmp60,"tmp60");
																HX_STACK_LINE(5424)
																if ((tmp59)){
																	HX_STACK_LINE(5424)
																	bool tmp61 = (p->a == cb2);		HX_STACK_VAR(tmp61,"tmp61");
																	HX_STACK_LINE(5424)
																	bool tmp62 = tmp61;		HX_STACK_VAR(tmp62,"tmp62");
																	HX_STACK_LINE(5424)
																	bool tmp63 = tmp62;		HX_STACK_VAR(tmp63,"tmp63");
																	HX_STACK_LINE(5424)
																	if ((tmp63)){
																		HX_STACK_LINE(5424)
																		tmp60 = (p->b == cb1);
																	}
																	else{
																		HX_STACK_LINE(5424)
																		tmp60 = false;
																	}
																}
																else{
																	HX_STACK_LINE(5424)
																	tmp60 = true;
																}
																HX_STACK_LINE(5424)
																if ((tmp60)){
																	HX_STACK_LINE(5424)
																	ret = p;
																	HX_STACK_LINE(5424)
																	break;
																}
															}
															HX_STACK_LINE(5424)
															cx_ite2 = cx_ite2->next;
														}
													}
													HX_STACK_LINE(5424)
													bool tmp54 = (ret == null());		HX_STACK_VAR(tmp54,"tmp54");
													HX_STACK_LINE(5424)
													if ((tmp54)){
														HX_STACK_LINE(5424)
														::zpp_nape::callbacks::ZPP_CbSetPair tmp55;		HX_STACK_VAR(tmp55,"tmp55");
														HX_STACK_LINE(5424)
														{
															HX_STACK_LINE(5424)
															::zpp_nape::callbacks::ZPP_CbSetPair ret1;		HX_STACK_VAR(ret1,"ret1");
															HX_STACK_LINE(5424)
															{
																HX_STACK_LINE(5424)
																::zpp_nape::callbacks::ZPP_CbSetPair tmp56 = ::zpp_nape::callbacks::ZPP_CbSetPair_obj::zpp_pool;		HX_STACK_VAR(tmp56,"tmp56");
																HX_STACK_LINE(5424)
																bool tmp57 = (tmp56 == null());		HX_STACK_VAR(tmp57,"tmp57");
																HX_STACK_LINE(5424)
																if ((tmp57)){
																	HX_STACK_LINE(5424)
																	::zpp_nape::callbacks::ZPP_CbSetPair tmp58 = ::zpp_nape::callbacks::ZPP_CbSetPair_obj::__new();		HX_STACK_VAR(tmp58,"tmp58");
																	HX_STACK_LINE(5424)
																	ret1 = tmp58;
																}
																else{
																	HX_STACK_LINE(5424)
																	::zpp_nape::callbacks::ZPP_CbSetPair tmp58 = ::zpp_nape::callbacks::ZPP_CbSetPair_obj::zpp_pool;		HX_STACK_VAR(tmp58,"tmp58");
																	HX_STACK_LINE(5424)
																	ret1 = tmp58;
																	HX_STACK_LINE(5424)
																	::zpp_nape::callbacks::ZPP_CbSetPair_obj::zpp_pool = ret1->next;
																	HX_STACK_LINE(5424)
																	ret1->next = null();
																}
																HX_STACK_LINE(5424)
																ret1->zip_listeners = true;
															}
															HX_STACK_LINE(5424)
															::zpp_nape::callbacks::ZPP_CbSet tmp56 = cb1;		HX_STACK_VAR(tmp56,"tmp56");
															HX_STACK_LINE(5424)
															::zpp_nape::callbacks::ZPP_CbSet tmp57 = cb2;		HX_STACK_VAR(tmp57,"tmp57");
															HX_STACK_LINE(5424)
															bool tmp58 = ::zpp_nape::callbacks::ZPP_CbSet_obj::setlt(tmp56,tmp57);		HX_STACK_VAR(tmp58,"tmp58");
															HX_STACK_LINE(5424)
															if ((tmp58)){
																HX_STACK_LINE(5424)
																ret1->a = cb1;
																HX_STACK_LINE(5424)
																ret1->b = cb2;
															}
															else{
																HX_STACK_LINE(5424)
																ret1->a = cb2;
																HX_STACK_LINE(5424)
																ret1->b = cb1;
															}
															HX_STACK_LINE(5424)
															tmp55 = ret1;
														}
														HX_STACK_LINE(5424)
														ret = tmp55;
														HX_STACK_LINE(5424)
														::zpp_nape::callbacks::ZPP_CbSetPair tmp56 = ret;		HX_STACK_VAR(tmp56,"tmp56");
														HX_STACK_LINE(5424)
														cb1->cbpairs->add(tmp56);
														HX_STACK_LINE(5424)
														bool tmp57 = (cb2 != cb1);		HX_STACK_VAR(tmp57,"tmp57");
														HX_STACK_LINE(5424)
														if ((tmp57)){
															HX_STACK_LINE(5424)
															::zpp_nape::callbacks::ZPP_CbSetPair tmp58 = ret;		HX_STACK_VAR(tmp58,"tmp58");
															HX_STACK_LINE(5424)
															cb2->cbpairs->add(tmp58);
														}
													}
													HX_STACK_LINE(5424)
													{
														HX_STACK_LINE(5424)
														bool tmp55 = ret->zip_listeners;		HX_STACK_VAR(tmp55,"tmp55");
														HX_STACK_LINE(5424)
														if ((tmp55)){
															HX_STACK_LINE(5424)
															ret->zip_listeners = false;
															HX_STACK_LINE(5424)
															ret->__validate();
														}
													}
													HX_STACK_LINE(5424)
													tmp49 = ret;
												}
												HX_STACK_LINE(5424)
												::zpp_nape::callbacks::ZPP_CbSetPair _this = tmp49;		HX_STACK_VAR(_this,"_this");
												HX_STACK_LINE(5424)
												{
													HX_STACK_LINE(5424)
													::zpp_nape::util::ZNPNode_ZPP_InteractionListener tmp50 = _this->listeners->head;		HX_STACK_VAR(tmp50,"tmp50");
													HX_STACK_LINE(5424)
													::zpp_nape::util::ZNPNode_ZPP_InteractionListener cx_ite2 = tmp50;		HX_STACK_VAR(cx_ite2,"cx_ite2");
													HX_STACK_LINE(5424)
													while((true)){
														HX_STACK_LINE(5424)
														bool tmp51 = (cx_ite2 != null());		HX_STACK_VAR(tmp51,"tmp51");
														HX_STACK_LINE(5424)
														bool tmp52 = !(tmp51);		HX_STACK_VAR(tmp52,"tmp52");
														HX_STACK_LINE(5424)
														if ((tmp52)){
															HX_STACK_LINE(5424)
															break;
														}
														HX_STACK_LINE(5424)
														::zpp_nape::callbacks::ZPP_InteractionListener x = cx_ite2->elt;		HX_STACK_VAR(x,"x");
														HX_STACK_LINE(5424)
														{
															HX_STACK_LINE(5424)
															bool tmp53 = (x->event == event);		HX_STACK_VAR(tmp53,"tmp53");
															HX_STACK_LINE(5424)
															if ((tmp53)){
																HX_STACK_LINE(5424)
																::zpp_nape::callbacks::ZPP_InteractionListener tmp54 = x;		HX_STACK_VAR(tmp54,"tmp54");
																HX_STACK_LINE(5425)
																{
																	HX_STACK_LINE(5425)
																	int tmp55 = (int(tmp54->itype) & int(arb->type));		HX_STACK_VAR(tmp55,"tmp55");
																	HX_STACK_LINE(5425)
																	bool tmp56 = (tmp55 != (int)0);		HX_STACK_VAR(tmp56,"tmp56");
																	HX_STACK_LINE(5425)
																	bool tmp57;		HX_STACK_VAR(tmp57,"tmp57");
																	HX_STACK_LINE(5425)
																	if ((tmp56)){
																		HX_STACK_LINE(5425)
																		int tmp58 = tmp54->itype;		HX_STACK_VAR(tmp58,"tmp58");
																		HX_STACK_LINE(5425)
																		int tmp59 = tmp58;		HX_STACK_VAR(tmp59,"tmp59");
																		HX_STACK_LINE(5425)
																		tmp57 = callbackset->empty_arb(tmp59);
																	}
																	else{
																		HX_STACK_LINE(5425)
																		tmp57 = false;
																	}
																	HX_STACK_LINE(5425)
																	if ((tmp57)){
																		HX_STACK_LINE(5424)
																		::zpp_nape::callbacks::ZPP_InteractionListener tmp58 = tmp54;		HX_STACK_VAR(tmp58,"tmp58");
																		HX_STACK_LINE(5426)
																		::zpp_nape::callbacks::ZPP_Callback tmp59 = _g->push_callback(tmp58);		HX_STACK_VAR(tmp59,"tmp59");
																		HX_STACK_LINE(5426)
																		::zpp_nape::callbacks::ZPP_Callback cb = tmp59;		HX_STACK_VAR(cb,"cb");
																		HX_STACK_LINE(5427)
																		int tmp60 = ::zpp_nape::util::ZPP_Flags_obj::id_CbEvent_BEGIN;		HX_STACK_VAR(tmp60,"tmp60");
																		HX_STACK_LINE(5427)
																		cb->event = tmp60;
																		HX_STACK_LINE(5428)
																		{
																			HX_STACK_LINE(5428)
																			::zpp_nape::phys::ZPP_Interactor o1 = callbackset->int1;		HX_STACK_VAR(o1,"o1");
																			HX_STACK_LINE(5428)
																			::zpp_nape::phys::ZPP_Interactor o2 = callbackset->int2;		HX_STACK_VAR(o2,"o2");
																			HX_STACK_LINE(5428)
																			bool tmp61;		HX_STACK_VAR(tmp61,"tmp61");
																			HX_STACK_LINE(5428)
																			{
																				HX_STACK_LINE(5428)
																				::zpp_nape::callbacks::ZPP_OptionType _this1 = tmp54->options1;		HX_STACK_VAR(_this1,"_this1");
																				HX_STACK_LINE(5428)
																				::zpp_nape::util::ZNPList_ZPP_CbType xs = o1->cbTypes;		HX_STACK_VAR(xs,"xs");
																				HX_STACK_LINE(5428)
																				::zpp_nape::util::ZNPList_ZPP_CbType tmp62 = xs;		HX_STACK_VAR(tmp62,"tmp62");
																				HX_STACK_LINE(5428)
																				::zpp_nape::util::ZNPList_ZPP_CbType tmp63 = _this1->includes;		HX_STACK_VAR(tmp63,"tmp63");
																				HX_STACK_LINE(5428)
																				::zpp_nape::util::ZNPList_ZPP_CbType tmp64 = tmp62;		HX_STACK_VAR(tmp64,"tmp64");
																				HX_STACK_LINE(5428)
																				::zpp_nape::util::ZNPList_ZPP_CbType tmp65 = tmp63;		HX_STACK_VAR(tmp65,"tmp65");
																				HX_STACK_LINE(5428)
																				::zpp_nape::util::ZNPList_ZPP_CbType tmp66 = tmp64;		HX_STACK_VAR(tmp66,"tmp66");
																				HX_STACK_LINE(5428)
																				::zpp_nape::util::ZNPList_ZPP_CbType tmp67 = tmp65;		HX_STACK_VAR(tmp67,"tmp67");
																				HX_STACK_LINE(5428)
																				bool tmp68 = _this1->nonemptyintersection(tmp66,tmp67);		HX_STACK_VAR(tmp68,"tmp68");
																				HX_STACK_LINE(5428)
																				bool tmp69 = tmp68;		HX_STACK_VAR(tmp69,"tmp69");
																				HX_STACK_LINE(5428)
																				bool tmp70 = tmp69;		HX_STACK_VAR(tmp70,"tmp70");
																				HX_STACK_LINE(5428)
																				if ((tmp70)){
																					HX_STACK_LINE(5428)
																					::zpp_nape::util::ZNPList_ZPP_CbType tmp71 = xs;		HX_STACK_VAR(tmp71,"tmp71");
																					HX_STACK_LINE(5428)
																					::zpp_nape::util::ZNPList_ZPP_CbType tmp72 = _this1->excludes;		HX_STACK_VAR(tmp72,"tmp72");
																					HX_STACK_LINE(5428)
																					::zpp_nape::util::ZNPList_ZPP_CbType tmp73 = tmp71;		HX_STACK_VAR(tmp73,"tmp73");
																					HX_STACK_LINE(5428)
																					::zpp_nape::util::ZNPList_ZPP_CbType tmp74 = tmp72;		HX_STACK_VAR(tmp74,"tmp74");
																					HX_STACK_LINE(5428)
																					::zpp_nape::util::ZNPList_ZPP_CbType tmp75 = tmp73;		HX_STACK_VAR(tmp75,"tmp75");
																					HX_STACK_LINE(5428)
																					::zpp_nape::util::ZNPList_ZPP_CbType tmp76 = tmp74;		HX_STACK_VAR(tmp76,"tmp76");
																					HX_STACK_LINE(5428)
																					bool tmp77 = _this1->nonemptyintersection(tmp75,tmp76);		HX_STACK_VAR(tmp77,"tmp77");
																					HX_STACK_LINE(5428)
																					bool tmp78 = tmp77;		HX_STACK_VAR(tmp78,"tmp78");
																					HX_STACK_LINE(5428)
																					bool tmp79 = tmp78;		HX_STACK_VAR(tmp79,"tmp79");
																					HX_STACK_LINE(5428)
																					bool tmp80 = tmp79;		HX_STACK_VAR(tmp80,"tmp80");
																					HX_STACK_LINE(5428)
																					bool tmp81 = tmp80;		HX_STACK_VAR(tmp81,"tmp81");
																					HX_STACK_LINE(5428)
																					tmp61 = !(tmp81);
																				}
																				else{
																					HX_STACK_LINE(5428)
																					tmp61 = false;
																				}
																			}
																			HX_STACK_LINE(5428)
																			bool tmp62;		HX_STACK_VAR(tmp62,"tmp62");
																			HX_STACK_LINE(5428)
																			if ((tmp61)){
																				HX_STACK_LINE(5428)
																				::zpp_nape::callbacks::ZPP_OptionType _this1 = tmp54->options2;		HX_STACK_VAR(_this1,"_this1");
																				HX_STACK_LINE(5428)
																				::zpp_nape::util::ZNPList_ZPP_CbType xs = o2->cbTypes;		HX_STACK_VAR(xs,"xs");
																				HX_STACK_LINE(5428)
																				::zpp_nape::util::ZNPList_ZPP_CbType tmp63 = xs;		HX_STACK_VAR(tmp63,"tmp63");
																				HX_STACK_LINE(5428)
																				::zpp_nape::util::ZNPList_ZPP_CbType tmp64 = _this1->includes;		HX_STACK_VAR(tmp64,"tmp64");
																				HX_STACK_LINE(5428)
																				::zpp_nape::util::ZNPList_ZPP_CbType tmp65 = tmp63;		HX_STACK_VAR(tmp65,"tmp65");
																				HX_STACK_LINE(5428)
																				::zpp_nape::util::ZNPList_ZPP_CbType tmp66 = tmp64;		HX_STACK_VAR(tmp66,"tmp66");
																				HX_STACK_LINE(5428)
																				::zpp_nape::util::ZNPList_ZPP_CbType tmp67 = tmp65;		HX_STACK_VAR(tmp67,"tmp67");
																				HX_STACK_LINE(5428)
																				::zpp_nape::util::ZNPList_ZPP_CbType tmp68 = tmp66;		HX_STACK_VAR(tmp68,"tmp68");
																				HX_STACK_LINE(5428)
																				bool tmp69 = _this1->nonemptyintersection(tmp67,tmp68);		HX_STACK_VAR(tmp69,"tmp69");
																				HX_STACK_LINE(5428)
																				bool tmp70 = tmp69;		HX_STACK_VAR(tmp70,"tmp70");
																				HX_STACK_LINE(5428)
																				bool tmp71 = tmp70;		HX_STACK_VAR(tmp71,"tmp71");
																				HX_STACK_LINE(5428)
																				if ((tmp71)){
																					HX_STACK_LINE(5428)
																					::zpp_nape::util::ZNPList_ZPP_CbType tmp72 = xs;		HX_STACK_VAR(tmp72,"tmp72");
																					HX_STACK_LINE(5428)
																					::zpp_nape::util::ZNPList_ZPP_CbType tmp73 = _this1->excludes;		HX_STACK_VAR(tmp73,"tmp73");
																					HX_STACK_LINE(5428)
																					::zpp_nape::util::ZNPList_ZPP_CbType tmp74 = tmp72;		HX_STACK_VAR(tmp74,"tmp74");
																					HX_STACK_LINE(5428)
																					::zpp_nape::util::ZNPList_ZPP_CbType tmp75 = tmp73;		HX_STACK_VAR(tmp75,"tmp75");
																					HX_STACK_LINE(5428)
																					::zpp_nape::util::ZNPList_ZPP_CbType tmp76 = tmp74;		HX_STACK_VAR(tmp76,"tmp76");
																					HX_STACK_LINE(5428)
																					::zpp_nape::util::ZNPList_ZPP_CbType tmp77 = tmp75;		HX_STACK_VAR(tmp77,"tmp77");
																					HX_STACK_LINE(5428)
																					bool tmp78 = _this1->nonemptyintersection(tmp76,tmp77);		HX_STACK_VAR(tmp78,"tmp78");
																					HX_STACK_LINE(5428)
																					bool tmp79 = tmp78;		HX_STACK_VAR(tmp79,"tmp79");
																					HX_STACK_LINE(5428)
																					bool tmp80 = tmp79;		HX_STACK_VAR(tmp80,"tmp80");
																					HX_STACK_LINE(5428)
																					bool tmp81 = tmp80;		HX_STACK_VAR(tmp81,"tmp81");
																					HX_STACK_LINE(5428)
																					bool tmp82 = tmp81;		HX_STACK_VAR(tmp82,"tmp82");
																					HX_STACK_LINE(5428)
																					tmp62 = !(tmp82);
																				}
																				else{
																					HX_STACK_LINE(5428)
																					tmp62 = false;
																				}
																			}
																			else{
																				HX_STACK_LINE(5428)
																				tmp62 = false;
																			}
																			HX_STACK_LINE(5428)
																			if ((tmp62)){
																				HX_STACK_LINE(5428)
																				cb->int1 = o1;
																				HX_STACK_LINE(5428)
																				cb->int2 = o2;
																			}
																			else{
																				HX_STACK_LINE(5428)
																				cb->int1 = o2;
																				HX_STACK_LINE(5428)
																				cb->int2 = o1;
																			}
																		}
																		HX_STACK_LINE(5429)
																		cb->set = callbackset;
																	}
																}
															}
														}
														HX_STACK_LINE(5424)
														cx_ite2 = cx_ite2->next;
													}
												}
											}
										}
										HX_STACK_LINE(5432)
										bool tmp48;		HX_STACK_VAR(tmp48,"tmp48");
										HX_STACK_LINE(5432)
										{
											HX_STACK_LINE(5432)
											bool ret;		HX_STACK_VAR(ret,"ret");
											HX_STACK_LINE(5432)
											{
												HX_STACK_LINE(5432)
												ret = false;
												HX_STACK_LINE(5432)
												{
													HX_STACK_LINE(5432)
													::zpp_nape::util::ZNPNode_ZPP_Arbiter tmp49 = callbackset->arbiters->head;		HX_STACK_VAR(tmp49,"tmp49");
													HX_STACK_LINE(5432)
													::zpp_nape::util::ZNPNode_ZPP_Arbiter cx_ite2 = tmp49;		HX_STACK_VAR(cx_ite2,"cx_ite2");
													HX_STACK_LINE(5432)
													while((true)){
														HX_STACK_LINE(5432)
														bool tmp50 = (cx_ite2 != null());		HX_STACK_VAR(tmp50,"tmp50");
														HX_STACK_LINE(5432)
														bool tmp51 = !(tmp50);		HX_STACK_VAR(tmp51,"tmp51");
														HX_STACK_LINE(5432)
														if ((tmp51)){
															HX_STACK_LINE(5432)
															break;
														}
														HX_STACK_LINE(5432)
														::zpp_nape::dynamics::ZPP_Arbiter npite = cx_ite2->elt;		HX_STACK_VAR(npite,"npite");
														HX_STACK_LINE(5432)
														{
															HX_STACK_LINE(5432)
															bool tmp52 = (npite == arb);		HX_STACK_VAR(tmp52,"tmp52");
															HX_STACK_LINE(5432)
															if ((tmp52)){
																HX_STACK_LINE(5432)
																ret = true;
																HX_STACK_LINE(5432)
																break;
															}
														}
														HX_STACK_LINE(5432)
														cx_ite2 = cx_ite2->next;
													}
												}
											}
											HX_STACK_LINE(5432)
											tmp48 = ret;
										}
										HX_STACK_LINE(5432)
										bool tmp49 = !(tmp48);		HX_STACK_VAR(tmp49,"tmp49");
										HX_STACK_LINE(5432)
										bool tmp50;		HX_STACK_VAR(tmp50,"tmp50");
										HX_STACK_LINE(5432)
										if ((tmp49)){
											HX_STACK_LINE(5432)
											{
												HX_STACK_LINE(5432)
												::zpp_nape::util::ZNPList_ZPP_Arbiter _this = callbackset->arbiters;		HX_STACK_VAR(_this,"_this");
												HX_STACK_LINE(5432)
												::zpp_nape::util::ZNPNode_ZPP_Arbiter tmp51;		HX_STACK_VAR(tmp51,"tmp51");
												HX_STACK_LINE(5432)
												{
													HX_STACK_LINE(5432)
													::zpp_nape::util::ZNPNode_ZPP_Arbiter ret;		HX_STACK_VAR(ret,"ret");
													HX_STACK_LINE(5432)
													{
														HX_STACK_LINE(5432)
														::zpp_nape::util::ZNPNode_ZPP_Arbiter tmp52 = ::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool;		HX_STACK_VAR(tmp52,"tmp52");
														HX_STACK_LINE(5432)
														bool tmp53 = (tmp52 == null());		HX_STACK_VAR(tmp53,"tmp53");
														HX_STACK_LINE(5432)
														if ((tmp53)){
															HX_STACK_LINE(5432)
															::zpp_nape::util::ZNPNode_ZPP_Arbiter tmp54 = ::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::__new();		HX_STACK_VAR(tmp54,"tmp54");
															HX_STACK_LINE(5432)
															ret = tmp54;
														}
														else{
															HX_STACK_LINE(5432)
															::zpp_nape::util::ZNPNode_ZPP_Arbiter tmp54 = ::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool;		HX_STACK_VAR(tmp54,"tmp54");
															HX_STACK_LINE(5432)
															ret = tmp54;
															HX_STACK_LINE(5432)
															::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool = ret->next;
															HX_STACK_LINE(5432)
															ret->next = null();
														}
														HX_STACK_LINE(5432)
														Dynamic();
													}
													HX_STACK_LINE(5432)
													ret->elt = arb;
													HX_STACK_LINE(5432)
													tmp51 = ret;
												}
												HX_STACK_LINE(5432)
												::zpp_nape::util::ZNPNode_ZPP_Arbiter temp = tmp51;		HX_STACK_VAR(temp,"temp");
												HX_STACK_LINE(5432)
												temp->next = _this->head;
												HX_STACK_LINE(5432)
												_this->head = temp;
												HX_STACK_LINE(5432)
												_this->modified = true;
												HX_STACK_LINE(5432)
												(_this->length)++;
												HX_STACK_LINE(5432)
												arb;
											}
											HX_STACK_LINE(5432)
											tmp50 = true;
										}
										else{
											HX_STACK_LINE(5432)
											tmp50 = false;
										}
										HX_STACK_LINE(5432)
										if ((tmp50)){
											HX_STACK_LINE(5432)
											(arb->present)++;
										}
									}
									else{
										HX_STACK_LINE(5435)
										(arb->present)--;
										HX_STACK_LINE(5452)
										::zpp_nape::dynamics::ZPP_Arbiter tmp47 = arb;		HX_STACK_VAR(tmp47,"tmp47");
										HX_STACK_LINE(5452)
										callbackset->remove_arb(tmp47);
										HX_STACK_LINE(5453)
										{
											HX_STACK_LINE(5453)
											int tmp48 = ::zpp_nape::util::ZPP_Flags_obj::id_CbEvent_END;		HX_STACK_VAR(tmp48,"tmp48");
											HX_STACK_LINE(5453)
											int event = tmp48;		HX_STACK_VAR(event,"event");
											HX_STACK_LINE(5453)
											{
												HX_STACK_LINE(5453)
												::zpp_nape::callbacks::ZPP_CbSetPair tmp49;		HX_STACK_VAR(tmp49,"tmp49");
												HX_STACK_LINE(5453)
												{
													HX_STACK_LINE(5453)
													::zpp_nape::callbacks::ZPP_CbSetPair ret = null();		HX_STACK_VAR(ret,"ret");
													HX_STACK_LINE(5453)
													int tmp50 = cb1->cbpairs->length;		HX_STACK_VAR(tmp50,"tmp50");
													HX_STACK_LINE(5453)
													int tmp51 = cb2->cbpairs->length;		HX_STACK_VAR(tmp51,"tmp51");
													HX_STACK_LINE(5453)
													bool tmp52 = (tmp50 < tmp51);		HX_STACK_VAR(tmp52,"tmp52");
													HX_STACK_LINE(5453)
													::zpp_nape::util::ZNPList_ZPP_CbSetPair tmp53;		HX_STACK_VAR(tmp53,"tmp53");
													HX_STACK_LINE(5453)
													if ((tmp52)){
														HX_STACK_LINE(5453)
														tmp53 = cb1->cbpairs;
													}
													else{
														HX_STACK_LINE(5453)
														tmp53 = cb2->cbpairs;
													}
													HX_STACK_LINE(5453)
													::zpp_nape::util::ZNPList_ZPP_CbSetPair pairs = tmp53;		HX_STACK_VAR(pairs,"pairs");
													HX_STACK_LINE(5453)
													{
														HX_STACK_LINE(5453)
														::zpp_nape::util::ZNPNode_ZPP_CbSetPair cx_ite2 = pairs->head;		HX_STACK_VAR(cx_ite2,"cx_ite2");
														HX_STACK_LINE(5453)
														while((true)){
															HX_STACK_LINE(5453)
															bool tmp54 = (cx_ite2 != null());		HX_STACK_VAR(tmp54,"tmp54");
															HX_STACK_LINE(5453)
															bool tmp55 = !(tmp54);		HX_STACK_VAR(tmp55,"tmp55");
															HX_STACK_LINE(5453)
															if ((tmp55)){
																HX_STACK_LINE(5453)
																break;
															}
															HX_STACK_LINE(5453)
															::zpp_nape::callbacks::ZPP_CbSetPair p = cx_ite2->elt;		HX_STACK_VAR(p,"p");
															HX_STACK_LINE(5453)
															{
																HX_STACK_LINE(5453)
																bool tmp56 = (p->a == cb1);		HX_STACK_VAR(tmp56,"tmp56");
																HX_STACK_LINE(5453)
																bool tmp57 = tmp56;		HX_STACK_VAR(tmp57,"tmp57");
																HX_STACK_LINE(5453)
																bool tmp58;		HX_STACK_VAR(tmp58,"tmp58");
																HX_STACK_LINE(5453)
																if ((tmp57)){
																	HX_STACK_LINE(5453)
																	tmp58 = (p->b == cb2);
																}
																else{
																	HX_STACK_LINE(5453)
																	tmp58 = false;
																}
																HX_STACK_LINE(5453)
																bool tmp59 = !(tmp58);		HX_STACK_VAR(tmp59,"tmp59");
																HX_STACK_LINE(5453)
																bool tmp60;		HX_STACK_VAR(tmp60,"tmp60");
																HX_STACK_LINE(5453)
																if ((tmp59)){
																	HX_STACK_LINE(5453)
																	bool tmp61 = (p->a == cb2);		HX_STACK_VAR(tmp61,"tmp61");
																	HX_STACK_LINE(5453)
																	bool tmp62 = tmp61;		HX_STACK_VAR(tmp62,"tmp62");
																	HX_STACK_LINE(5453)
																	bool tmp63 = tmp62;		HX_STACK_VAR(tmp63,"tmp63");
																	HX_STACK_LINE(5453)
																	if ((tmp63)){
																		HX_STACK_LINE(5453)
																		tmp60 = (p->b == cb1);
																	}
																	else{
																		HX_STACK_LINE(5453)
																		tmp60 = false;
																	}
																}
																else{
																	HX_STACK_LINE(5453)
																	tmp60 = true;
																}
																HX_STACK_LINE(5453)
																if ((tmp60)){
																	HX_STACK_LINE(5453)
																	ret = p;
																	HX_STACK_LINE(5453)
																	break;
																}
															}
															HX_STACK_LINE(5453)
															cx_ite2 = cx_ite2->next;
														}
													}
													HX_STACK_LINE(5453)
													bool tmp54 = (ret == null());		HX_STACK_VAR(tmp54,"tmp54");
													HX_STACK_LINE(5453)
													if ((tmp54)){
														HX_STACK_LINE(5453)
														::zpp_nape::callbacks::ZPP_CbSetPair tmp55;		HX_STACK_VAR(tmp55,"tmp55");
														HX_STACK_LINE(5453)
														{
															HX_STACK_LINE(5453)
															::zpp_nape::callbacks::ZPP_CbSetPair ret1;		HX_STACK_VAR(ret1,"ret1");
															HX_STACK_LINE(5453)
															{
																HX_STACK_LINE(5453)
																::zpp_nape::callbacks::ZPP_CbSetPair tmp56 = ::zpp_nape::callbacks::ZPP_CbSetPair_obj::zpp_pool;		HX_STACK_VAR(tmp56,"tmp56");
																HX_STACK_LINE(5453)
																bool tmp57 = (tmp56 == null());		HX_STACK_VAR(tmp57,"tmp57");
																HX_STACK_LINE(5453)
																if ((tmp57)){
																	HX_STACK_LINE(5453)
																	::zpp_nape::callbacks::ZPP_CbSetPair tmp58 = ::zpp_nape::callbacks::ZPP_CbSetPair_obj::__new();		HX_STACK_VAR(tmp58,"tmp58");
																	HX_STACK_LINE(5453)
																	ret1 = tmp58;
																}
																else{
																	HX_STACK_LINE(5453)
																	::zpp_nape::callbacks::ZPP_CbSetPair tmp58 = ::zpp_nape::callbacks::ZPP_CbSetPair_obj::zpp_pool;		HX_STACK_VAR(tmp58,"tmp58");
																	HX_STACK_LINE(5453)
																	ret1 = tmp58;
																	HX_STACK_LINE(5453)
																	::zpp_nape::callbacks::ZPP_CbSetPair_obj::zpp_pool = ret1->next;
																	HX_STACK_LINE(5453)
																	ret1->next = null();
																}
																HX_STACK_LINE(5453)
																ret1->zip_listeners = true;
															}
															HX_STACK_LINE(5453)
															::zpp_nape::callbacks::ZPP_CbSet tmp56 = cb1;		HX_STACK_VAR(tmp56,"tmp56");
															HX_STACK_LINE(5453)
															::zpp_nape::callbacks::ZPP_CbSet tmp57 = cb2;		HX_STACK_VAR(tmp57,"tmp57");
															HX_STACK_LINE(5453)
															bool tmp58 = ::zpp_nape::callbacks::ZPP_CbSet_obj::setlt(tmp56,tmp57);		HX_STACK_VAR(tmp58,"tmp58");
															HX_STACK_LINE(5453)
															if ((tmp58)){
																HX_STACK_LINE(5453)
																ret1->a = cb1;
																HX_STACK_LINE(5453)
																ret1->b = cb2;
															}
															else{
																HX_STACK_LINE(5453)
																ret1->a = cb2;
																HX_STACK_LINE(5453)
																ret1->b = cb1;
															}
															HX_STACK_LINE(5453)
															tmp55 = ret1;
														}
														HX_STACK_LINE(5453)
														ret = tmp55;
														HX_STACK_LINE(5453)
														::zpp_nape::callbacks::ZPP_CbSetPair tmp56 = ret;		HX_STACK_VAR(tmp56,"tmp56");
														HX_STACK_LINE(5453)
														cb1->cbpairs->add(tmp56);
														HX_STACK_LINE(5453)
														bool tmp57 = (cb2 != cb1);		HX_STACK_VAR(tmp57,"tmp57");
														HX_STACK_LINE(5453)
														if ((tmp57)){
															HX_STACK_LINE(5453)
															::zpp_nape::callbacks::ZPP_CbSetPair tmp58 = ret;		HX_STACK_VAR(tmp58,"tmp58");
															HX_STACK_LINE(5453)
															cb2->cbpairs->add(tmp58);
														}
													}
													HX_STACK_LINE(5453)
													{
														HX_STACK_LINE(5453)
														bool tmp55 = ret->zip_listeners;		HX_STACK_VAR(tmp55,"tmp55");
														HX_STACK_LINE(5453)
														if ((tmp55)){
															HX_STACK_LINE(5453)
															ret->zip_listeners = false;
															HX_STACK_LINE(5453)
															ret->__validate();
														}
													}
													HX_STACK_LINE(5453)
													tmp49 = ret;
												}
												HX_STACK_LINE(5453)
												::zpp_nape::callbacks::ZPP_CbSetPair _this = tmp49;		HX_STACK_VAR(_this,"_this");
												HX_STACK_LINE(5453)
												{
													HX_STACK_LINE(5453)
													::zpp_nape::util::ZNPNode_ZPP_InteractionListener tmp50 = _this->listeners->head;		HX_STACK_VAR(tmp50,"tmp50");
													HX_STACK_LINE(5453)
													::zpp_nape::util::ZNPNode_ZPP_InteractionListener cx_ite2 = tmp50;		HX_STACK_VAR(cx_ite2,"cx_ite2");
													HX_STACK_LINE(5453)
													while((true)){
														HX_STACK_LINE(5453)
														bool tmp51 = (cx_ite2 != null());		HX_STACK_VAR(tmp51,"tmp51");
														HX_STACK_LINE(5453)
														bool tmp52 = !(tmp51);		HX_STACK_VAR(tmp52,"tmp52");
														HX_STACK_LINE(5453)
														if ((tmp52)){
															HX_STACK_LINE(5453)
															break;
														}
														HX_STACK_LINE(5453)
														::zpp_nape::callbacks::ZPP_InteractionListener x = cx_ite2->elt;		HX_STACK_VAR(x,"x");
														HX_STACK_LINE(5453)
														{
															HX_STACK_LINE(5453)
															bool tmp53 = (x->event == event);		HX_STACK_VAR(tmp53,"tmp53");
															HX_STACK_LINE(5453)
															if ((tmp53)){
																HX_STACK_LINE(5453)
																::zpp_nape::callbacks::ZPP_InteractionListener tmp54 = x;		HX_STACK_VAR(tmp54,"tmp54");
																HX_STACK_LINE(5454)
																{
																	HX_STACK_LINE(5454)
																	int tmp55 = (int(tmp54->itype) & int(arb->type));		HX_STACK_VAR(tmp55,"tmp55");
																	HX_STACK_LINE(5454)
																	bool tmp56 = (tmp55 != (int)0);		HX_STACK_VAR(tmp56,"tmp56");
																	HX_STACK_LINE(5454)
																	bool tmp57;		HX_STACK_VAR(tmp57,"tmp57");
																	HX_STACK_LINE(5454)
																	if ((tmp56)){
																		HX_STACK_LINE(5454)
																		int tmp58 = tmp54->itype;		HX_STACK_VAR(tmp58,"tmp58");
																		HX_STACK_LINE(5454)
																		int tmp59 = tmp58;		HX_STACK_VAR(tmp59,"tmp59");
																		HX_STACK_LINE(5454)
																		tmp57 = callbackset->empty_arb(tmp59);
																	}
																	else{
																		HX_STACK_LINE(5454)
																		tmp57 = false;
																	}
																	HX_STACK_LINE(5454)
																	if ((tmp57)){
																		HX_STACK_LINE(5453)
																		::zpp_nape::callbacks::ZPP_InteractionListener tmp58 = tmp54;		HX_STACK_VAR(tmp58,"tmp58");
																		HX_STACK_LINE(5455)
																		::zpp_nape::callbacks::ZPP_Callback tmp59 = _g->push_callback(tmp58);		HX_STACK_VAR(tmp59,"tmp59");
																		HX_STACK_LINE(5455)
																		::zpp_nape::callbacks::ZPP_Callback cb = tmp59;		HX_STACK_VAR(cb,"cb");
																		HX_STACK_LINE(5456)
																		int tmp60 = ::zpp_nape::util::ZPP_Flags_obj::id_CbEvent_END;		HX_STACK_VAR(tmp60,"tmp60");
																		HX_STACK_LINE(5456)
																		cb->event = tmp60;
																		HX_STACK_LINE(5457)
																		{
																			HX_STACK_LINE(5457)
																			::zpp_nape::phys::ZPP_Interactor o1 = callbackset->int1;		HX_STACK_VAR(o1,"o1");
																			HX_STACK_LINE(5457)
																			::zpp_nape::phys::ZPP_Interactor o2 = callbackset->int2;		HX_STACK_VAR(o2,"o2");
																			HX_STACK_LINE(5457)
																			bool tmp61;		HX_STACK_VAR(tmp61,"tmp61");
																			HX_STACK_LINE(5457)
																			{
																				HX_STACK_LINE(5457)
																				::zpp_nape::callbacks::ZPP_OptionType _this1 = tmp54->options1;		HX_STACK_VAR(_this1,"_this1");
																				HX_STACK_LINE(5457)
																				::zpp_nape::util::ZNPList_ZPP_CbType xs = o1->cbTypes;		HX_STACK_VAR(xs,"xs");
																				HX_STACK_LINE(5457)
																				::zpp_nape::util::ZNPList_ZPP_CbType tmp62 = xs;		HX_STACK_VAR(tmp62,"tmp62");
																				HX_STACK_LINE(5457)
																				::zpp_nape::util::ZNPList_ZPP_CbType tmp63 = _this1->includes;		HX_STACK_VAR(tmp63,"tmp63");
																				HX_STACK_LINE(5457)
																				::zpp_nape::util::ZNPList_ZPP_CbType tmp64 = tmp62;		HX_STACK_VAR(tmp64,"tmp64");
																				HX_STACK_LINE(5457)
																				::zpp_nape::util::ZNPList_ZPP_CbType tmp65 = tmp63;		HX_STACK_VAR(tmp65,"tmp65");
																				HX_STACK_LINE(5457)
																				::zpp_nape::util::ZNPList_ZPP_CbType tmp66 = tmp64;		HX_STACK_VAR(tmp66,"tmp66");
																				HX_STACK_LINE(5457)
																				::zpp_nape::util::ZNPList_ZPP_CbType tmp67 = tmp65;		HX_STACK_VAR(tmp67,"tmp67");
																				HX_STACK_LINE(5457)
																				bool tmp68 = _this1->nonemptyintersection(tmp66,tmp67);		HX_STACK_VAR(tmp68,"tmp68");
																				HX_STACK_LINE(5457)
																				bool tmp69 = tmp68;		HX_STACK_VAR(tmp69,"tmp69");
																				HX_STACK_LINE(5457)
																				bool tmp70 = tmp69;		HX_STACK_VAR(tmp70,"tmp70");
																				HX_STACK_LINE(5457)
																				if ((tmp70)){
																					HX_STACK_LINE(5457)
																					::zpp_nape::util::ZNPList_ZPP_CbType tmp71 = xs;		HX_STACK_VAR(tmp71,"tmp71");
																					HX_STACK_LINE(5457)
																					::zpp_nape::util::ZNPList_ZPP_CbType tmp72 = _this1->excludes;		HX_STACK_VAR(tmp72,"tmp72");
																					HX_STACK_LINE(5457)
																					::zpp_nape::util::ZNPList_ZPP_CbType tmp73 = tmp71;		HX_STACK_VAR(tmp73,"tmp73");
																					HX_STACK_LINE(5457)
																					::zpp_nape::util::ZNPList_ZPP_CbType tmp74 = tmp72;		HX_STACK_VAR(tmp74,"tmp74");
																					HX_STACK_LINE(5457)
																					::zpp_nape::util::ZNPList_ZPP_CbType tmp75 = tmp73;		HX_STACK_VAR(tmp75,"tmp75");
																					HX_STACK_LINE(5457)
																					::zpp_nape::util::ZNPList_ZPP_CbType tmp76 = tmp74;		HX_STACK_VAR(tmp76,"tmp76");
																					HX_STACK_LINE(5457)
																					bool tmp77 = _this1->nonemptyintersection(tmp75,tmp76);		HX_STACK_VAR(tmp77,"tmp77");
																					HX_STACK_LINE(5457)
																					bool tmp78 = tmp77;		HX_STACK_VAR(tmp78,"tmp78");
																					HX_STACK_LINE(5457)
																					bool tmp79 = tmp78;		HX_STACK_VAR(tmp79,"tmp79");
																					HX_STACK_LINE(5457)
																					bool tmp80 = tmp79;		HX_STACK_VAR(tmp80,"tmp80");
																					HX_STACK_LINE(5457)
																					bool tmp81 = tmp80;		HX_STACK_VAR(tmp81,"tmp81");
																					HX_STACK_LINE(5457)
																					tmp61 = !(tmp81);
																				}
																				else{
																					HX_STACK_LINE(5457)
																					tmp61 = false;
																				}
																			}
																			HX_STACK_LINE(5457)
																			bool tmp62;		HX_STACK_VAR(tmp62,"tmp62");
																			HX_STACK_LINE(5457)
																			if ((tmp61)){
																				HX_STACK_LINE(5457)
																				::zpp_nape::callbacks::ZPP_OptionType _this1 = tmp54->options2;		HX_STACK_VAR(_this1,"_this1");
																				HX_STACK_LINE(5457)
																				::zpp_nape::util::ZNPList_ZPP_CbType xs = o2->cbTypes;		HX_STACK_VAR(xs,"xs");
																				HX_STACK_LINE(5457)
																				::zpp_nape::util::ZNPList_ZPP_CbType tmp63 = xs;		HX_STACK_VAR(tmp63,"tmp63");
																				HX_STACK_LINE(5457)
																				::zpp_nape::util::ZNPList_ZPP_CbType tmp64 = _this1->includes;		HX_STACK_VAR(tmp64,"tmp64");
																				HX_STACK_LINE(5457)
																				::zpp_nape::util::ZNPList_ZPP_CbType tmp65 = tmp63;		HX_STACK_VAR(tmp65,"tmp65");
																				HX_STACK_LINE(5457)
																				::zpp_nape::util::ZNPList_ZPP_CbType tmp66 = tmp64;		HX_STACK_VAR(tmp66,"tmp66");
																				HX_STACK_LINE(5457)
																				::zpp_nape::util::ZNPList_ZPP_CbType tmp67 = tmp65;		HX_STACK_VAR(tmp67,"tmp67");
																				HX_STACK_LINE(5457)
																				::zpp_nape::util::ZNPList_ZPP_CbType tmp68 = tmp66;		HX_STACK_VAR(tmp68,"tmp68");
																				HX_STACK_LINE(5457)
																				bool tmp69 = _this1->nonemptyintersection(tmp67,tmp68);		HX_STACK_VAR(tmp69,"tmp69");
																				HX_STACK_LINE(5457)
																				bool tmp70 = tmp69;		HX_STACK_VAR(tmp70,"tmp70");
																				HX_STACK_LINE(5457)
																				bool tmp71 = tmp70;		HX_STACK_VAR(tmp71,"tmp71");
																				HX_STACK_LINE(5457)
																				if ((tmp71)){
																					HX_STACK_LINE(5457)
																					::zpp_nape::util::ZNPList_ZPP_CbType tmp72 = xs;		HX_STACK_VAR(tmp72,"tmp72");
																					HX_STACK_LINE(5457)
																					::zpp_nape::util::ZNPList_ZPP_CbType tmp73 = _this1->excludes;		HX_STACK_VAR(tmp73,"tmp73");
																					HX_STACK_LINE(5457)
																					::zpp_nape::util::ZNPList_ZPP_CbType tmp74 = tmp72;		HX_STACK_VAR(tmp74,"tmp74");
																					HX_STACK_LINE(5457)
																					::zpp_nape::util::ZNPList_ZPP_CbType tmp75 = tmp73;		HX_STACK_VAR(tmp75,"tmp75");
																					HX_STACK_LINE(5457)
																					::zpp_nape::util::ZNPList_ZPP_CbType tmp76 = tmp74;		HX_STACK_VAR(tmp76,"tmp76");
																					HX_STACK_LINE(5457)
																					::zpp_nape::util::ZNPList_ZPP_CbType tmp77 = tmp75;		HX_STACK_VAR(tmp77,"tmp77");
																					HX_STACK_LINE(5457)
																					bool tmp78 = _this1->nonemptyintersection(tmp76,tmp77);		HX_STACK_VAR(tmp78,"tmp78");
																					HX_STACK_LINE(5457)
																					bool tmp79 = tmp78;		HX_STACK_VAR(tmp79,"tmp79");
																					HX_STACK_LINE(5457)
																					bool tmp80 = tmp79;		HX_STACK_VAR(tmp80,"tmp80");
																					HX_STACK_LINE(5457)
																					bool tmp81 = tmp80;		HX_STACK_VAR(tmp81,"tmp81");
																					HX_STACK_LINE(5457)
																					bool tmp82 = tmp81;		HX_STACK_VAR(tmp82,"tmp82");
																					HX_STACK_LINE(5457)
																					tmp62 = !(tmp82);
																				}
																				else{
																					HX_STACK_LINE(5457)
																					tmp62 = false;
																				}
																			}
																			else{
																				HX_STACK_LINE(5457)
																				tmp62 = false;
																			}
																			HX_STACK_LINE(5457)
																			if ((tmp62)){
																				HX_STACK_LINE(5457)
																				cb->int1 = o1;
																				HX_STACK_LINE(5457)
																				cb->int2 = o2;
																			}
																			else{
																				HX_STACK_LINE(5457)
																				cb->int1 = o2;
																				HX_STACK_LINE(5457)
																				cb->int2 = o1;
																			}
																		}
																		HX_STACK_LINE(5458)
																		cb->set = callbackset;
																	}
																}
															}
														}
														HX_STACK_LINE(5453)
														cx_ite2 = cx_ite2->next;
													}
												}
											}
										}
										HX_STACK_LINE(5461)
										::zpp_nape::util::ZNPNode_ZPP_Arbiter tmp48 = callbackset->arbiters->head;		HX_STACK_VAR(tmp48,"tmp48");
										HX_STACK_LINE(5461)
										bool tmp49 = (tmp48 == null());		HX_STACK_VAR(tmp49,"tmp49");
										HX_STACK_LINE(5461)
										if ((tmp49)){
											HX_STACK_LINE(5462)
											::zpp_nape::space::ZPP_CallbackSet tmp50 = callbackset;		HX_STACK_VAR(tmp50,"tmp50");
											HX_STACK_LINE(5462)
											this->remove_callbackset(tmp50);
										}
									}
								}
								HX_STACK_LINE(5466)
								cx_ite1 = cx_ite1->next;
							}
						}
						HX_STACK_LINE(5470)
						cx_ite = cx_ite->next;
					}
				}
			}
			HX_STACK_LINE(5474)
			arb->fresh = false;
			HX_STACK_LINE(5475)
			arb->intchange = false;
		}
		HX_STACK_LINE(5477)
		bool tmp12 = arb->cleared;		HX_STACK_VAR(tmp12,"tmp12");
		HX_STACK_LINE(5477)
		bool tmp13 = !(tmp12);		HX_STACK_VAR(tmp13,"tmp13");
		HX_STACK_LINE(5477)
		bool tmp14;		HX_STACK_VAR(tmp14,"tmp14");
		HX_STACK_LINE(5477)
		if ((tmp13)){
			HX_STACK_LINE(5477)
			int tmp15 = arb->up_stamp;		HX_STACK_VAR(tmp15,"tmp15");
			HX_STACK_LINE(5477)
			int tmp16 = arb->type;		HX_STACK_VAR(tmp16,"tmp16");
			HX_STACK_LINE(5477)
			int tmp17 = ::zpp_nape::dynamics::ZPP_Arbiter_obj::COL;		HX_STACK_VAR(tmp17,"tmp17");
			HX_STACK_LINE(5477)
			int tmp18 = tmp17;		HX_STACK_VAR(tmp18,"tmp18");
			HX_STACK_LINE(5477)
			bool tmp19 = (tmp16 == tmp18);		HX_STACK_VAR(tmp19,"tmp19");
			HX_STACK_LINE(5477)
			bool tmp20 = tmp19;		HX_STACK_VAR(tmp20,"tmp20");
			HX_STACK_LINE(5477)
			int tmp21;		HX_STACK_VAR(tmp21,"tmp21");
			HX_STACK_LINE(5477)
			bool tmp22 = tmp20;		HX_STACK_VAR(tmp22,"tmp22");
			HX_STACK_LINE(5477)
			if ((tmp22)){
				HX_STACK_LINE(5477)
				int tmp23 = ::nape::Config_obj::arbiterExpirationDelay;		HX_STACK_VAR(tmp23,"tmp23");
				HX_STACK_LINE(5477)
				tmp21 = tmp23;
			}
			else{
				HX_STACK_LINE(5477)
				tmp21 = (int)0;
			}
			HX_STACK_LINE(5477)
			int tmp23 = (tmp15 + tmp21);		HX_STACK_VAR(tmp23,"tmp23");
			HX_STACK_LINE(5477)
			int tmp24 = tmp23;		HX_STACK_VAR(tmp24,"tmp24");
			HX_STACK_LINE(5477)
			int tmp25 = this->stamp;		HX_STACK_VAR(tmp25,"tmp25");
			HX_STACK_LINE(5477)
			int tmp26 = tmp25;		HX_STACK_VAR(tmp26,"tmp26");
			HX_STACK_LINE(5477)
			tmp14 = (tmp24 < tmp26);
		}
		else{
			HX_STACK_LINE(5477)
			tmp14 = true;
		}
		HX_STACK_LINE(5477)
		if ((tmp14)){
			HX_STACK_LINE(5478)
			int tmp15 = arb->type;		HX_STACK_VAR(tmp15,"tmp15");
			HX_STACK_LINE(5478)
			int tmp16 = ::zpp_nape::dynamics::ZPP_Arbiter_obj::SENSOR;		HX_STACK_VAR(tmp16,"tmp16");
			HX_STACK_LINE(5478)
			bool tmp17 = (tmp15 == tmp16);		HX_STACK_VAR(tmp17,"tmp17");
			HX_STACK_LINE(5478)
			if ((tmp17)){
				HX_STACK_LINE(5478)
				::zpp_nape::dynamics::ZPP_SensorArbiter _this = arb->sensorarb;		HX_STACK_VAR(_this,"_this");
				HX_STACK_LINE(5478)
				{
					HX_STACK_LINE(5478)
					bool tmp18 = _this->cleared;		HX_STACK_VAR(tmp18,"tmp18");
					HX_STACK_LINE(5478)
					bool tmp19 = !(tmp18);		HX_STACK_VAR(tmp19,"tmp19");
					HX_STACK_LINE(5478)
					if ((tmp19)){
						HX_STACK_LINE(5478)
						{
							HX_STACK_LINE(5478)
							::zpp_nape::util::ZNPList_ZPP_Arbiter tmp20 = _this->b1->arbiters;		HX_STACK_VAR(tmp20,"tmp20");
							HX_STACK_LINE(5478)
							::zpp_nape::util::ZNPList_ZPP_Arbiter _this1 = tmp20;		HX_STACK_VAR(_this1,"_this1");
							HX_STACK_LINE(5478)
							{
								HX_STACK_LINE(5478)
								::zpp_nape::util::ZNPNode_ZPP_Arbiter pre = null();		HX_STACK_VAR(pre,"pre");
								HX_STACK_LINE(5478)
								::zpp_nape::util::ZNPNode_ZPP_Arbiter cur = _this1->head;		HX_STACK_VAR(cur,"cur");
								HX_STACK_LINE(5478)
								bool ret = false;		HX_STACK_VAR(ret,"ret");
								HX_STACK_LINE(5478)
								while((true)){
									HX_STACK_LINE(5478)
									bool tmp21 = (cur != null());		HX_STACK_VAR(tmp21,"tmp21");
									HX_STACK_LINE(5478)
									bool tmp22 = !(tmp21);		HX_STACK_VAR(tmp22,"tmp22");
									HX_STACK_LINE(5478)
									if ((tmp22)){
										HX_STACK_LINE(5478)
										break;
									}
									HX_STACK_LINE(5478)
									bool tmp23 = (cur->elt == _this);		HX_STACK_VAR(tmp23,"tmp23");
									HX_STACK_LINE(5478)
									if ((tmp23)){
										HX_STACK_LINE(5478)
										{
											HX_STACK_LINE(5478)
											::zpp_nape::util::ZNPNode_ZPP_Arbiter old;		HX_STACK_VAR(old,"old");
											HX_STACK_LINE(5478)
											::zpp_nape::util::ZNPNode_ZPP_Arbiter ret1;		HX_STACK_VAR(ret1,"ret1");
											HX_STACK_LINE(5478)
											bool tmp24 = (pre == null());		HX_STACK_VAR(tmp24,"tmp24");
											HX_STACK_LINE(5478)
											if ((tmp24)){
												HX_STACK_LINE(5478)
												old = _this1->head;
												HX_STACK_LINE(5478)
												ret1 = old->next;
												HX_STACK_LINE(5478)
												_this1->head = ret1;
												HX_STACK_LINE(5478)
												bool tmp25 = (_this1->head == null());		HX_STACK_VAR(tmp25,"tmp25");
												HX_STACK_LINE(5478)
												if ((tmp25)){
													HX_STACK_LINE(5478)
													_this1->pushmod = true;
												}
											}
											else{
												HX_STACK_LINE(5478)
												old = pre->next;
												HX_STACK_LINE(5478)
												ret1 = old->next;
												HX_STACK_LINE(5478)
												pre->next = ret1;
												HX_STACK_LINE(5478)
												bool tmp25 = (ret1 == null());		HX_STACK_VAR(tmp25,"tmp25");
												HX_STACK_LINE(5478)
												if ((tmp25)){
													HX_STACK_LINE(5478)
													_this1->pushmod = true;
												}
											}
											HX_STACK_LINE(5478)
											{
												HX_STACK_LINE(5478)
												::zpp_nape::util::ZNPNode_ZPP_Arbiter o = old;		HX_STACK_VAR(o,"o");
												HX_STACK_LINE(5478)
												o->elt = null();
												HX_STACK_LINE(5478)
												::zpp_nape::util::ZNPNode_ZPP_Arbiter tmp25 = ::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool;		HX_STACK_VAR(tmp25,"tmp25");
												HX_STACK_LINE(5478)
												o->next = tmp25;
												HX_STACK_LINE(5478)
												::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool = o;
											}
											HX_STACK_LINE(5478)
											_this1->modified = true;
											HX_STACK_LINE(5478)
											(_this1->length)--;
											HX_STACK_LINE(5478)
											_this1->pushmod = true;
											HX_STACK_LINE(5478)
											ret1;
										}
										HX_STACK_LINE(5478)
										ret = true;
										HX_STACK_LINE(5478)
										break;
									}
									HX_STACK_LINE(5478)
									pre = cur;
									HX_STACK_LINE(5478)
									cur = cur->next;
								}
								HX_STACK_LINE(5478)
								ret;
							}
						}
						HX_STACK_LINE(5478)
						{
							HX_STACK_LINE(5478)
							::zpp_nape::util::ZNPList_ZPP_Arbiter tmp20 = _this->b2->arbiters;		HX_STACK_VAR(tmp20,"tmp20");
							HX_STACK_LINE(5478)
							::zpp_nape::util::ZNPList_ZPP_Arbiter _this1 = tmp20;		HX_STACK_VAR(_this1,"_this1");
							HX_STACK_LINE(5478)
							{
								HX_STACK_LINE(5478)
								::zpp_nape::util::ZNPNode_ZPP_Arbiter pre = null();		HX_STACK_VAR(pre,"pre");
								HX_STACK_LINE(5478)
								::zpp_nape::util::ZNPNode_ZPP_Arbiter cur = _this1->head;		HX_STACK_VAR(cur,"cur");
								HX_STACK_LINE(5478)
								bool ret = false;		HX_STACK_VAR(ret,"ret");
								HX_STACK_LINE(5478)
								while((true)){
									HX_STACK_LINE(5478)
									bool tmp21 = (cur != null());		HX_STACK_VAR(tmp21,"tmp21");
									HX_STACK_LINE(5478)
									bool tmp22 = !(tmp21);		HX_STACK_VAR(tmp22,"tmp22");
									HX_STACK_LINE(5478)
									if ((tmp22)){
										HX_STACK_LINE(5478)
										break;
									}
									HX_STACK_LINE(5478)
									bool tmp23 = (cur->elt == _this);		HX_STACK_VAR(tmp23,"tmp23");
									HX_STACK_LINE(5478)
									if ((tmp23)){
										HX_STACK_LINE(5478)
										{
											HX_STACK_LINE(5478)
											::zpp_nape::util::ZNPNode_ZPP_Arbiter old;		HX_STACK_VAR(old,"old");
											HX_STACK_LINE(5478)
											::zpp_nape::util::ZNPNode_ZPP_Arbiter ret1;		HX_STACK_VAR(ret1,"ret1");
											HX_STACK_LINE(5478)
											bool tmp24 = (pre == null());		HX_STACK_VAR(tmp24,"tmp24");
											HX_STACK_LINE(5478)
											if ((tmp24)){
												HX_STACK_LINE(5478)
												old = _this1->head;
												HX_STACK_LINE(5478)
												ret1 = old->next;
												HX_STACK_LINE(5478)
												_this1->head = ret1;
												HX_STACK_LINE(5478)
												bool tmp25 = (_this1->head == null());		HX_STACK_VAR(tmp25,"tmp25");
												HX_STACK_LINE(5478)
												if ((tmp25)){
													HX_STACK_LINE(5478)
													_this1->pushmod = true;
												}
											}
											else{
												HX_STACK_LINE(5478)
												old = pre->next;
												HX_STACK_LINE(5478)
												ret1 = old->next;
												HX_STACK_LINE(5478)
												pre->next = ret1;
												HX_STACK_LINE(5478)
												bool tmp25 = (ret1 == null());		HX_STACK_VAR(tmp25,"tmp25");
												HX_STACK_LINE(5478)
												if ((tmp25)){
													HX_STACK_LINE(5478)
													_this1->pushmod = true;
												}
											}
											HX_STACK_LINE(5478)
											{
												HX_STACK_LINE(5478)
												::zpp_nape::util::ZNPNode_ZPP_Arbiter o = old;		HX_STACK_VAR(o,"o");
												HX_STACK_LINE(5478)
												o->elt = null();
												HX_STACK_LINE(5478)
												::zpp_nape::util::ZNPNode_ZPP_Arbiter tmp25 = ::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool;		HX_STACK_VAR(tmp25,"tmp25");
												HX_STACK_LINE(5478)
												o->next = tmp25;
												HX_STACK_LINE(5478)
												::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool = o;
											}
											HX_STACK_LINE(5478)
											_this1->modified = true;
											HX_STACK_LINE(5478)
											(_this1->length)--;
											HX_STACK_LINE(5478)
											_this1->pushmod = true;
											HX_STACK_LINE(5478)
											ret1;
										}
										HX_STACK_LINE(5478)
										ret = true;
										HX_STACK_LINE(5478)
										break;
									}
									HX_STACK_LINE(5478)
									pre = cur;
									HX_STACK_LINE(5478)
									cur = cur->next;
								}
								HX_STACK_LINE(5478)
								ret;
							}
						}
						HX_STACK_LINE(5478)
						bool tmp20 = (_this->pair != null());		HX_STACK_VAR(tmp20,"tmp20");
						HX_STACK_LINE(5478)
						if ((tmp20)){
							HX_STACK_LINE(5478)
							_this->pair->arb = null();
							HX_STACK_LINE(5478)
							_this->pair = null();
						}
					}
					HX_STACK_LINE(5478)
					::zpp_nape::phys::ZPP_Body tmp20 = _this->b2 = null();		HX_STACK_VAR(tmp20,"tmp20");
					HX_STACK_LINE(5478)
					_this->b1 = tmp20;
					HX_STACK_LINE(5478)
					_this->active = false;
					HX_STACK_LINE(5478)
					_this->intchange = false;
				}
				HX_STACK_LINE(5478)
				{
					HX_STACK_LINE(5478)
					::zpp_nape::dynamics::ZPP_SensorArbiter o = _this;		HX_STACK_VAR(o,"o");
					HX_STACK_LINE(5478)
					::zpp_nape::dynamics::ZPP_SensorArbiter tmp18 = ::zpp_nape::dynamics::ZPP_SensorArbiter_obj::zpp_pool;		HX_STACK_VAR(tmp18,"tmp18");
					HX_STACK_LINE(5478)
					o->next = tmp18;
					HX_STACK_LINE(5478)
					::zpp_nape::dynamics::ZPP_SensorArbiter_obj::zpp_pool = o;
				}
			}
			else{
				HX_STACK_LINE(5479)
				int tmp18 = arb->type;		HX_STACK_VAR(tmp18,"tmp18");
				HX_STACK_LINE(5479)
				int tmp19 = ::zpp_nape::dynamics::ZPP_Arbiter_obj::FLUID;		HX_STACK_VAR(tmp19,"tmp19");
				HX_STACK_LINE(5479)
				bool tmp20 = (tmp18 == tmp19);		HX_STACK_VAR(tmp20,"tmp20");
				HX_STACK_LINE(5479)
				if ((tmp20)){
					HX_STACK_LINE(5479)
					::zpp_nape::dynamics::ZPP_FluidArbiter _this = arb->fluidarb;		HX_STACK_VAR(_this,"_this");
					HX_STACK_LINE(5479)
					{
						HX_STACK_LINE(5479)
						bool tmp21 = _this->cleared;		HX_STACK_VAR(tmp21,"tmp21");
						HX_STACK_LINE(5479)
						bool tmp22 = !(tmp21);		HX_STACK_VAR(tmp22,"tmp22");
						HX_STACK_LINE(5479)
						if ((tmp22)){
							HX_STACK_LINE(5479)
							{
								HX_STACK_LINE(5479)
								::zpp_nape::util::ZNPList_ZPP_Arbiter tmp23 = _this->b1->arbiters;		HX_STACK_VAR(tmp23,"tmp23");
								HX_STACK_LINE(5479)
								::zpp_nape::util::ZNPList_ZPP_Arbiter _this1 = tmp23;		HX_STACK_VAR(_this1,"_this1");
								HX_STACK_LINE(5479)
								{
									HX_STACK_LINE(5479)
									::zpp_nape::util::ZNPNode_ZPP_Arbiter pre = null();		HX_STACK_VAR(pre,"pre");
									HX_STACK_LINE(5479)
									::zpp_nape::util::ZNPNode_ZPP_Arbiter cur = _this1->head;		HX_STACK_VAR(cur,"cur");
									HX_STACK_LINE(5479)
									bool ret = false;		HX_STACK_VAR(ret,"ret");
									HX_STACK_LINE(5479)
									while((true)){
										HX_STACK_LINE(5479)
										bool tmp24 = (cur != null());		HX_STACK_VAR(tmp24,"tmp24");
										HX_STACK_LINE(5479)
										bool tmp25 = !(tmp24);		HX_STACK_VAR(tmp25,"tmp25");
										HX_STACK_LINE(5479)
										if ((tmp25)){
											HX_STACK_LINE(5479)
											break;
										}
										HX_STACK_LINE(5479)
										bool tmp26 = (cur->elt == _this);		HX_STACK_VAR(tmp26,"tmp26");
										HX_STACK_LINE(5479)
										if ((tmp26)){
											HX_STACK_LINE(5479)
											{
												HX_STACK_LINE(5479)
												::zpp_nape::util::ZNPNode_ZPP_Arbiter old;		HX_STACK_VAR(old,"old");
												HX_STACK_LINE(5479)
												::zpp_nape::util::ZNPNode_ZPP_Arbiter ret1;		HX_STACK_VAR(ret1,"ret1");
												HX_STACK_LINE(5479)
												bool tmp27 = (pre == null());		HX_STACK_VAR(tmp27,"tmp27");
												HX_STACK_LINE(5479)
												if ((tmp27)){
													HX_STACK_LINE(5479)
													old = _this1->head;
													HX_STACK_LINE(5479)
													ret1 = old->next;
													HX_STACK_LINE(5479)
													_this1->head = ret1;
													HX_STACK_LINE(5479)
													bool tmp28 = (_this1->head == null());		HX_STACK_VAR(tmp28,"tmp28");
													HX_STACK_LINE(5479)
													if ((tmp28)){
														HX_STACK_LINE(5479)
														_this1->pushmod = true;
													}
												}
												else{
													HX_STACK_LINE(5479)
													old = pre->next;
													HX_STACK_LINE(5479)
													ret1 = old->next;
													HX_STACK_LINE(5479)
													pre->next = ret1;
													HX_STACK_LINE(5479)
													bool tmp28 = (ret1 == null());		HX_STACK_VAR(tmp28,"tmp28");
													HX_STACK_LINE(5479)
													if ((tmp28)){
														HX_STACK_LINE(5479)
														_this1->pushmod = true;
													}
												}
												HX_STACK_LINE(5479)
												{
													HX_STACK_LINE(5479)
													::zpp_nape::util::ZNPNode_ZPP_Arbiter o = old;		HX_STACK_VAR(o,"o");
													HX_STACK_LINE(5479)
													o->elt = null();
													HX_STACK_LINE(5479)
													::zpp_nape::util::ZNPNode_ZPP_Arbiter tmp28 = ::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool;		HX_STACK_VAR(tmp28,"tmp28");
													HX_STACK_LINE(5479)
													o->next = tmp28;
													HX_STACK_LINE(5479)
													::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool = o;
												}
												HX_STACK_LINE(5479)
												_this1->modified = true;
												HX_STACK_LINE(5479)
												(_this1->length)--;
												HX_STACK_LINE(5479)
												_this1->pushmod = true;
												HX_STACK_LINE(5479)
												ret1;
											}
											HX_STACK_LINE(5479)
											ret = true;
											HX_STACK_LINE(5479)
											break;
										}
										HX_STACK_LINE(5479)
										pre = cur;
										HX_STACK_LINE(5479)
										cur = cur->next;
									}
									HX_STACK_LINE(5479)
									ret;
								}
							}
							HX_STACK_LINE(5479)
							{
								HX_STACK_LINE(5479)
								::zpp_nape::util::ZNPList_ZPP_Arbiter tmp23 = _this->b2->arbiters;		HX_STACK_VAR(tmp23,"tmp23");
								HX_STACK_LINE(5479)
								::zpp_nape::util::ZNPList_ZPP_Arbiter _this1 = tmp23;		HX_STACK_VAR(_this1,"_this1");
								HX_STACK_LINE(5479)
								{
									HX_STACK_LINE(5479)
									::zpp_nape::util::ZNPNode_ZPP_Arbiter pre = null();		HX_STACK_VAR(pre,"pre");
									HX_STACK_LINE(5479)
									::zpp_nape::util::ZNPNode_ZPP_Arbiter cur = _this1->head;		HX_STACK_VAR(cur,"cur");
									HX_STACK_LINE(5479)
									bool ret = false;		HX_STACK_VAR(ret,"ret");
									HX_STACK_LINE(5479)
									while((true)){
										HX_STACK_LINE(5479)
										bool tmp24 = (cur != null());		HX_STACK_VAR(tmp24,"tmp24");
										HX_STACK_LINE(5479)
										bool tmp25 = !(tmp24);		HX_STACK_VAR(tmp25,"tmp25");
										HX_STACK_LINE(5479)
										if ((tmp25)){
											HX_STACK_LINE(5479)
											break;
										}
										HX_STACK_LINE(5479)
										bool tmp26 = (cur->elt == _this);		HX_STACK_VAR(tmp26,"tmp26");
										HX_STACK_LINE(5479)
										if ((tmp26)){
											HX_STACK_LINE(5479)
											{
												HX_STACK_LINE(5479)
												::zpp_nape::util::ZNPNode_ZPP_Arbiter old;		HX_STACK_VAR(old,"old");
												HX_STACK_LINE(5479)
												::zpp_nape::util::ZNPNode_ZPP_Arbiter ret1;		HX_STACK_VAR(ret1,"ret1");
												HX_STACK_LINE(5479)
												bool tmp27 = (pre == null());		HX_STACK_VAR(tmp27,"tmp27");
												HX_STACK_LINE(5479)
												if ((tmp27)){
													HX_STACK_LINE(5479)
													old = _this1->head;
													HX_STACK_LINE(5479)
													ret1 = old->next;
													HX_STACK_LINE(5479)
													_this1->head = ret1;
													HX_STACK_LINE(5479)
													bool tmp28 = (_this1->head == null());		HX_STACK_VAR(tmp28,"tmp28");
													HX_STACK_LINE(5479)
													if ((tmp28)){
														HX_STACK_LINE(5479)
														_this1->pushmod = true;
													}
												}
												else{
													HX_STACK_LINE(5479)
													old = pre->next;
													HX_STACK_LINE(5479)
													ret1 = old->next;
													HX_STACK_LINE(5479)
													pre->next = ret1;
													HX_STACK_LINE(5479)
													bool tmp28 = (ret1 == null());		HX_STACK_VAR(tmp28,"tmp28");
													HX_STACK_LINE(5479)
													if ((tmp28)){
														HX_STACK_LINE(5479)
														_this1->pushmod = true;
													}
												}
												HX_STACK_LINE(5479)
												{
													HX_STACK_LINE(5479)
													::zpp_nape::util::ZNPNode_ZPP_Arbiter o = old;		HX_STACK_VAR(o,"o");
													HX_STACK_LINE(5479)
													o->elt = null();
													HX_STACK_LINE(5479)
													::zpp_nape::util::ZNPNode_ZPP_Arbiter tmp28 = ::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool;		HX_STACK_VAR(tmp28,"tmp28");
													HX_STACK_LINE(5479)
													o->next = tmp28;
													HX_STACK_LINE(5479)
													::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool = o;
												}
												HX_STACK_LINE(5479)
												_this1->modified = true;
												HX_STACK_LINE(5479)
												(_this1->length)--;
												HX_STACK_LINE(5479)
												_this1->pushmod = true;
												HX_STACK_LINE(5479)
												ret1;
											}
											HX_STACK_LINE(5479)
											ret = true;
											HX_STACK_LINE(5479)
											break;
										}
										HX_STACK_LINE(5479)
										pre = cur;
										HX_STACK_LINE(5479)
										cur = cur->next;
									}
									HX_STACK_LINE(5479)
									ret;
								}
							}
							HX_STACK_LINE(5479)
							bool tmp23 = (_this->pair != null());		HX_STACK_VAR(tmp23,"tmp23");
							HX_STACK_LINE(5479)
							if ((tmp23)){
								HX_STACK_LINE(5479)
								_this->pair->arb = null();
								HX_STACK_LINE(5479)
								_this->pair = null();
							}
						}
						HX_STACK_LINE(5479)
						::zpp_nape::phys::ZPP_Body tmp23 = _this->b2 = null();		HX_STACK_VAR(tmp23,"tmp23");
						HX_STACK_LINE(5479)
						_this->b1 = tmp23;
						HX_STACK_LINE(5479)
						_this->active = false;
						HX_STACK_LINE(5479)
						_this->intchange = false;
					}
					HX_STACK_LINE(5479)
					{
						HX_STACK_LINE(5479)
						::zpp_nape::dynamics::ZPP_FluidArbiter o = _this;		HX_STACK_VAR(o,"o");
						HX_STACK_LINE(5479)
						::zpp_nape::dynamics::ZPP_FluidArbiter tmp21 = ::zpp_nape::dynamics::ZPP_FluidArbiter_obj::zpp_pool;		HX_STACK_VAR(tmp21,"tmp21");
						HX_STACK_LINE(5479)
						o->next = tmp21;
						HX_STACK_LINE(5479)
						::zpp_nape::dynamics::ZPP_FluidArbiter_obj::zpp_pool = o;
					}
					HX_STACK_LINE(5479)
					_this->pre_dt = ((Float)-1.0);
				}
				else{
					HX_STACK_LINE(5480)
					::zpp_nape::dynamics::ZPP_ColArbiter _this = arb->colarb;		HX_STACK_VAR(_this,"_this");
					HX_STACK_LINE(5480)
					{
						HX_STACK_LINE(5480)
						bool tmp21 = _this->cleared;		HX_STACK_VAR(tmp21,"tmp21");
						HX_STACK_LINE(5480)
						bool tmp22 = !(tmp21);		HX_STACK_VAR(tmp22,"tmp22");
						HX_STACK_LINE(5480)
						if ((tmp22)){
							HX_STACK_LINE(5480)
							{
								HX_STACK_LINE(5480)
								::zpp_nape::util::ZNPList_ZPP_Arbiter tmp23 = _this->b1->arbiters;		HX_STACK_VAR(tmp23,"tmp23");
								HX_STACK_LINE(5480)
								::zpp_nape::util::ZNPList_ZPP_Arbiter _this1 = tmp23;		HX_STACK_VAR(_this1,"_this1");
								HX_STACK_LINE(5480)
								{
									HX_STACK_LINE(5480)
									::zpp_nape::util::ZNPNode_ZPP_Arbiter pre = null();		HX_STACK_VAR(pre,"pre");
									HX_STACK_LINE(5480)
									::zpp_nape::util::ZNPNode_ZPP_Arbiter cur = _this1->head;		HX_STACK_VAR(cur,"cur");
									HX_STACK_LINE(5480)
									bool ret = false;		HX_STACK_VAR(ret,"ret");
									HX_STACK_LINE(5480)
									while((true)){
										HX_STACK_LINE(5480)
										bool tmp24 = (cur != null());		HX_STACK_VAR(tmp24,"tmp24");
										HX_STACK_LINE(5480)
										bool tmp25 = !(tmp24);		HX_STACK_VAR(tmp25,"tmp25");
										HX_STACK_LINE(5480)
										if ((tmp25)){
											HX_STACK_LINE(5480)
											break;
										}
										HX_STACK_LINE(5480)
										bool tmp26 = (cur->elt == _this);		HX_STACK_VAR(tmp26,"tmp26");
										HX_STACK_LINE(5480)
										if ((tmp26)){
											HX_STACK_LINE(5480)
											{
												HX_STACK_LINE(5480)
												::zpp_nape::util::ZNPNode_ZPP_Arbiter old;		HX_STACK_VAR(old,"old");
												HX_STACK_LINE(5480)
												::zpp_nape::util::ZNPNode_ZPP_Arbiter ret1;		HX_STACK_VAR(ret1,"ret1");
												HX_STACK_LINE(5480)
												bool tmp27 = (pre == null());		HX_STACK_VAR(tmp27,"tmp27");
												HX_STACK_LINE(5480)
												if ((tmp27)){
													HX_STACK_LINE(5480)
													old = _this1->head;
													HX_STACK_LINE(5480)
													ret1 = old->next;
													HX_STACK_LINE(5480)
													_this1->head = ret1;
													HX_STACK_LINE(5480)
													bool tmp28 = (_this1->head == null());		HX_STACK_VAR(tmp28,"tmp28");
													HX_STACK_LINE(5480)
													if ((tmp28)){
														HX_STACK_LINE(5480)
														_this1->pushmod = true;
													}
												}
												else{
													HX_STACK_LINE(5480)
													old = pre->next;
													HX_STACK_LINE(5480)
													ret1 = old->next;
													HX_STACK_LINE(5480)
													pre->next = ret1;
													HX_STACK_LINE(5480)
													bool tmp28 = (ret1 == null());		HX_STACK_VAR(tmp28,"tmp28");
													HX_STACK_LINE(5480)
													if ((tmp28)){
														HX_STACK_LINE(5480)
														_this1->pushmod = true;
													}
												}
												HX_STACK_LINE(5480)
												{
													HX_STACK_LINE(5480)
													::zpp_nape::util::ZNPNode_ZPP_Arbiter o = old;		HX_STACK_VAR(o,"o");
													HX_STACK_LINE(5480)
													o->elt = null();
													HX_STACK_LINE(5480)
													::zpp_nape::util::ZNPNode_ZPP_Arbiter tmp28 = ::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool;		HX_STACK_VAR(tmp28,"tmp28");
													HX_STACK_LINE(5480)
													o->next = tmp28;
													HX_STACK_LINE(5480)
													::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool = o;
												}
												HX_STACK_LINE(5480)
												_this1->modified = true;
												HX_STACK_LINE(5480)
												(_this1->length)--;
												HX_STACK_LINE(5480)
												_this1->pushmod = true;
												HX_STACK_LINE(5480)
												ret1;
											}
											HX_STACK_LINE(5480)
											ret = true;
											HX_STACK_LINE(5480)
											break;
										}
										HX_STACK_LINE(5480)
										pre = cur;
										HX_STACK_LINE(5480)
										cur = cur->next;
									}
									HX_STACK_LINE(5480)
									ret;
								}
							}
							HX_STACK_LINE(5480)
							{
								HX_STACK_LINE(5480)
								::zpp_nape::util::ZNPList_ZPP_Arbiter tmp23 = _this->b2->arbiters;		HX_STACK_VAR(tmp23,"tmp23");
								HX_STACK_LINE(5480)
								::zpp_nape::util::ZNPList_ZPP_Arbiter _this1 = tmp23;		HX_STACK_VAR(_this1,"_this1");
								HX_STACK_LINE(5480)
								{
									HX_STACK_LINE(5480)
									::zpp_nape::util::ZNPNode_ZPP_Arbiter pre = null();		HX_STACK_VAR(pre,"pre");
									HX_STACK_LINE(5480)
									::zpp_nape::util::ZNPNode_ZPP_Arbiter cur = _this1->head;		HX_STACK_VAR(cur,"cur");
									HX_STACK_LINE(5480)
									bool ret = false;		HX_STACK_VAR(ret,"ret");
									HX_STACK_LINE(5480)
									while((true)){
										HX_STACK_LINE(5480)
										bool tmp24 = (cur != null());		HX_STACK_VAR(tmp24,"tmp24");
										HX_STACK_LINE(5480)
										bool tmp25 = !(tmp24);		HX_STACK_VAR(tmp25,"tmp25");
										HX_STACK_LINE(5480)
										if ((tmp25)){
											HX_STACK_LINE(5480)
											break;
										}
										HX_STACK_LINE(5480)
										bool tmp26 = (cur->elt == _this);		HX_STACK_VAR(tmp26,"tmp26");
										HX_STACK_LINE(5480)
										if ((tmp26)){
											HX_STACK_LINE(5480)
											{
												HX_STACK_LINE(5480)
												::zpp_nape::util::ZNPNode_ZPP_Arbiter old;		HX_STACK_VAR(old,"old");
												HX_STACK_LINE(5480)
												::zpp_nape::util::ZNPNode_ZPP_Arbiter ret1;		HX_STACK_VAR(ret1,"ret1");
												HX_STACK_LINE(5480)
												bool tmp27 = (pre == null());		HX_STACK_VAR(tmp27,"tmp27");
												HX_STACK_LINE(5480)
												if ((tmp27)){
													HX_STACK_LINE(5480)
													old = _this1->head;
													HX_STACK_LINE(5480)
													ret1 = old->next;
													HX_STACK_LINE(5480)
													_this1->head = ret1;
													HX_STACK_LINE(5480)
													bool tmp28 = (_this1->head == null());		HX_STACK_VAR(tmp28,"tmp28");
													HX_STACK_LINE(5480)
													if ((tmp28)){
														HX_STACK_LINE(5480)
														_this1->pushmod = true;
													}
												}
												else{
													HX_STACK_LINE(5480)
													old = pre->next;
													HX_STACK_LINE(5480)
													ret1 = old->next;
													HX_STACK_LINE(5480)
													pre->next = ret1;
													HX_STACK_LINE(5480)
													bool tmp28 = (ret1 == null());		HX_STACK_VAR(tmp28,"tmp28");
													HX_STACK_LINE(5480)
													if ((tmp28)){
														HX_STACK_LINE(5480)
														_this1->pushmod = true;
													}
												}
												HX_STACK_LINE(5480)
												{
													HX_STACK_LINE(5480)
													::zpp_nape::util::ZNPNode_ZPP_Arbiter o = old;		HX_STACK_VAR(o,"o");
													HX_STACK_LINE(5480)
													o->elt = null();
													HX_STACK_LINE(5480)
													::zpp_nape::util::ZNPNode_ZPP_Arbiter tmp28 = ::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool;		HX_STACK_VAR(tmp28,"tmp28");
													HX_STACK_LINE(5480)
													o->next = tmp28;
													HX_STACK_LINE(5480)
													::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool = o;
												}
												HX_STACK_LINE(5480)
												_this1->modified = true;
												HX_STACK_LINE(5480)
												(_this1->length)--;
												HX_STACK_LINE(5480)
												_this1->pushmod = true;
												HX_STACK_LINE(5480)
												ret1;
											}
											HX_STACK_LINE(5480)
											ret = true;
											HX_STACK_LINE(5480)
											break;
										}
										HX_STACK_LINE(5480)
										pre = cur;
										HX_STACK_LINE(5480)
										cur = cur->next;
									}
									HX_STACK_LINE(5480)
									ret;
								}
							}
							HX_STACK_LINE(5480)
							bool tmp23 = (_this->pair != null());		HX_STACK_VAR(tmp23,"tmp23");
							HX_STACK_LINE(5480)
							if ((tmp23)){
								HX_STACK_LINE(5480)
								_this->pair->arb = null();
								HX_STACK_LINE(5480)
								_this->pair = null();
							}
						}
						HX_STACK_LINE(5480)
						::zpp_nape::phys::ZPP_Body tmp23 = _this->b2 = null();		HX_STACK_VAR(tmp23,"tmp23");
						HX_STACK_LINE(5480)
						_this->b1 = tmp23;
						HX_STACK_LINE(5480)
						_this->active = false;
						HX_STACK_LINE(5480)
						_this->intchange = false;
					}
					HX_STACK_LINE(5480)
					while((true)){
						HX_STACK_LINE(5480)
						::zpp_nape::dynamics::ZPP_Contact tmp21 = _this->contacts->next;		HX_STACK_VAR(tmp21,"tmp21");
						HX_STACK_LINE(5480)
						bool tmp22 = (tmp21 == null());		HX_STACK_VAR(tmp22,"tmp22");
						HX_STACK_LINE(5480)
						bool tmp23 = !(tmp22);		HX_STACK_VAR(tmp23,"tmp23");
						HX_STACK_LINE(5480)
						bool tmp24 = !(tmp23);		HX_STACK_VAR(tmp24,"tmp24");
						HX_STACK_LINE(5480)
						if ((tmp24)){
							HX_STACK_LINE(5480)
							break;
						}
						HX_STACK_LINE(5480)
						{
							HX_STACK_LINE(5480)
							::zpp_nape::dynamics::ZPP_Contact tmp25;		HX_STACK_VAR(tmp25,"tmp25");
							HX_STACK_LINE(5480)
							{
								HX_STACK_LINE(5480)
								::zpp_nape::dynamics::ZPP_Contact _this1 = _this->contacts;		HX_STACK_VAR(_this1,"_this1");
								HX_STACK_LINE(5480)
								::zpp_nape::dynamics::ZPP_Contact ret = _this1->next;		HX_STACK_VAR(ret,"ret");
								HX_STACK_LINE(5480)
								_this1->pop();
								HX_STACK_LINE(5480)
								tmp25 = ret;
							}
							HX_STACK_LINE(5480)
							::zpp_nape::dynamics::ZPP_Contact o = tmp25;		HX_STACK_VAR(o,"o");
							HX_STACK_LINE(5480)
							o->arbiter = null();
							HX_STACK_LINE(5480)
							::zpp_nape::dynamics::ZPP_Contact tmp26 = ::zpp_nape::dynamics::ZPP_Contact_obj::zpp_pool;		HX_STACK_VAR(tmp26,"tmp26");
							HX_STACK_LINE(5480)
							o->next = tmp26;
							HX_STACK_LINE(5480)
							::zpp_nape::dynamics::ZPP_Contact_obj::zpp_pool = o;
						}
						HX_STACK_LINE(5480)
						{
							HX_STACK_LINE(5480)
							::zpp_nape::dynamics::ZPP_IContact _this1 = _this->innards;		HX_STACK_VAR(_this1,"_this1");
							HX_STACK_LINE(5480)
							::zpp_nape::dynamics::ZPP_IContact ret = _this1->next;		HX_STACK_VAR(ret,"ret");
							HX_STACK_LINE(5480)
							_this1->next = ret->next;
							HX_STACK_LINE(5480)
							ret->_inuse = false;
							HX_STACK_LINE(5480)
							bool tmp25 = (_this1->next == null());		HX_STACK_VAR(tmp25,"tmp25");
							HX_STACK_LINE(5480)
							if ((tmp25)){
								HX_STACK_LINE(5480)
								_this1->pushmod = true;
							}
							HX_STACK_LINE(5480)
							_this1->modified = true;
							HX_STACK_LINE(5480)
							(_this1->length)--;
						}
					}
					HX_STACK_LINE(5480)
					{
						HX_STACK_LINE(5480)
						::zpp_nape::dynamics::ZPP_ColArbiter o = _this;		HX_STACK_VAR(o,"o");
						HX_STACK_LINE(5480)
						{
							HX_STACK_LINE(5480)
							o->userdef_dyn_fric = false;
							HX_STACK_LINE(5480)
							o->userdef_stat_fric = false;
							HX_STACK_LINE(5480)
							o->userdef_restitution = false;
							HX_STACK_LINE(5480)
							o->userdef_rfric = false;
							HX_STACK_LINE(5480)
							::zpp_nape::shape::ZPP_Edge tmp21 = o->__ref_edge2 = null();		HX_STACK_VAR(tmp21,"tmp21");
							HX_STACK_LINE(5480)
							o->__ref_edge1 = tmp21;
						}
						HX_STACK_LINE(5480)
						::zpp_nape::dynamics::ZPP_ColArbiter tmp21 = ::zpp_nape::dynamics::ZPP_ColArbiter_obj::zpp_pool;		HX_STACK_VAR(tmp21,"tmp21");
						HX_STACK_LINE(5480)
						o->next = tmp21;
						HX_STACK_LINE(5480)
						::zpp_nape::dynamics::ZPP_ColArbiter_obj::zpp_pool = o;
					}
					HX_STACK_LINE(5480)
					_this->pre_dt = ((Float)-1.0);
				}
			}
			HX_STACK_LINE(5481)
			return true;
		}
		HX_STACK_LINE(5483)
		bool pact = arb->active;		HX_STACK_VAR(pact,"pact");
		HX_STACK_LINE(5484)
		int tmp15 = arb->up_stamp;		HX_STACK_VAR(tmp15,"tmp15");
		HX_STACK_LINE(5484)
		int tmp16 = this->stamp;		HX_STACK_VAR(tmp16,"tmp16");
		HX_STACK_LINE(5484)
		bool tmp17 = (tmp15 == tmp16);		HX_STACK_VAR(tmp17,"tmp17");
		HX_STACK_LINE(5484)
		bool tmp18 = arb->presentable = tmp17;		HX_STACK_VAR(tmp18,"tmp18");
		HX_STACK_LINE(5484)
		arb->active = tmp18;
		HX_STACK_LINE(5485)
		int tmp19 = arb->immState;		HX_STACK_VAR(tmp19,"tmp19");
		HX_STACK_LINE(5485)
		int tmp20 = ::zpp_nape::util::ZPP_Flags_obj::id_ImmState_ACCEPT;		HX_STACK_VAR(tmp20,"tmp20");
		HX_STACK_LINE(5485)
		int tmp21 = (int(tmp19) & int(tmp20));		HX_STACK_VAR(tmp21,"tmp21");
		HX_STACK_LINE(5485)
		bool tmp22 = (tmp21 != (int)0);		HX_STACK_VAR(tmp22,"tmp22");
		HX_STACK_LINE(5485)
		if ((tmp22)){
			HX_STACK_LINE(5486)
			bool tmp23 = arb->active;		HX_STACK_VAR(tmp23,"tmp23");
			HX_STACK_LINE(5486)
			bool tmp24;		HX_STACK_VAR(tmp24,"tmp24");
			HX_STACK_LINE(5486)
			if ((tmp23)){
				HX_STACK_LINE(5486)
				int tmp25 = arb->type;		HX_STACK_VAR(tmp25,"tmp25");
				HX_STACK_LINE(5486)
				int tmp26 = ::zpp_nape::dynamics::ZPP_Arbiter_obj::SENSOR;		HX_STACK_VAR(tmp26,"tmp26");
				HX_STACK_LINE(5486)
				int tmp27 = tmp26;		HX_STACK_VAR(tmp27,"tmp27");
				HX_STACK_LINE(5486)
				tmp24 = (tmp25 != tmp27);
			}
			else{
				HX_STACK_LINE(5486)
				tmp24 = false;
			}
			HX_STACK_LINE(5486)
			if ((tmp24)){
				HX_STACK_LINE(5487)
				bool tmp25 = (arb->colarb != null());		HX_STACK_VAR(tmp25,"tmp25");
				HX_STACK_LINE(5487)
				if ((tmp25)){
					HX_STACK_LINE(5488)
					bool tmp26;		HX_STACK_VAR(tmp26,"tmp26");
					HX_STACK_LINE(5488)
					{
						HX_STACK_LINE(5488)
						::zpp_nape::dynamics::ZPP_ColArbiter _this = arb->colarb;		HX_STACK_VAR(_this,"_this");
						HX_STACK_LINE(5488)
						{
							HX_STACK_LINE(5488)
							bool tmp27 = _this->invalidated;		HX_STACK_VAR(tmp27,"tmp27");
							HX_STACK_LINE(5488)
							if ((tmp27)){
								HX_STACK_LINE(5488)
								_this->invalidated = false;
								HX_STACK_LINE(5488)
								{
									HX_STACK_LINE(5488)
									bool tmp28 = _this->userdef_restitution;		HX_STACK_VAR(tmp28,"tmp28");
									HX_STACK_LINE(5488)
									bool tmp29 = !(tmp28);		HX_STACK_VAR(tmp29,"tmp29");
									HX_STACK_LINE(5488)
									if ((tmp29)){
										HX_STACK_LINE(5488)
										::zpp_nape::phys::ZPP_Material tmp30 = _this->s1->material;		HX_STACK_VAR(tmp30,"tmp30");
										HX_STACK_LINE(5488)
										Float tmp31 = tmp30->elasticity;		HX_STACK_VAR(tmp31,"tmp31");
										HX_STACK_LINE(5488)
										Float tmp32 = ::Math_obj::NEGATIVE_INFINITY;		HX_STACK_VAR(tmp32,"tmp32");
										HX_STACK_LINE(5488)
										bool tmp33 = (tmp31 <= tmp32);		HX_STACK_VAR(tmp33,"tmp33");
										HX_STACK_LINE(5488)
										bool tmp34 = !(tmp33);		HX_STACK_VAR(tmp34,"tmp34");
										HX_STACK_LINE(5488)
										bool tmp35;		HX_STACK_VAR(tmp35,"tmp35");
										HX_STACK_LINE(5488)
										if ((tmp34)){
											HX_STACK_LINE(5488)
											::zpp_nape::phys::ZPP_Material tmp36 = _this->s2->material;		HX_STACK_VAR(tmp36,"tmp36");
											HX_STACK_LINE(5488)
											::zpp_nape::phys::ZPP_Material tmp37 = tmp36;		HX_STACK_VAR(tmp37,"tmp37");
											HX_STACK_LINE(5488)
											Float tmp38 = tmp37->elasticity;		HX_STACK_VAR(tmp38,"tmp38");
											HX_STACK_LINE(5488)
											Float tmp39 = ::Math_obj::NEGATIVE_INFINITY;		HX_STACK_VAR(tmp39,"tmp39");
											HX_STACK_LINE(5488)
											Float tmp40 = tmp39;		HX_STACK_VAR(tmp40,"tmp40");
											HX_STACK_LINE(5488)
											tmp35 = (tmp38 <= tmp40);
										}
										else{
											HX_STACK_LINE(5488)
											tmp35 = true;
										}
										HX_STACK_LINE(5488)
										if ((tmp35)){
											HX_STACK_LINE(5488)
											_this->restitution = (int)0;
										}
										else{
											HX_STACK_LINE(5488)
											::zpp_nape::phys::ZPP_Material tmp36 = _this->s1->material;		HX_STACK_VAR(tmp36,"tmp36");
											HX_STACK_LINE(5488)
											Float tmp37 = tmp36->elasticity;		HX_STACK_VAR(tmp37,"tmp37");
											HX_STACK_LINE(5488)
											Float tmp38 = ::Math_obj::POSITIVE_INFINITY;		HX_STACK_VAR(tmp38,"tmp38");
											HX_STACK_LINE(5488)
											bool tmp39 = (tmp37 >= tmp38);		HX_STACK_VAR(tmp39,"tmp39");
											HX_STACK_LINE(5488)
											bool tmp40 = !(tmp39);		HX_STACK_VAR(tmp40,"tmp40");
											HX_STACK_LINE(5488)
											bool tmp41;		HX_STACK_VAR(tmp41,"tmp41");
											HX_STACK_LINE(5488)
											if ((tmp40)){
												HX_STACK_LINE(5488)
												::zpp_nape::phys::ZPP_Material tmp42 = _this->s2->material;		HX_STACK_VAR(tmp42,"tmp42");
												HX_STACK_LINE(5488)
												::zpp_nape::phys::ZPP_Material tmp43 = tmp42;		HX_STACK_VAR(tmp43,"tmp43");
												HX_STACK_LINE(5488)
												Float tmp44 = tmp43->elasticity;		HX_STACK_VAR(tmp44,"tmp44");
												HX_STACK_LINE(5488)
												Float tmp45 = ::Math_obj::POSITIVE_INFINITY;		HX_STACK_VAR(tmp45,"tmp45");
												HX_STACK_LINE(5488)
												Float tmp46 = tmp45;		HX_STACK_VAR(tmp46,"tmp46");
												HX_STACK_LINE(5488)
												tmp41 = (tmp44 >= tmp46);
											}
											else{
												HX_STACK_LINE(5488)
												tmp41 = true;
											}
											HX_STACK_LINE(5488)
											if ((tmp41)){
												HX_STACK_LINE(5488)
												_this->restitution = (int)1;
											}
											else{
												HX_STACK_LINE(5488)
												::zpp_nape::phys::ZPP_Material tmp42 = _this->s1->material;		HX_STACK_VAR(tmp42,"tmp42");
												HX_STACK_LINE(5488)
												Float tmp43 = tmp42->elasticity;		HX_STACK_VAR(tmp43,"tmp43");
												HX_STACK_LINE(5488)
												::zpp_nape::phys::ZPP_Material tmp44 = _this->s2->material;		HX_STACK_VAR(tmp44,"tmp44");
												HX_STACK_LINE(5488)
												Float tmp45 = tmp44->elasticity;		HX_STACK_VAR(tmp45,"tmp45");
												HX_STACK_LINE(5488)
												Float tmp46 = (tmp43 + tmp45);		HX_STACK_VAR(tmp46,"tmp46");
												HX_STACK_LINE(5488)
												Float tmp47 = (Float(tmp46) / Float((int)2));		HX_STACK_VAR(tmp47,"tmp47");
												HX_STACK_LINE(5488)
												_this->restitution = tmp47;
											}
										}
										HX_STACK_LINE(5488)
										bool tmp36 = (_this->restitution < (int)0);		HX_STACK_VAR(tmp36,"tmp36");
										HX_STACK_LINE(5488)
										if ((tmp36)){
											HX_STACK_LINE(5488)
											_this->restitution = (int)0;
										}
										HX_STACK_LINE(5488)
										bool tmp37 = (_this->restitution > (int)1);		HX_STACK_VAR(tmp37,"tmp37");
										HX_STACK_LINE(5488)
										if ((tmp37)){
											HX_STACK_LINE(5488)
											_this->restitution = (int)1;
										}
									}
									HX_STACK_LINE(5488)
									bool tmp30 = _this->userdef_dyn_fric;		HX_STACK_VAR(tmp30,"tmp30");
									HX_STACK_LINE(5488)
									bool tmp31 = !(tmp30);		HX_STACK_VAR(tmp31,"tmp31");
									HX_STACK_LINE(5488)
									if ((tmp31)){
										HX_STACK_LINE(5488)
										Float tmp32;		HX_STACK_VAR(tmp32,"tmp32");
										HX_STACK_LINE(5488)
										{
											HX_STACK_LINE(5488)
											::zpp_nape::phys::ZPP_Material tmp33 = _this->s1->material;		HX_STACK_VAR(tmp33,"tmp33");
											HX_STACK_LINE(5488)
											Float tmp34 = tmp33->dynamicFriction;		HX_STACK_VAR(tmp34,"tmp34");
											HX_STACK_LINE(5488)
											::zpp_nape::phys::ZPP_Material tmp35 = _this->s2->material;		HX_STACK_VAR(tmp35,"tmp35");
											HX_STACK_LINE(5488)
											Float tmp36 = tmp35->dynamicFriction;		HX_STACK_VAR(tmp36,"tmp36");
											HX_STACK_LINE(5488)
											Float tmp37 = (tmp34 * tmp36);		HX_STACK_VAR(tmp37,"tmp37");
											HX_STACK_LINE(5488)
											tmp32 = ::Math_obj::sqrt(tmp37);
										}
										HX_STACK_LINE(5488)
										_this->dyn_fric = tmp32;
									}
									HX_STACK_LINE(5488)
									bool tmp32 = _this->userdef_stat_fric;		HX_STACK_VAR(tmp32,"tmp32");
									HX_STACK_LINE(5488)
									bool tmp33 = !(tmp32);		HX_STACK_VAR(tmp33,"tmp33");
									HX_STACK_LINE(5488)
									if ((tmp33)){
										HX_STACK_LINE(5488)
										Float tmp34;		HX_STACK_VAR(tmp34,"tmp34");
										HX_STACK_LINE(5488)
										{
											HX_STACK_LINE(5488)
											::zpp_nape::phys::ZPP_Material tmp35 = _this->s1->material;		HX_STACK_VAR(tmp35,"tmp35");
											HX_STACK_LINE(5488)
											Float tmp36 = tmp35->staticFriction;		HX_STACK_VAR(tmp36,"tmp36");
											HX_STACK_LINE(5488)
											::zpp_nape::phys::ZPP_Material tmp37 = _this->s2->material;		HX_STACK_VAR(tmp37,"tmp37");
											HX_STACK_LINE(5488)
											Float tmp38 = tmp37->staticFriction;		HX_STACK_VAR(tmp38,"tmp38");
											HX_STACK_LINE(5488)
											Float tmp39 = (tmp36 * tmp38);		HX_STACK_VAR(tmp39,"tmp39");
											HX_STACK_LINE(5488)
											tmp34 = ::Math_obj::sqrt(tmp39);
										}
										HX_STACK_LINE(5488)
										_this->stat_fric = tmp34;
									}
									HX_STACK_LINE(5488)
									bool tmp34 = _this->userdef_rfric;		HX_STACK_VAR(tmp34,"tmp34");
									HX_STACK_LINE(5488)
									bool tmp35 = !(tmp34);		HX_STACK_VAR(tmp35,"tmp35");
									HX_STACK_LINE(5488)
									if ((tmp35)){
										HX_STACK_LINE(5488)
										Float tmp36;		HX_STACK_VAR(tmp36,"tmp36");
										HX_STACK_LINE(5488)
										{
											HX_STACK_LINE(5488)
											::zpp_nape::phys::ZPP_Material tmp37 = _this->s1->material;		HX_STACK_VAR(tmp37,"tmp37");
											HX_STACK_LINE(5488)
											Float tmp38 = tmp37->rollingFriction;		HX_STACK_VAR(tmp38,"tmp38");
											HX_STACK_LINE(5488)
											::zpp_nape::phys::ZPP_Material tmp39 = _this->s2->material;		HX_STACK_VAR(tmp39,"tmp39");
											HX_STACK_LINE(5488)
											Float tmp40 = tmp39->rollingFriction;		HX_STACK_VAR(tmp40,"tmp40");
											HX_STACK_LINE(5488)
											Float tmp41 = (tmp38 * tmp40);		HX_STACK_VAR(tmp41,"tmp41");
											HX_STACK_LINE(5488)
											tmp36 = ::Math_obj::sqrt(tmp41);
										}
										HX_STACK_LINE(5488)
										_this->rfric = tmp36;
									}
								}
							}
						}
						HX_STACK_LINE(5488)
						bool tmp27 = (_this->pre_dt == ((Float)-1.0));		HX_STACK_VAR(tmp27,"tmp27");
						HX_STACK_LINE(5488)
						if ((tmp27)){
							HX_STACK_LINE(5488)
							_this->pre_dt = dt;
						}
						HX_STACK_LINE(5488)
						Float tmp28 = (Float(dt) / Float(_this->pre_dt));		HX_STACK_VAR(tmp28,"tmp28");
						HX_STACK_LINE(5488)
						Float dtratio = tmp28;		HX_STACK_VAR(dtratio,"dtratio");
						HX_STACK_LINE(5488)
						_this->pre_dt = dt;
						HX_STACK_LINE(5488)
						Float tmp29 = _this->b1->smass;		HX_STACK_VAR(tmp29,"tmp29");
						HX_STACK_LINE(5488)
						Float tmp30 = _this->b2->smass;		HX_STACK_VAR(tmp30,"tmp30");
						HX_STACK_LINE(5488)
						Float tmp31 = (tmp29 + tmp30);		HX_STACK_VAR(tmp31,"tmp31");
						HX_STACK_LINE(5488)
						Float mass_sum = tmp31;		HX_STACK_VAR(mass_sum,"mass_sum");
						HX_STACK_LINE(5488)
						_this->hc2 = false;
						HX_STACK_LINE(5488)
						bool fst = true;		HX_STACK_VAR(fst,"fst");
						HX_STACK_LINE(5488)
						int tmp32 = _this->b1->type;		HX_STACK_VAR(tmp32,"tmp32");
						HX_STACK_LINE(5488)
						int tmp33 = ::zpp_nape::util::ZPP_Flags_obj::id_BodyType_DYNAMIC;		HX_STACK_VAR(tmp33,"tmp33");
						HX_STACK_LINE(5488)
						bool tmp34 = (tmp32 == tmp33);		HX_STACK_VAR(tmp34,"tmp34");
						HX_STACK_LINE(5488)
						bool tmp35 = tmp34;		HX_STACK_VAR(tmp35,"tmp35");
						HX_STACK_LINE(5488)
						bool tmp36 = !(tmp35);		HX_STACK_VAR(tmp36,"tmp36");
						HX_STACK_LINE(5488)
						bool tmp37 = !(tmp36);		HX_STACK_VAR(tmp37,"tmp37");
						HX_STACK_LINE(5488)
						bool tmp38;		HX_STACK_VAR(tmp38,"tmp38");
						HX_STACK_LINE(5488)
						if ((tmp37)){
							HX_STACK_LINE(5488)
							int tmp39 = _this->b2->type;		HX_STACK_VAR(tmp39,"tmp39");
							HX_STACK_LINE(5488)
							int tmp40 = tmp39;		HX_STACK_VAR(tmp40,"tmp40");
							HX_STACK_LINE(5488)
							int tmp41 = ::zpp_nape::util::ZPP_Flags_obj::id_BodyType_DYNAMIC;		HX_STACK_VAR(tmp41,"tmp41");
							HX_STACK_LINE(5488)
							int tmp42 = tmp41;		HX_STACK_VAR(tmp42,"tmp42");
							HX_STACK_LINE(5488)
							bool tmp43 = (tmp40 == tmp42);		HX_STACK_VAR(tmp43,"tmp43");
							HX_STACK_LINE(5488)
							bool tmp44 = tmp43;		HX_STACK_VAR(tmp44,"tmp44");
							HX_STACK_LINE(5488)
							bool tmp45 = tmp44;		HX_STACK_VAR(tmp45,"tmp45");
							HX_STACK_LINE(5488)
							tmp38 = !(tmp45);
						}
						else{
							HX_STACK_LINE(5488)
							tmp38 = true;
						}
						HX_STACK_LINE(5488)
						bool statType = tmp38;		HX_STACK_VAR(statType,"statType");
						HX_STACK_LINE(5488)
						bool tmp39 = statType;		HX_STACK_VAR(tmp39,"tmp39");
						HX_STACK_LINE(5488)
						Float tmp40;		HX_STACK_VAR(tmp40,"tmp40");
						HX_STACK_LINE(5488)
						if ((tmp39)){
							HX_STACK_LINE(5488)
							bool tmp41 = _this->continuous;		HX_STACK_VAR(tmp41,"tmp41");
							HX_STACK_LINE(5488)
							if ((tmp41)){
								HX_STACK_LINE(5488)
								tmp40 = ::nape::Config_obj::contactContinuousStaticBiasCoef;
							}
							else{
								HX_STACK_LINE(5488)
								tmp40 = ::nape::Config_obj::contactStaticBiasCoef;
							}
						}
						else{
							HX_STACK_LINE(5488)
							bool tmp41 = _this->continuous;		HX_STACK_VAR(tmp41,"tmp41");
							HX_STACK_LINE(5488)
							if ((tmp41)){
								HX_STACK_LINE(5488)
								tmp40 = ::nape::Config_obj::contactContinuousBiasCoef;
							}
							else{
								HX_STACK_LINE(5488)
								tmp40 = ::nape::Config_obj::contactBiasCoef;
							}
						}
						HX_STACK_LINE(5488)
						Float bias = tmp40;		HX_STACK_VAR(bias,"bias");
						HX_STACK_LINE(5488)
						_this->biasCoef = bias;
						HX_STACK_LINE(5488)
						_this->continuous = false;
						HX_STACK_LINE(5488)
						::zpp_nape::dynamics::ZPP_Contact pre = null();		HX_STACK_VAR(pre,"pre");
						HX_STACK_LINE(5488)
						::zpp_nape::dynamics::ZPP_IContact prei = null();		HX_STACK_VAR(prei,"prei");
						HX_STACK_LINE(5488)
						::zpp_nape::dynamics::ZPP_IContact tmp41 = _this->innards->next;		HX_STACK_VAR(tmp41,"tmp41");
						HX_STACK_LINE(5488)
						::zpp_nape::dynamics::ZPP_IContact cx_itei = tmp41;		HX_STACK_VAR(cx_itei,"cx_itei");
						HX_STACK_LINE(5488)
						{
							HX_STACK_LINE(5488)
							::zpp_nape::dynamics::ZPP_Contact tmp42 = _this->contacts->next;		HX_STACK_VAR(tmp42,"tmp42");
							HX_STACK_LINE(5488)
							::zpp_nape::dynamics::ZPP_Contact cx_ite = tmp42;		HX_STACK_VAR(cx_ite,"cx_ite");
							HX_STACK_LINE(5488)
							while((true)){
								HX_STACK_LINE(5488)
								bool tmp43 = (cx_ite != null());		HX_STACK_VAR(tmp43,"tmp43");
								HX_STACK_LINE(5488)
								bool tmp44 = !(tmp43);		HX_STACK_VAR(tmp44,"tmp44");
								HX_STACK_LINE(5488)
								if ((tmp44)){
									HX_STACK_LINE(5488)
									break;
								}
								HX_STACK_LINE(5488)
								::zpp_nape::dynamics::ZPP_Contact c = cx_ite;		HX_STACK_VAR(c,"c");
								HX_STACK_LINE(5488)
								{
									HX_STACK_LINE(5488)
									int tmp45 = c->stamp;		HX_STACK_VAR(tmp45,"tmp45");
									HX_STACK_LINE(5488)
									int tmp46 = ::nape::Config_obj::arbiterExpirationDelay;		HX_STACK_VAR(tmp46,"tmp46");
									HX_STACK_LINE(5488)
									int tmp47 = (tmp45 + tmp46);		HX_STACK_VAR(tmp47,"tmp47");
									HX_STACK_LINE(5488)
									int tmp48 = _this->stamp;		HX_STACK_VAR(tmp48,"tmp48");
									HX_STACK_LINE(5488)
									bool tmp49 = (tmp47 < tmp48);		HX_STACK_VAR(tmp49,"tmp49");
									HX_STACK_LINE(5488)
									if ((tmp49)){
										HX_STACK_LINE(5488)
										::zpp_nape::dynamics::ZPP_Contact tmp50;		HX_STACK_VAR(tmp50,"tmp50");
										HX_STACK_LINE(5488)
										{
											HX_STACK_LINE(5488)
											::zpp_nape::dynamics::ZPP_Contact _this1 = _this->contacts;		HX_STACK_VAR(_this1,"_this1");
											HX_STACK_LINE(5488)
											::zpp_nape::dynamics::ZPP_Contact old;		HX_STACK_VAR(old,"old");
											HX_STACK_LINE(5488)
											::zpp_nape::dynamics::ZPP_Contact ret;		HX_STACK_VAR(ret,"ret");
											HX_STACK_LINE(5488)
											bool tmp51 = (pre == null());		HX_STACK_VAR(tmp51,"tmp51");
											HX_STACK_LINE(5488)
											if ((tmp51)){
												HX_STACK_LINE(5488)
												old = _this1->next;
												HX_STACK_LINE(5488)
												ret = old->next;
												HX_STACK_LINE(5488)
												_this1->next = ret;
												HX_STACK_LINE(5488)
												bool tmp52 = (_this1->next == null());		HX_STACK_VAR(tmp52,"tmp52");
												HX_STACK_LINE(5488)
												if ((tmp52)){
													HX_STACK_LINE(5488)
													_this1->pushmod = true;
												}
											}
											else{
												HX_STACK_LINE(5488)
												old = pre->next;
												HX_STACK_LINE(5488)
												ret = old->next;
												HX_STACK_LINE(5488)
												pre->next = ret;
												HX_STACK_LINE(5488)
												bool tmp52 = (ret == null());		HX_STACK_VAR(tmp52,"tmp52");
												HX_STACK_LINE(5488)
												if ((tmp52)){
													HX_STACK_LINE(5488)
													_this1->pushmod = true;
												}
											}
											HX_STACK_LINE(5488)
											old->_inuse = false;
											HX_STACK_LINE(5488)
											_this1->modified = true;
											HX_STACK_LINE(5488)
											(_this1->length)--;
											HX_STACK_LINE(5488)
											_this1->pushmod = true;
											HX_STACK_LINE(5488)
											tmp50 = ret;
										}
										HX_STACK_LINE(5488)
										cx_ite = tmp50;
										HX_STACK_LINE(5488)
										::zpp_nape::dynamics::ZPP_IContact tmp51;		HX_STACK_VAR(tmp51,"tmp51");
										HX_STACK_LINE(5488)
										{
											HX_STACK_LINE(5488)
											::zpp_nape::dynamics::ZPP_IContact _this1 = _this->innards;		HX_STACK_VAR(_this1,"_this1");
											HX_STACK_LINE(5488)
											::zpp_nape::dynamics::ZPP_IContact old;		HX_STACK_VAR(old,"old");
											HX_STACK_LINE(5488)
											::zpp_nape::dynamics::ZPP_IContact ret;		HX_STACK_VAR(ret,"ret");
											HX_STACK_LINE(5488)
											bool tmp52 = (prei == null());		HX_STACK_VAR(tmp52,"tmp52");
											HX_STACK_LINE(5488)
											if ((tmp52)){
												HX_STACK_LINE(5488)
												old = _this1->next;
												HX_STACK_LINE(5488)
												ret = old->next;
												HX_STACK_LINE(5488)
												_this1->next = ret;
												HX_STACK_LINE(5488)
												bool tmp53 = (_this1->next == null());		HX_STACK_VAR(tmp53,"tmp53");
												HX_STACK_LINE(5488)
												if ((tmp53)){
													HX_STACK_LINE(5488)
													_this1->pushmod = true;
												}
											}
											else{
												HX_STACK_LINE(5488)
												old = prei->next;
												HX_STACK_LINE(5488)
												ret = old->next;
												HX_STACK_LINE(5488)
												prei->next = ret;
												HX_STACK_LINE(5488)
												bool tmp53 = (ret == null());		HX_STACK_VAR(tmp53,"tmp53");
												HX_STACK_LINE(5488)
												if ((tmp53)){
													HX_STACK_LINE(5488)
													_this1->pushmod = true;
												}
											}
											HX_STACK_LINE(5488)
											old->_inuse = false;
											HX_STACK_LINE(5488)
											_this1->modified = true;
											HX_STACK_LINE(5488)
											(_this1->length)--;
											HX_STACK_LINE(5488)
											_this1->pushmod = true;
											HX_STACK_LINE(5488)
											tmp51 = ret;
										}
										HX_STACK_LINE(5488)
										cx_itei = tmp51;
										HX_STACK_LINE(5488)
										{
											HX_STACK_LINE(5488)
											::zpp_nape::dynamics::ZPP_Contact o = c;		HX_STACK_VAR(o,"o");
											HX_STACK_LINE(5488)
											o->arbiter = null();
											HX_STACK_LINE(5488)
											::zpp_nape::dynamics::ZPP_Contact tmp52 = ::zpp_nape::dynamics::ZPP_Contact_obj::zpp_pool;		HX_STACK_VAR(tmp52,"tmp52");
											HX_STACK_LINE(5488)
											o->next = tmp52;
											HX_STACK_LINE(5488)
											::zpp_nape::dynamics::ZPP_Contact_obj::zpp_pool = o;
										}
										HX_STACK_LINE(5488)
										continue;
									}
									HX_STACK_LINE(5488)
									::zpp_nape::dynamics::ZPP_IContact ci = c->inner;		HX_STACK_VAR(ci,"ci");
									HX_STACK_LINE(5488)
									bool pact1 = c->active;		HX_STACK_VAR(pact1,"pact1");
									HX_STACK_LINE(5488)
									bool tmp50 = (c->stamp == _this->stamp);		HX_STACK_VAR(tmp50,"tmp50");
									HX_STACK_LINE(5488)
									c->active = tmp50;
									HX_STACK_LINE(5488)
									bool tmp51 = c->active;		HX_STACK_VAR(tmp51,"tmp51");
									HX_STACK_LINE(5488)
									if ((tmp51)){
										HX_STACK_LINE(5488)
										bool tmp52 = fst;		HX_STACK_VAR(tmp52,"tmp52");
										HX_STACK_LINE(5488)
										if ((tmp52)){
											HX_STACK_LINE(5488)
											fst = false;
											HX_STACK_LINE(5488)
											_this->c1 = ci;
											HX_STACK_LINE(5488)
											_this->oc1 = c;
										}
										else{
											HX_STACK_LINE(5488)
											_this->hc2 = true;
											HX_STACK_LINE(5488)
											_this->c2 = ci;
											HX_STACK_LINE(5488)
											_this->oc2 = c;
										}
										HX_STACK_LINE(5488)
										{
											HX_STACK_LINE(5488)
											Float tmp53 = c->px;		HX_STACK_VAR(tmp53,"tmp53");
											HX_STACK_LINE(5488)
											Float tmp54 = _this->b2->posx;		HX_STACK_VAR(tmp54,"tmp54");
											HX_STACK_LINE(5488)
											Float tmp55 = (tmp53 - tmp54);		HX_STACK_VAR(tmp55,"tmp55");
											HX_STACK_LINE(5488)
											ci->r2x = tmp55;
											HX_STACK_LINE(5488)
											Float tmp56 = c->py;		HX_STACK_VAR(tmp56,"tmp56");
											HX_STACK_LINE(5488)
											Float tmp57 = _this->b2->posy;		HX_STACK_VAR(tmp57,"tmp57");
											HX_STACK_LINE(5488)
											Float tmp58 = (tmp56 - tmp57);		HX_STACK_VAR(tmp58,"tmp58");
											HX_STACK_LINE(5488)
											ci->r2y = tmp58;
										}
										HX_STACK_LINE(5488)
										{
											HX_STACK_LINE(5488)
											Float tmp53 = c->px;		HX_STACK_VAR(tmp53,"tmp53");
											HX_STACK_LINE(5488)
											Float tmp54 = _this->b1->posx;		HX_STACK_VAR(tmp54,"tmp54");
											HX_STACK_LINE(5488)
											Float tmp55 = (tmp53 - tmp54);		HX_STACK_VAR(tmp55,"tmp55");
											HX_STACK_LINE(5488)
											ci->r1x = tmp55;
											HX_STACK_LINE(5488)
											Float tmp56 = c->py;		HX_STACK_VAR(tmp56,"tmp56");
											HX_STACK_LINE(5488)
											Float tmp57 = _this->b1->posy;		HX_STACK_VAR(tmp57,"tmp57");
											HX_STACK_LINE(5488)
											Float tmp58 = (tmp56 - tmp57);		HX_STACK_VAR(tmp58,"tmp58");
											HX_STACK_LINE(5488)
											ci->r1y = tmp58;
										}
										HX_STACK_LINE(5488)
										Float tmp53 = mass_sum;		HX_STACK_VAR(tmp53,"tmp53");
										HX_STACK_LINE(5488)
										Float tmp54 = _this->b2->sinertia;		HX_STACK_VAR(tmp54,"tmp54");
										HX_STACK_LINE(5488)
										Float tmp55;		HX_STACK_VAR(tmp55,"tmp55");
										HX_STACK_LINE(5488)
										{
											HX_STACK_LINE(5488)
											Float tmp56 = (ci->r2x * _this->nx);		HX_STACK_VAR(tmp56,"tmp56");
											HX_STACK_LINE(5488)
											Float tmp57 = (ci->r2y * _this->ny);		HX_STACK_VAR(tmp57,"tmp57");
											HX_STACK_LINE(5488)
											Float tmp58 = (tmp56 + tmp57);		HX_STACK_VAR(tmp58,"tmp58");
											HX_STACK_LINE(5488)
											Float x = tmp58;		HX_STACK_VAR(x,"x");
											HX_STACK_LINE(5488)
											tmp55 = (x * x);
										}
										HX_STACK_LINE(5488)
										Float tmp56 = (tmp54 * tmp55);		HX_STACK_VAR(tmp56,"tmp56");
										HX_STACK_LINE(5488)
										Float tmp57 = (tmp53 + tmp56);		HX_STACK_VAR(tmp57,"tmp57");
										HX_STACK_LINE(5488)
										Float kt = tmp57;		HX_STACK_VAR(kt,"kt");
										HX_STACK_LINE(5488)
										Float tmp58 = _this->b1->sinertia;		HX_STACK_VAR(tmp58,"tmp58");
										HX_STACK_LINE(5488)
										Float tmp59;		HX_STACK_VAR(tmp59,"tmp59");
										HX_STACK_LINE(5488)
										{
											HX_STACK_LINE(5488)
											Float tmp60 = (ci->r1x * _this->nx);		HX_STACK_VAR(tmp60,"tmp60");
											HX_STACK_LINE(5488)
											Float tmp61 = (ci->r1y * _this->ny);		HX_STACK_VAR(tmp61,"tmp61");
											HX_STACK_LINE(5488)
											Float tmp62 = (tmp60 + tmp61);		HX_STACK_VAR(tmp62,"tmp62");
											HX_STACK_LINE(5488)
											Float x = tmp62;		HX_STACK_VAR(x,"x");
											HX_STACK_LINE(5488)
											tmp59 = (x * x);
										}
										HX_STACK_LINE(5488)
										Float tmp60 = (tmp58 * tmp59);		HX_STACK_VAR(tmp60,"tmp60");
										HX_STACK_LINE(5488)
										hx::AddEq(kt,tmp60);
										HX_STACK_LINE(5488)
										Float tmp61 = kt;		HX_STACK_VAR(tmp61,"tmp61");
										HX_STACK_LINE(5488)
										Float tmp62 = ::nape::Config_obj::epsilon;		HX_STACK_VAR(tmp62,"tmp62");
										HX_STACK_LINE(5488)
										Float tmp63 = ::nape::Config_obj::epsilon;		HX_STACK_VAR(tmp63,"tmp63");
										HX_STACK_LINE(5488)
										Float tmp64 = (tmp62 * tmp63);		HX_STACK_VAR(tmp64,"tmp64");
										HX_STACK_LINE(5488)
										bool tmp65 = (tmp61 < tmp64);		HX_STACK_VAR(tmp65,"tmp65");
										HX_STACK_LINE(5488)
										Float tmp66;		HX_STACK_VAR(tmp66,"tmp66");
										HX_STACK_LINE(5488)
										if ((tmp65)){
											HX_STACK_LINE(5488)
											tmp66 = (int)0;
										}
										else{
											HX_STACK_LINE(5488)
											tmp66 = (Float(((Float)1.0)) / Float(kt));
										}
										HX_STACK_LINE(5488)
										ci->tMass = tmp66;
										HX_STACK_LINE(5488)
										Float tmp67 = mass_sum;		HX_STACK_VAR(tmp67,"tmp67");
										HX_STACK_LINE(5488)
										Float tmp68 = _this->b2->sinertia;		HX_STACK_VAR(tmp68,"tmp68");
										HX_STACK_LINE(5488)
										Float tmp69;		HX_STACK_VAR(tmp69,"tmp69");
										HX_STACK_LINE(5488)
										{
											HX_STACK_LINE(5488)
											Float tmp70 = (_this->ny * ci->r2x);		HX_STACK_VAR(tmp70,"tmp70");
											HX_STACK_LINE(5488)
											Float tmp71 = (_this->nx * ci->r2y);		HX_STACK_VAR(tmp71,"tmp71");
											HX_STACK_LINE(5488)
											Float tmp72 = (tmp70 - tmp71);		HX_STACK_VAR(tmp72,"tmp72");
											HX_STACK_LINE(5488)
											Float x = tmp72;		HX_STACK_VAR(x,"x");
											HX_STACK_LINE(5488)
											tmp69 = (x * x);
										}
										HX_STACK_LINE(5488)
										Float tmp70 = (tmp68 * tmp69);		HX_STACK_VAR(tmp70,"tmp70");
										HX_STACK_LINE(5488)
										Float tmp71 = (tmp67 + tmp70);		HX_STACK_VAR(tmp71,"tmp71");
										HX_STACK_LINE(5488)
										Float nt = tmp71;		HX_STACK_VAR(nt,"nt");
										HX_STACK_LINE(5488)
										Float tmp72 = _this->b1->sinertia;		HX_STACK_VAR(tmp72,"tmp72");
										HX_STACK_LINE(5488)
										Float tmp73;		HX_STACK_VAR(tmp73,"tmp73");
										HX_STACK_LINE(5488)
										{
											HX_STACK_LINE(5488)
											Float tmp74 = (_this->ny * ci->r1x);		HX_STACK_VAR(tmp74,"tmp74");
											HX_STACK_LINE(5488)
											Float tmp75 = (_this->nx * ci->r1y);		HX_STACK_VAR(tmp75,"tmp75");
											HX_STACK_LINE(5488)
											Float tmp76 = (tmp74 - tmp75);		HX_STACK_VAR(tmp76,"tmp76");
											HX_STACK_LINE(5488)
											Float x = tmp76;		HX_STACK_VAR(x,"x");
											HX_STACK_LINE(5488)
											tmp73 = (x * x);
										}
										HX_STACK_LINE(5488)
										Float tmp74 = (tmp72 * tmp73);		HX_STACK_VAR(tmp74,"tmp74");
										HX_STACK_LINE(5488)
										hx::AddEq(nt,tmp74);
										HX_STACK_LINE(5488)
										Float tmp75 = nt;		HX_STACK_VAR(tmp75,"tmp75");
										HX_STACK_LINE(5488)
										Float tmp76 = ::nape::Config_obj::epsilon;		HX_STACK_VAR(tmp76,"tmp76");
										HX_STACK_LINE(5488)
										Float tmp77 = ::nape::Config_obj::epsilon;		HX_STACK_VAR(tmp77,"tmp77");
										HX_STACK_LINE(5488)
										Float tmp78 = (tmp76 * tmp77);		HX_STACK_VAR(tmp78,"tmp78");
										HX_STACK_LINE(5488)
										bool tmp79 = (tmp75 < tmp78);		HX_STACK_VAR(tmp79,"tmp79");
										HX_STACK_LINE(5488)
										Float tmp80;		HX_STACK_VAR(tmp80,"tmp80");
										HX_STACK_LINE(5488)
										if ((tmp79)){
											HX_STACK_LINE(5488)
											tmp80 = (int)0;
										}
										else{
											HX_STACK_LINE(5488)
											tmp80 = (Float(((Float)1.0)) / Float(nt));
										}
										HX_STACK_LINE(5488)
										ci->nMass = tmp80;
										HX_STACK_LINE(5488)
										Float vrx = ((Float)0.0);		HX_STACK_VAR(vrx,"vrx");
										HX_STACK_LINE(5488)
										Float vry = ((Float)0.0);		HX_STACK_VAR(vry,"vry");
										HX_STACK_LINE(5488)
										{
											HX_STACK_LINE(5488)
											Float tmp81 = _this->b2->angvel;		HX_STACK_VAR(tmp81,"tmp81");
											HX_STACK_LINE(5488)
											Float tmp82 = _this->b2->kinangvel;		HX_STACK_VAR(tmp82,"tmp82");
											HX_STACK_LINE(5488)
											Float tmp83 = (tmp81 + tmp82);		HX_STACK_VAR(tmp83,"tmp83");
											HX_STACK_LINE(5488)
											Float ang = tmp83;		HX_STACK_VAR(ang,"ang");
											HX_STACK_LINE(5488)
											Float tmp84 = _this->b2->velx;		HX_STACK_VAR(tmp84,"tmp84");
											HX_STACK_LINE(5488)
											Float tmp85 = _this->b2->kinvelx;		HX_STACK_VAR(tmp85,"tmp85");
											HX_STACK_LINE(5488)
											Float tmp86 = (tmp84 + tmp85);		HX_STACK_VAR(tmp86,"tmp86");
											HX_STACK_LINE(5488)
											Float tmp87 = (ci->r2y * ang);		HX_STACK_VAR(tmp87,"tmp87");
											HX_STACK_LINE(5488)
											Float tmp88 = (tmp86 - tmp87);		HX_STACK_VAR(tmp88,"tmp88");
											HX_STACK_LINE(5488)
											vrx = tmp88;
											HX_STACK_LINE(5488)
											Float tmp89 = _this->b2->vely;		HX_STACK_VAR(tmp89,"tmp89");
											HX_STACK_LINE(5488)
											Float tmp90 = _this->b2->kinvely;		HX_STACK_VAR(tmp90,"tmp90");
											HX_STACK_LINE(5488)
											Float tmp91 = (tmp89 + tmp90);		HX_STACK_VAR(tmp91,"tmp91");
											HX_STACK_LINE(5488)
											Float tmp92 = (ci->r2x * ang);		HX_STACK_VAR(tmp92,"tmp92");
											HX_STACK_LINE(5488)
											Float tmp93 = (tmp91 + tmp92);		HX_STACK_VAR(tmp93,"tmp93");
											HX_STACK_LINE(5488)
											vry = tmp93;
											HX_STACK_LINE(5488)
											Float tmp94 = _this->b1->angvel;		HX_STACK_VAR(tmp94,"tmp94");
											HX_STACK_LINE(5488)
											Float tmp95 = _this->b1->kinangvel;		HX_STACK_VAR(tmp95,"tmp95");
											HX_STACK_LINE(5488)
											Float tmp96 = (tmp94 + tmp95);		HX_STACK_VAR(tmp96,"tmp96");
											HX_STACK_LINE(5488)
											ang = tmp96;
											HX_STACK_LINE(5488)
											Float tmp97 = _this->b1->velx;		HX_STACK_VAR(tmp97,"tmp97");
											HX_STACK_LINE(5488)
											Float tmp98 = _this->b1->kinvelx;		HX_STACK_VAR(tmp98,"tmp98");
											HX_STACK_LINE(5488)
											Float tmp99 = (tmp97 + tmp98);		HX_STACK_VAR(tmp99,"tmp99");
											HX_STACK_LINE(5488)
											Float tmp100 = (ci->r1y * ang);		HX_STACK_VAR(tmp100,"tmp100");
											HX_STACK_LINE(5488)
											Float tmp101 = (tmp99 - tmp100);		HX_STACK_VAR(tmp101,"tmp101");
											HX_STACK_LINE(5488)
											hx::SubEq(vrx,tmp101);
											HX_STACK_LINE(5488)
											Float tmp102 = _this->b1->vely;		HX_STACK_VAR(tmp102,"tmp102");
											HX_STACK_LINE(5488)
											Float tmp103 = _this->b1->kinvely;		HX_STACK_VAR(tmp103,"tmp103");
											HX_STACK_LINE(5488)
											Float tmp104 = (tmp102 + tmp103);		HX_STACK_VAR(tmp104,"tmp104");
											HX_STACK_LINE(5488)
											Float tmp105 = (ci->r1x * ang);		HX_STACK_VAR(tmp105,"tmp105");
											HX_STACK_LINE(5488)
											Float tmp106 = (tmp104 + tmp105);		HX_STACK_VAR(tmp106,"tmp106");
											HX_STACK_LINE(5488)
											hx::SubEq(vry,tmp106);
										}
										HX_STACK_LINE(5488)
										Float tmp81 = (_this->nx * vrx);		HX_STACK_VAR(tmp81,"tmp81");
										HX_STACK_LINE(5488)
										Float tmp82 = (_this->ny * vry);		HX_STACK_VAR(tmp82,"tmp82");
										HX_STACK_LINE(5488)
										Float tmp83 = (tmp81 + tmp82);		HX_STACK_VAR(tmp83,"tmp83");
										HX_STACK_LINE(5488)
										Float vdot = tmp83;		HX_STACK_VAR(vdot,"vdot");
										HX_STACK_LINE(5488)
										c->elasticity = _this->restitution;
										HX_STACK_LINE(5488)
										Float tmp84 = (vdot * c->elasticity);		HX_STACK_VAR(tmp84,"tmp84");
										HX_STACK_LINE(5488)
										ci->bounce = tmp84;
										HX_STACK_LINE(5488)
										Float tmp85 = ci->bounce;		HX_STACK_VAR(tmp85,"tmp85");
										HX_STACK_LINE(5488)
										Float tmp86 = ::nape::Config_obj::elasticThreshold;		HX_STACK_VAR(tmp86,"tmp86");
										HX_STACK_LINE(5488)
										Float tmp87 = -(tmp86);		HX_STACK_VAR(tmp87,"tmp87");
										HX_STACK_LINE(5488)
										bool tmp88 = (tmp85 > tmp87);		HX_STACK_VAR(tmp88,"tmp88");
										HX_STACK_LINE(5488)
										if ((tmp88)){
											HX_STACK_LINE(5488)
											ci->bounce = (int)0;
										}
										HX_STACK_LINE(5488)
										Float tmp89 = (vry * _this->nx);		HX_STACK_VAR(tmp89,"tmp89");
										HX_STACK_LINE(5488)
										Float tmp90 = (vrx * _this->ny);		HX_STACK_VAR(tmp90,"tmp90");
										HX_STACK_LINE(5488)
										Float tmp91 = (tmp89 - tmp90);		HX_STACK_VAR(tmp91,"tmp91");
										HX_STACK_LINE(5488)
										vdot = tmp91;
										HX_STACK_LINE(5488)
										Float tmp92 = ::nape::Config_obj::staticFrictionThreshold;		HX_STACK_VAR(tmp92,"tmp92");
										HX_STACK_LINE(5488)
										Float thr = tmp92;		HX_STACK_VAR(thr,"thr");
										HX_STACK_LINE(5488)
										Float tmp93 = (vdot * vdot);		HX_STACK_VAR(tmp93,"tmp93");
										HX_STACK_LINE(5488)
										Float tmp94 = (thr * thr);		HX_STACK_VAR(tmp94,"tmp94");
										HX_STACK_LINE(5488)
										bool tmp95 = (tmp93 > tmp94);		HX_STACK_VAR(tmp95,"tmp95");
										HX_STACK_LINE(5488)
										if ((tmp95)){
											HX_STACK_LINE(5488)
											ci->friction = _this->dyn_fric;
										}
										else{
											HX_STACK_LINE(5488)
											ci->friction = _this->stat_fric;
										}
										HX_STACK_LINE(5488)
										hx::MultEq(ci->jnAcc,dtratio);
										HX_STACK_LINE(5488)
										hx::MultEq(ci->jtAcc,dtratio);
									}
									HX_STACK_LINE(5488)
									bool tmp52 = (pact1 != c->active);		HX_STACK_VAR(tmp52,"tmp52");
									HX_STACK_LINE(5488)
									if ((tmp52)){
										HX_STACK_LINE(5488)
										_this->contacts->modified = true;
									}
									HX_STACK_LINE(5488)
									pre = cx_ite;
									HX_STACK_LINE(5488)
									prei = cx_itei;
									HX_STACK_LINE(5488)
									cx_itei = cx_itei->next;
								}
								HX_STACK_LINE(5488)
								cx_ite = cx_ite->next;
							}
						}
						HX_STACK_LINE(5488)
						bool tmp42 = _this->hc2;		HX_STACK_VAR(tmp42,"tmp42");
						HX_STACK_LINE(5488)
						if ((tmp42)){
							HX_STACK_LINE(5488)
							_this->hpc2 = true;
							HX_STACK_LINE(5488)
							bool tmp43 = _this->oc1->posOnly;		HX_STACK_VAR(tmp43,"tmp43");
							HX_STACK_LINE(5488)
							if ((tmp43)){
								HX_STACK_LINE(5488)
								::zpp_nape::dynamics::ZPP_IContact tmp44 = _this->c1;		HX_STACK_VAR(tmp44,"tmp44");
								HX_STACK_LINE(5488)
								_this->c1 = _this->c2;
								HX_STACK_LINE(5488)
								_this->c2 = tmp44;
								HX_STACK_LINE(5488)
								::zpp_nape::dynamics::ZPP_Contact tmp210 = _this->oc1;		HX_STACK_VAR(tmp210,"tmp210");
								HX_STACK_LINE(5488)
								_this->oc1 = _this->oc2;
								HX_STACK_LINE(5488)
								_this->oc2 = tmp210;
								HX_STACK_LINE(5488)
								_this->hc2 = false;
							}
							else{
								HX_STACK_LINE(5488)
								bool tmp44 = _this->oc2->posOnly;		HX_STACK_VAR(tmp44,"tmp44");
								HX_STACK_LINE(5488)
								if ((tmp44)){
									HX_STACK_LINE(5488)
									_this->hc2 = false;
								}
							}
							HX_STACK_LINE(5488)
							bool tmp44 = _this->oc1->posOnly;		HX_STACK_VAR(tmp44,"tmp44");
							HX_STACK_LINE(5488)
							if ((tmp44)){
								HX_STACK_LINE(5488)
								fst = true;
							}
						}
						else{
							HX_STACK_LINE(5488)
							_this->hpc2 = false;
						}
						HX_STACK_LINE(5488)
						hx::MultEq(_this->jrAcc,dtratio);
						HX_STACK_LINE(5488)
						bool tmp43 = fst;		HX_STACK_VAR(tmp43,"tmp43");
						HX_STACK_LINE(5488)
						bool tmp44 = !(tmp43);		HX_STACK_VAR(tmp44,"tmp44");
						HX_STACK_LINE(5488)
						if ((tmp44)){
							HX_STACK_LINE(5488)
							Float tmp45 = _this->ny;		HX_STACK_VAR(tmp45,"tmp45");
							HX_STACK_LINE(5488)
							Float tmp46 = _this->c1->r1x;		HX_STACK_VAR(tmp46,"tmp46");
							HX_STACK_LINE(5488)
							Float tmp47 = (tmp45 * tmp46);		HX_STACK_VAR(tmp47,"tmp47");
							HX_STACK_LINE(5488)
							Float tmp48 = _this->nx;		HX_STACK_VAR(tmp48,"tmp48");
							HX_STACK_LINE(5488)
							Float tmp49 = _this->c1->r1y;		HX_STACK_VAR(tmp49,"tmp49");
							HX_STACK_LINE(5488)
							Float tmp50 = (tmp48 * tmp49);		HX_STACK_VAR(tmp50,"tmp50");
							HX_STACK_LINE(5488)
							Float tmp51 = (tmp47 - tmp50);		HX_STACK_VAR(tmp51,"tmp51");
							HX_STACK_LINE(5488)
							_this->rn1a = tmp51;
							HX_STACK_LINE(5488)
							Float tmp52 = _this->c1->r1x;		HX_STACK_VAR(tmp52,"tmp52");
							HX_STACK_LINE(5488)
							Float tmp53 = _this->nx;		HX_STACK_VAR(tmp53,"tmp53");
							HX_STACK_LINE(5488)
							Float tmp54 = (tmp52 * tmp53);		HX_STACK_VAR(tmp54,"tmp54");
							HX_STACK_LINE(5488)
							Float tmp55 = _this->c1->r1y;		HX_STACK_VAR(tmp55,"tmp55");
							HX_STACK_LINE(5488)
							Float tmp56 = _this->ny;		HX_STACK_VAR(tmp56,"tmp56");
							HX_STACK_LINE(5488)
							Float tmp57 = (tmp55 * tmp56);		HX_STACK_VAR(tmp57,"tmp57");
							HX_STACK_LINE(5488)
							Float tmp58 = (tmp54 + tmp57);		HX_STACK_VAR(tmp58,"tmp58");
							HX_STACK_LINE(5488)
							_this->rt1a = tmp58;
							HX_STACK_LINE(5488)
							Float tmp59 = _this->ny;		HX_STACK_VAR(tmp59,"tmp59");
							HX_STACK_LINE(5488)
							Float tmp60 = _this->c1->r2x;		HX_STACK_VAR(tmp60,"tmp60");
							HX_STACK_LINE(5488)
							Float tmp61 = (tmp59 * tmp60);		HX_STACK_VAR(tmp61,"tmp61");
							HX_STACK_LINE(5488)
							Float tmp62 = _this->nx;		HX_STACK_VAR(tmp62,"tmp62");
							HX_STACK_LINE(5488)
							Float tmp63 = _this->c1->r2y;		HX_STACK_VAR(tmp63,"tmp63");
							HX_STACK_LINE(5488)
							Float tmp64 = (tmp62 * tmp63);		HX_STACK_VAR(tmp64,"tmp64");
							HX_STACK_LINE(5488)
							Float tmp65 = (tmp61 - tmp64);		HX_STACK_VAR(tmp65,"tmp65");
							HX_STACK_LINE(5488)
							_this->rn1b = tmp65;
							HX_STACK_LINE(5488)
							Float tmp66 = _this->c1->r2x;		HX_STACK_VAR(tmp66,"tmp66");
							HX_STACK_LINE(5488)
							Float tmp67 = _this->nx;		HX_STACK_VAR(tmp67,"tmp67");
							HX_STACK_LINE(5488)
							Float tmp68 = (tmp66 * tmp67);		HX_STACK_VAR(tmp68,"tmp68");
							HX_STACK_LINE(5488)
							Float tmp69 = _this->c1->r2y;		HX_STACK_VAR(tmp69,"tmp69");
							HX_STACK_LINE(5488)
							Float tmp70 = _this->ny;		HX_STACK_VAR(tmp70,"tmp70");
							HX_STACK_LINE(5488)
							Float tmp71 = (tmp69 * tmp70);		HX_STACK_VAR(tmp71,"tmp71");
							HX_STACK_LINE(5488)
							Float tmp72 = (tmp68 + tmp71);		HX_STACK_VAR(tmp72,"tmp72");
							HX_STACK_LINE(5488)
							_this->rt1b = tmp72;
							HX_STACK_LINE(5488)
							Float tmp73 = _this->b2->kinvelx;		HX_STACK_VAR(tmp73,"tmp73");
							HX_STACK_LINE(5488)
							Float tmp74 = _this->c1->r2y;		HX_STACK_VAR(tmp74,"tmp74");
							HX_STACK_LINE(5488)
							Float tmp75 = _this->b2->kinangvel;		HX_STACK_VAR(tmp75,"tmp75");
							HX_STACK_LINE(5488)
							Float tmp76 = (tmp74 * tmp75);		HX_STACK_VAR(tmp76,"tmp76");
							HX_STACK_LINE(5488)
							Float tmp77 = (tmp73 - tmp76);		HX_STACK_VAR(tmp77,"tmp77");
							HX_STACK_LINE(5488)
							Float tmp78 = _this->b1->kinvelx;		HX_STACK_VAR(tmp78,"tmp78");
							HX_STACK_LINE(5488)
							Float tmp79 = _this->c1->r1y;		HX_STACK_VAR(tmp79,"tmp79");
							HX_STACK_LINE(5488)
							Float tmp80 = _this->b1->kinangvel;		HX_STACK_VAR(tmp80,"tmp80");
							HX_STACK_LINE(5488)
							Float tmp81 = (tmp79 * tmp80);		HX_STACK_VAR(tmp81,"tmp81");
							HX_STACK_LINE(5488)
							Float tmp82 = (tmp78 - tmp81);		HX_STACK_VAR(tmp82,"tmp82");
							HX_STACK_LINE(5488)
							Float tmp83 = (tmp77 - tmp82);		HX_STACK_VAR(tmp83,"tmp83");
							HX_STACK_LINE(5488)
							_this->k1x = tmp83;
							HX_STACK_LINE(5488)
							Float tmp84 = _this->b2->kinvely;		HX_STACK_VAR(tmp84,"tmp84");
							HX_STACK_LINE(5488)
							Float tmp85 = _this->c1->r2x;		HX_STACK_VAR(tmp85,"tmp85");
							HX_STACK_LINE(5488)
							Float tmp86 = _this->b2->kinangvel;		HX_STACK_VAR(tmp86,"tmp86");
							HX_STACK_LINE(5488)
							Float tmp87 = (tmp85 * tmp86);		HX_STACK_VAR(tmp87,"tmp87");
							HX_STACK_LINE(5488)
							Float tmp88 = (tmp84 + tmp87);		HX_STACK_VAR(tmp88,"tmp88");
							HX_STACK_LINE(5488)
							Float tmp89 = _this->b1->kinvely;		HX_STACK_VAR(tmp89,"tmp89");
							HX_STACK_LINE(5488)
							Float tmp90 = _this->c1->r1x;		HX_STACK_VAR(tmp90,"tmp90");
							HX_STACK_LINE(5488)
							Float tmp91 = _this->b1->kinangvel;		HX_STACK_VAR(tmp91,"tmp91");
							HX_STACK_LINE(5488)
							Float tmp92 = (tmp90 * tmp91);		HX_STACK_VAR(tmp92,"tmp92");
							HX_STACK_LINE(5488)
							Float tmp93 = (tmp89 + tmp92);		HX_STACK_VAR(tmp93,"tmp93");
							HX_STACK_LINE(5488)
							Float tmp94 = (tmp88 - tmp93);		HX_STACK_VAR(tmp94,"tmp94");
							HX_STACK_LINE(5488)
							_this->k1y = tmp94;
						}
						HX_STACK_LINE(5488)
						bool tmp45 = _this->hc2;		HX_STACK_VAR(tmp45,"tmp45");
						HX_STACK_LINE(5488)
						if ((tmp45)){
							HX_STACK_LINE(5488)
							Float tmp46 = _this->ny;		HX_STACK_VAR(tmp46,"tmp46");
							HX_STACK_LINE(5488)
							Float tmp47 = _this->c2->r1x;		HX_STACK_VAR(tmp47,"tmp47");
							HX_STACK_LINE(5488)
							Float tmp48 = (tmp46 * tmp47);		HX_STACK_VAR(tmp48,"tmp48");
							HX_STACK_LINE(5488)
							Float tmp49 = _this->nx;		HX_STACK_VAR(tmp49,"tmp49");
							HX_STACK_LINE(5488)
							Float tmp50 = _this->c2->r1y;		HX_STACK_VAR(tmp50,"tmp50");
							HX_STACK_LINE(5488)
							Float tmp51 = (tmp49 * tmp50);		HX_STACK_VAR(tmp51,"tmp51");
							HX_STACK_LINE(5488)
							Float tmp52 = (tmp48 - tmp51);		HX_STACK_VAR(tmp52,"tmp52");
							HX_STACK_LINE(5488)
							_this->rn2a = tmp52;
							HX_STACK_LINE(5488)
							Float tmp53 = _this->c2->r1x;		HX_STACK_VAR(tmp53,"tmp53");
							HX_STACK_LINE(5488)
							Float tmp54 = _this->nx;		HX_STACK_VAR(tmp54,"tmp54");
							HX_STACK_LINE(5488)
							Float tmp55 = (tmp53 * tmp54);		HX_STACK_VAR(tmp55,"tmp55");
							HX_STACK_LINE(5488)
							Float tmp56 = _this->c2->r1y;		HX_STACK_VAR(tmp56,"tmp56");
							HX_STACK_LINE(5488)
							Float tmp57 = _this->ny;		HX_STACK_VAR(tmp57,"tmp57");
							HX_STACK_LINE(5488)
							Float tmp58 = (tmp56 * tmp57);		HX_STACK_VAR(tmp58,"tmp58");
							HX_STACK_LINE(5488)
							Float tmp59 = (tmp55 + tmp58);		HX_STACK_VAR(tmp59,"tmp59");
							HX_STACK_LINE(5488)
							_this->rt2a = tmp59;
							HX_STACK_LINE(5488)
							Float tmp60 = _this->ny;		HX_STACK_VAR(tmp60,"tmp60");
							HX_STACK_LINE(5488)
							Float tmp61 = _this->c2->r2x;		HX_STACK_VAR(tmp61,"tmp61");
							HX_STACK_LINE(5488)
							Float tmp62 = (tmp60 * tmp61);		HX_STACK_VAR(tmp62,"tmp62");
							HX_STACK_LINE(5488)
							Float tmp63 = _this->nx;		HX_STACK_VAR(tmp63,"tmp63");
							HX_STACK_LINE(5488)
							Float tmp64 = _this->c2->r2y;		HX_STACK_VAR(tmp64,"tmp64");
							HX_STACK_LINE(5488)
							Float tmp65 = (tmp63 * tmp64);		HX_STACK_VAR(tmp65,"tmp65");
							HX_STACK_LINE(5488)
							Float tmp66 = (tmp62 - tmp65);		HX_STACK_VAR(tmp66,"tmp66");
							HX_STACK_LINE(5488)
							_this->rn2b = tmp66;
							HX_STACK_LINE(5488)
							Float tmp67 = _this->c2->r2x;		HX_STACK_VAR(tmp67,"tmp67");
							HX_STACK_LINE(5488)
							Float tmp68 = _this->nx;		HX_STACK_VAR(tmp68,"tmp68");
							HX_STACK_LINE(5488)
							Float tmp69 = (tmp67 * tmp68);		HX_STACK_VAR(tmp69,"tmp69");
							HX_STACK_LINE(5488)
							Float tmp70 = _this->c2->r2y;		HX_STACK_VAR(tmp70,"tmp70");
							HX_STACK_LINE(5488)
							Float tmp71 = _this->ny;		HX_STACK_VAR(tmp71,"tmp71");
							HX_STACK_LINE(5488)
							Float tmp72 = (tmp70 * tmp71);		HX_STACK_VAR(tmp72,"tmp72");
							HX_STACK_LINE(5488)
							Float tmp73 = (tmp69 + tmp72);		HX_STACK_VAR(tmp73,"tmp73");
							HX_STACK_LINE(5488)
							_this->rt2b = tmp73;
							HX_STACK_LINE(5488)
							Float tmp74 = _this->b2->kinvelx;		HX_STACK_VAR(tmp74,"tmp74");
							HX_STACK_LINE(5488)
							Float tmp75 = _this->c2->r2y;		HX_STACK_VAR(tmp75,"tmp75");
							HX_STACK_LINE(5488)
							Float tmp76 = _this->b2->kinangvel;		HX_STACK_VAR(tmp76,"tmp76");
							HX_STACK_LINE(5488)
							Float tmp77 = (tmp75 * tmp76);		HX_STACK_VAR(tmp77,"tmp77");
							HX_STACK_LINE(5488)
							Float tmp78 = (tmp74 - tmp77);		HX_STACK_VAR(tmp78,"tmp78");
							HX_STACK_LINE(5488)
							Float tmp79 = _this->b1->kinvelx;		HX_STACK_VAR(tmp79,"tmp79");
							HX_STACK_LINE(5488)
							Float tmp80 = _this->c2->r1y;		HX_STACK_VAR(tmp80,"tmp80");
							HX_STACK_LINE(5488)
							Float tmp81 = _this->b1->kinangvel;		HX_STACK_VAR(tmp81,"tmp81");
							HX_STACK_LINE(5488)
							Float tmp82 = (tmp80 * tmp81);		HX_STACK_VAR(tmp82,"tmp82");
							HX_STACK_LINE(5488)
							Float tmp83 = (tmp79 - tmp82);		HX_STACK_VAR(tmp83,"tmp83");
							HX_STACK_LINE(5488)
							Float tmp84 = (tmp78 - tmp83);		HX_STACK_VAR(tmp84,"tmp84");
							HX_STACK_LINE(5488)
							_this->k2x = tmp84;
							HX_STACK_LINE(5488)
							Float tmp85 = _this->b2->kinvely;		HX_STACK_VAR(tmp85,"tmp85");
							HX_STACK_LINE(5488)
							Float tmp86 = _this->c2->r2x;		HX_STACK_VAR(tmp86,"tmp86");
							HX_STACK_LINE(5488)
							Float tmp87 = _this->b2->kinangvel;		HX_STACK_VAR(tmp87,"tmp87");
							HX_STACK_LINE(5488)
							Float tmp88 = (tmp86 * tmp87);		HX_STACK_VAR(tmp88,"tmp88");
							HX_STACK_LINE(5488)
							Float tmp89 = (tmp85 + tmp88);		HX_STACK_VAR(tmp89,"tmp89");
							HX_STACK_LINE(5488)
							Float tmp90 = _this->b1->kinvely;		HX_STACK_VAR(tmp90,"tmp90");
							HX_STACK_LINE(5488)
							Float tmp91 = _this->c2->r1x;		HX_STACK_VAR(tmp91,"tmp91");
							HX_STACK_LINE(5488)
							Float tmp92 = _this->b1->kinangvel;		HX_STACK_VAR(tmp92,"tmp92");
							HX_STACK_LINE(5488)
							Float tmp93 = (tmp91 * tmp92);		HX_STACK_VAR(tmp93,"tmp93");
							HX_STACK_LINE(5488)
							Float tmp94 = (tmp90 + tmp93);		HX_STACK_VAR(tmp94,"tmp94");
							HX_STACK_LINE(5488)
							Float tmp95 = (tmp89 - tmp94);		HX_STACK_VAR(tmp95,"tmp95");
							HX_STACK_LINE(5488)
							_this->k2y = tmp95;
							HX_STACK_LINE(5488)
							{
								HX_STACK_LINE(5488)
								Float tmp96 = mass_sum;		HX_STACK_VAR(tmp96,"tmp96");
								HX_STACK_LINE(5488)
								Float tmp97 = _this->b1->sinertia;		HX_STACK_VAR(tmp97,"tmp97");
								HX_STACK_LINE(5488)
								Float tmp98 = _this->rn1a;		HX_STACK_VAR(tmp98,"tmp98");
								HX_STACK_LINE(5488)
								Float tmp99 = (tmp97 * tmp98);		HX_STACK_VAR(tmp99,"tmp99");
								HX_STACK_LINE(5488)
								Float tmp100 = _this->rn1a;		HX_STACK_VAR(tmp100,"tmp100");
								HX_STACK_LINE(5488)
								Float tmp101 = (tmp99 * tmp100);		HX_STACK_VAR(tmp101,"tmp101");
								HX_STACK_LINE(5488)
								Float tmp102 = (tmp96 + tmp101);		HX_STACK_VAR(tmp102,"tmp102");
								HX_STACK_LINE(5488)
								Float tmp103 = _this->b2->sinertia;		HX_STACK_VAR(tmp103,"tmp103");
								HX_STACK_LINE(5488)
								Float tmp104 = _this->rn1b;		HX_STACK_VAR(tmp104,"tmp104");
								HX_STACK_LINE(5488)
								Float tmp105 = (tmp103 * tmp104);		HX_STACK_VAR(tmp105,"tmp105");
								HX_STACK_LINE(5488)
								Float tmp106 = _this->rn1b;		HX_STACK_VAR(tmp106,"tmp106");
								HX_STACK_LINE(5488)
								Float tmp107 = (tmp105 * tmp106);		HX_STACK_VAR(tmp107,"tmp107");
								HX_STACK_LINE(5488)
								Float tmp108 = (tmp102 + tmp107);		HX_STACK_VAR(tmp108,"tmp108");
								HX_STACK_LINE(5488)
								_this->kMassa = tmp108;
								HX_STACK_LINE(5488)
								Float tmp109 = mass_sum;		HX_STACK_VAR(tmp109,"tmp109");
								HX_STACK_LINE(5488)
								Float tmp110 = _this->b1->sinertia;		HX_STACK_VAR(tmp110,"tmp110");
								HX_STACK_LINE(5488)
								Float tmp111 = _this->rn1a;		HX_STACK_VAR(tmp111,"tmp111");
								HX_STACK_LINE(5488)
								Float tmp112 = (tmp110 * tmp111);		HX_STACK_VAR(tmp112,"tmp112");
								HX_STACK_LINE(5488)
								Float tmp113 = _this->rn2a;		HX_STACK_VAR(tmp113,"tmp113");
								HX_STACK_LINE(5488)
								Float tmp114 = (tmp112 * tmp113);		HX_STACK_VAR(tmp114,"tmp114");
								HX_STACK_LINE(5488)
								Float tmp115 = (tmp109 + tmp114);		HX_STACK_VAR(tmp115,"tmp115");
								HX_STACK_LINE(5488)
								Float tmp116 = _this->b2->sinertia;		HX_STACK_VAR(tmp116,"tmp116");
								HX_STACK_LINE(5488)
								Float tmp117 = _this->rn1b;		HX_STACK_VAR(tmp117,"tmp117");
								HX_STACK_LINE(5488)
								Float tmp118 = (tmp116 * tmp117);		HX_STACK_VAR(tmp118,"tmp118");
								HX_STACK_LINE(5488)
								Float tmp119 = _this->rn2b;		HX_STACK_VAR(tmp119,"tmp119");
								HX_STACK_LINE(5488)
								Float tmp120 = (tmp118 * tmp119);		HX_STACK_VAR(tmp120,"tmp120");
								HX_STACK_LINE(5488)
								Float tmp121 = (tmp115 + tmp120);		HX_STACK_VAR(tmp121,"tmp121");
								HX_STACK_LINE(5488)
								_this->kMassb = tmp121;
								HX_STACK_LINE(5488)
								Float tmp122 = mass_sum;		HX_STACK_VAR(tmp122,"tmp122");
								HX_STACK_LINE(5488)
								Float tmp123 = _this->b1->sinertia;		HX_STACK_VAR(tmp123,"tmp123");
								HX_STACK_LINE(5488)
								Float tmp124 = _this->rn2a;		HX_STACK_VAR(tmp124,"tmp124");
								HX_STACK_LINE(5488)
								Float tmp125 = (tmp123 * tmp124);		HX_STACK_VAR(tmp125,"tmp125");
								HX_STACK_LINE(5488)
								Float tmp126 = _this->rn2a;		HX_STACK_VAR(tmp126,"tmp126");
								HX_STACK_LINE(5488)
								Float tmp127 = (tmp125 * tmp126);		HX_STACK_VAR(tmp127,"tmp127");
								HX_STACK_LINE(5488)
								Float tmp128 = (tmp122 + tmp127);		HX_STACK_VAR(tmp128,"tmp128");
								HX_STACK_LINE(5488)
								Float tmp129 = _this->b2->sinertia;		HX_STACK_VAR(tmp129,"tmp129");
								HX_STACK_LINE(5488)
								Float tmp130 = _this->rn2b;		HX_STACK_VAR(tmp130,"tmp130");
								HX_STACK_LINE(5488)
								Float tmp131 = (tmp129 * tmp130);		HX_STACK_VAR(tmp131,"tmp131");
								HX_STACK_LINE(5488)
								Float tmp132 = _this->rn2b;		HX_STACK_VAR(tmp132,"tmp132");
								HX_STACK_LINE(5488)
								Float tmp133 = (tmp131 * tmp132);		HX_STACK_VAR(tmp133,"tmp133");
								HX_STACK_LINE(5488)
								Float tmp134 = (tmp128 + tmp133);		HX_STACK_VAR(tmp134,"tmp134");
								HX_STACK_LINE(5488)
								_this->kMassc = tmp134;
							}
							HX_STACK_LINE(5488)
							Float tmp96 = (_this->kMassa * _this->kMassa);		HX_STACK_VAR(tmp96,"tmp96");
							HX_STACK_LINE(5488)
							Float tmp97 = ((int)2 * _this->kMassb);		HX_STACK_VAR(tmp97,"tmp97");
							HX_STACK_LINE(5488)
							Float tmp98 = _this->kMassb;		HX_STACK_VAR(tmp98,"tmp98");
							HX_STACK_LINE(5488)
							Float tmp99 = (tmp97 * tmp98);		HX_STACK_VAR(tmp99,"tmp99");
							HX_STACK_LINE(5488)
							Float tmp100 = (tmp96 + tmp99);		HX_STACK_VAR(tmp100,"tmp100");
							HX_STACK_LINE(5488)
							Float tmp101 = (_this->kMassc * _this->kMassc);		HX_STACK_VAR(tmp101,"tmp101");
							HX_STACK_LINE(5488)
							Float tmp102 = (tmp100 + tmp101);		HX_STACK_VAR(tmp102,"tmp102");
							HX_STACK_LINE(5488)
							Float norm = tmp102;		HX_STACK_VAR(norm,"norm");
							HX_STACK_LINE(5488)
							Float tmp103 = norm;		HX_STACK_VAR(tmp103,"tmp103");
							HX_STACK_LINE(5488)
							Float tmp104 = ::nape::Config_obj::illConditionedThreshold;		HX_STACK_VAR(tmp104,"tmp104");
							HX_STACK_LINE(5488)
							Float tmp105 = (_this->kMassa * _this->kMassc);		HX_STACK_VAR(tmp105,"tmp105");
							HX_STACK_LINE(5488)
							Float tmp106 = (_this->kMassb * _this->kMassb);		HX_STACK_VAR(tmp106,"tmp106");
							HX_STACK_LINE(5488)
							Float tmp107 = (tmp105 - tmp106);		HX_STACK_VAR(tmp107,"tmp107");
							HX_STACK_LINE(5488)
							Float tmp108 = (tmp104 * tmp107);		HX_STACK_VAR(tmp108,"tmp108");
							HX_STACK_LINE(5488)
							bool tmp109 = (tmp103 < tmp108);		HX_STACK_VAR(tmp109,"tmp109");
							HX_STACK_LINE(5488)
							if ((tmp109)){
								HX_STACK_LINE(5488)
								{
									HX_STACK_LINE(5488)
									_this->Ka = _this->kMassa;
									HX_STACK_LINE(5488)
									_this->Kb = _this->kMassb;
									HX_STACK_LINE(5488)
									_this->Kc = _this->kMassc;
								}
								HX_STACK_LINE(5488)
								{
									HX_STACK_LINE(5488)
									Float tmp110 = (_this->kMassa * _this->kMassc);		HX_STACK_VAR(tmp110,"tmp110");
									HX_STACK_LINE(5488)
									Float tmp111 = (_this->kMassb * _this->kMassb);		HX_STACK_VAR(tmp111,"tmp111");
									HX_STACK_LINE(5488)
									Float tmp112 = (tmp110 - tmp111);		HX_STACK_VAR(tmp112,"tmp112");
									HX_STACK_LINE(5488)
									Float det = tmp112;		HX_STACK_VAR(det,"det");
									HX_STACK_LINE(5488)
									bool tmp113 = (det != det);		HX_STACK_VAR(tmp113,"tmp113");
									HX_STACK_LINE(5488)
									if ((tmp113)){
										HX_STACK_LINE(5488)
										Float tmp114 = _this->kMassc = (int)0;		HX_STACK_VAR(tmp114,"tmp114");
										HX_STACK_LINE(5488)
										Float tmp115 = _this->kMassb = tmp114;		HX_STACK_VAR(tmp115,"tmp115");
										HX_STACK_LINE(5488)
										_this->kMassa = tmp115;
										HX_STACK_LINE(5488)
										(int)3;
									}
									else{
										HX_STACK_LINE(5488)
										bool tmp114 = (det == (int)0);		HX_STACK_VAR(tmp114,"tmp114");
										HX_STACK_LINE(5488)
										if ((tmp114)){
											HX_STACK_LINE(5488)
											int flag = (int)0;		HX_STACK_VAR(flag,"flag");
											HX_STACK_LINE(5488)
											bool tmp115 = (_this->kMassa != (int)0);		HX_STACK_VAR(tmp115,"tmp115");
											HX_STACK_LINE(5488)
											if ((tmp115)){
												HX_STACK_LINE(5488)
												Float tmp116 = (Float((int)1) / Float(_this->kMassa));		HX_STACK_VAR(tmp116,"tmp116");
												HX_STACK_LINE(5488)
												_this->kMassa = tmp116;
											}
											else{
												HX_STACK_LINE(5488)
												_this->kMassa = (int)0;
												HX_STACK_LINE(5488)
												hx::OrEq(flag,(int)1);
											}
											HX_STACK_LINE(5488)
											bool tmp116 = (_this->kMassc != (int)0);		HX_STACK_VAR(tmp116,"tmp116");
											HX_STACK_LINE(5488)
											if ((tmp116)){
												HX_STACK_LINE(5488)
												Float tmp117 = (Float((int)1) / Float(_this->kMassc));		HX_STACK_VAR(tmp117,"tmp117");
												HX_STACK_LINE(5488)
												_this->kMassc = tmp117;
											}
											else{
												HX_STACK_LINE(5488)
												_this->kMassc = (int)0;
												HX_STACK_LINE(5488)
												hx::OrEq(flag,(int)2);
											}
											HX_STACK_LINE(5488)
											_this->kMassb = (int)0;
											HX_STACK_LINE(5488)
											flag;
										}
										else{
											HX_STACK_LINE(5488)
											Float tmp115 = (Float((int)1) / Float(det));		HX_STACK_VAR(tmp115,"tmp115");
											HX_STACK_LINE(5488)
											det = tmp115;
											HX_STACK_LINE(5488)
											Float tmp116 = (_this->kMassc * det);		HX_STACK_VAR(tmp116,"tmp116");
											HX_STACK_LINE(5488)
											Float t = tmp116;		HX_STACK_VAR(t,"t");
											HX_STACK_LINE(5488)
											Float tmp117 = (_this->kMassa * det);		HX_STACK_VAR(tmp117,"tmp117");
											HX_STACK_LINE(5488)
											_this->kMassc = tmp117;
											HX_STACK_LINE(5488)
											_this->kMassa = t;
											HX_STACK_LINE(5488)
											Float tmp118 = det;		HX_STACK_VAR(tmp118,"tmp118");
											HX_STACK_LINE(5488)
											Float tmp119 = -(tmp118);		HX_STACK_VAR(tmp119,"tmp119");
											HX_STACK_LINE(5488)
											hx::MultEq(_this->kMassb,tmp119);
											HX_STACK_LINE(5488)
											(int)0;
										}
									}
								}
							}
							else{
								HX_STACK_LINE(5488)
								_this->hc2 = false;
								HX_STACK_LINE(5488)
								Float tmp110 = _this->oc2->dist;		HX_STACK_VAR(tmp110,"tmp110");
								HX_STACK_LINE(5488)
								Float tmp111 = _this->oc1->dist;		HX_STACK_VAR(tmp111,"tmp111");
								HX_STACK_LINE(5488)
								bool tmp112 = (tmp110 < tmp111);		HX_STACK_VAR(tmp112,"tmp112");
								HX_STACK_LINE(5488)
								if ((tmp112)){
									HX_STACK_LINE(5488)
									::zpp_nape::dynamics::ZPP_IContact t = _this->c1;		HX_STACK_VAR(t,"t");
									HX_STACK_LINE(5488)
									_this->c1 = _this->c2;
									HX_STACK_LINE(5488)
									_this->c2 = t;
								}
								HX_STACK_LINE(5488)
								_this->oc2->active = false;
								HX_STACK_LINE(5488)
								_this->contacts->modified = true;
							}
						}
						HX_STACK_LINE(5488)
						{
							HX_STACK_LINE(5488)
							Float tmp46 = _this->b2->svelx;		HX_STACK_VAR(tmp46,"tmp46");
							HX_STACK_LINE(5488)
							_this->surfacex = tmp46;
							HX_STACK_LINE(5488)
							Float tmp47 = _this->b2->svely;		HX_STACK_VAR(tmp47,"tmp47");
							HX_STACK_LINE(5488)
							_this->surfacey = tmp47;
							HX_STACK_LINE(5488)
							{
							}
						}
						HX_STACK_LINE(5488)
						{
							HX_STACK_LINE(5488)
							Float t = ((Float)1.0);		HX_STACK_VAR(t,"t");
							HX_STACK_LINE(5488)
							Float tmp46 = _this->b1->svelx;		HX_STACK_VAR(tmp46,"tmp46");
							HX_STACK_LINE(5488)
							Float tmp47 = t;		HX_STACK_VAR(tmp47,"tmp47");
							HX_STACK_LINE(5488)
							Float tmp48 = (tmp46 * tmp47);		HX_STACK_VAR(tmp48,"tmp48");
							HX_STACK_LINE(5488)
							hx::AddEq(_this->surfacex,tmp48);
							HX_STACK_LINE(5488)
							Float tmp49 = _this->b1->svely;		HX_STACK_VAR(tmp49,"tmp49");
							HX_STACK_LINE(5488)
							Float tmp50 = t;		HX_STACK_VAR(tmp50,"tmp50");
							HX_STACK_LINE(5488)
							Float tmp51 = (tmp49 * tmp50);		HX_STACK_VAR(tmp51,"tmp51");
							HX_STACK_LINE(5488)
							hx::AddEq(_this->surfacey,tmp51);
						}
						HX_STACK_LINE(5488)
						{
							HX_STACK_LINE(5488)
							Float tmp46 = _this->surfacex;		HX_STACK_VAR(tmp46,"tmp46");
							HX_STACK_LINE(5488)
							Float tmp47 = -(tmp46);		HX_STACK_VAR(tmp47,"tmp47");
							HX_STACK_LINE(5488)
							_this->surfacex = tmp47;
							HX_STACK_LINE(5488)
							Float tmp48 = _this->surfacey;		HX_STACK_VAR(tmp48,"tmp48");
							HX_STACK_LINE(5488)
							Float tmp49 = -(tmp48);		HX_STACK_VAR(tmp49,"tmp49");
							HX_STACK_LINE(5488)
							_this->surfacey = tmp49;
						}
						HX_STACK_LINE(5488)
						Float tmp46 = _this->b1->sinertia;		HX_STACK_VAR(tmp46,"tmp46");
						HX_STACK_LINE(5488)
						Float tmp47 = _this->b2->sinertia;		HX_STACK_VAR(tmp47,"tmp47");
						HX_STACK_LINE(5488)
						Float tmp48 = (tmp46 + tmp47);		HX_STACK_VAR(tmp48,"tmp48");
						HX_STACK_LINE(5488)
						_this->rMass = tmp48;
						HX_STACK_LINE(5488)
						bool tmp49 = (_this->rMass != (int)0);		HX_STACK_VAR(tmp49,"tmp49");
						HX_STACK_LINE(5488)
						if ((tmp49)){
							HX_STACK_LINE(5488)
							Float tmp50 = (Float((int)1) / Float(_this->rMass));		HX_STACK_VAR(tmp50,"tmp50");
							HX_STACK_LINE(5488)
							_this->rMass = tmp50;
						}
						HX_STACK_LINE(5488)
						tmp26 = fst;
					}
					HX_STACK_LINE(5488)
					if ((tmp26)){
						HX_STACK_LINE(5489)
						arb->active = false;
					}
				}
				else{
					HX_STACK_LINE(5492)
					::zpp_nape::dynamics::ZPP_FluidArbiter _this = arb->fluidarb;		HX_STACK_VAR(_this,"_this");
					HX_STACK_LINE(5492)
					bool tmp26 = (_this->pre_dt == ((Float)-1.0));		HX_STACK_VAR(tmp26,"tmp26");
					HX_STACK_LINE(5492)
					if ((tmp26)){
						HX_STACK_LINE(5492)
						_this->pre_dt = dt;
					}
					HX_STACK_LINE(5492)
					Float tmp27 = (Float(dt) / Float(_this->pre_dt));		HX_STACK_VAR(tmp27,"tmp27");
					HX_STACK_LINE(5492)
					Float dtratio = tmp27;		HX_STACK_VAR(dtratio,"dtratio");
					HX_STACK_LINE(5492)
					_this->pre_dt = dt;
					HX_STACK_LINE(5492)
					{
						HX_STACK_LINE(5492)
						Float tmp28 = _this->centroidx;		HX_STACK_VAR(tmp28,"tmp28");
						HX_STACK_LINE(5492)
						Float tmp29 = _this->b1->posx;		HX_STACK_VAR(tmp29,"tmp29");
						HX_STACK_LINE(5492)
						Float tmp30 = (tmp28 - tmp29);		HX_STACK_VAR(tmp30,"tmp30");
						HX_STACK_LINE(5492)
						_this->r1x = tmp30;
						HX_STACK_LINE(5492)
						Float tmp31 = _this->centroidy;		HX_STACK_VAR(tmp31,"tmp31");
						HX_STACK_LINE(5492)
						Float tmp32 = _this->b1->posy;		HX_STACK_VAR(tmp32,"tmp32");
						HX_STACK_LINE(5492)
						Float tmp33 = (tmp31 - tmp32);		HX_STACK_VAR(tmp33,"tmp33");
						HX_STACK_LINE(5492)
						_this->r1y = tmp33;
					}
					HX_STACK_LINE(5492)
					{
						HX_STACK_LINE(5492)
						Float tmp28 = _this->centroidx;		HX_STACK_VAR(tmp28,"tmp28");
						HX_STACK_LINE(5492)
						Float tmp29 = _this->b2->posx;		HX_STACK_VAR(tmp29,"tmp29");
						HX_STACK_LINE(5492)
						Float tmp30 = (tmp28 - tmp29);		HX_STACK_VAR(tmp30,"tmp30");
						HX_STACK_LINE(5492)
						_this->r2x = tmp30;
						HX_STACK_LINE(5492)
						Float tmp31 = _this->centroidy;		HX_STACK_VAR(tmp31,"tmp31");
						HX_STACK_LINE(5492)
						Float tmp32 = _this->b2->posy;		HX_STACK_VAR(tmp32,"tmp32");
						HX_STACK_LINE(5492)
						Float tmp33 = (tmp31 - tmp32);		HX_STACK_VAR(tmp33,"tmp33");
						HX_STACK_LINE(5492)
						_this->r2y = tmp33;
					}
					HX_STACK_LINE(5492)
					Float g1x = ((Float)0.0);		HX_STACK_VAR(g1x,"g1x");
					HX_STACK_LINE(5492)
					Float g1y = ((Float)0.0);		HX_STACK_VAR(g1y,"g1y");
					HX_STACK_LINE(5492)
					bool tmp28 = _this->ws1->fluidEnabled;		HX_STACK_VAR(tmp28,"tmp28");
					HX_STACK_LINE(5492)
					bool tmp29;		HX_STACK_VAR(tmp29,"tmp29");
					HX_STACK_LINE(5492)
					if ((tmp28)){
						HX_STACK_LINE(5492)
						::zpp_nape::phys::ZPP_FluidProperties tmp30 = _this->ws1->fluidProperties;		HX_STACK_VAR(tmp30,"tmp30");
						HX_STACK_LINE(5492)
						::zpp_nape::phys::ZPP_FluidProperties tmp31 = tmp30;		HX_STACK_VAR(tmp31,"tmp31");
						HX_STACK_LINE(5492)
						::nape::geom::Vec2 tmp32 = tmp31->wrap_gravity;		HX_STACK_VAR(tmp32,"tmp32");
						HX_STACK_LINE(5492)
						tmp29 = (tmp32 != null());
					}
					else{
						HX_STACK_LINE(5492)
						tmp29 = false;
					}
					HX_STACK_LINE(5492)
					if ((tmp29)){
						HX_STACK_LINE(5492)
						::zpp_nape::phys::ZPP_FluidProperties tmp30 = _this->ws1->fluidProperties;		HX_STACK_VAR(tmp30,"tmp30");
						HX_STACK_LINE(5492)
						g1x = tmp30->gravityx;
						HX_STACK_LINE(5492)
						::zpp_nape::phys::ZPP_FluidProperties tmp31 = _this->ws1->fluidProperties;		HX_STACK_VAR(tmp31,"tmp31");
						HX_STACK_LINE(5492)
						g1y = tmp31->gravityy;
						HX_STACK_LINE(5492)
						{
						}
					}
					else{
						HX_STACK_LINE(5492)
						Float tmp30 = this->gravityx;		HX_STACK_VAR(tmp30,"tmp30");
						HX_STACK_LINE(5492)
						g1x = tmp30;
						HX_STACK_LINE(5492)
						Float tmp31 = this->gravityy;		HX_STACK_VAR(tmp31,"tmp31");
						HX_STACK_LINE(5492)
						g1y = tmp31;
						HX_STACK_LINE(5492)
						{
						}
					}
					HX_STACK_LINE(5492)
					Float g2x = ((Float)0.0);		HX_STACK_VAR(g2x,"g2x");
					HX_STACK_LINE(5492)
					Float g2y = ((Float)0.0);		HX_STACK_VAR(g2y,"g2y");
					HX_STACK_LINE(5492)
					bool tmp30 = _this->ws2->fluidEnabled;		HX_STACK_VAR(tmp30,"tmp30");
					HX_STACK_LINE(5492)
					bool tmp31;		HX_STACK_VAR(tmp31,"tmp31");
					HX_STACK_LINE(5492)
					if ((tmp30)){
						HX_STACK_LINE(5492)
						::zpp_nape::phys::ZPP_FluidProperties tmp32 = _this->ws2->fluidProperties;		HX_STACK_VAR(tmp32,"tmp32");
						HX_STACK_LINE(5492)
						::zpp_nape::phys::ZPP_FluidProperties tmp33 = tmp32;		HX_STACK_VAR(tmp33,"tmp33");
						HX_STACK_LINE(5492)
						::nape::geom::Vec2 tmp34 = tmp33->wrap_gravity;		HX_STACK_VAR(tmp34,"tmp34");
						HX_STACK_LINE(5492)
						tmp31 = (tmp34 != null());
					}
					else{
						HX_STACK_LINE(5492)
						tmp31 = false;
					}
					HX_STACK_LINE(5492)
					if ((tmp31)){
						HX_STACK_LINE(5492)
						::zpp_nape::phys::ZPP_FluidProperties tmp32 = _this->ws2->fluidProperties;		HX_STACK_VAR(tmp32,"tmp32");
						HX_STACK_LINE(5492)
						g2x = tmp32->gravityx;
						HX_STACK_LINE(5492)
						::zpp_nape::phys::ZPP_FluidProperties tmp33 = _this->ws2->fluidProperties;		HX_STACK_VAR(tmp33,"tmp33");
						HX_STACK_LINE(5492)
						g2y = tmp33->gravityy;
						HX_STACK_LINE(5492)
						{
						}
					}
					else{
						HX_STACK_LINE(5492)
						Float tmp32 = this->gravityx;		HX_STACK_VAR(tmp32,"tmp32");
						HX_STACK_LINE(5492)
						g2x = tmp32;
						HX_STACK_LINE(5492)
						Float tmp33 = this->gravityy;		HX_STACK_VAR(tmp33,"tmp33");
						HX_STACK_LINE(5492)
						g2y = tmp33;
						HX_STACK_LINE(5492)
						{
						}
					}
					HX_STACK_LINE(5492)
					Float buoyx = (int)0;		HX_STACK_VAR(buoyx,"buoyx");
					HX_STACK_LINE(5492)
					Float buoyy = (int)0;		HX_STACK_VAR(buoyy,"buoyy");
					HX_STACK_LINE(5492)
					bool tmp32 = _this->ws1->fluidEnabled;		HX_STACK_VAR(tmp32,"tmp32");
					HX_STACK_LINE(5492)
					bool tmp33;		HX_STACK_VAR(tmp33,"tmp33");
					HX_STACK_LINE(5492)
					if ((tmp32)){
						HX_STACK_LINE(5492)
						tmp33 = _this->ws2->fluidEnabled;
					}
					else{
						HX_STACK_LINE(5492)
						tmp33 = false;
					}
					HX_STACK_LINE(5492)
					if ((tmp33)){
						HX_STACK_LINE(5492)
						Float tmp34 = _this->overlap;		HX_STACK_VAR(tmp34,"tmp34");
						HX_STACK_LINE(5492)
						::zpp_nape::phys::ZPP_FluidProperties tmp35 = _this->ws1->fluidProperties;		HX_STACK_VAR(tmp35,"tmp35");
						HX_STACK_LINE(5492)
						Float tmp36 = tmp35->density;		HX_STACK_VAR(tmp36,"tmp36");
						HX_STACK_LINE(5492)
						Float tmp37 = (tmp34 * tmp36);		HX_STACK_VAR(tmp37,"tmp37");
						HX_STACK_LINE(5492)
						Float mass1 = tmp37;		HX_STACK_VAR(mass1,"mass1");
						HX_STACK_LINE(5492)
						Float tmp38 = _this->overlap;		HX_STACK_VAR(tmp38,"tmp38");
						HX_STACK_LINE(5492)
						::zpp_nape::phys::ZPP_FluidProperties tmp39 = _this->ws2->fluidProperties;		HX_STACK_VAR(tmp39,"tmp39");
						HX_STACK_LINE(5492)
						Float tmp40 = tmp39->density;		HX_STACK_VAR(tmp40,"tmp40");
						HX_STACK_LINE(5492)
						Float tmp41 = (tmp38 * tmp40);		HX_STACK_VAR(tmp41,"tmp41");
						HX_STACK_LINE(5492)
						Float mass2 = tmp41;		HX_STACK_VAR(mass2,"mass2");
						HX_STACK_LINE(5492)
						bool tmp42 = (mass1 > mass2);		HX_STACK_VAR(tmp42,"tmp42");
						HX_STACK_LINE(5492)
						if ((tmp42)){
							HX_STACK_LINE(5492)
							Float tmp43 = (mass1 + mass2);		HX_STACK_VAR(tmp43,"tmp43");
							HX_STACK_LINE(5492)
							Float t = tmp43;		HX_STACK_VAR(t,"t");
							HX_STACK_LINE(5492)
							Float tmp44 = (g1x * t);		HX_STACK_VAR(tmp44,"tmp44");
							HX_STACK_LINE(5492)
							hx::SubEq(buoyx,tmp44);
							HX_STACK_LINE(5492)
							Float tmp45 = (g1y * t);		HX_STACK_VAR(tmp45,"tmp45");
							HX_STACK_LINE(5492)
							hx::SubEq(buoyy,tmp45);
						}
						else{
							HX_STACK_LINE(5492)
							bool tmp43 = (mass1 < mass2);		HX_STACK_VAR(tmp43,"tmp43");
							HX_STACK_LINE(5492)
							if ((tmp43)){
								HX_STACK_LINE(5492)
								Float tmp44 = (mass1 + mass2);		HX_STACK_VAR(tmp44,"tmp44");
								HX_STACK_LINE(5492)
								Float t = tmp44;		HX_STACK_VAR(t,"t");
								HX_STACK_LINE(5492)
								Float tmp45 = (g2x * t);		HX_STACK_VAR(tmp45,"tmp45");
								HX_STACK_LINE(5492)
								hx::AddEq(buoyx,tmp45);
								HX_STACK_LINE(5492)
								Float tmp46 = (g2y * t);		HX_STACK_VAR(tmp46,"tmp46");
								HX_STACK_LINE(5492)
								hx::AddEq(buoyy,tmp46);
							}
							else{
								HX_STACK_LINE(5492)
								Float gx = ((Float)0.0);		HX_STACK_VAR(gx,"gx");
								HX_STACK_LINE(5492)
								Float gy = ((Float)0.0);		HX_STACK_VAR(gy,"gy");
								HX_STACK_LINE(5492)
								{
									HX_STACK_LINE(5492)
									Float tmp44 = (g1x + g2x);		HX_STACK_VAR(tmp44,"tmp44");
									HX_STACK_LINE(5492)
									gx = tmp44;
									HX_STACK_LINE(5492)
									Float tmp45 = (g1y + g2y);		HX_STACK_VAR(tmp45,"tmp45");
									HX_STACK_LINE(5492)
									gy = tmp45;
								}
								HX_STACK_LINE(5492)
								{
									HX_STACK_LINE(5492)
									Float t = ((Float)0.5);		HX_STACK_VAR(t,"t");
									HX_STACK_LINE(5492)
									hx::MultEq(gx,t);
									HX_STACK_LINE(5492)
									hx::MultEq(gy,t);
								}
								HX_STACK_LINE(5492)
								Float tmp44 = _this->ws1->worldCOMx;		HX_STACK_VAR(tmp44,"tmp44");
								HX_STACK_LINE(5492)
								Float tmp45 = gx;		HX_STACK_VAR(tmp45,"tmp45");
								HX_STACK_LINE(5492)
								Float tmp46 = (tmp44 * tmp45);		HX_STACK_VAR(tmp46,"tmp46");
								HX_STACK_LINE(5492)
								Float tmp47 = _this->ws1->worldCOMy;		HX_STACK_VAR(tmp47,"tmp47");
								HX_STACK_LINE(5492)
								Float tmp48 = gy;		HX_STACK_VAR(tmp48,"tmp48");
								HX_STACK_LINE(5492)
								Float tmp49 = (tmp47 * tmp48);		HX_STACK_VAR(tmp49,"tmp49");
								HX_STACK_LINE(5492)
								Float tmp50 = (tmp46 + tmp49);		HX_STACK_VAR(tmp50,"tmp50");
								HX_STACK_LINE(5492)
								Float tmp51 = _this->ws2->worldCOMx;		HX_STACK_VAR(tmp51,"tmp51");
								HX_STACK_LINE(5492)
								Float tmp52 = gx;		HX_STACK_VAR(tmp52,"tmp52");
								HX_STACK_LINE(5492)
								Float tmp53 = (tmp51 * tmp52);		HX_STACK_VAR(tmp53,"tmp53");
								HX_STACK_LINE(5492)
								Float tmp54 = _this->ws2->worldCOMy;		HX_STACK_VAR(tmp54,"tmp54");
								HX_STACK_LINE(5492)
								Float tmp55 = gy;		HX_STACK_VAR(tmp55,"tmp55");
								HX_STACK_LINE(5492)
								Float tmp56 = (tmp54 * tmp55);		HX_STACK_VAR(tmp56,"tmp56");
								HX_STACK_LINE(5492)
								Float tmp57 = (tmp53 + tmp56);		HX_STACK_VAR(tmp57,"tmp57");
								HX_STACK_LINE(5492)
								bool tmp58 = (tmp50 > tmp57);		HX_STACK_VAR(tmp58,"tmp58");
								HX_STACK_LINE(5492)
								if ((tmp58)){
									HX_STACK_LINE(5492)
									Float tmp59 = (mass1 + mass2);		HX_STACK_VAR(tmp59,"tmp59");
									HX_STACK_LINE(5492)
									Float t = tmp59;		HX_STACK_VAR(t,"t");
									HX_STACK_LINE(5492)
									Float tmp60 = (gx * t);		HX_STACK_VAR(tmp60,"tmp60");
									HX_STACK_LINE(5492)
									hx::SubEq(buoyx,tmp60);
									HX_STACK_LINE(5492)
									Float tmp61 = (gy * t);		HX_STACK_VAR(tmp61,"tmp61");
									HX_STACK_LINE(5492)
									hx::SubEq(buoyy,tmp61);
								}
								else{
									HX_STACK_LINE(5492)
									Float tmp59 = (mass1 + mass2);		HX_STACK_VAR(tmp59,"tmp59");
									HX_STACK_LINE(5492)
									Float t = tmp59;		HX_STACK_VAR(t,"t");
									HX_STACK_LINE(5492)
									Float tmp60 = (gx * t);		HX_STACK_VAR(tmp60,"tmp60");
									HX_STACK_LINE(5492)
									hx::AddEq(buoyx,tmp60);
									HX_STACK_LINE(5492)
									Float tmp61 = (gy * t);		HX_STACK_VAR(tmp61,"tmp61");
									HX_STACK_LINE(5492)
									hx::AddEq(buoyy,tmp61);
								}
							}
						}
					}
					else{
						HX_STACK_LINE(5492)
						bool tmp34 = _this->ws1->fluidEnabled;		HX_STACK_VAR(tmp34,"tmp34");
						HX_STACK_LINE(5492)
						if ((tmp34)){
							HX_STACK_LINE(5492)
							Float tmp35 = _this->overlap;		HX_STACK_VAR(tmp35,"tmp35");
							HX_STACK_LINE(5492)
							::zpp_nape::phys::ZPP_FluidProperties tmp36 = _this->ws1->fluidProperties;		HX_STACK_VAR(tmp36,"tmp36");
							HX_STACK_LINE(5492)
							Float tmp37 = tmp36->density;		HX_STACK_VAR(tmp37,"tmp37");
							HX_STACK_LINE(5492)
							Float tmp38 = (tmp35 * tmp37);		HX_STACK_VAR(tmp38,"tmp38");
							HX_STACK_LINE(5492)
							Float mass = tmp38;		HX_STACK_VAR(mass,"mass");
							HX_STACK_LINE(5492)
							{
								HX_STACK_LINE(5492)
								Float t = mass;		HX_STACK_VAR(t,"t");
								HX_STACK_LINE(5492)
								Float tmp39 = (g1x * t);		HX_STACK_VAR(tmp39,"tmp39");
								HX_STACK_LINE(5492)
								hx::SubEq(buoyx,tmp39);
								HX_STACK_LINE(5492)
								Float tmp40 = (g1y * t);		HX_STACK_VAR(tmp40,"tmp40");
								HX_STACK_LINE(5492)
								hx::SubEq(buoyy,tmp40);
							}
						}
						else{
							HX_STACK_LINE(5492)
							bool tmp35 = _this->ws2->fluidEnabled;		HX_STACK_VAR(tmp35,"tmp35");
							HX_STACK_LINE(5492)
							if ((tmp35)){
								HX_STACK_LINE(5492)
								Float tmp36 = _this->overlap;		HX_STACK_VAR(tmp36,"tmp36");
								HX_STACK_LINE(5492)
								::zpp_nape::phys::ZPP_FluidProperties tmp37 = _this->ws2->fluidProperties;		HX_STACK_VAR(tmp37,"tmp37");
								HX_STACK_LINE(5492)
								Float tmp38 = tmp37->density;		HX_STACK_VAR(tmp38,"tmp38");
								HX_STACK_LINE(5492)
								Float tmp39 = (tmp36 * tmp38);		HX_STACK_VAR(tmp39,"tmp39");
								HX_STACK_LINE(5492)
								Float mass = tmp39;		HX_STACK_VAR(mass,"mass");
								HX_STACK_LINE(5492)
								{
									HX_STACK_LINE(5492)
									Float t = mass;		HX_STACK_VAR(t,"t");
									HX_STACK_LINE(5492)
									Float tmp40 = (g2x * t);		HX_STACK_VAR(tmp40,"tmp40");
									HX_STACK_LINE(5492)
									hx::AddEq(buoyx,tmp40);
									HX_STACK_LINE(5492)
									Float tmp41 = (g2y * t);		HX_STACK_VAR(tmp41,"tmp41");
									HX_STACK_LINE(5492)
									hx::AddEq(buoyy,tmp41);
								}
							}
						}
					}
					HX_STACK_LINE(5492)
					{
						HX_STACK_LINE(5492)
						Float t = dt;		HX_STACK_VAR(t,"t");
						HX_STACK_LINE(5492)
						hx::MultEq(buoyx,t);
						HX_STACK_LINE(5492)
						hx::MultEq(buoyy,t);
					}
					HX_STACK_LINE(5492)
					{
						HX_STACK_LINE(5492)
						_this->buoyx = buoyx;
						HX_STACK_LINE(5492)
						_this->buoyy = buoyy;
						HX_STACK_LINE(5492)
						{
						}
					}
					HX_STACK_LINE(5492)
					int tmp34 = _this->b1->type;		HX_STACK_VAR(tmp34,"tmp34");
					HX_STACK_LINE(5492)
					int tmp35 = ::zpp_nape::util::ZPP_Flags_obj::id_BodyType_DYNAMIC;		HX_STACK_VAR(tmp35,"tmp35");
					HX_STACK_LINE(5492)
					bool tmp36 = (tmp34 == tmp35);		HX_STACK_VAR(tmp36,"tmp36");
					HX_STACK_LINE(5492)
					if ((tmp36)){
						HX_STACK_LINE(5492)
						{
							HX_STACK_LINE(5492)
							Float tmp37 = _this->b1->imass;		HX_STACK_VAR(tmp37,"tmp37");
							HX_STACK_LINE(5492)
							Float t = tmp37;		HX_STACK_VAR(t,"t");
							HX_STACK_LINE(5492)
							Float tmp38 = (buoyx * t);		HX_STACK_VAR(tmp38,"tmp38");
							HX_STACK_LINE(5492)
							hx::SubEq(_this->b1->velx,tmp38);
							HX_STACK_LINE(5492)
							Float tmp39 = (buoyy * t);		HX_STACK_VAR(tmp39,"tmp39");
							HX_STACK_LINE(5492)
							hx::SubEq(_this->b1->vely,tmp39);
						}
						HX_STACK_LINE(5492)
						Float tmp37 = (buoyy * _this->r1x);		HX_STACK_VAR(tmp37,"tmp37");
						HX_STACK_LINE(5492)
						Float tmp38 = (buoyx * _this->r1y);		HX_STACK_VAR(tmp38,"tmp38");
						HX_STACK_LINE(5492)
						Float tmp39 = (tmp37 - tmp38);		HX_STACK_VAR(tmp39,"tmp39");
						HX_STACK_LINE(5492)
						Float tmp40 = _this->b1->iinertia;		HX_STACK_VAR(tmp40,"tmp40");
						HX_STACK_LINE(5492)
						Float tmp41 = (tmp39 * tmp40);		HX_STACK_VAR(tmp41,"tmp41");
						HX_STACK_LINE(5492)
						hx::SubEq(_this->b1->angvel,tmp41);
					}
					HX_STACK_LINE(5492)
					int tmp37 = _this->b2->type;		HX_STACK_VAR(tmp37,"tmp37");
					HX_STACK_LINE(5492)
					int tmp38 = ::zpp_nape::util::ZPP_Flags_obj::id_BodyType_DYNAMIC;		HX_STACK_VAR(tmp38,"tmp38");
					HX_STACK_LINE(5492)
					bool tmp39 = (tmp37 == tmp38);		HX_STACK_VAR(tmp39,"tmp39");
					HX_STACK_LINE(5492)
					if ((tmp39)){
						HX_STACK_LINE(5492)
						{
							HX_STACK_LINE(5492)
							Float tmp40 = _this->b2->imass;		HX_STACK_VAR(tmp40,"tmp40");
							HX_STACK_LINE(5492)
							Float t = tmp40;		HX_STACK_VAR(t,"t");
							HX_STACK_LINE(5492)
							Float tmp41 = (buoyx * t);		HX_STACK_VAR(tmp41,"tmp41");
							HX_STACK_LINE(5492)
							hx::AddEq(_this->b2->velx,tmp41);
							HX_STACK_LINE(5492)
							Float tmp42 = (buoyy * t);		HX_STACK_VAR(tmp42,"tmp42");
							HX_STACK_LINE(5492)
							hx::AddEq(_this->b2->vely,tmp42);
						}
						HX_STACK_LINE(5492)
						Float tmp40 = (buoyy * _this->r2x);		HX_STACK_VAR(tmp40,"tmp40");
						HX_STACK_LINE(5492)
						Float tmp41 = (buoyx * _this->r2y);		HX_STACK_VAR(tmp41,"tmp41");
						HX_STACK_LINE(5492)
						Float tmp42 = (tmp40 - tmp41);		HX_STACK_VAR(tmp42,"tmp42");
						HX_STACK_LINE(5492)
						Float tmp43 = _this->b2->iinertia;		HX_STACK_VAR(tmp43,"tmp43");
						HX_STACK_LINE(5492)
						Float tmp44 = (tmp42 * tmp43);		HX_STACK_VAR(tmp44,"tmp44");
						HX_STACK_LINE(5492)
						hx::AddEq(_this->b2->angvel,tmp44);
					}
					HX_STACK_LINE(5492)
					bool tmp40 = _this->ws1->fluidEnabled;		HX_STACK_VAR(tmp40,"tmp40");
					HX_STACK_LINE(5492)
					bool tmp41 = tmp40;		HX_STACK_VAR(tmp41,"tmp41");
					HX_STACK_LINE(5492)
					bool tmp42 = !(tmp41);		HX_STACK_VAR(tmp42,"tmp42");
					HX_STACK_LINE(5492)
					bool tmp43 = !(tmp42);		HX_STACK_VAR(tmp43,"tmp43");
					HX_STACK_LINE(5492)
					bool tmp44 = tmp43;		HX_STACK_VAR(tmp44,"tmp44");
					HX_STACK_LINE(5492)
					bool tmp45;		HX_STACK_VAR(tmp45,"tmp45");
					HX_STACK_LINE(5492)
					if ((tmp44)){
						HX_STACK_LINE(5492)
						::zpp_nape::phys::ZPP_FluidProperties tmp46 = _this->ws1->fluidProperties;		HX_STACK_VAR(tmp46,"tmp46");
						HX_STACK_LINE(5492)
						::zpp_nape::phys::ZPP_FluidProperties tmp47 = tmp46;		HX_STACK_VAR(tmp47,"tmp47");
						HX_STACK_LINE(5492)
						::zpp_nape::phys::ZPP_FluidProperties tmp48 = tmp47;		HX_STACK_VAR(tmp48,"tmp48");
						HX_STACK_LINE(5492)
						Float tmp49 = tmp48->viscosity;		HX_STACK_VAR(tmp49,"tmp49");
						HX_STACK_LINE(5492)
						tmp45 = (tmp49 == (int)0);
					}
					else{
						HX_STACK_LINE(5492)
						tmp45 = true;
					}
					HX_STACK_LINE(5492)
					bool tmp46;		HX_STACK_VAR(tmp46,"tmp46");
					HX_STACK_LINE(5492)
					if ((tmp45)){
						HX_STACK_LINE(5492)
						bool tmp47 = _this->ws2->fluidEnabled;		HX_STACK_VAR(tmp47,"tmp47");
						HX_STACK_LINE(5492)
						bool tmp48 = tmp47;		HX_STACK_VAR(tmp48,"tmp48");
						HX_STACK_LINE(5492)
						bool tmp49 = tmp48;		HX_STACK_VAR(tmp49,"tmp49");
						HX_STACK_LINE(5492)
						bool tmp50 = tmp49;		HX_STACK_VAR(tmp50,"tmp50");
						HX_STACK_LINE(5492)
						bool tmp51 = !(tmp50);		HX_STACK_VAR(tmp51,"tmp51");
						HX_STACK_LINE(5492)
						bool tmp52 = tmp51;		HX_STACK_VAR(tmp52,"tmp52");
						HX_STACK_LINE(5492)
						bool tmp53 = tmp52;		HX_STACK_VAR(tmp53,"tmp53");
						HX_STACK_LINE(5492)
						bool tmp54 = !(tmp53);		HX_STACK_VAR(tmp54,"tmp54");
						HX_STACK_LINE(5492)
						bool tmp55 = tmp54;		HX_STACK_VAR(tmp55,"tmp55");
						HX_STACK_LINE(5492)
						bool tmp56 = tmp55;		HX_STACK_VAR(tmp56,"tmp56");
						HX_STACK_LINE(5492)
						if ((tmp56)){
							HX_STACK_LINE(5492)
							::zpp_nape::phys::ZPP_FluidProperties tmp57 = _this->ws2->fluidProperties;		HX_STACK_VAR(tmp57,"tmp57");
							HX_STACK_LINE(5492)
							::zpp_nape::phys::ZPP_FluidProperties tmp58 = tmp57;		HX_STACK_VAR(tmp58,"tmp58");
							HX_STACK_LINE(5492)
							::zpp_nape::phys::ZPP_FluidProperties tmp59 = tmp58;		HX_STACK_VAR(tmp59,"tmp59");
							HX_STACK_LINE(5492)
							Float tmp60 = tmp59->viscosity;		HX_STACK_VAR(tmp60,"tmp60");
							HX_STACK_LINE(5492)
							tmp46 = (tmp60 == (int)0);
						}
						else{
							HX_STACK_LINE(5492)
							tmp46 = true;
						}
					}
					else{
						HX_STACK_LINE(5492)
						tmp46 = false;
					}
					HX_STACK_LINE(5492)
					if ((tmp46)){
						HX_STACK_LINE(5492)
						_this->nodrag = true;
						HX_STACK_LINE(5492)
						{
							HX_STACK_LINE(5492)
							_this->dampx = (int)0;
							HX_STACK_LINE(5492)
							_this->dampy = (int)0;
							HX_STACK_LINE(5492)
							{
							}
						}
						HX_STACK_LINE(5492)
						_this->adamp = (int)0;
					}
					else{
						HX_STACK_LINE(5492)
						_this->nodrag = false;
						HX_STACK_LINE(5492)
						Float tViscosity = ((Float)0.0);		HX_STACK_VAR(tViscosity,"tViscosity");
						HX_STACK_LINE(5492)
						bool tmp47 = _this->ws1->fluidEnabled;		HX_STACK_VAR(tmp47,"tmp47");
						HX_STACK_LINE(5492)
						if ((tmp47)){
							HX_STACK_LINE(5492)
							_this->ws2->validate_angDrag();
							HX_STACK_LINE(5492)
							::zpp_nape::phys::ZPP_FluidProperties tmp48 = _this->ws1->fluidProperties;		HX_STACK_VAR(tmp48,"tmp48");
							HX_STACK_LINE(5492)
							Float tmp49 = tmp48->viscosity;		HX_STACK_VAR(tmp49,"tmp49");
							HX_STACK_LINE(5492)
							Float tmp50 = _this->ws2->angDrag;		HX_STACK_VAR(tmp50,"tmp50");
							HX_STACK_LINE(5492)
							Float tmp51 = (tmp49 * tmp50);		HX_STACK_VAR(tmp51,"tmp51");
							HX_STACK_LINE(5492)
							Float tmp52 = _this->overlap;		HX_STACK_VAR(tmp52,"tmp52");
							HX_STACK_LINE(5492)
							Float tmp53 = (tmp51 * tmp52);		HX_STACK_VAR(tmp53,"tmp53");
							HX_STACK_LINE(5492)
							Float tmp54 = _this->ws2->area;		HX_STACK_VAR(tmp54,"tmp54");
							HX_STACK_LINE(5492)
							Float tmp55 = (Float(tmp53) / Float(tmp54));		HX_STACK_VAR(tmp55,"tmp55");
							HX_STACK_LINE(5492)
							hx::AddEq(tViscosity,tmp55);
						}
						HX_STACK_LINE(5492)
						bool tmp48 = _this->ws2->fluidEnabled;		HX_STACK_VAR(tmp48,"tmp48");
						HX_STACK_LINE(5492)
						if ((tmp48)){
							HX_STACK_LINE(5492)
							_this->ws1->validate_angDrag();
							HX_STACK_LINE(5492)
							::zpp_nape::phys::ZPP_FluidProperties tmp49 = _this->ws2->fluidProperties;		HX_STACK_VAR(tmp49,"tmp49");
							HX_STACK_LINE(5492)
							Float tmp50 = tmp49->viscosity;		HX_STACK_VAR(tmp50,"tmp50");
							HX_STACK_LINE(5492)
							Float tmp51 = _this->ws1->angDrag;		HX_STACK_VAR(tmp51,"tmp51");
							HX_STACK_LINE(5492)
							Float tmp52 = (tmp50 * tmp51);		HX_STACK_VAR(tmp52,"tmp52");
							HX_STACK_LINE(5492)
							Float tmp53 = _this->overlap;		HX_STACK_VAR(tmp53,"tmp53");
							HX_STACK_LINE(5492)
							Float tmp54 = (tmp52 * tmp53);		HX_STACK_VAR(tmp54,"tmp54");
							HX_STACK_LINE(5492)
							Float tmp55 = _this->ws1->area;		HX_STACK_VAR(tmp55,"tmp55");
							HX_STACK_LINE(5492)
							Float tmp56 = (Float(tmp54) / Float(tmp55));		HX_STACK_VAR(tmp56,"tmp56");
							HX_STACK_LINE(5492)
							hx::AddEq(tViscosity,tmp56);
						}
						HX_STACK_LINE(5492)
						bool tmp49 = (tViscosity != (int)0);		HX_STACK_VAR(tmp49,"tmp49");
						HX_STACK_LINE(5492)
						if ((tmp49)){
							HX_STACK_LINE(5492)
							Float tmp50 = _this->b1->sinertia;		HX_STACK_VAR(tmp50,"tmp50");
							HX_STACK_LINE(5492)
							Float tmp51 = _this->b2->sinertia;		HX_STACK_VAR(tmp51,"tmp51");
							HX_STACK_LINE(5492)
							Float tmp52 = (tmp50 + tmp51);		HX_STACK_VAR(tmp52,"tmp52");
							HX_STACK_LINE(5492)
							Float iSum = tmp52;		HX_STACK_VAR(iSum,"iSum");
							HX_STACK_LINE(5492)
							bool tmp53 = (iSum != (int)0);		HX_STACK_VAR(tmp53,"tmp53");
							HX_STACK_LINE(5492)
							if ((tmp53)){
								HX_STACK_LINE(5492)
								Float tmp54 = (Float((int)1) / Float(iSum));		HX_STACK_VAR(tmp54,"tmp54");
								HX_STACK_LINE(5492)
								_this->wMass = tmp54;
							}
							else{
								HX_STACK_LINE(5492)
								_this->wMass = ((Float)0.0);
							}
							HX_STACK_LINE(5492)
							Float biasCoef;		HX_STACK_VAR(biasCoef,"biasCoef");
							HX_STACK_LINE(5492)
							hx::MultEq(tViscosity,((Float)0.0004));
							HX_STACK_LINE(5492)
							Float tmp54;		HX_STACK_VAR(tmp54,"tmp54");
							HX_STACK_LINE(5492)
							{
								HX_STACK_LINE(5492)
								Float tmp55 = ::Math_obj::PI;		HX_STACK_VAR(tmp55,"tmp55");
								HX_STACK_LINE(5492)
								Float tmp56 = ((int)2 * tmp55);		HX_STACK_VAR(tmp56,"tmp56");
								HX_STACK_LINE(5492)
								Float tmp57 = tViscosity;		HX_STACK_VAR(tmp57,"tmp57");
								HX_STACK_LINE(5492)
								Float tmp58 = (tmp56 * tmp57);		HX_STACK_VAR(tmp58,"tmp58");
								HX_STACK_LINE(5492)
								Float omega = tmp58;		HX_STACK_VAR(omega,"omega");
								HX_STACK_LINE(5492)
								Float tmp59 = (dt * omega);		HX_STACK_VAR(tmp59,"tmp59");
								HX_STACK_LINE(5492)
								int tmp60 = (int)2;		HX_STACK_VAR(tmp60,"tmp60");
								HX_STACK_LINE(5492)
								Float tmp61 = (omega * dt);		HX_STACK_VAR(tmp61,"tmp61");
								HX_STACK_LINE(5492)
								Float tmp62 = (tmp60 + tmp61);		HX_STACK_VAR(tmp62,"tmp62");
								HX_STACK_LINE(5492)
								Float tmp63 = (tmp59 * tmp62);		HX_STACK_VAR(tmp63,"tmp63");
								HX_STACK_LINE(5492)
								Float tmp64 = (Float((int)1) / Float(tmp63));		HX_STACK_VAR(tmp64,"tmp64");
								HX_STACK_LINE(5492)
								_this->agamma = tmp64;
								HX_STACK_LINE(5492)
								Float tmp65 = ((int)1 + _this->agamma);		HX_STACK_VAR(tmp65,"tmp65");
								HX_STACK_LINE(5492)
								Float tmp66 = (Float((int)1) / Float(tmp65));		HX_STACK_VAR(tmp66,"tmp66");
								HX_STACK_LINE(5492)
								Float ig = tmp66;		HX_STACK_VAR(ig,"ig");
								HX_STACK_LINE(5492)
								Float tmp67 = (dt * omega);		HX_STACK_VAR(tmp67,"tmp67");
								HX_STACK_LINE(5492)
								Float tmp68 = omega;		HX_STACK_VAR(tmp68,"tmp68");
								HX_STACK_LINE(5492)
								Float tmp69 = (tmp67 * tmp68);		HX_STACK_VAR(tmp69,"tmp69");
								HX_STACK_LINE(5492)
								Float tmp70 = _this->agamma;		HX_STACK_VAR(tmp70,"tmp70");
								HX_STACK_LINE(5492)
								Float tmp71 = (tmp69 * tmp70);		HX_STACK_VAR(tmp71,"tmp71");
								HX_STACK_LINE(5492)
								biasCoef = tmp71;
								HX_STACK_LINE(5492)
								hx::MultEq(_this->agamma,ig);
								HX_STACK_LINE(5492)
								tmp54 = ig;
							}
							HX_STACK_LINE(5492)
							hx::MultEq(_this->wMass,tmp54);
						}
						else{
							HX_STACK_LINE(5492)
							_this->wMass = ((Float)0.0);
							HX_STACK_LINE(5492)
							_this->agamma = ((Float)0.0);
						}
						HX_STACK_LINE(5492)
						Float tmp50 = _this->b2->velx;		HX_STACK_VAR(tmp50,"tmp50");
						HX_STACK_LINE(5492)
						Float tmp51 = _this->b2->kinvelx;		HX_STACK_VAR(tmp51,"tmp51");
						HX_STACK_LINE(5492)
						Float tmp52 = (tmp50 + tmp51);		HX_STACK_VAR(tmp52,"tmp52");
						HX_STACK_LINE(5492)
						Float tmp53 = _this->r2y;		HX_STACK_VAR(tmp53,"tmp53");
						HX_STACK_LINE(5492)
						Float tmp54 = _this->b2->angvel;		HX_STACK_VAR(tmp54,"tmp54");
						HX_STACK_LINE(5492)
						Float tmp55 = _this->b2->kinangvel;		HX_STACK_VAR(tmp55,"tmp55");
						HX_STACK_LINE(5492)
						Float tmp56 = (tmp54 + tmp55);		HX_STACK_VAR(tmp56,"tmp56");
						HX_STACK_LINE(5492)
						Float tmp57 = (tmp53 * tmp56);		HX_STACK_VAR(tmp57,"tmp57");
						HX_STACK_LINE(5492)
						Float tmp58 = (tmp52 - tmp57);		HX_STACK_VAR(tmp58,"tmp58");
						HX_STACK_LINE(5492)
						Float tmp59 = _this->b1->velx;		HX_STACK_VAR(tmp59,"tmp59");
						HX_STACK_LINE(5492)
						Float tmp60 = _this->b1->kinvelx;		HX_STACK_VAR(tmp60,"tmp60");
						HX_STACK_LINE(5492)
						Float tmp61 = (tmp59 + tmp60);		HX_STACK_VAR(tmp61,"tmp61");
						HX_STACK_LINE(5492)
						Float tmp62 = _this->r1y;		HX_STACK_VAR(tmp62,"tmp62");
						HX_STACK_LINE(5492)
						Float tmp63 = _this->b2->angvel;		HX_STACK_VAR(tmp63,"tmp63");
						HX_STACK_LINE(5492)
						Float tmp64 = _this->b2->kinangvel;		HX_STACK_VAR(tmp64,"tmp64");
						HX_STACK_LINE(5492)
						Float tmp65 = (tmp63 + tmp64);		HX_STACK_VAR(tmp65,"tmp65");
						HX_STACK_LINE(5492)
						Float tmp66 = (tmp62 * tmp65);		HX_STACK_VAR(tmp66,"tmp66");
						HX_STACK_LINE(5492)
						Float tmp67 = (tmp61 - tmp66);		HX_STACK_VAR(tmp67,"tmp67");
						HX_STACK_LINE(5492)
						Float tmp68 = (tmp58 - tmp67);		HX_STACK_VAR(tmp68,"tmp68");
						HX_STACK_LINE(5492)
						Float vrnx = tmp68;		HX_STACK_VAR(vrnx,"vrnx");
						HX_STACK_LINE(5492)
						Float tmp69 = _this->b2->vely;		HX_STACK_VAR(tmp69,"tmp69");
						HX_STACK_LINE(5492)
						Float tmp70 = _this->b2->kinvely;		HX_STACK_VAR(tmp70,"tmp70");
						HX_STACK_LINE(5492)
						Float tmp71 = (tmp69 + tmp70);		HX_STACK_VAR(tmp71,"tmp71");
						HX_STACK_LINE(5492)
						Float tmp72 = _this->r2x;		HX_STACK_VAR(tmp72,"tmp72");
						HX_STACK_LINE(5492)
						Float tmp73 = _this->b2->angvel;		HX_STACK_VAR(tmp73,"tmp73");
						HX_STACK_LINE(5492)
						Float tmp74 = _this->b2->kinangvel;		HX_STACK_VAR(tmp74,"tmp74");
						HX_STACK_LINE(5492)
						Float tmp75 = (tmp73 + tmp74);		HX_STACK_VAR(tmp75,"tmp75");
						HX_STACK_LINE(5492)
						Float tmp76 = (tmp72 * tmp75);		HX_STACK_VAR(tmp76,"tmp76");
						HX_STACK_LINE(5492)
						Float tmp77 = (tmp71 + tmp76);		HX_STACK_VAR(tmp77,"tmp77");
						HX_STACK_LINE(5492)
						Float tmp78 = _this->b1->vely;		HX_STACK_VAR(tmp78,"tmp78");
						HX_STACK_LINE(5492)
						Float tmp79 = _this->b1->kinvely;		HX_STACK_VAR(tmp79,"tmp79");
						HX_STACK_LINE(5492)
						Float tmp80 = (tmp78 + tmp79);		HX_STACK_VAR(tmp80,"tmp80");
						HX_STACK_LINE(5492)
						Float tmp81 = _this->r1x;		HX_STACK_VAR(tmp81,"tmp81");
						HX_STACK_LINE(5492)
						Float tmp82 = _this->b1->angvel;		HX_STACK_VAR(tmp82,"tmp82");
						HX_STACK_LINE(5492)
						Float tmp83 = _this->b1->kinangvel;		HX_STACK_VAR(tmp83,"tmp83");
						HX_STACK_LINE(5492)
						Float tmp84 = (tmp82 + tmp83);		HX_STACK_VAR(tmp84,"tmp84");
						HX_STACK_LINE(5492)
						Float tmp85 = (tmp81 * tmp84);		HX_STACK_VAR(tmp85,"tmp85");
						HX_STACK_LINE(5492)
						Float tmp86 = (tmp80 + tmp85);		HX_STACK_VAR(tmp86,"tmp86");
						HX_STACK_LINE(5492)
						Float tmp87 = (tmp77 - tmp86);		HX_STACK_VAR(tmp87,"tmp87");
						HX_STACK_LINE(5492)
						Float vrny = tmp87;		HX_STACK_VAR(vrny,"vrny");
						HX_STACK_LINE(5492)
						Float tmp88 = (vrnx * vrnx);		HX_STACK_VAR(tmp88,"tmp88");
						HX_STACK_LINE(5492)
						Float tmp89 = (vrny * vrny);		HX_STACK_VAR(tmp89,"tmp89");
						HX_STACK_LINE(5492)
						Float tmp90 = (tmp88 + tmp89);		HX_STACK_VAR(tmp90,"tmp90");
						HX_STACK_LINE(5492)
						Float tmp91 = ::nape::Config_obj::epsilon;		HX_STACK_VAR(tmp91,"tmp91");
						HX_STACK_LINE(5492)
						Float tmp92 = ::nape::Config_obj::epsilon;		HX_STACK_VAR(tmp92,"tmp92");
						HX_STACK_LINE(5492)
						Float tmp93 = (tmp91 * tmp92);		HX_STACK_VAR(tmp93,"tmp93");
						HX_STACK_LINE(5492)
						bool tmp94 = (tmp90 < tmp93);		HX_STACK_VAR(tmp94,"tmp94");
						HX_STACK_LINE(5492)
						if ((tmp94)){
						}
						else{
							HX_STACK_LINE(5492)
							{
								HX_STACK_LINE(5492)
								Float tmp95 = (vrnx * vrnx);		HX_STACK_VAR(tmp95,"tmp95");
								HX_STACK_LINE(5492)
								Float tmp96 = (vrny * vrny);		HX_STACK_VAR(tmp96,"tmp96");
								HX_STACK_LINE(5492)
								Float tmp97 = (tmp95 + tmp96);		HX_STACK_VAR(tmp97,"tmp97");
								HX_STACK_LINE(5492)
								Float d = tmp97;		HX_STACK_VAR(d,"d");
								HX_STACK_LINE(5492)
								Float tmp98;		HX_STACK_VAR(tmp98,"tmp98");
								HX_STACK_LINE(5492)
								{
									HX_STACK_LINE(5492)
									Float tmp99;		HX_STACK_VAR(tmp99,"tmp99");
									HX_STACK_LINE(5492)
									{
										HX_STACK_LINE(5492)
										Float tmp100 = d;		HX_STACK_VAR(tmp100,"tmp100");
										HX_STACK_LINE(5492)
										tmp99 = ::Math_obj::sqrt(tmp100);
									}
									HX_STACK_LINE(5492)
									tmp98 = (Float(((Float)1.0)) / Float(tmp99));
								}
								HX_STACK_LINE(5492)
								Float imag = tmp98;		HX_STACK_VAR(imag,"imag");
								HX_STACK_LINE(5492)
								{
									HX_STACK_LINE(5492)
									Float t = imag;		HX_STACK_VAR(t,"t");
									HX_STACK_LINE(5492)
									hx::MultEq(vrnx,t);
									HX_STACK_LINE(5492)
									hx::MultEq(vrny,t);
								}
							}
							HX_STACK_LINE(5492)
							{
								HX_STACK_LINE(5492)
								_this->nx = vrnx;
								HX_STACK_LINE(5492)
								_this->ny = vrny;
								HX_STACK_LINE(5492)
								{
								}
							}
						}
						HX_STACK_LINE(5492)
						Float tViscosity1 = ((Float)0.0);		HX_STACK_VAR(tViscosity1,"tViscosity1");
						HX_STACK_LINE(5492)
						bool tmp95 = _this->ws1->fluidEnabled;		HX_STACK_VAR(tmp95,"tmp95");
						HX_STACK_LINE(5492)
						if ((tmp95)){
							HX_STACK_LINE(5492)
							::zpp_nape::phys::ZPP_FluidProperties tmp96 = _this->ws1->fluidProperties;		HX_STACK_VAR(tmp96,"tmp96");
							HX_STACK_LINE(5492)
							Float tmp97 = tmp96->viscosity;		HX_STACK_VAR(tmp97,"tmp97");
							HX_STACK_LINE(5492)
							Float tmp98 = -(tmp97);		HX_STACK_VAR(tmp98,"tmp98");
							HX_STACK_LINE(5492)
							Float tmp99 = _this->overlap;		HX_STACK_VAR(tmp99,"tmp99");
							HX_STACK_LINE(5492)
							Float tmp100 = (tmp98 * tmp99);		HX_STACK_VAR(tmp100,"tmp100");
							HX_STACK_LINE(5492)
							Float tmp101 = _this->ws2->area;		HX_STACK_VAR(tmp101,"tmp101");
							HX_STACK_LINE(5492)
							Float tmp102 = (Float(tmp100) / Float(tmp101));		HX_STACK_VAR(tmp102,"tmp102");
							HX_STACK_LINE(5492)
							Float f = tmp102;		HX_STACK_VAR(f,"f");
							HX_STACK_LINE(5492)
							int tmp103 = _this->ws2->type;		HX_STACK_VAR(tmp103,"tmp103");
							HX_STACK_LINE(5492)
							int tmp104 = ::zpp_nape::util::ZPP_Flags_obj::id_ShapeType_CIRCLE;		HX_STACK_VAR(tmp104,"tmp104");
							HX_STACK_LINE(5492)
							bool tmp105 = (tmp103 == tmp104);		HX_STACK_VAR(tmp105,"tmp105");
							HX_STACK_LINE(5492)
							if ((tmp105)){
								HX_STACK_LINE(5492)
								Float tmp106 = f;		HX_STACK_VAR(tmp106,"tmp106");
								HX_STACK_LINE(5492)
								::zpp_nape::shape::ZPP_Circle tmp107 = _this->ws2->circle;		HX_STACK_VAR(tmp107,"tmp107");
								HX_STACK_LINE(5492)
								Float tmp108 = tmp107->radius;		HX_STACK_VAR(tmp108,"tmp108");
								HX_STACK_LINE(5492)
								Float tmp109 = (tmp106 * tmp108);		HX_STACK_VAR(tmp109,"tmp109");
								HX_STACK_LINE(5492)
								Float tmp110 = ::nape::Config_obj::fluidLinearDrag;		HX_STACK_VAR(tmp110,"tmp110");
								HX_STACK_LINE(5492)
								Float tmp111 = (tmp109 * tmp110);		HX_STACK_VAR(tmp111,"tmp111");
								HX_STACK_LINE(5492)
								::zpp_nape::shape::ZPP_Circle tmp112 = _this->ws2->circle;		HX_STACK_VAR(tmp112,"tmp112");
								HX_STACK_LINE(5492)
								Float tmp113 = tmp112->radius;		HX_STACK_VAR(tmp113,"tmp113");
								HX_STACK_LINE(5492)
								Float tmp114 = ((int)2 * tmp113);		HX_STACK_VAR(tmp114,"tmp114");
								HX_STACK_LINE(5492)
								Float tmp115 = ::Math_obj::PI;		HX_STACK_VAR(tmp115,"tmp115");
								HX_STACK_LINE(5492)
								Float tmp116 = (tmp114 * tmp115);		HX_STACK_VAR(tmp116,"tmp116");
								HX_STACK_LINE(5492)
								Float tmp117 = (Float(tmp111) / Float(tmp116));		HX_STACK_VAR(tmp117,"tmp117");
								HX_STACK_LINE(5492)
								hx::SubEq(tViscosity1,tmp117);
							}
							else{
								HX_STACK_LINE(5492)
								::zpp_nape::shape::ZPP_Polygon tmp106 = _this->ws2->polygon;		HX_STACK_VAR(tmp106,"tmp106");
								HX_STACK_LINE(5492)
								::zpp_nape::shape::ZPP_Polygon poly = tmp106;		HX_STACK_VAR(poly,"poly");
								HX_STACK_LINE(5492)
								Float bord = ((Float)0.0);		HX_STACK_VAR(bord,"bord");
								HX_STACK_LINE(5492)
								Float acc = ((Float)0.0);		HX_STACK_VAR(acc,"acc");
								HX_STACK_LINE(5492)
								{
									HX_STACK_LINE(5492)
									::zpp_nape::util::ZNPNode_ZPP_Edge tmp107 = poly->edges->head;		HX_STACK_VAR(tmp107,"tmp107");
									HX_STACK_LINE(5492)
									::zpp_nape::util::ZNPNode_ZPP_Edge cx_ite = tmp107;		HX_STACK_VAR(cx_ite,"cx_ite");
									HX_STACK_LINE(5492)
									while((true)){
										HX_STACK_LINE(5492)
										bool tmp108 = (cx_ite != null());		HX_STACK_VAR(tmp108,"tmp108");
										HX_STACK_LINE(5492)
										bool tmp109 = !(tmp108);		HX_STACK_VAR(tmp109,"tmp109");
										HX_STACK_LINE(5492)
										if ((tmp109)){
											HX_STACK_LINE(5492)
											break;
										}
										HX_STACK_LINE(5492)
										::zpp_nape::shape::ZPP_Edge ex = cx_ite->elt;		HX_STACK_VAR(ex,"ex");
										HX_STACK_LINE(5492)
										{
											HX_STACK_LINE(5492)
											hx::AddEq(bord,ex->length);
											HX_STACK_LINE(5492)
											Float tmp110 = (f * ex->length);		HX_STACK_VAR(tmp110,"tmp110");
											HX_STACK_LINE(5492)
											Float tmp111 = (ex->gnormx * _this->nx);		HX_STACK_VAR(tmp111,"tmp111");
											HX_STACK_LINE(5492)
											Float tmp112 = (ex->gnormy * _this->ny);		HX_STACK_VAR(tmp112,"tmp112");
											HX_STACK_LINE(5492)
											Float tmp113 = (tmp111 + tmp112);		HX_STACK_VAR(tmp113,"tmp113");
											HX_STACK_LINE(5492)
											Float tmp114 = (tmp110 * tmp113);		HX_STACK_VAR(tmp114,"tmp114");
											HX_STACK_LINE(5492)
											Float fact = tmp114;		HX_STACK_VAR(fact,"fact");
											HX_STACK_LINE(5492)
											bool tmp115 = (fact > (int)0);		HX_STACK_VAR(tmp115,"tmp115");
											HX_STACK_LINE(5492)
											if ((tmp115)){
												HX_STACK_LINE(5492)
												Float tmp116 = ::nape::Config_obj::fluidVacuumDrag;		HX_STACK_VAR(tmp116,"tmp116");
												HX_STACK_LINE(5492)
												Float tmp117 = -(tmp116);		HX_STACK_VAR(tmp117,"tmp117");
												HX_STACK_LINE(5492)
												Float tmp118 = hx::MultEq(fact,tmp117);		HX_STACK_VAR(tmp118,"tmp118");
												HX_STACK_LINE(5492)
												fact = tmp118;
											}
											HX_STACK_LINE(5492)
											Float tmp116 = (fact * ((Float)0.5));		HX_STACK_VAR(tmp116,"tmp116");
											HX_STACK_LINE(5492)
											Float tmp117 = ::nape::Config_obj::fluidLinearDrag;		HX_STACK_VAR(tmp117,"tmp117");
											HX_STACK_LINE(5492)
											Float tmp118 = (tmp116 * tmp117);		HX_STACK_VAR(tmp118,"tmp118");
											HX_STACK_LINE(5492)
											hx::SubEq(acc,tmp118);
										}
										HX_STACK_LINE(5492)
										cx_ite = cx_ite->next;
									}
								}
								HX_STACK_LINE(5492)
								Float tmp107 = (Float(acc) / Float(bord));		HX_STACK_VAR(tmp107,"tmp107");
								HX_STACK_LINE(5492)
								hx::AddEq(tViscosity1,tmp107);
							}
						}
						HX_STACK_LINE(5492)
						bool tmp96 = _this->ws2->fluidEnabled;		HX_STACK_VAR(tmp96,"tmp96");
						HX_STACK_LINE(5492)
						if ((tmp96)){
							HX_STACK_LINE(5492)
							::zpp_nape::phys::ZPP_FluidProperties tmp97 = _this->ws2->fluidProperties;		HX_STACK_VAR(tmp97,"tmp97");
							HX_STACK_LINE(5492)
							Float tmp98 = tmp97->viscosity;		HX_STACK_VAR(tmp98,"tmp98");
							HX_STACK_LINE(5492)
							Float tmp99 = -(tmp98);		HX_STACK_VAR(tmp99,"tmp99");
							HX_STACK_LINE(5492)
							Float tmp100 = _this->overlap;		HX_STACK_VAR(tmp100,"tmp100");
							HX_STACK_LINE(5492)
							Float tmp101 = (tmp99 * tmp100);		HX_STACK_VAR(tmp101,"tmp101");
							HX_STACK_LINE(5492)
							Float tmp102 = _this->ws1->area;		HX_STACK_VAR(tmp102,"tmp102");
							HX_STACK_LINE(5492)
							Float tmp103 = (Float(tmp101) / Float(tmp102));		HX_STACK_VAR(tmp103,"tmp103");
							HX_STACK_LINE(5492)
							Float f = tmp103;		HX_STACK_VAR(f,"f");
							HX_STACK_LINE(5492)
							int tmp104 = _this->ws1->type;		HX_STACK_VAR(tmp104,"tmp104");
							HX_STACK_LINE(5492)
							int tmp105 = ::zpp_nape::util::ZPP_Flags_obj::id_ShapeType_CIRCLE;		HX_STACK_VAR(tmp105,"tmp105");
							HX_STACK_LINE(5492)
							bool tmp106 = (tmp104 == tmp105);		HX_STACK_VAR(tmp106,"tmp106");
							HX_STACK_LINE(5492)
							if ((tmp106)){
								HX_STACK_LINE(5492)
								Float tmp107 = f;		HX_STACK_VAR(tmp107,"tmp107");
								HX_STACK_LINE(5492)
								::zpp_nape::shape::ZPP_Circle tmp108 = _this->ws1->circle;		HX_STACK_VAR(tmp108,"tmp108");
								HX_STACK_LINE(5492)
								Float tmp109 = tmp108->radius;		HX_STACK_VAR(tmp109,"tmp109");
								HX_STACK_LINE(5492)
								Float tmp110 = (tmp107 * tmp109);		HX_STACK_VAR(tmp110,"tmp110");
								HX_STACK_LINE(5492)
								Float tmp111 = ::nape::Config_obj::fluidLinearDrag;		HX_STACK_VAR(tmp111,"tmp111");
								HX_STACK_LINE(5492)
								Float tmp112 = (tmp110 * tmp111);		HX_STACK_VAR(tmp112,"tmp112");
								HX_STACK_LINE(5492)
								::zpp_nape::shape::ZPP_Circle tmp113 = _this->ws1->circle;		HX_STACK_VAR(tmp113,"tmp113");
								HX_STACK_LINE(5492)
								Float tmp114 = tmp113->radius;		HX_STACK_VAR(tmp114,"tmp114");
								HX_STACK_LINE(5492)
								Float tmp115 = ((int)2 * tmp114);		HX_STACK_VAR(tmp115,"tmp115");
								HX_STACK_LINE(5492)
								Float tmp116 = ::Math_obj::PI;		HX_STACK_VAR(tmp116,"tmp116");
								HX_STACK_LINE(5492)
								Float tmp117 = (tmp115 * tmp116);		HX_STACK_VAR(tmp117,"tmp117");
								HX_STACK_LINE(5492)
								Float tmp118 = (Float(tmp112) / Float(tmp117));		HX_STACK_VAR(tmp118,"tmp118");
								HX_STACK_LINE(5492)
								hx::SubEq(tViscosity1,tmp118);
							}
							else{
								HX_STACK_LINE(5492)
								::zpp_nape::shape::ZPP_Polygon tmp107 = _this->ws1->polygon;		HX_STACK_VAR(tmp107,"tmp107");
								HX_STACK_LINE(5492)
								::zpp_nape::shape::ZPP_Polygon poly = tmp107;		HX_STACK_VAR(poly,"poly");
								HX_STACK_LINE(5492)
								Float bord = ((Float)0.0);		HX_STACK_VAR(bord,"bord");
								HX_STACK_LINE(5492)
								Float acc = ((Float)0.0);		HX_STACK_VAR(acc,"acc");
								HX_STACK_LINE(5492)
								{
									HX_STACK_LINE(5492)
									::zpp_nape::util::ZNPNode_ZPP_Edge tmp108 = poly->edges->head;		HX_STACK_VAR(tmp108,"tmp108");
									HX_STACK_LINE(5492)
									::zpp_nape::util::ZNPNode_ZPP_Edge cx_ite = tmp108;		HX_STACK_VAR(cx_ite,"cx_ite");
									HX_STACK_LINE(5492)
									while((true)){
										HX_STACK_LINE(5492)
										bool tmp109 = (cx_ite != null());		HX_STACK_VAR(tmp109,"tmp109");
										HX_STACK_LINE(5492)
										bool tmp110 = !(tmp109);		HX_STACK_VAR(tmp110,"tmp110");
										HX_STACK_LINE(5492)
										if ((tmp110)){
											HX_STACK_LINE(5492)
											break;
										}
										HX_STACK_LINE(5492)
										::zpp_nape::shape::ZPP_Edge ex = cx_ite->elt;		HX_STACK_VAR(ex,"ex");
										HX_STACK_LINE(5492)
										{
											HX_STACK_LINE(5492)
											hx::AddEq(bord,ex->length);
											HX_STACK_LINE(5492)
											Float tmp111 = (f * ex->length);		HX_STACK_VAR(tmp111,"tmp111");
											HX_STACK_LINE(5492)
											Float tmp112 = (ex->gnormx * _this->nx);		HX_STACK_VAR(tmp112,"tmp112");
											HX_STACK_LINE(5492)
											Float tmp113 = (ex->gnormy * _this->ny);		HX_STACK_VAR(tmp113,"tmp113");
											HX_STACK_LINE(5492)
											Float tmp114 = (tmp112 + tmp113);		HX_STACK_VAR(tmp114,"tmp114");
											HX_STACK_LINE(5492)
											Float tmp115 = (tmp111 * tmp114);		HX_STACK_VAR(tmp115,"tmp115");
											HX_STACK_LINE(5492)
											Float fact = tmp115;		HX_STACK_VAR(fact,"fact");
											HX_STACK_LINE(5492)
											bool tmp116 = (fact > (int)0);		HX_STACK_VAR(tmp116,"tmp116");
											HX_STACK_LINE(5492)
											if ((tmp116)){
												HX_STACK_LINE(5492)
												Float tmp117 = ::nape::Config_obj::fluidVacuumDrag;		HX_STACK_VAR(tmp117,"tmp117");
												HX_STACK_LINE(5492)
												Float tmp118 = -(tmp117);		HX_STACK_VAR(tmp118,"tmp118");
												HX_STACK_LINE(5492)
												Float tmp119 = hx::MultEq(fact,tmp118);		HX_STACK_VAR(tmp119,"tmp119");
												HX_STACK_LINE(5492)
												fact = tmp119;
											}
											HX_STACK_LINE(5492)
											Float tmp117 = (fact * ((Float)0.5));		HX_STACK_VAR(tmp117,"tmp117");
											HX_STACK_LINE(5492)
											Float tmp118 = ::nape::Config_obj::fluidLinearDrag;		HX_STACK_VAR(tmp118,"tmp118");
											HX_STACK_LINE(5492)
											Float tmp119 = (tmp117 * tmp118);		HX_STACK_VAR(tmp119,"tmp119");
											HX_STACK_LINE(5492)
											hx::SubEq(acc,tmp119);
										}
										HX_STACK_LINE(5492)
										cx_ite = cx_ite->next;
									}
								}
								HX_STACK_LINE(5492)
								Float tmp108 = (Float(acc) / Float(bord));		HX_STACK_VAR(tmp108,"tmp108");
								HX_STACK_LINE(5492)
								hx::AddEq(tViscosity1,tmp108);
							}
						}
						HX_STACK_LINE(5492)
						bool tmp97 = (tViscosity1 != (int)0);		HX_STACK_VAR(tmp97,"tmp97");
						HX_STACK_LINE(5492)
						if ((tmp97)){
							HX_STACK_LINE(5492)
							Float tmp98 = _this->b1->smass;		HX_STACK_VAR(tmp98,"tmp98");
							HX_STACK_LINE(5492)
							Float tmp99 = _this->b2->smass;		HX_STACK_VAR(tmp99,"tmp99");
							HX_STACK_LINE(5492)
							Float tmp100 = (tmp98 + tmp99);		HX_STACK_VAR(tmp100,"tmp100");
							HX_STACK_LINE(5492)
							Float m = tmp100;		HX_STACK_VAR(m,"m");
							HX_STACK_LINE(5492)
							Float Ka = ((Float)0.0);		HX_STACK_VAR(Ka,"Ka");
							HX_STACK_LINE(5492)
							Float Kb = ((Float)0.0);		HX_STACK_VAR(Kb,"Kb");
							HX_STACK_LINE(5492)
							Float Kc = ((Float)0.0);		HX_STACK_VAR(Kc,"Kc");
							HX_STACK_LINE(5492)
							{
								HX_STACK_LINE(5492)
								Ka = m;
								HX_STACK_LINE(5492)
								Kb = (int)0;
								HX_STACK_LINE(5492)
								Kc = m;
							}
							HX_STACK_LINE(5492)
							Float tmp101 = _this->b1->sinertia;		HX_STACK_VAR(tmp101,"tmp101");
							HX_STACK_LINE(5492)
							bool tmp102 = (tmp101 != (int)0);		HX_STACK_VAR(tmp102,"tmp102");
							HX_STACK_LINE(5492)
							if ((tmp102)){
								HX_STACK_LINE(5492)
								Float tmp103 = _this->r1x;		HX_STACK_VAR(tmp103,"tmp103");
								HX_STACK_LINE(5492)
								Float tmp104 = _this->b1->sinertia;		HX_STACK_VAR(tmp104,"tmp104");
								HX_STACK_LINE(5492)
								Float tmp105 = (tmp103 * tmp104);		HX_STACK_VAR(tmp105,"tmp105");
								HX_STACK_LINE(5492)
								Float X = tmp105;		HX_STACK_VAR(X,"X");
								HX_STACK_LINE(5492)
								Float tmp106 = _this->r1y;		HX_STACK_VAR(tmp106,"tmp106");
								HX_STACK_LINE(5492)
								Float tmp107 = _this->b1->sinertia;		HX_STACK_VAR(tmp107,"tmp107");
								HX_STACK_LINE(5492)
								Float tmp108 = (tmp106 * tmp107);		HX_STACK_VAR(tmp108,"tmp108");
								HX_STACK_LINE(5492)
								Float Y = tmp108;		HX_STACK_VAR(Y,"Y");
								HX_STACK_LINE(5492)
								{
									HX_STACK_LINE(5492)
									Float tmp109 = (Y * _this->r1y);		HX_STACK_VAR(tmp109,"tmp109");
									HX_STACK_LINE(5492)
									hx::AddEq(Ka,tmp109);
									HX_STACK_LINE(5492)
									Float tmp110 = Y;		HX_STACK_VAR(tmp110,"tmp110");
									HX_STACK_LINE(5492)
									Float tmp111 = -(tmp110);		HX_STACK_VAR(tmp111,"tmp111");
									HX_STACK_LINE(5492)
									Float tmp112 = _this->r1x;		HX_STACK_VAR(tmp112,"tmp112");
									HX_STACK_LINE(5492)
									Float tmp113 = (tmp111 * tmp112);		HX_STACK_VAR(tmp113,"tmp113");
									HX_STACK_LINE(5492)
									hx::AddEq(Kb,tmp113);
									HX_STACK_LINE(5492)
									Float tmp114 = (X * _this->r1x);		HX_STACK_VAR(tmp114,"tmp114");
									HX_STACK_LINE(5492)
									hx::AddEq(Kc,tmp114);
								}
							}
							HX_STACK_LINE(5492)
							Float tmp103 = _this->b2->sinertia;		HX_STACK_VAR(tmp103,"tmp103");
							HX_STACK_LINE(5492)
							bool tmp104 = (tmp103 != (int)0);		HX_STACK_VAR(tmp104,"tmp104");
							HX_STACK_LINE(5492)
							if ((tmp104)){
								HX_STACK_LINE(5492)
								Float tmp105 = _this->r2x;		HX_STACK_VAR(tmp105,"tmp105");
								HX_STACK_LINE(5492)
								Float tmp106 = _this->b2->sinertia;		HX_STACK_VAR(tmp106,"tmp106");
								HX_STACK_LINE(5492)
								Float tmp107 = (tmp105 * tmp106);		HX_STACK_VAR(tmp107,"tmp107");
								HX_STACK_LINE(5492)
								Float X = tmp107;		HX_STACK_VAR(X,"X");
								HX_STACK_LINE(5492)
								Float tmp108 = _this->r2y;		HX_STACK_VAR(tmp108,"tmp108");
								HX_STACK_LINE(5492)
								Float tmp109 = _this->b2->sinertia;		HX_STACK_VAR(tmp109,"tmp109");
								HX_STACK_LINE(5492)
								Float tmp110 = (tmp108 * tmp109);		HX_STACK_VAR(tmp110,"tmp110");
								HX_STACK_LINE(5492)
								Float Y = tmp110;		HX_STACK_VAR(Y,"Y");
								HX_STACK_LINE(5492)
								{
									HX_STACK_LINE(5492)
									Float tmp111 = (Y * _this->r2y);		HX_STACK_VAR(tmp111,"tmp111");
									HX_STACK_LINE(5492)
									hx::AddEq(Ka,tmp111);
									HX_STACK_LINE(5492)
									Float tmp112 = Y;		HX_STACK_VAR(tmp112,"tmp112");
									HX_STACK_LINE(5492)
									Float tmp113 = -(tmp112);		HX_STACK_VAR(tmp113,"tmp113");
									HX_STACK_LINE(5492)
									Float tmp114 = _this->r2x;		HX_STACK_VAR(tmp114,"tmp114");
									HX_STACK_LINE(5492)
									Float tmp115 = (tmp113 * tmp114);		HX_STACK_VAR(tmp115,"tmp115");
									HX_STACK_LINE(5492)
									hx::AddEq(Kb,tmp115);
									HX_STACK_LINE(5492)
									Float tmp116 = (X * _this->r2x);		HX_STACK_VAR(tmp116,"tmp116");
									HX_STACK_LINE(5492)
									hx::AddEq(Kc,tmp116);
								}
							}
							HX_STACK_LINE(5492)
							{
								HX_STACK_LINE(5492)
								Float tmp105 = (Ka * Kc);		HX_STACK_VAR(tmp105,"tmp105");
								HX_STACK_LINE(5492)
								Float tmp106 = (Kb * Kb);		HX_STACK_VAR(tmp106,"tmp106");
								HX_STACK_LINE(5492)
								Float tmp107 = (tmp105 - tmp106);		HX_STACK_VAR(tmp107,"tmp107");
								HX_STACK_LINE(5492)
								Float det = tmp107;		HX_STACK_VAR(det,"det");
								HX_STACK_LINE(5492)
								bool tmp108 = (det != det);		HX_STACK_VAR(tmp108,"tmp108");
								HX_STACK_LINE(5492)
								if ((tmp108)){
									HX_STACK_LINE(5492)
									Float tmp109 = Kc = (int)0;		HX_STACK_VAR(tmp109,"tmp109");
									HX_STACK_LINE(5492)
									Float tmp110 = Kb = tmp109;		HX_STACK_VAR(tmp110,"tmp110");
									HX_STACK_LINE(5492)
									Ka = tmp110;
									HX_STACK_LINE(5492)
									(int)3;
								}
								else{
									HX_STACK_LINE(5492)
									bool tmp109 = (det == (int)0);		HX_STACK_VAR(tmp109,"tmp109");
									HX_STACK_LINE(5492)
									if ((tmp109)){
										HX_STACK_LINE(5492)
										int flag = (int)0;		HX_STACK_VAR(flag,"flag");
										HX_STACK_LINE(5492)
										bool tmp110 = (Ka != (int)0);		HX_STACK_VAR(tmp110,"tmp110");
										HX_STACK_LINE(5492)
										if ((tmp110)){
											HX_STACK_LINE(5492)
											Float tmp111 = (Float((int)1) / Float(Ka));		HX_STACK_VAR(tmp111,"tmp111");
											HX_STACK_LINE(5492)
											Ka = tmp111;
										}
										else{
											HX_STACK_LINE(5492)
											Ka = (int)0;
											HX_STACK_LINE(5492)
											hx::OrEq(flag,(int)1);
										}
										HX_STACK_LINE(5492)
										bool tmp111 = (Kc != (int)0);		HX_STACK_VAR(tmp111,"tmp111");
										HX_STACK_LINE(5492)
										if ((tmp111)){
											HX_STACK_LINE(5492)
											Float tmp112 = (Float((int)1) / Float(Kc));		HX_STACK_VAR(tmp112,"tmp112");
											HX_STACK_LINE(5492)
											Kc = tmp112;
										}
										else{
											HX_STACK_LINE(5492)
											Kc = (int)0;
											HX_STACK_LINE(5492)
											hx::OrEq(flag,(int)2);
										}
										HX_STACK_LINE(5492)
										Kb = (int)0;
										HX_STACK_LINE(5492)
										flag;
									}
									else{
										HX_STACK_LINE(5492)
										Float tmp110 = (Float((int)1) / Float(det));		HX_STACK_VAR(tmp110,"tmp110");
										HX_STACK_LINE(5492)
										det = tmp110;
										HX_STACK_LINE(5492)
										Float tmp111 = (Kc * det);		HX_STACK_VAR(tmp111,"tmp111");
										HX_STACK_LINE(5492)
										Float t = tmp111;		HX_STACK_VAR(t,"t");
										HX_STACK_LINE(5492)
										Float tmp112 = (Ka * det);		HX_STACK_VAR(tmp112,"tmp112");
										HX_STACK_LINE(5492)
										Kc = tmp112;
										HX_STACK_LINE(5492)
										Ka = t;
										HX_STACK_LINE(5492)
										Float tmp113 = det;		HX_STACK_VAR(tmp113,"tmp113");
										HX_STACK_LINE(5492)
										Float tmp114 = -(tmp113);		HX_STACK_VAR(tmp114,"tmp114");
										HX_STACK_LINE(5492)
										hx::MultEq(Kb,tmp114);
										HX_STACK_LINE(5492)
										(int)0;
									}
								}
							}
							HX_STACK_LINE(5492)
							{
								HX_STACK_LINE(5492)
								_this->vMassa = Ka;
								HX_STACK_LINE(5492)
								_this->vMassb = Kb;
								HX_STACK_LINE(5492)
								_this->vMassc = Kc;
							}
							HX_STACK_LINE(5492)
							Float biasCoef;		HX_STACK_VAR(biasCoef,"biasCoef");
							HX_STACK_LINE(5492)
							{
								HX_STACK_LINE(5492)
								Float tmp105;		HX_STACK_VAR(tmp105,"tmp105");
								HX_STACK_LINE(5492)
								{
									HX_STACK_LINE(5492)
									Float tmp106 = ::Math_obj::PI;		HX_STACK_VAR(tmp106,"tmp106");
									HX_STACK_LINE(5492)
									Float tmp107 = ((int)2 * tmp106);		HX_STACK_VAR(tmp107,"tmp107");
									HX_STACK_LINE(5492)
									Float tmp108 = tViscosity1;		HX_STACK_VAR(tmp108,"tmp108");
									HX_STACK_LINE(5492)
									Float tmp109 = (tmp107 * tmp108);		HX_STACK_VAR(tmp109,"tmp109");
									HX_STACK_LINE(5492)
									Float omega = tmp109;		HX_STACK_VAR(omega,"omega");
									HX_STACK_LINE(5492)
									Float tmp110 = (dt * omega);		HX_STACK_VAR(tmp110,"tmp110");
									HX_STACK_LINE(5492)
									int tmp111 = (int)2;		HX_STACK_VAR(tmp111,"tmp111");
									HX_STACK_LINE(5492)
									Float tmp112 = (omega * dt);		HX_STACK_VAR(tmp112,"tmp112");
									HX_STACK_LINE(5492)
									Float tmp113 = (tmp111 + tmp112);		HX_STACK_VAR(tmp113,"tmp113");
									HX_STACK_LINE(5492)
									Float tmp114 = (tmp110 * tmp113);		HX_STACK_VAR(tmp114,"tmp114");
									HX_STACK_LINE(5492)
									Float tmp115 = (Float((int)1) / Float(tmp114));		HX_STACK_VAR(tmp115,"tmp115");
									HX_STACK_LINE(5492)
									_this->lgamma = tmp115;
									HX_STACK_LINE(5492)
									Float tmp116 = ((int)1 + _this->lgamma);		HX_STACK_VAR(tmp116,"tmp116");
									HX_STACK_LINE(5492)
									Float tmp117 = (Float((int)1) / Float(tmp116));		HX_STACK_VAR(tmp117,"tmp117");
									HX_STACK_LINE(5492)
									Float ig = tmp117;		HX_STACK_VAR(ig,"ig");
									HX_STACK_LINE(5492)
									Float tmp118 = (dt * omega);		HX_STACK_VAR(tmp118,"tmp118");
									HX_STACK_LINE(5492)
									Float tmp119 = omega;		HX_STACK_VAR(tmp119,"tmp119");
									HX_STACK_LINE(5492)
									Float tmp120 = (tmp118 * tmp119);		HX_STACK_VAR(tmp120,"tmp120");
									HX_STACK_LINE(5492)
									Float tmp121 = _this->lgamma;		HX_STACK_VAR(tmp121,"tmp121");
									HX_STACK_LINE(5492)
									Float tmp122 = (tmp120 * tmp121);		HX_STACK_VAR(tmp122,"tmp122");
									HX_STACK_LINE(5492)
									biasCoef = tmp122;
									HX_STACK_LINE(5492)
									hx::MultEq(_this->lgamma,ig);
									HX_STACK_LINE(5492)
									tmp105 = ig;
								}
								HX_STACK_LINE(5492)
								Float X = tmp105;		HX_STACK_VAR(X,"X");
								HX_STACK_LINE(5492)
								hx::MultEq(_this->vMassa,X);
								HX_STACK_LINE(5492)
								hx::MultEq(_this->vMassb,X);
								HX_STACK_LINE(5492)
								hx::MultEq(_this->vMassc,X);
							}
						}
						else{
							HX_STACK_LINE(5492)
							{
								HX_STACK_LINE(5492)
								_this->vMassa = (int)0;
								HX_STACK_LINE(5492)
								_this->vMassb = (int)0;
								HX_STACK_LINE(5492)
								_this->vMassc = (int)0;
							}
							HX_STACK_LINE(5492)
							_this->lgamma = ((Float)0.0);
						}
					}
					HX_STACK_LINE(5492)
					{
						HX_STACK_LINE(5492)
						Float t = dtratio;		HX_STACK_VAR(t,"t");
						HX_STACK_LINE(5492)
						hx::MultEq(_this->dampx,t);
						HX_STACK_LINE(5492)
						hx::MultEq(_this->dampy,t);
					}
					HX_STACK_LINE(5492)
					hx::MultEq(_this->adamp,dtratio);
				}
			}
		}
		else{
			HX_STACK_LINE(5495)
			bool tmp23 = (arb->colarb != null());		HX_STACK_VAR(tmp23,"tmp23");
			HX_STACK_LINE(5495)
			if ((tmp23)){
				HX_STACK_LINE(5496)
				bool tmp24;		HX_STACK_VAR(tmp24,"tmp24");
				HX_STACK_LINE(5496)
				{
					HX_STACK_LINE(5496)
					::zpp_nape::dynamics::ZPP_ColArbiter _this = arb->colarb;		HX_STACK_VAR(_this,"_this");
					HX_STACK_LINE(5496)
					bool fst = true;		HX_STACK_VAR(fst,"fst");
					HX_STACK_LINE(5496)
					::zpp_nape::dynamics::ZPP_Contact pre = null();		HX_STACK_VAR(pre,"pre");
					HX_STACK_LINE(5496)
					::zpp_nape::dynamics::ZPP_IContact prei = null();		HX_STACK_VAR(prei,"prei");
					HX_STACK_LINE(5496)
					::zpp_nape::dynamics::ZPP_IContact tmp25 = _this->innards->next;		HX_STACK_VAR(tmp25,"tmp25");
					HX_STACK_LINE(5496)
					::zpp_nape::dynamics::ZPP_IContact cx_itei = tmp25;		HX_STACK_VAR(cx_itei,"cx_itei");
					HX_STACK_LINE(5496)
					_this->hc2 = false;
					HX_STACK_LINE(5496)
					{
						HX_STACK_LINE(5496)
						::zpp_nape::dynamics::ZPP_Contact tmp26 = _this->contacts->next;		HX_STACK_VAR(tmp26,"tmp26");
						HX_STACK_LINE(5496)
						::zpp_nape::dynamics::ZPP_Contact cx_ite = tmp26;		HX_STACK_VAR(cx_ite,"cx_ite");
						HX_STACK_LINE(5496)
						while((true)){
							HX_STACK_LINE(5496)
							bool tmp27 = (cx_ite != null());		HX_STACK_VAR(tmp27,"tmp27");
							HX_STACK_LINE(5496)
							bool tmp28 = !(tmp27);		HX_STACK_VAR(tmp28,"tmp28");
							HX_STACK_LINE(5496)
							if ((tmp28)){
								HX_STACK_LINE(5496)
								break;
							}
							HX_STACK_LINE(5496)
							::zpp_nape::dynamics::ZPP_Contact c = cx_ite;		HX_STACK_VAR(c,"c");
							HX_STACK_LINE(5496)
							{
								HX_STACK_LINE(5496)
								int tmp29 = c->stamp;		HX_STACK_VAR(tmp29,"tmp29");
								HX_STACK_LINE(5496)
								int tmp30 = ::nape::Config_obj::arbiterExpirationDelay;		HX_STACK_VAR(tmp30,"tmp30");
								HX_STACK_LINE(5496)
								int tmp31 = (tmp29 + tmp30);		HX_STACK_VAR(tmp31,"tmp31");
								HX_STACK_LINE(5496)
								int tmp32 = _this->stamp;		HX_STACK_VAR(tmp32,"tmp32");
								HX_STACK_LINE(5496)
								bool tmp33 = (tmp31 < tmp32);		HX_STACK_VAR(tmp33,"tmp33");
								HX_STACK_LINE(5496)
								if ((tmp33)){
									HX_STACK_LINE(5496)
									::zpp_nape::dynamics::ZPP_Contact tmp34;		HX_STACK_VAR(tmp34,"tmp34");
									HX_STACK_LINE(5496)
									{
										HX_STACK_LINE(5496)
										::zpp_nape::dynamics::ZPP_Contact _this1 = _this->contacts;		HX_STACK_VAR(_this1,"_this1");
										HX_STACK_LINE(5496)
										::zpp_nape::dynamics::ZPP_Contact old;		HX_STACK_VAR(old,"old");
										HX_STACK_LINE(5496)
										::zpp_nape::dynamics::ZPP_Contact ret;		HX_STACK_VAR(ret,"ret");
										HX_STACK_LINE(5496)
										bool tmp35 = (pre == null());		HX_STACK_VAR(tmp35,"tmp35");
										HX_STACK_LINE(5496)
										if ((tmp35)){
											HX_STACK_LINE(5496)
											old = _this1->next;
											HX_STACK_LINE(5496)
											ret = old->next;
											HX_STACK_LINE(5496)
											_this1->next = ret;
											HX_STACK_LINE(5496)
											bool tmp36 = (_this1->next == null());		HX_STACK_VAR(tmp36,"tmp36");
											HX_STACK_LINE(5496)
											if ((tmp36)){
												HX_STACK_LINE(5496)
												_this1->pushmod = true;
											}
										}
										else{
											HX_STACK_LINE(5496)
											old = pre->next;
											HX_STACK_LINE(5496)
											ret = old->next;
											HX_STACK_LINE(5496)
											pre->next = ret;
											HX_STACK_LINE(5496)
											bool tmp36 = (ret == null());		HX_STACK_VAR(tmp36,"tmp36");
											HX_STACK_LINE(5496)
											if ((tmp36)){
												HX_STACK_LINE(5496)
												_this1->pushmod = true;
											}
										}
										HX_STACK_LINE(5496)
										old->_inuse = false;
										HX_STACK_LINE(5496)
										_this1->modified = true;
										HX_STACK_LINE(5496)
										(_this1->length)--;
										HX_STACK_LINE(5496)
										_this1->pushmod = true;
										HX_STACK_LINE(5496)
										tmp34 = ret;
									}
									HX_STACK_LINE(5496)
									cx_ite = tmp34;
									HX_STACK_LINE(5496)
									::zpp_nape::dynamics::ZPP_IContact tmp35;		HX_STACK_VAR(tmp35,"tmp35");
									HX_STACK_LINE(5496)
									{
										HX_STACK_LINE(5496)
										::zpp_nape::dynamics::ZPP_IContact _this1 = _this->innards;		HX_STACK_VAR(_this1,"_this1");
										HX_STACK_LINE(5496)
										::zpp_nape::dynamics::ZPP_IContact old;		HX_STACK_VAR(old,"old");
										HX_STACK_LINE(5496)
										::zpp_nape::dynamics::ZPP_IContact ret;		HX_STACK_VAR(ret,"ret");
										HX_STACK_LINE(5496)
										bool tmp36 = (prei == null());		HX_STACK_VAR(tmp36,"tmp36");
										HX_STACK_LINE(5496)
										if ((tmp36)){
											HX_STACK_LINE(5496)
											old = _this1->next;
											HX_STACK_LINE(5496)
											ret = old->next;
											HX_STACK_LINE(5496)
											_this1->next = ret;
											HX_STACK_LINE(5496)
											bool tmp37 = (_this1->next == null());		HX_STACK_VAR(tmp37,"tmp37");
											HX_STACK_LINE(5496)
											if ((tmp37)){
												HX_STACK_LINE(5496)
												_this1->pushmod = true;
											}
										}
										else{
											HX_STACK_LINE(5496)
											old = prei->next;
											HX_STACK_LINE(5496)
											ret = old->next;
											HX_STACK_LINE(5496)
											prei->next = ret;
											HX_STACK_LINE(5496)
											bool tmp37 = (ret == null());		HX_STACK_VAR(tmp37,"tmp37");
											HX_STACK_LINE(5496)
											if ((tmp37)){
												HX_STACK_LINE(5496)
												_this1->pushmod = true;
											}
										}
										HX_STACK_LINE(5496)
										old->_inuse = false;
										HX_STACK_LINE(5496)
										_this1->modified = true;
										HX_STACK_LINE(5496)
										(_this1->length)--;
										HX_STACK_LINE(5496)
										_this1->pushmod = true;
										HX_STACK_LINE(5496)
										tmp35 = ret;
									}
									HX_STACK_LINE(5496)
									cx_itei = tmp35;
									HX_STACK_LINE(5496)
									{
										HX_STACK_LINE(5496)
										::zpp_nape::dynamics::ZPP_Contact o = c;		HX_STACK_VAR(o,"o");
										HX_STACK_LINE(5496)
										o->arbiter = null();
										HX_STACK_LINE(5496)
										::zpp_nape::dynamics::ZPP_Contact tmp36 = ::zpp_nape::dynamics::ZPP_Contact_obj::zpp_pool;		HX_STACK_VAR(tmp36,"tmp36");
										HX_STACK_LINE(5496)
										o->next = tmp36;
										HX_STACK_LINE(5496)
										::zpp_nape::dynamics::ZPP_Contact_obj::zpp_pool = o;
									}
									HX_STACK_LINE(5496)
									continue;
								}
								HX_STACK_LINE(5496)
								::zpp_nape::dynamics::ZPP_IContact ci = c->inner;		HX_STACK_VAR(ci,"ci");
								HX_STACK_LINE(5496)
								bool pact1 = c->active;		HX_STACK_VAR(pact1,"pact1");
								HX_STACK_LINE(5496)
								bool tmp34 = (c->stamp == _this->stamp);		HX_STACK_VAR(tmp34,"tmp34");
								HX_STACK_LINE(5496)
								c->active = tmp34;
								HX_STACK_LINE(5496)
								bool tmp35 = c->active;		HX_STACK_VAR(tmp35,"tmp35");
								HX_STACK_LINE(5496)
								if ((tmp35)){
									HX_STACK_LINE(5496)
									bool tmp36 = fst;		HX_STACK_VAR(tmp36,"tmp36");
									HX_STACK_LINE(5496)
									if ((tmp36)){
										HX_STACK_LINE(5496)
										fst = false;
										HX_STACK_LINE(5496)
										_this->c1 = ci;
										HX_STACK_LINE(5496)
										_this->oc1 = c;
									}
									else{
										HX_STACK_LINE(5496)
										_this->hc2 = true;
										HX_STACK_LINE(5496)
										_this->c2 = ci;
										HX_STACK_LINE(5496)
										_this->oc2 = c;
									}
								}
								HX_STACK_LINE(5496)
								bool tmp36 = (pact1 != c->active);		HX_STACK_VAR(tmp36,"tmp36");
								HX_STACK_LINE(5496)
								if ((tmp36)){
									HX_STACK_LINE(5496)
									_this->contacts->modified = true;
								}
								HX_STACK_LINE(5496)
								pre = cx_ite;
								HX_STACK_LINE(5496)
								prei = cx_itei;
								HX_STACK_LINE(5496)
								cx_itei = cx_itei->next;
							}
							HX_STACK_LINE(5496)
							cx_ite = cx_ite->next;
						}
					}
					HX_STACK_LINE(5496)
					bool tmp26 = _this->hc2;		HX_STACK_VAR(tmp26,"tmp26");
					HX_STACK_LINE(5496)
					if ((tmp26)){
						HX_STACK_LINE(5496)
						_this->hpc2 = true;
						HX_STACK_LINE(5496)
						bool tmp27 = _this->oc1->posOnly;		HX_STACK_VAR(tmp27,"tmp27");
						HX_STACK_LINE(5496)
						if ((tmp27)){
							HX_STACK_LINE(5496)
							::zpp_nape::dynamics::ZPP_IContact tmp28 = _this->c1;		HX_STACK_VAR(tmp28,"tmp28");
							HX_STACK_LINE(5496)
							_this->c1 = _this->c2;
							HX_STACK_LINE(5496)
							_this->c2 = tmp28;
							HX_STACK_LINE(5496)
							::zpp_nape::dynamics::ZPP_Contact tmp29 = _this->oc1;		HX_STACK_VAR(tmp29,"tmp29");
							HX_STACK_LINE(5496)
							_this->oc1 = _this->oc2;
							HX_STACK_LINE(5496)
							_this->oc2 = tmp29;
							HX_STACK_LINE(5496)
							_this->hc2 = false;
						}
						else{
							HX_STACK_LINE(5496)
							bool tmp28 = _this->oc2->posOnly;		HX_STACK_VAR(tmp28,"tmp28");
							HX_STACK_LINE(5496)
							if ((tmp28)){
								HX_STACK_LINE(5496)
								_this->hc2 = false;
							}
						}
						HX_STACK_LINE(5496)
						bool tmp28 = _this->oc1->posOnly;		HX_STACK_VAR(tmp28,"tmp28");
						HX_STACK_LINE(5496)
						if ((tmp28)){
							HX_STACK_LINE(5496)
							fst = true;
						}
					}
					else{
						HX_STACK_LINE(5496)
						_this->hpc2 = false;
					}
					HX_STACK_LINE(5496)
					tmp24 = fst;
				}
				HX_STACK_LINE(5496)
				if ((tmp24)){
					HX_STACK_LINE(5496)
					arb->active = false;
				}
			}
		}
		HX_STACK_LINE(5498)
		bool tmp23 = (pact != arb->active);		HX_STACK_VAR(tmp23,"tmp23");
		HX_STACK_LINE(5498)
		if ((tmp23)){
			HX_STACK_LINE(5499)
			::zpp_nape::util::ZNPList_ZPP_Arbiter tmp24 = arb->b1->arbiters;		HX_STACK_VAR(tmp24,"tmp24");
			HX_STACK_LINE(5499)
			tmp24->modified = true;
			HX_STACK_LINE(5500)
			::zpp_nape::util::ZNPList_ZPP_Arbiter tmp25 = arb->b2->arbiters;		HX_STACK_VAR(tmp25,"tmp25");
			HX_STACK_LINE(5500)
			tmp25->modified = true;
			HX_STACK_LINE(5501)
			::zpp_nape::util::ZNPList_ZPP_ColArbiter tmp26 = this->c_arbiters_false;		HX_STACK_VAR(tmp26,"tmp26");
			HX_STACK_LINE(5501)
			bool tmp27 = tmp26->modified = true;		HX_STACK_VAR(tmp27,"tmp27");
			HX_STACK_LINE(5501)
			::zpp_nape::util::ZNPList_ZPP_ColArbiter tmp28 = this->c_arbiters_true;		HX_STACK_VAR(tmp28,"tmp28");
			HX_STACK_LINE(5501)
			tmp28->modified = tmp27;
			HX_STACK_LINE(5502)
			::zpp_nape::util::ZNPList_ZPP_FluidArbiter tmp29 = this->f_arbiters;		HX_STACK_VAR(tmp29,"tmp29");
			HX_STACK_LINE(5502)
			bool tmp30 = tmp29->modified = true;		HX_STACK_VAR(tmp30,"tmp30");
			HX_STACK_LINE(5502)
			::zpp_nape::util::ZNPList_ZPP_SensorArbiter tmp31 = this->s_arbiters;		HX_STACK_VAR(tmp31,"tmp31");
			HX_STACK_LINE(5502)
			tmp31->modified = tmp30;
		}
		HX_STACK_LINE(5504)
		return false;
	}
}


HX_DEFINE_DYNAMIC_FUNC3(ZPP_Space_obj,presteparb,return )

Void ZPP_Space_obj::prestep( Float dt){
{
		HX_STACK_FRAME("zpp_nape.space.ZPP_Space","prestep",0x6c44ec39,"zpp_nape.space.ZPP_Space.prestep","zpp_nape/space/Space.hx",5506,0x2b65ed03)
		HX_STACK_THIS(this)
		HX_STACK_ARG(dt,"dt")
		HX_STACK_LINE(5507)
		::zpp_nape::util::ZNPNode_ZPP_Constraint pre = null();		HX_STACK_VAR(pre,"pre");
		HX_STACK_LINE(5508)
		{
			HX_STACK_LINE(5509)
			::zpp_nape::util::ZNPList_ZPP_Constraint tmp = this->live_constraints;		HX_STACK_VAR(tmp,"tmp");
			HX_STACK_LINE(5509)
			::zpp_nape::util::ZNPNode_ZPP_Constraint cx_ite = tmp->head;		HX_STACK_VAR(cx_ite,"cx_ite");
			HX_STACK_LINE(5510)
			while((true)){
				HX_STACK_LINE(5510)
				bool tmp1 = (cx_ite != null());		HX_STACK_VAR(tmp1,"tmp1");
				HX_STACK_LINE(5510)
				bool tmp2 = !(tmp1);		HX_STACK_VAR(tmp2,"tmp2");
				HX_STACK_LINE(5510)
				if ((tmp2)){
					HX_STACK_LINE(5510)
					break;
				}
				HX_STACK_LINE(5511)
				::zpp_nape::constraint::ZPP_Constraint con = cx_ite->elt;		HX_STACK_VAR(con,"con");
				HX_STACK_LINE(5512)
				{
					HX_STACK_LINE(5513)
					Float tmp3 = dt;		HX_STACK_VAR(tmp3,"tmp3");
					HX_STACK_LINE(5513)
					bool tmp4 = con->preStep(tmp3);		HX_STACK_VAR(tmp4,"tmp4");
					HX_STACK_LINE(5513)
					if ((tmp4)){
						HX_STACK_LINE(5514)
						::zpp_nape::util::ZNPList_ZPP_Constraint tmp5 = this->live_constraints;		HX_STACK_VAR(tmp5,"tmp5");
						HX_STACK_LINE(5514)
						::zpp_nape::util::ZNPNode_ZPP_Constraint tmp6 = pre;		HX_STACK_VAR(tmp6,"tmp6");
						HX_STACK_LINE(5514)
						::zpp_nape::util::ZNPNode_ZPP_Constraint tmp7 = tmp5->erase(tmp6);		HX_STACK_VAR(tmp7,"tmp7");
						HX_STACK_LINE(5514)
						cx_ite = tmp7;
						HX_STACK_LINE(5515)
						con->broken();
						HX_STACK_LINE(5516)
						::zpp_nape::constraint::ZPP_Constraint tmp8 = con;		HX_STACK_VAR(tmp8,"tmp8");
						HX_STACK_LINE(5516)
						this->constraintCbBreak(tmp8);
						HX_STACK_LINE(5517)
						bool tmp9 = con->removeOnBreak;		HX_STACK_VAR(tmp9,"tmp9");
						HX_STACK_LINE(5517)
						if ((tmp9)){
							HX_STACK_LINE(5518)
							con->component->sleeping = true;
							HX_STACK_LINE(5519)
							this->midstep = false;
							HX_STACK_LINE(5520)
							bool tmp10 = (con->compound != null());		HX_STACK_VAR(tmp10,"tmp10");
							HX_STACK_LINE(5520)
							if ((tmp10)){
								HX_STACK_LINE(5520)
								::nape::constraint::ConstraintList tmp11 = con->compound->wrap_constraints;		HX_STACK_VAR(tmp11,"tmp11");
								HX_STACK_LINE(5520)
								::nape::constraint::Constraint tmp12 = con->outer;		HX_STACK_VAR(tmp12,"tmp12");
								HX_STACK_LINE(5520)
								tmp11->remove(tmp12);
							}
							else{
								HX_STACK_LINE(5521)
								::nape::constraint::ConstraintList tmp11 = this->wrap_constraints;		HX_STACK_VAR(tmp11,"tmp11");
								HX_STACK_LINE(5521)
								::nape::constraint::Constraint tmp12 = con->outer;		HX_STACK_VAR(tmp12,"tmp12");
								HX_STACK_LINE(5521)
								tmp11->remove(tmp12);
							}
							HX_STACK_LINE(5522)
							this->midstep = true;
						}
						else{
							HX_STACK_LINE(5524)
							con->active = false;
						}
						HX_STACK_LINE(5525)
						con->clearcache();
						HX_STACK_LINE(5526)
						continue;
					}
					HX_STACK_LINE(5528)
					pre = cx_ite;
				}
				HX_STACK_LINE(5530)
				cx_ite = cx_ite->next;
			}
		}
		HX_STACK_LINE(5533)
		{
			HX_STACK_LINE(5534)
			::zpp_nape::util::ZNPNode_ZPP_ColArbiter pre1 = null();		HX_STACK_VAR(pre1,"pre1");
			HX_STACK_LINE(5535)
			::zpp_nape::util::ZNPList_ZPP_ColArbiter tmp = this->c_arbiters_true;		HX_STACK_VAR(tmp,"tmp");
			HX_STACK_LINE(5535)
			::zpp_nape::util::ZNPList_ZPP_ColArbiter arbs = tmp;		HX_STACK_VAR(arbs,"arbs");
			HX_STACK_LINE(5536)
			::zpp_nape::util::ZNPNode_ZPP_ColArbiter arbite = arbs->head;		HX_STACK_VAR(arbite,"arbite");
			HX_STACK_LINE(5537)
			::zpp_nape::util::ZNPList_ZPP_ColArbiter tmp1 = this->c_arbiters_false;		HX_STACK_VAR(tmp1,"tmp1");
			HX_STACK_LINE(5537)
			bool tmp2 = (tmp1 != null());		HX_STACK_VAR(tmp2,"tmp2");
			HX_STACK_LINE(5537)
			bool fst = tmp2;		HX_STACK_VAR(fst,"fst");
			HX_STACK_LINE(5538)
			{
				HX_STACK_LINE(5539)
				bool tmp3 = fst;		HX_STACK_VAR(tmp3,"tmp3");
				HX_STACK_LINE(5539)
				bool tmp4;		HX_STACK_VAR(tmp4,"tmp4");
				HX_STACK_LINE(5539)
				if ((tmp3)){
					HX_STACK_LINE(5539)
					tmp4 = (arbite == null());
				}
				else{
					HX_STACK_LINE(5539)
					tmp4 = false;
				}
				HX_STACK_LINE(5539)
				if ((tmp4)){
					HX_STACK_LINE(5540)
					fst = false;
					HX_STACK_LINE(5541)
					::zpp_nape::util::ZNPList_ZPP_ColArbiter tmp5 = this->c_arbiters_false;		HX_STACK_VAR(tmp5,"tmp5");
					HX_STACK_LINE(5541)
					arbite = tmp5->head;
					HX_STACK_LINE(5542)
					::zpp_nape::util::ZNPList_ZPP_ColArbiter tmp6 = this->c_arbiters_false;		HX_STACK_VAR(tmp6,"tmp6");
					HX_STACK_LINE(5542)
					arbs = tmp6;
					HX_STACK_LINE(5543)
					pre1 = null();
				}
			}
			HX_STACK_LINE(5546)
			while((true)){
				HX_STACK_LINE(5546)
				bool tmp3 = (arbite != null());		HX_STACK_VAR(tmp3,"tmp3");
				HX_STACK_LINE(5546)
				bool tmp4 = !(tmp3);		HX_STACK_VAR(tmp4,"tmp4");
				HX_STACK_LINE(5546)
				if ((tmp4)){
					HX_STACK_LINE(5546)
					break;
				}
				HX_STACK_LINE(5547)
				::zpp_nape::dynamics::ZPP_ColArbiter arb = arbite->elt;		HX_STACK_VAR(arb,"arb");
				HX_STACK_LINE(5548)
				::zpp_nape::dynamics::ZPP_ColArbiter tmp5 = arb;		HX_STACK_VAR(tmp5,"tmp5");
				HX_STACK_LINE(5548)
				Float tmp6 = dt;		HX_STACK_VAR(tmp6,"tmp6");
				HX_STACK_LINE(5548)
				bool tmp7 = this->presteparb(tmp5,tmp6,null());		HX_STACK_VAR(tmp7,"tmp7");
				HX_STACK_LINE(5548)
				if ((tmp7)){
					HX_STACK_LINE(5549)
					::zpp_nape::util::ZNPNode_ZPP_ColArbiter tmp8;		HX_STACK_VAR(tmp8,"tmp8");
					HX_STACK_LINE(5549)
					{
						HX_STACK_LINE(5549)
						::zpp_nape::util::ZNPNode_ZPP_ColArbiter old;		HX_STACK_VAR(old,"old");
						HX_STACK_LINE(5549)
						::zpp_nape::util::ZNPNode_ZPP_ColArbiter ret;		HX_STACK_VAR(ret,"ret");
						HX_STACK_LINE(5549)
						bool tmp9 = (pre1 == null());		HX_STACK_VAR(tmp9,"tmp9");
						HX_STACK_LINE(5549)
						if ((tmp9)){
							HX_STACK_LINE(5549)
							old = arbs->head;
							HX_STACK_LINE(5549)
							ret = old->next;
							HX_STACK_LINE(5549)
							arbs->head = ret;
							HX_STACK_LINE(5549)
							bool tmp10 = (arbs->head == null());		HX_STACK_VAR(tmp10,"tmp10");
							HX_STACK_LINE(5549)
							if ((tmp10)){
								HX_STACK_LINE(5549)
								arbs->pushmod = true;
							}
						}
						else{
							HX_STACK_LINE(5549)
							old = pre1->next;
							HX_STACK_LINE(5549)
							ret = old->next;
							HX_STACK_LINE(5549)
							pre1->next = ret;
							HX_STACK_LINE(5549)
							bool tmp10 = (ret == null());		HX_STACK_VAR(tmp10,"tmp10");
							HX_STACK_LINE(5549)
							if ((tmp10)){
								HX_STACK_LINE(5549)
								arbs->pushmod = true;
							}
						}
						HX_STACK_LINE(5549)
						{
							HX_STACK_LINE(5549)
							::zpp_nape::util::ZNPNode_ZPP_ColArbiter o = old;		HX_STACK_VAR(o,"o");
							HX_STACK_LINE(5549)
							o->elt = null();
							HX_STACK_LINE(5549)
							::zpp_nape::util::ZNPNode_ZPP_ColArbiter tmp10 = ::zpp_nape::util::ZNPNode_ZPP_ColArbiter_obj::zpp_pool;		HX_STACK_VAR(tmp10,"tmp10");
							HX_STACK_LINE(5549)
							o->next = tmp10;
							HX_STACK_LINE(5549)
							::zpp_nape::util::ZNPNode_ZPP_ColArbiter_obj::zpp_pool = o;
						}
						HX_STACK_LINE(5549)
						arbs->modified = true;
						HX_STACK_LINE(5549)
						(arbs->length)--;
						HX_STACK_LINE(5549)
						arbs->pushmod = true;
						HX_STACK_LINE(5549)
						tmp8 = ret;
					}
					HX_STACK_LINE(5549)
					arbite = tmp8;
					HX_STACK_LINE(5550)
					{
						HX_STACK_LINE(5551)
						bool tmp9 = fst;		HX_STACK_VAR(tmp9,"tmp9");
						HX_STACK_LINE(5551)
						bool tmp10;		HX_STACK_VAR(tmp10,"tmp10");
						HX_STACK_LINE(5551)
						if ((tmp9)){
							HX_STACK_LINE(5551)
							tmp10 = (arbite == null());
						}
						else{
							HX_STACK_LINE(5551)
							tmp10 = false;
						}
						HX_STACK_LINE(5551)
						if ((tmp10)){
							HX_STACK_LINE(5552)
							fst = false;
							HX_STACK_LINE(5553)
							::zpp_nape::util::ZNPList_ZPP_ColArbiter tmp11 = this->c_arbiters_false;		HX_STACK_VAR(tmp11,"tmp11");
							HX_STACK_LINE(5553)
							arbite = tmp11->head;
							HX_STACK_LINE(5554)
							::zpp_nape::util::ZNPList_ZPP_ColArbiter tmp12 = this->c_arbiters_false;		HX_STACK_VAR(tmp12,"tmp12");
							HX_STACK_LINE(5554)
							arbs = tmp12;
							HX_STACK_LINE(5555)
							pre1 = null();
						}
					}
					HX_STACK_LINE(5558)
					continue;
				}
				HX_STACK_LINE(5560)
				pre1 = arbite;
				HX_STACK_LINE(5561)
				arbite = arbite->next;
				HX_STACK_LINE(5562)
				{
					HX_STACK_LINE(5563)
					bool tmp8 = fst;		HX_STACK_VAR(tmp8,"tmp8");
					HX_STACK_LINE(5563)
					bool tmp9;		HX_STACK_VAR(tmp9,"tmp9");
					HX_STACK_LINE(5563)
					if ((tmp8)){
						HX_STACK_LINE(5563)
						tmp9 = (arbite == null());
					}
					else{
						HX_STACK_LINE(5563)
						tmp9 = false;
					}
					HX_STACK_LINE(5563)
					if ((tmp9)){
						HX_STACK_LINE(5564)
						fst = false;
						HX_STACK_LINE(5565)
						::zpp_nape::util::ZNPList_ZPP_ColArbiter tmp10 = this->c_arbiters_false;		HX_STACK_VAR(tmp10,"tmp10");
						HX_STACK_LINE(5565)
						arbite = tmp10->head;
						HX_STACK_LINE(5566)
						::zpp_nape::util::ZNPList_ZPP_ColArbiter tmp11 = this->c_arbiters_false;		HX_STACK_VAR(tmp11,"tmp11");
						HX_STACK_LINE(5566)
						arbs = tmp11;
						HX_STACK_LINE(5567)
						pre1 = null();
					}
				}
			}
		}
		HX_STACK_LINE(5572)
		{
			HX_STACK_LINE(5573)
			::zpp_nape::util::ZNPNode_ZPP_FluidArbiter pre1 = null();		HX_STACK_VAR(pre1,"pre1");
			HX_STACK_LINE(5574)
			::zpp_nape::util::ZNPList_ZPP_FluidArbiter tmp = this->f_arbiters;		HX_STACK_VAR(tmp,"tmp");
			HX_STACK_LINE(5574)
			::zpp_nape::util::ZNPList_ZPP_FluidArbiter arbs = tmp;		HX_STACK_VAR(arbs,"arbs");
			HX_STACK_LINE(5575)
			::zpp_nape::util::ZNPNode_ZPP_FluidArbiter arbite = arbs->head;		HX_STACK_VAR(arbite,"arbite");
			HX_STACK_LINE(5576)
			bool tmp1 = false;		HX_STACK_VAR(tmp1,"tmp1");
			HX_STACK_LINE(5576)
			bool fst = tmp1;		HX_STACK_VAR(fst,"fst");
			HX_STACK_LINE(5577)
			{
				HX_STACK_LINE(5578)
				bool tmp2 = fst;		HX_STACK_VAR(tmp2,"tmp2");
				HX_STACK_LINE(5578)
				bool tmp3;		HX_STACK_VAR(tmp3,"tmp3");
				HX_STACK_LINE(5578)
				if ((tmp2)){
					HX_STACK_LINE(5578)
					tmp3 = (arbite == null());
				}
				else{
					HX_STACK_LINE(5578)
					tmp3 = false;
				}
				HX_STACK_LINE(5578)
				if ((tmp3)){
					HX_STACK_LINE(5579)
					fst = false;
					HX_STACK_LINE(5581)
					arbs = null();
					HX_STACK_LINE(5582)
					pre1 = null();
				}
			}
			HX_STACK_LINE(5585)
			while((true)){
				HX_STACK_LINE(5585)
				bool tmp2 = (arbite != null());		HX_STACK_VAR(tmp2,"tmp2");
				HX_STACK_LINE(5585)
				bool tmp3 = !(tmp2);		HX_STACK_VAR(tmp3,"tmp3");
				HX_STACK_LINE(5585)
				if ((tmp3)){
					HX_STACK_LINE(5585)
					break;
				}
				HX_STACK_LINE(5586)
				::zpp_nape::dynamics::ZPP_FluidArbiter arb = arbite->elt;		HX_STACK_VAR(arb,"arb");
				HX_STACK_LINE(5587)
				::zpp_nape::dynamics::ZPP_FluidArbiter tmp4 = arb;		HX_STACK_VAR(tmp4,"tmp4");
				HX_STACK_LINE(5587)
				Float tmp5 = dt;		HX_STACK_VAR(tmp5,"tmp5");
				HX_STACK_LINE(5587)
				bool tmp6 = this->presteparb(tmp4,tmp5,null());		HX_STACK_VAR(tmp6,"tmp6");
				HX_STACK_LINE(5587)
				if ((tmp6)){
					HX_STACK_LINE(5588)
					::zpp_nape::util::ZNPNode_ZPP_FluidArbiter tmp7;		HX_STACK_VAR(tmp7,"tmp7");
					HX_STACK_LINE(5588)
					{
						HX_STACK_LINE(5588)
						::zpp_nape::util::ZNPNode_ZPP_FluidArbiter old;		HX_STACK_VAR(old,"old");
						HX_STACK_LINE(5588)
						::zpp_nape::util::ZNPNode_ZPP_FluidArbiter ret;		HX_STACK_VAR(ret,"ret");
						HX_STACK_LINE(5588)
						bool tmp8 = (pre1 == null());		HX_STACK_VAR(tmp8,"tmp8");
						HX_STACK_LINE(5588)
						if ((tmp8)){
							HX_STACK_LINE(5588)
							old = arbs->head;
							HX_STACK_LINE(5588)
							ret = old->next;
							HX_STACK_LINE(5588)
							arbs->head = ret;
							HX_STACK_LINE(5588)
							bool tmp9 = (arbs->head == null());		HX_STACK_VAR(tmp9,"tmp9");
							HX_STACK_LINE(5588)
							if ((tmp9)){
								HX_STACK_LINE(5588)
								arbs->pushmod = true;
							}
						}
						else{
							HX_STACK_LINE(5588)
							old = pre1->next;
							HX_STACK_LINE(5588)
							ret = old->next;
							HX_STACK_LINE(5588)
							pre1->next = ret;
							HX_STACK_LINE(5588)
							bool tmp9 = (ret == null());		HX_STACK_VAR(tmp9,"tmp9");
							HX_STACK_LINE(5588)
							if ((tmp9)){
								HX_STACK_LINE(5588)
								arbs->pushmod = true;
							}
						}
						HX_STACK_LINE(5588)
						{
							HX_STACK_LINE(5588)
							::zpp_nape::util::ZNPNode_ZPP_FluidArbiter o = old;		HX_STACK_VAR(o,"o");
							HX_STACK_LINE(5588)
							o->elt = null();
							HX_STACK_LINE(5588)
							::zpp_nape::util::ZNPNode_ZPP_FluidArbiter tmp9 = ::zpp_nape::util::ZNPNode_ZPP_FluidArbiter_obj::zpp_pool;		HX_STACK_VAR(tmp9,"tmp9");
							HX_STACK_LINE(5588)
							o->next = tmp9;
							HX_STACK_LINE(5588)
							::zpp_nape::util::ZNPNode_ZPP_FluidArbiter_obj::zpp_pool = o;
						}
						HX_STACK_LINE(5588)
						arbs->modified = true;
						HX_STACK_LINE(5588)
						(arbs->length)--;
						HX_STACK_LINE(5588)
						arbs->pushmod = true;
						HX_STACK_LINE(5588)
						tmp7 = ret;
					}
					HX_STACK_LINE(5588)
					arbite = tmp7;
					HX_STACK_LINE(5589)
					{
						HX_STACK_LINE(5590)
						bool tmp8 = fst;		HX_STACK_VAR(tmp8,"tmp8");
						HX_STACK_LINE(5590)
						bool tmp9;		HX_STACK_VAR(tmp9,"tmp9");
						HX_STACK_LINE(5590)
						if ((tmp8)){
							HX_STACK_LINE(5590)
							tmp9 = (arbite == null());
						}
						else{
							HX_STACK_LINE(5590)
							tmp9 = false;
						}
						HX_STACK_LINE(5590)
						if ((tmp9)){
							HX_STACK_LINE(5591)
							fst = false;
							HX_STACK_LINE(5593)
							arbs = null();
							HX_STACK_LINE(5594)
							pre1 = null();
						}
					}
					HX_STACK_LINE(5597)
					continue;
				}
				HX_STACK_LINE(5599)
				pre1 = arbite;
				HX_STACK_LINE(5600)
				arbite = arbite->next;
				HX_STACK_LINE(5601)
				{
					HX_STACK_LINE(5602)
					bool tmp7 = fst;		HX_STACK_VAR(tmp7,"tmp7");
					HX_STACK_LINE(5602)
					bool tmp8;		HX_STACK_VAR(tmp8,"tmp8");
					HX_STACK_LINE(5602)
					if ((tmp7)){
						HX_STACK_LINE(5602)
						tmp8 = (arbite == null());
					}
					else{
						HX_STACK_LINE(5602)
						tmp8 = false;
					}
					HX_STACK_LINE(5602)
					if ((tmp8)){
						HX_STACK_LINE(5603)
						fst = false;
						HX_STACK_LINE(5605)
						arbs = null();
						HX_STACK_LINE(5606)
						pre1 = null();
					}
				}
			}
		}
		HX_STACK_LINE(5611)
		{
			HX_STACK_LINE(5612)
			::zpp_nape::util::ZNPNode_ZPP_SensorArbiter pre1 = null();		HX_STACK_VAR(pre1,"pre1");
			HX_STACK_LINE(5613)
			::zpp_nape::util::ZNPList_ZPP_SensorArbiter tmp = this->s_arbiters;		HX_STACK_VAR(tmp,"tmp");
			HX_STACK_LINE(5613)
			::zpp_nape::util::ZNPList_ZPP_SensorArbiter arbs = tmp;		HX_STACK_VAR(arbs,"arbs");
			HX_STACK_LINE(5614)
			::zpp_nape::util::ZNPNode_ZPP_SensorArbiter arbite = arbs->head;		HX_STACK_VAR(arbite,"arbite");
			HX_STACK_LINE(5615)
			bool tmp1 = false;		HX_STACK_VAR(tmp1,"tmp1");
			HX_STACK_LINE(5615)
			bool fst = tmp1;		HX_STACK_VAR(fst,"fst");
			HX_STACK_LINE(5616)
			{
				HX_STACK_LINE(5617)
				bool tmp2 = fst;		HX_STACK_VAR(tmp2,"tmp2");
				HX_STACK_LINE(5617)
				bool tmp3;		HX_STACK_VAR(tmp3,"tmp3");
				HX_STACK_LINE(5617)
				if ((tmp2)){
					HX_STACK_LINE(5617)
					tmp3 = (arbite == null());
				}
				else{
					HX_STACK_LINE(5617)
					tmp3 = false;
				}
				HX_STACK_LINE(5617)
				if ((tmp3)){
					HX_STACK_LINE(5618)
					fst = false;
					HX_STACK_LINE(5620)
					arbs = null();
					HX_STACK_LINE(5621)
					pre1 = null();
				}
			}
			HX_STACK_LINE(5624)
			while((true)){
				HX_STACK_LINE(5624)
				bool tmp2 = (arbite != null());		HX_STACK_VAR(tmp2,"tmp2");
				HX_STACK_LINE(5624)
				bool tmp3 = !(tmp2);		HX_STACK_VAR(tmp3,"tmp3");
				HX_STACK_LINE(5624)
				if ((tmp3)){
					HX_STACK_LINE(5624)
					break;
				}
				HX_STACK_LINE(5625)
				::zpp_nape::dynamics::ZPP_SensorArbiter arb = arbite->elt;		HX_STACK_VAR(arb,"arb");
				HX_STACK_LINE(5626)
				::zpp_nape::dynamics::ZPP_SensorArbiter tmp4 = arb;		HX_STACK_VAR(tmp4,"tmp4");
				HX_STACK_LINE(5626)
				Float tmp5 = dt;		HX_STACK_VAR(tmp5,"tmp5");
				HX_STACK_LINE(5626)
				bool tmp6 = this->presteparb(tmp4,tmp5,null());		HX_STACK_VAR(tmp6,"tmp6");
				HX_STACK_LINE(5626)
				if ((tmp6)){
					HX_STACK_LINE(5627)
					::zpp_nape::util::ZNPNode_ZPP_SensorArbiter tmp7;		HX_STACK_VAR(tmp7,"tmp7");
					HX_STACK_LINE(5627)
					{
						HX_STACK_LINE(5627)
						::zpp_nape::util::ZNPNode_ZPP_SensorArbiter old;		HX_STACK_VAR(old,"old");
						HX_STACK_LINE(5627)
						::zpp_nape::util::ZNPNode_ZPP_SensorArbiter ret;		HX_STACK_VAR(ret,"ret");
						HX_STACK_LINE(5627)
						bool tmp8 = (pre1 == null());		HX_STACK_VAR(tmp8,"tmp8");
						HX_STACK_LINE(5627)
						if ((tmp8)){
							HX_STACK_LINE(5627)
							old = arbs->head;
							HX_STACK_LINE(5627)
							ret = old->next;
							HX_STACK_LINE(5627)
							arbs->head = ret;
							HX_STACK_LINE(5627)
							bool tmp9 = (arbs->head == null());		HX_STACK_VAR(tmp9,"tmp9");
							HX_STACK_LINE(5627)
							if ((tmp9)){
								HX_STACK_LINE(5627)
								arbs->pushmod = true;
							}
						}
						else{
							HX_STACK_LINE(5627)
							old = pre1->next;
							HX_STACK_LINE(5627)
							ret = old->next;
							HX_STACK_LINE(5627)
							pre1->next = ret;
							HX_STACK_LINE(5627)
							bool tmp9 = (ret == null());		HX_STACK_VAR(tmp9,"tmp9");
							HX_STACK_LINE(5627)
							if ((tmp9)){
								HX_STACK_LINE(5627)
								arbs->pushmod = true;
							}
						}
						HX_STACK_LINE(5627)
						{
							HX_STACK_LINE(5627)
							::zpp_nape::util::ZNPNode_ZPP_SensorArbiter o = old;		HX_STACK_VAR(o,"o");
							HX_STACK_LINE(5627)
							o->elt = null();
							HX_STACK_LINE(5627)
							::zpp_nape::util::ZNPNode_ZPP_SensorArbiter tmp9 = ::zpp_nape::util::ZNPNode_ZPP_SensorArbiter_obj::zpp_pool;		HX_STACK_VAR(tmp9,"tmp9");
							HX_STACK_LINE(5627)
							o->next = tmp9;
							HX_STACK_LINE(5627)
							::zpp_nape::util::ZNPNode_ZPP_SensorArbiter_obj::zpp_pool = o;
						}
						HX_STACK_LINE(5627)
						arbs->modified = true;
						HX_STACK_LINE(5627)
						(arbs->length)--;
						HX_STACK_LINE(5627)
						arbs->pushmod = true;
						HX_STACK_LINE(5627)
						tmp7 = ret;
					}
					HX_STACK_LINE(5627)
					arbite = tmp7;
					HX_STACK_LINE(5628)
					{
						HX_STACK_LINE(5629)
						bool tmp8 = fst;		HX_STACK_VAR(tmp8,"tmp8");
						HX_STACK_LINE(5629)
						bool tmp9;		HX_STACK_VAR(tmp9,"tmp9");
						HX_STACK_LINE(5629)
						if ((tmp8)){
							HX_STACK_LINE(5629)
							tmp9 = (arbite == null());
						}
						else{
							HX_STACK_LINE(5629)
							tmp9 = false;
						}
						HX_STACK_LINE(5629)
						if ((tmp9)){
							HX_STACK_LINE(5630)
							fst = false;
							HX_STACK_LINE(5632)
							arbs = null();
							HX_STACK_LINE(5633)
							pre1 = null();
						}
					}
					HX_STACK_LINE(5636)
					continue;
				}
				HX_STACK_LINE(5638)
				pre1 = arbite;
				HX_STACK_LINE(5639)
				arbite = arbite->next;
				HX_STACK_LINE(5640)
				{
					HX_STACK_LINE(5641)
					bool tmp7 = fst;		HX_STACK_VAR(tmp7,"tmp7");
					HX_STACK_LINE(5641)
					bool tmp8;		HX_STACK_VAR(tmp8,"tmp8");
					HX_STACK_LINE(5641)
					if ((tmp7)){
						HX_STACK_LINE(5641)
						tmp8 = (arbite == null());
					}
					else{
						HX_STACK_LINE(5641)
						tmp8 = false;
					}
					HX_STACK_LINE(5641)
					if ((tmp8)){
						HX_STACK_LINE(5642)
						fst = false;
						HX_STACK_LINE(5644)
						arbs = null();
						HX_STACK_LINE(5645)
						pre1 = null();
					}
				}
			}
		}
	}
return null();
}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Space_obj,prestep,(void))

Void ZPP_Space_obj::warmStart( ){
{
		HX_STACK_FRAME("zpp_nape.space.ZPP_Space","warmStart",0x70dc65a7,"zpp_nape.space.ZPP_Space.warmStart","zpp_nape/space/Space.hx",5651,0x2b65ed03)
		HX_STACK_THIS(this)
		HX_STACK_LINE(5652)
		{
			HX_STACK_LINE(5653)
			::zpp_nape::util::ZNPList_ZPP_FluidArbiter tmp = this->f_arbiters;		HX_STACK_VAR(tmp,"tmp");
			HX_STACK_LINE(5653)
			::zpp_nape::util::ZNPNode_ZPP_FluidArbiter cx_ite = tmp->head;		HX_STACK_VAR(cx_ite,"cx_ite");
			HX_STACK_LINE(5654)
			while((true)){
				HX_STACK_LINE(5654)
				bool tmp1 = (cx_ite != null());		HX_STACK_VAR(tmp1,"tmp1");
				HX_STACK_LINE(5654)
				bool tmp2 = !(tmp1);		HX_STACK_VAR(tmp2,"tmp2");
				HX_STACK_LINE(5654)
				if ((tmp2)){
					HX_STACK_LINE(5654)
					break;
				}
				HX_STACK_LINE(5655)
				::zpp_nape::dynamics::ZPP_FluidArbiter arb = cx_ite->elt;		HX_STACK_VAR(arb,"arb");
				HX_STACK_LINE(5656)
				bool tmp3 = arb->active;		HX_STACK_VAR(tmp3,"tmp3");
				HX_STACK_LINE(5656)
				bool tmp4;		HX_STACK_VAR(tmp4,"tmp4");
				HX_STACK_LINE(5656)
				if ((tmp3)){
					HX_STACK_LINE(5656)
					int tmp5 = arb->immState;		HX_STACK_VAR(tmp5,"tmp5");
					HX_STACK_LINE(5656)
					int tmp6 = ::zpp_nape::util::ZPP_Flags_obj::id_ImmState_ACCEPT;		HX_STACK_VAR(tmp6,"tmp6");
					HX_STACK_LINE(5656)
					int tmp7 = tmp6;		HX_STACK_VAR(tmp7,"tmp7");
					HX_STACK_LINE(5656)
					int tmp8 = (int(tmp5) & int(tmp7));		HX_STACK_VAR(tmp8,"tmp8");
					HX_STACK_LINE(5656)
					int tmp9 = tmp8;		HX_STACK_VAR(tmp9,"tmp9");
					HX_STACK_LINE(5656)
					tmp4 = (tmp9 != (int)0);
				}
				else{
					HX_STACK_LINE(5656)
					tmp4 = false;
				}
				HX_STACK_LINE(5656)
				if ((tmp4)){
					HX_STACK_LINE(5656)
					{
						HX_STACK_LINE(5656)
						Float tmp5 = arb->b1->imass;		HX_STACK_VAR(tmp5,"tmp5");
						HX_STACK_LINE(5656)
						Float t = tmp5;		HX_STACK_VAR(t,"t");
						HX_STACK_LINE(5656)
						Float tmp6 = (arb->dampx * t);		HX_STACK_VAR(tmp6,"tmp6");
						HX_STACK_LINE(5656)
						hx::SubEq(arb->b1->velx,tmp6);
						HX_STACK_LINE(5656)
						Float tmp7 = (arb->dampy * t);		HX_STACK_VAR(tmp7,"tmp7");
						HX_STACK_LINE(5656)
						hx::SubEq(arb->b1->vely,tmp7);
					}
					HX_STACK_LINE(5656)
					{
						HX_STACK_LINE(5656)
						Float tmp5 = arb->b2->imass;		HX_STACK_VAR(tmp5,"tmp5");
						HX_STACK_LINE(5656)
						Float t = tmp5;		HX_STACK_VAR(t,"t");
						HX_STACK_LINE(5656)
						Float tmp6 = (arb->dampx * t);		HX_STACK_VAR(tmp6,"tmp6");
						HX_STACK_LINE(5656)
						hx::AddEq(arb->b2->velx,tmp6);
						HX_STACK_LINE(5656)
						Float tmp7 = (arb->dampy * t);		HX_STACK_VAR(tmp7,"tmp7");
						HX_STACK_LINE(5656)
						hx::AddEq(arb->b2->vely,tmp7);
					}
					HX_STACK_LINE(5656)
					Float tmp5 = arb->b1->iinertia;		HX_STACK_VAR(tmp5,"tmp5");
					HX_STACK_LINE(5656)
					Float tmp6 = (arb->dampy * arb->r1x);		HX_STACK_VAR(tmp6,"tmp6");
					HX_STACK_LINE(5656)
					Float tmp7 = (arb->dampx * arb->r1y);		HX_STACK_VAR(tmp7,"tmp7");
					HX_STACK_LINE(5656)
					Float tmp8 = (tmp6 - tmp7);		HX_STACK_VAR(tmp8,"tmp8");
					HX_STACK_LINE(5656)
					Float tmp9 = (tmp5 * tmp8);		HX_STACK_VAR(tmp9,"tmp9");
					HX_STACK_LINE(5656)
					hx::SubEq(arb->b1->angvel,tmp9);
					HX_STACK_LINE(5656)
					Float tmp10 = arb->b2->iinertia;		HX_STACK_VAR(tmp10,"tmp10");
					HX_STACK_LINE(5656)
					Float tmp11 = (arb->dampy * arb->r2x);		HX_STACK_VAR(tmp11,"tmp11");
					HX_STACK_LINE(5656)
					Float tmp12 = (arb->dampx * arb->r2y);		HX_STACK_VAR(tmp12,"tmp12");
					HX_STACK_LINE(5656)
					Float tmp13 = (tmp11 - tmp12);		HX_STACK_VAR(tmp13,"tmp13");
					HX_STACK_LINE(5656)
					Float tmp14 = (tmp10 * tmp13);		HX_STACK_VAR(tmp14,"tmp14");
					HX_STACK_LINE(5656)
					hx::AddEq(arb->b2->angvel,tmp14);
					HX_STACK_LINE(5656)
					Float tmp15 = arb->adamp;		HX_STACK_VAR(tmp15,"tmp15");
					HX_STACK_LINE(5656)
					Float tmp16 = arb->b1->iinertia;		HX_STACK_VAR(tmp16,"tmp16");
					HX_STACK_LINE(5656)
					Float tmp17 = (tmp15 * tmp16);		HX_STACK_VAR(tmp17,"tmp17");
					HX_STACK_LINE(5656)
					hx::SubEq(arb->b1->angvel,tmp17);
					HX_STACK_LINE(5656)
					Float tmp18 = arb->adamp;		HX_STACK_VAR(tmp18,"tmp18");
					HX_STACK_LINE(5656)
					Float tmp19 = arb->b2->iinertia;		HX_STACK_VAR(tmp19,"tmp19");
					HX_STACK_LINE(5656)
					Float tmp20 = (tmp18 * tmp19);		HX_STACK_VAR(tmp20,"tmp20");
					HX_STACK_LINE(5656)
					hx::AddEq(arb->b2->angvel,tmp20);
				}
				HX_STACK_LINE(5657)
				cx_ite = cx_ite->next;
			}
		}
		HX_STACK_LINE(5660)
		{
			HX_STACK_LINE(5661)
			::zpp_nape::util::ZNPList_ZPP_ColArbiter tmp = this->c_arbiters_false;		HX_STACK_VAR(tmp,"tmp");
			HX_STACK_LINE(5661)
			::zpp_nape::util::ZNPNode_ZPP_ColArbiter arbi = tmp->head;		HX_STACK_VAR(arbi,"arbi");
			HX_STACK_LINE(5662)
			bool fst = true;		HX_STACK_VAR(fst,"fst");
			HX_STACK_LINE(5663)
			bool tmp1 = (arbi == null());		HX_STACK_VAR(tmp1,"tmp1");
			HX_STACK_LINE(5663)
			if ((tmp1)){
				HX_STACK_LINE(5664)
				::zpp_nape::util::ZNPList_ZPP_ColArbiter tmp2 = this->c_arbiters_true;		HX_STACK_VAR(tmp2,"tmp2");
				HX_STACK_LINE(5664)
				arbi = tmp2->head;
				HX_STACK_LINE(5665)
				fst = false;
			}
			HX_STACK_LINE(5667)
			while((true)){
				HX_STACK_LINE(5667)
				bool tmp2 = (arbi != null());		HX_STACK_VAR(tmp2,"tmp2");
				HX_STACK_LINE(5667)
				bool tmp3 = !(tmp2);		HX_STACK_VAR(tmp3,"tmp3");
				HX_STACK_LINE(5667)
				if ((tmp3)){
					HX_STACK_LINE(5667)
					break;
				}
				HX_STACK_LINE(5668)
				::zpp_nape::dynamics::ZPP_ColArbiter arb = arbi->elt;		HX_STACK_VAR(arb,"arb");
				HX_STACK_LINE(5669)
				{
					HX_STACK_LINE(5670)
					bool tmp4 = arb->active;		HX_STACK_VAR(tmp4,"tmp4");
					HX_STACK_LINE(5670)
					bool tmp5;		HX_STACK_VAR(tmp5,"tmp5");
					HX_STACK_LINE(5670)
					if ((tmp4)){
						HX_STACK_LINE(5670)
						int tmp6 = arb->immState;		HX_STACK_VAR(tmp6,"tmp6");
						HX_STACK_LINE(5670)
						int tmp7 = ::zpp_nape::util::ZPP_Flags_obj::id_ImmState_ACCEPT;		HX_STACK_VAR(tmp7,"tmp7");
						HX_STACK_LINE(5670)
						int tmp8 = tmp7;		HX_STACK_VAR(tmp8,"tmp8");
						HX_STACK_LINE(5670)
						int tmp9 = (int(tmp6) & int(tmp8));		HX_STACK_VAR(tmp9,"tmp9");
						HX_STACK_LINE(5670)
						int tmp10 = tmp9;		HX_STACK_VAR(tmp10,"tmp10");
						HX_STACK_LINE(5670)
						tmp5 = (tmp10 != (int)0);
					}
					else{
						HX_STACK_LINE(5670)
						tmp5 = false;
					}
					HX_STACK_LINE(5670)
					if ((tmp5)){
						HX_STACK_LINE(5670)
						{
							HX_STACK_LINE(5670)
							Float tmp6 = arb->nx;		HX_STACK_VAR(tmp6,"tmp6");
							HX_STACK_LINE(5670)
							Float tmp7 = arb->c1->jnAcc;		HX_STACK_VAR(tmp7,"tmp7");
							HX_STACK_LINE(5670)
							Float tmp8 = (tmp6 * tmp7);		HX_STACK_VAR(tmp8,"tmp8");
							HX_STACK_LINE(5670)
							Float tmp9 = arb->ny;		HX_STACK_VAR(tmp9,"tmp9");
							HX_STACK_LINE(5670)
							Float tmp10 = arb->c1->jtAcc;		HX_STACK_VAR(tmp10,"tmp10");
							HX_STACK_LINE(5670)
							Float tmp11 = (tmp9 * tmp10);		HX_STACK_VAR(tmp11,"tmp11");
							HX_STACK_LINE(5670)
							Float tmp12 = (tmp8 - tmp11);		HX_STACK_VAR(tmp12,"tmp12");
							HX_STACK_LINE(5670)
							Float jx = tmp12;		HX_STACK_VAR(jx,"jx");
							HX_STACK_LINE(5670)
							Float tmp13 = arb->ny;		HX_STACK_VAR(tmp13,"tmp13");
							HX_STACK_LINE(5670)
							Float tmp14 = arb->c1->jnAcc;		HX_STACK_VAR(tmp14,"tmp14");
							HX_STACK_LINE(5670)
							Float tmp15 = (tmp13 * tmp14);		HX_STACK_VAR(tmp15,"tmp15");
							HX_STACK_LINE(5670)
							Float tmp16 = arb->nx;		HX_STACK_VAR(tmp16,"tmp16");
							HX_STACK_LINE(5670)
							Float tmp17 = arb->c1->jtAcc;		HX_STACK_VAR(tmp17,"tmp17");
							HX_STACK_LINE(5670)
							Float tmp18 = (tmp16 * tmp17);		HX_STACK_VAR(tmp18,"tmp18");
							HX_STACK_LINE(5670)
							Float tmp19 = (tmp15 + tmp18);		HX_STACK_VAR(tmp19,"tmp19");
							HX_STACK_LINE(5670)
							Float jy = tmp19;		HX_STACK_VAR(jy,"jy");
							HX_STACK_LINE(5670)
							{
								HX_STACK_LINE(5670)
								Float tmp20 = arb->b1->imass;		HX_STACK_VAR(tmp20,"tmp20");
								HX_STACK_LINE(5670)
								Float t = tmp20;		HX_STACK_VAR(t,"t");
								HX_STACK_LINE(5670)
								Float tmp21 = (jx * t);		HX_STACK_VAR(tmp21,"tmp21");
								HX_STACK_LINE(5670)
								hx::SubEq(arb->b1->velx,tmp21);
								HX_STACK_LINE(5670)
								Float tmp22 = (jy * t);		HX_STACK_VAR(tmp22,"tmp22");
								HX_STACK_LINE(5670)
								hx::SubEq(arb->b1->vely,tmp22);
							}
							HX_STACK_LINE(5670)
							Float tmp20 = arb->b1->iinertia;		HX_STACK_VAR(tmp20,"tmp20");
							HX_STACK_LINE(5670)
							Float tmp21 = jy;		HX_STACK_VAR(tmp21,"tmp21");
							HX_STACK_LINE(5670)
							Float tmp22 = arb->c1->r1x;		HX_STACK_VAR(tmp22,"tmp22");
							HX_STACK_LINE(5670)
							Float tmp23 = (tmp21 * tmp22);		HX_STACK_VAR(tmp23,"tmp23");
							HX_STACK_LINE(5670)
							Float tmp24 = jx;		HX_STACK_VAR(tmp24,"tmp24");
							HX_STACK_LINE(5670)
							Float tmp25 = arb->c1->r1y;		HX_STACK_VAR(tmp25,"tmp25");
							HX_STACK_LINE(5670)
							Float tmp26 = (tmp24 * tmp25);		HX_STACK_VAR(tmp26,"tmp26");
							HX_STACK_LINE(5670)
							Float tmp27 = (tmp23 - tmp26);		HX_STACK_VAR(tmp27,"tmp27");
							HX_STACK_LINE(5670)
							Float tmp28 = (tmp20 * tmp27);		HX_STACK_VAR(tmp28,"tmp28");
							HX_STACK_LINE(5670)
							hx::SubEq(arb->b1->angvel,tmp28);
							HX_STACK_LINE(5670)
							{
								HX_STACK_LINE(5670)
								Float tmp29 = arb->b2->imass;		HX_STACK_VAR(tmp29,"tmp29");
								HX_STACK_LINE(5670)
								Float t = tmp29;		HX_STACK_VAR(t,"t");
								HX_STACK_LINE(5670)
								Float tmp30 = (jx * t);		HX_STACK_VAR(tmp30,"tmp30");
								HX_STACK_LINE(5670)
								hx::AddEq(arb->b2->velx,tmp30);
								HX_STACK_LINE(5670)
								Float tmp31 = (jy * t);		HX_STACK_VAR(tmp31,"tmp31");
								HX_STACK_LINE(5670)
								hx::AddEq(arb->b2->vely,tmp31);
							}
							HX_STACK_LINE(5670)
							Float tmp29 = arb->b2->iinertia;		HX_STACK_VAR(tmp29,"tmp29");
							HX_STACK_LINE(5670)
							Float tmp30 = jy;		HX_STACK_VAR(tmp30,"tmp30");
							HX_STACK_LINE(5670)
							Float tmp31 = arb->c1->r2x;		HX_STACK_VAR(tmp31,"tmp31");
							HX_STACK_LINE(5670)
							Float tmp32 = (tmp30 * tmp31);		HX_STACK_VAR(tmp32,"tmp32");
							HX_STACK_LINE(5670)
							Float tmp33 = jx;		HX_STACK_VAR(tmp33,"tmp33");
							HX_STACK_LINE(5670)
							Float tmp34 = arb->c1->r2y;		HX_STACK_VAR(tmp34,"tmp34");
							HX_STACK_LINE(5670)
							Float tmp35 = (tmp33 * tmp34);		HX_STACK_VAR(tmp35,"tmp35");
							HX_STACK_LINE(5670)
							Float tmp36 = (tmp32 - tmp35);		HX_STACK_VAR(tmp36,"tmp36");
							HX_STACK_LINE(5670)
							Float tmp37 = (tmp29 * tmp36);		HX_STACK_VAR(tmp37,"tmp37");
							HX_STACK_LINE(5670)
							hx::AddEq(arb->b2->angvel,tmp37);
						}
						HX_STACK_LINE(5670)
						bool tmp6 = arb->hc2;		HX_STACK_VAR(tmp6,"tmp6");
						HX_STACK_LINE(5670)
						if ((tmp6)){
							HX_STACK_LINE(5670)
							Float tmp7 = arb->nx;		HX_STACK_VAR(tmp7,"tmp7");
							HX_STACK_LINE(5670)
							Float tmp8 = arb->c2->jnAcc;		HX_STACK_VAR(tmp8,"tmp8");
							HX_STACK_LINE(5670)
							Float tmp9 = (tmp7 * tmp8);		HX_STACK_VAR(tmp9,"tmp9");
							HX_STACK_LINE(5670)
							Float tmp10 = arb->ny;		HX_STACK_VAR(tmp10,"tmp10");
							HX_STACK_LINE(5670)
							Float tmp11 = arb->c2->jtAcc;		HX_STACK_VAR(tmp11,"tmp11");
							HX_STACK_LINE(5670)
							Float tmp12 = (tmp10 * tmp11);		HX_STACK_VAR(tmp12,"tmp12");
							HX_STACK_LINE(5670)
							Float tmp13 = (tmp9 - tmp12);		HX_STACK_VAR(tmp13,"tmp13");
							HX_STACK_LINE(5670)
							Float jx = tmp13;		HX_STACK_VAR(jx,"jx");
							HX_STACK_LINE(5670)
							Float tmp14 = arb->ny;		HX_STACK_VAR(tmp14,"tmp14");
							HX_STACK_LINE(5670)
							Float tmp15 = arb->c2->jnAcc;		HX_STACK_VAR(tmp15,"tmp15");
							HX_STACK_LINE(5670)
							Float tmp16 = (tmp14 * tmp15);		HX_STACK_VAR(tmp16,"tmp16");
							HX_STACK_LINE(5670)
							Float tmp17 = arb->nx;		HX_STACK_VAR(tmp17,"tmp17");
							HX_STACK_LINE(5670)
							Float tmp18 = arb->c2->jtAcc;		HX_STACK_VAR(tmp18,"tmp18");
							HX_STACK_LINE(5670)
							Float tmp19 = (tmp17 * tmp18);		HX_STACK_VAR(tmp19,"tmp19");
							HX_STACK_LINE(5670)
							Float tmp20 = (tmp16 + tmp19);		HX_STACK_VAR(tmp20,"tmp20");
							HX_STACK_LINE(5670)
							Float jy = tmp20;		HX_STACK_VAR(jy,"jy");
							HX_STACK_LINE(5670)
							{
								HX_STACK_LINE(5670)
								Float tmp21 = arb->b1->imass;		HX_STACK_VAR(tmp21,"tmp21");
								HX_STACK_LINE(5670)
								Float t = tmp21;		HX_STACK_VAR(t,"t");
								HX_STACK_LINE(5670)
								Float tmp22 = (jx * t);		HX_STACK_VAR(tmp22,"tmp22");
								HX_STACK_LINE(5670)
								hx::SubEq(arb->b1->velx,tmp22);
								HX_STACK_LINE(5670)
								Float tmp23 = (jy * t);		HX_STACK_VAR(tmp23,"tmp23");
								HX_STACK_LINE(5670)
								hx::SubEq(arb->b1->vely,tmp23);
							}
							HX_STACK_LINE(5670)
							Float tmp21 = arb->b1->iinertia;		HX_STACK_VAR(tmp21,"tmp21");
							HX_STACK_LINE(5670)
							Float tmp22 = jy;		HX_STACK_VAR(tmp22,"tmp22");
							HX_STACK_LINE(5670)
							Float tmp23 = arb->c2->r1x;		HX_STACK_VAR(tmp23,"tmp23");
							HX_STACK_LINE(5670)
							Float tmp24 = (tmp22 * tmp23);		HX_STACK_VAR(tmp24,"tmp24");
							HX_STACK_LINE(5670)
							Float tmp25 = jx;		HX_STACK_VAR(tmp25,"tmp25");
							HX_STACK_LINE(5670)
							Float tmp26 = arb->c2->r1y;		HX_STACK_VAR(tmp26,"tmp26");
							HX_STACK_LINE(5670)
							Float tmp27 = (tmp25 * tmp26);		HX_STACK_VAR(tmp27,"tmp27");
							HX_STACK_LINE(5670)
							Float tmp28 = (tmp24 - tmp27);		HX_STACK_VAR(tmp28,"tmp28");
							HX_STACK_LINE(5670)
							Float tmp29 = (tmp21 * tmp28);		HX_STACK_VAR(tmp29,"tmp29");
							HX_STACK_LINE(5670)
							hx::SubEq(arb->b1->angvel,tmp29);
							HX_STACK_LINE(5670)
							{
								HX_STACK_LINE(5670)
								Float tmp30 = arb->b2->imass;		HX_STACK_VAR(tmp30,"tmp30");
								HX_STACK_LINE(5670)
								Float t = tmp30;		HX_STACK_VAR(t,"t");
								HX_STACK_LINE(5670)
								Float tmp31 = (jx * t);		HX_STACK_VAR(tmp31,"tmp31");
								HX_STACK_LINE(5670)
								hx::AddEq(arb->b2->velx,tmp31);
								HX_STACK_LINE(5670)
								Float tmp32 = (jy * t);		HX_STACK_VAR(tmp32,"tmp32");
								HX_STACK_LINE(5670)
								hx::AddEq(arb->b2->vely,tmp32);
							}
							HX_STACK_LINE(5670)
							Float tmp30 = arb->b2->iinertia;		HX_STACK_VAR(tmp30,"tmp30");
							HX_STACK_LINE(5670)
							Float tmp31 = jy;		HX_STACK_VAR(tmp31,"tmp31");
							HX_STACK_LINE(5670)
							Float tmp32 = arb->c2->r2x;		HX_STACK_VAR(tmp32,"tmp32");
							HX_STACK_LINE(5670)
							Float tmp33 = (tmp31 * tmp32);		HX_STACK_VAR(tmp33,"tmp33");
							HX_STACK_LINE(5670)
							Float tmp34 = jx;		HX_STACK_VAR(tmp34,"tmp34");
							HX_STACK_LINE(5670)
							Float tmp35 = arb->c2->r2y;		HX_STACK_VAR(tmp35,"tmp35");
							HX_STACK_LINE(5670)
							Float tmp36 = (tmp34 * tmp35);		HX_STACK_VAR(tmp36,"tmp36");
							HX_STACK_LINE(5670)
							Float tmp37 = (tmp33 - tmp36);		HX_STACK_VAR(tmp37,"tmp37");
							HX_STACK_LINE(5670)
							Float tmp38 = (tmp30 * tmp37);		HX_STACK_VAR(tmp38,"tmp38");
							HX_STACK_LINE(5670)
							hx::AddEq(arb->b2->angvel,tmp38);
						}
						HX_STACK_LINE(5670)
						Float tmp7 = arb->jrAcc;		HX_STACK_VAR(tmp7,"tmp7");
						HX_STACK_LINE(5670)
						Float tmp8 = arb->b2->iinertia;		HX_STACK_VAR(tmp8,"tmp8");
						HX_STACK_LINE(5670)
						Float tmp9 = (tmp7 * tmp8);		HX_STACK_VAR(tmp9,"tmp9");
						HX_STACK_LINE(5670)
						hx::AddEq(arb->b2->angvel,tmp9);
						HX_STACK_LINE(5670)
						Float tmp10 = arb->jrAcc;		HX_STACK_VAR(tmp10,"tmp10");
						HX_STACK_LINE(5670)
						Float tmp11 = arb->b1->iinertia;		HX_STACK_VAR(tmp11,"tmp11");
						HX_STACK_LINE(5670)
						Float tmp12 = (tmp10 * tmp11);		HX_STACK_VAR(tmp12,"tmp12");
						HX_STACK_LINE(5670)
						hx::SubEq(arb->b1->angvel,tmp12);
					}
				}
				HX_STACK_LINE(5672)
				arbi = arbi->next;
				HX_STACK_LINE(5673)
				bool tmp4 = fst;		HX_STACK_VAR(tmp4,"tmp4");
				HX_STACK_LINE(5673)
				bool tmp5;		HX_STACK_VAR(tmp5,"tmp5");
				HX_STACK_LINE(5673)
				if ((tmp4)){
					HX_STACK_LINE(5673)
					tmp5 = (arbi == null());
				}
				else{
					HX_STACK_LINE(5673)
					tmp5 = false;
				}
				HX_STACK_LINE(5673)
				if ((tmp5)){
					HX_STACK_LINE(5674)
					::zpp_nape::util::ZNPList_ZPP_ColArbiter tmp6 = this->c_arbiters_true;		HX_STACK_VAR(tmp6,"tmp6");
					HX_STACK_LINE(5674)
					arbi = tmp6->head;
					HX_STACK_LINE(5675)
					fst = false;
				}
			}
		}
		HX_STACK_LINE(5679)
		{
			HX_STACK_LINE(5680)
			::zpp_nape::util::ZNPList_ZPP_Constraint tmp = this->live_constraints;		HX_STACK_VAR(tmp,"tmp");
			HX_STACK_LINE(5680)
			::zpp_nape::util::ZNPNode_ZPP_Constraint cx_ite = tmp->head;		HX_STACK_VAR(cx_ite,"cx_ite");
			HX_STACK_LINE(5681)
			while((true)){
				HX_STACK_LINE(5681)
				bool tmp1 = (cx_ite != null());		HX_STACK_VAR(tmp1,"tmp1");
				HX_STACK_LINE(5681)
				bool tmp2 = !(tmp1);		HX_STACK_VAR(tmp2,"tmp2");
				HX_STACK_LINE(5681)
				if ((tmp2)){
					HX_STACK_LINE(5681)
					break;
				}
				HX_STACK_LINE(5682)
				::zpp_nape::constraint::ZPP_Constraint con = cx_ite->elt;		HX_STACK_VAR(con,"con");
				HX_STACK_LINE(5683)
				con->warmStart();
				HX_STACK_LINE(5684)
				cx_ite = cx_ite->next;
			}
		}
	}
return null();
}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Space_obj,warmStart,(void))

Void ZPP_Space_obj::iterateVel( int times){
{
		HX_STACK_FRAME("zpp_nape.space.ZPP_Space","iterateVel",0xf7beeb79,"zpp_nape.space.ZPP_Space.iterateVel","zpp_nape/space/Space.hx",5689,0x2b65ed03)
		HX_STACK_THIS(this)
		HX_STACK_ARG(times,"times")
		HX_STACK_LINE(5689)
		int _g = (int)0;		HX_STACK_VAR(_g,"_g");
		HX_STACK_LINE(5689)
		while((true)){
			HX_STACK_LINE(5689)
			bool tmp = (_g < times);		HX_STACK_VAR(tmp,"tmp");
			HX_STACK_LINE(5689)
			bool tmp1 = !(tmp);		HX_STACK_VAR(tmp1,"tmp1");
			HX_STACK_LINE(5689)
			if ((tmp1)){
				HX_STACK_LINE(5689)
				break;
			}
			HX_STACK_LINE(5689)
			int tmp2 = (_g)++;		HX_STACK_VAR(tmp2,"tmp2");
			HX_STACK_LINE(5689)
			int i = tmp2;		HX_STACK_VAR(i,"i");
			HX_STACK_LINE(5690)
			{
				HX_STACK_LINE(5691)
				::zpp_nape::util::ZNPList_ZPP_FluidArbiter tmp3 = this->f_arbiters;		HX_STACK_VAR(tmp3,"tmp3");
				HX_STACK_LINE(5691)
				::zpp_nape::util::ZNPNode_ZPP_FluidArbiter cx_ite = tmp3->head;		HX_STACK_VAR(cx_ite,"cx_ite");
				HX_STACK_LINE(5692)
				while((true)){
					HX_STACK_LINE(5692)
					bool tmp4 = (cx_ite != null());		HX_STACK_VAR(tmp4,"tmp4");
					HX_STACK_LINE(5692)
					bool tmp5 = !(tmp4);		HX_STACK_VAR(tmp5,"tmp5");
					HX_STACK_LINE(5692)
					if ((tmp5)){
						HX_STACK_LINE(5692)
						break;
					}
					HX_STACK_LINE(5693)
					::zpp_nape::dynamics::ZPP_FluidArbiter arb = cx_ite->elt;		HX_STACK_VAR(arb,"arb");
					HX_STACK_LINE(5694)
					bool tmp6 = arb->active;		HX_STACK_VAR(tmp6,"tmp6");
					HX_STACK_LINE(5694)
					bool tmp7;		HX_STACK_VAR(tmp7,"tmp7");
					HX_STACK_LINE(5694)
					if ((tmp6)){
						HX_STACK_LINE(5694)
						int tmp8 = arb->immState;		HX_STACK_VAR(tmp8,"tmp8");
						HX_STACK_LINE(5694)
						int tmp9 = ::zpp_nape::util::ZPP_Flags_obj::id_ImmState_ACCEPT;		HX_STACK_VAR(tmp9,"tmp9");
						HX_STACK_LINE(5694)
						int tmp10 = tmp9;		HX_STACK_VAR(tmp10,"tmp10");
						HX_STACK_LINE(5694)
						int tmp11 = (int(tmp8) & int(tmp10));		HX_STACK_VAR(tmp11,"tmp11");
						HX_STACK_LINE(5694)
						int tmp12 = tmp11;		HX_STACK_VAR(tmp12,"tmp12");
						HX_STACK_LINE(5694)
						tmp7 = (tmp12 != (int)0);
					}
					else{
						HX_STACK_LINE(5694)
						tmp7 = false;
					}
					HX_STACK_LINE(5694)
					if ((tmp7)){
						HX_STACK_LINE(5694)
						bool tmp8 = arb->nodrag;		HX_STACK_VAR(tmp8,"tmp8");
						HX_STACK_LINE(5694)
						bool tmp9 = !(tmp8);		HX_STACK_VAR(tmp9,"tmp9");
						HX_STACK_LINE(5694)
						if ((tmp9)){
							HX_STACK_LINE(5694)
							Float tmp10 = arb->b1->angvel;		HX_STACK_VAR(tmp10,"tmp10");
							HX_STACK_LINE(5694)
							Float tmp11 = arb->b1->kinangvel;		HX_STACK_VAR(tmp11,"tmp11");
							HX_STACK_LINE(5694)
							Float tmp12 = (tmp10 + tmp11);		HX_STACK_VAR(tmp12,"tmp12");
							HX_STACK_LINE(5694)
							Float w1 = tmp12;		HX_STACK_VAR(w1,"w1");
							HX_STACK_LINE(5694)
							Float tmp13 = arb->b2->angvel;		HX_STACK_VAR(tmp13,"tmp13");
							HX_STACK_LINE(5694)
							Float tmp14 = arb->b2->kinangvel;		HX_STACK_VAR(tmp14,"tmp14");
							HX_STACK_LINE(5694)
							Float tmp15 = (tmp13 + tmp14);		HX_STACK_VAR(tmp15,"tmp15");
							HX_STACK_LINE(5694)
							Float w2 = tmp15;		HX_STACK_VAR(w2,"w2");
							HX_STACK_LINE(5694)
							Float tmp16 = arb->b1->velx;		HX_STACK_VAR(tmp16,"tmp16");
							HX_STACK_LINE(5694)
							Float tmp17 = arb->b1->kinvelx;		HX_STACK_VAR(tmp17,"tmp17");
							HX_STACK_LINE(5694)
							Float tmp18 = (tmp16 + tmp17);		HX_STACK_VAR(tmp18,"tmp18");
							HX_STACK_LINE(5694)
							Float tmp19 = (arb->r1y * w1);		HX_STACK_VAR(tmp19,"tmp19");
							HX_STACK_LINE(5694)
							Float tmp20 = (tmp18 - tmp19);		HX_STACK_VAR(tmp20,"tmp20");
							HX_STACK_LINE(5694)
							Float tmp21 = arb->b2->velx;		HX_STACK_VAR(tmp21,"tmp21");
							HX_STACK_LINE(5694)
							Float tmp22 = arb->b2->kinvelx;		HX_STACK_VAR(tmp22,"tmp22");
							HX_STACK_LINE(5694)
							Float tmp23 = (tmp21 + tmp22);		HX_STACK_VAR(tmp23,"tmp23");
							HX_STACK_LINE(5694)
							Float tmp24 = (arb->r2y * w2);		HX_STACK_VAR(tmp24,"tmp24");
							HX_STACK_LINE(5694)
							Float tmp25 = (tmp23 - tmp24);		HX_STACK_VAR(tmp25,"tmp25");
							HX_STACK_LINE(5694)
							Float tmp26 = (tmp20 - tmp25);		HX_STACK_VAR(tmp26,"tmp26");
							HX_STACK_LINE(5694)
							Float jx = tmp26;		HX_STACK_VAR(jx,"jx");
							HX_STACK_LINE(5694)
							Float tmp27 = arb->b1->vely;		HX_STACK_VAR(tmp27,"tmp27");
							HX_STACK_LINE(5694)
							Float tmp28 = arb->b1->kinvely;		HX_STACK_VAR(tmp28,"tmp28");
							HX_STACK_LINE(5694)
							Float tmp29 = (tmp27 + tmp28);		HX_STACK_VAR(tmp29,"tmp29");
							HX_STACK_LINE(5694)
							Float tmp30 = (arb->r1x * w1);		HX_STACK_VAR(tmp30,"tmp30");
							HX_STACK_LINE(5694)
							Float tmp31 = (tmp29 + tmp30);		HX_STACK_VAR(tmp31,"tmp31");
							HX_STACK_LINE(5694)
							Float tmp32 = arb->b2->vely;		HX_STACK_VAR(tmp32,"tmp32");
							HX_STACK_LINE(5694)
							Float tmp33 = arb->b2->kinvely;		HX_STACK_VAR(tmp33,"tmp33");
							HX_STACK_LINE(5694)
							Float tmp34 = (tmp32 + tmp33);		HX_STACK_VAR(tmp34,"tmp34");
							HX_STACK_LINE(5694)
							Float tmp35 = (arb->r2x * w2);		HX_STACK_VAR(tmp35,"tmp35");
							HX_STACK_LINE(5694)
							Float tmp36 = (tmp34 + tmp35);		HX_STACK_VAR(tmp36,"tmp36");
							HX_STACK_LINE(5694)
							Float tmp37 = (tmp31 - tmp36);		HX_STACK_VAR(tmp37,"tmp37");
							HX_STACK_LINE(5694)
							Float jy = tmp37;		HX_STACK_VAR(jy,"jy");
							HX_STACK_LINE(5694)
							{
								HX_STACK_LINE(5694)
								Float tmp38 = (arb->vMassa * jx);		HX_STACK_VAR(tmp38,"tmp38");
								HX_STACK_LINE(5694)
								Float tmp39 = (arb->vMassb * jy);		HX_STACK_VAR(tmp39,"tmp39");
								HX_STACK_LINE(5694)
								Float tmp40 = (tmp38 + tmp39);		HX_STACK_VAR(tmp40,"tmp40");
								HX_STACK_LINE(5694)
								Float t = tmp40;		HX_STACK_VAR(t,"t");
								HX_STACK_LINE(5694)
								Float tmp41 = (arb->vMassb * jx);		HX_STACK_VAR(tmp41,"tmp41");
								HX_STACK_LINE(5694)
								Float tmp42 = (arb->vMassc * jy);		HX_STACK_VAR(tmp42,"tmp42");
								HX_STACK_LINE(5694)
								Float tmp43 = (tmp41 + tmp42);		HX_STACK_VAR(tmp43,"tmp43");
								HX_STACK_LINE(5694)
								jy = tmp43;
								HX_STACK_LINE(5694)
								jx = t;
							}
							HX_STACK_LINE(5694)
							{
								HX_STACK_LINE(5694)
								Float t = arb->lgamma;		HX_STACK_VAR(t,"t");
								HX_STACK_LINE(5694)
								Float tmp38 = (arb->dampx * t);		HX_STACK_VAR(tmp38,"tmp38");
								HX_STACK_LINE(5694)
								hx::SubEq(jx,tmp38);
								HX_STACK_LINE(5694)
								Float tmp39 = (arb->dampy * t);		HX_STACK_VAR(tmp39,"tmp39");
								HX_STACK_LINE(5694)
								hx::SubEq(jy,tmp39);
							}
							HX_STACK_LINE(5694)
							{
								HX_STACK_LINE(5694)
								Float t = ((Float)1.0);		HX_STACK_VAR(t,"t");
								HX_STACK_LINE(5694)
								Float tmp38 = (jx * t);		HX_STACK_VAR(tmp38,"tmp38");
								HX_STACK_LINE(5694)
								hx::AddEq(arb->dampx,tmp38);
								HX_STACK_LINE(5694)
								Float tmp39 = (jy * t);		HX_STACK_VAR(tmp39,"tmp39");
								HX_STACK_LINE(5694)
								hx::AddEq(arb->dampy,tmp39);
							}
							HX_STACK_LINE(5694)
							{
								HX_STACK_LINE(5694)
								Float tmp38 = arb->b1->imass;		HX_STACK_VAR(tmp38,"tmp38");
								HX_STACK_LINE(5694)
								Float t = tmp38;		HX_STACK_VAR(t,"t");
								HX_STACK_LINE(5694)
								Float tmp39 = (jx * t);		HX_STACK_VAR(tmp39,"tmp39");
								HX_STACK_LINE(5694)
								hx::SubEq(arb->b1->velx,tmp39);
								HX_STACK_LINE(5694)
								Float tmp40 = (jy * t);		HX_STACK_VAR(tmp40,"tmp40");
								HX_STACK_LINE(5694)
								hx::SubEq(arb->b1->vely,tmp40);
							}
							HX_STACK_LINE(5694)
							{
								HX_STACK_LINE(5694)
								Float tmp38 = arb->b2->imass;		HX_STACK_VAR(tmp38,"tmp38");
								HX_STACK_LINE(5694)
								Float t = tmp38;		HX_STACK_VAR(t,"t");
								HX_STACK_LINE(5694)
								Float tmp39 = (jx * t);		HX_STACK_VAR(tmp39,"tmp39");
								HX_STACK_LINE(5694)
								hx::AddEq(arb->b2->velx,tmp39);
								HX_STACK_LINE(5694)
								Float tmp40 = (jy * t);		HX_STACK_VAR(tmp40,"tmp40");
								HX_STACK_LINE(5694)
								hx::AddEq(arb->b2->vely,tmp40);
							}
							HX_STACK_LINE(5694)
							Float tmp38 = arb->b1->iinertia;		HX_STACK_VAR(tmp38,"tmp38");
							HX_STACK_LINE(5694)
							Float tmp39 = (jy * arb->r1x);		HX_STACK_VAR(tmp39,"tmp39");
							HX_STACK_LINE(5694)
							Float tmp40 = (jx * arb->r1y);		HX_STACK_VAR(tmp40,"tmp40");
							HX_STACK_LINE(5694)
							Float tmp41 = (tmp39 - tmp40);		HX_STACK_VAR(tmp41,"tmp41");
							HX_STACK_LINE(5694)
							Float tmp42 = (tmp38 * tmp41);		HX_STACK_VAR(tmp42,"tmp42");
							HX_STACK_LINE(5694)
							hx::SubEq(arb->b1->angvel,tmp42);
							HX_STACK_LINE(5694)
							Float tmp43 = arb->b2->iinertia;		HX_STACK_VAR(tmp43,"tmp43");
							HX_STACK_LINE(5694)
							Float tmp44 = (jy * arb->r2x);		HX_STACK_VAR(tmp44,"tmp44");
							HX_STACK_LINE(5694)
							Float tmp45 = (jx * arb->r2y);		HX_STACK_VAR(tmp45,"tmp45");
							HX_STACK_LINE(5694)
							Float tmp46 = (tmp44 - tmp45);		HX_STACK_VAR(tmp46,"tmp46");
							HX_STACK_LINE(5694)
							Float tmp47 = (tmp43 * tmp46);		HX_STACK_VAR(tmp47,"tmp47");
							HX_STACK_LINE(5694)
							hx::AddEq(arb->b2->angvel,tmp47);
							HX_STACK_LINE(5694)
							Float tmp48 = (w1 - w2);		HX_STACK_VAR(tmp48,"tmp48");
							HX_STACK_LINE(5694)
							Float tmp49 = arb->wMass;		HX_STACK_VAR(tmp49,"tmp49");
							HX_STACK_LINE(5694)
							Float tmp50 = (tmp48 * tmp49);		HX_STACK_VAR(tmp50,"tmp50");
							HX_STACK_LINE(5694)
							Float tmp51 = (arb->adamp * arb->agamma);		HX_STACK_VAR(tmp51,"tmp51");
							HX_STACK_LINE(5694)
							Float tmp52 = (tmp50 - tmp51);		HX_STACK_VAR(tmp52,"tmp52");
							HX_STACK_LINE(5694)
							Float j_damp = tmp52;		HX_STACK_VAR(j_damp,"j_damp");
							HX_STACK_LINE(5694)
							hx::AddEq(arb->adamp,j_damp);
							HX_STACK_LINE(5694)
							Float tmp53 = j_damp;		HX_STACK_VAR(tmp53,"tmp53");
							HX_STACK_LINE(5694)
							Float tmp54 = arb->b1->iinertia;		HX_STACK_VAR(tmp54,"tmp54");
							HX_STACK_LINE(5694)
							Float tmp55 = (tmp53 * tmp54);		HX_STACK_VAR(tmp55,"tmp55");
							HX_STACK_LINE(5694)
							hx::SubEq(arb->b1->angvel,tmp55);
							HX_STACK_LINE(5694)
							Float tmp56 = j_damp;		HX_STACK_VAR(tmp56,"tmp56");
							HX_STACK_LINE(5694)
							Float tmp57 = arb->b2->iinertia;		HX_STACK_VAR(tmp57,"tmp57");
							HX_STACK_LINE(5694)
							Float tmp58 = (tmp56 * tmp57);		HX_STACK_VAR(tmp58,"tmp58");
							HX_STACK_LINE(5694)
							hx::AddEq(arb->b2->angvel,tmp58);
						}
					}
					HX_STACK_LINE(5695)
					cx_ite = cx_ite->next;
				}
			}
			HX_STACK_LINE(5698)
			::zpp_nape::util::ZNPNode_ZPP_Constraint pre = null();		HX_STACK_VAR(pre,"pre");
			HX_STACK_LINE(5699)
			{
				HX_STACK_LINE(5700)
				::zpp_nape::util::ZNPList_ZPP_Constraint tmp3 = this->live_constraints;		HX_STACK_VAR(tmp3,"tmp3");
				HX_STACK_LINE(5700)
				::zpp_nape::util::ZNPNode_ZPP_Constraint cx_ite = tmp3->head;		HX_STACK_VAR(cx_ite,"cx_ite");
				HX_STACK_LINE(5701)
				while((true)){
					HX_STACK_LINE(5701)
					bool tmp4 = (cx_ite != null());		HX_STACK_VAR(tmp4,"tmp4");
					HX_STACK_LINE(5701)
					bool tmp5 = !(tmp4);		HX_STACK_VAR(tmp5,"tmp5");
					HX_STACK_LINE(5701)
					if ((tmp5)){
						HX_STACK_LINE(5701)
						break;
					}
					HX_STACK_LINE(5702)
					::zpp_nape::constraint::ZPP_Constraint con = cx_ite->elt;		HX_STACK_VAR(con,"con");
					HX_STACK_LINE(5703)
					{
						HX_STACK_LINE(5704)
						bool tmp6 = con->applyImpulseVel();		HX_STACK_VAR(tmp6,"tmp6");
						HX_STACK_LINE(5704)
						if ((tmp6)){
							HX_STACK_LINE(5705)
							::zpp_nape::util::ZNPList_ZPP_Constraint tmp7 = this->live_constraints;		HX_STACK_VAR(tmp7,"tmp7");
							HX_STACK_LINE(5705)
							::zpp_nape::util::ZNPNode_ZPP_Constraint tmp8 = pre;		HX_STACK_VAR(tmp8,"tmp8");
							HX_STACK_LINE(5705)
							::zpp_nape::util::ZNPNode_ZPP_Constraint tmp9 = tmp7->erase(tmp8);		HX_STACK_VAR(tmp9,"tmp9");
							HX_STACK_LINE(5705)
							cx_ite = tmp9;
							HX_STACK_LINE(5706)
							con->broken();
							HX_STACK_LINE(5707)
							::zpp_nape::constraint::ZPP_Constraint tmp10 = con;		HX_STACK_VAR(tmp10,"tmp10");
							HX_STACK_LINE(5707)
							this->constraintCbBreak(tmp10);
							HX_STACK_LINE(5708)
							bool tmp11 = con->removeOnBreak;		HX_STACK_VAR(tmp11,"tmp11");
							HX_STACK_LINE(5708)
							if ((tmp11)){
								HX_STACK_LINE(5709)
								con->component->sleeping = true;
								HX_STACK_LINE(5710)
								this->midstep = false;
								HX_STACK_LINE(5711)
								bool tmp12 = (con->compound != null());		HX_STACK_VAR(tmp12,"tmp12");
								HX_STACK_LINE(5711)
								if ((tmp12)){
									HX_STACK_LINE(5711)
									::nape::constraint::ConstraintList tmp13 = con->compound->wrap_constraints;		HX_STACK_VAR(tmp13,"tmp13");
									HX_STACK_LINE(5711)
									::nape::constraint::Constraint tmp14 = con->outer;		HX_STACK_VAR(tmp14,"tmp14");
									HX_STACK_LINE(5711)
									tmp13->remove(tmp14);
								}
								else{
									HX_STACK_LINE(5712)
									::nape::constraint::ConstraintList tmp13 = this->wrap_constraints;		HX_STACK_VAR(tmp13,"tmp13");
									HX_STACK_LINE(5712)
									::nape::constraint::Constraint tmp14 = con->outer;		HX_STACK_VAR(tmp14,"tmp14");
									HX_STACK_LINE(5712)
									tmp13->remove(tmp14);
								}
								HX_STACK_LINE(5713)
								this->midstep = true;
							}
							else{
								HX_STACK_LINE(5715)
								con->active = false;
							}
							HX_STACK_LINE(5716)
							con->clearcache();
							HX_STACK_LINE(5717)
							continue;
						}
						HX_STACK_LINE(5719)
						pre = cx_ite;
					}
					HX_STACK_LINE(5721)
					cx_ite = cx_ite->next;
				}
			}
			HX_STACK_LINE(5724)
			{
				HX_STACK_LINE(5725)
				::zpp_nape::util::ZNPList_ZPP_ColArbiter tmp3 = this->c_arbiters_false;		HX_STACK_VAR(tmp3,"tmp3");
				HX_STACK_LINE(5725)
				::zpp_nape::util::ZNPNode_ZPP_ColArbiter arbi = tmp3->head;		HX_STACK_VAR(arbi,"arbi");
				HX_STACK_LINE(5726)
				bool fst = true;		HX_STACK_VAR(fst,"fst");
				HX_STACK_LINE(5727)
				bool tmp4 = (arbi == null());		HX_STACK_VAR(tmp4,"tmp4");
				HX_STACK_LINE(5727)
				if ((tmp4)){
					HX_STACK_LINE(5728)
					::zpp_nape::util::ZNPList_ZPP_ColArbiter tmp5 = this->c_arbiters_true;		HX_STACK_VAR(tmp5,"tmp5");
					HX_STACK_LINE(5728)
					arbi = tmp5->head;
					HX_STACK_LINE(5729)
					fst = false;
				}
				HX_STACK_LINE(5731)
				while((true)){
					HX_STACK_LINE(5731)
					bool tmp5 = (arbi != null());		HX_STACK_VAR(tmp5,"tmp5");
					HX_STACK_LINE(5731)
					bool tmp6 = !(tmp5);		HX_STACK_VAR(tmp6,"tmp6");
					HX_STACK_LINE(5731)
					if ((tmp6)){
						HX_STACK_LINE(5731)
						break;
					}
					HX_STACK_LINE(5732)
					::zpp_nape::dynamics::ZPP_ColArbiter arb = arbi->elt;		HX_STACK_VAR(arb,"arb");
					HX_STACK_LINE(5733)
					{
						HX_STACK_LINE(5734)
						bool tmp7 = arb->active;		HX_STACK_VAR(tmp7,"tmp7");
						HX_STACK_LINE(5734)
						bool tmp8;		HX_STACK_VAR(tmp8,"tmp8");
						HX_STACK_LINE(5734)
						if ((tmp7)){
							HX_STACK_LINE(5734)
							int tmp9 = arb->immState;		HX_STACK_VAR(tmp9,"tmp9");
							HX_STACK_LINE(5734)
							int tmp10 = ::zpp_nape::util::ZPP_Flags_obj::id_ImmState_ACCEPT;		HX_STACK_VAR(tmp10,"tmp10");
							HX_STACK_LINE(5734)
							int tmp11 = tmp10;		HX_STACK_VAR(tmp11,"tmp11");
							HX_STACK_LINE(5734)
							int tmp12 = (int(tmp9) & int(tmp11));		HX_STACK_VAR(tmp12,"tmp12");
							HX_STACK_LINE(5734)
							int tmp13 = tmp12;		HX_STACK_VAR(tmp13,"tmp13");
							HX_STACK_LINE(5734)
							tmp8 = (tmp13 != (int)0);
						}
						else{
							HX_STACK_LINE(5734)
							tmp8 = false;
						}
						HX_STACK_LINE(5734)
						if ((tmp8)){
							HX_STACK_LINE(5734)
							Float jx;		HX_STACK_VAR(jx,"jx");
							HX_STACK_LINE(5734)
							Float jy;		HX_STACK_VAR(jy,"jy");
							HX_STACK_LINE(5734)
							Float j;		HX_STACK_VAR(j,"j");
							HX_STACK_LINE(5734)
							Float jMax;		HX_STACK_VAR(jMax,"jMax");
							HX_STACK_LINE(5734)
							Float jOld;		HX_STACK_VAR(jOld,"jOld");
							HX_STACK_LINE(5734)
							Float cjAcc;		HX_STACK_VAR(cjAcc,"cjAcc");
							HX_STACK_LINE(5734)
							Float tmp9 = arb->k1x;		HX_STACK_VAR(tmp9,"tmp9");
							HX_STACK_LINE(5734)
							Float tmp10 = arb->b2->velx;		HX_STACK_VAR(tmp10,"tmp10");
							HX_STACK_LINE(5734)
							Float tmp11 = (tmp9 + tmp10);		HX_STACK_VAR(tmp11,"tmp11");
							HX_STACK_LINE(5734)
							Float tmp12 = arb->c1->r2y;		HX_STACK_VAR(tmp12,"tmp12");
							HX_STACK_LINE(5734)
							Float tmp13 = arb->b2->angvel;		HX_STACK_VAR(tmp13,"tmp13");
							HX_STACK_LINE(5734)
							Float tmp14 = (tmp12 * tmp13);		HX_STACK_VAR(tmp14,"tmp14");
							HX_STACK_LINE(5734)
							Float tmp15 = (tmp11 - tmp14);		HX_STACK_VAR(tmp15,"tmp15");
							HX_STACK_LINE(5734)
							Float tmp16 = arb->b1->velx;		HX_STACK_VAR(tmp16,"tmp16");
							HX_STACK_LINE(5734)
							Float tmp17 = arb->c1->r1y;		HX_STACK_VAR(tmp17,"tmp17");
							HX_STACK_LINE(5734)
							Float tmp18 = arb->b1->angvel;		HX_STACK_VAR(tmp18,"tmp18");
							HX_STACK_LINE(5734)
							Float tmp19 = (tmp17 * tmp18);		HX_STACK_VAR(tmp19,"tmp19");
							HX_STACK_LINE(5734)
							Float tmp20 = (tmp16 - tmp19);		HX_STACK_VAR(tmp20,"tmp20");
							HX_STACK_LINE(5734)
							Float tmp21 = (tmp15 - tmp20);		HX_STACK_VAR(tmp21,"tmp21");
							HX_STACK_LINE(5734)
							Float v1x = tmp21;		HX_STACK_VAR(v1x,"v1x");
							HX_STACK_LINE(5734)
							Float tmp22 = arb->k1y;		HX_STACK_VAR(tmp22,"tmp22");
							HX_STACK_LINE(5734)
							Float tmp23 = arb->b2->vely;		HX_STACK_VAR(tmp23,"tmp23");
							HX_STACK_LINE(5734)
							Float tmp24 = (tmp22 + tmp23);		HX_STACK_VAR(tmp24,"tmp24");
							HX_STACK_LINE(5734)
							Float tmp25 = arb->c1->r2x;		HX_STACK_VAR(tmp25,"tmp25");
							HX_STACK_LINE(5734)
							Float tmp26 = arb->b2->angvel;		HX_STACK_VAR(tmp26,"tmp26");
							HX_STACK_LINE(5734)
							Float tmp27 = (tmp25 * tmp26);		HX_STACK_VAR(tmp27,"tmp27");
							HX_STACK_LINE(5734)
							Float tmp28 = (tmp24 + tmp27);		HX_STACK_VAR(tmp28,"tmp28");
							HX_STACK_LINE(5734)
							Float tmp29 = arb->b1->vely;		HX_STACK_VAR(tmp29,"tmp29");
							HX_STACK_LINE(5734)
							Float tmp30 = arb->c1->r1x;		HX_STACK_VAR(tmp30,"tmp30");
							HX_STACK_LINE(5734)
							Float tmp31 = arb->b1->angvel;		HX_STACK_VAR(tmp31,"tmp31");
							HX_STACK_LINE(5734)
							Float tmp32 = (tmp30 * tmp31);		HX_STACK_VAR(tmp32,"tmp32");
							HX_STACK_LINE(5734)
							Float tmp33 = (tmp29 + tmp32);		HX_STACK_VAR(tmp33,"tmp33");
							HX_STACK_LINE(5734)
							Float tmp34 = (tmp28 - tmp33);		HX_STACK_VAR(tmp34,"tmp34");
							HX_STACK_LINE(5734)
							Float v1y = tmp34;		HX_STACK_VAR(v1y,"v1y");
							HX_STACK_LINE(5734)
							Float tmp35 = (v1y * arb->nx);		HX_STACK_VAR(tmp35,"tmp35");
							HX_STACK_LINE(5734)
							Float tmp36 = (v1x * arb->ny);		HX_STACK_VAR(tmp36,"tmp36");
							HX_STACK_LINE(5734)
							Float tmp37 = (tmp35 - tmp36);		HX_STACK_VAR(tmp37,"tmp37");
							HX_STACK_LINE(5734)
							Float tmp38 = arb->surfacex;		HX_STACK_VAR(tmp38,"tmp38");
							HX_STACK_LINE(5734)
							Float tmp39 = (tmp37 + tmp38);		HX_STACK_VAR(tmp39,"tmp39");
							HX_STACK_LINE(5734)
							Float tmp40 = arb->c1->tMass;		HX_STACK_VAR(tmp40,"tmp40");
							HX_STACK_LINE(5734)
							Float tmp41 = (tmp39 * tmp40);		HX_STACK_VAR(tmp41,"tmp41");
							HX_STACK_LINE(5734)
							j = tmp41;
							HX_STACK_LINE(5734)
							Float tmp42 = arb->c1->friction;		HX_STACK_VAR(tmp42,"tmp42");
							HX_STACK_LINE(5734)
							Float tmp43 = arb->c1->jnAcc;		HX_STACK_VAR(tmp43,"tmp43");
							HX_STACK_LINE(5734)
							Float tmp44 = (tmp42 * tmp43);		HX_STACK_VAR(tmp44,"tmp44");
							HX_STACK_LINE(5734)
							jMax = tmp44;
							HX_STACK_LINE(5734)
							Float tmp45 = arb->c1->jtAcc;		HX_STACK_VAR(tmp45,"tmp45");
							HX_STACK_LINE(5734)
							jOld = tmp45;
							HX_STACK_LINE(5734)
							Float tmp46 = (jOld - j);		HX_STACK_VAR(tmp46,"tmp46");
							HX_STACK_LINE(5734)
							cjAcc = tmp46;
							HX_STACK_LINE(5734)
							bool tmp47 = (cjAcc > jMax);		HX_STACK_VAR(tmp47,"tmp47");
							HX_STACK_LINE(5734)
							if ((tmp47)){
								HX_STACK_LINE(5734)
								cjAcc = jMax;
							}
							else{
								HX_STACK_LINE(5734)
								Float tmp48 = cjAcc;		HX_STACK_VAR(tmp48,"tmp48");
								HX_STACK_LINE(5734)
								Float tmp49 = jMax;		HX_STACK_VAR(tmp49,"tmp49");
								HX_STACK_LINE(5734)
								Float tmp50 = -(tmp49);		HX_STACK_VAR(tmp50,"tmp50");
								HX_STACK_LINE(5734)
								bool tmp51 = (tmp48 < tmp50);		HX_STACK_VAR(tmp51,"tmp51");
								HX_STACK_LINE(5734)
								if ((tmp51)){
									HX_STACK_LINE(5734)
									Float tmp52 = jMax;		HX_STACK_VAR(tmp52,"tmp52");
									HX_STACK_LINE(5734)
									Float tmp53 = -(tmp52);		HX_STACK_VAR(tmp53,"tmp53");
									HX_STACK_LINE(5734)
									cjAcc = tmp53;
								}
							}
							HX_STACK_LINE(5734)
							Float tmp48 = (cjAcc - jOld);		HX_STACK_VAR(tmp48,"tmp48");
							HX_STACK_LINE(5734)
							j = tmp48;
							HX_STACK_LINE(5734)
							arb->c1->jtAcc = cjAcc;
							HX_STACK_LINE(5734)
							Float tmp49 = arb->ny;		HX_STACK_VAR(tmp49,"tmp49");
							HX_STACK_LINE(5734)
							Float tmp50 = -(tmp49);		HX_STACK_VAR(tmp50,"tmp50");
							HX_STACK_LINE(5734)
							Float tmp51 = j;		HX_STACK_VAR(tmp51,"tmp51");
							HX_STACK_LINE(5734)
							Float tmp52 = (tmp50 * tmp51);		HX_STACK_VAR(tmp52,"tmp52");
							HX_STACK_LINE(5734)
							jx = tmp52;
							HX_STACK_LINE(5734)
							Float tmp53 = (arb->nx * j);		HX_STACK_VAR(tmp53,"tmp53");
							HX_STACK_LINE(5734)
							jy = tmp53;
							HX_STACK_LINE(5734)
							Float tmp54 = jx;		HX_STACK_VAR(tmp54,"tmp54");
							HX_STACK_LINE(5734)
							Float tmp55 = arb->b2->imass;		HX_STACK_VAR(tmp55,"tmp55");
							HX_STACK_LINE(5734)
							Float tmp56 = (tmp54 * tmp55);		HX_STACK_VAR(tmp56,"tmp56");
							HX_STACK_LINE(5734)
							hx::AddEq(arb->b2->velx,tmp56);
							HX_STACK_LINE(5734)
							Float tmp57 = jy;		HX_STACK_VAR(tmp57,"tmp57");
							HX_STACK_LINE(5734)
							Float tmp58 = arb->b2->imass;		HX_STACK_VAR(tmp58,"tmp58");
							HX_STACK_LINE(5734)
							Float tmp59 = (tmp57 * tmp58);		HX_STACK_VAR(tmp59,"tmp59");
							HX_STACK_LINE(5734)
							hx::AddEq(arb->b2->vely,tmp59);
							HX_STACK_LINE(5734)
							Float tmp60 = jx;		HX_STACK_VAR(tmp60,"tmp60");
							HX_STACK_LINE(5734)
							Float tmp61 = arb->b1->imass;		HX_STACK_VAR(tmp61,"tmp61");
							HX_STACK_LINE(5734)
							Float tmp62 = (tmp60 * tmp61);		HX_STACK_VAR(tmp62,"tmp62");
							HX_STACK_LINE(5734)
							hx::SubEq(arb->b1->velx,tmp62);
							HX_STACK_LINE(5734)
							Float tmp63 = jy;		HX_STACK_VAR(tmp63,"tmp63");
							HX_STACK_LINE(5734)
							Float tmp64 = arb->b1->imass;		HX_STACK_VAR(tmp64,"tmp64");
							HX_STACK_LINE(5734)
							Float tmp65 = (tmp63 * tmp64);		HX_STACK_VAR(tmp65,"tmp65");
							HX_STACK_LINE(5734)
							hx::SubEq(arb->b1->vely,tmp65);
							HX_STACK_LINE(5734)
							Float tmp66 = (arb->rt1b * j);		HX_STACK_VAR(tmp66,"tmp66");
							HX_STACK_LINE(5734)
							Float tmp67 = arb->b2->iinertia;		HX_STACK_VAR(tmp67,"tmp67");
							HX_STACK_LINE(5734)
							Float tmp68 = (tmp66 * tmp67);		HX_STACK_VAR(tmp68,"tmp68");
							HX_STACK_LINE(5734)
							hx::AddEq(arb->b2->angvel,tmp68);
							HX_STACK_LINE(5734)
							Float tmp69 = (arb->rt1a * j);		HX_STACK_VAR(tmp69,"tmp69");
							HX_STACK_LINE(5734)
							Float tmp70 = arb->b1->iinertia;		HX_STACK_VAR(tmp70,"tmp70");
							HX_STACK_LINE(5734)
							Float tmp71 = (tmp69 * tmp70);		HX_STACK_VAR(tmp71,"tmp71");
							HX_STACK_LINE(5734)
							hx::SubEq(arb->b1->angvel,tmp71);
							HX_STACK_LINE(5734)
							bool tmp72 = arb->hc2;		HX_STACK_VAR(tmp72,"tmp72");
							HX_STACK_LINE(5734)
							if ((tmp72)){
								HX_STACK_LINE(5734)
								Float tmp73 = arb->k2x;		HX_STACK_VAR(tmp73,"tmp73");
								HX_STACK_LINE(5734)
								Float tmp74 = arb->b2->velx;		HX_STACK_VAR(tmp74,"tmp74");
								HX_STACK_LINE(5734)
								Float tmp75 = (tmp73 + tmp74);		HX_STACK_VAR(tmp75,"tmp75");
								HX_STACK_LINE(5734)
								Float tmp76 = arb->c2->r2y;		HX_STACK_VAR(tmp76,"tmp76");
								HX_STACK_LINE(5734)
								Float tmp77 = arb->b2->angvel;		HX_STACK_VAR(tmp77,"tmp77");
								HX_STACK_LINE(5734)
								Float tmp78 = (tmp76 * tmp77);		HX_STACK_VAR(tmp78,"tmp78");
								HX_STACK_LINE(5734)
								Float tmp79 = (tmp75 - tmp78);		HX_STACK_VAR(tmp79,"tmp79");
								HX_STACK_LINE(5734)
								Float tmp80 = arb->b1->velx;		HX_STACK_VAR(tmp80,"tmp80");
								HX_STACK_LINE(5734)
								Float tmp81 = arb->c2->r1y;		HX_STACK_VAR(tmp81,"tmp81");
								HX_STACK_LINE(5734)
								Float tmp82 = arb->b1->angvel;		HX_STACK_VAR(tmp82,"tmp82");
								HX_STACK_LINE(5734)
								Float tmp83 = (tmp81 * tmp82);		HX_STACK_VAR(tmp83,"tmp83");
								HX_STACK_LINE(5734)
								Float tmp84 = (tmp80 - tmp83);		HX_STACK_VAR(tmp84,"tmp84");
								HX_STACK_LINE(5734)
								Float tmp85 = (tmp79 - tmp84);		HX_STACK_VAR(tmp85,"tmp85");
								HX_STACK_LINE(5734)
								Float v2x = tmp85;		HX_STACK_VAR(v2x,"v2x");
								HX_STACK_LINE(5734)
								Float tmp86 = arb->k2y;		HX_STACK_VAR(tmp86,"tmp86");
								HX_STACK_LINE(5734)
								Float tmp87 = arb->b2->vely;		HX_STACK_VAR(tmp87,"tmp87");
								HX_STACK_LINE(5734)
								Float tmp88 = (tmp86 + tmp87);		HX_STACK_VAR(tmp88,"tmp88");
								HX_STACK_LINE(5734)
								Float tmp89 = arb->c2->r2x;		HX_STACK_VAR(tmp89,"tmp89");
								HX_STACK_LINE(5734)
								Float tmp90 = arb->b2->angvel;		HX_STACK_VAR(tmp90,"tmp90");
								HX_STACK_LINE(5734)
								Float tmp91 = (tmp89 * tmp90);		HX_STACK_VAR(tmp91,"tmp91");
								HX_STACK_LINE(5734)
								Float tmp92 = (tmp88 + tmp91);		HX_STACK_VAR(tmp92,"tmp92");
								HX_STACK_LINE(5734)
								Float tmp93 = arb->b1->vely;		HX_STACK_VAR(tmp93,"tmp93");
								HX_STACK_LINE(5734)
								Float tmp94 = arb->c2->r1x;		HX_STACK_VAR(tmp94,"tmp94");
								HX_STACK_LINE(5734)
								Float tmp95 = arb->b1->angvel;		HX_STACK_VAR(tmp95,"tmp95");
								HX_STACK_LINE(5734)
								Float tmp96 = (tmp94 * tmp95);		HX_STACK_VAR(tmp96,"tmp96");
								HX_STACK_LINE(5734)
								Float tmp97 = (tmp93 + tmp96);		HX_STACK_VAR(tmp97,"tmp97");
								HX_STACK_LINE(5734)
								Float tmp98 = (tmp92 - tmp97);		HX_STACK_VAR(tmp98,"tmp98");
								HX_STACK_LINE(5734)
								Float v2y = tmp98;		HX_STACK_VAR(v2y,"v2y");
								HX_STACK_LINE(5734)
								Float tmp99 = (v2y * arb->nx);		HX_STACK_VAR(tmp99,"tmp99");
								HX_STACK_LINE(5734)
								Float tmp100 = (v2x * arb->ny);		HX_STACK_VAR(tmp100,"tmp100");
								HX_STACK_LINE(5734)
								Float tmp101 = (tmp99 - tmp100);		HX_STACK_VAR(tmp101,"tmp101");
								HX_STACK_LINE(5734)
								Float tmp102 = arb->surfacex;		HX_STACK_VAR(tmp102,"tmp102");
								HX_STACK_LINE(5734)
								Float tmp103 = (tmp101 + tmp102);		HX_STACK_VAR(tmp103,"tmp103");
								HX_STACK_LINE(5734)
								Float tmp104 = arb->c2->tMass;		HX_STACK_VAR(tmp104,"tmp104");
								HX_STACK_LINE(5734)
								Float tmp105 = (tmp103 * tmp104);		HX_STACK_VAR(tmp105,"tmp105");
								HX_STACK_LINE(5734)
								j = tmp105;
								HX_STACK_LINE(5734)
								Float tmp106 = arb->c2->friction;		HX_STACK_VAR(tmp106,"tmp106");
								HX_STACK_LINE(5734)
								Float tmp107 = arb->c2->jnAcc;		HX_STACK_VAR(tmp107,"tmp107");
								HX_STACK_LINE(5734)
								Float tmp108 = (tmp106 * tmp107);		HX_STACK_VAR(tmp108,"tmp108");
								HX_STACK_LINE(5734)
								jMax = tmp108;
								HX_STACK_LINE(5734)
								Float tmp109 = arb->c2->jtAcc;		HX_STACK_VAR(tmp109,"tmp109");
								HX_STACK_LINE(5734)
								jOld = tmp109;
								HX_STACK_LINE(5734)
								Float tmp110 = (jOld - j);		HX_STACK_VAR(tmp110,"tmp110");
								HX_STACK_LINE(5734)
								cjAcc = tmp110;
								HX_STACK_LINE(5734)
								bool tmp111 = (cjAcc > jMax);		HX_STACK_VAR(tmp111,"tmp111");
								HX_STACK_LINE(5734)
								if ((tmp111)){
									HX_STACK_LINE(5734)
									cjAcc = jMax;
								}
								else{
									HX_STACK_LINE(5734)
									Float tmp112 = cjAcc;		HX_STACK_VAR(tmp112,"tmp112");
									HX_STACK_LINE(5734)
									Float tmp113 = jMax;		HX_STACK_VAR(tmp113,"tmp113");
									HX_STACK_LINE(5734)
									Float tmp114 = -(tmp113);		HX_STACK_VAR(tmp114,"tmp114");
									HX_STACK_LINE(5734)
									bool tmp115 = (tmp112 < tmp114);		HX_STACK_VAR(tmp115,"tmp115");
									HX_STACK_LINE(5734)
									if ((tmp115)){
										HX_STACK_LINE(5734)
										Float tmp116 = jMax;		HX_STACK_VAR(tmp116,"tmp116");
										HX_STACK_LINE(5734)
										Float tmp117 = -(tmp116);		HX_STACK_VAR(tmp117,"tmp117");
										HX_STACK_LINE(5734)
										cjAcc = tmp117;
									}
								}
								HX_STACK_LINE(5734)
								Float tmp112 = (cjAcc - jOld);		HX_STACK_VAR(tmp112,"tmp112");
								HX_STACK_LINE(5734)
								j = tmp112;
								HX_STACK_LINE(5734)
								arb->c2->jtAcc = cjAcc;
								HX_STACK_LINE(5734)
								Float tmp113 = arb->ny;		HX_STACK_VAR(tmp113,"tmp113");
								HX_STACK_LINE(5734)
								Float tmp114 = -(tmp113);		HX_STACK_VAR(tmp114,"tmp114");
								HX_STACK_LINE(5734)
								Float tmp115 = j;		HX_STACK_VAR(tmp115,"tmp115");
								HX_STACK_LINE(5734)
								Float tmp116 = (tmp114 * tmp115);		HX_STACK_VAR(tmp116,"tmp116");
								HX_STACK_LINE(5734)
								jx = tmp116;
								HX_STACK_LINE(5734)
								Float tmp117 = (arb->nx * j);		HX_STACK_VAR(tmp117,"tmp117");
								HX_STACK_LINE(5734)
								jy = tmp117;
								HX_STACK_LINE(5734)
								Float tmp118 = jx;		HX_STACK_VAR(tmp118,"tmp118");
								HX_STACK_LINE(5734)
								Float tmp119 = arb->b2->imass;		HX_STACK_VAR(tmp119,"tmp119");
								HX_STACK_LINE(5734)
								Float tmp120 = (tmp118 * tmp119);		HX_STACK_VAR(tmp120,"tmp120");
								HX_STACK_LINE(5734)
								hx::AddEq(arb->b2->velx,tmp120);
								HX_STACK_LINE(5734)
								Float tmp121 = jy;		HX_STACK_VAR(tmp121,"tmp121");
								HX_STACK_LINE(5734)
								Float tmp122 = arb->b2->imass;		HX_STACK_VAR(tmp122,"tmp122");
								HX_STACK_LINE(5734)
								Float tmp123 = (tmp121 * tmp122);		HX_STACK_VAR(tmp123,"tmp123");
								HX_STACK_LINE(5734)
								hx::AddEq(arb->b2->vely,tmp123);
								HX_STACK_LINE(5734)
								Float tmp124 = jx;		HX_STACK_VAR(tmp124,"tmp124");
								HX_STACK_LINE(5734)
								Float tmp125 = arb->b1->imass;		HX_STACK_VAR(tmp125,"tmp125");
								HX_STACK_LINE(5734)
								Float tmp126 = (tmp124 * tmp125);		HX_STACK_VAR(tmp126,"tmp126");
								HX_STACK_LINE(5734)
								hx::SubEq(arb->b1->velx,tmp126);
								HX_STACK_LINE(5734)
								Float tmp127 = jy;		HX_STACK_VAR(tmp127,"tmp127");
								HX_STACK_LINE(5734)
								Float tmp128 = arb->b1->imass;		HX_STACK_VAR(tmp128,"tmp128");
								HX_STACK_LINE(5734)
								Float tmp129 = (tmp127 * tmp128);		HX_STACK_VAR(tmp129,"tmp129");
								HX_STACK_LINE(5734)
								hx::SubEq(arb->b1->vely,tmp129);
								HX_STACK_LINE(5734)
								Float tmp130 = (arb->rt2b * j);		HX_STACK_VAR(tmp130,"tmp130");
								HX_STACK_LINE(5734)
								Float tmp131 = arb->b2->iinertia;		HX_STACK_VAR(tmp131,"tmp131");
								HX_STACK_LINE(5734)
								Float tmp132 = (tmp130 * tmp131);		HX_STACK_VAR(tmp132,"tmp132");
								HX_STACK_LINE(5734)
								hx::AddEq(arb->b2->angvel,tmp132);
								HX_STACK_LINE(5734)
								Float tmp133 = (arb->rt2a * j);		HX_STACK_VAR(tmp133,"tmp133");
								HX_STACK_LINE(5734)
								Float tmp134 = arb->b1->iinertia;		HX_STACK_VAR(tmp134,"tmp134");
								HX_STACK_LINE(5734)
								Float tmp135 = (tmp133 * tmp134);		HX_STACK_VAR(tmp135,"tmp135");
								HX_STACK_LINE(5734)
								hx::SubEq(arb->b1->angvel,tmp135);
								HX_STACK_LINE(5734)
								Float tmp136 = arb->k1x;		HX_STACK_VAR(tmp136,"tmp136");
								HX_STACK_LINE(5734)
								Float tmp137 = arb->b2->velx;		HX_STACK_VAR(tmp137,"tmp137");
								HX_STACK_LINE(5734)
								Float tmp138 = (tmp136 + tmp137);		HX_STACK_VAR(tmp138,"tmp138");
								HX_STACK_LINE(5734)
								Float tmp139 = arb->c1->r2y;		HX_STACK_VAR(tmp139,"tmp139");
								HX_STACK_LINE(5734)
								Float tmp140 = arb->b2->angvel;		HX_STACK_VAR(tmp140,"tmp140");
								HX_STACK_LINE(5734)
								Float tmp141 = (tmp139 * tmp140);		HX_STACK_VAR(tmp141,"tmp141");
								HX_STACK_LINE(5734)
								Float tmp142 = (tmp138 - tmp141);		HX_STACK_VAR(tmp142,"tmp142");
								HX_STACK_LINE(5734)
								Float tmp143 = arb->b1->velx;		HX_STACK_VAR(tmp143,"tmp143");
								HX_STACK_LINE(5734)
								Float tmp144 = arb->c1->r1y;		HX_STACK_VAR(tmp144,"tmp144");
								HX_STACK_LINE(5734)
								Float tmp145 = arb->b1->angvel;		HX_STACK_VAR(tmp145,"tmp145");
								HX_STACK_LINE(5734)
								Float tmp146 = (tmp144 * tmp145);		HX_STACK_VAR(tmp146,"tmp146");
								HX_STACK_LINE(5734)
								Float tmp147 = (tmp143 - tmp146);		HX_STACK_VAR(tmp147,"tmp147");
								HX_STACK_LINE(5734)
								Float tmp148 = (tmp142 - tmp147);		HX_STACK_VAR(tmp148,"tmp148");
								HX_STACK_LINE(5734)
								v1x = tmp148;
								HX_STACK_LINE(5734)
								Float tmp149 = arb->k1y;		HX_STACK_VAR(tmp149,"tmp149");
								HX_STACK_LINE(5734)
								Float tmp150 = arb->b2->vely;		HX_STACK_VAR(tmp150,"tmp150");
								HX_STACK_LINE(5734)
								Float tmp151 = (tmp149 + tmp150);		HX_STACK_VAR(tmp151,"tmp151");
								HX_STACK_LINE(5734)
								Float tmp152 = arb->c1->r2x;		HX_STACK_VAR(tmp152,"tmp152");
								HX_STACK_LINE(5734)
								Float tmp153 = arb->b2->angvel;		HX_STACK_VAR(tmp153,"tmp153");
								HX_STACK_LINE(5734)
								Float tmp154 = (tmp152 * tmp153);		HX_STACK_VAR(tmp154,"tmp154");
								HX_STACK_LINE(5734)
								Float tmp155 = (tmp151 + tmp154);		HX_STACK_VAR(tmp155,"tmp155");
								HX_STACK_LINE(5734)
								Float tmp156 = arb->b1->vely;		HX_STACK_VAR(tmp156,"tmp156");
								HX_STACK_LINE(5734)
								Float tmp157 = arb->c1->r1x;		HX_STACK_VAR(tmp157,"tmp157");
								HX_STACK_LINE(5734)
								Float tmp158 = arb->b1->angvel;		HX_STACK_VAR(tmp158,"tmp158");
								HX_STACK_LINE(5734)
								Float tmp159 = (tmp157 * tmp158);		HX_STACK_VAR(tmp159,"tmp159");
								HX_STACK_LINE(5734)
								Float tmp160 = (tmp156 + tmp159);		HX_STACK_VAR(tmp160,"tmp160");
								HX_STACK_LINE(5734)
								Float tmp161 = (tmp155 - tmp160);		HX_STACK_VAR(tmp161,"tmp161");
								HX_STACK_LINE(5734)
								v1y = tmp161;
								HX_STACK_LINE(5734)
								Float tmp162 = arb->k2x;		HX_STACK_VAR(tmp162,"tmp162");
								HX_STACK_LINE(5734)
								Float tmp163 = arb->b2->velx;		HX_STACK_VAR(tmp163,"tmp163");
								HX_STACK_LINE(5734)
								Float tmp164 = (tmp162 + tmp163);		HX_STACK_VAR(tmp164,"tmp164");
								HX_STACK_LINE(5734)
								Float tmp165 = arb->c2->r2y;		HX_STACK_VAR(tmp165,"tmp165");
								HX_STACK_LINE(5734)
								Float tmp166 = arb->b2->angvel;		HX_STACK_VAR(tmp166,"tmp166");
								HX_STACK_LINE(5734)
								Float tmp167 = (tmp165 * tmp166);		HX_STACK_VAR(tmp167,"tmp167");
								HX_STACK_LINE(5734)
								Float tmp168 = (tmp164 - tmp167);		HX_STACK_VAR(tmp168,"tmp168");
								HX_STACK_LINE(5734)
								Float tmp169 = arb->b1->velx;		HX_STACK_VAR(tmp169,"tmp169");
								HX_STACK_LINE(5734)
								Float tmp170 = arb->c2->r1y;		HX_STACK_VAR(tmp170,"tmp170");
								HX_STACK_LINE(5734)
								Float tmp171 = arb->b1->angvel;		HX_STACK_VAR(tmp171,"tmp171");
								HX_STACK_LINE(5734)
								Float tmp172 = (tmp170 * tmp171);		HX_STACK_VAR(tmp172,"tmp172");
								HX_STACK_LINE(5734)
								Float tmp173 = (tmp169 - tmp172);		HX_STACK_VAR(tmp173,"tmp173");
								HX_STACK_LINE(5734)
								Float tmp174 = (tmp168 - tmp173);		HX_STACK_VAR(tmp174,"tmp174");
								HX_STACK_LINE(5734)
								v2x = tmp174;
								HX_STACK_LINE(5734)
								Float tmp175 = arb->k2y;		HX_STACK_VAR(tmp175,"tmp175");
								HX_STACK_LINE(5734)
								Float tmp176 = arb->b2->vely;		HX_STACK_VAR(tmp176,"tmp176");
								HX_STACK_LINE(5734)
								Float tmp177 = (tmp175 + tmp176);		HX_STACK_VAR(tmp177,"tmp177");
								HX_STACK_LINE(5734)
								Float tmp178 = arb->c2->r2x;		HX_STACK_VAR(tmp178,"tmp178");
								HX_STACK_LINE(5734)
								Float tmp179 = arb->b2->angvel;		HX_STACK_VAR(tmp179,"tmp179");
								HX_STACK_LINE(5734)
								Float tmp180 = (tmp178 * tmp179);		HX_STACK_VAR(tmp180,"tmp180");
								HX_STACK_LINE(5734)
								Float tmp181 = (tmp177 + tmp180);		HX_STACK_VAR(tmp181,"tmp181");
								HX_STACK_LINE(5734)
								Float tmp182 = arb->b1->vely;		HX_STACK_VAR(tmp182,"tmp182");
								HX_STACK_LINE(5734)
								Float tmp183 = arb->c2->r1x;		HX_STACK_VAR(tmp183,"tmp183");
								HX_STACK_LINE(5734)
								Float tmp184 = arb->b1->angvel;		HX_STACK_VAR(tmp184,"tmp184");
								HX_STACK_LINE(5734)
								Float tmp185 = (tmp183 * tmp184);		HX_STACK_VAR(tmp185,"tmp185");
								HX_STACK_LINE(5734)
								Float tmp186 = (tmp182 + tmp185);		HX_STACK_VAR(tmp186,"tmp186");
								HX_STACK_LINE(5734)
								Float tmp187 = (tmp181 - tmp186);		HX_STACK_VAR(tmp187,"tmp187");
								HX_STACK_LINE(5734)
								v2y = tmp187;
								HX_STACK_LINE(5734)
								Float tmp188 = arb->c1->jnAcc;		HX_STACK_VAR(tmp188,"tmp188");
								HX_STACK_LINE(5734)
								Float ax = tmp188;		HX_STACK_VAR(ax,"ax");
								HX_STACK_LINE(5734)
								Float tmp189 = arb->c2->jnAcc;		HX_STACK_VAR(tmp189,"tmp189");
								HX_STACK_LINE(5734)
								Float ay = tmp189;		HX_STACK_VAR(ay,"ay");
								HX_STACK_LINE(5734)
								Float tmp190 = (v1x * arb->nx);		HX_STACK_VAR(tmp190,"tmp190");
								HX_STACK_LINE(5734)
								Float tmp191 = (v1y * arb->ny);		HX_STACK_VAR(tmp191,"tmp191");
								HX_STACK_LINE(5734)
								Float tmp192 = (tmp190 + tmp191);		HX_STACK_VAR(tmp192,"tmp192");
								HX_STACK_LINE(5734)
								Float tmp193 = arb->surfacey;		HX_STACK_VAR(tmp193,"tmp193");
								HX_STACK_LINE(5734)
								Float tmp194 = (tmp192 + tmp193);		HX_STACK_VAR(tmp194,"tmp194");
								HX_STACK_LINE(5734)
								Float tmp195 = arb->c1->bounce;		HX_STACK_VAR(tmp195,"tmp195");
								HX_STACK_LINE(5734)
								Float tmp196 = (tmp194 + tmp195);		HX_STACK_VAR(tmp196,"tmp196");
								HX_STACK_LINE(5734)
								Float tmp197 = (arb->Ka * ax);		HX_STACK_VAR(tmp197,"tmp197");
								HX_STACK_LINE(5734)
								Float tmp198 = (arb->Kb * ay);		HX_STACK_VAR(tmp198,"tmp198");
								HX_STACK_LINE(5734)
								Float tmp199 = (tmp197 + tmp198);		HX_STACK_VAR(tmp199,"tmp199");
								HX_STACK_LINE(5734)
								Float tmp200 = (tmp196 - tmp199);		HX_STACK_VAR(tmp200,"tmp200");
								HX_STACK_LINE(5734)
								Float jnx = tmp200;		HX_STACK_VAR(jnx,"jnx");
								HX_STACK_LINE(5734)
								Float tmp201 = (v2x * arb->nx);		HX_STACK_VAR(tmp201,"tmp201");
								HX_STACK_LINE(5734)
								Float tmp202 = (v2y * arb->ny);		HX_STACK_VAR(tmp202,"tmp202");
								HX_STACK_LINE(5734)
								Float tmp203 = (tmp201 + tmp202);		HX_STACK_VAR(tmp203,"tmp203");
								HX_STACK_LINE(5734)
								Float tmp204 = arb->surfacey;		HX_STACK_VAR(tmp204,"tmp204");
								HX_STACK_LINE(5734)
								Float tmp205 = (tmp203 + tmp204);		HX_STACK_VAR(tmp205,"tmp205");
								HX_STACK_LINE(5734)
								Float tmp206 = arb->c2->bounce;		HX_STACK_VAR(tmp206,"tmp206");
								HX_STACK_LINE(5734)
								Float tmp207 = (tmp205 + tmp206);		HX_STACK_VAR(tmp207,"tmp207");
								HX_STACK_LINE(5734)
								Float tmp208 = (arb->Kb * ax);		HX_STACK_VAR(tmp208,"tmp208");
								HX_STACK_LINE(5734)
								Float tmp209 = (arb->Kc * ay);		HX_STACK_VAR(tmp209,"tmp209");
								HX_STACK_LINE(5734)
								Float tmp210 = (tmp208 + tmp209);		HX_STACK_VAR(tmp210,"tmp210");
								HX_STACK_LINE(5734)
								Float tmp211 = (tmp207 - tmp210);		HX_STACK_VAR(tmp211,"tmp211");
								HX_STACK_LINE(5734)
								Float jny = tmp211;		HX_STACK_VAR(jny,"jny");
								HX_STACK_LINE(5734)
								Float tmp212 = (arb->kMassa * jnx);		HX_STACK_VAR(tmp212,"tmp212");
								HX_STACK_LINE(5734)
								Float tmp213 = (arb->kMassb * jny);		HX_STACK_VAR(tmp213,"tmp213");
								HX_STACK_LINE(5734)
								Float tmp214 = (tmp212 + tmp213);		HX_STACK_VAR(tmp214,"tmp214");
								HX_STACK_LINE(5734)
								Float tmp215 = -(tmp214);		HX_STACK_VAR(tmp215,"tmp215");
								HX_STACK_LINE(5734)
								Float xx = tmp215;		HX_STACK_VAR(xx,"xx");
								HX_STACK_LINE(5734)
								Float tmp216 = (arb->kMassb * jnx);		HX_STACK_VAR(tmp216,"tmp216");
								HX_STACK_LINE(5734)
								Float tmp217 = (arb->kMassc * jny);		HX_STACK_VAR(tmp217,"tmp217");
								HX_STACK_LINE(5734)
								Float tmp218 = (tmp216 + tmp217);		HX_STACK_VAR(tmp218,"tmp218");
								HX_STACK_LINE(5734)
								Float tmp219 = -(tmp218);		HX_STACK_VAR(tmp219,"tmp219");
								HX_STACK_LINE(5734)
								Float xy = tmp219;		HX_STACK_VAR(xy,"xy");
								HX_STACK_LINE(5734)
								bool tmp220 = (xx >= (int)0);		HX_STACK_VAR(tmp220,"tmp220");
								HX_STACK_LINE(5734)
								bool tmp221;		HX_STACK_VAR(tmp221,"tmp221");
								HX_STACK_LINE(5734)
								if ((tmp220)){
									HX_STACK_LINE(5734)
									tmp221 = (xy >= (int)0);
								}
								else{
									HX_STACK_LINE(5734)
									tmp221 = false;
								}
								HX_STACK_LINE(5734)
								if ((tmp221)){
									HX_STACK_LINE(5734)
									{
										HX_STACK_LINE(5734)
										Float tmp222 = (xx - ax);		HX_STACK_VAR(tmp222,"tmp222");
										HX_STACK_LINE(5734)
										jnx = tmp222;
										HX_STACK_LINE(5734)
										Float tmp223 = (xy - ay);		HX_STACK_VAR(tmp223,"tmp223");
										HX_STACK_LINE(5734)
										jny = tmp223;
									}
									HX_STACK_LINE(5734)
									arb->c1->jnAcc = xx;
									HX_STACK_LINE(5734)
									arb->c2->jnAcc = xy;
								}
								else{
									HX_STACK_LINE(5734)
									Float tmp222 = arb->c1->nMass;		HX_STACK_VAR(tmp222,"tmp222");
									HX_STACK_LINE(5734)
									Float tmp223 = -(tmp222);		HX_STACK_VAR(tmp223,"tmp223");
									HX_STACK_LINE(5734)
									Float tmp224 = jnx;		HX_STACK_VAR(tmp224,"tmp224");
									HX_STACK_LINE(5734)
									Float tmp225 = (tmp223 * tmp224);		HX_STACK_VAR(tmp225,"tmp225");
									HX_STACK_LINE(5734)
									xx = tmp225;
									HX_STACK_LINE(5734)
									bool tmp226 = (xx >= (int)0);		HX_STACK_VAR(tmp226,"tmp226");
									HX_STACK_LINE(5734)
									bool tmp227;		HX_STACK_VAR(tmp227,"tmp227");
									HX_STACK_LINE(5734)
									if ((tmp226)){
										HX_STACK_LINE(5734)
										Float tmp228 = (arb->Kb * xx);		HX_STACK_VAR(tmp228,"tmp228");
										HX_STACK_LINE(5734)
										Float tmp229 = tmp228;		HX_STACK_VAR(tmp229,"tmp229");
										HX_STACK_LINE(5734)
										Float tmp230 = jny;		HX_STACK_VAR(tmp230,"tmp230");
										HX_STACK_LINE(5734)
										Float tmp231 = (tmp229 + tmp230);		HX_STACK_VAR(tmp231,"tmp231");
										HX_STACK_LINE(5734)
										Float tmp232 = tmp231;		HX_STACK_VAR(tmp232,"tmp232");
										HX_STACK_LINE(5734)
										tmp227 = (tmp232 >= (int)0);
									}
									else{
										HX_STACK_LINE(5734)
										tmp227 = false;
									}
									HX_STACK_LINE(5734)
									if ((tmp227)){
										HX_STACK_LINE(5734)
										Float tmp228 = (xx - ax);		HX_STACK_VAR(tmp228,"tmp228");
										HX_STACK_LINE(5734)
										jnx = tmp228;
										HX_STACK_LINE(5734)
										Float tmp229 = ay;		HX_STACK_VAR(tmp229,"tmp229");
										HX_STACK_LINE(5734)
										Float tmp230 = -(tmp229);		HX_STACK_VAR(tmp230,"tmp230");
										HX_STACK_LINE(5734)
										jny = tmp230;
										HX_STACK_LINE(5734)
										arb->c1->jnAcc = xx;
										HX_STACK_LINE(5734)
										arb->c2->jnAcc = (int)0;
									}
									else{
										HX_STACK_LINE(5734)
										Float tmp228 = arb->c2->nMass;		HX_STACK_VAR(tmp228,"tmp228");
										HX_STACK_LINE(5734)
										Float tmp229 = -(tmp228);		HX_STACK_VAR(tmp229,"tmp229");
										HX_STACK_LINE(5734)
										Float tmp230 = jny;		HX_STACK_VAR(tmp230,"tmp230");
										HX_STACK_LINE(5734)
										Float tmp231 = (tmp229 * tmp230);		HX_STACK_VAR(tmp231,"tmp231");
										HX_STACK_LINE(5734)
										xy = tmp231;
										HX_STACK_LINE(5734)
										bool tmp232 = (xy >= (int)0);		HX_STACK_VAR(tmp232,"tmp232");
										HX_STACK_LINE(5734)
										bool tmp233;		HX_STACK_VAR(tmp233,"tmp233");
										HX_STACK_LINE(5734)
										if ((tmp232)){
											HX_STACK_LINE(5734)
											Float tmp234 = (arb->Kb * xy);		HX_STACK_VAR(tmp234,"tmp234");
											HX_STACK_LINE(5734)
											Float tmp235 = tmp234;		HX_STACK_VAR(tmp235,"tmp235");
											HX_STACK_LINE(5734)
											Float tmp236 = jnx;		HX_STACK_VAR(tmp236,"tmp236");
											HX_STACK_LINE(5734)
											Float tmp237 = (tmp235 + tmp236);		HX_STACK_VAR(tmp237,"tmp237");
											HX_STACK_LINE(5734)
											Float tmp238 = tmp237;		HX_STACK_VAR(tmp238,"tmp238");
											HX_STACK_LINE(5734)
											tmp233 = (tmp238 >= (int)0);
										}
										else{
											HX_STACK_LINE(5734)
											tmp233 = false;
										}
										HX_STACK_LINE(5734)
										if ((tmp233)){
											HX_STACK_LINE(5734)
											Float tmp234 = ax;		HX_STACK_VAR(tmp234,"tmp234");
											HX_STACK_LINE(5734)
											Float tmp235 = -(tmp234);		HX_STACK_VAR(tmp235,"tmp235");
											HX_STACK_LINE(5734)
											jnx = tmp235;
											HX_STACK_LINE(5734)
											Float tmp236 = (xy - ay);		HX_STACK_VAR(tmp236,"tmp236");
											HX_STACK_LINE(5734)
											jny = tmp236;
											HX_STACK_LINE(5734)
											arb->c1->jnAcc = (int)0;
											HX_STACK_LINE(5734)
											arb->c2->jnAcc = xy;
										}
										else{
											HX_STACK_LINE(5734)
											bool tmp234 = (jnx >= (int)0);		HX_STACK_VAR(tmp234,"tmp234");
											HX_STACK_LINE(5734)
											bool tmp235;		HX_STACK_VAR(tmp235,"tmp235");
											HX_STACK_LINE(5734)
											if ((tmp234)){
												HX_STACK_LINE(5734)
												tmp235 = (jny >= (int)0);
											}
											else{
												HX_STACK_LINE(5734)
												tmp235 = false;
											}
											HX_STACK_LINE(5734)
											if ((tmp235)){
												HX_STACK_LINE(5734)
												Float tmp236 = ax;		HX_STACK_VAR(tmp236,"tmp236");
												HX_STACK_LINE(5734)
												Float tmp237 = -(tmp236);		HX_STACK_VAR(tmp237,"tmp237");
												HX_STACK_LINE(5734)
												jnx = tmp237;
												HX_STACK_LINE(5734)
												Float tmp238 = ay;		HX_STACK_VAR(tmp238,"tmp238");
												HX_STACK_LINE(5734)
												Float tmp239 = -(tmp238);		HX_STACK_VAR(tmp239,"tmp239");
												HX_STACK_LINE(5734)
												jny = tmp239;
												HX_STACK_LINE(5734)
												Float tmp240 = arb->c2->jnAcc = (int)0;		HX_STACK_VAR(tmp240,"tmp240");
												HX_STACK_LINE(5734)
												arb->c1->jnAcc = tmp240;
											}
											else{
												HX_STACK_LINE(5734)
												jnx = (int)0;
												HX_STACK_LINE(5734)
												jny = (int)0;
											}
										}
									}
								}
								HX_STACK_LINE(5734)
								Float tmp222 = (jnx + jny);		HX_STACK_VAR(tmp222,"tmp222");
								HX_STACK_LINE(5734)
								j = tmp222;
								HX_STACK_LINE(5734)
								Float tmp223 = (arb->nx * j);		HX_STACK_VAR(tmp223,"tmp223");
								HX_STACK_LINE(5734)
								jx = tmp223;
								HX_STACK_LINE(5734)
								Float tmp224 = (arb->ny * j);		HX_STACK_VAR(tmp224,"tmp224");
								HX_STACK_LINE(5734)
								jy = tmp224;
								HX_STACK_LINE(5734)
								Float tmp225 = jx;		HX_STACK_VAR(tmp225,"tmp225");
								HX_STACK_LINE(5734)
								Float tmp226 = arb->b2->imass;		HX_STACK_VAR(tmp226,"tmp226");
								HX_STACK_LINE(5734)
								Float tmp227 = (tmp225 * tmp226);		HX_STACK_VAR(tmp227,"tmp227");
								HX_STACK_LINE(5734)
								hx::AddEq(arb->b2->velx,tmp227);
								HX_STACK_LINE(5734)
								Float tmp228 = jy;		HX_STACK_VAR(tmp228,"tmp228");
								HX_STACK_LINE(5734)
								Float tmp229 = arb->b2->imass;		HX_STACK_VAR(tmp229,"tmp229");
								HX_STACK_LINE(5734)
								Float tmp230 = (tmp228 * tmp229);		HX_STACK_VAR(tmp230,"tmp230");
								HX_STACK_LINE(5734)
								hx::AddEq(arb->b2->vely,tmp230);
								HX_STACK_LINE(5734)
								Float tmp231 = jx;		HX_STACK_VAR(tmp231,"tmp231");
								HX_STACK_LINE(5734)
								Float tmp232 = arb->b1->imass;		HX_STACK_VAR(tmp232,"tmp232");
								HX_STACK_LINE(5734)
								Float tmp233 = (tmp231 * tmp232);		HX_STACK_VAR(tmp233,"tmp233");
								HX_STACK_LINE(5734)
								hx::SubEq(arb->b1->velx,tmp233);
								HX_STACK_LINE(5734)
								Float tmp234 = jy;		HX_STACK_VAR(tmp234,"tmp234");
								HX_STACK_LINE(5734)
								Float tmp235 = arb->b1->imass;		HX_STACK_VAR(tmp235,"tmp235");
								HX_STACK_LINE(5734)
								Float tmp236 = (tmp234 * tmp235);		HX_STACK_VAR(tmp236,"tmp236");
								HX_STACK_LINE(5734)
								hx::SubEq(arb->b1->vely,tmp236);
								HX_STACK_LINE(5734)
								Float tmp237 = (arb->rn1b * jnx);		HX_STACK_VAR(tmp237,"tmp237");
								HX_STACK_LINE(5734)
								Float tmp238 = (arb->rn2b * jny);		HX_STACK_VAR(tmp238,"tmp238");
								HX_STACK_LINE(5734)
								Float tmp239 = (tmp237 + tmp238);		HX_STACK_VAR(tmp239,"tmp239");
								HX_STACK_LINE(5734)
								Float tmp240 = arb->b2->iinertia;		HX_STACK_VAR(tmp240,"tmp240");
								HX_STACK_LINE(5734)
								Float tmp241 = (tmp239 * tmp240);		HX_STACK_VAR(tmp241,"tmp241");
								HX_STACK_LINE(5734)
								hx::AddEq(arb->b2->angvel,tmp241);
								HX_STACK_LINE(5734)
								Float tmp242 = (arb->rn1a * jnx);		HX_STACK_VAR(tmp242,"tmp242");
								HX_STACK_LINE(5734)
								Float tmp243 = (arb->rn2a * jny);		HX_STACK_VAR(tmp243,"tmp243");
								HX_STACK_LINE(5734)
								Float tmp244 = (tmp242 + tmp243);		HX_STACK_VAR(tmp244,"tmp244");
								HX_STACK_LINE(5734)
								Float tmp245 = arb->b1->iinertia;		HX_STACK_VAR(tmp245,"tmp245");
								HX_STACK_LINE(5734)
								Float tmp246 = (tmp244 * tmp245);		HX_STACK_VAR(tmp246,"tmp246");
								HX_STACK_LINE(5734)
								hx::SubEq(arb->b1->angvel,tmp246);
							}
							else{
								HX_STACK_LINE(5734)
								bool tmp73 = (arb->radius != ((Float)0.0));		HX_STACK_VAR(tmp73,"tmp73");
								HX_STACK_LINE(5734)
								if ((tmp73)){
									HX_STACK_LINE(5734)
									Float tmp74 = arb->b2->angvel;		HX_STACK_VAR(tmp74,"tmp74");
									HX_STACK_LINE(5734)
									Float tmp75 = arb->b1->angvel;		HX_STACK_VAR(tmp75,"tmp75");
									HX_STACK_LINE(5734)
									Float tmp76 = (tmp74 - tmp75);		HX_STACK_VAR(tmp76,"tmp76");
									HX_STACK_LINE(5734)
									Float dw = tmp76;		HX_STACK_VAR(dw,"dw");
									HX_STACK_LINE(5734)
									Float tmp77 = (dw * arb->rMass);		HX_STACK_VAR(tmp77,"tmp77");
									HX_STACK_LINE(5734)
									j = tmp77;
									HX_STACK_LINE(5734)
									Float tmp78 = arb->rfric;		HX_STACK_VAR(tmp78,"tmp78");
									HX_STACK_LINE(5734)
									Float tmp79 = arb->c1->jnAcc;		HX_STACK_VAR(tmp79,"tmp79");
									HX_STACK_LINE(5734)
									Float tmp80 = (tmp78 * tmp79);		HX_STACK_VAR(tmp80,"tmp80");
									HX_STACK_LINE(5734)
									jMax = tmp80;
									HX_STACK_LINE(5734)
									jOld = arb->jrAcc;
									HX_STACK_LINE(5734)
									hx::SubEq(arb->jrAcc,j);
									HX_STACK_LINE(5734)
									bool tmp81 = (arb->jrAcc > jMax);		HX_STACK_VAR(tmp81,"tmp81");
									HX_STACK_LINE(5734)
									if ((tmp81)){
										HX_STACK_LINE(5734)
										arb->jrAcc = jMax;
									}
									else{
										HX_STACK_LINE(5734)
										Float tmp82 = arb->jrAcc;		HX_STACK_VAR(tmp82,"tmp82");
										HX_STACK_LINE(5734)
										Float tmp83 = jMax;		HX_STACK_VAR(tmp83,"tmp83");
										HX_STACK_LINE(5734)
										Float tmp84 = -(tmp83);		HX_STACK_VAR(tmp84,"tmp84");
										HX_STACK_LINE(5734)
										bool tmp85 = (tmp82 < tmp84);		HX_STACK_VAR(tmp85,"tmp85");
										HX_STACK_LINE(5734)
										if ((tmp85)){
											HX_STACK_LINE(5734)
											Float tmp86 = jMax;		HX_STACK_VAR(tmp86,"tmp86");
											HX_STACK_LINE(5734)
											Float tmp87 = -(tmp86);		HX_STACK_VAR(tmp87,"tmp87");
											HX_STACK_LINE(5734)
											arb->jrAcc = tmp87;
										}
									}
									HX_STACK_LINE(5734)
									Float tmp82 = (arb->jrAcc - jOld);		HX_STACK_VAR(tmp82,"tmp82");
									HX_STACK_LINE(5734)
									j = tmp82;
									HX_STACK_LINE(5734)
									Float tmp83 = j;		HX_STACK_VAR(tmp83,"tmp83");
									HX_STACK_LINE(5734)
									Float tmp84 = arb->b2->iinertia;		HX_STACK_VAR(tmp84,"tmp84");
									HX_STACK_LINE(5734)
									Float tmp85 = (tmp83 * tmp84);		HX_STACK_VAR(tmp85,"tmp85");
									HX_STACK_LINE(5734)
									hx::AddEq(arb->b2->angvel,tmp85);
									HX_STACK_LINE(5734)
									Float tmp86 = j;		HX_STACK_VAR(tmp86,"tmp86");
									HX_STACK_LINE(5734)
									Float tmp87 = arb->b1->iinertia;		HX_STACK_VAR(tmp87,"tmp87");
									HX_STACK_LINE(5734)
									Float tmp88 = (tmp86 * tmp87);		HX_STACK_VAR(tmp88,"tmp88");
									HX_STACK_LINE(5734)
									hx::SubEq(arb->b1->angvel,tmp88);
								}
								HX_STACK_LINE(5734)
								Float tmp74 = arb->k1x;		HX_STACK_VAR(tmp74,"tmp74");
								HX_STACK_LINE(5734)
								Float tmp75 = arb->b2->velx;		HX_STACK_VAR(tmp75,"tmp75");
								HX_STACK_LINE(5734)
								Float tmp76 = (tmp74 + tmp75);		HX_STACK_VAR(tmp76,"tmp76");
								HX_STACK_LINE(5734)
								Float tmp77 = arb->c1->r2y;		HX_STACK_VAR(tmp77,"tmp77");
								HX_STACK_LINE(5734)
								Float tmp78 = arb->b2->angvel;		HX_STACK_VAR(tmp78,"tmp78");
								HX_STACK_LINE(5734)
								Float tmp79 = (tmp77 * tmp78);		HX_STACK_VAR(tmp79,"tmp79");
								HX_STACK_LINE(5734)
								Float tmp80 = (tmp76 - tmp79);		HX_STACK_VAR(tmp80,"tmp80");
								HX_STACK_LINE(5734)
								Float tmp81 = arb->b1->velx;		HX_STACK_VAR(tmp81,"tmp81");
								HX_STACK_LINE(5734)
								Float tmp82 = arb->c1->r1y;		HX_STACK_VAR(tmp82,"tmp82");
								HX_STACK_LINE(5734)
								Float tmp83 = arb->b1->angvel;		HX_STACK_VAR(tmp83,"tmp83");
								HX_STACK_LINE(5734)
								Float tmp84 = (tmp82 * tmp83);		HX_STACK_VAR(tmp84,"tmp84");
								HX_STACK_LINE(5734)
								Float tmp85 = (tmp81 - tmp84);		HX_STACK_VAR(tmp85,"tmp85");
								HX_STACK_LINE(5734)
								Float tmp86 = (tmp80 - tmp85);		HX_STACK_VAR(tmp86,"tmp86");
								HX_STACK_LINE(5734)
								v1x = tmp86;
								HX_STACK_LINE(5734)
								Float tmp87 = arb->k1y;		HX_STACK_VAR(tmp87,"tmp87");
								HX_STACK_LINE(5734)
								Float tmp88 = arb->b2->vely;		HX_STACK_VAR(tmp88,"tmp88");
								HX_STACK_LINE(5734)
								Float tmp89 = (tmp87 + tmp88);		HX_STACK_VAR(tmp89,"tmp89");
								HX_STACK_LINE(5734)
								Float tmp90 = arb->c1->r2x;		HX_STACK_VAR(tmp90,"tmp90");
								HX_STACK_LINE(5734)
								Float tmp91 = arb->b2->angvel;		HX_STACK_VAR(tmp91,"tmp91");
								HX_STACK_LINE(5734)
								Float tmp92 = (tmp90 * tmp91);		HX_STACK_VAR(tmp92,"tmp92");
								HX_STACK_LINE(5734)
								Float tmp93 = (tmp89 + tmp92);		HX_STACK_VAR(tmp93,"tmp93");
								HX_STACK_LINE(5734)
								Float tmp94 = arb->b1->vely;		HX_STACK_VAR(tmp94,"tmp94");
								HX_STACK_LINE(5734)
								Float tmp95 = arb->c1->r1x;		HX_STACK_VAR(tmp95,"tmp95");
								HX_STACK_LINE(5734)
								Float tmp96 = arb->b1->angvel;		HX_STACK_VAR(tmp96,"tmp96");
								HX_STACK_LINE(5734)
								Float tmp97 = (tmp95 * tmp96);		HX_STACK_VAR(tmp97,"tmp97");
								HX_STACK_LINE(5734)
								Float tmp98 = (tmp94 + tmp97);		HX_STACK_VAR(tmp98,"tmp98");
								HX_STACK_LINE(5734)
								Float tmp99 = (tmp93 - tmp98);		HX_STACK_VAR(tmp99,"tmp99");
								HX_STACK_LINE(5734)
								v1y = tmp99;
								HX_STACK_LINE(5734)
								Float tmp100 = arb->c1->bounce;		HX_STACK_VAR(tmp100,"tmp100");
								HX_STACK_LINE(5734)
								Float tmp101 = (arb->nx * v1x);		HX_STACK_VAR(tmp101,"tmp101");
								HX_STACK_LINE(5734)
								Float tmp102 = (arb->ny * v1y);		HX_STACK_VAR(tmp102,"tmp102");
								HX_STACK_LINE(5734)
								Float tmp103 = (tmp101 + tmp102);		HX_STACK_VAR(tmp103,"tmp103");
								HX_STACK_LINE(5734)
								Float tmp104 = (tmp100 + tmp103);		HX_STACK_VAR(tmp104,"tmp104");
								HX_STACK_LINE(5734)
								Float tmp105 = arb->surfacey;		HX_STACK_VAR(tmp105,"tmp105");
								HX_STACK_LINE(5734)
								Float tmp106 = (tmp104 + tmp105);		HX_STACK_VAR(tmp106,"tmp106");
								HX_STACK_LINE(5734)
								Float tmp107 = arb->c1->nMass;		HX_STACK_VAR(tmp107,"tmp107");
								HX_STACK_LINE(5734)
								Float tmp108 = (tmp106 * tmp107);		HX_STACK_VAR(tmp108,"tmp108");
								HX_STACK_LINE(5734)
								j = tmp108;
								HX_STACK_LINE(5734)
								Float tmp109 = arb->c1->jnAcc;		HX_STACK_VAR(tmp109,"tmp109");
								HX_STACK_LINE(5734)
								jOld = tmp109;
								HX_STACK_LINE(5734)
								Float tmp110 = (jOld - j);		HX_STACK_VAR(tmp110,"tmp110");
								HX_STACK_LINE(5734)
								cjAcc = tmp110;
								HX_STACK_LINE(5734)
								bool tmp111 = (cjAcc < ((Float)0.0));		HX_STACK_VAR(tmp111,"tmp111");
								HX_STACK_LINE(5734)
								if ((tmp111)){
									HX_STACK_LINE(5734)
									cjAcc = ((Float)0.0);
								}
								HX_STACK_LINE(5734)
								Float tmp112 = (cjAcc - jOld);		HX_STACK_VAR(tmp112,"tmp112");
								HX_STACK_LINE(5734)
								j = tmp112;
								HX_STACK_LINE(5734)
								arb->c1->jnAcc = cjAcc;
								HX_STACK_LINE(5734)
								Float tmp113 = (arb->nx * j);		HX_STACK_VAR(tmp113,"tmp113");
								HX_STACK_LINE(5734)
								jx = tmp113;
								HX_STACK_LINE(5734)
								Float tmp114 = (arb->ny * j);		HX_STACK_VAR(tmp114,"tmp114");
								HX_STACK_LINE(5734)
								jy = tmp114;
								HX_STACK_LINE(5734)
								Float tmp115 = jx;		HX_STACK_VAR(tmp115,"tmp115");
								HX_STACK_LINE(5734)
								Float tmp116 = arb->b2->imass;		HX_STACK_VAR(tmp116,"tmp116");
								HX_STACK_LINE(5734)
								Float tmp117 = (tmp115 * tmp116);		HX_STACK_VAR(tmp117,"tmp117");
								HX_STACK_LINE(5734)
								hx::AddEq(arb->b2->velx,tmp117);
								HX_STACK_LINE(5734)
								Float tmp118 = jy;		HX_STACK_VAR(tmp118,"tmp118");
								HX_STACK_LINE(5734)
								Float tmp119 = arb->b2->imass;		HX_STACK_VAR(tmp119,"tmp119");
								HX_STACK_LINE(5734)
								Float tmp120 = (tmp118 * tmp119);		HX_STACK_VAR(tmp120,"tmp120");
								HX_STACK_LINE(5734)
								hx::AddEq(arb->b2->vely,tmp120);
								HX_STACK_LINE(5734)
								Float tmp121 = jx;		HX_STACK_VAR(tmp121,"tmp121");
								HX_STACK_LINE(5734)
								Float tmp122 = arb->b1->imass;		HX_STACK_VAR(tmp122,"tmp122");
								HX_STACK_LINE(5734)
								Float tmp123 = (tmp121 * tmp122);		HX_STACK_VAR(tmp123,"tmp123");
								HX_STACK_LINE(5734)
								hx::SubEq(arb->b1->velx,tmp123);
								HX_STACK_LINE(5734)
								Float tmp124 = jy;		HX_STACK_VAR(tmp124,"tmp124");
								HX_STACK_LINE(5734)
								Float tmp125 = arb->b1->imass;		HX_STACK_VAR(tmp125,"tmp125");
								HX_STACK_LINE(5734)
								Float tmp126 = (tmp124 * tmp125);		HX_STACK_VAR(tmp126,"tmp126");
								HX_STACK_LINE(5734)
								hx::SubEq(arb->b1->vely,tmp126);
								HX_STACK_LINE(5734)
								Float tmp127 = (arb->rn1b * j);		HX_STACK_VAR(tmp127,"tmp127");
								HX_STACK_LINE(5734)
								Float tmp128 = arb->b2->iinertia;		HX_STACK_VAR(tmp128,"tmp128");
								HX_STACK_LINE(5734)
								Float tmp129 = (tmp127 * tmp128);		HX_STACK_VAR(tmp129,"tmp129");
								HX_STACK_LINE(5734)
								hx::AddEq(arb->b2->angvel,tmp129);
								HX_STACK_LINE(5734)
								Float tmp130 = (arb->rn1a * j);		HX_STACK_VAR(tmp130,"tmp130");
								HX_STACK_LINE(5734)
								Float tmp131 = arb->b1->iinertia;		HX_STACK_VAR(tmp131,"tmp131");
								HX_STACK_LINE(5734)
								Float tmp132 = (tmp130 * tmp131);		HX_STACK_VAR(tmp132,"tmp132");
								HX_STACK_LINE(5734)
								hx::SubEq(arb->b1->angvel,tmp132);
							}
						}
					}
					HX_STACK_LINE(5736)
					arbi = arbi->next;
					HX_STACK_LINE(5737)
					bool tmp7 = fst;		HX_STACK_VAR(tmp7,"tmp7");
					HX_STACK_LINE(5737)
					bool tmp8;		HX_STACK_VAR(tmp8,"tmp8");
					HX_STACK_LINE(5737)
					if ((tmp7)){
						HX_STACK_LINE(5737)
						tmp8 = (arbi == null());
					}
					else{
						HX_STACK_LINE(5737)
						tmp8 = false;
					}
					HX_STACK_LINE(5737)
					if ((tmp8)){
						HX_STACK_LINE(5738)
						::zpp_nape::util::ZNPList_ZPP_ColArbiter tmp9 = this->c_arbiters_true;		HX_STACK_VAR(tmp9,"tmp9");
						HX_STACK_LINE(5738)
						arbi = tmp9->head;
						HX_STACK_LINE(5739)
						fst = false;
					}
				}
			}
		}
	}
return null();
}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Space_obj,iterateVel,(void))

Void ZPP_Space_obj::iteratePos( int times){
{
		HX_STACK_FRAME("zpp_nape.space.ZPP_Space","iteratePos",0xf7ba66b0,"zpp_nape.space.ZPP_Space.iteratePos","zpp_nape/space/Space.hx",5746,0x2b65ed03)
		HX_STACK_THIS(this)
		HX_STACK_ARG(times,"times")
		HX_STACK_LINE(5746)
		int _g = (int)0;		HX_STACK_VAR(_g,"_g");
		HX_STACK_LINE(5746)
		while((true)){
			HX_STACK_LINE(5746)
			bool tmp = (_g < times);		HX_STACK_VAR(tmp,"tmp");
			HX_STACK_LINE(5746)
			bool tmp1 = !(tmp);		HX_STACK_VAR(tmp1,"tmp1");
			HX_STACK_LINE(5746)
			if ((tmp1)){
				HX_STACK_LINE(5746)
				break;
			}
			HX_STACK_LINE(5746)
			int tmp2 = (_g)++;		HX_STACK_VAR(tmp2,"tmp2");
			HX_STACK_LINE(5746)
			int i = tmp2;		HX_STACK_VAR(i,"i");
			HX_STACK_LINE(5747)
			::zpp_nape::util::ZNPNode_ZPP_Constraint pre = null();		HX_STACK_VAR(pre,"pre");
			HX_STACK_LINE(5748)
			{
				HX_STACK_LINE(5749)
				::zpp_nape::util::ZNPList_ZPP_Constraint tmp3 = this->live_constraints;		HX_STACK_VAR(tmp3,"tmp3");
				HX_STACK_LINE(5749)
				::zpp_nape::util::ZNPNode_ZPP_Constraint cx_ite = tmp3->head;		HX_STACK_VAR(cx_ite,"cx_ite");
				HX_STACK_LINE(5750)
				while((true)){
					HX_STACK_LINE(5750)
					bool tmp4 = (cx_ite != null());		HX_STACK_VAR(tmp4,"tmp4");
					HX_STACK_LINE(5750)
					bool tmp5 = !(tmp4);		HX_STACK_VAR(tmp5,"tmp5");
					HX_STACK_LINE(5750)
					if ((tmp5)){
						HX_STACK_LINE(5750)
						break;
					}
					HX_STACK_LINE(5751)
					::zpp_nape::constraint::ZPP_Constraint con = cx_ite->elt;		HX_STACK_VAR(con,"con");
					HX_STACK_LINE(5752)
					{
						HX_STACK_LINE(5753)
						bool tmp6 = con->__velocity;		HX_STACK_VAR(tmp6,"tmp6");
						HX_STACK_LINE(5753)
						bool tmp7 = tmp6;		HX_STACK_VAR(tmp7,"tmp7");
						HX_STACK_LINE(5753)
						bool tmp8 = !(tmp7);		HX_STACK_VAR(tmp8,"tmp8");
						HX_STACK_LINE(5753)
						bool tmp9;		HX_STACK_VAR(tmp9,"tmp9");
						HX_STACK_LINE(5753)
						if ((tmp8)){
							HX_STACK_LINE(5753)
							tmp9 = con->stiff;
						}
						else{
							HX_STACK_LINE(5753)
							tmp9 = false;
						}
						HX_STACK_LINE(5753)
						if ((tmp9)){
							HX_STACK_LINE(5754)
							bool tmp10 = con->applyImpulsePos();		HX_STACK_VAR(tmp10,"tmp10");
							HX_STACK_LINE(5754)
							if ((tmp10)){
								HX_STACK_LINE(5755)
								::zpp_nape::util::ZNPList_ZPP_Constraint tmp11 = this->live_constraints;		HX_STACK_VAR(tmp11,"tmp11");
								HX_STACK_LINE(5755)
								::zpp_nape::util::ZNPNode_ZPP_Constraint tmp12 = pre;		HX_STACK_VAR(tmp12,"tmp12");
								HX_STACK_LINE(5755)
								::zpp_nape::util::ZNPNode_ZPP_Constraint tmp13 = tmp11->erase(tmp12);		HX_STACK_VAR(tmp13,"tmp13");
								HX_STACK_LINE(5755)
								cx_ite = tmp13;
								HX_STACK_LINE(5756)
								con->broken();
								HX_STACK_LINE(5757)
								::zpp_nape::constraint::ZPP_Constraint tmp14 = con;		HX_STACK_VAR(tmp14,"tmp14");
								HX_STACK_LINE(5757)
								this->constraintCbBreak(tmp14);
								HX_STACK_LINE(5758)
								bool tmp15 = con->removeOnBreak;		HX_STACK_VAR(tmp15,"tmp15");
								HX_STACK_LINE(5758)
								if ((tmp15)){
									HX_STACK_LINE(5759)
									con->component->sleeping = true;
									HX_STACK_LINE(5760)
									this->midstep = false;
									HX_STACK_LINE(5761)
									bool tmp16 = (con->compound != null());		HX_STACK_VAR(tmp16,"tmp16");
									HX_STACK_LINE(5761)
									if ((tmp16)){
										HX_STACK_LINE(5761)
										::nape::constraint::ConstraintList tmp17 = con->compound->wrap_constraints;		HX_STACK_VAR(tmp17,"tmp17");
										HX_STACK_LINE(5761)
										::nape::constraint::Constraint tmp18 = con->outer;		HX_STACK_VAR(tmp18,"tmp18");
										HX_STACK_LINE(5761)
										tmp17->remove(tmp18);
									}
									else{
										HX_STACK_LINE(5762)
										::nape::constraint::ConstraintList tmp17 = this->wrap_constraints;		HX_STACK_VAR(tmp17,"tmp17");
										HX_STACK_LINE(5762)
										::nape::constraint::Constraint tmp18 = con->outer;		HX_STACK_VAR(tmp18,"tmp18");
										HX_STACK_LINE(5762)
										tmp17->remove(tmp18);
									}
									HX_STACK_LINE(5763)
									this->midstep = true;
								}
								else{
									HX_STACK_LINE(5765)
									con->active = false;
								}
								HX_STACK_LINE(5766)
								con->clearcache();
								HX_STACK_LINE(5767)
								continue;
							}
						}
						HX_STACK_LINE(5770)
						pre = cx_ite;
					}
					HX_STACK_LINE(5772)
					cx_ite = cx_ite->next;
				}
			}
			HX_STACK_LINE(5775)
			{
				HX_STACK_LINE(5776)
				::zpp_nape::util::ZNPList_ZPP_ColArbiter tmp3 = this->c_arbiters_false;		HX_STACK_VAR(tmp3,"tmp3");
				HX_STACK_LINE(5776)
				::zpp_nape::util::ZNPNode_ZPP_ColArbiter arbi = tmp3->head;		HX_STACK_VAR(arbi,"arbi");
				HX_STACK_LINE(5777)
				bool fst = true;		HX_STACK_VAR(fst,"fst");
				HX_STACK_LINE(5778)
				bool tmp4 = (arbi == null());		HX_STACK_VAR(tmp4,"tmp4");
				HX_STACK_LINE(5778)
				if ((tmp4)){
					HX_STACK_LINE(5779)
					::zpp_nape::util::ZNPList_ZPP_ColArbiter tmp5 = this->c_arbiters_true;		HX_STACK_VAR(tmp5,"tmp5");
					HX_STACK_LINE(5779)
					arbi = tmp5->head;
					HX_STACK_LINE(5780)
					fst = false;
				}
				HX_STACK_LINE(5782)
				while((true)){
					HX_STACK_LINE(5782)
					bool tmp5 = (arbi != null());		HX_STACK_VAR(tmp5,"tmp5");
					HX_STACK_LINE(5782)
					bool tmp6 = !(tmp5);		HX_STACK_VAR(tmp6,"tmp6");
					HX_STACK_LINE(5782)
					if ((tmp6)){
						HX_STACK_LINE(5782)
						break;
					}
					HX_STACK_LINE(5783)
					::zpp_nape::dynamics::ZPP_ColArbiter arb = arbi->elt;		HX_STACK_VAR(arb,"arb");
					HX_STACK_LINE(5785)
					{
						HX_STACK_LINE(5786)
						bool tmp7 = arb->active;		HX_STACK_VAR(tmp7,"tmp7");
						HX_STACK_LINE(5786)
						bool tmp8;		HX_STACK_VAR(tmp8,"tmp8");
						HX_STACK_LINE(5786)
						if ((tmp7)){
							HX_STACK_LINE(5786)
							int tmp9 = arb->immState;		HX_STACK_VAR(tmp9,"tmp9");
							HX_STACK_LINE(5786)
							int tmp10 = ::zpp_nape::util::ZPP_Flags_obj::id_ImmState_ACCEPT;		HX_STACK_VAR(tmp10,"tmp10");
							HX_STACK_LINE(5786)
							int tmp11 = tmp10;		HX_STACK_VAR(tmp11,"tmp11");
							HX_STACK_LINE(5786)
							int tmp12 = (int(tmp9) & int(tmp11));		HX_STACK_VAR(tmp12,"tmp12");
							HX_STACK_LINE(5786)
							int tmp13 = tmp12;		HX_STACK_VAR(tmp13,"tmp13");
							HX_STACK_LINE(5786)
							tmp8 = (tmp13 != (int)0);
						}
						else{
							HX_STACK_LINE(5786)
							tmp8 = false;
						}
						HX_STACK_LINE(5786)
						if ((tmp8)){
							HX_STACK_LINE(5787)
							bool tmp9 = (arb->ptype == (int)2);		HX_STACK_VAR(tmp9,"tmp9");
							HX_STACK_LINE(5787)
							if ((tmp9)){
								HX_STACK_LINE(5787)
								::zpp_nape::dynamics::ZPP_IContact c = arb->c1;		HX_STACK_VAR(c,"c");
								HX_STACK_LINE(5787)
								Float dx = ((Float)0.0);		HX_STACK_VAR(dx,"dx");
								HX_STACK_LINE(5787)
								Float dy = ((Float)0.0);		HX_STACK_VAR(dy,"dy");
								HX_STACK_LINE(5787)
								Float r2x = ((Float)0.0);		HX_STACK_VAR(r2x,"r2x");
								HX_STACK_LINE(5787)
								Float r2y = ((Float)0.0);		HX_STACK_VAR(r2y,"r2y");
								HX_STACK_LINE(5787)
								{
									HX_STACK_LINE(5787)
									Float tmp10 = arb->b2->axisy;		HX_STACK_VAR(tmp10,"tmp10");
									HX_STACK_LINE(5787)
									Float tmp11 = c->lr2x;		HX_STACK_VAR(tmp11,"tmp11");
									HX_STACK_LINE(5787)
									Float tmp12 = (tmp10 * tmp11);		HX_STACK_VAR(tmp12,"tmp12");
									HX_STACK_LINE(5787)
									Float tmp13 = arb->b2->axisx;		HX_STACK_VAR(tmp13,"tmp13");
									HX_STACK_LINE(5787)
									Float tmp14 = c->lr2y;		HX_STACK_VAR(tmp14,"tmp14");
									HX_STACK_LINE(5787)
									Float tmp15 = (tmp13 * tmp14);		HX_STACK_VAR(tmp15,"tmp15");
									HX_STACK_LINE(5787)
									Float tmp16 = (tmp12 - tmp15);		HX_STACK_VAR(tmp16,"tmp16");
									HX_STACK_LINE(5787)
									r2x = tmp16;
									HX_STACK_LINE(5787)
									Float tmp17 = c->lr2x;		HX_STACK_VAR(tmp17,"tmp17");
									HX_STACK_LINE(5787)
									Float tmp18 = arb->b2->axisx;		HX_STACK_VAR(tmp18,"tmp18");
									HX_STACK_LINE(5787)
									Float tmp19 = (tmp17 * tmp18);		HX_STACK_VAR(tmp19,"tmp19");
									HX_STACK_LINE(5787)
									Float tmp20 = c->lr2y;		HX_STACK_VAR(tmp20,"tmp20");
									HX_STACK_LINE(5787)
									Float tmp21 = arb->b2->axisy;		HX_STACK_VAR(tmp21,"tmp21");
									HX_STACK_LINE(5787)
									Float tmp22 = (tmp20 * tmp21);		HX_STACK_VAR(tmp22,"tmp22");
									HX_STACK_LINE(5787)
									Float tmp23 = (tmp19 + tmp22);		HX_STACK_VAR(tmp23,"tmp23");
									HX_STACK_LINE(5787)
									r2y = tmp23;
								}
								HX_STACK_LINE(5787)
								{
									HX_STACK_LINE(5787)
									Float t = ((Float)1.0);		HX_STACK_VAR(t,"t");
									HX_STACK_LINE(5787)
									Float tmp10 = arb->b2->posx;		HX_STACK_VAR(tmp10,"tmp10");
									HX_STACK_LINE(5787)
									Float tmp11 = t;		HX_STACK_VAR(tmp11,"tmp11");
									HX_STACK_LINE(5787)
									Float tmp12 = (tmp10 * tmp11);		HX_STACK_VAR(tmp12,"tmp12");
									HX_STACK_LINE(5787)
									hx::AddEq(r2x,tmp12);
									HX_STACK_LINE(5787)
									Float tmp13 = arb->b2->posy;		HX_STACK_VAR(tmp13,"tmp13");
									HX_STACK_LINE(5787)
									Float tmp14 = t;		HX_STACK_VAR(tmp14,"tmp14");
									HX_STACK_LINE(5787)
									Float tmp15 = (tmp13 * tmp14);		HX_STACK_VAR(tmp15,"tmp15");
									HX_STACK_LINE(5787)
									hx::AddEq(r2y,tmp15);
								}
								HX_STACK_LINE(5787)
								Float r1x = ((Float)0.0);		HX_STACK_VAR(r1x,"r1x");
								HX_STACK_LINE(5787)
								Float r1y = ((Float)0.0);		HX_STACK_VAR(r1y,"r1y");
								HX_STACK_LINE(5787)
								{
									HX_STACK_LINE(5787)
									Float tmp10 = arb->b1->axisy;		HX_STACK_VAR(tmp10,"tmp10");
									HX_STACK_LINE(5787)
									Float tmp11 = c->lr1x;		HX_STACK_VAR(tmp11,"tmp11");
									HX_STACK_LINE(5787)
									Float tmp12 = (tmp10 * tmp11);		HX_STACK_VAR(tmp12,"tmp12");
									HX_STACK_LINE(5787)
									Float tmp13 = arb->b1->axisx;		HX_STACK_VAR(tmp13,"tmp13");
									HX_STACK_LINE(5787)
									Float tmp14 = c->lr1y;		HX_STACK_VAR(tmp14,"tmp14");
									HX_STACK_LINE(5787)
									Float tmp15 = (tmp13 * tmp14);		HX_STACK_VAR(tmp15,"tmp15");
									HX_STACK_LINE(5787)
									Float tmp16 = (tmp12 - tmp15);		HX_STACK_VAR(tmp16,"tmp16");
									HX_STACK_LINE(5787)
									r1x = tmp16;
									HX_STACK_LINE(5787)
									Float tmp17 = c->lr1x;		HX_STACK_VAR(tmp17,"tmp17");
									HX_STACK_LINE(5787)
									Float tmp18 = arb->b1->axisx;		HX_STACK_VAR(tmp18,"tmp18");
									HX_STACK_LINE(5787)
									Float tmp19 = (tmp17 * tmp18);		HX_STACK_VAR(tmp19,"tmp19");
									HX_STACK_LINE(5787)
									Float tmp20 = c->lr1y;		HX_STACK_VAR(tmp20,"tmp20");
									HX_STACK_LINE(5787)
									Float tmp21 = arb->b1->axisy;		HX_STACK_VAR(tmp21,"tmp21");
									HX_STACK_LINE(5787)
									Float tmp22 = (tmp20 * tmp21);		HX_STACK_VAR(tmp22,"tmp22");
									HX_STACK_LINE(5787)
									Float tmp23 = (tmp19 + tmp22);		HX_STACK_VAR(tmp23,"tmp23");
									HX_STACK_LINE(5787)
									r1y = tmp23;
								}
								HX_STACK_LINE(5787)
								{
									HX_STACK_LINE(5787)
									Float t = ((Float)1.0);		HX_STACK_VAR(t,"t");
									HX_STACK_LINE(5787)
									Float tmp10 = arb->b1->posx;		HX_STACK_VAR(tmp10,"tmp10");
									HX_STACK_LINE(5787)
									Float tmp11 = t;		HX_STACK_VAR(tmp11,"tmp11");
									HX_STACK_LINE(5787)
									Float tmp12 = (tmp10 * tmp11);		HX_STACK_VAR(tmp12,"tmp12");
									HX_STACK_LINE(5787)
									hx::AddEq(r1x,tmp12);
									HX_STACK_LINE(5787)
									Float tmp13 = arb->b1->posy;		HX_STACK_VAR(tmp13,"tmp13");
									HX_STACK_LINE(5787)
									Float tmp14 = t;		HX_STACK_VAR(tmp14,"tmp14");
									HX_STACK_LINE(5787)
									Float tmp15 = (tmp13 * tmp14);		HX_STACK_VAR(tmp15,"tmp15");
									HX_STACK_LINE(5787)
									hx::AddEq(r1y,tmp15);
								}
								HX_STACK_LINE(5787)
								Float dx1 = ((Float)0.0);		HX_STACK_VAR(dx1,"dx1");
								HX_STACK_LINE(5787)
								Float dy1 = ((Float)0.0);		HX_STACK_VAR(dy1,"dy1");
								HX_STACK_LINE(5787)
								{
									HX_STACK_LINE(5787)
									Float tmp10 = (r2x - r1x);		HX_STACK_VAR(tmp10,"tmp10");
									HX_STACK_LINE(5787)
									dx1 = tmp10;
									HX_STACK_LINE(5787)
									Float tmp11 = (r2y - r1y);		HX_STACK_VAR(tmp11,"tmp11");
									HX_STACK_LINE(5787)
									dy1 = tmp11;
								}
								HX_STACK_LINE(5787)
								Float tmp10;		HX_STACK_VAR(tmp10,"tmp10");
								HX_STACK_LINE(5787)
								{
									HX_STACK_LINE(5787)
									Float tmp11 = (dx1 * dx1);		HX_STACK_VAR(tmp11,"tmp11");
									HX_STACK_LINE(5787)
									Float tmp12 = (dy1 * dy1);		HX_STACK_VAR(tmp12,"tmp12");
									HX_STACK_LINE(5787)
									Float tmp13 = (tmp11 + tmp12);		HX_STACK_VAR(tmp13,"tmp13");
									HX_STACK_LINE(5787)
									tmp10 = ::Math_obj::sqrt(tmp13);
								}
								HX_STACK_LINE(5787)
								Float dl = tmp10;		HX_STACK_VAR(dl,"dl");
								HX_STACK_LINE(5787)
								Float tmp11 = arb->radius;		HX_STACK_VAR(tmp11,"tmp11");
								HX_STACK_LINE(5787)
								Float tmp12 = ::nape::Config_obj::collisionSlop;		HX_STACK_VAR(tmp12,"tmp12");
								HX_STACK_LINE(5787)
								Float tmp13 = (tmp11 - tmp12);		HX_STACK_VAR(tmp13,"tmp13");
								HX_STACK_LINE(5787)
								Float r = tmp13;		HX_STACK_VAR(r,"r");
								HX_STACK_LINE(5787)
								Float tmp14 = (dl - r);		HX_STACK_VAR(tmp14,"tmp14");
								HX_STACK_LINE(5787)
								Float err = tmp14;		HX_STACK_VAR(err,"err");
								HX_STACK_LINE(5787)
								Float tmp15 = (dx1 * arb->nx);		HX_STACK_VAR(tmp15,"tmp15");
								HX_STACK_LINE(5787)
								Float tmp16 = (dy1 * arb->ny);		HX_STACK_VAR(tmp16,"tmp16");
								HX_STACK_LINE(5787)
								Float tmp17 = (tmp15 + tmp16);		HX_STACK_VAR(tmp17,"tmp17");
								HX_STACK_LINE(5787)
								bool tmp18 = (tmp17 < (int)0);		HX_STACK_VAR(tmp18,"tmp18");
								HX_STACK_LINE(5787)
								if ((tmp18)){
									HX_STACK_LINE(5787)
									{
										HX_STACK_LINE(5787)
										Float tmp19 = dx1;		HX_STACK_VAR(tmp19,"tmp19");
										HX_STACK_LINE(5787)
										Float tmp20 = -(tmp19);		HX_STACK_VAR(tmp20,"tmp20");
										HX_STACK_LINE(5787)
										dx1 = tmp20;
										HX_STACK_LINE(5787)
										Float tmp21 = dy1;		HX_STACK_VAR(tmp21,"tmp21");
										HX_STACK_LINE(5787)
										Float tmp22 = -(tmp21);		HX_STACK_VAR(tmp22,"tmp22");
										HX_STACK_LINE(5787)
										dy1 = tmp22;
									}
									HX_STACK_LINE(5787)
									hx::SubEq(err,arb->radius);
								}
								HX_STACK_LINE(5787)
								bool tmp19 = (err < (int)0);		HX_STACK_VAR(tmp19,"tmp19");
								HX_STACK_LINE(5787)
								if ((tmp19)){
									HX_STACK_LINE(5787)
									Float tmp20 = dl;		HX_STACK_VAR(tmp20,"tmp20");
									HX_STACK_LINE(5787)
									Float tmp21 = ::nape::Config_obj::epsilon;		HX_STACK_VAR(tmp21,"tmp21");
									HX_STACK_LINE(5787)
									bool tmp22 = (tmp20 < tmp21);		HX_STACK_VAR(tmp22,"tmp22");
									HX_STACK_LINE(5787)
									if ((tmp22)){
										HX_STACK_LINE(5787)
										Float tmp23 = arb->b1->smass;		HX_STACK_VAR(tmp23,"tmp23");
										HX_STACK_LINE(5787)
										bool tmp24 = (tmp23 != ((Float)0.0));		HX_STACK_VAR(tmp24,"tmp24");
										HX_STACK_LINE(5787)
										if ((tmp24)){
											HX_STACK_LINE(5787)
											Float tmp25 = ::nape::Config_obj::epsilon;		HX_STACK_VAR(tmp25,"tmp25");
											HX_STACK_LINE(5787)
											Float tmp26 = (tmp25 * (int)10);		HX_STACK_VAR(tmp26,"tmp26");
											HX_STACK_LINE(5787)
											hx::AddEq(arb->b1->posx,tmp26);
										}
										else{
											HX_STACK_LINE(5787)
											Float tmp25 = ::nape::Config_obj::epsilon;		HX_STACK_VAR(tmp25,"tmp25");
											HX_STACK_LINE(5787)
											Float tmp26 = (tmp25 * (int)10);		HX_STACK_VAR(tmp26,"tmp26");
											HX_STACK_LINE(5787)
											hx::AddEq(arb->b2->posx,tmp26);
										}
									}
									else{
										HX_STACK_LINE(5787)
										{
											HX_STACK_LINE(5787)
											Float tmp23 = (Float(((Float)1.0)) / Float(dl));		HX_STACK_VAR(tmp23,"tmp23");
											HX_STACK_LINE(5787)
											Float t = tmp23;		HX_STACK_VAR(t,"t");
											HX_STACK_LINE(5787)
											hx::MultEq(dx1,t);
											HX_STACK_LINE(5787)
											hx::MultEq(dy1,t);
										}
										HX_STACK_LINE(5787)
										Float tmp23 = (r1x + r2x);		HX_STACK_VAR(tmp23,"tmp23");
										HX_STACK_LINE(5787)
										Float tmp24 = (((Float)0.5) * tmp23);		HX_STACK_VAR(tmp24,"tmp24");
										HX_STACK_LINE(5787)
										Float px = tmp24;		HX_STACK_VAR(px,"px");
										HX_STACK_LINE(5787)
										Float tmp25 = (r1y + r2y);		HX_STACK_VAR(tmp25,"tmp25");
										HX_STACK_LINE(5787)
										Float tmp26 = (((Float)0.5) * tmp25);		HX_STACK_VAR(tmp26,"tmp26");
										HX_STACK_LINE(5787)
										Float py = tmp26;		HX_STACK_VAR(py,"py");
										HX_STACK_LINE(5787)
										Float tmp27 = (dl - r);		HX_STACK_VAR(tmp27,"tmp27");
										HX_STACK_LINE(5787)
										Float pen = tmp27;		HX_STACK_VAR(pen,"pen");
										HX_STACK_LINE(5787)
										{
											HX_STACK_LINE(5787)
											Float tmp28 = px;		HX_STACK_VAR(tmp28,"tmp28");
											HX_STACK_LINE(5787)
											Float tmp29 = arb->b1->posx;		HX_STACK_VAR(tmp29,"tmp29");
											HX_STACK_LINE(5787)
											Float tmp30 = (tmp28 - tmp29);		HX_STACK_VAR(tmp30,"tmp30");
											HX_STACK_LINE(5787)
											r1x = tmp30;
											HX_STACK_LINE(5787)
											Float tmp31 = py;		HX_STACK_VAR(tmp31,"tmp31");
											HX_STACK_LINE(5787)
											Float tmp32 = arb->b1->posy;		HX_STACK_VAR(tmp32,"tmp32");
											HX_STACK_LINE(5787)
											Float tmp33 = (tmp31 - tmp32);		HX_STACK_VAR(tmp33,"tmp33");
											HX_STACK_LINE(5787)
											r1y = tmp33;
										}
										HX_STACK_LINE(5787)
										{
											HX_STACK_LINE(5787)
											Float tmp28 = px;		HX_STACK_VAR(tmp28,"tmp28");
											HX_STACK_LINE(5787)
											Float tmp29 = arb->b2->posx;		HX_STACK_VAR(tmp29,"tmp29");
											HX_STACK_LINE(5787)
											Float tmp30 = (tmp28 - tmp29);		HX_STACK_VAR(tmp30,"tmp30");
											HX_STACK_LINE(5787)
											r2x = tmp30;
											HX_STACK_LINE(5787)
											Float tmp31 = py;		HX_STACK_VAR(tmp31,"tmp31");
											HX_STACK_LINE(5787)
											Float tmp32 = arb->b2->posy;		HX_STACK_VAR(tmp32,"tmp32");
											HX_STACK_LINE(5787)
											Float tmp33 = (tmp31 - tmp32);		HX_STACK_VAR(tmp33,"tmp33");
											HX_STACK_LINE(5787)
											r2y = tmp33;
										}
										HX_STACK_LINE(5787)
										Float tmp28 = (dy1 * r1x);		HX_STACK_VAR(tmp28,"tmp28");
										HX_STACK_LINE(5787)
										Float tmp29 = (dx1 * r1y);		HX_STACK_VAR(tmp29,"tmp29");
										HX_STACK_LINE(5787)
										Float tmp30 = (tmp28 - tmp29);		HX_STACK_VAR(tmp30,"tmp30");
										HX_STACK_LINE(5787)
										Float rn1 = tmp30;		HX_STACK_VAR(rn1,"rn1");
										HX_STACK_LINE(5787)
										Float tmp31 = (dy1 * r2x);		HX_STACK_VAR(tmp31,"tmp31");
										HX_STACK_LINE(5787)
										Float tmp32 = (dx1 * r2y);		HX_STACK_VAR(tmp32,"tmp32");
										HX_STACK_LINE(5787)
										Float tmp33 = (tmp31 - tmp32);		HX_STACK_VAR(tmp33,"tmp33");
										HX_STACK_LINE(5787)
										Float rn2 = tmp33;		HX_STACK_VAR(rn2,"rn2");
										HX_STACK_LINE(5787)
										Float tmp34 = arb->b2->smass;		HX_STACK_VAR(tmp34,"tmp34");
										HX_STACK_LINE(5787)
										Float tmp35 = (rn2 * rn2);		HX_STACK_VAR(tmp35,"tmp35");
										HX_STACK_LINE(5787)
										Float tmp36 = arb->b2->sinertia;		HX_STACK_VAR(tmp36,"tmp36");
										HX_STACK_LINE(5787)
										Float tmp37 = (tmp35 * tmp36);		HX_STACK_VAR(tmp37,"tmp37");
										HX_STACK_LINE(5787)
										Float tmp38 = (tmp34 + tmp37);		HX_STACK_VAR(tmp38,"tmp38");
										HX_STACK_LINE(5787)
										Float tmp39 = arb->b1->smass;		HX_STACK_VAR(tmp39,"tmp39");
										HX_STACK_LINE(5787)
										Float tmp40 = (tmp38 + tmp39);		HX_STACK_VAR(tmp40,"tmp40");
										HX_STACK_LINE(5787)
										Float tmp41 = (rn1 * rn1);		HX_STACK_VAR(tmp41,"tmp41");
										HX_STACK_LINE(5787)
										Float tmp42 = arb->b1->sinertia;		HX_STACK_VAR(tmp42,"tmp42");
										HX_STACK_LINE(5787)
										Float tmp43 = (tmp41 * tmp42);		HX_STACK_VAR(tmp43,"tmp43");
										HX_STACK_LINE(5787)
										Float tmp44 = (tmp40 + tmp43);		HX_STACK_VAR(tmp44,"tmp44");
										HX_STACK_LINE(5787)
										Float K = tmp44;		HX_STACK_VAR(K,"K");
										HX_STACK_LINE(5787)
										bool tmp45 = (K != (int)0);		HX_STACK_VAR(tmp45,"tmp45");
										HX_STACK_LINE(5787)
										if ((tmp45)){
											HX_STACK_LINE(5787)
											Float tmp46 = arb->biasCoef;		HX_STACK_VAR(tmp46,"tmp46");
											HX_STACK_LINE(5787)
											Float tmp47 = -(tmp46);		HX_STACK_VAR(tmp47,"tmp47");
											HX_STACK_LINE(5787)
											Float tmp48 = pen;		HX_STACK_VAR(tmp48,"tmp48");
											HX_STACK_LINE(5787)
											Float tmp49 = (tmp47 * tmp48);		HX_STACK_VAR(tmp49,"tmp49");
											HX_STACK_LINE(5787)
											Float tmp50 = K;		HX_STACK_VAR(tmp50,"tmp50");
											HX_STACK_LINE(5787)
											Float tmp51 = (Float(tmp49) / Float(tmp50));		HX_STACK_VAR(tmp51,"tmp51");
											HX_STACK_LINE(5787)
											Float jn = tmp51;		HX_STACK_VAR(jn,"jn");
											HX_STACK_LINE(5787)
											Float Jx = ((Float)0.0);		HX_STACK_VAR(Jx,"Jx");
											HX_STACK_LINE(5787)
											Float Jy = ((Float)0.0);		HX_STACK_VAR(Jy,"Jy");
											HX_STACK_LINE(5787)
											{
												HX_STACK_LINE(5787)
												Float t = jn;		HX_STACK_VAR(t,"t");
												HX_STACK_LINE(5787)
												Float tmp52 = (dx1 * t);		HX_STACK_VAR(tmp52,"tmp52");
												HX_STACK_LINE(5787)
												Jx = tmp52;
												HX_STACK_LINE(5787)
												Float tmp53 = (dy1 * t);		HX_STACK_VAR(tmp53,"tmp53");
												HX_STACK_LINE(5787)
												Jy = tmp53;
											}
											HX_STACK_LINE(5787)
											{
												HX_STACK_LINE(5787)
												Float tmp52 = arb->b1->imass;		HX_STACK_VAR(tmp52,"tmp52");
												HX_STACK_LINE(5787)
												Float t = tmp52;		HX_STACK_VAR(t,"t");
												HX_STACK_LINE(5787)
												Float tmp53 = (Jx * t);		HX_STACK_VAR(tmp53,"tmp53");
												HX_STACK_LINE(5787)
												hx::SubEq(arb->b1->posx,tmp53);
												HX_STACK_LINE(5787)
												Float tmp54 = (Jy * t);		HX_STACK_VAR(tmp54,"tmp54");
												HX_STACK_LINE(5787)
												hx::SubEq(arb->b1->posy,tmp54);
											}
											HX_STACK_LINE(5787)
											{
												HX_STACK_LINE(5787)
												::zpp_nape::phys::ZPP_Body _this = arb->b1;		HX_STACK_VAR(_this,"_this");
												HX_STACK_LINE(5787)
												Float tmp52 = rn1;		HX_STACK_VAR(tmp52,"tmp52");
												HX_STACK_LINE(5787)
												Float tmp53 = -(tmp52);		HX_STACK_VAR(tmp53,"tmp53");
												HX_STACK_LINE(5787)
												Float tmp54 = arb->b1->iinertia;		HX_STACK_VAR(tmp54,"tmp54");
												HX_STACK_LINE(5787)
												Float tmp55 = (tmp53 * tmp54);		HX_STACK_VAR(tmp55,"tmp55");
												HX_STACK_LINE(5787)
												Float tmp56 = jn;		HX_STACK_VAR(tmp56,"tmp56");
												HX_STACK_LINE(5787)
												Float tmp57 = (tmp55 * tmp56);		HX_STACK_VAR(tmp57,"tmp57");
												HX_STACK_LINE(5787)
												Float dr = tmp57;		HX_STACK_VAR(dr,"dr");
												HX_STACK_LINE(5787)
												hx::AddEq(_this->rot,dr);
												HX_STACK_LINE(5787)
												Float tmp58 = (dr * dr);		HX_STACK_VAR(tmp58,"tmp58");
												HX_STACK_LINE(5787)
												bool tmp59 = (tmp58 > ((Float)0.0001));		HX_STACK_VAR(tmp59,"tmp59");
												HX_STACK_LINE(5787)
												if ((tmp59)){
													HX_STACK_LINE(5787)
													Float tmp60 = _this->rot;		HX_STACK_VAR(tmp60,"tmp60");
													HX_STACK_LINE(5787)
													Float tmp61 = ::Math_obj::sin(tmp60);		HX_STACK_VAR(tmp61,"tmp61");
													HX_STACK_LINE(5787)
													_this->axisx = tmp61;
													HX_STACK_LINE(5787)
													Float tmp62 = _this->rot;		HX_STACK_VAR(tmp62,"tmp62");
													HX_STACK_LINE(5787)
													Float tmp63 = ::Math_obj::cos(tmp62);		HX_STACK_VAR(tmp63,"tmp63");
													HX_STACK_LINE(5787)
													_this->axisy = tmp63;
													HX_STACK_LINE(5787)
													Dynamic();
												}
												else{
													HX_STACK_LINE(5787)
													Float tmp60 = (dr * dr);		HX_STACK_VAR(tmp60,"tmp60");
													HX_STACK_LINE(5787)
													Float d2 = tmp60;		HX_STACK_VAR(d2,"d2");
													HX_STACK_LINE(5787)
													Float tmp61 = (((Float)0.5) * d2);		HX_STACK_VAR(tmp61,"tmp61");
													HX_STACK_LINE(5787)
													Float tmp62 = ((int)1 - tmp61);		HX_STACK_VAR(tmp62,"tmp62");
													HX_STACK_LINE(5787)
													Float p = tmp62;		HX_STACK_VAR(p,"p");
													HX_STACK_LINE(5787)
													Float tmp63 = (d2 * d2);		HX_STACK_VAR(tmp63,"tmp63");
													HX_STACK_LINE(5787)
													Float tmp64 = (Float(tmp63) / Float((int)8));		HX_STACK_VAR(tmp64,"tmp64");
													HX_STACK_LINE(5787)
													Float tmp65 = ((int)1 - tmp64);		HX_STACK_VAR(tmp65,"tmp65");
													HX_STACK_LINE(5787)
													Float m = tmp65;		HX_STACK_VAR(m,"m");
													HX_STACK_LINE(5787)
													Float tmp66 = (p * _this->axisx);		HX_STACK_VAR(tmp66,"tmp66");
													HX_STACK_LINE(5787)
													Float tmp67 = (dr * _this->axisy);		HX_STACK_VAR(tmp67,"tmp67");
													HX_STACK_LINE(5787)
													Float tmp68 = (tmp66 + tmp67);		HX_STACK_VAR(tmp68,"tmp68");
													HX_STACK_LINE(5787)
													Float tmp69 = m;		HX_STACK_VAR(tmp69,"tmp69");
													HX_STACK_LINE(5787)
													Float tmp70 = (tmp68 * tmp69);		HX_STACK_VAR(tmp70,"tmp70");
													HX_STACK_LINE(5787)
													Float nx = tmp70;		HX_STACK_VAR(nx,"nx");
													HX_STACK_LINE(5787)
													Float tmp71 = (p * _this->axisy);		HX_STACK_VAR(tmp71,"tmp71");
													HX_STACK_LINE(5787)
													Float tmp72 = (dr * _this->axisx);		HX_STACK_VAR(tmp72,"tmp72");
													HX_STACK_LINE(5787)
													Float tmp73 = (tmp71 - tmp72);		HX_STACK_VAR(tmp73,"tmp73");
													HX_STACK_LINE(5787)
													Float tmp74 = m;		HX_STACK_VAR(tmp74,"tmp74");
													HX_STACK_LINE(5787)
													Float tmp75 = (tmp73 * tmp74);		HX_STACK_VAR(tmp75,"tmp75");
													HX_STACK_LINE(5787)
													_this->axisy = tmp75;
													HX_STACK_LINE(5787)
													_this->axisx = nx;
												}
											}
											HX_STACK_LINE(5787)
											{
												HX_STACK_LINE(5787)
												Float tmp52 = arb->b2->imass;		HX_STACK_VAR(tmp52,"tmp52");
												HX_STACK_LINE(5787)
												Float t = tmp52;		HX_STACK_VAR(t,"t");
												HX_STACK_LINE(5787)
												Float tmp53 = (Jx * t);		HX_STACK_VAR(tmp53,"tmp53");
												HX_STACK_LINE(5787)
												hx::AddEq(arb->b2->posx,tmp53);
												HX_STACK_LINE(5787)
												Float tmp54 = (Jy * t);		HX_STACK_VAR(tmp54,"tmp54");
												HX_STACK_LINE(5787)
												hx::AddEq(arb->b2->posy,tmp54);
											}
											HX_STACK_LINE(5787)
											{
												HX_STACK_LINE(5787)
												::zpp_nape::phys::ZPP_Body _this = arb->b2;		HX_STACK_VAR(_this,"_this");
												HX_STACK_LINE(5787)
												Float tmp52 = rn2;		HX_STACK_VAR(tmp52,"tmp52");
												HX_STACK_LINE(5787)
												Float tmp53 = arb->b2->iinertia;		HX_STACK_VAR(tmp53,"tmp53");
												HX_STACK_LINE(5787)
												Float tmp54 = (tmp52 * tmp53);		HX_STACK_VAR(tmp54,"tmp54");
												HX_STACK_LINE(5787)
												Float tmp55 = jn;		HX_STACK_VAR(tmp55,"tmp55");
												HX_STACK_LINE(5787)
												Float tmp56 = (tmp54 * tmp55);		HX_STACK_VAR(tmp56,"tmp56");
												HX_STACK_LINE(5787)
												Float dr = tmp56;		HX_STACK_VAR(dr,"dr");
												HX_STACK_LINE(5787)
												hx::AddEq(_this->rot,dr);
												HX_STACK_LINE(5787)
												Float tmp57 = (dr * dr);		HX_STACK_VAR(tmp57,"tmp57");
												HX_STACK_LINE(5787)
												bool tmp58 = (tmp57 > ((Float)0.0001));		HX_STACK_VAR(tmp58,"tmp58");
												HX_STACK_LINE(5787)
												if ((tmp58)){
													HX_STACK_LINE(5787)
													Float tmp59 = _this->rot;		HX_STACK_VAR(tmp59,"tmp59");
													HX_STACK_LINE(5787)
													Float tmp60 = ::Math_obj::sin(tmp59);		HX_STACK_VAR(tmp60,"tmp60");
													HX_STACK_LINE(5787)
													_this->axisx = tmp60;
													HX_STACK_LINE(5787)
													Float tmp61 = _this->rot;		HX_STACK_VAR(tmp61,"tmp61");
													HX_STACK_LINE(5787)
													Float tmp62 = ::Math_obj::cos(tmp61);		HX_STACK_VAR(tmp62,"tmp62");
													HX_STACK_LINE(5787)
													_this->axisy = tmp62;
													HX_STACK_LINE(5787)
													Dynamic();
												}
												else{
													HX_STACK_LINE(5787)
													Float tmp59 = (dr * dr);		HX_STACK_VAR(tmp59,"tmp59");
													HX_STACK_LINE(5787)
													Float d2 = tmp59;		HX_STACK_VAR(d2,"d2");
													HX_STACK_LINE(5787)
													Float tmp60 = (((Float)0.5) * d2);		HX_STACK_VAR(tmp60,"tmp60");
													HX_STACK_LINE(5787)
													Float tmp61 = ((int)1 - tmp60);		HX_STACK_VAR(tmp61,"tmp61");
													HX_STACK_LINE(5787)
													Float p = tmp61;		HX_STACK_VAR(p,"p");
													HX_STACK_LINE(5787)
													Float tmp62 = (d2 * d2);		HX_STACK_VAR(tmp62,"tmp62");
													HX_STACK_LINE(5787)
													Float tmp63 = (Float(tmp62) / Float((int)8));		HX_STACK_VAR(tmp63,"tmp63");
													HX_STACK_LINE(5787)
													Float tmp64 = ((int)1 - tmp63);		HX_STACK_VAR(tmp64,"tmp64");
													HX_STACK_LINE(5787)
													Float m = tmp64;		HX_STACK_VAR(m,"m");
													HX_STACK_LINE(5787)
													Float tmp65 = (p * _this->axisx);		HX_STACK_VAR(tmp65,"tmp65");
													HX_STACK_LINE(5787)
													Float tmp66 = (dr * _this->axisy);		HX_STACK_VAR(tmp66,"tmp66");
													HX_STACK_LINE(5787)
													Float tmp67 = (tmp65 + tmp66);		HX_STACK_VAR(tmp67,"tmp67");
													HX_STACK_LINE(5787)
													Float tmp68 = m;		HX_STACK_VAR(tmp68,"tmp68");
													HX_STACK_LINE(5787)
													Float tmp69 = (tmp67 * tmp68);		HX_STACK_VAR(tmp69,"tmp69");
													HX_STACK_LINE(5787)
													Float nx = tmp69;		HX_STACK_VAR(nx,"nx");
													HX_STACK_LINE(5787)
													Float tmp70 = (p * _this->axisy);		HX_STACK_VAR(tmp70,"tmp70");
													HX_STACK_LINE(5787)
													Float tmp71 = (dr * _this->axisx);		HX_STACK_VAR(tmp71,"tmp71");
													HX_STACK_LINE(5787)
													Float tmp72 = (tmp70 - tmp71);		HX_STACK_VAR(tmp72,"tmp72");
													HX_STACK_LINE(5787)
													Float tmp73 = m;		HX_STACK_VAR(tmp73,"tmp73");
													HX_STACK_LINE(5787)
													Float tmp74 = (tmp72 * tmp73);		HX_STACK_VAR(tmp74,"tmp74");
													HX_STACK_LINE(5787)
													_this->axisy = tmp74;
													HX_STACK_LINE(5787)
													_this->axisx = nx;
												}
											}
										}
									}
								}
							}
							else{
								HX_STACK_LINE(5787)
								Float gnormx = ((Float)0.0);		HX_STACK_VAR(gnormx,"gnormx");
								HX_STACK_LINE(5787)
								Float gnormy = ((Float)0.0);		HX_STACK_VAR(gnormy,"gnormy");
								HX_STACK_LINE(5787)
								Float gproj;		HX_STACK_VAR(gproj,"gproj");
								HX_STACK_LINE(5787)
								Float clip1x = ((Float)0.0);		HX_STACK_VAR(clip1x,"clip1x");
								HX_STACK_LINE(5787)
								Float clip1y = ((Float)0.0);		HX_STACK_VAR(clip1y,"clip1y");
								HX_STACK_LINE(5787)
								Float clip2x = (int)0;		HX_STACK_VAR(clip2x,"clip2x");
								HX_STACK_LINE(5787)
								Float clip2y = (int)0;		HX_STACK_VAR(clip2y,"clip2y");
								HX_STACK_LINE(5787)
								bool tmp10 = (arb->ptype == (int)0);		HX_STACK_VAR(tmp10,"tmp10");
								HX_STACK_LINE(5787)
								if ((tmp10)){
									HX_STACK_LINE(5787)
									{
										HX_STACK_LINE(5787)
										Float tmp11 = arb->b1->axisy;		HX_STACK_VAR(tmp11,"tmp11");
										HX_STACK_LINE(5787)
										Float tmp12 = arb->lnormx;		HX_STACK_VAR(tmp12,"tmp12");
										HX_STACK_LINE(5787)
										Float tmp13 = (tmp11 * tmp12);		HX_STACK_VAR(tmp13,"tmp13");
										HX_STACK_LINE(5787)
										Float tmp14 = arb->b1->axisx;		HX_STACK_VAR(tmp14,"tmp14");
										HX_STACK_LINE(5787)
										Float tmp15 = arb->lnormy;		HX_STACK_VAR(tmp15,"tmp15");
										HX_STACK_LINE(5787)
										Float tmp16 = (tmp14 * tmp15);		HX_STACK_VAR(tmp16,"tmp16");
										HX_STACK_LINE(5787)
										Float tmp17 = (tmp13 - tmp16);		HX_STACK_VAR(tmp17,"tmp17");
										HX_STACK_LINE(5787)
										gnormx = tmp17;
										HX_STACK_LINE(5787)
										Float tmp18 = arb->lnormx;		HX_STACK_VAR(tmp18,"tmp18");
										HX_STACK_LINE(5787)
										Float tmp19 = arb->b1->axisx;		HX_STACK_VAR(tmp19,"tmp19");
										HX_STACK_LINE(5787)
										Float tmp20 = (tmp18 * tmp19);		HX_STACK_VAR(tmp20,"tmp20");
										HX_STACK_LINE(5787)
										Float tmp21 = arb->lnormy;		HX_STACK_VAR(tmp21,"tmp21");
										HX_STACK_LINE(5787)
										Float tmp22 = arb->b1->axisy;		HX_STACK_VAR(tmp22,"tmp22");
										HX_STACK_LINE(5787)
										Float tmp23 = (tmp21 * tmp22);		HX_STACK_VAR(tmp23,"tmp23");
										HX_STACK_LINE(5787)
										Float tmp24 = (tmp20 + tmp23);		HX_STACK_VAR(tmp24,"tmp24");
										HX_STACK_LINE(5787)
										gnormy = tmp24;
									}
									HX_STACK_LINE(5787)
									Float tmp11 = arb->lproj;		HX_STACK_VAR(tmp11,"tmp11");
									HX_STACK_LINE(5787)
									Float tmp12 = gnormx;		HX_STACK_VAR(tmp12,"tmp12");
									HX_STACK_LINE(5787)
									Float tmp13 = arb->b1->posx;		HX_STACK_VAR(tmp13,"tmp13");
									HX_STACK_LINE(5787)
									Float tmp14 = (tmp12 * tmp13);		HX_STACK_VAR(tmp14,"tmp14");
									HX_STACK_LINE(5787)
									Float tmp15 = gnormy;		HX_STACK_VAR(tmp15,"tmp15");
									HX_STACK_LINE(5787)
									Float tmp16 = arb->b1->posy;		HX_STACK_VAR(tmp16,"tmp16");
									HX_STACK_LINE(5787)
									Float tmp17 = (tmp15 * tmp16);		HX_STACK_VAR(tmp17,"tmp17");
									HX_STACK_LINE(5787)
									Float tmp18 = (tmp14 + tmp17);		HX_STACK_VAR(tmp18,"tmp18");
									HX_STACK_LINE(5787)
									Float tmp19 = (tmp11 + tmp18);		HX_STACK_VAR(tmp19,"tmp19");
									HX_STACK_LINE(5787)
									gproj = tmp19;
									HX_STACK_LINE(5787)
									{
										HX_STACK_LINE(5787)
										Float tmp20 = arb->b2->axisy;		HX_STACK_VAR(tmp20,"tmp20");
										HX_STACK_LINE(5787)
										Float tmp21 = arb->c1->lr1x;		HX_STACK_VAR(tmp21,"tmp21");
										HX_STACK_LINE(5787)
										Float tmp22 = (tmp20 * tmp21);		HX_STACK_VAR(tmp22,"tmp22");
										HX_STACK_LINE(5787)
										Float tmp23 = arb->b2->axisx;		HX_STACK_VAR(tmp23,"tmp23");
										HX_STACK_LINE(5787)
										Float tmp24 = arb->c1->lr1y;		HX_STACK_VAR(tmp24,"tmp24");
										HX_STACK_LINE(5787)
										Float tmp25 = (tmp23 * tmp24);		HX_STACK_VAR(tmp25,"tmp25");
										HX_STACK_LINE(5787)
										Float tmp26 = (tmp22 - tmp25);		HX_STACK_VAR(tmp26,"tmp26");
										HX_STACK_LINE(5787)
										clip1x = tmp26;
										HX_STACK_LINE(5787)
										Float tmp27 = arb->c1->lr1x;		HX_STACK_VAR(tmp27,"tmp27");
										HX_STACK_LINE(5787)
										Float tmp28 = arb->b2->axisx;		HX_STACK_VAR(tmp28,"tmp28");
										HX_STACK_LINE(5787)
										Float tmp29 = (tmp27 * tmp28);		HX_STACK_VAR(tmp29,"tmp29");
										HX_STACK_LINE(5787)
										Float tmp30 = arb->c1->lr1y;		HX_STACK_VAR(tmp30,"tmp30");
										HX_STACK_LINE(5787)
										Float tmp31 = arb->b2->axisy;		HX_STACK_VAR(tmp31,"tmp31");
										HX_STACK_LINE(5787)
										Float tmp32 = (tmp30 * tmp31);		HX_STACK_VAR(tmp32,"tmp32");
										HX_STACK_LINE(5787)
										Float tmp33 = (tmp29 + tmp32);		HX_STACK_VAR(tmp33,"tmp33");
										HX_STACK_LINE(5787)
										clip1y = tmp33;
									}
									HX_STACK_LINE(5787)
									{
										HX_STACK_LINE(5787)
										Float t = ((Float)1.0);		HX_STACK_VAR(t,"t");
										HX_STACK_LINE(5787)
										Float tmp20 = arb->b2->posx;		HX_STACK_VAR(tmp20,"tmp20");
										HX_STACK_LINE(5787)
										Float tmp21 = t;		HX_STACK_VAR(tmp21,"tmp21");
										HX_STACK_LINE(5787)
										Float tmp22 = (tmp20 * tmp21);		HX_STACK_VAR(tmp22,"tmp22");
										HX_STACK_LINE(5787)
										hx::AddEq(clip1x,tmp22);
										HX_STACK_LINE(5787)
										Float tmp23 = arb->b2->posy;		HX_STACK_VAR(tmp23,"tmp23");
										HX_STACK_LINE(5787)
										Float tmp24 = t;		HX_STACK_VAR(tmp24,"tmp24");
										HX_STACK_LINE(5787)
										Float tmp25 = (tmp23 * tmp24);		HX_STACK_VAR(tmp25,"tmp25");
										HX_STACK_LINE(5787)
										hx::AddEq(clip1y,tmp25);
									}
									HX_STACK_LINE(5787)
									bool tmp20 = arb->hpc2;		HX_STACK_VAR(tmp20,"tmp20");
									HX_STACK_LINE(5787)
									if ((tmp20)){
										HX_STACK_LINE(5787)
										{
											HX_STACK_LINE(5787)
											Float tmp21 = arb->b2->axisy;		HX_STACK_VAR(tmp21,"tmp21");
											HX_STACK_LINE(5787)
											Float tmp22 = arb->c2->lr1x;		HX_STACK_VAR(tmp22,"tmp22");
											HX_STACK_LINE(5787)
											Float tmp23 = (tmp21 * tmp22);		HX_STACK_VAR(tmp23,"tmp23");
											HX_STACK_LINE(5787)
											Float tmp24 = arb->b2->axisx;		HX_STACK_VAR(tmp24,"tmp24");
											HX_STACK_LINE(5787)
											Float tmp25 = arb->c2->lr1y;		HX_STACK_VAR(tmp25,"tmp25");
											HX_STACK_LINE(5787)
											Float tmp26 = (tmp24 * tmp25);		HX_STACK_VAR(tmp26,"tmp26");
											HX_STACK_LINE(5787)
											Float tmp27 = (tmp23 - tmp26);		HX_STACK_VAR(tmp27,"tmp27");
											HX_STACK_LINE(5787)
											clip2x = tmp27;
											HX_STACK_LINE(5787)
											Float tmp28 = arb->c2->lr1x;		HX_STACK_VAR(tmp28,"tmp28");
											HX_STACK_LINE(5787)
											Float tmp29 = arb->b2->axisx;		HX_STACK_VAR(tmp29,"tmp29");
											HX_STACK_LINE(5787)
											Float tmp30 = (tmp28 * tmp29);		HX_STACK_VAR(tmp30,"tmp30");
											HX_STACK_LINE(5787)
											Float tmp31 = arb->c2->lr1y;		HX_STACK_VAR(tmp31,"tmp31");
											HX_STACK_LINE(5787)
											Float tmp32 = arb->b2->axisy;		HX_STACK_VAR(tmp32,"tmp32");
											HX_STACK_LINE(5787)
											Float tmp33 = (tmp31 * tmp32);		HX_STACK_VAR(tmp33,"tmp33");
											HX_STACK_LINE(5787)
											Float tmp34 = (tmp30 + tmp33);		HX_STACK_VAR(tmp34,"tmp34");
											HX_STACK_LINE(5787)
											clip2y = tmp34;
										}
										HX_STACK_LINE(5787)
										{
											HX_STACK_LINE(5787)
											Float t = ((Float)1.0);		HX_STACK_VAR(t,"t");
											HX_STACK_LINE(5787)
											Float tmp21 = arb->b2->posx;		HX_STACK_VAR(tmp21,"tmp21");
											HX_STACK_LINE(5787)
											Float tmp22 = t;		HX_STACK_VAR(tmp22,"tmp22");
											HX_STACK_LINE(5787)
											Float tmp23 = (tmp21 * tmp22);		HX_STACK_VAR(tmp23,"tmp23");
											HX_STACK_LINE(5787)
											hx::AddEq(clip2x,tmp23);
											HX_STACK_LINE(5787)
											Float tmp24 = arb->b2->posy;		HX_STACK_VAR(tmp24,"tmp24");
											HX_STACK_LINE(5787)
											Float tmp25 = t;		HX_STACK_VAR(tmp25,"tmp25");
											HX_STACK_LINE(5787)
											Float tmp26 = (tmp24 * tmp25);		HX_STACK_VAR(tmp26,"tmp26");
											HX_STACK_LINE(5787)
											hx::AddEq(clip2y,tmp26);
										}
									}
								}
								else{
									HX_STACK_LINE(5787)
									{
										HX_STACK_LINE(5787)
										Float tmp11 = arb->b2->axisy;		HX_STACK_VAR(tmp11,"tmp11");
										HX_STACK_LINE(5787)
										Float tmp12 = arb->lnormx;		HX_STACK_VAR(tmp12,"tmp12");
										HX_STACK_LINE(5787)
										Float tmp13 = (tmp11 * tmp12);		HX_STACK_VAR(tmp13,"tmp13");
										HX_STACK_LINE(5787)
										Float tmp14 = arb->b2->axisx;		HX_STACK_VAR(tmp14,"tmp14");
										HX_STACK_LINE(5787)
										Float tmp15 = arb->lnormy;		HX_STACK_VAR(tmp15,"tmp15");
										HX_STACK_LINE(5787)
										Float tmp16 = (tmp14 * tmp15);		HX_STACK_VAR(tmp16,"tmp16");
										HX_STACK_LINE(5787)
										Float tmp17 = (tmp13 - tmp16);		HX_STACK_VAR(tmp17,"tmp17");
										HX_STACK_LINE(5787)
										gnormx = tmp17;
										HX_STACK_LINE(5787)
										Float tmp18 = arb->lnormx;		HX_STACK_VAR(tmp18,"tmp18");
										HX_STACK_LINE(5787)
										Float tmp19 = arb->b2->axisx;		HX_STACK_VAR(tmp19,"tmp19");
										HX_STACK_LINE(5787)
										Float tmp20 = (tmp18 * tmp19);		HX_STACK_VAR(tmp20,"tmp20");
										HX_STACK_LINE(5787)
										Float tmp21 = arb->lnormy;		HX_STACK_VAR(tmp21,"tmp21");
										HX_STACK_LINE(5787)
										Float tmp22 = arb->b2->axisy;		HX_STACK_VAR(tmp22,"tmp22");
										HX_STACK_LINE(5787)
										Float tmp23 = (tmp21 * tmp22);		HX_STACK_VAR(tmp23,"tmp23");
										HX_STACK_LINE(5787)
										Float tmp24 = (tmp20 + tmp23);		HX_STACK_VAR(tmp24,"tmp24");
										HX_STACK_LINE(5787)
										gnormy = tmp24;
									}
									HX_STACK_LINE(5787)
									Float tmp11 = arb->lproj;		HX_STACK_VAR(tmp11,"tmp11");
									HX_STACK_LINE(5787)
									Float tmp12 = gnormx;		HX_STACK_VAR(tmp12,"tmp12");
									HX_STACK_LINE(5787)
									Float tmp13 = arb->b2->posx;		HX_STACK_VAR(tmp13,"tmp13");
									HX_STACK_LINE(5787)
									Float tmp14 = (tmp12 * tmp13);		HX_STACK_VAR(tmp14,"tmp14");
									HX_STACK_LINE(5787)
									Float tmp15 = gnormy;		HX_STACK_VAR(tmp15,"tmp15");
									HX_STACK_LINE(5787)
									Float tmp16 = arb->b2->posy;		HX_STACK_VAR(tmp16,"tmp16");
									HX_STACK_LINE(5787)
									Float tmp17 = (tmp15 * tmp16);		HX_STACK_VAR(tmp17,"tmp17");
									HX_STACK_LINE(5787)
									Float tmp18 = (tmp14 + tmp17);		HX_STACK_VAR(tmp18,"tmp18");
									HX_STACK_LINE(5787)
									Float tmp19 = (tmp11 + tmp18);		HX_STACK_VAR(tmp19,"tmp19");
									HX_STACK_LINE(5787)
									gproj = tmp19;
									HX_STACK_LINE(5787)
									{
										HX_STACK_LINE(5787)
										Float tmp20 = arb->b1->axisy;		HX_STACK_VAR(tmp20,"tmp20");
										HX_STACK_LINE(5787)
										Float tmp21 = arb->c1->lr1x;		HX_STACK_VAR(tmp21,"tmp21");
										HX_STACK_LINE(5787)
										Float tmp22 = (tmp20 * tmp21);		HX_STACK_VAR(tmp22,"tmp22");
										HX_STACK_LINE(5787)
										Float tmp23 = arb->b1->axisx;		HX_STACK_VAR(tmp23,"tmp23");
										HX_STACK_LINE(5787)
										Float tmp24 = arb->c1->lr1y;		HX_STACK_VAR(tmp24,"tmp24");
										HX_STACK_LINE(5787)
										Float tmp25 = (tmp23 * tmp24);		HX_STACK_VAR(tmp25,"tmp25");
										HX_STACK_LINE(5787)
										Float tmp26 = (tmp22 - tmp25);		HX_STACK_VAR(tmp26,"tmp26");
										HX_STACK_LINE(5787)
										clip1x = tmp26;
										HX_STACK_LINE(5787)
										Float tmp27 = arb->c1->lr1x;		HX_STACK_VAR(tmp27,"tmp27");
										HX_STACK_LINE(5787)
										Float tmp28 = arb->b1->axisx;		HX_STACK_VAR(tmp28,"tmp28");
										HX_STACK_LINE(5787)
										Float tmp29 = (tmp27 * tmp28);		HX_STACK_VAR(tmp29,"tmp29");
										HX_STACK_LINE(5787)
										Float tmp30 = arb->c1->lr1y;		HX_STACK_VAR(tmp30,"tmp30");
										HX_STACK_LINE(5787)
										Float tmp31 = arb->b1->axisy;		HX_STACK_VAR(tmp31,"tmp31");
										HX_STACK_LINE(5787)
										Float tmp32 = (tmp30 * tmp31);		HX_STACK_VAR(tmp32,"tmp32");
										HX_STACK_LINE(5787)
										Float tmp33 = (tmp29 + tmp32);		HX_STACK_VAR(tmp33,"tmp33");
										HX_STACK_LINE(5787)
										clip1y = tmp33;
									}
									HX_STACK_LINE(5787)
									{
										HX_STACK_LINE(5787)
										Float t = ((Float)1.0);		HX_STACK_VAR(t,"t");
										HX_STACK_LINE(5787)
										Float tmp20 = arb->b1->posx;		HX_STACK_VAR(tmp20,"tmp20");
										HX_STACK_LINE(5787)
										Float tmp21 = t;		HX_STACK_VAR(tmp21,"tmp21");
										HX_STACK_LINE(5787)
										Float tmp22 = (tmp20 * tmp21);		HX_STACK_VAR(tmp22,"tmp22");
										HX_STACK_LINE(5787)
										hx::AddEq(clip1x,tmp22);
										HX_STACK_LINE(5787)
										Float tmp23 = arb->b1->posy;		HX_STACK_VAR(tmp23,"tmp23");
										HX_STACK_LINE(5787)
										Float tmp24 = t;		HX_STACK_VAR(tmp24,"tmp24");
										HX_STACK_LINE(5787)
										Float tmp25 = (tmp23 * tmp24);		HX_STACK_VAR(tmp25,"tmp25");
										HX_STACK_LINE(5787)
										hx::AddEq(clip1y,tmp25);
									}
									HX_STACK_LINE(5787)
									bool tmp20 = arb->hpc2;		HX_STACK_VAR(tmp20,"tmp20");
									HX_STACK_LINE(5787)
									if ((tmp20)){
										HX_STACK_LINE(5787)
										{
											HX_STACK_LINE(5787)
											Float tmp21 = arb->b1->axisy;		HX_STACK_VAR(tmp21,"tmp21");
											HX_STACK_LINE(5787)
											Float tmp22 = arb->c2->lr1x;		HX_STACK_VAR(tmp22,"tmp22");
											HX_STACK_LINE(5787)
											Float tmp23 = (tmp21 * tmp22);		HX_STACK_VAR(tmp23,"tmp23");
											HX_STACK_LINE(5787)
											Float tmp24 = arb->b1->axisx;		HX_STACK_VAR(tmp24,"tmp24");
											HX_STACK_LINE(5787)
											Float tmp25 = arb->c2->lr1y;		HX_STACK_VAR(tmp25,"tmp25");
											HX_STACK_LINE(5787)
											Float tmp26 = (tmp24 * tmp25);		HX_STACK_VAR(tmp26,"tmp26");
											HX_STACK_LINE(5787)
											Float tmp27 = (tmp23 - tmp26);		HX_STACK_VAR(tmp27,"tmp27");
											HX_STACK_LINE(5787)
											clip2x = tmp27;
											HX_STACK_LINE(5787)
											Float tmp28 = arb->c2->lr1x;		HX_STACK_VAR(tmp28,"tmp28");
											HX_STACK_LINE(5787)
											Float tmp29 = arb->b1->axisx;		HX_STACK_VAR(tmp29,"tmp29");
											HX_STACK_LINE(5787)
											Float tmp30 = (tmp28 * tmp29);		HX_STACK_VAR(tmp30,"tmp30");
											HX_STACK_LINE(5787)
											Float tmp31 = arb->c2->lr1y;		HX_STACK_VAR(tmp31,"tmp31");
											HX_STACK_LINE(5787)
											Float tmp32 = arb->b1->axisy;		HX_STACK_VAR(tmp32,"tmp32");
											HX_STACK_LINE(5787)
											Float tmp33 = (tmp31 * tmp32);		HX_STACK_VAR(tmp33,"tmp33");
											HX_STACK_LINE(5787)
											Float tmp34 = (tmp30 + tmp33);		HX_STACK_VAR(tmp34,"tmp34");
											HX_STACK_LINE(5787)
											clip2y = tmp34;
										}
										HX_STACK_LINE(5787)
										{
											HX_STACK_LINE(5787)
											Float t = ((Float)1.0);		HX_STACK_VAR(t,"t");
											HX_STACK_LINE(5787)
											Float tmp21 = arb->b1->posx;		HX_STACK_VAR(tmp21,"tmp21");
											HX_STACK_LINE(5787)
											Float tmp22 = t;		HX_STACK_VAR(tmp22,"tmp22");
											HX_STACK_LINE(5787)
											Float tmp23 = (tmp21 * tmp22);		HX_STACK_VAR(tmp23,"tmp23");
											HX_STACK_LINE(5787)
											hx::AddEq(clip2x,tmp23);
											HX_STACK_LINE(5787)
											Float tmp24 = arb->b1->posy;		HX_STACK_VAR(tmp24,"tmp24");
											HX_STACK_LINE(5787)
											Float tmp25 = t;		HX_STACK_VAR(tmp25,"tmp25");
											HX_STACK_LINE(5787)
											Float tmp26 = (tmp24 * tmp25);		HX_STACK_VAR(tmp26,"tmp26");
											HX_STACK_LINE(5787)
											hx::AddEq(clip2y,tmp26);
										}
									}
								}
								HX_STACK_LINE(5787)
								Float tmp11 = (clip1x * gnormx);		HX_STACK_VAR(tmp11,"tmp11");
								HX_STACK_LINE(5787)
								Float tmp12 = (clip1y * gnormy);		HX_STACK_VAR(tmp12,"tmp12");
								HX_STACK_LINE(5787)
								Float tmp13 = (tmp11 + tmp12);		HX_STACK_VAR(tmp13,"tmp13");
								HX_STACK_LINE(5787)
								Float tmp14 = gproj;		HX_STACK_VAR(tmp14,"tmp14");
								HX_STACK_LINE(5787)
								Float tmp15 = (tmp13 - tmp14);		HX_STACK_VAR(tmp15,"tmp15");
								HX_STACK_LINE(5787)
								Float tmp16 = arb->radius;		HX_STACK_VAR(tmp16,"tmp16");
								HX_STACK_LINE(5787)
								Float tmp17 = (tmp15 - tmp16);		HX_STACK_VAR(tmp17,"tmp17");
								HX_STACK_LINE(5787)
								Float err1 = tmp17;		HX_STACK_VAR(err1,"err1");
								HX_STACK_LINE(5787)
								Float tmp18 = ::nape::Config_obj::collisionSlop;		HX_STACK_VAR(tmp18,"tmp18");
								HX_STACK_LINE(5787)
								hx::AddEq(err1,tmp18);
								HX_STACK_LINE(5787)
								Float err2 = ((Float)0.0);		HX_STACK_VAR(err2,"err2");
								HX_STACK_LINE(5787)
								bool tmp19 = arb->hpc2;		HX_STACK_VAR(tmp19,"tmp19");
								HX_STACK_LINE(5787)
								if ((tmp19)){
									HX_STACK_LINE(5787)
									Float tmp20 = (clip2x * gnormx);		HX_STACK_VAR(tmp20,"tmp20");
									HX_STACK_LINE(5787)
									Float tmp21 = (clip2y * gnormy);		HX_STACK_VAR(tmp21,"tmp21");
									HX_STACK_LINE(5787)
									Float tmp22 = (tmp20 + tmp21);		HX_STACK_VAR(tmp22,"tmp22");
									HX_STACK_LINE(5787)
									Float tmp23 = gproj;		HX_STACK_VAR(tmp23,"tmp23");
									HX_STACK_LINE(5787)
									Float tmp24 = (tmp22 - tmp23);		HX_STACK_VAR(tmp24,"tmp24");
									HX_STACK_LINE(5787)
									Float tmp25 = arb->radius;		HX_STACK_VAR(tmp25,"tmp25");
									HX_STACK_LINE(5787)
									Float tmp26 = (tmp24 - tmp25);		HX_STACK_VAR(tmp26,"tmp26");
									HX_STACK_LINE(5787)
									err2 = tmp26;
									HX_STACK_LINE(5787)
									Float tmp27 = ::nape::Config_obj::collisionSlop;		HX_STACK_VAR(tmp27,"tmp27");
									HX_STACK_LINE(5787)
									hx::AddEq(err2,tmp27);
								}
								HX_STACK_LINE(5787)
								bool tmp20 = (err1 < (int)0);		HX_STACK_VAR(tmp20,"tmp20");
								HX_STACK_LINE(5787)
								bool tmp21 = !(tmp20);		HX_STACK_VAR(tmp21,"tmp21");
								HX_STACK_LINE(5787)
								bool tmp22;		HX_STACK_VAR(tmp22,"tmp22");
								HX_STACK_LINE(5787)
								if ((tmp21)){
									HX_STACK_LINE(5787)
									tmp22 = (err2 < (int)0);
								}
								else{
									HX_STACK_LINE(5787)
									tmp22 = true;
								}
								HX_STACK_LINE(5787)
								if ((tmp22)){
									HX_STACK_LINE(5787)
									bool tmp23 = arb->rev;		HX_STACK_VAR(tmp23,"tmp23");
									HX_STACK_LINE(5787)
									if ((tmp23)){
										HX_STACK_LINE(5787)
										Float tmp24 = gnormx;		HX_STACK_VAR(tmp24,"tmp24");
										HX_STACK_LINE(5787)
										Float tmp25 = -(tmp24);		HX_STACK_VAR(tmp25,"tmp25");
										HX_STACK_LINE(5787)
										gnormx = tmp25;
										HX_STACK_LINE(5787)
										Float tmp26 = gnormy;		HX_STACK_VAR(tmp26,"tmp26");
										HX_STACK_LINE(5787)
										Float tmp27 = -(tmp26);		HX_STACK_VAR(tmp27,"tmp27");
										HX_STACK_LINE(5787)
										gnormy = tmp27;
									}
									HX_STACK_LINE(5787)
									Float c1r1x = ((Float)0.0);		HX_STACK_VAR(c1r1x,"c1r1x");
									HX_STACK_LINE(5787)
									Float c1r1y = ((Float)0.0);		HX_STACK_VAR(c1r1y,"c1r1y");
									HX_STACK_LINE(5787)
									{
										HX_STACK_LINE(5787)
										Float tmp24 = clip1x;		HX_STACK_VAR(tmp24,"tmp24");
										HX_STACK_LINE(5787)
										Float tmp25 = arb->b1->posx;		HX_STACK_VAR(tmp25,"tmp25");
										HX_STACK_LINE(5787)
										Float tmp26 = (tmp24 - tmp25);		HX_STACK_VAR(tmp26,"tmp26");
										HX_STACK_LINE(5787)
										c1r1x = tmp26;
										HX_STACK_LINE(5787)
										Float tmp27 = clip1y;		HX_STACK_VAR(tmp27,"tmp27");
										HX_STACK_LINE(5787)
										Float tmp28 = arb->b1->posy;		HX_STACK_VAR(tmp28,"tmp28");
										HX_STACK_LINE(5787)
										Float tmp29 = (tmp27 - tmp28);		HX_STACK_VAR(tmp29,"tmp29");
										HX_STACK_LINE(5787)
										c1r1y = tmp29;
									}
									HX_STACK_LINE(5787)
									Float c1r2x = ((Float)0.0);		HX_STACK_VAR(c1r2x,"c1r2x");
									HX_STACK_LINE(5787)
									Float c1r2y = ((Float)0.0);		HX_STACK_VAR(c1r2y,"c1r2y");
									HX_STACK_LINE(5787)
									{
										HX_STACK_LINE(5787)
										Float tmp24 = clip1x;		HX_STACK_VAR(tmp24,"tmp24");
										HX_STACK_LINE(5787)
										Float tmp25 = arb->b2->posx;		HX_STACK_VAR(tmp25,"tmp25");
										HX_STACK_LINE(5787)
										Float tmp26 = (tmp24 - tmp25);		HX_STACK_VAR(tmp26,"tmp26");
										HX_STACK_LINE(5787)
										c1r2x = tmp26;
										HX_STACK_LINE(5787)
										Float tmp27 = clip1y;		HX_STACK_VAR(tmp27,"tmp27");
										HX_STACK_LINE(5787)
										Float tmp28 = arb->b2->posy;		HX_STACK_VAR(tmp28,"tmp28");
										HX_STACK_LINE(5787)
										Float tmp29 = (tmp27 - tmp28);		HX_STACK_VAR(tmp29,"tmp29");
										HX_STACK_LINE(5787)
										c1r2y = tmp29;
									}
									HX_STACK_LINE(5787)
									Float c2r1x = (int)0;		HX_STACK_VAR(c2r1x,"c2r1x");
									HX_STACK_LINE(5787)
									Float c2r1y = (int)0;		HX_STACK_VAR(c2r1y,"c2r1y");
									HX_STACK_LINE(5787)
									Float c2r2x = (int)0;		HX_STACK_VAR(c2r2x,"c2r2x");
									HX_STACK_LINE(5787)
									Float c2r2y = (int)0;		HX_STACK_VAR(c2r2y,"c2r2y");
									HX_STACK_LINE(5787)
									bool tmp24 = arb->hpc2;		HX_STACK_VAR(tmp24,"tmp24");
									HX_STACK_LINE(5787)
									if ((tmp24)){
										HX_STACK_LINE(5787)
										{
											HX_STACK_LINE(5787)
											Float tmp25 = clip2x;		HX_STACK_VAR(tmp25,"tmp25");
											HX_STACK_LINE(5787)
											Float tmp26 = arb->b1->posx;		HX_STACK_VAR(tmp26,"tmp26");
											HX_STACK_LINE(5787)
											Float tmp27 = (tmp25 - tmp26);		HX_STACK_VAR(tmp27,"tmp27");
											HX_STACK_LINE(5787)
											c2r1x = tmp27;
											HX_STACK_LINE(5787)
											Float tmp28 = clip2y;		HX_STACK_VAR(tmp28,"tmp28");
											HX_STACK_LINE(5787)
											Float tmp29 = arb->b1->posy;		HX_STACK_VAR(tmp29,"tmp29");
											HX_STACK_LINE(5787)
											Float tmp30 = (tmp28 - tmp29);		HX_STACK_VAR(tmp30,"tmp30");
											HX_STACK_LINE(5787)
											c2r1y = tmp30;
										}
										HX_STACK_LINE(5787)
										{
											HX_STACK_LINE(5787)
											Float tmp25 = clip2x;		HX_STACK_VAR(tmp25,"tmp25");
											HX_STACK_LINE(5787)
											Float tmp26 = arb->b2->posx;		HX_STACK_VAR(tmp26,"tmp26");
											HX_STACK_LINE(5787)
											Float tmp27 = (tmp25 - tmp26);		HX_STACK_VAR(tmp27,"tmp27");
											HX_STACK_LINE(5787)
											c2r2x = tmp27;
											HX_STACK_LINE(5787)
											Float tmp28 = clip2y;		HX_STACK_VAR(tmp28,"tmp28");
											HX_STACK_LINE(5787)
											Float tmp29 = arb->b2->posy;		HX_STACK_VAR(tmp29,"tmp29");
											HX_STACK_LINE(5787)
											Float tmp30 = (tmp28 - tmp29);		HX_STACK_VAR(tmp30,"tmp30");
											HX_STACK_LINE(5787)
											c2r2y = tmp30;
										}
										HX_STACK_LINE(5787)
										Float tmp25 = (gnormy * c1r1x);		HX_STACK_VAR(tmp25,"tmp25");
										HX_STACK_LINE(5787)
										Float tmp26 = (gnormx * c1r1y);		HX_STACK_VAR(tmp26,"tmp26");
										HX_STACK_LINE(5787)
										Float tmp27 = (tmp25 - tmp26);		HX_STACK_VAR(tmp27,"tmp27");
										HX_STACK_LINE(5787)
										Float rn1a = tmp27;		HX_STACK_VAR(rn1a,"rn1a");
										HX_STACK_LINE(5787)
										Float tmp28 = (gnormy * c1r2x);		HX_STACK_VAR(tmp28,"tmp28");
										HX_STACK_LINE(5787)
										Float tmp29 = (gnormx * c1r2y);		HX_STACK_VAR(tmp29,"tmp29");
										HX_STACK_LINE(5787)
										Float tmp30 = (tmp28 - tmp29);		HX_STACK_VAR(tmp30,"tmp30");
										HX_STACK_LINE(5787)
										Float rn1b = tmp30;		HX_STACK_VAR(rn1b,"rn1b");
										HX_STACK_LINE(5787)
										Float tmp31 = (gnormy * c2r1x);		HX_STACK_VAR(tmp31,"tmp31");
										HX_STACK_LINE(5787)
										Float tmp32 = (gnormx * c2r1y);		HX_STACK_VAR(tmp32,"tmp32");
										HX_STACK_LINE(5787)
										Float tmp33 = (tmp31 - tmp32);		HX_STACK_VAR(tmp33,"tmp33");
										HX_STACK_LINE(5787)
										Float rn2a = tmp33;		HX_STACK_VAR(rn2a,"rn2a");
										HX_STACK_LINE(5787)
										Float tmp34 = (gnormy * c2r2x);		HX_STACK_VAR(tmp34,"tmp34");
										HX_STACK_LINE(5787)
										Float tmp35 = (gnormx * c2r2y);		HX_STACK_VAR(tmp35,"tmp35");
										HX_STACK_LINE(5787)
										Float tmp36 = (tmp34 - tmp35);		HX_STACK_VAR(tmp36,"tmp36");
										HX_STACK_LINE(5787)
										Float rn2b = tmp36;		HX_STACK_VAR(rn2b,"rn2b");
										HX_STACK_LINE(5787)
										Float tmp37 = arb->b1->smass;		HX_STACK_VAR(tmp37,"tmp37");
										HX_STACK_LINE(5787)
										Float tmp38 = arb->b2->smass;		HX_STACK_VAR(tmp38,"tmp38");
										HX_STACK_LINE(5787)
										Float tmp39 = (tmp37 + tmp38);		HX_STACK_VAR(tmp39,"tmp39");
										HX_STACK_LINE(5787)
										Float mass_sum = tmp39;		HX_STACK_VAR(mass_sum,"mass_sum");
										HX_STACK_LINE(5787)
										{
											HX_STACK_LINE(5787)
											Float tmp40 = mass_sum;		HX_STACK_VAR(tmp40,"tmp40");
											HX_STACK_LINE(5787)
											Float tmp41 = arb->b1->sinertia;		HX_STACK_VAR(tmp41,"tmp41");
											HX_STACK_LINE(5787)
											Float tmp42 = rn1a;		HX_STACK_VAR(tmp42,"tmp42");
											HX_STACK_LINE(5787)
											Float tmp43 = (tmp41 * tmp42);		HX_STACK_VAR(tmp43,"tmp43");
											HX_STACK_LINE(5787)
											Float tmp44 = rn1a;		HX_STACK_VAR(tmp44,"tmp44");
											HX_STACK_LINE(5787)
											Float tmp45 = (tmp43 * tmp44);		HX_STACK_VAR(tmp45,"tmp45");
											HX_STACK_LINE(5787)
											Float tmp46 = (tmp40 + tmp45);		HX_STACK_VAR(tmp46,"tmp46");
											HX_STACK_LINE(5787)
											Float tmp47 = arb->b2->sinertia;		HX_STACK_VAR(tmp47,"tmp47");
											HX_STACK_LINE(5787)
											Float tmp48 = rn1b;		HX_STACK_VAR(tmp48,"tmp48");
											HX_STACK_LINE(5787)
											Float tmp49 = (tmp47 * tmp48);		HX_STACK_VAR(tmp49,"tmp49");
											HX_STACK_LINE(5787)
											Float tmp50 = rn1b;		HX_STACK_VAR(tmp50,"tmp50");
											HX_STACK_LINE(5787)
											Float tmp51 = (tmp49 * tmp50);		HX_STACK_VAR(tmp51,"tmp51");
											HX_STACK_LINE(5787)
											Float tmp52 = (tmp46 + tmp51);		HX_STACK_VAR(tmp52,"tmp52");
											HX_STACK_LINE(5787)
											arb->kMassa = tmp52;
											HX_STACK_LINE(5787)
											Float tmp53 = mass_sum;		HX_STACK_VAR(tmp53,"tmp53");
											HX_STACK_LINE(5787)
											Float tmp54 = arb->b1->sinertia;		HX_STACK_VAR(tmp54,"tmp54");
											HX_STACK_LINE(5787)
											Float tmp55 = rn1a;		HX_STACK_VAR(tmp55,"tmp55");
											HX_STACK_LINE(5787)
											Float tmp56 = (tmp54 * tmp55);		HX_STACK_VAR(tmp56,"tmp56");
											HX_STACK_LINE(5787)
											Float tmp57 = rn2a;		HX_STACK_VAR(tmp57,"tmp57");
											HX_STACK_LINE(5787)
											Float tmp58 = (tmp56 * tmp57);		HX_STACK_VAR(tmp58,"tmp58");
											HX_STACK_LINE(5787)
											Float tmp59 = (tmp53 + tmp58);		HX_STACK_VAR(tmp59,"tmp59");
											HX_STACK_LINE(5787)
											Float tmp60 = arb->b2->sinertia;		HX_STACK_VAR(tmp60,"tmp60");
											HX_STACK_LINE(5787)
											Float tmp61 = rn1b;		HX_STACK_VAR(tmp61,"tmp61");
											HX_STACK_LINE(5787)
											Float tmp62 = (tmp60 * tmp61);		HX_STACK_VAR(tmp62,"tmp62");
											HX_STACK_LINE(5787)
											Float tmp63 = rn2b;		HX_STACK_VAR(tmp63,"tmp63");
											HX_STACK_LINE(5787)
											Float tmp64 = (tmp62 * tmp63);		HX_STACK_VAR(tmp64,"tmp64");
											HX_STACK_LINE(5787)
											Float tmp65 = (tmp59 + tmp64);		HX_STACK_VAR(tmp65,"tmp65");
											HX_STACK_LINE(5787)
											arb->kMassb = tmp65;
											HX_STACK_LINE(5787)
											Float tmp66 = mass_sum;		HX_STACK_VAR(tmp66,"tmp66");
											HX_STACK_LINE(5787)
											Float tmp67 = arb->b1->sinertia;		HX_STACK_VAR(tmp67,"tmp67");
											HX_STACK_LINE(5787)
											Float tmp68 = rn2a;		HX_STACK_VAR(tmp68,"tmp68");
											HX_STACK_LINE(5787)
											Float tmp69 = (tmp67 * tmp68);		HX_STACK_VAR(tmp69,"tmp69");
											HX_STACK_LINE(5787)
											Float tmp70 = rn2a;		HX_STACK_VAR(tmp70,"tmp70");
											HX_STACK_LINE(5787)
											Float tmp71 = (tmp69 * tmp70);		HX_STACK_VAR(tmp71,"tmp71");
											HX_STACK_LINE(5787)
											Float tmp72 = (tmp66 + tmp71);		HX_STACK_VAR(tmp72,"tmp72");
											HX_STACK_LINE(5787)
											Float tmp73 = arb->b2->sinertia;		HX_STACK_VAR(tmp73,"tmp73");
											HX_STACK_LINE(5787)
											Float tmp74 = rn2b;		HX_STACK_VAR(tmp74,"tmp74");
											HX_STACK_LINE(5787)
											Float tmp75 = (tmp73 * tmp74);		HX_STACK_VAR(tmp75,"tmp75");
											HX_STACK_LINE(5787)
											Float tmp76 = rn2b;		HX_STACK_VAR(tmp76,"tmp76");
											HX_STACK_LINE(5787)
											Float tmp77 = (tmp75 * tmp76);		HX_STACK_VAR(tmp77,"tmp77");
											HX_STACK_LINE(5787)
											Float tmp78 = (tmp72 + tmp77);		HX_STACK_VAR(tmp78,"tmp78");
											HX_STACK_LINE(5787)
											arb->kMassc = tmp78;
										}
										HX_STACK_LINE(5787)
										Float Ka = ((Float)0.0);		HX_STACK_VAR(Ka,"Ka");
										HX_STACK_LINE(5787)
										Float Kb = ((Float)0.0);		HX_STACK_VAR(Kb,"Kb");
										HX_STACK_LINE(5787)
										Float Kc = ((Float)0.0);		HX_STACK_VAR(Kc,"Kc");
										HX_STACK_LINE(5787)
										{
											HX_STACK_LINE(5787)
											Ka = arb->kMassa;
											HX_STACK_LINE(5787)
											Kb = arb->kMassb;
											HX_STACK_LINE(5787)
											Kc = arb->kMassc;
										}
										HX_STACK_LINE(5787)
										Float tmp40 = (err1 * arb->biasCoef);		HX_STACK_VAR(tmp40,"tmp40");
										HX_STACK_LINE(5787)
										Float bx = tmp40;		HX_STACK_VAR(bx,"bx");
										HX_STACK_LINE(5787)
										Float tmp41 = (err2 * arb->biasCoef);		HX_STACK_VAR(tmp41,"tmp41");
										HX_STACK_LINE(5787)
										Float by = tmp41;		HX_STACK_VAR(by,"by");
										HX_STACK_LINE(5787)
										while((true)){
											HX_STACK_LINE(5787)
											Float xx = ((Float)0.0);		HX_STACK_VAR(xx,"xx");
											HX_STACK_LINE(5787)
											Float xy = ((Float)0.0);		HX_STACK_VAR(xy,"xy");
											HX_STACK_LINE(5787)
											{
												HX_STACK_LINE(5787)
												xx = bx;
												HX_STACK_LINE(5787)
												xy = by;
												HX_STACK_LINE(5787)
												{
												}
											}
											HX_STACK_LINE(5787)
											{
												HX_STACK_LINE(5787)
												Float tmp42 = xx;		HX_STACK_VAR(tmp42,"tmp42");
												HX_STACK_LINE(5787)
												Float tmp43 = -(tmp42);		HX_STACK_VAR(tmp43,"tmp43");
												HX_STACK_LINE(5787)
												xx = tmp43;
												HX_STACK_LINE(5787)
												Float tmp44 = xy;		HX_STACK_VAR(tmp44,"tmp44");
												HX_STACK_LINE(5787)
												Float tmp45 = -(tmp44);		HX_STACK_VAR(tmp45,"tmp45");
												HX_STACK_LINE(5787)
												xy = tmp45;
											}
											HX_STACK_LINE(5787)
											{
												HX_STACK_LINE(5787)
												Float tmp42 = (arb->kMassa * arb->kMassc);		HX_STACK_VAR(tmp42,"tmp42");
												HX_STACK_LINE(5787)
												Float tmp43 = (arb->kMassb * arb->kMassb);		HX_STACK_VAR(tmp43,"tmp43");
												HX_STACK_LINE(5787)
												Float tmp44 = (tmp42 - tmp43);		HX_STACK_VAR(tmp44,"tmp44");
												HX_STACK_LINE(5787)
												Float det = tmp44;		HX_STACK_VAR(det,"det");
												HX_STACK_LINE(5787)
												bool tmp45 = (det != det);		HX_STACK_VAR(tmp45,"tmp45");
												HX_STACK_LINE(5787)
												if ((tmp45)){
													HX_STACK_LINE(5787)
													Float tmp46 = xy = (int)0;		HX_STACK_VAR(tmp46,"tmp46");
													HX_STACK_LINE(5787)
													xx = tmp46;
												}
												else{
													HX_STACK_LINE(5787)
													bool tmp46 = (det == (int)0);		HX_STACK_VAR(tmp46,"tmp46");
													HX_STACK_LINE(5787)
													if ((tmp46)){
														HX_STACK_LINE(5787)
														bool tmp47 = (arb->kMassa != (int)0);		HX_STACK_VAR(tmp47,"tmp47");
														HX_STACK_LINE(5787)
														if ((tmp47)){
															HX_STACK_LINE(5787)
															hx::DivEq(xx,arb->kMassa);
														}
														else{
															HX_STACK_LINE(5787)
															xx = (int)0;
														}
														HX_STACK_LINE(5787)
														bool tmp48 = (arb->kMassc != (int)0);		HX_STACK_VAR(tmp48,"tmp48");
														HX_STACK_LINE(5787)
														if ((tmp48)){
															HX_STACK_LINE(5787)
															hx::DivEq(xy,arb->kMassc);
														}
														else{
															HX_STACK_LINE(5787)
															xy = (int)0;
														}
													}
													else{
														HX_STACK_LINE(5787)
														Float tmp47 = (Float((int)1) / Float(det));		HX_STACK_VAR(tmp47,"tmp47");
														HX_STACK_LINE(5787)
														det = tmp47;
														HX_STACK_LINE(5787)
														Float tmp48 = det;		HX_STACK_VAR(tmp48,"tmp48");
														HX_STACK_LINE(5787)
														Float tmp49 = (arb->kMassc * xx);		HX_STACK_VAR(tmp49,"tmp49");
														HX_STACK_LINE(5787)
														Float tmp50 = (arb->kMassb * xy);		HX_STACK_VAR(tmp50,"tmp50");
														HX_STACK_LINE(5787)
														Float tmp51 = (tmp49 - tmp50);		HX_STACK_VAR(tmp51,"tmp51");
														HX_STACK_LINE(5787)
														Float tmp52 = (tmp48 * tmp51);		HX_STACK_VAR(tmp52,"tmp52");
														HX_STACK_LINE(5787)
														Float t = tmp52;		HX_STACK_VAR(t,"t");
														HX_STACK_LINE(5787)
														Float tmp53 = det;		HX_STACK_VAR(tmp53,"tmp53");
														HX_STACK_LINE(5787)
														Float tmp54 = (arb->kMassa * xy);		HX_STACK_VAR(tmp54,"tmp54");
														HX_STACK_LINE(5787)
														Float tmp55 = (arb->kMassb * xx);		HX_STACK_VAR(tmp55,"tmp55");
														HX_STACK_LINE(5787)
														Float tmp56 = (tmp54 - tmp55);		HX_STACK_VAR(tmp56,"tmp56");
														HX_STACK_LINE(5787)
														Float tmp57 = (tmp53 * tmp56);		HX_STACK_VAR(tmp57,"tmp57");
														HX_STACK_LINE(5787)
														xy = tmp57;
														HX_STACK_LINE(5787)
														xx = t;
													}
												}
											}
											HX_STACK_LINE(5787)
											bool tmp42 = (xx >= (int)0);		HX_STACK_VAR(tmp42,"tmp42");
											HX_STACK_LINE(5787)
											bool tmp43;		HX_STACK_VAR(tmp43,"tmp43");
											HX_STACK_LINE(5787)
											if ((tmp42)){
												HX_STACK_LINE(5787)
												tmp43 = (xy >= (int)0);
											}
											else{
												HX_STACK_LINE(5787)
												tmp43 = false;
											}
											HX_STACK_LINE(5787)
											if ((tmp43)){
												HX_STACK_LINE(5787)
												{
													HX_STACK_LINE(5787)
													Float tmp44 = (xx + xy);		HX_STACK_VAR(tmp44,"tmp44");
													HX_STACK_LINE(5787)
													Float tmp45 = arb->b1->imass;		HX_STACK_VAR(tmp45,"tmp45");
													HX_STACK_LINE(5787)
													Float tmp46 = (tmp44 * tmp45);		HX_STACK_VAR(tmp46,"tmp46");
													HX_STACK_LINE(5787)
													Float t = tmp46;		HX_STACK_VAR(t,"t");
													HX_STACK_LINE(5787)
													Float tmp47 = (gnormx * t);		HX_STACK_VAR(tmp47,"tmp47");
													HX_STACK_LINE(5787)
													hx::SubEq(arb->b1->posx,tmp47);
													HX_STACK_LINE(5787)
													Float tmp48 = (gnormy * t);		HX_STACK_VAR(tmp48,"tmp48");
													HX_STACK_LINE(5787)
													hx::SubEq(arb->b1->posy,tmp48);
												}
												HX_STACK_LINE(5787)
												{
													HX_STACK_LINE(5787)
													::zpp_nape::phys::ZPP_Body _this = arb->b1;		HX_STACK_VAR(_this,"_this");
													HX_STACK_LINE(5787)
													Float tmp44 = arb->b1->iinertia;		HX_STACK_VAR(tmp44,"tmp44");
													HX_STACK_LINE(5787)
													Float tmp45 = -(tmp44);		HX_STACK_VAR(tmp45,"tmp45");
													HX_STACK_LINE(5787)
													Float tmp46 = (rn1a * xx);		HX_STACK_VAR(tmp46,"tmp46");
													HX_STACK_LINE(5787)
													Float tmp47 = (rn2a * xy);		HX_STACK_VAR(tmp47,"tmp47");
													HX_STACK_LINE(5787)
													Float tmp48 = (tmp46 + tmp47);		HX_STACK_VAR(tmp48,"tmp48");
													HX_STACK_LINE(5787)
													Float tmp49 = (tmp45 * tmp48);		HX_STACK_VAR(tmp49,"tmp49");
													HX_STACK_LINE(5787)
													Float dr = tmp49;		HX_STACK_VAR(dr,"dr");
													HX_STACK_LINE(5787)
													hx::AddEq(_this->rot,dr);
													HX_STACK_LINE(5787)
													Float tmp50 = (dr * dr);		HX_STACK_VAR(tmp50,"tmp50");
													HX_STACK_LINE(5787)
													bool tmp51 = (tmp50 > ((Float)0.0001));		HX_STACK_VAR(tmp51,"tmp51");
													HX_STACK_LINE(5787)
													if ((tmp51)){
														HX_STACK_LINE(5787)
														Float tmp52 = _this->rot;		HX_STACK_VAR(tmp52,"tmp52");
														HX_STACK_LINE(5787)
														Float tmp53 = ::Math_obj::sin(tmp52);		HX_STACK_VAR(tmp53,"tmp53");
														HX_STACK_LINE(5787)
														_this->axisx = tmp53;
														HX_STACK_LINE(5787)
														Float tmp54 = _this->rot;		HX_STACK_VAR(tmp54,"tmp54");
														HX_STACK_LINE(5787)
														Float tmp55 = ::Math_obj::cos(tmp54);		HX_STACK_VAR(tmp55,"tmp55");
														HX_STACK_LINE(5787)
														_this->axisy = tmp55;
														HX_STACK_LINE(5787)
														Dynamic();
													}
													else{
														HX_STACK_LINE(5787)
														Float tmp52 = (dr * dr);		HX_STACK_VAR(tmp52,"tmp52");
														HX_STACK_LINE(5787)
														Float d2 = tmp52;		HX_STACK_VAR(d2,"d2");
														HX_STACK_LINE(5787)
														Float tmp53 = (((Float)0.5) * d2);		HX_STACK_VAR(tmp53,"tmp53");
														HX_STACK_LINE(5787)
														Float tmp54 = ((int)1 - tmp53);		HX_STACK_VAR(tmp54,"tmp54");
														HX_STACK_LINE(5787)
														Float p = tmp54;		HX_STACK_VAR(p,"p");
														HX_STACK_LINE(5787)
														Float tmp55 = (d2 * d2);		HX_STACK_VAR(tmp55,"tmp55");
														HX_STACK_LINE(5787)
														Float tmp56 = (Float(tmp55) / Float((int)8));		HX_STACK_VAR(tmp56,"tmp56");
														HX_STACK_LINE(5787)
														Float tmp57 = ((int)1 - tmp56);		HX_STACK_VAR(tmp57,"tmp57");
														HX_STACK_LINE(5787)
														Float m = tmp57;		HX_STACK_VAR(m,"m");
														HX_STACK_LINE(5787)
														Float tmp58 = (p * _this->axisx);		HX_STACK_VAR(tmp58,"tmp58");
														HX_STACK_LINE(5787)
														Float tmp59 = (dr * _this->axisy);		HX_STACK_VAR(tmp59,"tmp59");
														HX_STACK_LINE(5787)
														Float tmp60 = (tmp58 + tmp59);		HX_STACK_VAR(tmp60,"tmp60");
														HX_STACK_LINE(5787)
														Float tmp61 = m;		HX_STACK_VAR(tmp61,"tmp61");
														HX_STACK_LINE(5787)
														Float tmp62 = (tmp60 * tmp61);		HX_STACK_VAR(tmp62,"tmp62");
														HX_STACK_LINE(5787)
														Float nx = tmp62;		HX_STACK_VAR(nx,"nx");
														HX_STACK_LINE(5787)
														Float tmp63 = (p * _this->axisy);		HX_STACK_VAR(tmp63,"tmp63");
														HX_STACK_LINE(5787)
														Float tmp64 = (dr * _this->axisx);		HX_STACK_VAR(tmp64,"tmp64");
														HX_STACK_LINE(5787)
														Float tmp65 = (tmp63 - tmp64);		HX_STACK_VAR(tmp65,"tmp65");
														HX_STACK_LINE(5787)
														Float tmp66 = m;		HX_STACK_VAR(tmp66,"tmp66");
														HX_STACK_LINE(5787)
														Float tmp67 = (tmp65 * tmp66);		HX_STACK_VAR(tmp67,"tmp67");
														HX_STACK_LINE(5787)
														_this->axisy = tmp67;
														HX_STACK_LINE(5787)
														_this->axisx = nx;
													}
												}
												HX_STACK_LINE(5787)
												{
													HX_STACK_LINE(5787)
													Float tmp44 = (xx + xy);		HX_STACK_VAR(tmp44,"tmp44");
													HX_STACK_LINE(5787)
													Float tmp45 = arb->b2->imass;		HX_STACK_VAR(tmp45,"tmp45");
													HX_STACK_LINE(5787)
													Float tmp46 = (tmp44 * tmp45);		HX_STACK_VAR(tmp46,"tmp46");
													HX_STACK_LINE(5787)
													Float t = tmp46;		HX_STACK_VAR(t,"t");
													HX_STACK_LINE(5787)
													Float tmp47 = (gnormx * t);		HX_STACK_VAR(tmp47,"tmp47");
													HX_STACK_LINE(5787)
													hx::AddEq(arb->b2->posx,tmp47);
													HX_STACK_LINE(5787)
													Float tmp48 = (gnormy * t);		HX_STACK_VAR(tmp48,"tmp48");
													HX_STACK_LINE(5787)
													hx::AddEq(arb->b2->posy,tmp48);
												}
												HX_STACK_LINE(5787)
												{
													HX_STACK_LINE(5787)
													::zpp_nape::phys::ZPP_Body _this = arb->b2;		HX_STACK_VAR(_this,"_this");
													HX_STACK_LINE(5787)
													Float tmp44 = arb->b2->iinertia;		HX_STACK_VAR(tmp44,"tmp44");
													HX_STACK_LINE(5787)
													Float tmp45 = (rn1b * xx);		HX_STACK_VAR(tmp45,"tmp45");
													HX_STACK_LINE(5787)
													Float tmp46 = (rn2b * xy);		HX_STACK_VAR(tmp46,"tmp46");
													HX_STACK_LINE(5787)
													Float tmp47 = (tmp45 + tmp46);		HX_STACK_VAR(tmp47,"tmp47");
													HX_STACK_LINE(5787)
													Float tmp48 = (tmp44 * tmp47);		HX_STACK_VAR(tmp48,"tmp48");
													HX_STACK_LINE(5787)
													Float dr = tmp48;		HX_STACK_VAR(dr,"dr");
													HX_STACK_LINE(5787)
													hx::AddEq(_this->rot,dr);
													HX_STACK_LINE(5787)
													Float tmp49 = (dr * dr);		HX_STACK_VAR(tmp49,"tmp49");
													HX_STACK_LINE(5787)
													bool tmp50 = (tmp49 > ((Float)0.0001));		HX_STACK_VAR(tmp50,"tmp50");
													HX_STACK_LINE(5787)
													if ((tmp50)){
														HX_STACK_LINE(5787)
														Float tmp51 = _this->rot;		HX_STACK_VAR(tmp51,"tmp51");
														HX_STACK_LINE(5787)
														Float tmp52 = ::Math_obj::sin(tmp51);		HX_STACK_VAR(tmp52,"tmp52");
														HX_STACK_LINE(5787)
														_this->axisx = tmp52;
														HX_STACK_LINE(5787)
														Float tmp53 = _this->rot;		HX_STACK_VAR(tmp53,"tmp53");
														HX_STACK_LINE(5787)
														Float tmp54 = ::Math_obj::cos(tmp53);		HX_STACK_VAR(tmp54,"tmp54");
														HX_STACK_LINE(5787)
														_this->axisy = tmp54;
														HX_STACK_LINE(5787)
														Dynamic();
													}
													else{
														HX_STACK_LINE(5787)
														Float tmp51 = (dr * dr);		HX_STACK_VAR(tmp51,"tmp51");
														HX_STACK_LINE(5787)
														Float d2 = tmp51;		HX_STACK_VAR(d2,"d2");
														HX_STACK_LINE(5787)
														Float tmp52 = (((Float)0.5) * d2);		HX_STACK_VAR(tmp52,"tmp52");
														HX_STACK_LINE(5787)
														Float tmp53 = ((int)1 - tmp52);		HX_STACK_VAR(tmp53,"tmp53");
														HX_STACK_LINE(5787)
														Float p = tmp53;		HX_STACK_VAR(p,"p");
														HX_STACK_LINE(5787)
														Float tmp54 = (d2 * d2);		HX_STACK_VAR(tmp54,"tmp54");
														HX_STACK_LINE(5787)
														Float tmp55 = (Float(tmp54) / Float((int)8));		HX_STACK_VAR(tmp55,"tmp55");
														HX_STACK_LINE(5787)
														Float tmp56 = ((int)1 - tmp55);		HX_STACK_VAR(tmp56,"tmp56");
														HX_STACK_LINE(5787)
														Float m = tmp56;		HX_STACK_VAR(m,"m");
														HX_STACK_LINE(5787)
														Float tmp57 = (p * _this->axisx);		HX_STACK_VAR(tmp57,"tmp57");
														HX_STACK_LINE(5787)
														Float tmp58 = (dr * _this->axisy);		HX_STACK_VAR(tmp58,"tmp58");
														HX_STACK_LINE(5787)
														Float tmp59 = (tmp57 + tmp58);		HX_STACK_VAR(tmp59,"tmp59");
														HX_STACK_LINE(5787)
														Float tmp60 = m;		HX_STACK_VAR(tmp60,"tmp60");
														HX_STACK_LINE(5787)
														Float tmp61 = (tmp59 * tmp60);		HX_STACK_VAR(tmp61,"tmp61");
														HX_STACK_LINE(5787)
														Float nx = tmp61;		HX_STACK_VAR(nx,"nx");
														HX_STACK_LINE(5787)
														Float tmp62 = (p * _this->axisy);		HX_STACK_VAR(tmp62,"tmp62");
														HX_STACK_LINE(5787)
														Float tmp63 = (dr * _this->axisx);		HX_STACK_VAR(tmp63,"tmp63");
														HX_STACK_LINE(5787)
														Float tmp64 = (tmp62 - tmp63);		HX_STACK_VAR(tmp64,"tmp64");
														HX_STACK_LINE(5787)
														Float tmp65 = m;		HX_STACK_VAR(tmp65,"tmp65");
														HX_STACK_LINE(5787)
														Float tmp66 = (tmp64 * tmp65);		HX_STACK_VAR(tmp66,"tmp66");
														HX_STACK_LINE(5787)
														_this->axisy = tmp66;
														HX_STACK_LINE(5787)
														_this->axisx = nx;
													}
												}
												HX_STACK_LINE(5787)
												break;
											}
											HX_STACK_LINE(5787)
											{
												HX_STACK_LINE(5787)
												Float tmp44 = bx;		HX_STACK_VAR(tmp44,"tmp44");
												HX_STACK_LINE(5787)
												Float tmp45 = -(tmp44);		HX_STACK_VAR(tmp45,"tmp45");
												HX_STACK_LINE(5787)
												Float tmp46 = Ka;		HX_STACK_VAR(tmp46,"tmp46");
												HX_STACK_LINE(5787)
												Float tmp47 = (Float(tmp45) / Float(tmp46));		HX_STACK_VAR(tmp47,"tmp47");
												HX_STACK_LINE(5787)
												xx = tmp47;
												HX_STACK_LINE(5787)
												xy = (int)0;
												HX_STACK_LINE(5787)
												{
												}
											}
											HX_STACK_LINE(5787)
											Float tmp44 = (Kb * xx);		HX_STACK_VAR(tmp44,"tmp44");
											HX_STACK_LINE(5787)
											Float tmp45 = by;		HX_STACK_VAR(tmp45,"tmp45");
											HX_STACK_LINE(5787)
											Float tmp46 = (tmp44 + tmp45);		HX_STACK_VAR(tmp46,"tmp46");
											HX_STACK_LINE(5787)
											Float vn2 = tmp46;		HX_STACK_VAR(vn2,"vn2");
											HX_STACK_LINE(5787)
											bool tmp47 = (xx >= (int)0);		HX_STACK_VAR(tmp47,"tmp47");
											HX_STACK_LINE(5787)
											bool tmp48;		HX_STACK_VAR(tmp48,"tmp48");
											HX_STACK_LINE(5787)
											if ((tmp47)){
												HX_STACK_LINE(5787)
												tmp48 = (vn2 >= (int)0);
											}
											else{
												HX_STACK_LINE(5787)
												tmp48 = false;
											}
											HX_STACK_LINE(5787)
											if ((tmp48)){
												HX_STACK_LINE(5787)
												{
													HX_STACK_LINE(5787)
													Float tmp49 = (xx + xy);		HX_STACK_VAR(tmp49,"tmp49");
													HX_STACK_LINE(5787)
													Float tmp50 = arb->b1->imass;		HX_STACK_VAR(tmp50,"tmp50");
													HX_STACK_LINE(5787)
													Float tmp51 = (tmp49 * tmp50);		HX_STACK_VAR(tmp51,"tmp51");
													HX_STACK_LINE(5787)
													Float t = tmp51;		HX_STACK_VAR(t,"t");
													HX_STACK_LINE(5787)
													Float tmp52 = (gnormx * t);		HX_STACK_VAR(tmp52,"tmp52");
													HX_STACK_LINE(5787)
													hx::SubEq(arb->b1->posx,tmp52);
													HX_STACK_LINE(5787)
													Float tmp53 = (gnormy * t);		HX_STACK_VAR(tmp53,"tmp53");
													HX_STACK_LINE(5787)
													hx::SubEq(arb->b1->posy,tmp53);
												}
												HX_STACK_LINE(5787)
												{
													HX_STACK_LINE(5787)
													::zpp_nape::phys::ZPP_Body _this = arb->b1;		HX_STACK_VAR(_this,"_this");
													HX_STACK_LINE(5787)
													Float tmp49 = arb->b1->iinertia;		HX_STACK_VAR(tmp49,"tmp49");
													HX_STACK_LINE(5787)
													Float tmp50 = -(tmp49);		HX_STACK_VAR(tmp50,"tmp50");
													HX_STACK_LINE(5787)
													Float tmp51 = (rn1a * xx);		HX_STACK_VAR(tmp51,"tmp51");
													HX_STACK_LINE(5787)
													Float tmp52 = (rn2a * xy);		HX_STACK_VAR(tmp52,"tmp52");
													HX_STACK_LINE(5787)
													Float tmp53 = (tmp51 + tmp52);		HX_STACK_VAR(tmp53,"tmp53");
													HX_STACK_LINE(5787)
													Float tmp54 = (tmp50 * tmp53);		HX_STACK_VAR(tmp54,"tmp54");
													HX_STACK_LINE(5787)
													Float dr = tmp54;		HX_STACK_VAR(dr,"dr");
													HX_STACK_LINE(5787)
													hx::AddEq(_this->rot,dr);
													HX_STACK_LINE(5787)
													Float tmp55 = (dr * dr);		HX_STACK_VAR(tmp55,"tmp55");
													HX_STACK_LINE(5787)
													bool tmp56 = (tmp55 > ((Float)0.0001));		HX_STACK_VAR(tmp56,"tmp56");
													HX_STACK_LINE(5787)
													if ((tmp56)){
														HX_STACK_LINE(5787)
														Float tmp57 = _this->rot;		HX_STACK_VAR(tmp57,"tmp57");
														HX_STACK_LINE(5787)
														Float tmp58 = ::Math_obj::sin(tmp57);		HX_STACK_VAR(tmp58,"tmp58");
														HX_STACK_LINE(5787)
														_this->axisx = tmp58;
														HX_STACK_LINE(5787)
														Float tmp59 = _this->rot;		HX_STACK_VAR(tmp59,"tmp59");
														HX_STACK_LINE(5787)
														Float tmp60 = ::Math_obj::cos(tmp59);		HX_STACK_VAR(tmp60,"tmp60");
														HX_STACK_LINE(5787)
														_this->axisy = tmp60;
														HX_STACK_LINE(5787)
														Dynamic();
													}
													else{
														HX_STACK_LINE(5787)
														Float tmp57 = (dr * dr);		HX_STACK_VAR(tmp57,"tmp57");
														HX_STACK_LINE(5787)
														Float d2 = tmp57;		HX_STACK_VAR(d2,"d2");
														HX_STACK_LINE(5787)
														Float tmp58 = (((Float)0.5) * d2);		HX_STACK_VAR(tmp58,"tmp58");
														HX_STACK_LINE(5787)
														Float tmp59 = ((int)1 - tmp58);		HX_STACK_VAR(tmp59,"tmp59");
														HX_STACK_LINE(5787)
														Float p = tmp59;		HX_STACK_VAR(p,"p");
														HX_STACK_LINE(5787)
														Float tmp60 = (d2 * d2);		HX_STACK_VAR(tmp60,"tmp60");
														HX_STACK_LINE(5787)
														Float tmp61 = (Float(tmp60) / Float((int)8));		HX_STACK_VAR(tmp61,"tmp61");
														HX_STACK_LINE(5787)
														Float tmp62 = ((int)1 - tmp61);		HX_STACK_VAR(tmp62,"tmp62");
														HX_STACK_LINE(5787)
														Float m = tmp62;		HX_STACK_VAR(m,"m");
														HX_STACK_LINE(5787)
														Float tmp63 = (p * _this->axisx);		HX_STACK_VAR(tmp63,"tmp63");
														HX_STACK_LINE(5787)
														Float tmp64 = (dr * _this->axisy);		HX_STACK_VAR(tmp64,"tmp64");
														HX_STACK_LINE(5787)
														Float tmp65 = (tmp63 + tmp64);		HX_STACK_VAR(tmp65,"tmp65");
														HX_STACK_LINE(5787)
														Float tmp66 = m;		HX_STACK_VAR(tmp66,"tmp66");
														HX_STACK_LINE(5787)
														Float tmp67 = (tmp65 * tmp66);		HX_STACK_VAR(tmp67,"tmp67");
														HX_STACK_LINE(5787)
														Float nx = tmp67;		HX_STACK_VAR(nx,"nx");
														HX_STACK_LINE(5787)
														Float tmp68 = (p * _this->axisy);		HX_STACK_VAR(tmp68,"tmp68");
														HX_STACK_LINE(5787)
														Float tmp69 = (dr * _this->axisx);		HX_STACK_VAR(tmp69,"tmp69");
														HX_STACK_LINE(5787)
														Float tmp70 = (tmp68 - tmp69);		HX_STACK_VAR(tmp70,"tmp70");
														HX_STACK_LINE(5787)
														Float tmp71 = m;		HX_STACK_VAR(tmp71,"tmp71");
														HX_STACK_LINE(5787)
														Float tmp72 = (tmp70 * tmp71);		HX_STACK_VAR(tmp72,"tmp72");
														HX_STACK_LINE(5787)
														_this->axisy = tmp72;
														HX_STACK_LINE(5787)
														_this->axisx = nx;
													}
												}
												HX_STACK_LINE(5787)
												{
													HX_STACK_LINE(5787)
													Float tmp49 = (xx + xy);		HX_STACK_VAR(tmp49,"tmp49");
													HX_STACK_LINE(5787)
													Float tmp50 = arb->b2->imass;		HX_STACK_VAR(tmp50,"tmp50");
													HX_STACK_LINE(5787)
													Float tmp51 = (tmp49 * tmp50);		HX_STACK_VAR(tmp51,"tmp51");
													HX_STACK_LINE(5787)
													Float t = tmp51;		HX_STACK_VAR(t,"t");
													HX_STACK_LINE(5787)
													Float tmp52 = (gnormx * t);		HX_STACK_VAR(tmp52,"tmp52");
													HX_STACK_LINE(5787)
													hx::AddEq(arb->b2->posx,tmp52);
													HX_STACK_LINE(5787)
													Float tmp53 = (gnormy * t);		HX_STACK_VAR(tmp53,"tmp53");
													HX_STACK_LINE(5787)
													hx::AddEq(arb->b2->posy,tmp53);
												}
												HX_STACK_LINE(5787)
												{
													HX_STACK_LINE(5787)
													::zpp_nape::phys::ZPP_Body _this = arb->b2;		HX_STACK_VAR(_this,"_this");
													HX_STACK_LINE(5787)
													Float tmp49 = arb->b2->iinertia;		HX_STACK_VAR(tmp49,"tmp49");
													HX_STACK_LINE(5787)
													Float tmp50 = (rn1b * xx);		HX_STACK_VAR(tmp50,"tmp50");
													HX_STACK_LINE(5787)
													Float tmp51 = (rn2b * xy);		HX_STACK_VAR(tmp51,"tmp51");
													HX_STACK_LINE(5787)
													Float tmp52 = (tmp50 + tmp51);		HX_STACK_VAR(tmp52,"tmp52");
													HX_STACK_LINE(5787)
													Float tmp53 = (tmp49 * tmp52);		HX_STACK_VAR(tmp53,"tmp53");
													HX_STACK_LINE(5787)
													Float dr = tmp53;		HX_STACK_VAR(dr,"dr");
													HX_STACK_LINE(5787)
													hx::AddEq(_this->rot,dr);
													HX_STACK_LINE(5787)
													Float tmp54 = (dr * dr);		HX_STACK_VAR(tmp54,"tmp54");
													HX_STACK_LINE(5787)
													bool tmp55 = (tmp54 > ((Float)0.0001));		HX_STACK_VAR(tmp55,"tmp55");
													HX_STACK_LINE(5787)
													if ((tmp55)){
														HX_STACK_LINE(5787)
														Float tmp56 = _this->rot;		HX_STACK_VAR(tmp56,"tmp56");
														HX_STACK_LINE(5787)
														Float tmp57 = ::Math_obj::sin(tmp56);		HX_STACK_VAR(tmp57,"tmp57");
														HX_STACK_LINE(5787)
														_this->axisx = tmp57;
														HX_STACK_LINE(5787)
														Float tmp58 = _this->rot;		HX_STACK_VAR(tmp58,"tmp58");
														HX_STACK_LINE(5787)
														Float tmp59 = ::Math_obj::cos(tmp58);		HX_STACK_VAR(tmp59,"tmp59");
														HX_STACK_LINE(5787)
														_this->axisy = tmp59;
														HX_STACK_LINE(5787)
														Dynamic();
													}
													else{
														HX_STACK_LINE(5787)
														Float tmp56 = (dr * dr);		HX_STACK_VAR(tmp56,"tmp56");
														HX_STACK_LINE(5787)
														Float d2 = tmp56;		HX_STACK_VAR(d2,"d2");
														HX_STACK_LINE(5787)
														Float tmp57 = (((Float)0.5) * d2);		HX_STACK_VAR(tmp57,"tmp57");
														HX_STACK_LINE(5787)
														Float tmp58 = ((int)1 - tmp57);		HX_STACK_VAR(tmp58,"tmp58");
														HX_STACK_LINE(5787)
														Float p = tmp58;		HX_STACK_VAR(p,"p");
														HX_STACK_LINE(5787)
														Float tmp59 = (d2 * d2);		HX_STACK_VAR(tmp59,"tmp59");
														HX_STACK_LINE(5787)
														Float tmp60 = (Float(tmp59) / Float((int)8));		HX_STACK_VAR(tmp60,"tmp60");
														HX_STACK_LINE(5787)
														Float tmp61 = ((int)1 - tmp60);		HX_STACK_VAR(tmp61,"tmp61");
														HX_STACK_LINE(5787)
														Float m = tmp61;		HX_STACK_VAR(m,"m");
														HX_STACK_LINE(5787)
														Float tmp62 = (p * _this->axisx);		HX_STACK_VAR(tmp62,"tmp62");
														HX_STACK_LINE(5787)
														Float tmp63 = (dr * _this->axisy);		HX_STACK_VAR(tmp63,"tmp63");
														HX_STACK_LINE(5787)
														Float tmp64 = (tmp62 + tmp63);		HX_STACK_VAR(tmp64,"tmp64");
														HX_STACK_LINE(5787)
														Float tmp65 = m;		HX_STACK_VAR(tmp65,"tmp65");
														HX_STACK_LINE(5787)
														Float tmp66 = (tmp64 * tmp65);		HX_STACK_VAR(tmp66,"tmp66");
														HX_STACK_LINE(5787)
														Float nx = tmp66;		HX_STACK_VAR(nx,"nx");
														HX_STACK_LINE(5787)
														Float tmp67 = (p * _this->axisy);		HX_STACK_VAR(tmp67,"tmp67");
														HX_STACK_LINE(5787)
														Float tmp68 = (dr * _this->axisx);		HX_STACK_VAR(tmp68,"tmp68");
														HX_STACK_LINE(5787)
														Float tmp69 = (tmp67 - tmp68);		HX_STACK_VAR(tmp69,"tmp69");
														HX_STACK_LINE(5787)
														Float tmp70 = m;		HX_STACK_VAR(tmp70,"tmp70");
														HX_STACK_LINE(5787)
														Float tmp71 = (tmp69 * tmp70);		HX_STACK_VAR(tmp71,"tmp71");
														HX_STACK_LINE(5787)
														_this->axisy = tmp71;
														HX_STACK_LINE(5787)
														_this->axisx = nx;
													}
												}
												HX_STACK_LINE(5787)
												break;
											}
											HX_STACK_LINE(5787)
											{
												HX_STACK_LINE(5787)
												xx = (int)0;
												HX_STACK_LINE(5787)
												Float tmp49 = by;		HX_STACK_VAR(tmp49,"tmp49");
												HX_STACK_LINE(5787)
												Float tmp50 = -(tmp49);		HX_STACK_VAR(tmp50,"tmp50");
												HX_STACK_LINE(5787)
												Float tmp51 = Kc;		HX_STACK_VAR(tmp51,"tmp51");
												HX_STACK_LINE(5787)
												Float tmp52 = (Float(tmp50) / Float(tmp51));		HX_STACK_VAR(tmp52,"tmp52");
												HX_STACK_LINE(5787)
												xy = tmp52;
												HX_STACK_LINE(5787)
												{
												}
											}
											HX_STACK_LINE(5787)
											Float tmp49 = (Kb * xy);		HX_STACK_VAR(tmp49,"tmp49");
											HX_STACK_LINE(5787)
											Float tmp50 = bx;		HX_STACK_VAR(tmp50,"tmp50");
											HX_STACK_LINE(5787)
											Float tmp51 = (tmp49 + tmp50);		HX_STACK_VAR(tmp51,"tmp51");
											HX_STACK_LINE(5787)
											Float vn1 = tmp51;		HX_STACK_VAR(vn1,"vn1");
											HX_STACK_LINE(5787)
											bool tmp52 = (xy >= (int)0);		HX_STACK_VAR(tmp52,"tmp52");
											HX_STACK_LINE(5787)
											bool tmp53;		HX_STACK_VAR(tmp53,"tmp53");
											HX_STACK_LINE(5787)
											if ((tmp52)){
												HX_STACK_LINE(5787)
												tmp53 = (vn1 >= (int)0);
											}
											else{
												HX_STACK_LINE(5787)
												tmp53 = false;
											}
											HX_STACK_LINE(5787)
											if ((tmp53)){
												HX_STACK_LINE(5787)
												{
													HX_STACK_LINE(5787)
													Float tmp54 = (xx + xy);		HX_STACK_VAR(tmp54,"tmp54");
													HX_STACK_LINE(5787)
													Float tmp55 = arb->b1->imass;		HX_STACK_VAR(tmp55,"tmp55");
													HX_STACK_LINE(5787)
													Float tmp56 = (tmp54 * tmp55);		HX_STACK_VAR(tmp56,"tmp56");
													HX_STACK_LINE(5787)
													Float t = tmp56;		HX_STACK_VAR(t,"t");
													HX_STACK_LINE(5787)
													Float tmp57 = (gnormx * t);		HX_STACK_VAR(tmp57,"tmp57");
													HX_STACK_LINE(5787)
													hx::SubEq(arb->b1->posx,tmp57);
													HX_STACK_LINE(5787)
													Float tmp58 = (gnormy * t);		HX_STACK_VAR(tmp58,"tmp58");
													HX_STACK_LINE(5787)
													hx::SubEq(arb->b1->posy,tmp58);
												}
												HX_STACK_LINE(5787)
												{
													HX_STACK_LINE(5787)
													::zpp_nape::phys::ZPP_Body _this = arb->b1;		HX_STACK_VAR(_this,"_this");
													HX_STACK_LINE(5787)
													Float tmp54 = arb->b1->iinertia;		HX_STACK_VAR(tmp54,"tmp54");
													HX_STACK_LINE(5787)
													Float tmp55 = -(tmp54);		HX_STACK_VAR(tmp55,"tmp55");
													HX_STACK_LINE(5787)
													Float tmp56 = (rn1a * xx);		HX_STACK_VAR(tmp56,"tmp56");
													HX_STACK_LINE(5787)
													Float tmp57 = (rn2a * xy);		HX_STACK_VAR(tmp57,"tmp57");
													HX_STACK_LINE(5787)
													Float tmp58 = (tmp56 + tmp57);		HX_STACK_VAR(tmp58,"tmp58");
													HX_STACK_LINE(5787)
													Float tmp59 = (tmp55 * tmp58);		HX_STACK_VAR(tmp59,"tmp59");
													HX_STACK_LINE(5787)
													Float dr = tmp59;		HX_STACK_VAR(dr,"dr");
													HX_STACK_LINE(5787)
													hx::AddEq(_this->rot,dr);
													HX_STACK_LINE(5787)
													Float tmp60 = (dr * dr);		HX_STACK_VAR(tmp60,"tmp60");
													HX_STACK_LINE(5787)
													bool tmp61 = (tmp60 > ((Float)0.0001));		HX_STACK_VAR(tmp61,"tmp61");
													HX_STACK_LINE(5787)
													if ((tmp61)){
														HX_STACK_LINE(5787)
														Float tmp62 = _this->rot;		HX_STACK_VAR(tmp62,"tmp62");
														HX_STACK_LINE(5787)
														Float tmp63 = ::Math_obj::sin(tmp62);		HX_STACK_VAR(tmp63,"tmp63");
														HX_STACK_LINE(5787)
														_this->axisx = tmp63;
														HX_STACK_LINE(5787)
														Float tmp64 = _this->rot;		HX_STACK_VAR(tmp64,"tmp64");
														HX_STACK_LINE(5787)
														Float tmp65 = ::Math_obj::cos(tmp64);		HX_STACK_VAR(tmp65,"tmp65");
														HX_STACK_LINE(5787)
														_this->axisy = tmp65;
														HX_STACK_LINE(5787)
														Dynamic();
													}
													else{
														HX_STACK_LINE(5787)
														Float tmp62 = (dr * dr);		HX_STACK_VAR(tmp62,"tmp62");
														HX_STACK_LINE(5787)
														Float d2 = tmp62;		HX_STACK_VAR(d2,"d2");
														HX_STACK_LINE(5787)
														Float tmp63 = (((Float)0.5) * d2);		HX_STACK_VAR(tmp63,"tmp63");
														HX_STACK_LINE(5787)
														Float tmp64 = ((int)1 - tmp63);		HX_STACK_VAR(tmp64,"tmp64");
														HX_STACK_LINE(5787)
														Float p = tmp64;		HX_STACK_VAR(p,"p");
														HX_STACK_LINE(5787)
														Float tmp65 = (d2 * d2);		HX_STACK_VAR(tmp65,"tmp65");
														HX_STACK_LINE(5787)
														Float tmp66 = (Float(tmp65) / Float((int)8));		HX_STACK_VAR(tmp66,"tmp66");
														HX_STACK_LINE(5787)
														Float tmp67 = ((int)1 - tmp66);		HX_STACK_VAR(tmp67,"tmp67");
														HX_STACK_LINE(5787)
														Float m = tmp67;		HX_STACK_VAR(m,"m");
														HX_STACK_LINE(5787)
														Float tmp68 = (p * _this->axisx);		HX_STACK_VAR(tmp68,"tmp68");
														HX_STACK_LINE(5787)
														Float tmp69 = (dr * _this->axisy);		HX_STACK_VAR(tmp69,"tmp69");
														HX_STACK_LINE(5787)
														Float tmp70 = (tmp68 + tmp69);		HX_STACK_VAR(tmp70,"tmp70");
														HX_STACK_LINE(5787)
														Float tmp71 = m;		HX_STACK_VAR(tmp71,"tmp71");
														HX_STACK_LINE(5787)
														Float tmp72 = (tmp70 * tmp71);		HX_STACK_VAR(tmp72,"tmp72");
														HX_STACK_LINE(5787)
														Float nx = tmp72;		HX_STACK_VAR(nx,"nx");
														HX_STACK_LINE(5787)
														Float tmp73 = (p * _this->axisy);		HX_STACK_VAR(tmp73,"tmp73");
														HX_STACK_LINE(5787)
														Float tmp74 = (dr * _this->axisx);		HX_STACK_VAR(tmp74,"tmp74");
														HX_STACK_LINE(5787)
														Float tmp75 = (tmp73 - tmp74);		HX_STACK_VAR(tmp75,"tmp75");
														HX_STACK_LINE(5787)
														Float tmp76 = m;		HX_STACK_VAR(tmp76,"tmp76");
														HX_STACK_LINE(5787)
														Float tmp77 = (tmp75 * tmp76);		HX_STACK_VAR(tmp77,"tmp77");
														HX_STACK_LINE(5787)
														_this->axisy = tmp77;
														HX_STACK_LINE(5787)
														_this->axisx = nx;
													}
												}
												HX_STACK_LINE(5787)
												{
													HX_STACK_LINE(5787)
													Float tmp54 = (xx + xy);		HX_STACK_VAR(tmp54,"tmp54");
													HX_STACK_LINE(5787)
													Float tmp55 = arb->b2->imass;		HX_STACK_VAR(tmp55,"tmp55");
													HX_STACK_LINE(5787)
													Float tmp56 = (tmp54 * tmp55);		HX_STACK_VAR(tmp56,"tmp56");
													HX_STACK_LINE(5787)
													Float t = tmp56;		HX_STACK_VAR(t,"t");
													HX_STACK_LINE(5787)
													Float tmp57 = (gnormx * t);		HX_STACK_VAR(tmp57,"tmp57");
													HX_STACK_LINE(5787)
													hx::AddEq(arb->b2->posx,tmp57);
													HX_STACK_LINE(5787)
													Float tmp58 = (gnormy * t);		HX_STACK_VAR(tmp58,"tmp58");
													HX_STACK_LINE(5787)
													hx::AddEq(arb->b2->posy,tmp58);
												}
												HX_STACK_LINE(5787)
												{
													HX_STACK_LINE(5787)
													::zpp_nape::phys::ZPP_Body _this = arb->b2;		HX_STACK_VAR(_this,"_this");
													HX_STACK_LINE(5787)
													Float tmp54 = arb->b2->iinertia;		HX_STACK_VAR(tmp54,"tmp54");
													HX_STACK_LINE(5787)
													Float tmp55 = (rn1b * xx);		HX_STACK_VAR(tmp55,"tmp55");
													HX_STACK_LINE(5787)
													Float tmp56 = (rn2b * xy);		HX_STACK_VAR(tmp56,"tmp56");
													HX_STACK_LINE(5787)
													Float tmp57 = (tmp55 + tmp56);		HX_STACK_VAR(tmp57,"tmp57");
													HX_STACK_LINE(5787)
													Float tmp58 = (tmp54 * tmp57);		HX_STACK_VAR(tmp58,"tmp58");
													HX_STACK_LINE(5787)
													Float dr = tmp58;		HX_STACK_VAR(dr,"dr");
													HX_STACK_LINE(5787)
													hx::AddEq(_this->rot,dr);
													HX_STACK_LINE(5787)
													Float tmp59 = (dr * dr);		HX_STACK_VAR(tmp59,"tmp59");
													HX_STACK_LINE(5787)
													bool tmp60 = (tmp59 > ((Float)0.0001));		HX_STACK_VAR(tmp60,"tmp60");
													HX_STACK_LINE(5787)
													if ((tmp60)){
														HX_STACK_LINE(5787)
														Float tmp61 = _this->rot;		HX_STACK_VAR(tmp61,"tmp61");
														HX_STACK_LINE(5787)
														Float tmp62 = ::Math_obj::sin(tmp61);		HX_STACK_VAR(tmp62,"tmp62");
														HX_STACK_LINE(5787)
														_this->axisx = tmp62;
														HX_STACK_LINE(5787)
														Float tmp63 = _this->rot;		HX_STACK_VAR(tmp63,"tmp63");
														HX_STACK_LINE(5787)
														Float tmp64 = ::Math_obj::cos(tmp63);		HX_STACK_VAR(tmp64,"tmp64");
														HX_STACK_LINE(5787)
														_this->axisy = tmp64;
														HX_STACK_LINE(5787)
														Dynamic();
													}
													else{
														HX_STACK_LINE(5787)
														Float tmp61 = (dr * dr);		HX_STACK_VAR(tmp61,"tmp61");
														HX_STACK_LINE(5787)
														Float d2 = tmp61;		HX_STACK_VAR(d2,"d2");
														HX_STACK_LINE(5787)
														Float tmp62 = (((Float)0.5) * d2);		HX_STACK_VAR(tmp62,"tmp62");
														HX_STACK_LINE(5787)
														Float tmp63 = ((int)1 - tmp62);		HX_STACK_VAR(tmp63,"tmp63");
														HX_STACK_LINE(5787)
														Float p = tmp63;		HX_STACK_VAR(p,"p");
														HX_STACK_LINE(5787)
														Float tmp64 = (d2 * d2);		HX_STACK_VAR(tmp64,"tmp64");
														HX_STACK_LINE(5787)
														Float tmp65 = (Float(tmp64) / Float((int)8));		HX_STACK_VAR(tmp65,"tmp65");
														HX_STACK_LINE(5787)
														Float tmp66 = ((int)1 - tmp65);		HX_STACK_VAR(tmp66,"tmp66");
														HX_STACK_LINE(5787)
														Float m = tmp66;		HX_STACK_VAR(m,"m");
														HX_STACK_LINE(5787)
														Float tmp67 = (p * _this->axisx);		HX_STACK_VAR(tmp67,"tmp67");
														HX_STACK_LINE(5787)
														Float tmp68 = (dr * _this->axisy);		HX_STACK_VAR(tmp68,"tmp68");
														HX_STACK_LINE(5787)
														Float tmp69 = (tmp67 + tmp68);		HX_STACK_VAR(tmp69,"tmp69");
														HX_STACK_LINE(5787)
														Float tmp70 = m;		HX_STACK_VAR(tmp70,"tmp70");
														HX_STACK_LINE(5787)
														Float tmp71 = (tmp69 * tmp70);		HX_STACK_VAR(tmp71,"tmp71");
														HX_STACK_LINE(5787)
														Float nx = tmp71;		HX_STACK_VAR(nx,"nx");
														HX_STACK_LINE(5787)
														Float tmp72 = (p * _this->axisy);		HX_STACK_VAR(tmp72,"tmp72");
														HX_STACK_LINE(5787)
														Float tmp73 = (dr * _this->axisx);		HX_STACK_VAR(tmp73,"tmp73");
														HX_STACK_LINE(5787)
														Float tmp74 = (tmp72 - tmp73);		HX_STACK_VAR(tmp74,"tmp74");
														HX_STACK_LINE(5787)
														Float tmp75 = m;		HX_STACK_VAR(tmp75,"tmp75");
														HX_STACK_LINE(5787)
														Float tmp76 = (tmp74 * tmp75);		HX_STACK_VAR(tmp76,"tmp76");
														HX_STACK_LINE(5787)
														_this->axisy = tmp76;
														HX_STACK_LINE(5787)
														_this->axisx = nx;
													}
												}
												HX_STACK_LINE(5787)
												break;
											}
											HX_STACK_LINE(5787)
											bool tmp54 = true;		HX_STACK_VAR(tmp54,"tmp54");
											HX_STACK_LINE(5787)
											if ((tmp54)){
												HX_STACK_LINE(5787)
												break;
											}
										}
									}
									else{
										HX_STACK_LINE(5787)
										Float tmp25 = (gnormy * c1r1x);		HX_STACK_VAR(tmp25,"tmp25");
										HX_STACK_LINE(5787)
										Float tmp26 = (gnormx * c1r1y);		HX_STACK_VAR(tmp26,"tmp26");
										HX_STACK_LINE(5787)
										Float tmp27 = (tmp25 - tmp26);		HX_STACK_VAR(tmp27,"tmp27");
										HX_STACK_LINE(5787)
										Float rn1 = tmp27;		HX_STACK_VAR(rn1,"rn1");
										HX_STACK_LINE(5787)
										Float tmp28 = (gnormy * c1r2x);		HX_STACK_VAR(tmp28,"tmp28");
										HX_STACK_LINE(5787)
										Float tmp29 = (gnormx * c1r2y);		HX_STACK_VAR(tmp29,"tmp29");
										HX_STACK_LINE(5787)
										Float tmp30 = (tmp28 - tmp29);		HX_STACK_VAR(tmp30,"tmp30");
										HX_STACK_LINE(5787)
										Float rn2 = tmp30;		HX_STACK_VAR(rn2,"rn2");
										HX_STACK_LINE(5787)
										Float tmp31 = arb->b2->smass;		HX_STACK_VAR(tmp31,"tmp31");
										HX_STACK_LINE(5787)
										Float tmp32 = (rn2 * rn2);		HX_STACK_VAR(tmp32,"tmp32");
										HX_STACK_LINE(5787)
										Float tmp33 = arb->b2->sinertia;		HX_STACK_VAR(tmp33,"tmp33");
										HX_STACK_LINE(5787)
										Float tmp34 = (tmp32 * tmp33);		HX_STACK_VAR(tmp34,"tmp34");
										HX_STACK_LINE(5787)
										Float tmp35 = (tmp31 + tmp34);		HX_STACK_VAR(tmp35,"tmp35");
										HX_STACK_LINE(5787)
										Float tmp36 = arb->b1->smass;		HX_STACK_VAR(tmp36,"tmp36");
										HX_STACK_LINE(5787)
										Float tmp37 = (tmp35 + tmp36);		HX_STACK_VAR(tmp37,"tmp37");
										HX_STACK_LINE(5787)
										Float tmp38 = (rn1 * rn1);		HX_STACK_VAR(tmp38,"tmp38");
										HX_STACK_LINE(5787)
										Float tmp39 = arb->b1->sinertia;		HX_STACK_VAR(tmp39,"tmp39");
										HX_STACK_LINE(5787)
										Float tmp40 = (tmp38 * tmp39);		HX_STACK_VAR(tmp40,"tmp40");
										HX_STACK_LINE(5787)
										Float tmp41 = (tmp37 + tmp40);		HX_STACK_VAR(tmp41,"tmp41");
										HX_STACK_LINE(5787)
										Float K = tmp41;		HX_STACK_VAR(K,"K");
										HX_STACK_LINE(5787)
										bool tmp42 = (K != (int)0);		HX_STACK_VAR(tmp42,"tmp42");
										HX_STACK_LINE(5787)
										if ((tmp42)){
											HX_STACK_LINE(5787)
											Float tmp43 = arb->biasCoef;		HX_STACK_VAR(tmp43,"tmp43");
											HX_STACK_LINE(5787)
											Float tmp44 = -(tmp43);		HX_STACK_VAR(tmp44,"tmp44");
											HX_STACK_LINE(5787)
											Float tmp45 = err1;		HX_STACK_VAR(tmp45,"tmp45");
											HX_STACK_LINE(5787)
											Float tmp46 = (tmp44 * tmp45);		HX_STACK_VAR(tmp46,"tmp46");
											HX_STACK_LINE(5787)
											Float tmp47 = K;		HX_STACK_VAR(tmp47,"tmp47");
											HX_STACK_LINE(5787)
											Float tmp48 = (Float(tmp46) / Float(tmp47));		HX_STACK_VAR(tmp48,"tmp48");
											HX_STACK_LINE(5787)
											Float jn = tmp48;		HX_STACK_VAR(jn,"jn");
											HX_STACK_LINE(5787)
											Float Jx = ((Float)0.0);		HX_STACK_VAR(Jx,"Jx");
											HX_STACK_LINE(5787)
											Float Jy = ((Float)0.0);		HX_STACK_VAR(Jy,"Jy");
											HX_STACK_LINE(5787)
											{
												HX_STACK_LINE(5787)
												Float t = jn;		HX_STACK_VAR(t,"t");
												HX_STACK_LINE(5787)
												Float tmp49 = (gnormx * t);		HX_STACK_VAR(tmp49,"tmp49");
												HX_STACK_LINE(5787)
												Jx = tmp49;
												HX_STACK_LINE(5787)
												Float tmp50 = (gnormy * t);		HX_STACK_VAR(tmp50,"tmp50");
												HX_STACK_LINE(5787)
												Jy = tmp50;
											}
											HX_STACK_LINE(5787)
											{
												HX_STACK_LINE(5787)
												Float tmp49 = arb->b1->imass;		HX_STACK_VAR(tmp49,"tmp49");
												HX_STACK_LINE(5787)
												Float t = tmp49;		HX_STACK_VAR(t,"t");
												HX_STACK_LINE(5787)
												Float tmp50 = (Jx * t);		HX_STACK_VAR(tmp50,"tmp50");
												HX_STACK_LINE(5787)
												hx::SubEq(arb->b1->posx,tmp50);
												HX_STACK_LINE(5787)
												Float tmp51 = (Jy * t);		HX_STACK_VAR(tmp51,"tmp51");
												HX_STACK_LINE(5787)
												hx::SubEq(arb->b1->posy,tmp51);
											}
											HX_STACK_LINE(5787)
											{
												HX_STACK_LINE(5787)
												::zpp_nape::phys::ZPP_Body _this = arb->b1;		HX_STACK_VAR(_this,"_this");
												HX_STACK_LINE(5787)
												Float tmp49 = rn1;		HX_STACK_VAR(tmp49,"tmp49");
												HX_STACK_LINE(5787)
												Float tmp50 = -(tmp49);		HX_STACK_VAR(tmp50,"tmp50");
												HX_STACK_LINE(5787)
												Float tmp51 = arb->b1->iinertia;		HX_STACK_VAR(tmp51,"tmp51");
												HX_STACK_LINE(5787)
												Float tmp52 = (tmp50 * tmp51);		HX_STACK_VAR(tmp52,"tmp52");
												HX_STACK_LINE(5787)
												Float tmp53 = jn;		HX_STACK_VAR(tmp53,"tmp53");
												HX_STACK_LINE(5787)
												Float tmp54 = (tmp52 * tmp53);		HX_STACK_VAR(tmp54,"tmp54");
												HX_STACK_LINE(5787)
												Float dr = tmp54;		HX_STACK_VAR(dr,"dr");
												HX_STACK_LINE(5787)
												hx::AddEq(_this->rot,dr);
												HX_STACK_LINE(5787)
												Float tmp55 = (dr * dr);		HX_STACK_VAR(tmp55,"tmp55");
												HX_STACK_LINE(5787)
												bool tmp56 = (tmp55 > ((Float)0.0001));		HX_STACK_VAR(tmp56,"tmp56");
												HX_STACK_LINE(5787)
												if ((tmp56)){
													HX_STACK_LINE(5787)
													Float tmp57 = _this->rot;		HX_STACK_VAR(tmp57,"tmp57");
													HX_STACK_LINE(5787)
													Float tmp58 = ::Math_obj::sin(tmp57);		HX_STACK_VAR(tmp58,"tmp58");
													HX_STACK_LINE(5787)
													_this->axisx = tmp58;
													HX_STACK_LINE(5787)
													Float tmp59 = _this->rot;		HX_STACK_VAR(tmp59,"tmp59");
													HX_STACK_LINE(5787)
													Float tmp60 = ::Math_obj::cos(tmp59);		HX_STACK_VAR(tmp60,"tmp60");
													HX_STACK_LINE(5787)
													_this->axisy = tmp60;
													HX_STACK_LINE(5787)
													Dynamic();
												}
												else{
													HX_STACK_LINE(5787)
													Float tmp57 = (dr * dr);		HX_STACK_VAR(tmp57,"tmp57");
													HX_STACK_LINE(5787)
													Float d2 = tmp57;		HX_STACK_VAR(d2,"d2");
													HX_STACK_LINE(5787)
													Float tmp58 = (((Float)0.5) * d2);		HX_STACK_VAR(tmp58,"tmp58");
													HX_STACK_LINE(5787)
													Float tmp59 = ((int)1 - tmp58);		HX_STACK_VAR(tmp59,"tmp59");
													HX_STACK_LINE(5787)
													Float p = tmp59;		HX_STACK_VAR(p,"p");
													HX_STACK_LINE(5787)
													Float tmp60 = (d2 * d2);		HX_STACK_VAR(tmp60,"tmp60");
													HX_STACK_LINE(5787)
													Float tmp61 = (Float(tmp60) / Float((int)8));		HX_STACK_VAR(tmp61,"tmp61");
													HX_STACK_LINE(5787)
													Float tmp62 = ((int)1 - tmp61);		HX_STACK_VAR(tmp62,"tmp62");
													HX_STACK_LINE(5787)
													Float m = tmp62;		HX_STACK_VAR(m,"m");
													HX_STACK_LINE(5787)
													Float tmp63 = (p * _this->axisx);		HX_STACK_VAR(tmp63,"tmp63");
													HX_STACK_LINE(5787)
													Float tmp64 = (dr * _this->axisy);		HX_STACK_VAR(tmp64,"tmp64");
													HX_STACK_LINE(5787)
													Float tmp65 = (tmp63 + tmp64);		HX_STACK_VAR(tmp65,"tmp65");
													HX_STACK_LINE(5787)
													Float tmp66 = m;		HX_STACK_VAR(tmp66,"tmp66");
													HX_STACK_LINE(5787)
													Float tmp67 = (tmp65 * tmp66);		HX_STACK_VAR(tmp67,"tmp67");
													HX_STACK_LINE(5787)
													Float nx = tmp67;		HX_STACK_VAR(nx,"nx");
													HX_STACK_LINE(5787)
													Float tmp68 = (p * _this->axisy);		HX_STACK_VAR(tmp68,"tmp68");
													HX_STACK_LINE(5787)
													Float tmp69 = (dr * _this->axisx);		HX_STACK_VAR(tmp69,"tmp69");
													HX_STACK_LINE(5787)
													Float tmp70 = (tmp68 - tmp69);		HX_STACK_VAR(tmp70,"tmp70");
													HX_STACK_LINE(5787)
													Float tmp71 = m;		HX_STACK_VAR(tmp71,"tmp71");
													HX_STACK_LINE(5787)
													Float tmp72 = (tmp70 * tmp71);		HX_STACK_VAR(tmp72,"tmp72");
													HX_STACK_LINE(5787)
													_this->axisy = tmp72;
													HX_STACK_LINE(5787)
													_this->axisx = nx;
												}
											}
											HX_STACK_LINE(5787)
											{
												HX_STACK_LINE(5787)
												Float tmp49 = arb->b2->imass;		HX_STACK_VAR(tmp49,"tmp49");
												HX_STACK_LINE(5787)
												Float t = tmp49;		HX_STACK_VAR(t,"t");
												HX_STACK_LINE(5787)
												Float tmp50 = (Jx * t);		HX_STACK_VAR(tmp50,"tmp50");
												HX_STACK_LINE(5787)
												hx::AddEq(arb->b2->posx,tmp50);
												HX_STACK_LINE(5787)
												Float tmp51 = (Jy * t);		HX_STACK_VAR(tmp51,"tmp51");
												HX_STACK_LINE(5787)
												hx::AddEq(arb->b2->posy,tmp51);
											}
											HX_STACK_LINE(5787)
											{
												HX_STACK_LINE(5787)
												::zpp_nape::phys::ZPP_Body _this = arb->b2;		HX_STACK_VAR(_this,"_this");
												HX_STACK_LINE(5787)
												Float tmp49 = rn2;		HX_STACK_VAR(tmp49,"tmp49");
												HX_STACK_LINE(5787)
												Float tmp50 = arb->b2->iinertia;		HX_STACK_VAR(tmp50,"tmp50");
												HX_STACK_LINE(5787)
												Float tmp51 = (tmp49 * tmp50);		HX_STACK_VAR(tmp51,"tmp51");
												HX_STACK_LINE(5787)
												Float tmp52 = jn;		HX_STACK_VAR(tmp52,"tmp52");
												HX_STACK_LINE(5787)
												Float tmp53 = (tmp51 * tmp52);		HX_STACK_VAR(tmp53,"tmp53");
												HX_STACK_LINE(5787)
												Float dr = tmp53;		HX_STACK_VAR(dr,"dr");
												HX_STACK_LINE(5787)
												hx::AddEq(_this->rot,dr);
												HX_STACK_LINE(5787)
												Float tmp54 = (dr * dr);		HX_STACK_VAR(tmp54,"tmp54");
												HX_STACK_LINE(5787)
												bool tmp55 = (tmp54 > ((Float)0.0001));		HX_STACK_VAR(tmp55,"tmp55");
												HX_STACK_LINE(5787)
												if ((tmp55)){
													HX_STACK_LINE(5787)
													Float tmp56 = _this->rot;		HX_STACK_VAR(tmp56,"tmp56");
													HX_STACK_LINE(5787)
													Float tmp57 = ::Math_obj::sin(tmp56);		HX_STACK_VAR(tmp57,"tmp57");
													HX_STACK_LINE(5787)
													_this->axisx = tmp57;
													HX_STACK_LINE(5787)
													Float tmp58 = _this->rot;		HX_STACK_VAR(tmp58,"tmp58");
													HX_STACK_LINE(5787)
													Float tmp59 = ::Math_obj::cos(tmp58);		HX_STACK_VAR(tmp59,"tmp59");
													HX_STACK_LINE(5787)
													_this->axisy = tmp59;
													HX_STACK_LINE(5787)
													Dynamic();
												}
												else{
													HX_STACK_LINE(5787)
													Float tmp56 = (dr * dr);		HX_STACK_VAR(tmp56,"tmp56");
													HX_STACK_LINE(5787)
													Float d2 = tmp56;		HX_STACK_VAR(d2,"d2");
													HX_STACK_LINE(5787)
													Float tmp57 = (((Float)0.5) * d2);		HX_STACK_VAR(tmp57,"tmp57");
													HX_STACK_LINE(5787)
													Float tmp58 = ((int)1 - tmp57);		HX_STACK_VAR(tmp58,"tmp58");
													HX_STACK_LINE(5787)
													Float p = tmp58;		HX_STACK_VAR(p,"p");
													HX_STACK_LINE(5787)
													Float tmp59 = (d2 * d2);		HX_STACK_VAR(tmp59,"tmp59");
													HX_STACK_LINE(5787)
													Float tmp60 = (Float(tmp59) / Float((int)8));		HX_STACK_VAR(tmp60,"tmp60");
													HX_STACK_LINE(5787)
													Float tmp61 = ((int)1 - tmp60);		HX_STACK_VAR(tmp61,"tmp61");
													HX_STACK_LINE(5787)
													Float m = tmp61;		HX_STACK_VAR(m,"m");
													HX_STACK_LINE(5787)
													Float tmp62 = (p * _this->axisx);		HX_STACK_VAR(tmp62,"tmp62");
													HX_STACK_LINE(5787)
													Float tmp63 = (dr * _this->axisy);		HX_STACK_VAR(tmp63,"tmp63");
													HX_STACK_LINE(5787)
													Float tmp64 = (tmp62 + tmp63);		HX_STACK_VAR(tmp64,"tmp64");
													HX_STACK_LINE(5787)
													Float tmp65 = m;		HX_STACK_VAR(tmp65,"tmp65");
													HX_STACK_LINE(5787)
													Float tmp66 = (tmp64 * tmp65);		HX_STACK_VAR(tmp66,"tmp66");
													HX_STACK_LINE(5787)
													Float nx = tmp66;		HX_STACK_VAR(nx,"nx");
													HX_STACK_LINE(5787)
													Float tmp67 = (p * _this->axisy);		HX_STACK_VAR(tmp67,"tmp67");
													HX_STACK_LINE(5787)
													Float tmp68 = (dr * _this->axisx);		HX_STACK_VAR(tmp68,"tmp68");
													HX_STACK_LINE(5787)
													Float tmp69 = (tmp67 - tmp68);		HX_STACK_VAR(tmp69,"tmp69");
													HX_STACK_LINE(5787)
													Float tmp70 = m;		HX_STACK_VAR(tmp70,"tmp70");
													HX_STACK_LINE(5787)
													Float tmp71 = (tmp69 * tmp70);		HX_STACK_VAR(tmp71,"tmp71");
													HX_STACK_LINE(5787)
													_this->axisy = tmp71;
													HX_STACK_LINE(5787)
													_this->axisx = nx;
												}
											}
										}
									}
								}
							}
						}
					}
					HX_STACK_LINE(5791)
					arbi = arbi->next;
					HX_STACK_LINE(5792)
					bool tmp7 = fst;		HX_STACK_VAR(tmp7,"tmp7");
					HX_STACK_LINE(5792)
					bool tmp8;		HX_STACK_VAR(tmp8,"tmp8");
					HX_STACK_LINE(5792)
					if ((tmp7)){
						HX_STACK_LINE(5792)
						tmp8 = (arbi == null());
					}
					else{
						HX_STACK_LINE(5792)
						tmp8 = false;
					}
					HX_STACK_LINE(5792)
					if ((tmp8)){
						HX_STACK_LINE(5793)
						::zpp_nape::util::ZNPList_ZPP_ColArbiter tmp9 = this->c_arbiters_true;		HX_STACK_VAR(tmp9,"tmp9");
						HX_STACK_LINE(5793)
						arbi = tmp9->head;
						HX_STACK_LINE(5794)
						fst = false;
					}
				}
			}
		}
	}
return null();
}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Space_obj,iteratePos,(void))

bool ZPP_Space_obj::group_ignore( ::zpp_nape::shape::ZPP_Shape s1,::zpp_nape::shape::ZPP_Shape s2){
	HX_STACK_FRAME("zpp_nape.space.ZPP_Space","group_ignore",0x665189c8,"zpp_nape.space.ZPP_Space.group_ignore","zpp_nape/space/Space.hx",5802,0x2b65ed03)
	HX_STACK_THIS(this)
	HX_STACK_ARG(s1,"s1")
	HX_STACK_ARG(s2,"s2")
	HX_STACK_LINE(5803)
	::zpp_nape::dynamics::ZPP_InteractionGroup tmp;		HX_STACK_VAR(tmp,"tmp");
	HX_STACK_LINE(5803)
	{
		HX_STACK_LINE(5803)
		::zpp_nape::phys::ZPP_Interactor cur = s1;		HX_STACK_VAR(cur,"cur");
		HX_STACK_LINE(5803)
		while((true)){
			HX_STACK_LINE(5803)
			bool tmp1 = (cur != null());		HX_STACK_VAR(tmp1,"tmp1");
			HX_STACK_LINE(5803)
			bool tmp2;		HX_STACK_VAR(tmp2,"tmp2");
			HX_STACK_LINE(5803)
			if ((tmp1)){
				HX_STACK_LINE(5803)
				tmp2 = (cur->group == null());
			}
			else{
				HX_STACK_LINE(5803)
				tmp2 = false;
			}
			HX_STACK_LINE(5803)
			bool tmp3 = !(tmp2);		HX_STACK_VAR(tmp3,"tmp3");
			HX_STACK_LINE(5803)
			if ((tmp3)){
				HX_STACK_LINE(5803)
				break;
			}
			HX_STACK_LINE(5803)
			bool tmp4 = (cur->ishape != null());		HX_STACK_VAR(tmp4,"tmp4");
			HX_STACK_LINE(5803)
			if ((tmp4)){
				HX_STACK_LINE(5803)
				::zpp_nape::phys::ZPP_Body tmp5 = cur->ishape->body;		HX_STACK_VAR(tmp5,"tmp5");
				HX_STACK_LINE(5803)
				cur = tmp5;
			}
			else{
				HX_STACK_LINE(5803)
				bool tmp5 = (cur->icompound != null());		HX_STACK_VAR(tmp5,"tmp5");
				HX_STACK_LINE(5803)
				if ((tmp5)){
					HX_STACK_LINE(5803)
					::zpp_nape::phys::ZPP_Compound tmp6 = cur->icompound->compound;		HX_STACK_VAR(tmp6,"tmp6");
					HX_STACK_LINE(5803)
					cur = tmp6;
				}
				else{
					HX_STACK_LINE(5803)
					::zpp_nape::phys::ZPP_Compound tmp6 = cur->ibody->compound;		HX_STACK_VAR(tmp6,"tmp6");
					HX_STACK_LINE(5803)
					cur = tmp6;
				}
			}
		}
		HX_STACK_LINE(5803)
		bool tmp1 = (cur == null());		HX_STACK_VAR(tmp1,"tmp1");
		HX_STACK_LINE(5803)
		if ((tmp1)){
			HX_STACK_LINE(5803)
			tmp = null();
		}
		else{
			HX_STACK_LINE(5803)
			tmp = cur->group;
		}
	}
	HX_STACK_LINE(5803)
	::zpp_nape::dynamics::ZPP_InteractionGroup g1 = tmp;		HX_STACK_VAR(g1,"g1");
	HX_STACK_LINE(5804)
	bool tmp1 = (g1 == null());		HX_STACK_VAR(tmp1,"tmp1");
	HX_STACK_LINE(5804)
	if ((tmp1)){
		HX_STACK_LINE(5804)
		return false;
	}
	else{
		HX_STACK_LINE(5806)
		::zpp_nape::dynamics::ZPP_InteractionGroup tmp2;		HX_STACK_VAR(tmp2,"tmp2");
		HX_STACK_LINE(5806)
		{
			HX_STACK_LINE(5806)
			::zpp_nape::phys::ZPP_Interactor cur = s2;		HX_STACK_VAR(cur,"cur");
			HX_STACK_LINE(5806)
			while((true)){
				HX_STACK_LINE(5806)
				bool tmp3 = (cur != null());		HX_STACK_VAR(tmp3,"tmp3");
				HX_STACK_LINE(5806)
				bool tmp4;		HX_STACK_VAR(tmp4,"tmp4");
				HX_STACK_LINE(5806)
				if ((tmp3)){
					HX_STACK_LINE(5806)
					tmp4 = (cur->group == null());
				}
				else{
					HX_STACK_LINE(5806)
					tmp4 = false;
				}
				HX_STACK_LINE(5806)
				bool tmp5 = !(tmp4);		HX_STACK_VAR(tmp5,"tmp5");
				HX_STACK_LINE(5806)
				if ((tmp5)){
					HX_STACK_LINE(5806)
					break;
				}
				HX_STACK_LINE(5806)
				bool tmp6 = (cur->ishape != null());		HX_STACK_VAR(tmp6,"tmp6");
				HX_STACK_LINE(5806)
				if ((tmp6)){
					HX_STACK_LINE(5806)
					::zpp_nape::phys::ZPP_Body tmp7 = cur->ishape->body;		HX_STACK_VAR(tmp7,"tmp7");
					HX_STACK_LINE(5806)
					cur = tmp7;
				}
				else{
					HX_STACK_LINE(5806)
					bool tmp7 = (cur->icompound != null());		HX_STACK_VAR(tmp7,"tmp7");
					HX_STACK_LINE(5806)
					if ((tmp7)){
						HX_STACK_LINE(5806)
						::zpp_nape::phys::ZPP_Compound tmp8 = cur->icompound->compound;		HX_STACK_VAR(tmp8,"tmp8");
						HX_STACK_LINE(5806)
						cur = tmp8;
					}
					else{
						HX_STACK_LINE(5806)
						::zpp_nape::phys::ZPP_Compound tmp8 = cur->ibody->compound;		HX_STACK_VAR(tmp8,"tmp8");
						HX_STACK_LINE(5806)
						cur = tmp8;
					}
				}
			}
			HX_STACK_LINE(5806)
			bool tmp3 = (cur == null());		HX_STACK_VAR(tmp3,"tmp3");
			HX_STACK_LINE(5806)
			if ((tmp3)){
				HX_STACK_LINE(5806)
				tmp2 = null();
			}
			else{
				HX_STACK_LINE(5806)
				tmp2 = cur->group;
			}
		}
		HX_STACK_LINE(5806)
		::zpp_nape::dynamics::ZPP_InteractionGroup g2 = tmp2;		HX_STACK_VAR(g2,"g2");
		HX_STACK_LINE(5807)
		bool tmp3 = (g2 == null());		HX_STACK_VAR(tmp3,"tmp3");
		HX_STACK_LINE(5807)
		if ((tmp3)){
			HX_STACK_LINE(5807)
			return false;
		}
		else{
			HX_STACK_LINE(5809)
			bool ret = false;		HX_STACK_VAR(ret,"ret");
			HX_STACK_LINE(5810)
			while((true)){
				HX_STACK_LINE(5810)
				bool tmp4 = (g1 != null());		HX_STACK_VAR(tmp4,"tmp4");
				HX_STACK_LINE(5810)
				bool tmp5;		HX_STACK_VAR(tmp5,"tmp5");
				HX_STACK_LINE(5810)
				if ((tmp4)){
					HX_STACK_LINE(5810)
					tmp5 = (g2 != null());
				}
				else{
					HX_STACK_LINE(5810)
					tmp5 = false;
				}
				HX_STACK_LINE(5810)
				bool tmp6 = !(tmp5);		HX_STACK_VAR(tmp6,"tmp6");
				HX_STACK_LINE(5810)
				if ((tmp6)){
					HX_STACK_LINE(5810)
					break;
				}
				HX_STACK_LINE(5811)
				bool tmp7 = (g1 == g2);		HX_STACK_VAR(tmp7,"tmp7");
				HX_STACK_LINE(5811)
				if ((tmp7)){
					HX_STACK_LINE(5812)
					ret = g1->ignore;
					HX_STACK_LINE(5813)
					break;
				}
				HX_STACK_LINE(5815)
				bool tmp8 = (g1->depth < g2->depth);		HX_STACK_VAR(tmp8,"tmp8");
				HX_STACK_LINE(5815)
				if ((tmp8)){
					HX_STACK_LINE(5815)
					g2 = g2->group;
				}
				else{
					HX_STACK_LINE(5816)
					g1 = g1->group;
				}
			}
			HX_STACK_LINE(5818)
			bool tmp4 = ret;		HX_STACK_VAR(tmp4,"tmp4");
			HX_STACK_LINE(5818)
			return tmp4;
		}
	}
	HX_STACK_LINE(5804)
	return false;
}


HX_DEFINE_DYNAMIC_FUNC2(ZPP_Space_obj,group_ignore,return )

int ZPP_Space_obj::interactionType( ::zpp_nape::shape::ZPP_Shape s1,::zpp_nape::shape::ZPP_Shape s2,::zpp_nape::phys::ZPP_Body b1,::zpp_nape::phys::ZPP_Body b2){
	HX_STACK_FRAME("zpp_nape.space.ZPP_Space","interactionType",0x649d58f6,"zpp_nape.space.ZPP_Space.interactionType","zpp_nape/space/Space.hx",5824,0x2b65ed03)
	HX_STACK_THIS(this)
	HX_STACK_ARG(s1,"s1")
	HX_STACK_ARG(s2,"s2")
	HX_STACK_ARG(b1,"b1")
	HX_STACK_ARG(b2,"b2")
	HX_STACK_LINE(5841)
	bool con_ignore;		HX_STACK_VAR(con_ignore,"con_ignore");
	HX_STACK_LINE(5842)
	{
		HX_STACK_LINE(5843)
		con_ignore = false;
		HX_STACK_LINE(5844)
		{
			HX_STACK_LINE(5845)
			::zpp_nape::util::ZNPNode_ZPP_Constraint tmp = b1->constraints->head;		HX_STACK_VAR(tmp,"tmp");
			HX_STACK_LINE(5845)
			::zpp_nape::util::ZNPNode_ZPP_Constraint cx_ite = tmp;		HX_STACK_VAR(cx_ite,"cx_ite");
			HX_STACK_LINE(5846)
			while((true)){
				HX_STACK_LINE(5846)
				bool tmp1 = (cx_ite != null());		HX_STACK_VAR(tmp1,"tmp1");
				HX_STACK_LINE(5846)
				bool tmp2 = !(tmp1);		HX_STACK_VAR(tmp2,"tmp2");
				HX_STACK_LINE(5846)
				if ((tmp2)){
					HX_STACK_LINE(5846)
					break;
				}
				HX_STACK_LINE(5847)
				::zpp_nape::constraint::ZPP_Constraint con = cx_ite->elt;		HX_STACK_VAR(con,"con");
				HX_STACK_LINE(5848)
				{
					HX_STACK_LINE(5849)
					bool tmp3 = con->ignore;		HX_STACK_VAR(tmp3,"tmp3");
					HX_STACK_LINE(5849)
					bool tmp4;		HX_STACK_VAR(tmp4,"tmp4");
					HX_STACK_LINE(5849)
					if ((tmp3)){
						HX_STACK_LINE(5849)
						int tmp5 = b1->id;		HX_STACK_VAR(tmp5,"tmp5");
						HX_STACK_LINE(5849)
						int tmp6 = b2->id;		HX_STACK_VAR(tmp6,"tmp6");
						HX_STACK_LINE(5849)
						int tmp7 = tmp5;		HX_STACK_VAR(tmp7,"tmp7");
						HX_STACK_LINE(5849)
						int tmp8 = tmp6;		HX_STACK_VAR(tmp8,"tmp8");
						HX_STACK_LINE(5849)
						tmp4 = con->pair_exists(tmp7,tmp8);
					}
					else{
						HX_STACK_LINE(5849)
						tmp4 = false;
					}
					HX_STACK_LINE(5849)
					if ((tmp4)){
						HX_STACK_LINE(5850)
						con_ignore = true;
						HX_STACK_LINE(5851)
						break;
					}
				}
				HX_STACK_LINE(5854)
				cx_ite = cx_ite->next;
			}
		}
	}
	HX_STACK_LINE(5858)
	bool tmp = con_ignore;		HX_STACK_VAR(tmp,"tmp");
	HX_STACK_LINE(5858)
	bool tmp1 = tmp;		HX_STACK_VAR(tmp1,"tmp1");
	HX_STACK_LINE(5858)
	bool tmp2 = !(tmp1);		HX_STACK_VAR(tmp2,"tmp2");
	HX_STACK_LINE(5858)
	bool tmp3;		HX_STACK_VAR(tmp3,"tmp3");
	HX_STACK_LINE(5858)
	if ((tmp2)){
		HX_STACK_LINE(5858)
		bool tmp4;		HX_STACK_VAR(tmp4,"tmp4");
		HX_STACK_LINE(5858)
		{
			HX_STACK_LINE(5858)
			::zpp_nape::dynamics::ZPP_InteractionGroup tmp5;		HX_STACK_VAR(tmp5,"tmp5");
			HX_STACK_LINE(5858)
			{
				HX_STACK_LINE(5858)
				::zpp_nape::phys::ZPP_Interactor cur = s1;		HX_STACK_VAR(cur,"cur");
				HX_STACK_LINE(5858)
				while((true)){
					HX_STACK_LINE(5858)
					bool tmp6 = (cur != null());		HX_STACK_VAR(tmp6,"tmp6");
					HX_STACK_LINE(5858)
					bool tmp7 = tmp6;		HX_STACK_VAR(tmp7,"tmp7");
					HX_STACK_LINE(5858)
					bool tmp8;		HX_STACK_VAR(tmp8,"tmp8");
					HX_STACK_LINE(5858)
					bool tmp9 = tmp7;		HX_STACK_VAR(tmp9,"tmp9");
					HX_STACK_LINE(5858)
					if ((tmp9)){
						HX_STACK_LINE(5858)
						bool tmp10 = (cur->group == null());		HX_STACK_VAR(tmp10,"tmp10");
						HX_STACK_LINE(5858)
						tmp8 = tmp10;
					}
					else{
						HX_STACK_LINE(5858)
						tmp8 = false;
					}
					HX_STACK_LINE(5858)
					bool tmp10 = tmp8;		HX_STACK_VAR(tmp10,"tmp10");
					HX_STACK_LINE(5858)
					bool tmp11 = !(tmp10);		HX_STACK_VAR(tmp11,"tmp11");
					HX_STACK_LINE(5858)
					bool tmp12 = tmp11;		HX_STACK_VAR(tmp12,"tmp12");
					HX_STACK_LINE(5858)
					bool tmp13 = tmp12;		HX_STACK_VAR(tmp13,"tmp13");
					HX_STACK_LINE(5858)
					if ((tmp13)){
						HX_STACK_LINE(5858)
						break;
					}
					HX_STACK_LINE(5858)
					bool tmp14 = (cur->ishape != null());		HX_STACK_VAR(tmp14,"tmp14");
					HX_STACK_LINE(5858)
					bool tmp15 = tmp14;		HX_STACK_VAR(tmp15,"tmp15");
					HX_STACK_LINE(5858)
					bool tmp16 = tmp15;		HX_STACK_VAR(tmp16,"tmp16");
					HX_STACK_LINE(5858)
					if ((tmp16)){
						HX_STACK_LINE(5858)
						::zpp_nape::phys::ZPP_Body tmp17 = cur->ishape->body;		HX_STACK_VAR(tmp17,"tmp17");
						HX_STACK_LINE(5858)
						::zpp_nape::phys::ZPP_Body tmp18 = tmp17;		HX_STACK_VAR(tmp18,"tmp18");
						HX_STACK_LINE(5858)
						cur = tmp18;
					}
					else{
						HX_STACK_LINE(5858)
						bool tmp17 = (cur->icompound != null());		HX_STACK_VAR(tmp17,"tmp17");
						HX_STACK_LINE(5858)
						bool tmp18 = tmp17;		HX_STACK_VAR(tmp18,"tmp18");
						HX_STACK_LINE(5858)
						bool tmp19 = tmp18;		HX_STACK_VAR(tmp19,"tmp19");
						HX_STACK_LINE(5858)
						if ((tmp19)){
							HX_STACK_LINE(5858)
							::zpp_nape::phys::ZPP_Compound tmp20 = cur->icompound->compound;		HX_STACK_VAR(tmp20,"tmp20");
							HX_STACK_LINE(5858)
							::zpp_nape::phys::ZPP_Compound tmp21 = tmp20;		HX_STACK_VAR(tmp21,"tmp21");
							HX_STACK_LINE(5858)
							cur = tmp21;
						}
						else{
							HX_STACK_LINE(5858)
							::zpp_nape::phys::ZPP_Compound tmp20 = cur->ibody->compound;		HX_STACK_VAR(tmp20,"tmp20");
							HX_STACK_LINE(5858)
							::zpp_nape::phys::ZPP_Compound tmp21 = tmp20;		HX_STACK_VAR(tmp21,"tmp21");
							HX_STACK_LINE(5858)
							cur = tmp21;
						}
					}
				}
				HX_STACK_LINE(5858)
				bool tmp6 = (cur == null());		HX_STACK_VAR(tmp6,"tmp6");
				HX_STACK_LINE(5858)
				bool tmp7 = tmp6;		HX_STACK_VAR(tmp7,"tmp7");
				HX_STACK_LINE(5858)
				bool tmp8 = tmp7;		HX_STACK_VAR(tmp8,"tmp8");
				HX_STACK_LINE(5858)
				if ((tmp8)){
					HX_STACK_LINE(5858)
					tmp5 = null();
				}
				else{
					HX_STACK_LINE(5858)
					tmp5 = cur->group;
				}
			}
			HX_STACK_LINE(5858)
			::zpp_nape::dynamics::ZPP_InteractionGroup g1 = tmp5;		HX_STACK_VAR(g1,"g1");
			HX_STACK_LINE(5858)
			bool tmp6 = (g1 == null());		HX_STACK_VAR(tmp6,"tmp6");
			HX_STACK_LINE(5858)
			bool tmp7 = tmp6;		HX_STACK_VAR(tmp7,"tmp7");
			HX_STACK_LINE(5858)
			bool tmp8 = tmp7;		HX_STACK_VAR(tmp8,"tmp8");
			HX_STACK_LINE(5858)
			if ((tmp8)){
				HX_STACK_LINE(5858)
				tmp4 = false;
			}
			else{
				HX_STACK_LINE(5858)
				::zpp_nape::dynamics::ZPP_InteractionGroup tmp9;		HX_STACK_VAR(tmp9,"tmp9");
				HX_STACK_LINE(5858)
				{
					HX_STACK_LINE(5858)
					::zpp_nape::phys::ZPP_Interactor cur = s2;		HX_STACK_VAR(cur,"cur");
					HX_STACK_LINE(5858)
					while((true)){
						HX_STACK_LINE(5858)
						bool tmp10 = (cur != null());		HX_STACK_VAR(tmp10,"tmp10");
						HX_STACK_LINE(5858)
						bool tmp11 = tmp10;		HX_STACK_VAR(tmp11,"tmp11");
						HX_STACK_LINE(5858)
						bool tmp12;		HX_STACK_VAR(tmp12,"tmp12");
						HX_STACK_LINE(5858)
						bool tmp13 = tmp11;		HX_STACK_VAR(tmp13,"tmp13");
						HX_STACK_LINE(5858)
						if ((tmp13)){
							HX_STACK_LINE(5858)
							bool tmp14 = (cur->group == null());		HX_STACK_VAR(tmp14,"tmp14");
							HX_STACK_LINE(5858)
							tmp12 = tmp14;
						}
						else{
							HX_STACK_LINE(5858)
							tmp12 = false;
						}
						HX_STACK_LINE(5858)
						bool tmp14 = tmp12;		HX_STACK_VAR(tmp14,"tmp14");
						HX_STACK_LINE(5858)
						bool tmp15 = !(tmp14);		HX_STACK_VAR(tmp15,"tmp15");
						HX_STACK_LINE(5858)
						bool tmp16 = tmp15;		HX_STACK_VAR(tmp16,"tmp16");
						HX_STACK_LINE(5858)
						bool tmp17 = tmp16;		HX_STACK_VAR(tmp17,"tmp17");
						HX_STACK_LINE(5858)
						if ((tmp17)){
							HX_STACK_LINE(5858)
							break;
						}
						HX_STACK_LINE(5858)
						bool tmp18 = (cur->ishape != null());		HX_STACK_VAR(tmp18,"tmp18");
						HX_STACK_LINE(5858)
						bool tmp19 = tmp18;		HX_STACK_VAR(tmp19,"tmp19");
						HX_STACK_LINE(5858)
						bool tmp20 = tmp19;		HX_STACK_VAR(tmp20,"tmp20");
						HX_STACK_LINE(5858)
						if ((tmp20)){
							HX_STACK_LINE(5858)
							::zpp_nape::phys::ZPP_Body tmp21 = cur->ishape->body;		HX_STACK_VAR(tmp21,"tmp21");
							HX_STACK_LINE(5858)
							::zpp_nape::phys::ZPP_Body tmp22 = tmp21;		HX_STACK_VAR(tmp22,"tmp22");
							HX_STACK_LINE(5858)
							cur = tmp22;
						}
						else{
							HX_STACK_LINE(5858)
							bool tmp21 = (cur->icompound != null());		HX_STACK_VAR(tmp21,"tmp21");
							HX_STACK_LINE(5858)
							bool tmp22 = tmp21;		HX_STACK_VAR(tmp22,"tmp22");
							HX_STACK_LINE(5858)
							bool tmp23 = tmp22;		HX_STACK_VAR(tmp23,"tmp23");
							HX_STACK_LINE(5858)
							if ((tmp23)){
								HX_STACK_LINE(5858)
								::zpp_nape::phys::ZPP_Compound tmp24 = cur->icompound->compound;		HX_STACK_VAR(tmp24,"tmp24");
								HX_STACK_LINE(5858)
								::zpp_nape::phys::ZPP_Compound tmp25 = tmp24;		HX_STACK_VAR(tmp25,"tmp25");
								HX_STACK_LINE(5858)
								cur = tmp25;
							}
							else{
								HX_STACK_LINE(5858)
								::zpp_nape::phys::ZPP_Compound tmp24 = cur->ibody->compound;		HX_STACK_VAR(tmp24,"tmp24");
								HX_STACK_LINE(5858)
								::zpp_nape::phys::ZPP_Compound tmp25 = tmp24;		HX_STACK_VAR(tmp25,"tmp25");
								HX_STACK_LINE(5858)
								cur = tmp25;
							}
						}
					}
					HX_STACK_LINE(5858)
					bool tmp10 = (cur == null());		HX_STACK_VAR(tmp10,"tmp10");
					HX_STACK_LINE(5858)
					bool tmp11 = tmp10;		HX_STACK_VAR(tmp11,"tmp11");
					HX_STACK_LINE(5858)
					bool tmp12 = tmp11;		HX_STACK_VAR(tmp12,"tmp12");
					HX_STACK_LINE(5858)
					if ((tmp12)){
						HX_STACK_LINE(5858)
						tmp9 = null();
					}
					else{
						HX_STACK_LINE(5858)
						tmp9 = cur->group;
					}
				}
				HX_STACK_LINE(5858)
				::zpp_nape::dynamics::ZPP_InteractionGroup g2 = tmp9;		HX_STACK_VAR(g2,"g2");
				HX_STACK_LINE(5858)
				bool tmp10 = (g2 == null());		HX_STACK_VAR(tmp10,"tmp10");
				HX_STACK_LINE(5858)
				bool tmp11 = tmp10;		HX_STACK_VAR(tmp11,"tmp11");
				HX_STACK_LINE(5858)
				bool tmp12 = tmp11;		HX_STACK_VAR(tmp12,"tmp12");
				HX_STACK_LINE(5858)
				if ((tmp12)){
					HX_STACK_LINE(5858)
					tmp4 = false;
				}
				else{
					HX_STACK_LINE(5858)
					bool ret = false;		HX_STACK_VAR(ret,"ret");
					HX_STACK_LINE(5858)
					while((true)){
						HX_STACK_LINE(5858)
						bool tmp13 = (g1 != null());		HX_STACK_VAR(tmp13,"tmp13");
						HX_STACK_LINE(5858)
						bool tmp14 = tmp13;		HX_STACK_VAR(tmp14,"tmp14");
						HX_STACK_LINE(5858)
						bool tmp15;		HX_STACK_VAR(tmp15,"tmp15");
						HX_STACK_LINE(5858)
						bool tmp16 = tmp14;		HX_STACK_VAR(tmp16,"tmp16");
						HX_STACK_LINE(5858)
						if ((tmp16)){
							HX_STACK_LINE(5858)
							bool tmp17 = (g2 != null());		HX_STACK_VAR(tmp17,"tmp17");
							HX_STACK_LINE(5858)
							tmp15 = tmp17;
						}
						else{
							HX_STACK_LINE(5858)
							tmp15 = false;
						}
						HX_STACK_LINE(5858)
						bool tmp17 = tmp15;		HX_STACK_VAR(tmp17,"tmp17");
						HX_STACK_LINE(5858)
						bool tmp18 = !(tmp17);		HX_STACK_VAR(tmp18,"tmp18");
						HX_STACK_LINE(5858)
						bool tmp19 = tmp18;		HX_STACK_VAR(tmp19,"tmp19");
						HX_STACK_LINE(5858)
						bool tmp20 = tmp19;		HX_STACK_VAR(tmp20,"tmp20");
						HX_STACK_LINE(5858)
						if ((tmp20)){
							HX_STACK_LINE(5858)
							break;
						}
						HX_STACK_LINE(5858)
						bool tmp21 = (g1 == g2);		HX_STACK_VAR(tmp21,"tmp21");
						HX_STACK_LINE(5858)
						bool tmp22 = tmp21;		HX_STACK_VAR(tmp22,"tmp22");
						HX_STACK_LINE(5858)
						bool tmp23 = tmp22;		HX_STACK_VAR(tmp23,"tmp23");
						HX_STACK_LINE(5858)
						if ((tmp23)){
							HX_STACK_LINE(5858)
							ret = g1->ignore;
							HX_STACK_LINE(5858)
							break;
						}
						HX_STACK_LINE(5858)
						bool tmp24 = (g1->depth < g2->depth);		HX_STACK_VAR(tmp24,"tmp24");
						HX_STACK_LINE(5858)
						bool tmp25 = tmp24;		HX_STACK_VAR(tmp25,"tmp25");
						HX_STACK_LINE(5858)
						bool tmp26 = tmp25;		HX_STACK_VAR(tmp26,"tmp26");
						HX_STACK_LINE(5858)
						if ((tmp26)){
							HX_STACK_LINE(5858)
							g2 = g2->group;
						}
						else{
							HX_STACK_LINE(5858)
							g1 = g1->group;
						}
					}
					HX_STACK_LINE(5858)
					tmp4 = ret;
				}
			}
		}
		HX_STACK_LINE(5858)
		bool tmp5 = tmp4;		HX_STACK_VAR(tmp5,"tmp5");
		HX_STACK_LINE(5858)
		tmp3 = !(tmp5);
	}
	else{
		HX_STACK_LINE(5858)
		tmp3 = false;
	}
	HX_STACK_LINE(5858)
	if ((tmp3)){
		HX_STACK_LINE(5859)
		bool tmp4 = s1->sensorEnabled;		HX_STACK_VAR(tmp4,"tmp4");
		HX_STACK_LINE(5859)
		bool tmp5 = !(tmp4);		HX_STACK_VAR(tmp5,"tmp5");
		HX_STACK_LINE(5859)
		bool tmp6 = tmp5;		HX_STACK_VAR(tmp6,"tmp6");
		HX_STACK_LINE(5859)
		bool tmp7;		HX_STACK_VAR(tmp7,"tmp7");
		HX_STACK_LINE(5859)
		if ((tmp6)){
			HX_STACK_LINE(5859)
			tmp7 = s2->sensorEnabled;
		}
		else{
			HX_STACK_LINE(5859)
			tmp7 = true;
		}
		HX_STACK_LINE(5859)
		bool tmp8;		HX_STACK_VAR(tmp8,"tmp8");
		HX_STACK_LINE(5859)
		if ((tmp7)){
			HX_STACK_LINE(5859)
			::zpp_nape::dynamics::ZPP_InteractionFilter _this = s1->filter;		HX_STACK_VAR(_this,"_this");
			HX_STACK_LINE(5859)
			::zpp_nape::dynamics::ZPP_InteractionFilter x = s2->filter;		HX_STACK_VAR(x,"x");
			HX_STACK_LINE(5859)
			int tmp9 = (int(_this->sensorMask) & int(x->sensorGroup));		HX_STACK_VAR(tmp9,"tmp9");
			HX_STACK_LINE(5859)
			int tmp10 = tmp9;		HX_STACK_VAR(tmp10,"tmp10");
			HX_STACK_LINE(5859)
			bool tmp11 = (tmp10 != (int)0);		HX_STACK_VAR(tmp11,"tmp11");
			HX_STACK_LINE(5859)
			bool tmp12 = tmp11;		HX_STACK_VAR(tmp12,"tmp12");
			HX_STACK_LINE(5859)
			bool tmp13 = tmp12;		HX_STACK_VAR(tmp13,"tmp13");
			HX_STACK_LINE(5859)
			if ((tmp13)){
				HX_STACK_LINE(5859)
				int tmp14 = (int(x->sensorMask) & int(_this->sensorGroup));		HX_STACK_VAR(tmp14,"tmp14");
				HX_STACK_LINE(5859)
				int tmp15 = tmp14;		HX_STACK_VAR(tmp15,"tmp15");
				HX_STACK_LINE(5859)
				int tmp16 = tmp15;		HX_STACK_VAR(tmp16,"tmp16");
				HX_STACK_LINE(5859)
				tmp8 = (tmp16 != (int)0);
			}
			else{
				HX_STACK_LINE(5859)
				tmp8 = false;
			}
		}
		else{
			HX_STACK_LINE(5859)
			tmp8 = false;
		}
		HX_STACK_LINE(5859)
		if ((tmp8)){
			HX_STACK_LINE(5860)
			return (int)2;
		}
		else{
			HX_STACK_LINE(5862)
			bool tmp9 = s1->fluidEnabled;		HX_STACK_VAR(tmp9,"tmp9");
			HX_STACK_LINE(5862)
			bool tmp10 = !(tmp9);		HX_STACK_VAR(tmp10,"tmp10");
			HX_STACK_LINE(5862)
			bool tmp11 = tmp10;		HX_STACK_VAR(tmp11,"tmp11");
			HX_STACK_LINE(5862)
			bool tmp12;		HX_STACK_VAR(tmp12,"tmp12");
			HX_STACK_LINE(5862)
			if ((tmp11)){
				HX_STACK_LINE(5862)
				tmp12 = s2->fluidEnabled;
			}
			else{
				HX_STACK_LINE(5862)
				tmp12 = true;
			}
			HX_STACK_LINE(5862)
			bool tmp13 = tmp12;		HX_STACK_VAR(tmp13,"tmp13");
			HX_STACK_LINE(5862)
			bool tmp14;		HX_STACK_VAR(tmp14,"tmp14");
			HX_STACK_LINE(5862)
			if ((tmp13)){
				HX_STACK_LINE(5862)
				::zpp_nape::dynamics::ZPP_InteractionFilter _this = s1->filter;		HX_STACK_VAR(_this,"_this");
				HX_STACK_LINE(5862)
				::zpp_nape::dynamics::ZPP_InteractionFilter x = s2->filter;		HX_STACK_VAR(x,"x");
				HX_STACK_LINE(5862)
				int tmp15 = (int(_this->fluidMask) & int(x->fluidGroup));		HX_STACK_VAR(tmp15,"tmp15");
				HX_STACK_LINE(5862)
				int tmp16 = tmp15;		HX_STACK_VAR(tmp16,"tmp16");
				HX_STACK_LINE(5862)
				int tmp17 = tmp16;		HX_STACK_VAR(tmp17,"tmp17");
				HX_STACK_LINE(5862)
				bool tmp18 = (tmp17 != (int)0);		HX_STACK_VAR(tmp18,"tmp18");
				HX_STACK_LINE(5862)
				bool tmp19 = tmp18;		HX_STACK_VAR(tmp19,"tmp19");
				HX_STACK_LINE(5862)
				bool tmp20 = tmp19;		HX_STACK_VAR(tmp20,"tmp20");
				HX_STACK_LINE(5862)
				bool tmp21 = tmp20;		HX_STACK_VAR(tmp21,"tmp21");
				HX_STACK_LINE(5862)
				bool tmp22 = tmp21;		HX_STACK_VAR(tmp22,"tmp22");
				HX_STACK_LINE(5862)
				if ((tmp22)){
					HX_STACK_LINE(5862)
					int tmp23 = (int(x->fluidMask) & int(_this->fluidGroup));		HX_STACK_VAR(tmp23,"tmp23");
					HX_STACK_LINE(5862)
					int tmp24 = tmp23;		HX_STACK_VAR(tmp24,"tmp24");
					HX_STACK_LINE(5862)
					int tmp25 = tmp24;		HX_STACK_VAR(tmp25,"tmp25");
					HX_STACK_LINE(5862)
					int tmp26 = tmp25;		HX_STACK_VAR(tmp26,"tmp26");
					HX_STACK_LINE(5862)
					tmp14 = (tmp26 != (int)0);
				}
				else{
					HX_STACK_LINE(5862)
					tmp14 = false;
				}
			}
			else{
				HX_STACK_LINE(5862)
				tmp14 = false;
			}
			HX_STACK_LINE(5862)
			bool tmp15;		HX_STACK_VAR(tmp15,"tmp15");
			HX_STACK_LINE(5862)
			if ((tmp14)){
				HX_STACK_LINE(5862)
				bool tmp16 = (b1->imass == (int)0);		HX_STACK_VAR(tmp16,"tmp16");
				HX_STACK_LINE(5862)
				bool tmp17 = tmp16;		HX_STACK_VAR(tmp17,"tmp17");
				HX_STACK_LINE(5862)
				bool tmp18 = tmp17;		HX_STACK_VAR(tmp18,"tmp18");
				HX_STACK_LINE(5862)
				bool tmp19;		HX_STACK_VAR(tmp19,"tmp19");
				HX_STACK_LINE(5862)
				bool tmp20 = tmp18;		HX_STACK_VAR(tmp20,"tmp20");
				HX_STACK_LINE(5862)
				if ((tmp20)){
					HX_STACK_LINE(5862)
					bool tmp21 = (b2->imass == (int)0);		HX_STACK_VAR(tmp21,"tmp21");
					HX_STACK_LINE(5862)
					tmp19 = tmp21;
				}
				else{
					HX_STACK_LINE(5862)
					tmp19 = false;
				}
				HX_STACK_LINE(5862)
				bool tmp21 = tmp19;		HX_STACK_VAR(tmp21,"tmp21");
				HX_STACK_LINE(5862)
				bool tmp22;		HX_STACK_VAR(tmp22,"tmp22");
				HX_STACK_LINE(5862)
				bool tmp23 = tmp21;		HX_STACK_VAR(tmp23,"tmp23");
				HX_STACK_LINE(5862)
				if ((tmp23)){
					HX_STACK_LINE(5862)
					bool tmp24 = (b1->iinertia == (int)0);		HX_STACK_VAR(tmp24,"tmp24");
					HX_STACK_LINE(5862)
					tmp22 = tmp24;
				}
				else{
					HX_STACK_LINE(5862)
					tmp22 = false;
				}
				HX_STACK_LINE(5862)
				bool tmp24;		HX_STACK_VAR(tmp24,"tmp24");
				HX_STACK_LINE(5862)
				bool tmp25 = tmp22;		HX_STACK_VAR(tmp25,"tmp25");
				HX_STACK_LINE(5862)
				if ((tmp25)){
					HX_STACK_LINE(5862)
					bool tmp26 = (b2->iinertia == (int)0);		HX_STACK_VAR(tmp26,"tmp26");
					HX_STACK_LINE(5862)
					tmp24 = tmp26;
				}
				else{
					HX_STACK_LINE(5862)
					tmp24 = false;
				}
				HX_STACK_LINE(5862)
				bool tmp26 = tmp24;		HX_STACK_VAR(tmp26,"tmp26");
				HX_STACK_LINE(5862)
				tmp15 = !(tmp26);
			}
			else{
				HX_STACK_LINE(5862)
				tmp15 = false;
			}
			HX_STACK_LINE(5862)
			if ((tmp15)){
				HX_STACK_LINE(5863)
				return (int)0;
			}
			else{
				HX_STACK_LINE(5865)
				bool tmp16;		HX_STACK_VAR(tmp16,"tmp16");
				HX_STACK_LINE(5865)
				{
					HX_STACK_LINE(5865)
					::zpp_nape::dynamics::ZPP_InteractionFilter _this = s1->filter;		HX_STACK_VAR(_this,"_this");
					HX_STACK_LINE(5865)
					::zpp_nape::dynamics::ZPP_InteractionFilter x = s2->filter;		HX_STACK_VAR(x,"x");
					HX_STACK_LINE(5865)
					int tmp17 = (int(_this->collisionMask) & int(x->collisionGroup));		HX_STACK_VAR(tmp17,"tmp17");
					HX_STACK_LINE(5865)
					int tmp18 = tmp17;		HX_STACK_VAR(tmp18,"tmp18");
					HX_STACK_LINE(5865)
					bool tmp19 = (tmp18 != (int)0);		HX_STACK_VAR(tmp19,"tmp19");
					HX_STACK_LINE(5865)
					bool tmp20 = tmp19;		HX_STACK_VAR(tmp20,"tmp20");
					HX_STACK_LINE(5865)
					bool tmp21 = tmp20;		HX_STACK_VAR(tmp21,"tmp21");
					HX_STACK_LINE(5865)
					if ((tmp21)){
						HX_STACK_LINE(5865)
						int tmp22 = (int(x->collisionMask) & int(_this->collisionGroup));		HX_STACK_VAR(tmp22,"tmp22");
						HX_STACK_LINE(5865)
						int tmp23 = tmp22;		HX_STACK_VAR(tmp23,"tmp23");
						HX_STACK_LINE(5865)
						int tmp24 = tmp23;		HX_STACK_VAR(tmp24,"tmp24");
						HX_STACK_LINE(5865)
						tmp16 = (tmp24 != (int)0);
					}
					else{
						HX_STACK_LINE(5865)
						tmp16 = false;
					}
				}
				HX_STACK_LINE(5865)
				bool tmp17;		HX_STACK_VAR(tmp17,"tmp17");
				HX_STACK_LINE(5865)
				if ((tmp16)){
					HX_STACK_LINE(5865)
					bool tmp18 = (b1->imass == (int)0);		HX_STACK_VAR(tmp18,"tmp18");
					HX_STACK_LINE(5865)
					bool tmp19 = tmp18;		HX_STACK_VAR(tmp19,"tmp19");
					HX_STACK_LINE(5865)
					bool tmp20 = tmp19;		HX_STACK_VAR(tmp20,"tmp20");
					HX_STACK_LINE(5865)
					bool tmp21;		HX_STACK_VAR(tmp21,"tmp21");
					HX_STACK_LINE(5865)
					bool tmp22 = tmp20;		HX_STACK_VAR(tmp22,"tmp22");
					HX_STACK_LINE(5865)
					if ((tmp22)){
						HX_STACK_LINE(5865)
						bool tmp23 = (b2->imass == (int)0);		HX_STACK_VAR(tmp23,"tmp23");
						HX_STACK_LINE(5865)
						tmp21 = tmp23;
					}
					else{
						HX_STACK_LINE(5865)
						tmp21 = false;
					}
					HX_STACK_LINE(5865)
					bool tmp23 = tmp21;		HX_STACK_VAR(tmp23,"tmp23");
					HX_STACK_LINE(5865)
					bool tmp24;		HX_STACK_VAR(tmp24,"tmp24");
					HX_STACK_LINE(5865)
					bool tmp25 = tmp23;		HX_STACK_VAR(tmp25,"tmp25");
					HX_STACK_LINE(5865)
					if ((tmp25)){
						HX_STACK_LINE(5865)
						bool tmp26 = (b1->iinertia == (int)0);		HX_STACK_VAR(tmp26,"tmp26");
						HX_STACK_LINE(5865)
						tmp24 = tmp26;
					}
					else{
						HX_STACK_LINE(5865)
						tmp24 = false;
					}
					HX_STACK_LINE(5865)
					bool tmp26;		HX_STACK_VAR(tmp26,"tmp26");
					HX_STACK_LINE(5865)
					bool tmp27 = tmp24;		HX_STACK_VAR(tmp27,"tmp27");
					HX_STACK_LINE(5865)
					if ((tmp27)){
						HX_STACK_LINE(5865)
						bool tmp28 = (b2->iinertia == (int)0);		HX_STACK_VAR(tmp28,"tmp28");
						HX_STACK_LINE(5865)
						tmp26 = tmp28;
					}
					else{
						HX_STACK_LINE(5865)
						tmp26 = false;
					}
					HX_STACK_LINE(5865)
					bool tmp28 = tmp26;		HX_STACK_VAR(tmp28,"tmp28");
					HX_STACK_LINE(5865)
					tmp17 = !(tmp28);
				}
				else{
					HX_STACK_LINE(5865)
					tmp17 = false;
				}
				HX_STACK_LINE(5865)
				if ((tmp17)){
					HX_STACK_LINE(5866)
					return (int)1;
				}
				else{
					HX_STACK_LINE(5868)
					return (int)-1;
				}
			}
		}
	}
	else{
		HX_STACK_LINE(5870)
		return (int)-1;
	}
	HX_STACK_LINE(5858)
	return (int)0;
}


HX_DEFINE_DYNAMIC_FUNC4(ZPP_Space_obj,interactionType,return )

::zpp_nape::dynamics::ZPP_Arbiter ZPP_Space_obj::narrowPhase( ::zpp_nape::shape::ZPP_Shape s1,::zpp_nape::shape::ZPP_Shape s2,bool stat,::zpp_nape::dynamics::ZPP_Arbiter in_arb,bool continuous){
	HX_STACK_FRAME("zpp_nape.space.ZPP_Space","narrowPhase",0x3219dfea,"zpp_nape.space.ZPP_Space.narrowPhase","zpp_nape/space/Space.hx",5874,0x2b65ed03)
	HX_STACK_THIS(this)
	HX_STACK_ARG(s1,"s1")
	HX_STACK_ARG(s2,"s2")
	HX_STACK_ARG(stat,"stat")
	HX_STACK_ARG(in_arb,"in_arb")
	HX_STACK_ARG(continuous,"continuous")
	HX_STACK_LINE(5874)
	::zpp_nape::space::ZPP_Space _g = hx::ObjectPtr<OBJ_>(this);		HX_STACK_VAR(_g,"_g");
	HX_STACK_LINE(5877)
	::zpp_nape::dynamics::ZPP_Arbiter ret = null();		HX_STACK_VAR(ret,"ret");
	HX_STACK_LINE(5878)
	::zpp_nape::phys::ZPP_Body b1 = s1->body;		HX_STACK_VAR(b1,"b1");
	HX_STACK_LINE(5879)
	::zpp_nape::phys::ZPP_Body b2 = s2->body;		HX_STACK_VAR(b2,"b2");
	HX_STACK_LINE(5880)
	int tmp;		HX_STACK_VAR(tmp,"tmp");
	HX_STACK_LINE(5880)
	{
		HX_STACK_LINE(5880)
		bool con_ignore;		HX_STACK_VAR(con_ignore,"con_ignore");
		HX_STACK_LINE(5880)
		{
			HX_STACK_LINE(5880)
			con_ignore = false;
			HX_STACK_LINE(5880)
			{
				HX_STACK_LINE(5880)
				::zpp_nape::util::ZNPNode_ZPP_Constraint tmp1 = b1->constraints->head;		HX_STACK_VAR(tmp1,"tmp1");
				HX_STACK_LINE(5880)
				::zpp_nape::util::ZNPNode_ZPP_Constraint cx_ite = tmp1;		HX_STACK_VAR(cx_ite,"cx_ite");
				HX_STACK_LINE(5880)
				while((true)){
					HX_STACK_LINE(5880)
					bool tmp2 = (cx_ite != null());		HX_STACK_VAR(tmp2,"tmp2");
					HX_STACK_LINE(5880)
					bool tmp3 = !(tmp2);		HX_STACK_VAR(tmp3,"tmp3");
					HX_STACK_LINE(5880)
					if ((tmp3)){
						HX_STACK_LINE(5880)
						break;
					}
					HX_STACK_LINE(5880)
					::zpp_nape::constraint::ZPP_Constraint con = cx_ite->elt;		HX_STACK_VAR(con,"con");
					HX_STACK_LINE(5880)
					{
						HX_STACK_LINE(5880)
						bool tmp4 = con->ignore;		HX_STACK_VAR(tmp4,"tmp4");
						HX_STACK_LINE(5880)
						bool tmp5;		HX_STACK_VAR(tmp5,"tmp5");
						HX_STACK_LINE(5880)
						if ((tmp4)){
							HX_STACK_LINE(5880)
							int tmp6 = b1->id;		HX_STACK_VAR(tmp6,"tmp6");
							HX_STACK_LINE(5880)
							int tmp7 = b2->id;		HX_STACK_VAR(tmp7,"tmp7");
							HX_STACK_LINE(5880)
							int tmp8 = tmp6;		HX_STACK_VAR(tmp8,"tmp8");
							HX_STACK_LINE(5880)
							int tmp9 = tmp7;		HX_STACK_VAR(tmp9,"tmp9");
							HX_STACK_LINE(5880)
							tmp5 = con->pair_exists(tmp8,tmp9);
						}
						else{
							HX_STACK_LINE(5880)
							tmp5 = false;
						}
						HX_STACK_LINE(5880)
						if ((tmp5)){
							HX_STACK_LINE(5880)
							con_ignore = true;
							HX_STACK_LINE(5880)
							break;
						}
					}
					HX_STACK_LINE(5880)
					cx_ite = cx_ite->next;
				}
			}
		}
		HX_STACK_LINE(5880)
		bool tmp1 = con_ignore;		HX_STACK_VAR(tmp1,"tmp1");
		HX_STACK_LINE(5880)
		bool tmp2 = tmp1;		HX_STACK_VAR(tmp2,"tmp2");
		HX_STACK_LINE(5880)
		bool tmp3 = !(tmp2);		HX_STACK_VAR(tmp3,"tmp3");
		HX_STACK_LINE(5880)
		bool tmp4;		HX_STACK_VAR(tmp4,"tmp4");
		HX_STACK_LINE(5880)
		if ((tmp3)){
			HX_STACK_LINE(5880)
			bool tmp5;		HX_STACK_VAR(tmp5,"tmp5");
			HX_STACK_LINE(5880)
			{
				HX_STACK_LINE(5880)
				::zpp_nape::dynamics::ZPP_InteractionGroup tmp6;		HX_STACK_VAR(tmp6,"tmp6");
				HX_STACK_LINE(5880)
				{
					HX_STACK_LINE(5880)
					::zpp_nape::phys::ZPP_Interactor cur = s1;		HX_STACK_VAR(cur,"cur");
					HX_STACK_LINE(5880)
					while((true)){
						HX_STACK_LINE(5880)
						bool tmp7 = (cur != null());		HX_STACK_VAR(tmp7,"tmp7");
						HX_STACK_LINE(5880)
						bool tmp8 = tmp7;		HX_STACK_VAR(tmp8,"tmp8");
						HX_STACK_LINE(5880)
						bool tmp9;		HX_STACK_VAR(tmp9,"tmp9");
						HX_STACK_LINE(5880)
						bool tmp10 = tmp8;		HX_STACK_VAR(tmp10,"tmp10");
						HX_STACK_LINE(5880)
						if ((tmp10)){
							HX_STACK_LINE(5880)
							bool tmp11 = (cur->group == null());		HX_STACK_VAR(tmp11,"tmp11");
							HX_STACK_LINE(5880)
							tmp9 = tmp11;
						}
						else{
							HX_STACK_LINE(5880)
							tmp9 = false;
						}
						HX_STACK_LINE(5880)
						bool tmp11 = tmp9;		HX_STACK_VAR(tmp11,"tmp11");
						HX_STACK_LINE(5880)
						bool tmp12 = !(tmp11);		HX_STACK_VAR(tmp12,"tmp12");
						HX_STACK_LINE(5880)
						bool tmp13 = tmp12;		HX_STACK_VAR(tmp13,"tmp13");
						HX_STACK_LINE(5880)
						bool tmp14 = tmp13;		HX_STACK_VAR(tmp14,"tmp14");
						HX_STACK_LINE(5880)
						if ((tmp14)){
							HX_STACK_LINE(5880)
							break;
						}
						HX_STACK_LINE(5880)
						bool tmp15 = (cur->ishape != null());		HX_STACK_VAR(tmp15,"tmp15");
						HX_STACK_LINE(5880)
						bool tmp16 = tmp15;		HX_STACK_VAR(tmp16,"tmp16");
						HX_STACK_LINE(5880)
						bool tmp17 = tmp16;		HX_STACK_VAR(tmp17,"tmp17");
						HX_STACK_LINE(5880)
						if ((tmp17)){
							HX_STACK_LINE(5880)
							::zpp_nape::phys::ZPP_Body tmp18 = cur->ishape->body;		HX_STACK_VAR(tmp18,"tmp18");
							HX_STACK_LINE(5880)
							::zpp_nape::phys::ZPP_Body tmp19 = tmp18;		HX_STACK_VAR(tmp19,"tmp19");
							HX_STACK_LINE(5880)
							cur = tmp19;
						}
						else{
							HX_STACK_LINE(5880)
							bool tmp18 = (cur->icompound != null());		HX_STACK_VAR(tmp18,"tmp18");
							HX_STACK_LINE(5880)
							bool tmp19 = tmp18;		HX_STACK_VAR(tmp19,"tmp19");
							HX_STACK_LINE(5880)
							bool tmp20 = tmp19;		HX_STACK_VAR(tmp20,"tmp20");
							HX_STACK_LINE(5880)
							if ((tmp20)){
								HX_STACK_LINE(5880)
								::zpp_nape::phys::ZPP_Compound tmp21 = cur->icompound->compound;		HX_STACK_VAR(tmp21,"tmp21");
								HX_STACK_LINE(5880)
								::zpp_nape::phys::ZPP_Compound tmp22 = tmp21;		HX_STACK_VAR(tmp22,"tmp22");
								HX_STACK_LINE(5880)
								cur = tmp22;
							}
							else{
								HX_STACK_LINE(5880)
								::zpp_nape::phys::ZPP_Compound tmp21 = cur->ibody->compound;		HX_STACK_VAR(tmp21,"tmp21");
								HX_STACK_LINE(5880)
								::zpp_nape::phys::ZPP_Compound tmp22 = tmp21;		HX_STACK_VAR(tmp22,"tmp22");
								HX_STACK_LINE(5880)
								cur = tmp22;
							}
						}
					}
					HX_STACK_LINE(5880)
					bool tmp7 = (cur == null());		HX_STACK_VAR(tmp7,"tmp7");
					HX_STACK_LINE(5880)
					bool tmp8 = tmp7;		HX_STACK_VAR(tmp8,"tmp8");
					HX_STACK_LINE(5880)
					bool tmp9 = tmp8;		HX_STACK_VAR(tmp9,"tmp9");
					HX_STACK_LINE(5880)
					if ((tmp9)){
						HX_STACK_LINE(5880)
						tmp6 = null();
					}
					else{
						HX_STACK_LINE(5880)
						tmp6 = cur->group;
					}
				}
				HX_STACK_LINE(5880)
				::zpp_nape::dynamics::ZPP_InteractionGroup g1 = tmp6;		HX_STACK_VAR(g1,"g1");
				HX_STACK_LINE(5880)
				bool tmp7 = (g1 == null());		HX_STACK_VAR(tmp7,"tmp7");
				HX_STACK_LINE(5880)
				bool tmp8 = tmp7;		HX_STACK_VAR(tmp8,"tmp8");
				HX_STACK_LINE(5880)
				bool tmp9 = tmp8;		HX_STACK_VAR(tmp9,"tmp9");
				HX_STACK_LINE(5880)
				if ((tmp9)){
					HX_STACK_LINE(5880)
					tmp5 = false;
				}
				else{
					HX_STACK_LINE(5880)
					::zpp_nape::dynamics::ZPP_InteractionGroup tmp10;		HX_STACK_VAR(tmp10,"tmp10");
					HX_STACK_LINE(5880)
					{
						HX_STACK_LINE(5880)
						::zpp_nape::phys::ZPP_Interactor cur = s2;		HX_STACK_VAR(cur,"cur");
						HX_STACK_LINE(5880)
						while((true)){
							HX_STACK_LINE(5880)
							bool tmp11 = (cur != null());		HX_STACK_VAR(tmp11,"tmp11");
							HX_STACK_LINE(5880)
							bool tmp12 = tmp11;		HX_STACK_VAR(tmp12,"tmp12");
							HX_STACK_LINE(5880)
							bool tmp13;		HX_STACK_VAR(tmp13,"tmp13");
							HX_STACK_LINE(5880)
							bool tmp14 = tmp12;		HX_STACK_VAR(tmp14,"tmp14");
							HX_STACK_LINE(5880)
							if ((tmp14)){
								HX_STACK_LINE(5880)
								bool tmp15 = (cur->group == null());		HX_STACK_VAR(tmp15,"tmp15");
								HX_STACK_LINE(5880)
								tmp13 = tmp15;
							}
							else{
								HX_STACK_LINE(5880)
								tmp13 = false;
							}
							HX_STACK_LINE(5880)
							bool tmp15 = tmp13;		HX_STACK_VAR(tmp15,"tmp15");
							HX_STACK_LINE(5880)
							bool tmp16 = !(tmp15);		HX_STACK_VAR(tmp16,"tmp16");
							HX_STACK_LINE(5880)
							bool tmp17 = tmp16;		HX_STACK_VAR(tmp17,"tmp17");
							HX_STACK_LINE(5880)
							bool tmp18 = tmp17;		HX_STACK_VAR(tmp18,"tmp18");
							HX_STACK_LINE(5880)
							if ((tmp18)){
								HX_STACK_LINE(5880)
								break;
							}
							HX_STACK_LINE(5880)
							bool tmp19 = (cur->ishape != null());		HX_STACK_VAR(tmp19,"tmp19");
							HX_STACK_LINE(5880)
							bool tmp20 = tmp19;		HX_STACK_VAR(tmp20,"tmp20");
							HX_STACK_LINE(5880)
							bool tmp21 = tmp20;		HX_STACK_VAR(tmp21,"tmp21");
							HX_STACK_LINE(5880)
							if ((tmp21)){
								HX_STACK_LINE(5880)
								::zpp_nape::phys::ZPP_Body tmp22 = cur->ishape->body;		HX_STACK_VAR(tmp22,"tmp22");
								HX_STACK_LINE(5880)
								::zpp_nape::phys::ZPP_Body tmp23 = tmp22;		HX_STACK_VAR(tmp23,"tmp23");
								HX_STACK_LINE(5880)
								cur = tmp23;
							}
							else{
								HX_STACK_LINE(5880)
								bool tmp22 = (cur->icompound != null());		HX_STACK_VAR(tmp22,"tmp22");
								HX_STACK_LINE(5880)
								bool tmp23 = tmp22;		HX_STACK_VAR(tmp23,"tmp23");
								HX_STACK_LINE(5880)
								bool tmp24 = tmp23;		HX_STACK_VAR(tmp24,"tmp24");
								HX_STACK_LINE(5880)
								if ((tmp24)){
									HX_STACK_LINE(5880)
									::zpp_nape::phys::ZPP_Compound tmp25 = cur->icompound->compound;		HX_STACK_VAR(tmp25,"tmp25");
									HX_STACK_LINE(5880)
									::zpp_nape::phys::ZPP_Compound tmp26 = tmp25;		HX_STACK_VAR(tmp26,"tmp26");
									HX_STACK_LINE(5880)
									cur = tmp26;
								}
								else{
									HX_STACK_LINE(5880)
									::zpp_nape::phys::ZPP_Compound tmp25 = cur->ibody->compound;		HX_STACK_VAR(tmp25,"tmp25");
									HX_STACK_LINE(5880)
									::zpp_nape::phys::ZPP_Compound tmp26 = tmp25;		HX_STACK_VAR(tmp26,"tmp26");
									HX_STACK_LINE(5880)
									cur = tmp26;
								}
							}
						}
						HX_STACK_LINE(5880)
						bool tmp11 = (cur == null());		HX_STACK_VAR(tmp11,"tmp11");
						HX_STACK_LINE(5880)
						bool tmp12 = tmp11;		HX_STACK_VAR(tmp12,"tmp12");
						HX_STACK_LINE(5880)
						bool tmp13 = tmp12;		HX_STACK_VAR(tmp13,"tmp13");
						HX_STACK_LINE(5880)
						if ((tmp13)){
							HX_STACK_LINE(5880)
							tmp10 = null();
						}
						else{
							HX_STACK_LINE(5880)
							tmp10 = cur->group;
						}
					}
					HX_STACK_LINE(5880)
					::zpp_nape::dynamics::ZPP_InteractionGroup g2 = tmp10;		HX_STACK_VAR(g2,"g2");
					HX_STACK_LINE(5880)
					bool tmp11 = (g2 == null());		HX_STACK_VAR(tmp11,"tmp11");
					HX_STACK_LINE(5880)
					bool tmp12 = tmp11;		HX_STACK_VAR(tmp12,"tmp12");
					HX_STACK_LINE(5880)
					bool tmp13 = tmp12;		HX_STACK_VAR(tmp13,"tmp13");
					HX_STACK_LINE(5880)
					if ((tmp13)){
						HX_STACK_LINE(5880)
						tmp5 = false;
					}
					else{
						HX_STACK_LINE(5880)
						bool ret1 = false;		HX_STACK_VAR(ret1,"ret1");
						HX_STACK_LINE(5880)
						while((true)){
							HX_STACK_LINE(5880)
							bool tmp14 = (g1 != null());		HX_STACK_VAR(tmp14,"tmp14");
							HX_STACK_LINE(5880)
							bool tmp15 = tmp14;		HX_STACK_VAR(tmp15,"tmp15");
							HX_STACK_LINE(5880)
							bool tmp16;		HX_STACK_VAR(tmp16,"tmp16");
							HX_STACK_LINE(5880)
							bool tmp17 = tmp15;		HX_STACK_VAR(tmp17,"tmp17");
							HX_STACK_LINE(5880)
							if ((tmp17)){
								HX_STACK_LINE(5880)
								bool tmp18 = (g2 != null());		HX_STACK_VAR(tmp18,"tmp18");
								HX_STACK_LINE(5880)
								tmp16 = tmp18;
							}
							else{
								HX_STACK_LINE(5880)
								tmp16 = false;
							}
							HX_STACK_LINE(5880)
							bool tmp18 = tmp16;		HX_STACK_VAR(tmp18,"tmp18");
							HX_STACK_LINE(5880)
							bool tmp19 = !(tmp18);		HX_STACK_VAR(tmp19,"tmp19");
							HX_STACK_LINE(5880)
							bool tmp20 = tmp19;		HX_STACK_VAR(tmp20,"tmp20");
							HX_STACK_LINE(5880)
							bool tmp21 = tmp20;		HX_STACK_VAR(tmp21,"tmp21");
							HX_STACK_LINE(5880)
							if ((tmp21)){
								HX_STACK_LINE(5880)
								break;
							}
							HX_STACK_LINE(5880)
							bool tmp22 = (g1 == g2);		HX_STACK_VAR(tmp22,"tmp22");
							HX_STACK_LINE(5880)
							bool tmp23 = tmp22;		HX_STACK_VAR(tmp23,"tmp23");
							HX_STACK_LINE(5880)
							bool tmp24 = tmp23;		HX_STACK_VAR(tmp24,"tmp24");
							HX_STACK_LINE(5880)
							if ((tmp24)){
								HX_STACK_LINE(5880)
								ret1 = g1->ignore;
								HX_STACK_LINE(5880)
								break;
							}
							HX_STACK_LINE(5880)
							bool tmp25 = (g1->depth < g2->depth);		HX_STACK_VAR(tmp25,"tmp25");
							HX_STACK_LINE(5880)
							bool tmp26 = tmp25;		HX_STACK_VAR(tmp26,"tmp26");
							HX_STACK_LINE(5880)
							bool tmp27 = tmp26;		HX_STACK_VAR(tmp27,"tmp27");
							HX_STACK_LINE(5880)
							if ((tmp27)){
								HX_STACK_LINE(5880)
								g2 = g2->group;
							}
							else{
								HX_STACK_LINE(5880)
								g1 = g1->group;
							}
						}
						HX_STACK_LINE(5880)
						tmp5 = ret1;
					}
				}
			}
			HX_STACK_LINE(5880)
			bool tmp6 = tmp5;		HX_STACK_VAR(tmp6,"tmp6");
			HX_STACK_LINE(5880)
			tmp4 = !(tmp6);
		}
		else{
			HX_STACK_LINE(5880)
			tmp4 = false;
		}
		HX_STACK_LINE(5880)
		if ((tmp4)){
			HX_STACK_LINE(5880)
			bool tmp5 = s1->sensorEnabled;		HX_STACK_VAR(tmp5,"tmp5");
			HX_STACK_LINE(5880)
			bool tmp6 = !(tmp5);		HX_STACK_VAR(tmp6,"tmp6");
			HX_STACK_LINE(5880)
			bool tmp7 = tmp6;		HX_STACK_VAR(tmp7,"tmp7");
			HX_STACK_LINE(5880)
			bool tmp8;		HX_STACK_VAR(tmp8,"tmp8");
			HX_STACK_LINE(5880)
			if ((tmp7)){
				HX_STACK_LINE(5880)
				tmp8 = s2->sensorEnabled;
			}
			else{
				HX_STACK_LINE(5880)
				tmp8 = true;
			}
			HX_STACK_LINE(5880)
			bool tmp9;		HX_STACK_VAR(tmp9,"tmp9");
			HX_STACK_LINE(5880)
			if ((tmp8)){
				HX_STACK_LINE(5880)
				::zpp_nape::dynamics::ZPP_InteractionFilter _this = s1->filter;		HX_STACK_VAR(_this,"_this");
				HX_STACK_LINE(5880)
				::zpp_nape::dynamics::ZPP_InteractionFilter x = s2->filter;		HX_STACK_VAR(x,"x");
				HX_STACK_LINE(5880)
				int tmp10 = (int(_this->sensorMask) & int(x->sensorGroup));		HX_STACK_VAR(tmp10,"tmp10");
				HX_STACK_LINE(5880)
				int tmp11 = tmp10;		HX_STACK_VAR(tmp11,"tmp11");
				HX_STACK_LINE(5880)
				bool tmp12 = (tmp11 != (int)0);		HX_STACK_VAR(tmp12,"tmp12");
				HX_STACK_LINE(5880)
				bool tmp13 = tmp12;		HX_STACK_VAR(tmp13,"tmp13");
				HX_STACK_LINE(5880)
				bool tmp14 = tmp13;		HX_STACK_VAR(tmp14,"tmp14");
				HX_STACK_LINE(5880)
				if ((tmp14)){
					HX_STACK_LINE(5880)
					int tmp15 = (int(x->sensorMask) & int(_this->sensorGroup));		HX_STACK_VAR(tmp15,"tmp15");
					HX_STACK_LINE(5880)
					int tmp16 = tmp15;		HX_STACK_VAR(tmp16,"tmp16");
					HX_STACK_LINE(5880)
					int tmp17 = tmp16;		HX_STACK_VAR(tmp17,"tmp17");
					HX_STACK_LINE(5880)
					tmp9 = (tmp17 != (int)0);
				}
				else{
					HX_STACK_LINE(5880)
					tmp9 = false;
				}
			}
			else{
				HX_STACK_LINE(5880)
				tmp9 = false;
			}
			HX_STACK_LINE(5880)
			if ((tmp9)){
				HX_STACK_LINE(5880)
				tmp = (int)2;
			}
			else{
				HX_STACK_LINE(5880)
				bool tmp10 = s1->fluidEnabled;		HX_STACK_VAR(tmp10,"tmp10");
				HX_STACK_LINE(5880)
				bool tmp11 = !(tmp10);		HX_STACK_VAR(tmp11,"tmp11");
				HX_STACK_LINE(5880)
				bool tmp12 = tmp11;		HX_STACK_VAR(tmp12,"tmp12");
				HX_STACK_LINE(5880)
				bool tmp13;		HX_STACK_VAR(tmp13,"tmp13");
				HX_STACK_LINE(5880)
				if ((tmp12)){
					HX_STACK_LINE(5880)
					tmp13 = s2->fluidEnabled;
				}
				else{
					HX_STACK_LINE(5880)
					tmp13 = true;
				}
				HX_STACK_LINE(5880)
				bool tmp14 = tmp13;		HX_STACK_VAR(tmp14,"tmp14");
				HX_STACK_LINE(5880)
				bool tmp15;		HX_STACK_VAR(tmp15,"tmp15");
				HX_STACK_LINE(5880)
				if ((tmp14)){
					HX_STACK_LINE(5880)
					::zpp_nape::dynamics::ZPP_InteractionFilter _this = s1->filter;		HX_STACK_VAR(_this,"_this");
					HX_STACK_LINE(5880)
					::zpp_nape::dynamics::ZPP_InteractionFilter x = s2->filter;		HX_STACK_VAR(x,"x");
					HX_STACK_LINE(5880)
					int tmp16 = (int(_this->fluidMask) & int(x->fluidGroup));		HX_STACK_VAR(tmp16,"tmp16");
					HX_STACK_LINE(5880)
					int tmp17 = tmp16;		HX_STACK_VAR(tmp17,"tmp17");
					HX_STACK_LINE(5880)
					int tmp18 = tmp17;		HX_STACK_VAR(tmp18,"tmp18");
					HX_STACK_LINE(5880)
					bool tmp19 = (tmp18 != (int)0);		HX_STACK_VAR(tmp19,"tmp19");
					HX_STACK_LINE(5880)
					bool tmp20 = tmp19;		HX_STACK_VAR(tmp20,"tmp20");
					HX_STACK_LINE(5880)
					bool tmp21 = tmp20;		HX_STACK_VAR(tmp21,"tmp21");
					HX_STACK_LINE(5880)
					bool tmp22 = tmp21;		HX_STACK_VAR(tmp22,"tmp22");
					HX_STACK_LINE(5880)
					bool tmp23 = tmp22;		HX_STACK_VAR(tmp23,"tmp23");
					HX_STACK_LINE(5880)
					if ((tmp23)){
						HX_STACK_LINE(5880)
						int tmp24 = (int(x->fluidMask) & int(_this->fluidGroup));		HX_STACK_VAR(tmp24,"tmp24");
						HX_STACK_LINE(5880)
						int tmp25 = tmp24;		HX_STACK_VAR(tmp25,"tmp25");
						HX_STACK_LINE(5880)
						int tmp26 = tmp25;		HX_STACK_VAR(tmp26,"tmp26");
						HX_STACK_LINE(5880)
						int tmp27 = tmp26;		HX_STACK_VAR(tmp27,"tmp27");
						HX_STACK_LINE(5880)
						tmp15 = (tmp27 != (int)0);
					}
					else{
						HX_STACK_LINE(5880)
						tmp15 = false;
					}
				}
				else{
					HX_STACK_LINE(5880)
					tmp15 = false;
				}
				HX_STACK_LINE(5880)
				bool tmp16;		HX_STACK_VAR(tmp16,"tmp16");
				HX_STACK_LINE(5880)
				if ((tmp15)){
					HX_STACK_LINE(5880)
					bool tmp17 = (b1->imass == (int)0);		HX_STACK_VAR(tmp17,"tmp17");
					HX_STACK_LINE(5880)
					bool tmp18 = tmp17;		HX_STACK_VAR(tmp18,"tmp18");
					HX_STACK_LINE(5880)
					bool tmp19 = tmp18;		HX_STACK_VAR(tmp19,"tmp19");
					HX_STACK_LINE(5880)
					bool tmp20;		HX_STACK_VAR(tmp20,"tmp20");
					HX_STACK_LINE(5880)
					bool tmp21 = tmp19;		HX_STACK_VAR(tmp21,"tmp21");
					HX_STACK_LINE(5880)
					if ((tmp21)){
						HX_STACK_LINE(5880)
						bool tmp22 = (b2->imass == (int)0);		HX_STACK_VAR(tmp22,"tmp22");
						HX_STACK_LINE(5880)
						tmp20 = tmp22;
					}
					else{
						HX_STACK_LINE(5880)
						tmp20 = false;
					}
					HX_STACK_LINE(5880)
					bool tmp22 = tmp20;		HX_STACK_VAR(tmp22,"tmp22");
					HX_STACK_LINE(5880)
					bool tmp23;		HX_STACK_VAR(tmp23,"tmp23");
					HX_STACK_LINE(5880)
					bool tmp24 = tmp22;		HX_STACK_VAR(tmp24,"tmp24");
					HX_STACK_LINE(5880)
					if ((tmp24)){
						HX_STACK_LINE(5880)
						bool tmp25 = (b1->iinertia == (int)0);		HX_STACK_VAR(tmp25,"tmp25");
						HX_STACK_LINE(5880)
						tmp23 = tmp25;
					}
					else{
						HX_STACK_LINE(5880)
						tmp23 = false;
					}
					HX_STACK_LINE(5880)
					bool tmp25;		HX_STACK_VAR(tmp25,"tmp25");
					HX_STACK_LINE(5880)
					bool tmp26 = tmp23;		HX_STACK_VAR(tmp26,"tmp26");
					HX_STACK_LINE(5880)
					if ((tmp26)){
						HX_STACK_LINE(5880)
						bool tmp27 = (b2->iinertia == (int)0);		HX_STACK_VAR(tmp27,"tmp27");
						HX_STACK_LINE(5880)
						tmp25 = tmp27;
					}
					else{
						HX_STACK_LINE(5880)
						tmp25 = false;
					}
					HX_STACK_LINE(5880)
					bool tmp27 = tmp25;		HX_STACK_VAR(tmp27,"tmp27");
					HX_STACK_LINE(5880)
					tmp16 = !(tmp27);
				}
				else{
					HX_STACK_LINE(5880)
					tmp16 = false;
				}
				HX_STACK_LINE(5880)
				if ((tmp16)){
					HX_STACK_LINE(5880)
					tmp = (int)0;
				}
				else{
					HX_STACK_LINE(5880)
					bool tmp17;		HX_STACK_VAR(tmp17,"tmp17");
					HX_STACK_LINE(5880)
					{
						HX_STACK_LINE(5880)
						::zpp_nape::dynamics::ZPP_InteractionFilter _this = s1->filter;		HX_STACK_VAR(_this,"_this");
						HX_STACK_LINE(5880)
						::zpp_nape::dynamics::ZPP_InteractionFilter x = s2->filter;		HX_STACK_VAR(x,"x");
						HX_STACK_LINE(5880)
						int tmp18 = (int(_this->collisionMask) & int(x->collisionGroup));		HX_STACK_VAR(tmp18,"tmp18");
						HX_STACK_LINE(5880)
						int tmp19 = tmp18;		HX_STACK_VAR(tmp19,"tmp19");
						HX_STACK_LINE(5880)
						bool tmp20 = (tmp19 != (int)0);		HX_STACK_VAR(tmp20,"tmp20");
						HX_STACK_LINE(5880)
						bool tmp21 = tmp20;		HX_STACK_VAR(tmp21,"tmp21");
						HX_STACK_LINE(5880)
						bool tmp22 = tmp21;		HX_STACK_VAR(tmp22,"tmp22");
						HX_STACK_LINE(5880)
						if ((tmp22)){
							HX_STACK_LINE(5880)
							int tmp23 = (int(x->collisionMask) & int(_this->collisionGroup));		HX_STACK_VAR(tmp23,"tmp23");
							HX_STACK_LINE(5880)
							int tmp24 = tmp23;		HX_STACK_VAR(tmp24,"tmp24");
							HX_STACK_LINE(5880)
							int tmp25 = tmp24;		HX_STACK_VAR(tmp25,"tmp25");
							HX_STACK_LINE(5880)
							tmp17 = (tmp25 != (int)0);
						}
						else{
							HX_STACK_LINE(5880)
							tmp17 = false;
						}
					}
					HX_STACK_LINE(5880)
					bool tmp18;		HX_STACK_VAR(tmp18,"tmp18");
					HX_STACK_LINE(5880)
					if ((tmp17)){
						HX_STACK_LINE(5880)
						bool tmp19 = (b1->imass == (int)0);		HX_STACK_VAR(tmp19,"tmp19");
						HX_STACK_LINE(5880)
						bool tmp20 = tmp19;		HX_STACK_VAR(tmp20,"tmp20");
						HX_STACK_LINE(5880)
						bool tmp21 = tmp20;		HX_STACK_VAR(tmp21,"tmp21");
						HX_STACK_LINE(5880)
						bool tmp22;		HX_STACK_VAR(tmp22,"tmp22");
						HX_STACK_LINE(5880)
						bool tmp23 = tmp21;		HX_STACK_VAR(tmp23,"tmp23");
						HX_STACK_LINE(5880)
						if ((tmp23)){
							HX_STACK_LINE(5880)
							bool tmp24 = (b2->imass == (int)0);		HX_STACK_VAR(tmp24,"tmp24");
							HX_STACK_LINE(5880)
							tmp22 = tmp24;
						}
						else{
							HX_STACK_LINE(5880)
							tmp22 = false;
						}
						HX_STACK_LINE(5880)
						bool tmp24 = tmp22;		HX_STACK_VAR(tmp24,"tmp24");
						HX_STACK_LINE(5880)
						bool tmp25;		HX_STACK_VAR(tmp25,"tmp25");
						HX_STACK_LINE(5880)
						bool tmp26 = tmp24;		HX_STACK_VAR(tmp26,"tmp26");
						HX_STACK_LINE(5880)
						if ((tmp26)){
							HX_STACK_LINE(5880)
							bool tmp27 = (b1->iinertia == (int)0);		HX_STACK_VAR(tmp27,"tmp27");
							HX_STACK_LINE(5880)
							tmp25 = tmp27;
						}
						else{
							HX_STACK_LINE(5880)
							tmp25 = false;
						}
						HX_STACK_LINE(5880)
						bool tmp27;		HX_STACK_VAR(tmp27,"tmp27");
						HX_STACK_LINE(5880)
						bool tmp28 = tmp25;		HX_STACK_VAR(tmp28,"tmp28");
						HX_STACK_LINE(5880)
						if ((tmp28)){
							HX_STACK_LINE(5880)
							bool tmp29 = (b2->iinertia == (int)0);		HX_STACK_VAR(tmp29,"tmp29");
							HX_STACK_LINE(5880)
							tmp27 = tmp29;
						}
						else{
							HX_STACK_LINE(5880)
							tmp27 = false;
						}
						HX_STACK_LINE(5880)
						bool tmp29 = tmp27;		HX_STACK_VAR(tmp29,"tmp29");
						HX_STACK_LINE(5880)
						tmp18 = !(tmp29);
					}
					else{
						HX_STACK_LINE(5880)
						tmp18 = false;
					}
					HX_STACK_LINE(5880)
					if ((tmp18)){
						HX_STACK_LINE(5880)
						tmp = (int)1;
					}
					else{
						HX_STACK_LINE(5880)
						tmp = (int)-1;
					}
				}
			}
		}
		else{
			HX_STACK_LINE(5880)
			tmp = (int)-1;
		}
	}
	HX_STACK_LINE(5880)
	int itype = tmp;		HX_STACK_VAR(itype,"itype");
	HX_STACK_LINE(5881)
	bool tmp1 = (itype != (int)-1);		HX_STACK_VAR(tmp1,"tmp1");
	HX_STACK_LINE(5881)
	if ((tmp1)){
		HX_STACK_LINE(5882)
		::zpp_nape::shape::ZPP_Shape sa;		HX_STACK_VAR(sa,"sa");
		HX_STACK_LINE(5882)
		::zpp_nape::shape::ZPP_Shape sb;		HX_STACK_VAR(sb,"sb");
		HX_STACK_LINE(5883)
		bool tmp2 = (s1->type > s2->type);		HX_STACK_VAR(tmp2,"tmp2");
		HX_STACK_LINE(5883)
		if ((tmp2)){
			HX_STACK_LINE(5884)
			sa = s2;
			HX_STACK_LINE(5885)
			sb = s1;
		}
		else{
			HX_STACK_LINE(5887)
			bool tmp3 = (s1->type == s2->type);		HX_STACK_VAR(tmp3,"tmp3");
			HX_STACK_LINE(5887)
			if ((tmp3)){
				HX_STACK_LINE(5888)
				bool tmp4 = (s1->id < s2->id);		HX_STACK_VAR(tmp4,"tmp4");
				HX_STACK_LINE(5888)
				if ((tmp4)){
					HX_STACK_LINE(5889)
					sa = s1;
					HX_STACK_LINE(5890)
					sb = s2;
				}
				else{
					HX_STACK_LINE(5893)
					sb = s1;
					HX_STACK_LINE(5894)
					sa = s2;
				}
			}
			else{
				HX_STACK_LINE(5898)
				sa = s1;
				HX_STACK_LINE(5899)
				sb = s2;
			}
		}
		HX_STACK_LINE(5901)
		bool tmp3 = (sa == s2);		HX_STACK_VAR(tmp3,"tmp3");
		HX_STACK_LINE(5901)
		bool reverse = tmp3;		HX_STACK_VAR(reverse,"reverse");
		HX_STACK_LINE(5902)
		bool tmp4 = (itype == (int)0);		HX_STACK_VAR(tmp4,"tmp4");
		HX_STACK_LINE(5902)
		if ((tmp4)){
			HX_STACK_LINE(5903)
			bool tmp5 = (in_arb == null());		HX_STACK_VAR(tmp5,"tmp5");
			HX_STACK_LINE(5903)
			::zpp_nape::dynamics::ZPP_Arbiter tmp6;		HX_STACK_VAR(tmp6,"tmp6");
			HX_STACK_LINE(5903)
			if ((tmp5)){
				HX_STACK_LINE(5904)
				::zpp_nape::dynamics::ZPP_Arbiter ret1 = null();		HX_STACK_VAR(ret1,"ret1");
				HX_STACK_LINE(5905)
				int tmp7 = b1->arbiters->length;		HX_STACK_VAR(tmp7,"tmp7");
				HX_STACK_LINE(5905)
				int tmp8 = b2->arbiters->length;		HX_STACK_VAR(tmp8,"tmp8");
				HX_STACK_LINE(5905)
				bool tmp9 = (tmp7 < tmp8);		HX_STACK_VAR(tmp9,"tmp9");
				HX_STACK_LINE(5905)
				::zpp_nape::phys::ZPP_Body tmp10;		HX_STACK_VAR(tmp10,"tmp10");
				HX_STACK_LINE(5905)
				if ((tmp9)){
					HX_STACK_LINE(5905)
					tmp10 = b1;
				}
				else{
					HX_STACK_LINE(5905)
					tmp10 = b2;
				}
				HX_STACK_LINE(5905)
				::zpp_nape::phys::ZPP_Body b = tmp10;		HX_STACK_VAR(b,"b");
				HX_STACK_LINE(5906)
				{
					HX_STACK_LINE(5907)
					::zpp_nape::util::ZNPNode_ZPP_Arbiter tmp11 = b->arbiters->head;		HX_STACK_VAR(tmp11,"tmp11");
					HX_STACK_LINE(5907)
					::zpp_nape::util::ZNPNode_ZPP_Arbiter cx_ite = tmp11;		HX_STACK_VAR(cx_ite,"cx_ite");
					HX_STACK_LINE(5908)
					while((true)){
						HX_STACK_LINE(5908)
						bool tmp12 = (cx_ite != null());		HX_STACK_VAR(tmp12,"tmp12");
						HX_STACK_LINE(5908)
						bool tmp13 = !(tmp12);		HX_STACK_VAR(tmp13,"tmp13");
						HX_STACK_LINE(5908)
						if ((tmp13)){
							HX_STACK_LINE(5908)
							break;
						}
						HX_STACK_LINE(5909)
						::zpp_nape::dynamics::ZPP_Arbiter arb = cx_ite->elt;		HX_STACK_VAR(arb,"arb");
						HX_STACK_LINE(5910)
						{
							HX_STACK_LINE(5919)
							bool tmp14 = (arb->id == sa->id);		HX_STACK_VAR(tmp14,"tmp14");
							HX_STACK_LINE(5919)
							bool tmp15;		HX_STACK_VAR(tmp15,"tmp15");
							HX_STACK_LINE(5919)
							if ((tmp14)){
								HX_STACK_LINE(5919)
								tmp15 = (arb->di == sb->id);
							}
							else{
								HX_STACK_LINE(5919)
								tmp15 = false;
							}
							HX_STACK_LINE(5919)
							if ((tmp15)){
								HX_STACK_LINE(5920)
								ret1 = arb;
								HX_STACK_LINE(5921)
								break;
							}
						}
						HX_STACK_LINE(5924)
						cx_ite = cx_ite->next;
					}
				}
				HX_STACK_LINE(5927)
				tmp6 = ret1;
			}
			else{
				HX_STACK_LINE(5928)
				tmp6 = in_arb;
			}
			HX_STACK_LINE(5903)
			::zpp_nape::dynamics::ZPP_Arbiter xarb = tmp6;		HX_STACK_VAR(xarb,"xarb");
			HX_STACK_LINE(5929)
			bool tmp7 = (xarb == null());		HX_STACK_VAR(tmp7,"tmp7");
			HX_STACK_LINE(5929)
			bool first = tmp7;		HX_STACK_VAR(first,"first");
			HX_STACK_LINE(5930)
			::zpp_nape::dynamics::ZPP_FluidArbiter arb;		HX_STACK_VAR(arb,"arb");
			HX_STACK_LINE(5931)
			bool swapped = false;		HX_STACK_VAR(swapped,"swapped");
			HX_STACK_LINE(5932)
			bool tmp8 = first;		HX_STACK_VAR(tmp8,"tmp8");
			HX_STACK_LINE(5932)
			if ((tmp8)){
				HX_STACK_LINE(5933)
				::zpp_nape::dynamics::ZPP_FluidArbiter tmp9 = ::zpp_nape::dynamics::ZPP_FluidArbiter_obj::zpp_pool;		HX_STACK_VAR(tmp9,"tmp9");
				HX_STACK_LINE(5933)
				bool tmp10 = (tmp9 == null());		HX_STACK_VAR(tmp10,"tmp10");
				HX_STACK_LINE(5933)
				if ((tmp10)){
					HX_STACK_LINE(5934)
					::zpp_nape::dynamics::ZPP_FluidArbiter tmp11 = ::zpp_nape::dynamics::ZPP_FluidArbiter_obj::__new();		HX_STACK_VAR(tmp11,"tmp11");
					HX_STACK_LINE(5934)
					arb = tmp11;
				}
				else{
					HX_STACK_LINE(5940)
					::zpp_nape::dynamics::ZPP_FluidArbiter tmp11 = ::zpp_nape::dynamics::ZPP_FluidArbiter_obj::zpp_pool;		HX_STACK_VAR(tmp11,"tmp11");
					HX_STACK_LINE(5940)
					arb = tmp11;
					HX_STACK_LINE(5941)
					::zpp_nape::dynamics::ZPP_FluidArbiter_obj::zpp_pool = arb->next;
					HX_STACK_LINE(5942)
					arb->next = null();
				}
				HX_STACK_LINE(5947)
				Dynamic();
			}
			else{
				HX_STACK_LINE(5950)
				bool tmp9 = (xarb->fluidarb == null());		HX_STACK_VAR(tmp9,"tmp9");
				HX_STACK_LINE(5950)
				if ((tmp9)){
					HX_STACK_LINE(5951)
					{
						HX_STACK_LINE(5951)
						xarb->cleared = true;
						HX_STACK_LINE(5951)
						bool tmp10 = true;		HX_STACK_VAR(tmp10,"tmp10");
						HX_STACK_LINE(5951)
						bool tmp11 = !(tmp10);		HX_STACK_VAR(tmp11,"tmp11");
						HX_STACK_LINE(5951)
						bool tmp12;		HX_STACK_VAR(tmp12,"tmp12");
						HX_STACK_LINE(5951)
						if ((tmp11)){
							HX_STACK_LINE(5951)
							tmp12 = (xarb->b2 == null());
						}
						else{
							HX_STACK_LINE(5951)
							tmp12 = true;
						}
						HX_STACK_LINE(5951)
						if ((tmp12)){
							HX_STACK_LINE(5951)
							::zpp_nape::util::ZNPList_ZPP_Arbiter tmp13 = xarb->b1->arbiters;		HX_STACK_VAR(tmp13,"tmp13");
							HX_STACK_LINE(5951)
							::zpp_nape::util::ZNPList_ZPP_Arbiter _this = tmp13;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(5951)
							{
								HX_STACK_LINE(5951)
								::zpp_nape::util::ZNPNode_ZPP_Arbiter pre = null();		HX_STACK_VAR(pre,"pre");
								HX_STACK_LINE(5951)
								::zpp_nape::util::ZNPNode_ZPP_Arbiter cur = _this->head;		HX_STACK_VAR(cur,"cur");
								HX_STACK_LINE(5951)
								bool ret1 = false;		HX_STACK_VAR(ret1,"ret1");
								HX_STACK_LINE(5951)
								while((true)){
									HX_STACK_LINE(5951)
									bool tmp14 = (cur != null());		HX_STACK_VAR(tmp14,"tmp14");
									HX_STACK_LINE(5951)
									bool tmp15 = !(tmp14);		HX_STACK_VAR(tmp15,"tmp15");
									HX_STACK_LINE(5951)
									if ((tmp15)){
										HX_STACK_LINE(5951)
										break;
									}
									HX_STACK_LINE(5951)
									bool tmp16 = (cur->elt == xarb);		HX_STACK_VAR(tmp16,"tmp16");
									HX_STACK_LINE(5951)
									if ((tmp16)){
										HX_STACK_LINE(5951)
										{
											HX_STACK_LINE(5951)
											::zpp_nape::util::ZNPNode_ZPP_Arbiter old;		HX_STACK_VAR(old,"old");
											HX_STACK_LINE(5951)
											::zpp_nape::util::ZNPNode_ZPP_Arbiter ret2;		HX_STACK_VAR(ret2,"ret2");
											HX_STACK_LINE(5951)
											bool tmp17 = (pre == null());		HX_STACK_VAR(tmp17,"tmp17");
											HX_STACK_LINE(5951)
											if ((tmp17)){
												HX_STACK_LINE(5951)
												old = _this->head;
												HX_STACK_LINE(5951)
												ret2 = old->next;
												HX_STACK_LINE(5951)
												_this->head = ret2;
												HX_STACK_LINE(5951)
												bool tmp18 = (_this->head == null());		HX_STACK_VAR(tmp18,"tmp18");
												HX_STACK_LINE(5951)
												if ((tmp18)){
													HX_STACK_LINE(5951)
													_this->pushmod = true;
												}
											}
											else{
												HX_STACK_LINE(5951)
												old = pre->next;
												HX_STACK_LINE(5951)
												ret2 = old->next;
												HX_STACK_LINE(5951)
												pre->next = ret2;
												HX_STACK_LINE(5951)
												bool tmp18 = (ret2 == null());		HX_STACK_VAR(tmp18,"tmp18");
												HX_STACK_LINE(5951)
												if ((tmp18)){
													HX_STACK_LINE(5951)
													_this->pushmod = true;
												}
											}
											HX_STACK_LINE(5951)
											{
												HX_STACK_LINE(5951)
												::zpp_nape::util::ZNPNode_ZPP_Arbiter o = old;		HX_STACK_VAR(o,"o");
												HX_STACK_LINE(5951)
												o->elt = null();
												HX_STACK_LINE(5951)
												::zpp_nape::util::ZNPNode_ZPP_Arbiter tmp18 = ::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool;		HX_STACK_VAR(tmp18,"tmp18");
												HX_STACK_LINE(5951)
												o->next = tmp18;
												HX_STACK_LINE(5951)
												::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool = o;
											}
											HX_STACK_LINE(5951)
											_this->modified = true;
											HX_STACK_LINE(5951)
											(_this->length)--;
											HX_STACK_LINE(5951)
											_this->pushmod = true;
											HX_STACK_LINE(5951)
											ret2;
										}
										HX_STACK_LINE(5951)
										ret1 = true;
										HX_STACK_LINE(5951)
										break;
									}
									HX_STACK_LINE(5951)
									pre = cur;
									HX_STACK_LINE(5951)
									cur = cur->next;
								}
								HX_STACK_LINE(5951)
								ret1;
							}
						}
						HX_STACK_LINE(5951)
						bool tmp13 = true;		HX_STACK_VAR(tmp13,"tmp13");
						HX_STACK_LINE(5951)
						bool tmp14 = !(tmp13);		HX_STACK_VAR(tmp14,"tmp14");
						HX_STACK_LINE(5951)
						bool tmp15;		HX_STACK_VAR(tmp15,"tmp15");
						HX_STACK_LINE(5951)
						if ((tmp14)){
							HX_STACK_LINE(5951)
							tmp15 = (xarb->b1 == null());
						}
						else{
							HX_STACK_LINE(5951)
							tmp15 = true;
						}
						HX_STACK_LINE(5951)
						if ((tmp15)){
							HX_STACK_LINE(5951)
							::zpp_nape::util::ZNPList_ZPP_Arbiter tmp16 = xarb->b2->arbiters;		HX_STACK_VAR(tmp16,"tmp16");
							HX_STACK_LINE(5951)
							::zpp_nape::util::ZNPList_ZPP_Arbiter _this = tmp16;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(5951)
							{
								HX_STACK_LINE(5951)
								::zpp_nape::util::ZNPNode_ZPP_Arbiter pre = null();		HX_STACK_VAR(pre,"pre");
								HX_STACK_LINE(5951)
								::zpp_nape::util::ZNPNode_ZPP_Arbiter cur = _this->head;		HX_STACK_VAR(cur,"cur");
								HX_STACK_LINE(5951)
								bool ret1 = false;		HX_STACK_VAR(ret1,"ret1");
								HX_STACK_LINE(5951)
								while((true)){
									HX_STACK_LINE(5951)
									bool tmp17 = (cur != null());		HX_STACK_VAR(tmp17,"tmp17");
									HX_STACK_LINE(5951)
									bool tmp18 = !(tmp17);		HX_STACK_VAR(tmp18,"tmp18");
									HX_STACK_LINE(5951)
									if ((tmp18)){
										HX_STACK_LINE(5951)
										break;
									}
									HX_STACK_LINE(5951)
									bool tmp19 = (cur->elt == xarb);		HX_STACK_VAR(tmp19,"tmp19");
									HX_STACK_LINE(5951)
									if ((tmp19)){
										HX_STACK_LINE(5951)
										{
											HX_STACK_LINE(5951)
											::zpp_nape::util::ZNPNode_ZPP_Arbiter old;		HX_STACK_VAR(old,"old");
											HX_STACK_LINE(5951)
											::zpp_nape::util::ZNPNode_ZPP_Arbiter ret2;		HX_STACK_VAR(ret2,"ret2");
											HX_STACK_LINE(5951)
											bool tmp20 = (pre == null());		HX_STACK_VAR(tmp20,"tmp20");
											HX_STACK_LINE(5951)
											if ((tmp20)){
												HX_STACK_LINE(5951)
												old = _this->head;
												HX_STACK_LINE(5951)
												ret2 = old->next;
												HX_STACK_LINE(5951)
												_this->head = ret2;
												HX_STACK_LINE(5951)
												bool tmp21 = (_this->head == null());		HX_STACK_VAR(tmp21,"tmp21");
												HX_STACK_LINE(5951)
												if ((tmp21)){
													HX_STACK_LINE(5951)
													_this->pushmod = true;
												}
											}
											else{
												HX_STACK_LINE(5951)
												old = pre->next;
												HX_STACK_LINE(5951)
												ret2 = old->next;
												HX_STACK_LINE(5951)
												pre->next = ret2;
												HX_STACK_LINE(5951)
												bool tmp21 = (ret2 == null());		HX_STACK_VAR(tmp21,"tmp21");
												HX_STACK_LINE(5951)
												if ((tmp21)){
													HX_STACK_LINE(5951)
													_this->pushmod = true;
												}
											}
											HX_STACK_LINE(5951)
											{
												HX_STACK_LINE(5951)
												::zpp_nape::util::ZNPNode_ZPP_Arbiter o = old;		HX_STACK_VAR(o,"o");
												HX_STACK_LINE(5951)
												o->elt = null();
												HX_STACK_LINE(5951)
												::zpp_nape::util::ZNPNode_ZPP_Arbiter tmp21 = ::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool;		HX_STACK_VAR(tmp21,"tmp21");
												HX_STACK_LINE(5951)
												o->next = tmp21;
												HX_STACK_LINE(5951)
												::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool = o;
											}
											HX_STACK_LINE(5951)
											_this->modified = true;
											HX_STACK_LINE(5951)
											(_this->length)--;
											HX_STACK_LINE(5951)
											_this->pushmod = true;
											HX_STACK_LINE(5951)
											ret2;
										}
										HX_STACK_LINE(5951)
										ret1 = true;
										HX_STACK_LINE(5951)
										break;
									}
									HX_STACK_LINE(5951)
									pre = cur;
									HX_STACK_LINE(5951)
									cur = cur->next;
								}
								HX_STACK_LINE(5951)
								ret1;
							}
						}
						HX_STACK_LINE(5951)
						bool tmp16 = (xarb->pair != null());		HX_STACK_VAR(tmp16,"tmp16");
						HX_STACK_LINE(5951)
						if ((tmp16)){
							HX_STACK_LINE(5951)
							xarb->pair->arb = null();
							HX_STACK_LINE(5951)
							xarb->pair = null();
						}
						HX_STACK_LINE(5951)
						xarb->active = false;
						HX_STACK_LINE(5951)
						::zpp_nape::util::ZNPList_ZPP_FluidArbiter tmp17 = this->f_arbiters;		HX_STACK_VAR(tmp17,"tmp17");
						HX_STACK_LINE(5951)
						tmp17->modified = true;
					}
					HX_STACK_LINE(5952)
					{
						HX_STACK_LINE(5953)
						::zpp_nape::dynamics::ZPP_FluidArbiter tmp10 = ::zpp_nape::dynamics::ZPP_FluidArbiter_obj::zpp_pool;		HX_STACK_VAR(tmp10,"tmp10");
						HX_STACK_LINE(5953)
						bool tmp11 = (tmp10 == null());		HX_STACK_VAR(tmp11,"tmp11");
						HX_STACK_LINE(5953)
						if ((tmp11)){
							HX_STACK_LINE(5954)
							::zpp_nape::dynamics::ZPP_FluidArbiter tmp12 = ::zpp_nape::dynamics::ZPP_FluidArbiter_obj::__new();		HX_STACK_VAR(tmp12,"tmp12");
							HX_STACK_LINE(5954)
							arb = tmp12;
						}
						else{
							HX_STACK_LINE(5960)
							::zpp_nape::dynamics::ZPP_FluidArbiter tmp12 = ::zpp_nape::dynamics::ZPP_FluidArbiter_obj::zpp_pool;		HX_STACK_VAR(tmp12,"tmp12");
							HX_STACK_LINE(5960)
							arb = tmp12;
							HX_STACK_LINE(5961)
							::zpp_nape::dynamics::ZPP_FluidArbiter_obj::zpp_pool = arb->next;
							HX_STACK_LINE(5962)
							arb->next = null();
						}
						HX_STACK_LINE(5967)
						Dynamic();
					}
					HX_STACK_LINE(5969)
					arb->intchange = true;
					HX_STACK_LINE(5970)
					first = true;
					HX_STACK_LINE(5971)
					swapped = true;
				}
				else{
					HX_STACK_LINE(5973)
					arb = xarb->fluidarb;
				}
			}
			HX_STACK_LINE(5975)
			::zpp_nape::dynamics::ZPP_Arbiter tmp9;		HX_STACK_VAR(tmp9,"tmp9");
			HX_STACK_LINE(5975)
			{
				HX_STACK_LINE(5976)
				int tmp10 = ::zpp_nape::util::ZPP_Flags_obj::id_InteractionType_FLUID;		HX_STACK_VAR(tmp10,"tmp10");
				HX_STACK_LINE(5976)
				int inttype = tmp10;		HX_STACK_VAR(inttype,"inttype");
				HX_STACK_LINE(5977)
				bool tmp11 = first;		HX_STACK_VAR(tmp11,"tmp11");
				HX_STACK_LINE(5977)
				bool tmp12 = !(tmp11);		HX_STACK_VAR(tmp12,"tmp12");
				HX_STACK_LINE(5977)
				bool tmp13 = tmp12;		HX_STACK_VAR(tmp13,"tmp13");
				HX_STACK_LINE(5977)
				bool tmp14;		HX_STACK_VAR(tmp14,"tmp14");
				HX_STACK_LINE(5977)
				if ((tmp13)){
					HX_STACK_LINE(5977)
					int tmp15 = arb->stamp;		HX_STACK_VAR(tmp15,"tmp15");
					HX_STACK_LINE(5977)
					int tmp16 = this->stamp;		HX_STACK_VAR(tmp16,"tmp16");
					HX_STACK_LINE(5977)
					int tmp17 = tmp16;		HX_STACK_VAR(tmp17,"tmp17");
					HX_STACK_LINE(5977)
					int tmp18 = tmp17;		HX_STACK_VAR(tmp18,"tmp18");
					HX_STACK_LINE(5977)
					tmp14 = (tmp15 != tmp18);
				}
				else{
					HX_STACK_LINE(5977)
					tmp14 = true;
				}
				HX_STACK_LINE(5977)
				bool tmp15 = !(tmp14);		HX_STACK_VAR(tmp15,"tmp15");
				HX_STACK_LINE(5977)
				bool tmp16;		HX_STACK_VAR(tmp16,"tmp16");
				HX_STACK_LINE(5977)
				if ((tmp15)){
					HX_STACK_LINE(5977)
					tmp16 = continuous;
				}
				else{
					HX_STACK_LINE(5977)
					tmp16 = true;
				}
				HX_STACK_LINE(5977)
				if ((tmp16)){
					HX_STACK_LINE(5978)
					int tmp17 = this->stamp;		HX_STACK_VAR(tmp17,"tmp17");
					HX_STACK_LINE(5978)
					arb->stamp = tmp17;
					HX_STACK_LINE(5979)
					::zpp_nape::shape::ZPP_Shape tmp18 = sa;		HX_STACK_VAR(tmp18,"tmp18");
					HX_STACK_LINE(5979)
					::zpp_nape::shape::ZPP_Shape tmp19 = sb;		HX_STACK_VAR(tmp19,"tmp19");
					HX_STACK_LINE(5979)
					::zpp_nape::dynamics::ZPP_FluidArbiter tmp20 = arb;		HX_STACK_VAR(tmp20,"tmp20");
					HX_STACK_LINE(5979)
					bool tmp21 = ::zpp_nape::geom::ZPP_Collide_obj::flowCollide(tmp18,tmp19,tmp20);		HX_STACK_VAR(tmp21,"tmp21");
					HX_STACK_LINE(5979)
					if ((tmp21)){
						HX_STACK_LINE(5980)
						bool tmp22 = first;		HX_STACK_VAR(tmp22,"tmp22");
						HX_STACK_LINE(5980)
						if ((tmp22)){
							HX_STACK_LINE(5981)
							{
								HX_STACK_LINE(5981)
								{
									HX_STACK_LINE(5981)
									arb->b1 = s1->body;
									HX_STACK_LINE(5981)
									arb->ws1 = s1;
									HX_STACK_LINE(5981)
									arb->b2 = s2->body;
									HX_STACK_LINE(5981)
									arb->ws2 = s2;
									HX_STACK_LINE(5981)
									arb->id = sa->id;
									HX_STACK_LINE(5981)
									arb->di = sb->id;
									HX_STACK_LINE(5981)
									{
										HX_STACK_LINE(5981)
										::zpp_nape::util::ZNPList_ZPP_Arbiter tmp23 = arb->b1->arbiters;		HX_STACK_VAR(tmp23,"tmp23");
										HX_STACK_LINE(5981)
										::zpp_nape::util::ZNPList_ZPP_Arbiter _this = tmp23;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(5981)
										::zpp_nape::util::ZNPNode_ZPP_Arbiter tmp24;		HX_STACK_VAR(tmp24,"tmp24");
										HX_STACK_LINE(5981)
										{
											HX_STACK_LINE(5981)
											::zpp_nape::util::ZNPNode_ZPP_Arbiter ret1;		HX_STACK_VAR(ret1,"ret1");
											HX_STACK_LINE(5981)
											{
												HX_STACK_LINE(5981)
												::zpp_nape::util::ZNPNode_ZPP_Arbiter tmp25 = ::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool;		HX_STACK_VAR(tmp25,"tmp25");
												HX_STACK_LINE(5981)
												bool tmp26 = (tmp25 == null());		HX_STACK_VAR(tmp26,"tmp26");
												HX_STACK_LINE(5981)
												if ((tmp26)){
													HX_STACK_LINE(5981)
													::zpp_nape::util::ZNPNode_ZPP_Arbiter tmp27 = ::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::__new();		HX_STACK_VAR(tmp27,"tmp27");
													HX_STACK_LINE(5981)
													ret1 = tmp27;
												}
												else{
													HX_STACK_LINE(5981)
													::zpp_nape::util::ZNPNode_ZPP_Arbiter tmp27 = ::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool;		HX_STACK_VAR(tmp27,"tmp27");
													HX_STACK_LINE(5981)
													ret1 = tmp27;
													HX_STACK_LINE(5981)
													::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool = ret1->next;
													HX_STACK_LINE(5981)
													ret1->next = null();
												}
												HX_STACK_LINE(5981)
												Dynamic();
											}
											HX_STACK_LINE(5981)
											ret1->elt = arb;
											HX_STACK_LINE(5981)
											tmp24 = ret1;
										}
										HX_STACK_LINE(5981)
										::zpp_nape::util::ZNPNode_ZPP_Arbiter temp = tmp24;		HX_STACK_VAR(temp,"temp");
										HX_STACK_LINE(5981)
										temp->next = _this->head;
										HX_STACK_LINE(5981)
										_this->head = temp;
										HX_STACK_LINE(5981)
										_this->modified = true;
										HX_STACK_LINE(5981)
										(_this->length)++;
										HX_STACK_LINE(5981)
										arb;
									}
									HX_STACK_LINE(5981)
									{
										HX_STACK_LINE(5981)
										::zpp_nape::util::ZNPList_ZPP_Arbiter tmp23 = arb->b2->arbiters;		HX_STACK_VAR(tmp23,"tmp23");
										HX_STACK_LINE(5981)
										::zpp_nape::util::ZNPList_ZPP_Arbiter _this = tmp23;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(5981)
										::zpp_nape::util::ZNPNode_ZPP_Arbiter tmp24;		HX_STACK_VAR(tmp24,"tmp24");
										HX_STACK_LINE(5981)
										{
											HX_STACK_LINE(5981)
											::zpp_nape::util::ZNPNode_ZPP_Arbiter ret1;		HX_STACK_VAR(ret1,"ret1");
											HX_STACK_LINE(5981)
											{
												HX_STACK_LINE(5981)
												::zpp_nape::util::ZNPNode_ZPP_Arbiter tmp25 = ::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool;		HX_STACK_VAR(tmp25,"tmp25");
												HX_STACK_LINE(5981)
												bool tmp26 = (tmp25 == null());		HX_STACK_VAR(tmp26,"tmp26");
												HX_STACK_LINE(5981)
												if ((tmp26)){
													HX_STACK_LINE(5981)
													::zpp_nape::util::ZNPNode_ZPP_Arbiter tmp27 = ::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::__new();		HX_STACK_VAR(tmp27,"tmp27");
													HX_STACK_LINE(5981)
													ret1 = tmp27;
												}
												else{
													HX_STACK_LINE(5981)
													::zpp_nape::util::ZNPNode_ZPP_Arbiter tmp27 = ::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool;		HX_STACK_VAR(tmp27,"tmp27");
													HX_STACK_LINE(5981)
													ret1 = tmp27;
													HX_STACK_LINE(5981)
													::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool = ret1->next;
													HX_STACK_LINE(5981)
													ret1->next = null();
												}
												HX_STACK_LINE(5981)
												Dynamic();
											}
											HX_STACK_LINE(5981)
											ret1->elt = arb;
											HX_STACK_LINE(5981)
											tmp24 = ret1;
										}
										HX_STACK_LINE(5981)
										::zpp_nape::util::ZNPNode_ZPP_Arbiter temp = tmp24;		HX_STACK_VAR(temp,"temp");
										HX_STACK_LINE(5981)
										temp->next = _this->head;
										HX_STACK_LINE(5981)
										_this->head = temp;
										HX_STACK_LINE(5981)
										_this->modified = true;
										HX_STACK_LINE(5981)
										(_this->length)++;
										HX_STACK_LINE(5981)
										arb;
									}
									HX_STACK_LINE(5981)
									arb->active = true;
									HX_STACK_LINE(5981)
									arb->present = (int)0;
									HX_STACK_LINE(5981)
									arb->cleared = false;
									HX_STACK_LINE(5981)
									arb->sleeping = false;
									HX_STACK_LINE(5981)
									arb->fresh = false;
									HX_STACK_LINE(5981)
									arb->presentable = false;
								}
								HX_STACK_LINE(5981)
								{
									HX_STACK_LINE(5981)
									arb->nx = (int)0;
									HX_STACK_LINE(5981)
									arb->ny = (int)1;
									HX_STACK_LINE(5981)
									{
									}
								}
								HX_STACK_LINE(5981)
								{
									HX_STACK_LINE(5981)
									arb->dampx = (int)0;
									HX_STACK_LINE(5981)
									arb->dampy = (int)0;
									HX_STACK_LINE(5981)
									{
									}
								}
								HX_STACK_LINE(5981)
								arb->adamp = ((Float)0.0);
							}
							HX_STACK_LINE(5982)
							{
								HX_STACK_LINE(5982)
								::zpp_nape::util::ZNPList_ZPP_FluidArbiter tmp23 = this->f_arbiters;		HX_STACK_VAR(tmp23,"tmp23");
								HX_STACK_LINE(5982)
								::zpp_nape::util::ZNPList_ZPP_FluidArbiter _this = tmp23;		HX_STACK_VAR(_this,"_this");
								HX_STACK_LINE(5982)
								::zpp_nape::util::ZNPNode_ZPP_FluidArbiter tmp24;		HX_STACK_VAR(tmp24,"tmp24");
								HX_STACK_LINE(5982)
								{
									HX_STACK_LINE(5982)
									::zpp_nape::util::ZNPNode_ZPP_FluidArbiter ret1;		HX_STACK_VAR(ret1,"ret1");
									HX_STACK_LINE(5982)
									{
										HX_STACK_LINE(5982)
										::zpp_nape::util::ZNPNode_ZPP_FluidArbiter tmp25 = ::zpp_nape::util::ZNPNode_ZPP_FluidArbiter_obj::zpp_pool;		HX_STACK_VAR(tmp25,"tmp25");
										HX_STACK_LINE(5982)
										bool tmp26 = (tmp25 == null());		HX_STACK_VAR(tmp26,"tmp26");
										HX_STACK_LINE(5982)
										if ((tmp26)){
											HX_STACK_LINE(5982)
											::zpp_nape::util::ZNPNode_ZPP_FluidArbiter tmp27 = ::zpp_nape::util::ZNPNode_ZPP_FluidArbiter_obj::__new();		HX_STACK_VAR(tmp27,"tmp27");
											HX_STACK_LINE(5982)
											ret1 = tmp27;
										}
										else{
											HX_STACK_LINE(5982)
											::zpp_nape::util::ZNPNode_ZPP_FluidArbiter tmp27 = ::zpp_nape::util::ZNPNode_ZPP_FluidArbiter_obj::zpp_pool;		HX_STACK_VAR(tmp27,"tmp27");
											HX_STACK_LINE(5982)
											ret1 = tmp27;
											HX_STACK_LINE(5982)
											::zpp_nape::util::ZNPNode_ZPP_FluidArbiter_obj::zpp_pool = ret1->next;
											HX_STACK_LINE(5982)
											ret1->next = null();
										}
										HX_STACK_LINE(5982)
										Dynamic();
									}
									HX_STACK_LINE(5982)
									ret1->elt = arb;
									HX_STACK_LINE(5982)
									tmp24 = ret1;
								}
								HX_STACK_LINE(5982)
								::zpp_nape::util::ZNPNode_ZPP_FluidArbiter temp = tmp24;		HX_STACK_VAR(temp,"temp");
								HX_STACK_LINE(5982)
								temp->next = _this->head;
								HX_STACK_LINE(5982)
								_this->head = temp;
								HX_STACK_LINE(5982)
								_this->modified = true;
								HX_STACK_LINE(5982)
								(_this->length)++;
								HX_STACK_LINE(5982)
								arb;
							}
							HX_STACK_LINE(5983)
							bool tmp23 = swapped;		HX_STACK_VAR(tmp23,"tmp23");
							HX_STACK_LINE(5983)
							bool tmp24 = !(tmp23);		HX_STACK_VAR(tmp24,"tmp24");
							HX_STACK_LINE(5983)
							arb->fresh = tmp24;
						}
						else{
							HX_STACK_LINE(5986)
							int tmp23 = arb->up_stamp;		HX_STACK_VAR(tmp23,"tmp23");
							HX_STACK_LINE(5986)
							int tmp24 = this->stamp;		HX_STACK_VAR(tmp24,"tmp24");
							HX_STACK_LINE(5986)
							int tmp25 = (tmp24 - (int)1);		HX_STACK_VAR(tmp25,"tmp25");
							HX_STACK_LINE(5986)
							bool tmp26 = (tmp23 < tmp25);		HX_STACK_VAR(tmp26,"tmp26");
							HX_STACK_LINE(5986)
							bool tmp27 = !(tmp26);		HX_STACK_VAR(tmp27,"tmp27");
							HX_STACK_LINE(5986)
							bool tmp28;		HX_STACK_VAR(tmp28,"tmp28");
							HX_STACK_LINE(5986)
							if ((tmp27)){
								HX_STACK_LINE(5986)
								int tmp29 = arb->endGenerated;		HX_STACK_VAR(tmp29,"tmp29");
								HX_STACK_LINE(5986)
								int tmp30 = this->stamp;		HX_STACK_VAR(tmp30,"tmp30");
								HX_STACK_LINE(5986)
								int tmp31 = tmp30;		HX_STACK_VAR(tmp31,"tmp31");
								HX_STACK_LINE(5986)
								bool tmp32 = (tmp29 == tmp31);		HX_STACK_VAR(tmp32,"tmp32");
								HX_STACK_LINE(5986)
								bool tmp33 = tmp32;		HX_STACK_VAR(tmp33,"tmp33");
								HX_STACK_LINE(5986)
								bool tmp34 = tmp33;		HX_STACK_VAR(tmp34,"tmp34");
								HX_STACK_LINE(5986)
								if ((tmp34)){
									HX_STACK_LINE(5986)
									tmp28 = continuous;
								}
								else{
									HX_STACK_LINE(5986)
									tmp28 = false;
								}
							}
							else{
								HX_STACK_LINE(5986)
								tmp28 = true;
							}
							HX_STACK_LINE(5986)
							arb->fresh = tmp28;
						}
						HX_STACK_LINE(5988)
						arb->up_stamp = arb->stamp;
						HX_STACK_LINE(5989)
						bool tmp23 = arb->fresh;		HX_STACK_VAR(tmp23,"tmp23");
						HX_STACK_LINE(5989)
						bool tmp24 = !(tmp23);		HX_STACK_VAR(tmp24,"tmp24");
						HX_STACK_LINE(5989)
						bool tmp25;		HX_STACK_VAR(tmp25,"tmp25");
						HX_STACK_LINE(5989)
						if ((tmp24)){
							HX_STACK_LINE(5989)
							int tmp26 = arb->immState;		HX_STACK_VAR(tmp26,"tmp26");
							HX_STACK_LINE(5989)
							int tmp27 = ::zpp_nape::util::ZPP_Flags_obj::id_ImmState_ALWAYS;		HX_STACK_VAR(tmp27,"tmp27");
							HX_STACK_LINE(5989)
							int tmp28 = tmp27;		HX_STACK_VAR(tmp28,"tmp28");
							HX_STACK_LINE(5989)
							int tmp29 = (int(tmp26) & int(tmp28));		HX_STACK_VAR(tmp29,"tmp29");
							HX_STACK_LINE(5989)
							int tmp30 = tmp29;		HX_STACK_VAR(tmp30,"tmp30");
							HX_STACK_LINE(5989)
							tmp25 = (tmp30 == (int)0);
						}
						else{
							HX_STACK_LINE(5989)
							tmp25 = true;
						}
						HX_STACK_LINE(5989)
						if ((tmp25)){
							HX_STACK_LINE(5990)
							int tmp26 = ::zpp_nape::util::ZPP_Flags_obj::id_ImmState_ACCEPT;		HX_STACK_VAR(tmp26,"tmp26");
							HX_STACK_LINE(5990)
							arb->immState = tmp26;
							HX_STACK_LINE(5991)
							bool anyimpure = false;		HX_STACK_VAR(anyimpure,"anyimpure");
							HX_STACK_LINE(5992)
							int tmp27 = arb->ws1->id;		HX_STACK_VAR(tmp27,"tmp27");
							HX_STACK_LINE(5992)
							int tmp28 = arb->ws2->id;		HX_STACK_VAR(tmp28,"tmp28");
							HX_STACK_LINE(5992)
							bool tmp29 = (tmp27 > tmp28);		HX_STACK_VAR(tmp29,"tmp29");
							HX_STACK_LINE(5992)
							::zpp_nape::shape::ZPP_Shape tmp30;		HX_STACK_VAR(tmp30,"tmp30");
							HX_STACK_LINE(5992)
							if ((tmp29)){
								HX_STACK_LINE(5992)
								tmp30 = arb->ws2;
							}
							else{
								HX_STACK_LINE(5992)
								tmp30 = arb->ws1;
							}
							HX_STACK_LINE(5992)
							::zpp_nape::shape::ZPP_Shape arbs1 = tmp30;		HX_STACK_VAR(arbs1,"arbs1");
							HX_STACK_LINE(5993)
							int tmp31 = arb->ws1->id;		HX_STACK_VAR(tmp31,"tmp31");
							HX_STACK_LINE(5993)
							int tmp32 = arb->ws2->id;		HX_STACK_VAR(tmp32,"tmp32");
							HX_STACK_LINE(5993)
							bool tmp33 = (tmp31 > tmp32);		HX_STACK_VAR(tmp33,"tmp33");
							HX_STACK_LINE(5993)
							::zpp_nape::shape::ZPP_Shape tmp34;		HX_STACK_VAR(tmp34,"tmp34");
							HX_STACK_LINE(5993)
							if ((tmp33)){
								HX_STACK_LINE(5993)
								tmp34 = arb->ws1;
							}
							else{
								HX_STACK_LINE(5993)
								tmp34 = arb->ws2;
							}
							HX_STACK_LINE(5993)
							::zpp_nape::shape::ZPP_Shape arbs2 = tmp34;		HX_STACK_VAR(arbs2,"arbs2");
							HX_STACK_LINE(5994)
							{
								HX_STACK_LINE(5994)
								{
									HX_STACK_LINE(5994)
									::zpp_nape::util::ZNPList_ZPP_Interactor tmp35 = this->mrca1;		HX_STACK_VAR(tmp35,"tmp35");
									HX_STACK_LINE(5994)
									::zpp_nape::util::ZNPList_ZPP_Interactor _this = tmp35;		HX_STACK_VAR(_this,"_this");
									HX_STACK_LINE(5994)
									{
										HX_STACK_LINE(5994)
										while((true)){
											HX_STACK_LINE(5994)
											bool tmp36 = (_this->head == null());		HX_STACK_VAR(tmp36,"tmp36");
											HX_STACK_LINE(5994)
											bool tmp37 = !(tmp36);		HX_STACK_VAR(tmp37,"tmp37");
											HX_STACK_LINE(5994)
											bool tmp38 = !(tmp37);		HX_STACK_VAR(tmp38,"tmp38");
											HX_STACK_LINE(5994)
											if ((tmp38)){
												HX_STACK_LINE(5994)
												break;
											}
											HX_STACK_LINE(5994)
											::zpp_nape::util::ZNPNode_ZPP_Interactor ret1 = _this->head;		HX_STACK_VAR(ret1,"ret1");
											HX_STACK_LINE(5994)
											_this->head = ret1->next;
											HX_STACK_LINE(5994)
											{
												HX_STACK_LINE(5994)
												::zpp_nape::util::ZNPNode_ZPP_Interactor o = ret1;		HX_STACK_VAR(o,"o");
												HX_STACK_LINE(5994)
												o->elt = null();
												HX_STACK_LINE(5994)
												::zpp_nape::util::ZNPNode_ZPP_Interactor tmp39 = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool;		HX_STACK_VAR(tmp39,"tmp39");
												HX_STACK_LINE(5994)
												o->next = tmp39;
												HX_STACK_LINE(5994)
												::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool = o;
											}
											HX_STACK_LINE(5994)
											bool tmp39 = (_this->head == null());		HX_STACK_VAR(tmp39,"tmp39");
											HX_STACK_LINE(5994)
											if ((tmp39)){
												HX_STACK_LINE(5994)
												_this->pushmod = true;
											}
											HX_STACK_LINE(5994)
											_this->modified = true;
											HX_STACK_LINE(5994)
											(_this->length)--;
										}
										HX_STACK_LINE(5994)
										_this->pushmod = true;
									}
								}
								HX_STACK_LINE(5994)
								{
									HX_STACK_LINE(5994)
									::zpp_nape::util::ZNPList_ZPP_Interactor tmp35 = this->mrca2;		HX_STACK_VAR(tmp35,"tmp35");
									HX_STACK_LINE(5994)
									::zpp_nape::util::ZNPList_ZPP_Interactor _this = tmp35;		HX_STACK_VAR(_this,"_this");
									HX_STACK_LINE(5994)
									{
										HX_STACK_LINE(5994)
										while((true)){
											HX_STACK_LINE(5994)
											bool tmp36 = (_this->head == null());		HX_STACK_VAR(tmp36,"tmp36");
											HX_STACK_LINE(5994)
											bool tmp37 = !(tmp36);		HX_STACK_VAR(tmp37,"tmp37");
											HX_STACK_LINE(5994)
											bool tmp38 = !(tmp37);		HX_STACK_VAR(tmp38,"tmp38");
											HX_STACK_LINE(5994)
											if ((tmp38)){
												HX_STACK_LINE(5994)
												break;
											}
											HX_STACK_LINE(5994)
											::zpp_nape::util::ZNPNode_ZPP_Interactor ret1 = _this->head;		HX_STACK_VAR(ret1,"ret1");
											HX_STACK_LINE(5994)
											_this->head = ret1->next;
											HX_STACK_LINE(5994)
											{
												HX_STACK_LINE(5994)
												::zpp_nape::util::ZNPNode_ZPP_Interactor o = ret1;		HX_STACK_VAR(o,"o");
												HX_STACK_LINE(5994)
												o->elt = null();
												HX_STACK_LINE(5994)
												::zpp_nape::util::ZNPNode_ZPP_Interactor tmp39 = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool;		HX_STACK_VAR(tmp39,"tmp39");
												HX_STACK_LINE(5994)
												o->next = tmp39;
												HX_STACK_LINE(5994)
												::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool = o;
											}
											HX_STACK_LINE(5994)
											bool tmp39 = (_this->head == null());		HX_STACK_VAR(tmp39,"tmp39");
											HX_STACK_LINE(5994)
											if ((tmp39)){
												HX_STACK_LINE(5994)
												_this->pushmod = true;
											}
											HX_STACK_LINE(5994)
											_this->modified = true;
											HX_STACK_LINE(5994)
											(_this->length)--;
										}
										HX_STACK_LINE(5994)
										_this->pushmod = true;
									}
								}
								HX_STACK_LINE(5994)
								bool tmp35 = (arbs1->cbSet != null());		HX_STACK_VAR(tmp35,"tmp35");
								HX_STACK_LINE(5994)
								if ((tmp35)){
									HX_STACK_LINE(5994)
									::zpp_nape::util::ZNPList_ZPP_Interactor tmp36 = this->mrca1;		HX_STACK_VAR(tmp36,"tmp36");
									HX_STACK_LINE(5994)
									::zpp_nape::util::ZNPList_ZPP_Interactor _this = tmp36;		HX_STACK_VAR(_this,"_this");
									HX_STACK_LINE(5994)
									::zpp_nape::util::ZNPNode_ZPP_Interactor tmp37;		HX_STACK_VAR(tmp37,"tmp37");
									HX_STACK_LINE(5994)
									{
										HX_STACK_LINE(5994)
										::zpp_nape::util::ZNPNode_ZPP_Interactor ret1;		HX_STACK_VAR(ret1,"ret1");
										HX_STACK_LINE(5994)
										{
											HX_STACK_LINE(5994)
											::zpp_nape::util::ZNPNode_ZPP_Interactor tmp38 = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool;		HX_STACK_VAR(tmp38,"tmp38");
											HX_STACK_LINE(5994)
											bool tmp39 = (tmp38 == null());		HX_STACK_VAR(tmp39,"tmp39");
											HX_STACK_LINE(5994)
											if ((tmp39)){
												HX_STACK_LINE(5994)
												::zpp_nape::util::ZNPNode_ZPP_Interactor tmp40 = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::__new();		HX_STACK_VAR(tmp40,"tmp40");
												HX_STACK_LINE(5994)
												ret1 = tmp40;
											}
											else{
												HX_STACK_LINE(5994)
												::zpp_nape::util::ZNPNode_ZPP_Interactor tmp40 = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool;		HX_STACK_VAR(tmp40,"tmp40");
												HX_STACK_LINE(5994)
												ret1 = tmp40;
												HX_STACK_LINE(5994)
												::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool = ret1->next;
												HX_STACK_LINE(5994)
												ret1->next = null();
											}
											HX_STACK_LINE(5994)
											Dynamic();
										}
										HX_STACK_LINE(5994)
										ret1->elt = arbs1;
										HX_STACK_LINE(5994)
										tmp37 = ret1;
									}
									HX_STACK_LINE(5994)
									::zpp_nape::util::ZNPNode_ZPP_Interactor temp = tmp37;		HX_STACK_VAR(temp,"temp");
									HX_STACK_LINE(5994)
									temp->next = _this->head;
									HX_STACK_LINE(5994)
									_this->head = temp;
									HX_STACK_LINE(5994)
									_this->modified = true;
									HX_STACK_LINE(5994)
									(_this->length)++;
									HX_STACK_LINE(5994)
									arbs1;
								}
								HX_STACK_LINE(5994)
								::zpp_nape::callbacks::ZPP_CbSet tmp36 = arbs1->body->cbSet;		HX_STACK_VAR(tmp36,"tmp36");
								HX_STACK_LINE(5994)
								bool tmp37 = (tmp36 != null());		HX_STACK_VAR(tmp37,"tmp37");
								HX_STACK_LINE(5994)
								if ((tmp37)){
									HX_STACK_LINE(5994)
									::zpp_nape::util::ZNPList_ZPP_Interactor tmp38 = this->mrca1;		HX_STACK_VAR(tmp38,"tmp38");
									HX_STACK_LINE(5994)
									::zpp_nape::util::ZNPList_ZPP_Interactor _this = tmp38;		HX_STACK_VAR(_this,"_this");
									HX_STACK_LINE(5994)
									::zpp_nape::phys::ZPP_Interactor o = arbs1->body;		HX_STACK_VAR(o,"o");
									HX_STACK_LINE(5994)
									::zpp_nape::util::ZNPNode_ZPP_Interactor tmp39;		HX_STACK_VAR(tmp39,"tmp39");
									HX_STACK_LINE(5994)
									{
										HX_STACK_LINE(5994)
										::zpp_nape::util::ZNPNode_ZPP_Interactor ret1;		HX_STACK_VAR(ret1,"ret1");
										HX_STACK_LINE(5994)
										{
											HX_STACK_LINE(5994)
											::zpp_nape::util::ZNPNode_ZPP_Interactor tmp40 = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool;		HX_STACK_VAR(tmp40,"tmp40");
											HX_STACK_LINE(5994)
											bool tmp41 = (tmp40 == null());		HX_STACK_VAR(tmp41,"tmp41");
											HX_STACK_LINE(5994)
											if ((tmp41)){
												HX_STACK_LINE(5994)
												::zpp_nape::util::ZNPNode_ZPP_Interactor tmp42 = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::__new();		HX_STACK_VAR(tmp42,"tmp42");
												HX_STACK_LINE(5994)
												ret1 = tmp42;
											}
											else{
												HX_STACK_LINE(5994)
												::zpp_nape::util::ZNPNode_ZPP_Interactor tmp42 = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool;		HX_STACK_VAR(tmp42,"tmp42");
												HX_STACK_LINE(5994)
												ret1 = tmp42;
												HX_STACK_LINE(5994)
												::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool = ret1->next;
												HX_STACK_LINE(5994)
												ret1->next = null();
											}
											HX_STACK_LINE(5994)
											Dynamic();
										}
										HX_STACK_LINE(5994)
										ret1->elt = o;
										HX_STACK_LINE(5994)
										tmp39 = ret1;
									}
									HX_STACK_LINE(5994)
									::zpp_nape::util::ZNPNode_ZPP_Interactor temp = tmp39;		HX_STACK_VAR(temp,"temp");
									HX_STACK_LINE(5994)
									temp->next = _this->head;
									HX_STACK_LINE(5994)
									_this->head = temp;
									HX_STACK_LINE(5994)
									_this->modified = true;
									HX_STACK_LINE(5994)
									(_this->length)++;
									HX_STACK_LINE(5994)
									o;
								}
								HX_STACK_LINE(5994)
								bool tmp38 = (arbs2->cbSet != null());		HX_STACK_VAR(tmp38,"tmp38");
								HX_STACK_LINE(5994)
								if ((tmp38)){
									HX_STACK_LINE(5994)
									::zpp_nape::util::ZNPList_ZPP_Interactor tmp39 = this->mrca2;		HX_STACK_VAR(tmp39,"tmp39");
									HX_STACK_LINE(5994)
									::zpp_nape::util::ZNPList_ZPP_Interactor _this = tmp39;		HX_STACK_VAR(_this,"_this");
									HX_STACK_LINE(5994)
									::zpp_nape::util::ZNPNode_ZPP_Interactor tmp40;		HX_STACK_VAR(tmp40,"tmp40");
									HX_STACK_LINE(5994)
									{
										HX_STACK_LINE(5994)
										::zpp_nape::util::ZNPNode_ZPP_Interactor ret1;		HX_STACK_VAR(ret1,"ret1");
										HX_STACK_LINE(5994)
										{
											HX_STACK_LINE(5994)
											::zpp_nape::util::ZNPNode_ZPP_Interactor tmp41 = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool;		HX_STACK_VAR(tmp41,"tmp41");
											HX_STACK_LINE(5994)
											bool tmp42 = (tmp41 == null());		HX_STACK_VAR(tmp42,"tmp42");
											HX_STACK_LINE(5994)
											if ((tmp42)){
												HX_STACK_LINE(5994)
												::zpp_nape::util::ZNPNode_ZPP_Interactor tmp43 = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::__new();		HX_STACK_VAR(tmp43,"tmp43");
												HX_STACK_LINE(5994)
												ret1 = tmp43;
											}
											else{
												HX_STACK_LINE(5994)
												::zpp_nape::util::ZNPNode_ZPP_Interactor tmp43 = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool;		HX_STACK_VAR(tmp43,"tmp43");
												HX_STACK_LINE(5994)
												ret1 = tmp43;
												HX_STACK_LINE(5994)
												::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool = ret1->next;
												HX_STACK_LINE(5994)
												ret1->next = null();
											}
											HX_STACK_LINE(5994)
											Dynamic();
										}
										HX_STACK_LINE(5994)
										ret1->elt = arbs2;
										HX_STACK_LINE(5994)
										tmp40 = ret1;
									}
									HX_STACK_LINE(5994)
									::zpp_nape::util::ZNPNode_ZPP_Interactor temp = tmp40;		HX_STACK_VAR(temp,"temp");
									HX_STACK_LINE(5994)
									temp->next = _this->head;
									HX_STACK_LINE(5994)
									_this->head = temp;
									HX_STACK_LINE(5994)
									_this->modified = true;
									HX_STACK_LINE(5994)
									(_this->length)++;
									HX_STACK_LINE(5994)
									arbs2;
								}
								HX_STACK_LINE(5994)
								::zpp_nape::callbacks::ZPP_CbSet tmp39 = arbs2->body->cbSet;		HX_STACK_VAR(tmp39,"tmp39");
								HX_STACK_LINE(5994)
								bool tmp40 = (tmp39 != null());		HX_STACK_VAR(tmp40,"tmp40");
								HX_STACK_LINE(5994)
								if ((tmp40)){
									HX_STACK_LINE(5994)
									::zpp_nape::util::ZNPList_ZPP_Interactor tmp41 = this->mrca2;		HX_STACK_VAR(tmp41,"tmp41");
									HX_STACK_LINE(5994)
									::zpp_nape::util::ZNPList_ZPP_Interactor _this = tmp41;		HX_STACK_VAR(_this,"_this");
									HX_STACK_LINE(5994)
									::zpp_nape::phys::ZPP_Interactor o = arbs2->body;		HX_STACK_VAR(o,"o");
									HX_STACK_LINE(5994)
									::zpp_nape::util::ZNPNode_ZPP_Interactor tmp42;		HX_STACK_VAR(tmp42,"tmp42");
									HX_STACK_LINE(5994)
									{
										HX_STACK_LINE(5994)
										::zpp_nape::util::ZNPNode_ZPP_Interactor ret1;		HX_STACK_VAR(ret1,"ret1");
										HX_STACK_LINE(5994)
										{
											HX_STACK_LINE(5994)
											::zpp_nape::util::ZNPNode_ZPP_Interactor tmp43 = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool;		HX_STACK_VAR(tmp43,"tmp43");
											HX_STACK_LINE(5994)
											bool tmp44 = (tmp43 == null());		HX_STACK_VAR(tmp44,"tmp44");
											HX_STACK_LINE(5994)
											if ((tmp44)){
												HX_STACK_LINE(5994)
												::zpp_nape::util::ZNPNode_ZPP_Interactor tmp45 = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::__new();		HX_STACK_VAR(tmp45,"tmp45");
												HX_STACK_LINE(5994)
												ret1 = tmp45;
											}
											else{
												HX_STACK_LINE(5994)
												::zpp_nape::util::ZNPNode_ZPP_Interactor tmp45 = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool;		HX_STACK_VAR(tmp45,"tmp45");
												HX_STACK_LINE(5994)
												ret1 = tmp45;
												HX_STACK_LINE(5994)
												::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool = ret1->next;
												HX_STACK_LINE(5994)
												ret1->next = null();
											}
											HX_STACK_LINE(5994)
											Dynamic();
										}
										HX_STACK_LINE(5994)
										ret1->elt = o;
										HX_STACK_LINE(5994)
										tmp42 = ret1;
									}
									HX_STACK_LINE(5994)
									::zpp_nape::util::ZNPNode_ZPP_Interactor temp = tmp42;		HX_STACK_VAR(temp,"temp");
									HX_STACK_LINE(5994)
									temp->next = _this->head;
									HX_STACK_LINE(5994)
									_this->head = temp;
									HX_STACK_LINE(5994)
									_this->modified = true;
									HX_STACK_LINE(5994)
									(_this->length)++;
									HX_STACK_LINE(5994)
									o;
								}
								HX_STACK_LINE(5994)
								::zpp_nape::phys::ZPP_Compound tmp41 = arbs1->body->compound;		HX_STACK_VAR(tmp41,"tmp41");
								HX_STACK_LINE(5994)
								::zpp_nape::phys::ZPP_Compound c1 = tmp41;		HX_STACK_VAR(c1,"c1");
								HX_STACK_LINE(5994)
								::zpp_nape::phys::ZPP_Compound tmp42 = arbs2->body->compound;		HX_STACK_VAR(tmp42,"tmp42");
								HX_STACK_LINE(5994)
								::zpp_nape::phys::ZPP_Compound c2 = tmp42;		HX_STACK_VAR(c2,"c2");
								HX_STACK_LINE(5994)
								while((true)){
									HX_STACK_LINE(5994)
									bool tmp43 = (c1 != c2);		HX_STACK_VAR(tmp43,"tmp43");
									HX_STACK_LINE(5994)
									bool tmp44 = !(tmp43);		HX_STACK_VAR(tmp44,"tmp44");
									HX_STACK_LINE(5994)
									if ((tmp44)){
										HX_STACK_LINE(5994)
										break;
									}
									HX_STACK_LINE(5994)
									bool tmp45 = (c1 == null());		HX_STACK_VAR(tmp45,"tmp45");
									HX_STACK_LINE(5994)
									int tmp46;		HX_STACK_VAR(tmp46,"tmp46");
									HX_STACK_LINE(5994)
									if ((tmp45)){
										HX_STACK_LINE(5994)
										tmp46 = (int)0;
									}
									else{
										HX_STACK_LINE(5994)
										tmp46 = c1->depth;
									}
									HX_STACK_LINE(5994)
									int d1 = tmp46;		HX_STACK_VAR(d1,"d1");
									HX_STACK_LINE(5994)
									bool tmp47 = (c2 == null());		HX_STACK_VAR(tmp47,"tmp47");
									HX_STACK_LINE(5994)
									int tmp48;		HX_STACK_VAR(tmp48,"tmp48");
									HX_STACK_LINE(5994)
									if ((tmp47)){
										HX_STACK_LINE(5994)
										tmp48 = (int)0;
									}
									else{
										HX_STACK_LINE(5994)
										tmp48 = c2->depth;
									}
									HX_STACK_LINE(5994)
									int d2 = tmp48;		HX_STACK_VAR(d2,"d2");
									HX_STACK_LINE(5994)
									bool tmp49 = (d1 < d2);		HX_STACK_VAR(tmp49,"tmp49");
									HX_STACK_LINE(5994)
									if ((tmp49)){
										HX_STACK_LINE(5994)
										bool tmp50 = (c2->cbSet != null());		HX_STACK_VAR(tmp50,"tmp50");
										HX_STACK_LINE(5994)
										if ((tmp50)){
											HX_STACK_LINE(5994)
											::zpp_nape::util::ZNPList_ZPP_Interactor tmp51 = this->mrca2;		HX_STACK_VAR(tmp51,"tmp51");
											HX_STACK_LINE(5994)
											::zpp_nape::util::ZNPList_ZPP_Interactor _this = tmp51;		HX_STACK_VAR(_this,"_this");
											HX_STACK_LINE(5994)
											::zpp_nape::util::ZNPNode_ZPP_Interactor tmp52;		HX_STACK_VAR(tmp52,"tmp52");
											HX_STACK_LINE(5994)
											{
												HX_STACK_LINE(5994)
												::zpp_nape::util::ZNPNode_ZPP_Interactor ret1;		HX_STACK_VAR(ret1,"ret1");
												HX_STACK_LINE(5994)
												{
													HX_STACK_LINE(5994)
													::zpp_nape::util::ZNPNode_ZPP_Interactor tmp53 = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool;		HX_STACK_VAR(tmp53,"tmp53");
													HX_STACK_LINE(5994)
													bool tmp54 = (tmp53 == null());		HX_STACK_VAR(tmp54,"tmp54");
													HX_STACK_LINE(5994)
													if ((tmp54)){
														HX_STACK_LINE(5994)
														::zpp_nape::util::ZNPNode_ZPP_Interactor tmp55 = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::__new();		HX_STACK_VAR(tmp55,"tmp55");
														HX_STACK_LINE(5994)
														ret1 = tmp55;
													}
													else{
														HX_STACK_LINE(5994)
														::zpp_nape::util::ZNPNode_ZPP_Interactor tmp55 = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool;		HX_STACK_VAR(tmp55,"tmp55");
														HX_STACK_LINE(5994)
														ret1 = tmp55;
														HX_STACK_LINE(5994)
														::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool = ret1->next;
														HX_STACK_LINE(5994)
														ret1->next = null();
													}
													HX_STACK_LINE(5994)
													Dynamic();
												}
												HX_STACK_LINE(5994)
												ret1->elt = c2;
												HX_STACK_LINE(5994)
												tmp52 = ret1;
											}
											HX_STACK_LINE(5994)
											::zpp_nape::util::ZNPNode_ZPP_Interactor temp = tmp52;		HX_STACK_VAR(temp,"temp");
											HX_STACK_LINE(5994)
											temp->next = _this->head;
											HX_STACK_LINE(5994)
											_this->head = temp;
											HX_STACK_LINE(5994)
											_this->modified = true;
											HX_STACK_LINE(5994)
											(_this->length)++;
											HX_STACK_LINE(5994)
											c2;
										}
										HX_STACK_LINE(5994)
										c2 = c2->compound;
									}
									else{
										HX_STACK_LINE(5994)
										bool tmp50 = (c1->cbSet != null());		HX_STACK_VAR(tmp50,"tmp50");
										HX_STACK_LINE(5994)
										if ((tmp50)){
											HX_STACK_LINE(5994)
											::zpp_nape::util::ZNPList_ZPP_Interactor tmp51 = this->mrca1;		HX_STACK_VAR(tmp51,"tmp51");
											HX_STACK_LINE(5994)
											::zpp_nape::util::ZNPList_ZPP_Interactor _this = tmp51;		HX_STACK_VAR(_this,"_this");
											HX_STACK_LINE(5994)
											::zpp_nape::util::ZNPNode_ZPP_Interactor tmp52;		HX_STACK_VAR(tmp52,"tmp52");
											HX_STACK_LINE(5994)
											{
												HX_STACK_LINE(5994)
												::zpp_nape::util::ZNPNode_ZPP_Interactor ret1;		HX_STACK_VAR(ret1,"ret1");
												HX_STACK_LINE(5994)
												{
													HX_STACK_LINE(5994)
													::zpp_nape::util::ZNPNode_ZPP_Interactor tmp53 = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool;		HX_STACK_VAR(tmp53,"tmp53");
													HX_STACK_LINE(5994)
													bool tmp54 = (tmp53 == null());		HX_STACK_VAR(tmp54,"tmp54");
													HX_STACK_LINE(5994)
													if ((tmp54)){
														HX_STACK_LINE(5994)
														::zpp_nape::util::ZNPNode_ZPP_Interactor tmp55 = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::__new();		HX_STACK_VAR(tmp55,"tmp55");
														HX_STACK_LINE(5994)
														ret1 = tmp55;
													}
													else{
														HX_STACK_LINE(5994)
														::zpp_nape::util::ZNPNode_ZPP_Interactor tmp55 = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool;		HX_STACK_VAR(tmp55,"tmp55");
														HX_STACK_LINE(5994)
														ret1 = tmp55;
														HX_STACK_LINE(5994)
														::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool = ret1->next;
														HX_STACK_LINE(5994)
														ret1->next = null();
													}
													HX_STACK_LINE(5994)
													Dynamic();
												}
												HX_STACK_LINE(5994)
												ret1->elt = c1;
												HX_STACK_LINE(5994)
												tmp52 = ret1;
											}
											HX_STACK_LINE(5994)
											::zpp_nape::util::ZNPNode_ZPP_Interactor temp = tmp52;		HX_STACK_VAR(temp,"temp");
											HX_STACK_LINE(5994)
											temp->next = _this->head;
											HX_STACK_LINE(5994)
											_this->head = temp;
											HX_STACK_LINE(5994)
											_this->modified = true;
											HX_STACK_LINE(5994)
											(_this->length)++;
											HX_STACK_LINE(5994)
											c1;
										}
										HX_STACK_LINE(5994)
										c1 = c1->compound;
									}
								}
							}
							HX_STACK_LINE(5995)
							{
								HX_STACK_LINE(5996)
								::zpp_nape::util::ZNPList_ZPP_Interactor tmp35 = this->mrca1;		HX_STACK_VAR(tmp35,"tmp35");
								HX_STACK_LINE(5996)
								::zpp_nape::util::ZNPNode_ZPP_Interactor cx_ite = tmp35->head;		HX_STACK_VAR(cx_ite,"cx_ite");
								HX_STACK_LINE(5997)
								while((true)){
									HX_STACK_LINE(5997)
									bool tmp36 = (cx_ite != null());		HX_STACK_VAR(tmp36,"tmp36");
									HX_STACK_LINE(5997)
									bool tmp37 = !(tmp36);		HX_STACK_VAR(tmp37,"tmp37");
									HX_STACK_LINE(5997)
									if ((tmp37)){
										HX_STACK_LINE(5997)
										break;
									}
									HX_STACK_LINE(5998)
									::zpp_nape::phys::ZPP_Interactor i1 = cx_ite->elt;		HX_STACK_VAR(i1,"i1");
									HX_STACK_LINE(6000)
									{
										HX_STACK_LINE(6001)
										::zpp_nape::util::ZNPList_ZPP_Interactor tmp38 = this->mrca2;		HX_STACK_VAR(tmp38,"tmp38");
										HX_STACK_LINE(6001)
										::zpp_nape::util::ZNPNode_ZPP_Interactor cx_ite1 = tmp38->head;		HX_STACK_VAR(cx_ite1,"cx_ite1");
										HX_STACK_LINE(6002)
										while((true)){
											HX_STACK_LINE(6002)
											bool tmp39 = (cx_ite1 != null());		HX_STACK_VAR(tmp39,"tmp39");
											HX_STACK_LINE(6002)
											bool tmp40 = !(tmp39);		HX_STACK_VAR(tmp40,"tmp40");
											HX_STACK_LINE(6002)
											if ((tmp40)){
												HX_STACK_LINE(6002)
												break;
											}
											HX_STACK_LINE(6003)
											::zpp_nape::phys::ZPP_Interactor i2 = cx_ite1->elt;		HX_STACK_VAR(i2,"i2");
											HX_STACK_LINE(6004)
											{
												HX_STACK_LINE(6005)
												::zpp_nape::callbacks::ZPP_CbSet cb1 = i1->cbSet;		HX_STACK_VAR(cb1,"cb1");
												HX_STACK_LINE(6006)
												::zpp_nape::callbacks::ZPP_CbSet cb2 = i2->cbSet;		HX_STACK_VAR(cb2,"cb2");
												HX_STACK_LINE(6015)
												bool tmp41;		HX_STACK_VAR(tmp41,"tmp41");
												HX_STACK_LINE(6015)
												{
													HX_STACK_LINE(6015)
													::zpp_nape::callbacks::ZPP_CbSetPair tmp42;		HX_STACK_VAR(tmp42,"tmp42");
													HX_STACK_LINE(6015)
													{
														HX_STACK_LINE(6015)
														::zpp_nape::callbacks::ZPP_CbSetPair ret1 = null();		HX_STACK_VAR(ret1,"ret1");
														HX_STACK_LINE(6015)
														int tmp43 = cb1->cbpairs->length;		HX_STACK_VAR(tmp43,"tmp43");
														HX_STACK_LINE(6015)
														int tmp44 = cb2->cbpairs->length;		HX_STACK_VAR(tmp44,"tmp44");
														HX_STACK_LINE(6015)
														bool tmp45 = (tmp43 < tmp44);		HX_STACK_VAR(tmp45,"tmp45");
														HX_STACK_LINE(6015)
														::zpp_nape::util::ZNPList_ZPP_CbSetPair tmp46;		HX_STACK_VAR(tmp46,"tmp46");
														HX_STACK_LINE(6015)
														if ((tmp45)){
															HX_STACK_LINE(6015)
															tmp46 = cb1->cbpairs;
														}
														else{
															HX_STACK_LINE(6015)
															tmp46 = cb2->cbpairs;
														}
														HX_STACK_LINE(6015)
														::zpp_nape::util::ZNPList_ZPP_CbSetPair pairs = tmp46;		HX_STACK_VAR(pairs,"pairs");
														HX_STACK_LINE(6015)
														{
															HX_STACK_LINE(6015)
															::zpp_nape::util::ZNPNode_ZPP_CbSetPair cx_ite2 = pairs->head;		HX_STACK_VAR(cx_ite2,"cx_ite2");
															HX_STACK_LINE(6015)
															while((true)){
																HX_STACK_LINE(6015)
																bool tmp47 = (cx_ite2 != null());		HX_STACK_VAR(tmp47,"tmp47");
																HX_STACK_LINE(6015)
																bool tmp48 = !(tmp47);		HX_STACK_VAR(tmp48,"tmp48");
																HX_STACK_LINE(6015)
																if ((tmp48)){
																	HX_STACK_LINE(6015)
																	break;
																}
																HX_STACK_LINE(6015)
																::zpp_nape::callbacks::ZPP_CbSetPair p = cx_ite2->elt;		HX_STACK_VAR(p,"p");
																HX_STACK_LINE(6015)
																{
																	HX_STACK_LINE(6015)
																	bool tmp49 = (p->a == cb1);		HX_STACK_VAR(tmp49,"tmp49");
																	HX_STACK_LINE(6015)
																	bool tmp50 = tmp49;		HX_STACK_VAR(tmp50,"tmp50");
																	HX_STACK_LINE(6015)
																	bool tmp51;		HX_STACK_VAR(tmp51,"tmp51");
																	HX_STACK_LINE(6015)
																	if ((tmp50)){
																		HX_STACK_LINE(6015)
																		tmp51 = (p->b == cb2);
																	}
																	else{
																		HX_STACK_LINE(6015)
																		tmp51 = false;
																	}
																	HX_STACK_LINE(6015)
																	bool tmp52 = !(tmp51);		HX_STACK_VAR(tmp52,"tmp52");
																	HX_STACK_LINE(6015)
																	bool tmp53;		HX_STACK_VAR(tmp53,"tmp53");
																	HX_STACK_LINE(6015)
																	if ((tmp52)){
																		HX_STACK_LINE(6015)
																		bool tmp54 = (p->a == cb2);		HX_STACK_VAR(tmp54,"tmp54");
																		HX_STACK_LINE(6015)
																		bool tmp55 = tmp54;		HX_STACK_VAR(tmp55,"tmp55");
																		HX_STACK_LINE(6015)
																		bool tmp56 = tmp55;		HX_STACK_VAR(tmp56,"tmp56");
																		HX_STACK_LINE(6015)
																		if ((tmp56)){
																			HX_STACK_LINE(6015)
																			tmp53 = (p->b == cb1);
																		}
																		else{
																			HX_STACK_LINE(6015)
																			tmp53 = false;
																		}
																	}
																	else{
																		HX_STACK_LINE(6015)
																		tmp53 = true;
																	}
																	HX_STACK_LINE(6015)
																	if ((tmp53)){
																		HX_STACK_LINE(6015)
																		ret1 = p;
																		HX_STACK_LINE(6015)
																		break;
																	}
																}
																HX_STACK_LINE(6015)
																cx_ite2 = cx_ite2->next;
															}
														}
														HX_STACK_LINE(6015)
														bool tmp47 = (ret1 == null());		HX_STACK_VAR(tmp47,"tmp47");
														HX_STACK_LINE(6015)
														if ((tmp47)){
															HX_STACK_LINE(6015)
															::zpp_nape::callbacks::ZPP_CbSetPair tmp48;		HX_STACK_VAR(tmp48,"tmp48");
															HX_STACK_LINE(6015)
															{
																HX_STACK_LINE(6015)
																::zpp_nape::callbacks::ZPP_CbSetPair ret2;		HX_STACK_VAR(ret2,"ret2");
																HX_STACK_LINE(6015)
																{
																	HX_STACK_LINE(6015)
																	::zpp_nape::callbacks::ZPP_CbSetPair tmp49 = ::zpp_nape::callbacks::ZPP_CbSetPair_obj::zpp_pool;		HX_STACK_VAR(tmp49,"tmp49");
																	HX_STACK_LINE(6015)
																	bool tmp50 = (tmp49 == null());		HX_STACK_VAR(tmp50,"tmp50");
																	HX_STACK_LINE(6015)
																	if ((tmp50)){
																		HX_STACK_LINE(6015)
																		::zpp_nape::callbacks::ZPP_CbSetPair tmp51 = ::zpp_nape::callbacks::ZPP_CbSetPair_obj::__new();		HX_STACK_VAR(tmp51,"tmp51");
																		HX_STACK_LINE(6015)
																		ret2 = tmp51;
																	}
																	else{
																		HX_STACK_LINE(6015)
																		::zpp_nape::callbacks::ZPP_CbSetPair tmp51 = ::zpp_nape::callbacks::ZPP_CbSetPair_obj::zpp_pool;		HX_STACK_VAR(tmp51,"tmp51");
																		HX_STACK_LINE(6015)
																		ret2 = tmp51;
																		HX_STACK_LINE(6015)
																		::zpp_nape::callbacks::ZPP_CbSetPair_obj::zpp_pool = ret2->next;
																		HX_STACK_LINE(6015)
																		ret2->next = null();
																	}
																	HX_STACK_LINE(6015)
																	ret2->zip_listeners = true;
																}
																HX_STACK_LINE(6015)
																::zpp_nape::callbacks::ZPP_CbSet tmp49 = cb1;		HX_STACK_VAR(tmp49,"tmp49");
																HX_STACK_LINE(6015)
																::zpp_nape::callbacks::ZPP_CbSet tmp50 = cb2;		HX_STACK_VAR(tmp50,"tmp50");
																HX_STACK_LINE(6015)
																bool tmp51 = ::zpp_nape::callbacks::ZPP_CbSet_obj::setlt(tmp49,tmp50);		HX_STACK_VAR(tmp51,"tmp51");
																HX_STACK_LINE(6015)
																if ((tmp51)){
																	HX_STACK_LINE(6015)
																	ret2->a = cb1;
																	HX_STACK_LINE(6015)
																	ret2->b = cb2;
																}
																else{
																	HX_STACK_LINE(6015)
																	ret2->a = cb2;
																	HX_STACK_LINE(6015)
																	ret2->b = cb1;
																}
																HX_STACK_LINE(6015)
																tmp48 = ret2;
															}
															HX_STACK_LINE(6015)
															ret1 = tmp48;
															HX_STACK_LINE(6015)
															::zpp_nape::callbacks::ZPP_CbSetPair tmp49 = ret1;		HX_STACK_VAR(tmp49,"tmp49");
															HX_STACK_LINE(6015)
															cb1->cbpairs->add(tmp49);
															HX_STACK_LINE(6015)
															bool tmp50 = (cb2 != cb1);		HX_STACK_VAR(tmp50,"tmp50");
															HX_STACK_LINE(6015)
															if ((tmp50)){
																HX_STACK_LINE(6015)
																::zpp_nape::callbacks::ZPP_CbSetPair tmp51 = ret1;		HX_STACK_VAR(tmp51,"tmp51");
																HX_STACK_LINE(6015)
																cb2->cbpairs->add(tmp51);
															}
														}
														HX_STACK_LINE(6015)
														{
															HX_STACK_LINE(6015)
															bool tmp48 = ret1->zip_listeners;		HX_STACK_VAR(tmp48,"tmp48");
															HX_STACK_LINE(6015)
															if ((tmp48)){
																HX_STACK_LINE(6015)
																ret1->zip_listeners = false;
																HX_STACK_LINE(6015)
																ret1->__validate();
															}
														}
														HX_STACK_LINE(6015)
														tmp42 = ret1;
													}
													HX_STACK_LINE(6015)
													::zpp_nape::callbacks::ZPP_CbSetPair _this = tmp42;		HX_STACK_VAR(_this,"_this");
													HX_STACK_LINE(6015)
													::zpp_nape::util::ZNPNode_ZPP_InteractionListener tmp43 = _this->listeners->head;		HX_STACK_VAR(tmp43,"tmp43");
													HX_STACK_LINE(6015)
													tmp41 = (tmp43 == null());
												}
												HX_STACK_LINE(6015)
												if ((tmp41)){
													HX_STACK_LINE(6016)
													cx_ite1 = cx_ite1->next;
													HX_STACK_LINE(6017)
													continue;
												}
												HX_STACK_LINE(6019)
												::zpp_nape::space::ZPP_CallbackSet callbackset = null();		HX_STACK_VAR(callbackset,"callbackset");
												HX_STACK_LINE(6020)
												::zpp_nape::space::ZPP_CallbackSet ncallbackset = null();		HX_STACK_VAR(ncallbackset,"ncallbackset");
												HX_STACK_LINE(6021)
												{
													HX_STACK_LINE(6021)
													::zpp_nape::util::ZNPList_ZPP_InteractionListener tmp42 = this->prelisteners;		HX_STACK_VAR(tmp42,"tmp42");
													HX_STACK_LINE(6021)
													::zpp_nape::util::ZNPList_ZPP_InteractionListener _this = tmp42;		HX_STACK_VAR(_this,"_this");
													HX_STACK_LINE(6021)
													{
														HX_STACK_LINE(6021)
														while((true)){
															HX_STACK_LINE(6021)
															bool tmp43 = (_this->head == null());		HX_STACK_VAR(tmp43,"tmp43");
															HX_STACK_LINE(6021)
															bool tmp44 = !(tmp43);		HX_STACK_VAR(tmp44,"tmp44");
															HX_STACK_LINE(6021)
															bool tmp45 = !(tmp44);		HX_STACK_VAR(tmp45,"tmp45");
															HX_STACK_LINE(6021)
															if ((tmp45)){
																HX_STACK_LINE(6021)
																break;
															}
															HX_STACK_LINE(6021)
															::zpp_nape::util::ZNPNode_ZPP_InteractionListener ret1 = _this->head;		HX_STACK_VAR(ret1,"ret1");
															HX_STACK_LINE(6021)
															_this->head = ret1->next;
															HX_STACK_LINE(6021)
															{
																HX_STACK_LINE(6021)
																::zpp_nape::util::ZNPNode_ZPP_InteractionListener o = ret1;		HX_STACK_VAR(o,"o");
																HX_STACK_LINE(6021)
																o->elt = null();
																HX_STACK_LINE(6021)
																::zpp_nape::util::ZNPNode_ZPP_InteractionListener tmp46 = ::zpp_nape::util::ZNPNode_ZPP_InteractionListener_obj::zpp_pool;		HX_STACK_VAR(tmp46,"tmp46");
																HX_STACK_LINE(6021)
																o->next = tmp46;
																HX_STACK_LINE(6021)
																::zpp_nape::util::ZNPNode_ZPP_InteractionListener_obj::zpp_pool = o;
															}
															HX_STACK_LINE(6021)
															bool tmp46 = (_this->head == null());		HX_STACK_VAR(tmp46,"tmp46");
															HX_STACK_LINE(6021)
															if ((tmp46)){
																HX_STACK_LINE(6021)
																_this->pushmod = true;
															}
															HX_STACK_LINE(6021)
															_this->modified = true;
															HX_STACK_LINE(6021)
															(_this->length)--;
														}
														HX_STACK_LINE(6021)
														_this->pushmod = true;
													}
												}
												HX_STACK_LINE(6022)
												::zpp_nape::util::ZNPNode_ZPP_InteractionListener lite = null();		HX_STACK_VAR(lite,"lite");
												HX_STACK_LINE(6023)
												{
													HX_STACK_LINE(6023)
													int tmp42 = ::zpp_nape::util::ZPP_Flags_obj::id_CbEvent_PRE;		HX_STACK_VAR(tmp42,"tmp42");
													HX_STACK_LINE(6023)
													int event = tmp42;		HX_STACK_VAR(event,"event");
													HX_STACK_LINE(6023)
													{
														HX_STACK_LINE(6023)
														::zpp_nape::callbacks::ZPP_CbSetPair tmp43;		HX_STACK_VAR(tmp43,"tmp43");
														HX_STACK_LINE(6023)
														{
															HX_STACK_LINE(6023)
															::zpp_nape::callbacks::ZPP_CbSetPair ret1 = null();		HX_STACK_VAR(ret1,"ret1");
															HX_STACK_LINE(6023)
															int tmp44 = cb1->cbpairs->length;		HX_STACK_VAR(tmp44,"tmp44");
															HX_STACK_LINE(6023)
															int tmp45 = cb2->cbpairs->length;		HX_STACK_VAR(tmp45,"tmp45");
															HX_STACK_LINE(6023)
															bool tmp46 = (tmp44 < tmp45);		HX_STACK_VAR(tmp46,"tmp46");
															HX_STACK_LINE(6023)
															::zpp_nape::util::ZNPList_ZPP_CbSetPair tmp47;		HX_STACK_VAR(tmp47,"tmp47");
															HX_STACK_LINE(6023)
															if ((tmp46)){
																HX_STACK_LINE(6023)
																tmp47 = cb1->cbpairs;
															}
															else{
																HX_STACK_LINE(6023)
																tmp47 = cb2->cbpairs;
															}
															HX_STACK_LINE(6023)
															::zpp_nape::util::ZNPList_ZPP_CbSetPair pairs = tmp47;		HX_STACK_VAR(pairs,"pairs");
															HX_STACK_LINE(6023)
															{
																HX_STACK_LINE(6023)
																::zpp_nape::util::ZNPNode_ZPP_CbSetPair cx_ite2 = pairs->head;		HX_STACK_VAR(cx_ite2,"cx_ite2");
																HX_STACK_LINE(6023)
																while((true)){
																	HX_STACK_LINE(6023)
																	bool tmp48 = (cx_ite2 != null());		HX_STACK_VAR(tmp48,"tmp48");
																	HX_STACK_LINE(6023)
																	bool tmp49 = !(tmp48);		HX_STACK_VAR(tmp49,"tmp49");
																	HX_STACK_LINE(6023)
																	if ((tmp49)){
																		HX_STACK_LINE(6023)
																		break;
																	}
																	HX_STACK_LINE(6023)
																	::zpp_nape::callbacks::ZPP_CbSetPair p = cx_ite2->elt;		HX_STACK_VAR(p,"p");
																	HX_STACK_LINE(6023)
																	{
																		HX_STACK_LINE(6023)
																		bool tmp50 = (p->a == cb1);		HX_STACK_VAR(tmp50,"tmp50");
																		HX_STACK_LINE(6023)
																		bool tmp51 = tmp50;		HX_STACK_VAR(tmp51,"tmp51");
																		HX_STACK_LINE(6023)
																		bool tmp52;		HX_STACK_VAR(tmp52,"tmp52");
																		HX_STACK_LINE(6023)
																		if ((tmp51)){
																			HX_STACK_LINE(6023)
																			tmp52 = (p->b == cb2);
																		}
																		else{
																			HX_STACK_LINE(6023)
																			tmp52 = false;
																		}
																		HX_STACK_LINE(6023)
																		bool tmp53 = !(tmp52);		HX_STACK_VAR(tmp53,"tmp53");
																		HX_STACK_LINE(6023)
																		bool tmp54;		HX_STACK_VAR(tmp54,"tmp54");
																		HX_STACK_LINE(6023)
																		if ((tmp53)){
																			HX_STACK_LINE(6023)
																			bool tmp55 = (p->a == cb2);		HX_STACK_VAR(tmp55,"tmp55");
																			HX_STACK_LINE(6023)
																			bool tmp56 = tmp55;		HX_STACK_VAR(tmp56,"tmp56");
																			HX_STACK_LINE(6023)
																			bool tmp57 = tmp56;		HX_STACK_VAR(tmp57,"tmp57");
																			HX_STACK_LINE(6023)
																			if ((tmp57)){
																				HX_STACK_LINE(6023)
																				tmp54 = (p->b == cb1);
																			}
																			else{
																				HX_STACK_LINE(6023)
																				tmp54 = false;
																			}
																		}
																		else{
																			HX_STACK_LINE(6023)
																			tmp54 = true;
																		}
																		HX_STACK_LINE(6023)
																		if ((tmp54)){
																			HX_STACK_LINE(6023)
																			ret1 = p;
																			HX_STACK_LINE(6023)
																			break;
																		}
																	}
																	HX_STACK_LINE(6023)
																	cx_ite2 = cx_ite2->next;
																}
															}
															HX_STACK_LINE(6023)
															bool tmp48 = (ret1 == null());		HX_STACK_VAR(tmp48,"tmp48");
															HX_STACK_LINE(6023)
															if ((tmp48)){
																HX_STACK_LINE(6023)
																::zpp_nape::callbacks::ZPP_CbSetPair tmp49;		HX_STACK_VAR(tmp49,"tmp49");
																HX_STACK_LINE(6023)
																{
																	HX_STACK_LINE(6023)
																	::zpp_nape::callbacks::ZPP_CbSetPair ret2;		HX_STACK_VAR(ret2,"ret2");
																	HX_STACK_LINE(6023)
																	{
																		HX_STACK_LINE(6023)
																		::zpp_nape::callbacks::ZPP_CbSetPair tmp50 = ::zpp_nape::callbacks::ZPP_CbSetPair_obj::zpp_pool;		HX_STACK_VAR(tmp50,"tmp50");
																		HX_STACK_LINE(6023)
																		bool tmp51 = (tmp50 == null());		HX_STACK_VAR(tmp51,"tmp51");
																		HX_STACK_LINE(6023)
																		if ((tmp51)){
																			HX_STACK_LINE(6023)
																			::zpp_nape::callbacks::ZPP_CbSetPair tmp52 = ::zpp_nape::callbacks::ZPP_CbSetPair_obj::__new();		HX_STACK_VAR(tmp52,"tmp52");
																			HX_STACK_LINE(6023)
																			ret2 = tmp52;
																		}
																		else{
																			HX_STACK_LINE(6023)
																			::zpp_nape::callbacks::ZPP_CbSetPair tmp52 = ::zpp_nape::callbacks::ZPP_CbSetPair_obj::zpp_pool;		HX_STACK_VAR(tmp52,"tmp52");
																			HX_STACK_LINE(6023)
																			ret2 = tmp52;
																			HX_STACK_LINE(6023)
																			::zpp_nape::callbacks::ZPP_CbSetPair_obj::zpp_pool = ret2->next;
																			HX_STACK_LINE(6023)
																			ret2->next = null();
																		}
																		HX_STACK_LINE(6023)
																		ret2->zip_listeners = true;
																	}
																	HX_STACK_LINE(6023)
																	::zpp_nape::callbacks::ZPP_CbSet tmp50 = cb1;		HX_STACK_VAR(tmp50,"tmp50");
																	HX_STACK_LINE(6023)
																	::zpp_nape::callbacks::ZPP_CbSet tmp51 = cb2;		HX_STACK_VAR(tmp51,"tmp51");
																	HX_STACK_LINE(6023)
																	bool tmp52 = ::zpp_nape::callbacks::ZPP_CbSet_obj::setlt(tmp50,tmp51);		HX_STACK_VAR(tmp52,"tmp52");
																	HX_STACK_LINE(6023)
																	if ((tmp52)){
																		HX_STACK_LINE(6023)
																		ret2->a = cb1;
																		HX_STACK_LINE(6023)
																		ret2->b = cb2;
																	}
																	else{
																		HX_STACK_LINE(6023)
																		ret2->a = cb2;
																		HX_STACK_LINE(6023)
																		ret2->b = cb1;
																	}
																	HX_STACK_LINE(6023)
																	tmp49 = ret2;
																}
																HX_STACK_LINE(6023)
																ret1 = tmp49;
																HX_STACK_LINE(6023)
																::zpp_nape::callbacks::ZPP_CbSetPair tmp50 = ret1;		HX_STACK_VAR(tmp50,"tmp50");
																HX_STACK_LINE(6023)
																cb1->cbpairs->add(tmp50);
																HX_STACK_LINE(6023)
																bool tmp51 = (cb2 != cb1);		HX_STACK_VAR(tmp51,"tmp51");
																HX_STACK_LINE(6023)
																if ((tmp51)){
																	HX_STACK_LINE(6023)
																	::zpp_nape::callbacks::ZPP_CbSetPair tmp52 = ret1;		HX_STACK_VAR(tmp52,"tmp52");
																	HX_STACK_LINE(6023)
																	cb2->cbpairs->add(tmp52);
																}
															}
															HX_STACK_LINE(6023)
															{
																HX_STACK_LINE(6023)
																bool tmp49 = ret1->zip_listeners;		HX_STACK_VAR(tmp49,"tmp49");
																HX_STACK_LINE(6023)
																if ((tmp49)){
																	HX_STACK_LINE(6023)
																	ret1->zip_listeners = false;
																	HX_STACK_LINE(6023)
																	ret1->__validate();
																}
															}
															HX_STACK_LINE(6023)
															tmp43 = ret1;
														}
														HX_STACK_LINE(6023)
														::zpp_nape::callbacks::ZPP_CbSetPair _this = tmp43;		HX_STACK_VAR(_this,"_this");
														HX_STACK_LINE(6023)
														{
															HX_STACK_LINE(6023)
															::zpp_nape::util::ZNPNode_ZPP_InteractionListener tmp44 = _this->listeners->head;		HX_STACK_VAR(tmp44,"tmp44");
															HX_STACK_LINE(6023)
															::zpp_nape::util::ZNPNode_ZPP_InteractionListener cx_ite2 = tmp44;		HX_STACK_VAR(cx_ite2,"cx_ite2");
															HX_STACK_LINE(6023)
															while((true)){
																HX_STACK_LINE(6023)
																bool tmp45 = (cx_ite2 != null());		HX_STACK_VAR(tmp45,"tmp45");
																HX_STACK_LINE(6023)
																bool tmp46 = !(tmp45);		HX_STACK_VAR(tmp46,"tmp46");
																HX_STACK_LINE(6023)
																if ((tmp46)){
																	HX_STACK_LINE(6023)
																	break;
																}
																HX_STACK_LINE(6023)
																::zpp_nape::callbacks::ZPP_InteractionListener x = cx_ite2->elt;		HX_STACK_VAR(x,"x");
																HX_STACK_LINE(6023)
																{
																	HX_STACK_LINE(6023)
																	bool tmp47 = (x->event == event);		HX_STACK_VAR(tmp47,"tmp47");
																	HX_STACK_LINE(6023)
																	if ((tmp47)){
																		HX_STACK_LINE(6023)
																		::zpp_nape::callbacks::ZPP_InteractionListener tmp48 = x;		HX_STACK_VAR(tmp48,"tmp48");
																		HX_STACK_LINE(6024)
																		{
																			HX_STACK_LINE(6024)
																			int tmp49 = (int(tmp48->itype) & int(inttype));		HX_STACK_VAR(tmp49,"tmp49");
																			HX_STACK_LINE(6024)
																			bool tmp50 = (tmp49 != (int)0);		HX_STACK_VAR(tmp50,"tmp50");
																			HX_STACK_LINE(6024)
																			if ((tmp50)){
																				HX_STACK_LINE(6025)
																				::zpp_nape::util::ZNPNode_ZPP_InteractionListener tmp51;		HX_STACK_VAR(tmp51,"tmp51");
																				HX_STACK_LINE(6025)
																				{
																					HX_STACK_LINE(6025)
																					::zpp_nape::util::ZNPList_ZPP_InteractionListener _this1 = _g->prelisteners;		HX_STACK_VAR(_this1,"_this1");
																					HX_STACK_LINE(6025)
																					::zpp_nape::util::ZNPNode_ZPP_InteractionListener tmp52;		HX_STACK_VAR(tmp52,"tmp52");
																					HX_STACK_LINE(6025)
																					{
																						HX_STACK_LINE(6025)
																						::zpp_nape::util::ZNPNode_ZPP_InteractionListener ret1;		HX_STACK_VAR(ret1,"ret1");
																						HX_STACK_LINE(6025)
																						{
																							HX_STACK_LINE(6025)
																							::zpp_nape::util::ZNPNode_ZPP_InteractionListener tmp53 = ::zpp_nape::util::ZNPNode_ZPP_InteractionListener_obj::zpp_pool;		HX_STACK_VAR(tmp53,"tmp53");
																							HX_STACK_LINE(6025)
																							bool tmp54 = (tmp53 == null());		HX_STACK_VAR(tmp54,"tmp54");
																							HX_STACK_LINE(6025)
																							if ((tmp54)){
																								HX_STACK_LINE(6025)
																								::zpp_nape::util::ZNPNode_ZPP_InteractionListener tmp55 = ::zpp_nape::util::ZNPNode_ZPP_InteractionListener_obj::__new();		HX_STACK_VAR(tmp55,"tmp55");
																								HX_STACK_LINE(6025)
																								ret1 = tmp55;
																							}
																							else{
																								HX_STACK_LINE(6025)
																								::zpp_nape::util::ZNPNode_ZPP_InteractionListener tmp55 = ::zpp_nape::util::ZNPNode_ZPP_InteractionListener_obj::zpp_pool;		HX_STACK_VAR(tmp55,"tmp55");
																								HX_STACK_LINE(6025)
																								ret1 = tmp55;
																								HX_STACK_LINE(6025)
																								::zpp_nape::util::ZNPNode_ZPP_InteractionListener_obj::zpp_pool = ret1->next;
																								HX_STACK_LINE(6025)
																								ret1->next = null();
																							}
																							HX_STACK_LINE(6025)
																							Dynamic();
																						}
																						HX_STACK_LINE(6025)
																						ret1->elt = tmp48;
																						HX_STACK_LINE(6025)
																						tmp52 = ret1;
																					}
																					HX_STACK_LINE(6025)
																					::zpp_nape::util::ZNPNode_ZPP_InteractionListener temp = tmp52;		HX_STACK_VAR(temp,"temp");
																					HX_STACK_LINE(6025)
																					bool tmp53 = (lite == null());		HX_STACK_VAR(tmp53,"tmp53");
																					HX_STACK_LINE(6025)
																					if ((tmp53)){
																						HX_STACK_LINE(6025)
																						temp->next = _this1->head;
																						HX_STACK_LINE(6025)
																						_this1->head = temp;
																					}
																					else{
																						HX_STACK_LINE(6025)
																						temp->next = lite->next;
																						HX_STACK_LINE(6025)
																						lite->next = temp;
																					}
																					HX_STACK_LINE(6025)
																					bool tmp54 = _this1->modified = true;		HX_STACK_VAR(tmp54,"tmp54");
																					HX_STACK_LINE(6025)
																					_this1->pushmod = tmp54;
																					HX_STACK_LINE(6025)
																					(_this1->length)++;
																					HX_STACK_LINE(6025)
																					tmp51 = temp;
																				}
																				HX_STACK_LINE(6025)
																				lite = tmp51;
																				HX_STACK_LINE(6026)
																				bool tmp52 = anyimpure;		HX_STACK_VAR(tmp52,"tmp52");
																				HX_STACK_LINE(6026)
																				bool tmp53 = !(tmp52);		HX_STACK_VAR(tmp53,"tmp53");
																				HX_STACK_LINE(6026)
																				bool tmp54;		HX_STACK_VAR(tmp54,"tmp54");
																				HX_STACK_LINE(6026)
																				if ((tmp53)){
																					HX_STACK_LINE(6026)
																					bool tmp55 = tmp48->pure;		HX_STACK_VAR(tmp55,"tmp55");
																					HX_STACK_LINE(6026)
																					bool tmp56 = tmp55;		HX_STACK_VAR(tmp56,"tmp56");
																					HX_STACK_LINE(6026)
																					tmp54 = !(tmp56);
																				}
																				else{
																					HX_STACK_LINE(6026)
																					tmp54 = true;
																				}
																				HX_STACK_LINE(6026)
																				anyimpure = tmp54;
																			}
																		}
																	}
																}
																HX_STACK_LINE(6023)
																cx_ite2 = cx_ite2->next;
															}
														}
													}
												}
												HX_STACK_LINE(6029)
												::zpp_nape::util::ZNPList_ZPP_InteractionListener tmp42 = this->prelisteners;		HX_STACK_VAR(tmp42,"tmp42");
												HX_STACK_LINE(6029)
												::zpp_nape::util::ZNPNode_ZPP_InteractionListener tmp43 = tmp42->head;		HX_STACK_VAR(tmp43,"tmp43");
												HX_STACK_LINE(6029)
												bool tmp44 = (tmp43 == null());		HX_STACK_VAR(tmp44,"tmp44");
												HX_STACK_LINE(6029)
												if ((tmp44)){
													HX_STACK_LINE(6030)
													cx_ite1 = cx_ite1->next;
													HX_STACK_LINE(6031)
													continue;
												}
												HX_STACK_LINE(6033)
												::zpp_nape::phys::ZPP_Interactor tmp45 = i1;		HX_STACK_VAR(tmp45,"tmp45");
												HX_STACK_LINE(6033)
												::zpp_nape::phys::ZPP_Interactor tmp46 = i2;		HX_STACK_VAR(tmp46,"tmp46");
												HX_STACK_LINE(6033)
												::zpp_nape::space::ZPP_CallbackSet tmp47 = ::zpp_nape::phys::ZPP_Interactor_obj::get(tmp45,tmp46);		HX_STACK_VAR(tmp47,"tmp47");
												HX_STACK_LINE(6033)
												callbackset = tmp47;
												HX_STACK_LINE(6034)
												bool tmp48 = (callbackset == null());		HX_STACK_VAR(tmp48,"tmp48");
												HX_STACK_LINE(6034)
												if ((tmp48)){
													HX_STACK_LINE(6035)
													::zpp_nape::phys::ZPP_Interactor tmp49 = i1;		HX_STACK_VAR(tmp49,"tmp49");
													HX_STACK_LINE(6035)
													::zpp_nape::phys::ZPP_Interactor tmp50 = i2;		HX_STACK_VAR(tmp50,"tmp50");
													HX_STACK_LINE(6035)
													::zpp_nape::space::ZPP_CallbackSet tmp51 = ::zpp_nape::space::ZPP_CallbackSet_obj::get(tmp49,tmp50);		HX_STACK_VAR(tmp51,"tmp51");
													HX_STACK_LINE(6035)
													ncallbackset = tmp51;
													HX_STACK_LINE(6036)
													::zpp_nape::space::ZPP_CallbackSet tmp52 = ncallbackset;		HX_STACK_VAR(tmp52,"tmp52");
													HX_STACK_LINE(6036)
													this->add_callbackset(tmp52);
												}
												HX_STACK_LINE(6038)
												bool tmp49 = (callbackset == null());		HX_STACK_VAR(tmp49,"tmp49");
												HX_STACK_LINE(6038)
												bool tmp50 = !(tmp49);		HX_STACK_VAR(tmp50,"tmp50");
												HX_STACK_LINE(6038)
												bool tmp51;		HX_STACK_VAR(tmp51,"tmp51");
												HX_STACK_LINE(6038)
												if ((tmp50)){
													HX_STACK_LINE(6038)
													int tmp52 = callbackset->FLUIDstamp;		HX_STACK_VAR(tmp52,"tmp52");
													HX_STACK_LINE(6038)
													int tmp53 = this->stamp;		HX_STACK_VAR(tmp53,"tmp53");
													HX_STACK_LINE(6038)
													int tmp54 = tmp53;		HX_STACK_VAR(tmp54,"tmp54");
													HX_STACK_LINE(6038)
													bool tmp55 = (tmp52 != tmp54);		HX_STACK_VAR(tmp55,"tmp55");
													HX_STACK_LINE(6038)
													bool tmp56 = tmp55;		HX_STACK_VAR(tmp56,"tmp56");
													HX_STACK_LINE(6038)
													bool tmp57 = tmp56;		HX_STACK_VAR(tmp57,"tmp57");
													HX_STACK_LINE(6038)
													bool tmp58 = !(tmp57);		HX_STACK_VAR(tmp58,"tmp58");
													HX_STACK_LINE(6038)
													bool tmp59 = tmp58;		HX_STACK_VAR(tmp59,"tmp59");
													HX_STACK_LINE(6038)
													bool tmp60 = tmp59;		HX_STACK_VAR(tmp60,"tmp60");
													HX_STACK_LINE(6038)
													bool tmp61;		HX_STACK_VAR(tmp61,"tmp61");
													HX_STACK_LINE(6038)
													bool tmp62 = tmp60;		HX_STACK_VAR(tmp62,"tmp62");
													HX_STACK_LINE(6038)
													if ((tmp62)){
														HX_STACK_LINE(6038)
														tmp61 = continuous;
													}
													else{
														HX_STACK_LINE(6038)
														tmp61 = true;
													}
													HX_STACK_LINE(6038)
													bool tmp63 = tmp61;		HX_STACK_VAR(tmp63,"tmp63");
													HX_STACK_LINE(6038)
													if ((tmp63)){
														HX_STACK_LINE(6038)
														int tmp64 = callbackset->FLUIDstate;		HX_STACK_VAR(tmp64,"tmp64");
														HX_STACK_LINE(6038)
														int tmp65 = ::zpp_nape::util::ZPP_Flags_obj::id_ImmState_ALWAYS;		HX_STACK_VAR(tmp65,"tmp65");
														HX_STACK_LINE(6038)
														int tmp66 = tmp65;		HX_STACK_VAR(tmp66,"tmp66");
														HX_STACK_LINE(6038)
														int tmp67 = tmp66;		HX_STACK_VAR(tmp67,"tmp67");
														HX_STACK_LINE(6038)
														int tmp68 = (int(tmp64) & int(tmp67));		HX_STACK_VAR(tmp68,"tmp68");
														HX_STACK_LINE(6038)
														int tmp69 = tmp68;		HX_STACK_VAR(tmp69,"tmp69");
														HX_STACK_LINE(6038)
														int tmp70 = tmp69;		HX_STACK_VAR(tmp70,"tmp70");
														HX_STACK_LINE(6038)
														tmp51 = (tmp70 == (int)0);
													}
													else{
														HX_STACK_LINE(6038)
														tmp51 = false;
													}
												}
												else{
													HX_STACK_LINE(6038)
													tmp51 = true;
												}
												HX_STACK_LINE(6038)
												if ((tmp51)){
													HX_STACK_LINE(6039)
													bool tmp52 = (ncallbackset != null());		HX_STACK_VAR(tmp52,"tmp52");
													HX_STACK_LINE(6039)
													if ((tmp52)){
														HX_STACK_LINE(6039)
														callbackset = ncallbackset;
													}
													HX_STACK_LINE(6040)
													bool tmp53 = (callbackset != null());		HX_STACK_VAR(tmp53,"tmp53");
													HX_STACK_LINE(6040)
													if ((tmp53)){
														HX_STACK_LINE(6042)
														::zpp_nape::util::ZNPList_ZPP_InteractionListener tmp54 = this->prelisteners;		HX_STACK_VAR(tmp54,"tmp54");
														HX_STACK_LINE(6042)
														::zpp_nape::util::ZNPNode_ZPP_InteractionListener cx_ite2 = tmp54->head;		HX_STACK_VAR(cx_ite2,"cx_ite2");
														HX_STACK_LINE(6043)
														while((true)){
															HX_STACK_LINE(6043)
															bool tmp55 = (cx_ite2 != null());		HX_STACK_VAR(tmp55,"tmp55");
															HX_STACK_LINE(6043)
															bool tmp56 = !(tmp55);		HX_STACK_VAR(tmp56,"tmp56");
															HX_STACK_LINE(6043)
															if ((tmp56)){
																HX_STACK_LINE(6043)
																break;
															}
															HX_STACK_LINE(6044)
															::zpp_nape::callbacks::ZPP_InteractionListener listener = cx_ite2->elt;		HX_STACK_VAR(listener,"listener");
															HX_STACK_LINE(6045)
															{
																HX_STACK_LINE(6046)
																int tmp57 = listener->itype;		HX_STACK_VAR(tmp57,"tmp57");
																HX_STACK_LINE(6046)
																int tmp58 = ::zpp_nape::util::ZPP_Flags_obj::id_InteractionType_ANY;		HX_STACK_VAR(tmp58,"tmp58");
																HX_STACK_LINE(6046)
																bool tmp59 = (tmp57 == tmp58);		HX_STACK_VAR(tmp59,"tmp59");
																HX_STACK_LINE(6046)
																if ((tmp59)){
																	HX_STACK_LINE(6047)
																	int tmp60 = this->stamp;		HX_STACK_VAR(tmp60,"tmp60");
																	HX_STACK_LINE(6047)
																	callbackset->COLLISIONstamp = tmp60;
																	HX_STACK_LINE(6048)
																	int tmp61 = this->stamp;		HX_STACK_VAR(tmp61,"tmp61");
																	HX_STACK_LINE(6048)
																	callbackset->SENSORstamp = tmp61;
																	HX_STACK_LINE(6049)
																	int tmp62 = this->stamp;		HX_STACK_VAR(tmp62,"tmp62");
																	HX_STACK_LINE(6049)
																	callbackset->FLUIDstamp = tmp62;
																}
																else{
																	HX_STACK_LINE(6051)
																	int tmp60 = this->stamp;		HX_STACK_VAR(tmp60,"tmp60");
																	HX_STACK_LINE(6051)
																	callbackset->FLUIDstamp = tmp60;
																}
															}
															HX_STACK_LINE(6053)
															cx_ite2 = cx_ite2->next;
														}
													}
													HX_STACK_LINE(6058)
													{
														HX_STACK_LINE(6058)
														arb->_mutable = true;
														HX_STACK_LINE(6058)
														bool tmp54 = (arb->wrap_position != null());		HX_STACK_VAR(tmp54,"tmp54");
														HX_STACK_LINE(6058)
														if ((tmp54)){
															HX_STACK_LINE(6058)
															::zpp_nape::geom::ZPP_Vec2 tmp55 = arb->wrap_position->zpp_inner;		HX_STACK_VAR(tmp55,"tmp55");
															HX_STACK_LINE(6058)
															tmp55->_immutable = false;
														}
													}
													HX_STACK_LINE(6060)
													bool pact = arb->active;		HX_STACK_VAR(pact,"pact");
													HX_STACK_LINE(6061)
													arb->active = true;
													HX_STACK_LINE(6062)
													bool emptycontacts = false;		HX_STACK_VAR(emptycontacts,"emptycontacts");
													HX_STACK_LINE(6065)
													::nape::callbacks::PreCallback tmp54 = this->precb;		HX_STACK_VAR(tmp54,"tmp54");
													HX_STACK_LINE(6065)
													tmp54->zpp_inner->pre_arbiter = arb;
													HX_STACK_LINE(6066)
													::nape::callbacks::PreCallback tmp55 = this->precb;		HX_STACK_VAR(tmp55,"tmp55");
													HX_STACK_LINE(6066)
													tmp55->zpp_inner->set = callbackset;
													HX_STACK_LINE(6067)
													{
														HX_STACK_LINE(6068)
														::zpp_nape::util::ZNPList_ZPP_InteractionListener tmp56 = this->prelisteners;		HX_STACK_VAR(tmp56,"tmp56");
														HX_STACK_LINE(6068)
														::zpp_nape::util::ZNPNode_ZPP_InteractionListener cx_ite2 = tmp56->head;		HX_STACK_VAR(cx_ite2,"cx_ite2");
														HX_STACK_LINE(6069)
														while((true)){
															HX_STACK_LINE(6069)
															bool tmp57 = (cx_ite2 != null());		HX_STACK_VAR(tmp57,"tmp57");
															HX_STACK_LINE(6069)
															bool tmp58 = !(tmp57);		HX_STACK_VAR(tmp58,"tmp58");
															HX_STACK_LINE(6069)
															if ((tmp58)){
																HX_STACK_LINE(6069)
																break;
															}
															HX_STACK_LINE(6070)
															::zpp_nape::callbacks::ZPP_InteractionListener listener = cx_ite2->elt;		HX_STACK_VAR(listener,"listener");
															HX_STACK_LINE(6071)
															{
																HX_STACK_LINE(6072)
																::nape::callbacks::PreCallback tmp59 = this->precb;		HX_STACK_VAR(tmp59,"tmp59");
																HX_STACK_LINE(6072)
																tmp59->zpp_inner->listener = listener;
																HX_STACK_LINE(6099)
																{
																	HX_STACK_LINE(6099)
																	::nape::callbacks::PreCallback tmp60 = this->precb;		HX_STACK_VAR(tmp60,"tmp60");
																	HX_STACK_LINE(6099)
																	::zpp_nape::callbacks::ZPP_Callback cb = tmp60->zpp_inner;		HX_STACK_VAR(cb,"cb");
																	HX_STACK_LINE(6099)
																	::zpp_nape::phys::ZPP_Interactor o1 = callbackset->int1;		HX_STACK_VAR(o1,"o1");
																	HX_STACK_LINE(6099)
																	::zpp_nape::phys::ZPP_Interactor o2 = callbackset->int2;		HX_STACK_VAR(o2,"o2");
																	HX_STACK_LINE(6099)
																	bool tmp61;		HX_STACK_VAR(tmp61,"tmp61");
																	HX_STACK_LINE(6099)
																	{
																		HX_STACK_LINE(6099)
																		::zpp_nape::callbacks::ZPP_OptionType _this = listener->options1;		HX_STACK_VAR(_this,"_this");
																		HX_STACK_LINE(6099)
																		::zpp_nape::util::ZNPList_ZPP_CbType xs = o1->cbTypes;		HX_STACK_VAR(xs,"xs");
																		HX_STACK_LINE(6099)
																		::zpp_nape::util::ZNPList_ZPP_CbType tmp62 = xs;		HX_STACK_VAR(tmp62,"tmp62");
																		HX_STACK_LINE(6099)
																		::zpp_nape::util::ZNPList_ZPP_CbType tmp63 = _this->includes;		HX_STACK_VAR(tmp63,"tmp63");
																		HX_STACK_LINE(6099)
																		::zpp_nape::util::ZNPList_ZPP_CbType tmp64 = tmp62;		HX_STACK_VAR(tmp64,"tmp64");
																		HX_STACK_LINE(6099)
																		::zpp_nape::util::ZNPList_ZPP_CbType tmp65 = tmp63;		HX_STACK_VAR(tmp65,"tmp65");
																		HX_STACK_LINE(6099)
																		::zpp_nape::util::ZNPList_ZPP_CbType tmp66 = tmp64;		HX_STACK_VAR(tmp66,"tmp66");
																		HX_STACK_LINE(6099)
																		::zpp_nape::util::ZNPList_ZPP_CbType tmp67 = tmp65;		HX_STACK_VAR(tmp67,"tmp67");
																		HX_STACK_LINE(6099)
																		bool tmp68 = _this->nonemptyintersection(tmp66,tmp67);		HX_STACK_VAR(tmp68,"tmp68");
																		HX_STACK_LINE(6099)
																		bool tmp69 = tmp68;		HX_STACK_VAR(tmp69,"tmp69");
																		HX_STACK_LINE(6099)
																		bool tmp70 = tmp69;		HX_STACK_VAR(tmp70,"tmp70");
																		HX_STACK_LINE(6099)
																		if ((tmp70)){
																			HX_STACK_LINE(6099)
																			::zpp_nape::util::ZNPList_ZPP_CbType tmp71 = xs;		HX_STACK_VAR(tmp71,"tmp71");
																			HX_STACK_LINE(6099)
																			::zpp_nape::util::ZNPList_ZPP_CbType tmp72 = _this->excludes;		HX_STACK_VAR(tmp72,"tmp72");
																			HX_STACK_LINE(6099)
																			::zpp_nape::util::ZNPList_ZPP_CbType tmp73 = tmp71;		HX_STACK_VAR(tmp73,"tmp73");
																			HX_STACK_LINE(6099)
																			::zpp_nape::util::ZNPList_ZPP_CbType tmp74 = tmp72;		HX_STACK_VAR(tmp74,"tmp74");
																			HX_STACK_LINE(6099)
																			::zpp_nape::util::ZNPList_ZPP_CbType tmp75 = tmp73;		HX_STACK_VAR(tmp75,"tmp75");
																			HX_STACK_LINE(6099)
																			::zpp_nape::util::ZNPList_ZPP_CbType tmp76 = tmp74;		HX_STACK_VAR(tmp76,"tmp76");
																			HX_STACK_LINE(6099)
																			bool tmp77 = _this->nonemptyintersection(tmp75,tmp76);		HX_STACK_VAR(tmp77,"tmp77");
																			HX_STACK_LINE(6099)
																			bool tmp78 = tmp77;		HX_STACK_VAR(tmp78,"tmp78");
																			HX_STACK_LINE(6099)
																			bool tmp79 = tmp78;		HX_STACK_VAR(tmp79,"tmp79");
																			HX_STACK_LINE(6099)
																			bool tmp80 = tmp79;		HX_STACK_VAR(tmp80,"tmp80");
																			HX_STACK_LINE(6099)
																			bool tmp81 = tmp80;		HX_STACK_VAR(tmp81,"tmp81");
																			HX_STACK_LINE(6099)
																			tmp61 = !(tmp81);
																		}
																		else{
																			HX_STACK_LINE(6099)
																			tmp61 = false;
																		}
																	}
																	HX_STACK_LINE(6099)
																	bool tmp62;		HX_STACK_VAR(tmp62,"tmp62");
																	HX_STACK_LINE(6099)
																	if ((tmp61)){
																		HX_STACK_LINE(6099)
																		::zpp_nape::callbacks::ZPP_OptionType _this = listener->options2;		HX_STACK_VAR(_this,"_this");
																		HX_STACK_LINE(6099)
																		::zpp_nape::util::ZNPList_ZPP_CbType xs = o2->cbTypes;		HX_STACK_VAR(xs,"xs");
																		HX_STACK_LINE(6099)
																		::zpp_nape::util::ZNPList_ZPP_CbType tmp63 = xs;		HX_STACK_VAR(tmp63,"tmp63");
																		HX_STACK_LINE(6099)
																		::zpp_nape::util::ZNPList_ZPP_CbType tmp64 = _this->includes;		HX_STACK_VAR(tmp64,"tmp64");
																		HX_STACK_LINE(6099)
																		::zpp_nape::util::ZNPList_ZPP_CbType tmp65 = tmp63;		HX_STACK_VAR(tmp65,"tmp65");
																		HX_STACK_LINE(6099)
																		::zpp_nape::util::ZNPList_ZPP_CbType tmp66 = tmp64;		HX_STACK_VAR(tmp66,"tmp66");
																		HX_STACK_LINE(6099)
																		::zpp_nape::util::ZNPList_ZPP_CbType tmp67 = tmp65;		HX_STACK_VAR(tmp67,"tmp67");
																		HX_STACK_LINE(6099)
																		::zpp_nape::util::ZNPList_ZPP_CbType tmp68 = tmp66;		HX_STACK_VAR(tmp68,"tmp68");
																		HX_STACK_LINE(6099)
																		bool tmp69 = _this->nonemptyintersection(tmp67,tmp68);		HX_STACK_VAR(tmp69,"tmp69");
																		HX_STACK_LINE(6099)
																		bool tmp70 = tmp69;		HX_STACK_VAR(tmp70,"tmp70");
																		HX_STACK_LINE(6099)
																		bool tmp71 = tmp70;		HX_STACK_VAR(tmp71,"tmp71");
																		HX_STACK_LINE(6099)
																		if ((tmp71)){
																			HX_STACK_LINE(6099)
																			::zpp_nape::util::ZNPList_ZPP_CbType tmp72 = xs;		HX_STACK_VAR(tmp72,"tmp72");
																			HX_STACK_LINE(6099)
																			::zpp_nape::util::ZNPList_ZPP_CbType tmp73 = _this->excludes;		HX_STACK_VAR(tmp73,"tmp73");
																			HX_STACK_LINE(6099)
																			::zpp_nape::util::ZNPList_ZPP_CbType tmp74 = tmp72;		HX_STACK_VAR(tmp74,"tmp74");
																			HX_STACK_LINE(6099)
																			::zpp_nape::util::ZNPList_ZPP_CbType tmp75 = tmp73;		HX_STACK_VAR(tmp75,"tmp75");
																			HX_STACK_LINE(6099)
																			::zpp_nape::util::ZNPList_ZPP_CbType tmp76 = tmp74;		HX_STACK_VAR(tmp76,"tmp76");
																			HX_STACK_LINE(6099)
																			::zpp_nape::util::ZNPList_ZPP_CbType tmp77 = tmp75;		HX_STACK_VAR(tmp77,"tmp77");
																			HX_STACK_LINE(6099)
																			bool tmp78 = _this->nonemptyintersection(tmp76,tmp77);		HX_STACK_VAR(tmp78,"tmp78");
																			HX_STACK_LINE(6099)
																			bool tmp79 = tmp78;		HX_STACK_VAR(tmp79,"tmp79");
																			HX_STACK_LINE(6099)
																			bool tmp80 = tmp79;		HX_STACK_VAR(tmp80,"tmp80");
																			HX_STACK_LINE(6099)
																			bool tmp81 = tmp80;		HX_STACK_VAR(tmp81,"tmp81");
																			HX_STACK_LINE(6099)
																			bool tmp82 = tmp81;		HX_STACK_VAR(tmp82,"tmp82");
																			HX_STACK_LINE(6099)
																			tmp62 = !(tmp82);
																		}
																		else{
																			HX_STACK_LINE(6099)
																			tmp62 = false;
																		}
																	}
																	else{
																		HX_STACK_LINE(6099)
																		tmp62 = false;
																	}
																	HX_STACK_LINE(6099)
																	if ((tmp62)){
																		HX_STACK_LINE(6099)
																		cb->int1 = o1;
																		HX_STACK_LINE(6099)
																		cb->int2 = o2;
																	}
																	else{
																		HX_STACK_LINE(6099)
																		cb->int1 = o2;
																		HX_STACK_LINE(6099)
																		cb->int2 = o1;
																	}
																}
																HX_STACK_LINE(6100)
																::zpp_nape::phys::ZPP_Interactor tmp60 = i1;		HX_STACK_VAR(tmp60,"tmp60");
																HX_STACK_LINE(6100)
																::nape::callbacks::PreCallback tmp61 = this->precb;		HX_STACK_VAR(tmp61,"tmp61");
																HX_STACK_LINE(6100)
																::zpp_nape::phys::ZPP_Interactor tmp62 = tmp61->zpp_inner->int1;		HX_STACK_VAR(tmp62,"tmp62");
																HX_STACK_LINE(6100)
																bool tmp63 = (tmp60 != tmp62);		HX_STACK_VAR(tmp63,"tmp63");
																HX_STACK_LINE(6100)
																::nape::callbacks::PreCallback tmp64 = this->precb;		HX_STACK_VAR(tmp64,"tmp64");
																HX_STACK_LINE(6100)
																tmp64->zpp_inner->pre_swapped = tmp63;
																HX_STACK_LINE(6101)
																::nape::callbacks::PreCallback tmp65 = this->precb;		HX_STACK_VAR(tmp65,"tmp65");
																HX_STACK_LINE(6101)
																::nape::callbacks::PreFlag tmp66 = listener->handlerp(tmp65);		HX_STACK_VAR(tmp66,"tmp66");
																HX_STACK_LINE(6101)
																::nape::callbacks::PreFlag ret1 = tmp66;		HX_STACK_VAR(ret1,"ret1");
																HX_STACK_LINE(6102)
																bool tmp67 = (ret1 != null());		HX_STACK_VAR(tmp67,"tmp67");
																HX_STACK_LINE(6102)
																if ((tmp67)){
																	HX_STACK_LINE(6103)
																	::nape::callbacks::PreFlag tmp68 = ret1;		HX_STACK_VAR(tmp68,"tmp68");
																	HX_STACK_LINE(6103)
																	::nape::callbacks::PreFlag tmp69;		HX_STACK_VAR(tmp69,"tmp69");
																	HX_STACK_LINE(6103)
																	{
																		HX_STACK_LINE(6103)
																		::nape::callbacks::PreFlag tmp70 = ::zpp_nape::util::ZPP_Flags_obj::PreFlag_ACCEPT;		HX_STACK_VAR(tmp70,"tmp70");
																		HX_STACK_LINE(6103)
																		bool tmp71 = (tmp70 == null());		HX_STACK_VAR(tmp71,"tmp71");
																		HX_STACK_LINE(6103)
																		if ((tmp71)){
																			HX_STACK_LINE(6103)
																			::zpp_nape::util::ZPP_Flags_obj::internal = true;
																			HX_STACK_LINE(6103)
																			::nape::callbacks::PreFlag tmp72 = ::nape::callbacks::PreFlag_obj::__new();		HX_STACK_VAR(tmp72,"tmp72");
																			HX_STACK_LINE(6103)
																			::zpp_nape::util::ZPP_Flags_obj::PreFlag_ACCEPT = tmp72;
																			HX_STACK_LINE(6103)
																			::zpp_nape::util::ZPP_Flags_obj::internal = false;
																		}
																		HX_STACK_LINE(6103)
																		tmp69 = ::zpp_nape::util::ZPP_Flags_obj::PreFlag_ACCEPT;
																	}
																	HX_STACK_LINE(6103)
																	bool tmp70 = (tmp68 == tmp69);		HX_STACK_VAR(tmp70,"tmp70");
																	HX_STACK_LINE(6103)
																	int tmp71;		HX_STACK_VAR(tmp71,"tmp71");
																	HX_STACK_LINE(6103)
																	if ((tmp70)){
																		HX_STACK_LINE(6103)
																		int tmp72 = ::zpp_nape::util::ZPP_Flags_obj::id_ImmState_ACCEPT;		HX_STACK_VAR(tmp72,"tmp72");
																		HX_STACK_LINE(6103)
																		int tmp73 = ::zpp_nape::util::ZPP_Flags_obj::id_ImmState_ALWAYS;		HX_STACK_VAR(tmp73,"tmp73");
																		HX_STACK_LINE(6103)
																		tmp71 = (int(tmp72) | int(tmp73));
																	}
																	else{
																		HX_STACK_LINE(6103)
																		::nape::callbacks::PreFlag tmp72 = ret1;		HX_STACK_VAR(tmp72,"tmp72");
																		HX_STACK_LINE(6103)
																		::nape::callbacks::PreFlag tmp73;		HX_STACK_VAR(tmp73,"tmp73");
																		HX_STACK_LINE(6103)
																		{
																			HX_STACK_LINE(6103)
																			::nape::callbacks::PreFlag tmp74 = ::zpp_nape::util::ZPP_Flags_obj::PreFlag_ACCEPT_ONCE;		HX_STACK_VAR(tmp74,"tmp74");
																			HX_STACK_LINE(6103)
																			bool tmp75 = (tmp74 == null());		HX_STACK_VAR(tmp75,"tmp75");
																			HX_STACK_LINE(6103)
																			if ((tmp75)){
																				HX_STACK_LINE(6103)
																				::zpp_nape::util::ZPP_Flags_obj::internal = true;
																				HX_STACK_LINE(6103)
																				::nape::callbacks::PreFlag tmp76 = ::nape::callbacks::PreFlag_obj::__new();		HX_STACK_VAR(tmp76,"tmp76");
																				HX_STACK_LINE(6103)
																				::zpp_nape::util::ZPP_Flags_obj::PreFlag_ACCEPT_ONCE = tmp76;
																				HX_STACK_LINE(6103)
																				::zpp_nape::util::ZPP_Flags_obj::internal = false;
																			}
																			HX_STACK_LINE(6103)
																			tmp73 = ::zpp_nape::util::ZPP_Flags_obj::PreFlag_ACCEPT_ONCE;
																		}
																		HX_STACK_LINE(6103)
																		bool tmp74 = (tmp72 == tmp73);		HX_STACK_VAR(tmp74,"tmp74");
																		HX_STACK_LINE(6103)
																		if ((tmp74)){
																			HX_STACK_LINE(6103)
																			tmp71 = ::zpp_nape::util::ZPP_Flags_obj::id_ImmState_ACCEPT;
																		}
																		else{
																			HX_STACK_LINE(6103)
																			::nape::callbacks::PreFlag tmp75 = ret1;		HX_STACK_VAR(tmp75,"tmp75");
																			HX_STACK_LINE(6103)
																			::nape::callbacks::PreFlag tmp76;		HX_STACK_VAR(tmp76,"tmp76");
																			HX_STACK_LINE(6103)
																			{
																				HX_STACK_LINE(6103)
																				::nape::callbacks::PreFlag tmp77 = ::zpp_nape::util::ZPP_Flags_obj::PreFlag_IGNORE;		HX_STACK_VAR(tmp77,"tmp77");
																				HX_STACK_LINE(6103)
																				bool tmp78 = (tmp77 == null());		HX_STACK_VAR(tmp78,"tmp78");
																				HX_STACK_LINE(6103)
																				if ((tmp78)){
																					HX_STACK_LINE(6103)
																					::zpp_nape::util::ZPP_Flags_obj::internal = true;
																					HX_STACK_LINE(6103)
																					::nape::callbacks::PreFlag tmp79 = ::nape::callbacks::PreFlag_obj::__new();		HX_STACK_VAR(tmp79,"tmp79");
																					HX_STACK_LINE(6103)
																					::zpp_nape::util::ZPP_Flags_obj::PreFlag_IGNORE = tmp79;
																					HX_STACK_LINE(6103)
																					::zpp_nape::util::ZPP_Flags_obj::internal = false;
																				}
																				HX_STACK_LINE(6103)
																				tmp76 = ::zpp_nape::util::ZPP_Flags_obj::PreFlag_IGNORE;
																			}
																			HX_STACK_LINE(6103)
																			bool tmp77 = (tmp75 == tmp76);		HX_STACK_VAR(tmp77,"tmp77");
																			HX_STACK_LINE(6103)
																			if ((tmp77)){
																				HX_STACK_LINE(6103)
																				int tmp78 = ::zpp_nape::util::ZPP_Flags_obj::id_ImmState_IGNORE;		HX_STACK_VAR(tmp78,"tmp78");
																				HX_STACK_LINE(6103)
																				int tmp79 = ::zpp_nape::util::ZPP_Flags_obj::id_ImmState_ALWAYS;		HX_STACK_VAR(tmp79,"tmp79");
																				HX_STACK_LINE(6103)
																				tmp71 = (int(tmp78) | int(tmp79));
																			}
																			else{
																				HX_STACK_LINE(6103)
																				tmp71 = ::zpp_nape::util::ZPP_Flags_obj::id_ImmState_IGNORE;
																			}
																		}
																	}
																	HX_STACK_LINE(6103)
																	arb->immState = tmp71;
																}
															}
															HX_STACK_LINE(6106)
															cx_ite2 = cx_ite2->next;
														}
													}
													HX_STACK_LINE(6110)
													{
														HX_STACK_LINE(6110)
														arb->_mutable = false;
														HX_STACK_LINE(6110)
														bool tmp56 = (arb->wrap_position != null());		HX_STACK_VAR(tmp56,"tmp56");
														HX_STACK_LINE(6110)
														if ((tmp56)){
															HX_STACK_LINE(6110)
															::zpp_nape::geom::ZPP_Vec2 tmp57 = arb->wrap_position->zpp_inner;		HX_STACK_VAR(tmp57,"tmp57");
															HX_STACK_LINE(6110)
															tmp57->_immutable = true;
														}
													}
													HX_STACK_LINE(6112)
													arb->active = pact;
													HX_STACK_LINE(6113)
													bool tmp56 = (callbackset != null());		HX_STACK_VAR(tmp56,"tmp56");
													HX_STACK_LINE(6113)
													if ((tmp56)){
														HX_STACK_LINE(6115)
														::zpp_nape::util::ZNPList_ZPP_InteractionListener tmp57 = this->prelisteners;		HX_STACK_VAR(tmp57,"tmp57");
														HX_STACK_LINE(6115)
														::zpp_nape::util::ZNPNode_ZPP_InteractionListener cx_ite2 = tmp57->head;		HX_STACK_VAR(cx_ite2,"cx_ite2");
														HX_STACK_LINE(6116)
														while((true)){
															HX_STACK_LINE(6116)
															bool tmp58 = (cx_ite2 != null());		HX_STACK_VAR(tmp58,"tmp58");
															HX_STACK_LINE(6116)
															bool tmp59 = !(tmp58);		HX_STACK_VAR(tmp59,"tmp59");
															HX_STACK_LINE(6116)
															if ((tmp59)){
																HX_STACK_LINE(6116)
																break;
															}
															HX_STACK_LINE(6117)
															::zpp_nape::callbacks::ZPP_InteractionListener listener = cx_ite2->elt;		HX_STACK_VAR(listener,"listener");
															HX_STACK_LINE(6118)
															{
																HX_STACK_LINE(6119)
																int tmp60 = listener->itype;		HX_STACK_VAR(tmp60,"tmp60");
																HX_STACK_LINE(6119)
																int tmp61 = ::zpp_nape::util::ZPP_Flags_obj::id_InteractionType_ANY;		HX_STACK_VAR(tmp61,"tmp61");
																HX_STACK_LINE(6119)
																bool tmp62 = (tmp60 == tmp61);		HX_STACK_VAR(tmp62,"tmp62");
																HX_STACK_LINE(6119)
																if ((tmp62)){
																	HX_STACK_LINE(6120)
																	callbackset->COLLISIONstate = arb->immState;
																	HX_STACK_LINE(6121)
																	callbackset->SENSORstate = arb->immState;
																	HX_STACK_LINE(6122)
																	callbackset->FLUIDstate = arb->immState;
																}
																else{
																	HX_STACK_LINE(6124)
																	callbackset->FLUIDstate = arb->immState;
																}
															}
															HX_STACK_LINE(6126)
															cx_ite2 = cx_ite2->next;
														}
													}
												}
												else{
													HX_STACK_LINE(6131)
													bool tmp52 = (callbackset == null());		HX_STACK_VAR(tmp52,"tmp52");
													HX_STACK_LINE(6131)
													if ((tmp52)){
														HX_STACK_LINE(6132)
														int tmp53 = arb->immState;		HX_STACK_VAR(tmp53,"tmp53");
														HX_STACK_LINE(6132)
														int tmp54 = ::zpp_nape::util::ZPP_Flags_obj::id_ImmState_ALWAYS;		HX_STACK_VAR(tmp54,"tmp54");
														HX_STACK_LINE(6132)
														int tmp55 = (int(tmp53) & int(tmp54));		HX_STACK_VAR(tmp55,"tmp55");
														HX_STACK_LINE(6132)
														bool tmp56 = (tmp55 == (int)0);		HX_STACK_VAR(tmp56,"tmp56");
														HX_STACK_LINE(6132)
														if ((tmp56)){
															HX_STACK_LINE(6132)
															int tmp57 = ::zpp_nape::util::ZPP_Flags_obj::id_ImmState_ACCEPT;		HX_STACK_VAR(tmp57,"tmp57");
															HX_STACK_LINE(6132)
															arb->immState = tmp57;
														}
													}
													else{
														HX_STACK_LINE(6134)
														arb->immState = callbackset->FLUIDstate;
													}
												}
											}
											HX_STACK_LINE(6136)
											cx_ite1 = cx_ite1->next;
										}
									}
									HX_STACK_LINE(6140)
									cx_ite = cx_ite->next;
								}
							}
							HX_STACK_LINE(6143)
							bool tmp35 = anyimpure;		HX_STACK_VAR(tmp35,"tmp35");
							HX_STACK_LINE(6143)
							bool tmp36;		HX_STACK_VAR(tmp36,"tmp36");
							HX_STACK_LINE(6143)
							if ((tmp35)){
								HX_STACK_LINE(6143)
								int tmp37 = arb->immState;		HX_STACK_VAR(tmp37,"tmp37");
								HX_STACK_LINE(6143)
								int tmp38 = ::zpp_nape::util::ZPP_Flags_obj::id_ImmState_ALWAYS;		HX_STACK_VAR(tmp38,"tmp38");
								HX_STACK_LINE(6143)
								int tmp39 = tmp38;		HX_STACK_VAR(tmp39,"tmp39");
								HX_STACK_LINE(6143)
								int tmp40 = (int(tmp37) & int(tmp39));		HX_STACK_VAR(tmp40,"tmp40");
								HX_STACK_LINE(6143)
								int tmp41 = tmp40;		HX_STACK_VAR(tmp41,"tmp41");
								HX_STACK_LINE(6143)
								tmp36 = (tmp41 == (int)0);
							}
							else{
								HX_STACK_LINE(6143)
								tmp36 = false;
							}
							HX_STACK_LINE(6143)
							if ((tmp36)){
								HX_STACK_LINE(6145)
								int tmp37 = arb->b1->type;		HX_STACK_VAR(tmp37,"tmp37");
								HX_STACK_LINE(6145)
								int tmp38 = ::zpp_nape::util::ZPP_Flags_obj::id_BodyType_DYNAMIC;		HX_STACK_VAR(tmp38,"tmp38");
								HX_STACK_LINE(6145)
								bool tmp39 = (tmp37 == tmp38);		HX_STACK_VAR(tmp39,"tmp39");
								HX_STACK_LINE(6145)
								if ((tmp39)){
									HX_STACK_LINE(6146)
									::zpp_nape::phys::ZPP_Body o = arb->b1;		HX_STACK_VAR(o,"o");
									HX_STACK_LINE(6155)
									bool tmp40 = o->world;		HX_STACK_VAR(tmp40,"tmp40");
									HX_STACK_LINE(6155)
									bool tmp41 = !(tmp40);		HX_STACK_VAR(tmp41,"tmp41");
									HX_STACK_LINE(6155)
									if ((tmp41)){
										HX_STACK_LINE(6164)
										int tmp42 = this->stamp;		HX_STACK_VAR(tmp42,"tmp42");
										HX_STACK_LINE(6164)
										bool tmp43 = this->midstep;		HX_STACK_VAR(tmp43,"tmp43");
										HX_STACK_LINE(6164)
										int tmp44;		HX_STACK_VAR(tmp44,"tmp44");
										HX_STACK_LINE(6164)
										if ((tmp43)){
											HX_STACK_LINE(6164)
											tmp44 = (int)0;
										}
										else{
											HX_STACK_LINE(6164)
											tmp44 = (int)1;
										}
										HX_STACK_LINE(6164)
										int tmp45 = (tmp42 + tmp44);		HX_STACK_VAR(tmp45,"tmp45");
										HX_STACK_LINE(6164)
										o->component->waket = tmp45;
										HX_STACK_LINE(6165)
										int tmp46 = o->type;		HX_STACK_VAR(tmp46,"tmp46");
										HX_STACK_LINE(6165)
										int tmp47 = ::zpp_nape::util::ZPP_Flags_obj::id_BodyType_KINEMATIC;		HX_STACK_VAR(tmp47,"tmp47");
										HX_STACK_LINE(6165)
										bool tmp48 = (tmp46 == tmp47);		HX_STACK_VAR(tmp48,"tmp48");
										HX_STACK_LINE(6165)
										if ((tmp48)){
											HX_STACK_LINE(6165)
											o->kinematicDelaySleep = true;
										}
										HX_STACK_LINE(6166)
										bool tmp49 = o->component->sleeping;		HX_STACK_VAR(tmp49,"tmp49");
										HX_STACK_LINE(6166)
										if ((tmp49)){
											HX_STACK_LINE(6167)
											::zpp_nape::phys::ZPP_Body tmp50 = o;		HX_STACK_VAR(tmp50,"tmp50");
											HX_STACK_LINE(6167)
											this->really_wake(tmp50,false);
										}
									}
								}
								HX_STACK_LINE(6171)
								int tmp40 = arb->b1->type;		HX_STACK_VAR(tmp40,"tmp40");
								HX_STACK_LINE(6171)
								int tmp41 = ::zpp_nape::util::ZPP_Flags_obj::id_BodyType_DYNAMIC;		HX_STACK_VAR(tmp41,"tmp41");
								HX_STACK_LINE(6171)
								bool tmp42 = (tmp40 == tmp41);		HX_STACK_VAR(tmp42,"tmp42");
								HX_STACK_LINE(6171)
								if ((tmp42)){
									HX_STACK_LINE(6172)
									::zpp_nape::phys::ZPP_Body o = arb->b2;		HX_STACK_VAR(o,"o");
									HX_STACK_LINE(6181)
									bool tmp43 = o->world;		HX_STACK_VAR(tmp43,"tmp43");
									HX_STACK_LINE(6181)
									bool tmp44 = !(tmp43);		HX_STACK_VAR(tmp44,"tmp44");
									HX_STACK_LINE(6181)
									if ((tmp44)){
										HX_STACK_LINE(6190)
										int tmp45 = this->stamp;		HX_STACK_VAR(tmp45,"tmp45");
										HX_STACK_LINE(6190)
										bool tmp46 = this->midstep;		HX_STACK_VAR(tmp46,"tmp46");
										HX_STACK_LINE(6190)
										int tmp47;		HX_STACK_VAR(tmp47,"tmp47");
										HX_STACK_LINE(6190)
										if ((tmp46)){
											HX_STACK_LINE(6190)
											tmp47 = (int)0;
										}
										else{
											HX_STACK_LINE(6190)
											tmp47 = (int)1;
										}
										HX_STACK_LINE(6190)
										int tmp48 = (tmp45 + tmp47);		HX_STACK_VAR(tmp48,"tmp48");
										HX_STACK_LINE(6190)
										o->component->waket = tmp48;
										HX_STACK_LINE(6191)
										int tmp49 = o->type;		HX_STACK_VAR(tmp49,"tmp49");
										HX_STACK_LINE(6191)
										int tmp50 = ::zpp_nape::util::ZPP_Flags_obj::id_BodyType_KINEMATIC;		HX_STACK_VAR(tmp50,"tmp50");
										HX_STACK_LINE(6191)
										bool tmp51 = (tmp49 == tmp50);		HX_STACK_VAR(tmp51,"tmp51");
										HX_STACK_LINE(6191)
										if ((tmp51)){
											HX_STACK_LINE(6191)
											o->kinematicDelaySleep = true;
										}
										HX_STACK_LINE(6192)
										bool tmp52 = o->component->sleeping;		HX_STACK_VAR(tmp52,"tmp52");
										HX_STACK_LINE(6192)
										if ((tmp52)){
											HX_STACK_LINE(6193)
											::zpp_nape::phys::ZPP_Body tmp53 = o;		HX_STACK_VAR(tmp53,"tmp53");
											HX_STACK_LINE(6193)
											this->really_wake(tmp53,false);
										}
									}
								}
							}
						}
						HX_STACK_LINE(6254)
						bool tmp26;		HX_STACK_VAR(tmp26,"tmp26");
						HX_STACK_LINE(6254)
						{
							HX_STACK_LINE(6254)
							int tmp27 = arb->immState;		HX_STACK_VAR(tmp27,"tmp27");
							HX_STACK_LINE(6254)
							int tmp28 = ::zpp_nape::util::ZPP_Flags_obj::id_ImmState_ACCEPT;		HX_STACK_VAR(tmp28,"tmp28");
							HX_STACK_LINE(6254)
							int tmp29 = tmp28;		HX_STACK_VAR(tmp29,"tmp29");
							HX_STACK_LINE(6254)
							int tmp30 = (int(tmp27) & int(tmp29));		HX_STACK_VAR(tmp30,"tmp30");
							HX_STACK_LINE(6254)
							int tmp31 = tmp30;		HX_STACK_VAR(tmp31,"tmp31");
							HX_STACK_LINE(6254)
							tmp26 = (tmp31 != (int)0);
						}
						HX_STACK_LINE(6254)
						if ((tmp26)){
							HX_STACK_LINE(6255)
							int tmp27 = arb->b1->type;		HX_STACK_VAR(tmp27,"tmp27");
							HX_STACK_LINE(6255)
							int tmp28 = ::zpp_nape::util::ZPP_Flags_obj::id_BodyType_DYNAMIC;		HX_STACK_VAR(tmp28,"tmp28");
							HX_STACK_LINE(6255)
							bool tmp29 = (tmp27 == tmp28);		HX_STACK_VAR(tmp29,"tmp29");
							HX_STACK_LINE(6255)
							bool tmp30;		HX_STACK_VAR(tmp30,"tmp30");
							HX_STACK_LINE(6255)
							if ((tmp29)){
								HX_STACK_LINE(6255)
								::zpp_nape::space::ZPP_Component tmp31 = arb->b1->component;		HX_STACK_VAR(tmp31,"tmp31");
								HX_STACK_LINE(6255)
								::zpp_nape::space::ZPP_Component tmp32 = tmp31;		HX_STACK_VAR(tmp32,"tmp32");
								HX_STACK_LINE(6255)
								tmp30 = tmp32->sleeping;
							}
							else{
								HX_STACK_LINE(6255)
								tmp30 = false;
							}
							HX_STACK_LINE(6255)
							if ((tmp30)){
								HX_STACK_LINE(6256)
								::zpp_nape::phys::ZPP_Body o = arb->b1;		HX_STACK_VAR(o,"o");
								HX_STACK_LINE(6265)
								bool tmp31 = o->world;		HX_STACK_VAR(tmp31,"tmp31");
								HX_STACK_LINE(6265)
								bool tmp32 = !(tmp31);		HX_STACK_VAR(tmp32,"tmp32");
								HX_STACK_LINE(6265)
								if ((tmp32)){
									HX_STACK_LINE(6274)
									int tmp33 = this->stamp;		HX_STACK_VAR(tmp33,"tmp33");
									HX_STACK_LINE(6274)
									bool tmp34 = this->midstep;		HX_STACK_VAR(tmp34,"tmp34");
									HX_STACK_LINE(6274)
									int tmp35;		HX_STACK_VAR(tmp35,"tmp35");
									HX_STACK_LINE(6274)
									if ((tmp34)){
										HX_STACK_LINE(6274)
										tmp35 = (int)0;
									}
									else{
										HX_STACK_LINE(6274)
										tmp35 = (int)1;
									}
									HX_STACK_LINE(6274)
									int tmp36 = (tmp33 + tmp35);		HX_STACK_VAR(tmp36,"tmp36");
									HX_STACK_LINE(6274)
									o->component->waket = tmp36;
									HX_STACK_LINE(6275)
									int tmp37 = o->type;		HX_STACK_VAR(tmp37,"tmp37");
									HX_STACK_LINE(6275)
									int tmp38 = ::zpp_nape::util::ZPP_Flags_obj::id_BodyType_KINEMATIC;		HX_STACK_VAR(tmp38,"tmp38");
									HX_STACK_LINE(6275)
									bool tmp39 = (tmp37 == tmp38);		HX_STACK_VAR(tmp39,"tmp39");
									HX_STACK_LINE(6275)
									if ((tmp39)){
										HX_STACK_LINE(6275)
										o->kinematicDelaySleep = true;
									}
									HX_STACK_LINE(6276)
									bool tmp40 = o->component->sleeping;		HX_STACK_VAR(tmp40,"tmp40");
									HX_STACK_LINE(6276)
									if ((tmp40)){
										HX_STACK_LINE(6277)
										::zpp_nape::phys::ZPP_Body tmp41 = o;		HX_STACK_VAR(tmp41,"tmp41");
										HX_STACK_LINE(6277)
										this->really_wake(tmp41,false);
									}
								}
							}
							HX_STACK_LINE(6281)
							int tmp31 = arb->b2->type;		HX_STACK_VAR(tmp31,"tmp31");
							HX_STACK_LINE(6281)
							int tmp32 = ::zpp_nape::util::ZPP_Flags_obj::id_BodyType_DYNAMIC;		HX_STACK_VAR(tmp32,"tmp32");
							HX_STACK_LINE(6281)
							bool tmp33 = (tmp31 == tmp32);		HX_STACK_VAR(tmp33,"tmp33");
							HX_STACK_LINE(6281)
							bool tmp34;		HX_STACK_VAR(tmp34,"tmp34");
							HX_STACK_LINE(6281)
							if ((tmp33)){
								HX_STACK_LINE(6281)
								::zpp_nape::space::ZPP_Component tmp35 = arb->b2->component;		HX_STACK_VAR(tmp35,"tmp35");
								HX_STACK_LINE(6281)
								::zpp_nape::space::ZPP_Component tmp36 = tmp35;		HX_STACK_VAR(tmp36,"tmp36");
								HX_STACK_LINE(6281)
								tmp34 = tmp36->sleeping;
							}
							else{
								HX_STACK_LINE(6281)
								tmp34 = false;
							}
							HX_STACK_LINE(6281)
							if ((tmp34)){
								HX_STACK_LINE(6282)
								::zpp_nape::phys::ZPP_Body o = arb->b2;		HX_STACK_VAR(o,"o");
								HX_STACK_LINE(6291)
								bool tmp35 = o->world;		HX_STACK_VAR(tmp35,"tmp35");
								HX_STACK_LINE(6291)
								bool tmp36 = !(tmp35);		HX_STACK_VAR(tmp36,"tmp36");
								HX_STACK_LINE(6291)
								if ((tmp36)){
									HX_STACK_LINE(6300)
									int tmp37 = this->stamp;		HX_STACK_VAR(tmp37,"tmp37");
									HX_STACK_LINE(6300)
									bool tmp38 = this->midstep;		HX_STACK_VAR(tmp38,"tmp38");
									HX_STACK_LINE(6300)
									int tmp39;		HX_STACK_VAR(tmp39,"tmp39");
									HX_STACK_LINE(6300)
									if ((tmp38)){
										HX_STACK_LINE(6300)
										tmp39 = (int)0;
									}
									else{
										HX_STACK_LINE(6300)
										tmp39 = (int)1;
									}
									HX_STACK_LINE(6300)
									int tmp40 = (tmp37 + tmp39);		HX_STACK_VAR(tmp40,"tmp40");
									HX_STACK_LINE(6300)
									o->component->waket = tmp40;
									HX_STACK_LINE(6301)
									int tmp41 = o->type;		HX_STACK_VAR(tmp41,"tmp41");
									HX_STACK_LINE(6301)
									int tmp42 = ::zpp_nape::util::ZPP_Flags_obj::id_BodyType_KINEMATIC;		HX_STACK_VAR(tmp42,"tmp42");
									HX_STACK_LINE(6301)
									bool tmp43 = (tmp41 == tmp42);		HX_STACK_VAR(tmp43,"tmp43");
									HX_STACK_LINE(6301)
									if ((tmp43)){
										HX_STACK_LINE(6301)
										o->kinematicDelaySleep = true;
									}
									HX_STACK_LINE(6302)
									bool tmp44 = o->component->sleeping;		HX_STACK_VAR(tmp44,"tmp44");
									HX_STACK_LINE(6302)
									if ((tmp44)){
										HX_STACK_LINE(6303)
										::zpp_nape::phys::ZPP_Body tmp45 = o;		HX_STACK_VAR(tmp45,"tmp45");
										HX_STACK_LINE(6303)
										this->really_wake(tmp45,false);
									}
								}
							}
						}
						HX_STACK_LINE(6308)
						bool tmp27 = arb->sleeping;		HX_STACK_VAR(tmp27,"tmp27");
						HX_STACK_LINE(6308)
						if ((tmp27)){
							HX_STACK_LINE(6309)
							arb->sleeping = false;
							HX_STACK_LINE(6310)
							{
								HX_STACK_LINE(6310)
								::zpp_nape::util::ZNPList_ZPP_FluidArbiter tmp28 = this->f_arbiters;		HX_STACK_VAR(tmp28,"tmp28");
								HX_STACK_LINE(6310)
								::zpp_nape::util::ZNPList_ZPP_FluidArbiter _this = tmp28;		HX_STACK_VAR(_this,"_this");
								HX_STACK_LINE(6310)
								::zpp_nape::util::ZNPNode_ZPP_FluidArbiter tmp29;		HX_STACK_VAR(tmp29,"tmp29");
								HX_STACK_LINE(6310)
								{
									HX_STACK_LINE(6310)
									::zpp_nape::util::ZNPNode_ZPP_FluidArbiter ret1;		HX_STACK_VAR(ret1,"ret1");
									HX_STACK_LINE(6310)
									{
										HX_STACK_LINE(6310)
										::zpp_nape::util::ZNPNode_ZPP_FluidArbiter tmp30 = ::zpp_nape::util::ZNPNode_ZPP_FluidArbiter_obj::zpp_pool;		HX_STACK_VAR(tmp30,"tmp30");
										HX_STACK_LINE(6310)
										bool tmp31 = (tmp30 == null());		HX_STACK_VAR(tmp31,"tmp31");
										HX_STACK_LINE(6310)
										if ((tmp31)){
											HX_STACK_LINE(6310)
											::zpp_nape::util::ZNPNode_ZPP_FluidArbiter tmp32 = ::zpp_nape::util::ZNPNode_ZPP_FluidArbiter_obj::__new();		HX_STACK_VAR(tmp32,"tmp32");
											HX_STACK_LINE(6310)
											ret1 = tmp32;
										}
										else{
											HX_STACK_LINE(6310)
											::zpp_nape::util::ZNPNode_ZPP_FluidArbiter tmp32 = ::zpp_nape::util::ZNPNode_ZPP_FluidArbiter_obj::zpp_pool;		HX_STACK_VAR(tmp32,"tmp32");
											HX_STACK_LINE(6310)
											ret1 = tmp32;
											HX_STACK_LINE(6310)
											::zpp_nape::util::ZNPNode_ZPP_FluidArbiter_obj::zpp_pool = ret1->next;
											HX_STACK_LINE(6310)
											ret1->next = null();
										}
										HX_STACK_LINE(6310)
										Dynamic();
									}
									HX_STACK_LINE(6310)
									ret1->elt = arb;
									HX_STACK_LINE(6310)
									tmp29 = ret1;
								}
								HX_STACK_LINE(6310)
								::zpp_nape::util::ZNPNode_ZPP_FluidArbiter temp = tmp29;		HX_STACK_VAR(temp,"temp");
								HX_STACK_LINE(6310)
								temp->next = _this->head;
								HX_STACK_LINE(6310)
								_this->head = temp;
								HX_STACK_LINE(6310)
								_this->modified = true;
								HX_STACK_LINE(6310)
								(_this->length)++;
								HX_STACK_LINE(6310)
								arb;
							}
						}
						HX_STACK_LINE(6312)
						tmp9 = arb;
					}
					else{
						HX_STACK_LINE(6314)
						bool tmp22 = first;		HX_STACK_VAR(tmp22,"tmp22");
						HX_STACK_LINE(6314)
						if ((tmp22)){
							HX_STACK_LINE(6315)
							{
								HX_STACK_LINE(6316)
								::zpp_nape::dynamics::ZPP_FluidArbiter o = arb;		HX_STACK_VAR(o,"o");
								HX_STACK_LINE(6326)
								::zpp_nape::dynamics::ZPP_FluidArbiter tmp23 = ::zpp_nape::dynamics::ZPP_FluidArbiter_obj::zpp_pool;		HX_STACK_VAR(tmp23,"tmp23");
								HX_STACK_LINE(6326)
								o->next = tmp23;
								HX_STACK_LINE(6327)
								::zpp_nape::dynamics::ZPP_FluidArbiter_obj::zpp_pool = o;
							}
							HX_STACK_LINE(6332)
							tmp9 = null();
						}
						else{
							HX_STACK_LINE(6334)
							tmp9 = arb;
						}
					}
				}
				else{
					HX_STACK_LINE(6336)
					tmp9 = arb;
				}
			}
			HX_STACK_LINE(5975)
			ret = tmp9;
		}
		else{
			HX_STACK_LINE(6339)
			bool tmp5 = (itype == (int)1);		HX_STACK_VAR(tmp5,"tmp5");
			HX_STACK_LINE(6339)
			if ((tmp5)){
				HX_STACK_LINE(6340)
				bool tmp6 = stat;		HX_STACK_VAR(tmp6,"tmp6");
				HX_STACK_LINE(6340)
				::zpp_nape::util::ZNPList_ZPP_ColArbiter tmp7;		HX_STACK_VAR(tmp7,"tmp7");
				HX_STACK_LINE(6340)
				if ((tmp6)){
					HX_STACK_LINE(6340)
					tmp7 = this->c_arbiters_true;
				}
				else{
					HX_STACK_LINE(6340)
					tmp7 = this->c_arbiters_false;
				}
				HX_STACK_LINE(6340)
				::zpp_nape::util::ZNPList_ZPP_ColArbiter carbs = tmp7;		HX_STACK_VAR(carbs,"carbs");
				HX_STACK_LINE(6341)
				bool tmp8 = (in_arb == null());		HX_STACK_VAR(tmp8,"tmp8");
				HX_STACK_LINE(6341)
				::zpp_nape::dynamics::ZPP_Arbiter tmp9;		HX_STACK_VAR(tmp9,"tmp9");
				HX_STACK_LINE(6341)
				if ((tmp8)){
					HX_STACK_LINE(6342)
					::zpp_nape::dynamics::ZPP_Arbiter ret1 = null();		HX_STACK_VAR(ret1,"ret1");
					HX_STACK_LINE(6343)
					int tmp10 = b1->arbiters->length;		HX_STACK_VAR(tmp10,"tmp10");
					HX_STACK_LINE(6343)
					int tmp11 = b2->arbiters->length;		HX_STACK_VAR(tmp11,"tmp11");
					HX_STACK_LINE(6343)
					bool tmp12 = (tmp10 < tmp11);		HX_STACK_VAR(tmp12,"tmp12");
					HX_STACK_LINE(6343)
					::zpp_nape::phys::ZPP_Body tmp13;		HX_STACK_VAR(tmp13,"tmp13");
					HX_STACK_LINE(6343)
					if ((tmp12)){
						HX_STACK_LINE(6343)
						tmp13 = b1;
					}
					else{
						HX_STACK_LINE(6343)
						tmp13 = b2;
					}
					HX_STACK_LINE(6343)
					::zpp_nape::phys::ZPP_Body b = tmp13;		HX_STACK_VAR(b,"b");
					HX_STACK_LINE(6344)
					{
						HX_STACK_LINE(6345)
						::zpp_nape::util::ZNPNode_ZPP_Arbiter tmp14 = b->arbiters->head;		HX_STACK_VAR(tmp14,"tmp14");
						HX_STACK_LINE(6345)
						::zpp_nape::util::ZNPNode_ZPP_Arbiter cx_ite = tmp14;		HX_STACK_VAR(cx_ite,"cx_ite");
						HX_STACK_LINE(6346)
						while((true)){
							HX_STACK_LINE(6346)
							bool tmp15 = (cx_ite != null());		HX_STACK_VAR(tmp15,"tmp15");
							HX_STACK_LINE(6346)
							bool tmp16 = !(tmp15);		HX_STACK_VAR(tmp16,"tmp16");
							HX_STACK_LINE(6346)
							if ((tmp16)){
								HX_STACK_LINE(6346)
								break;
							}
							HX_STACK_LINE(6347)
							::zpp_nape::dynamics::ZPP_Arbiter arb = cx_ite->elt;		HX_STACK_VAR(arb,"arb");
							HX_STACK_LINE(6348)
							{
								HX_STACK_LINE(6357)
								bool tmp17 = (arb->id == sa->id);		HX_STACK_VAR(tmp17,"tmp17");
								HX_STACK_LINE(6357)
								bool tmp18;		HX_STACK_VAR(tmp18,"tmp18");
								HX_STACK_LINE(6357)
								if ((tmp17)){
									HX_STACK_LINE(6357)
									tmp18 = (arb->di == sb->id);
								}
								else{
									HX_STACK_LINE(6357)
									tmp18 = false;
								}
								HX_STACK_LINE(6357)
								if ((tmp18)){
									HX_STACK_LINE(6358)
									ret1 = arb;
									HX_STACK_LINE(6359)
									break;
								}
							}
							HX_STACK_LINE(6362)
							cx_ite = cx_ite->next;
						}
					}
					HX_STACK_LINE(6365)
					tmp9 = ret1;
				}
				else{
					HX_STACK_LINE(6366)
					tmp9 = in_arb;
				}
				HX_STACK_LINE(6341)
				::zpp_nape::dynamics::ZPP_Arbiter xarb = tmp9;		HX_STACK_VAR(xarb,"xarb");
				HX_STACK_LINE(6367)
				bool tmp10 = (xarb == null());		HX_STACK_VAR(tmp10,"tmp10");
				HX_STACK_LINE(6367)
				bool first = tmp10;		HX_STACK_VAR(first,"first");
				HX_STACK_LINE(6368)
				::zpp_nape::dynamics::ZPP_ColArbiter arb;		HX_STACK_VAR(arb,"arb");
				HX_STACK_LINE(6369)
				bool swapped = false;		HX_STACK_VAR(swapped,"swapped");
				HX_STACK_LINE(6370)
				bool tmp11 = first;		HX_STACK_VAR(tmp11,"tmp11");
				HX_STACK_LINE(6370)
				if ((tmp11)){
					HX_STACK_LINE(6371)
					{
						HX_STACK_LINE(6372)
						::zpp_nape::dynamics::ZPP_ColArbiter tmp12 = ::zpp_nape::dynamics::ZPP_ColArbiter_obj::zpp_pool;		HX_STACK_VAR(tmp12,"tmp12");
						HX_STACK_LINE(6372)
						bool tmp13 = (tmp12 == null());		HX_STACK_VAR(tmp13,"tmp13");
						HX_STACK_LINE(6372)
						if ((tmp13)){
							HX_STACK_LINE(6373)
							::zpp_nape::dynamics::ZPP_ColArbiter tmp14 = ::zpp_nape::dynamics::ZPP_ColArbiter_obj::__new();		HX_STACK_VAR(tmp14,"tmp14");
							HX_STACK_LINE(6373)
							arb = tmp14;
						}
						else{
							HX_STACK_LINE(6379)
							::zpp_nape::dynamics::ZPP_ColArbiter tmp14 = ::zpp_nape::dynamics::ZPP_ColArbiter_obj::zpp_pool;		HX_STACK_VAR(tmp14,"tmp14");
							HX_STACK_LINE(6379)
							arb = tmp14;
							HX_STACK_LINE(6380)
							::zpp_nape::dynamics::ZPP_ColArbiter_obj::zpp_pool = arb->next;
							HX_STACK_LINE(6381)
							arb->next = null();
						}
						HX_STACK_LINE(6386)
						Dynamic();
					}
					HX_STACK_LINE(6388)
					arb->stat = stat;
				}
				else{
					HX_STACK_LINE(6391)
					bool tmp12 = (xarb->colarb == null());		HX_STACK_VAR(tmp12,"tmp12");
					HX_STACK_LINE(6391)
					if ((tmp12)){
						HX_STACK_LINE(6392)
						{
							HX_STACK_LINE(6392)
							xarb->cleared = true;
							HX_STACK_LINE(6392)
							bool tmp13 = true;		HX_STACK_VAR(tmp13,"tmp13");
							HX_STACK_LINE(6392)
							bool tmp14 = !(tmp13);		HX_STACK_VAR(tmp14,"tmp14");
							HX_STACK_LINE(6392)
							bool tmp15;		HX_STACK_VAR(tmp15,"tmp15");
							HX_STACK_LINE(6392)
							if ((tmp14)){
								HX_STACK_LINE(6392)
								tmp15 = (xarb->b2 == null());
							}
							else{
								HX_STACK_LINE(6392)
								tmp15 = true;
							}
							HX_STACK_LINE(6392)
							if ((tmp15)){
								HX_STACK_LINE(6392)
								::zpp_nape::util::ZNPList_ZPP_Arbiter tmp16 = xarb->b1->arbiters;		HX_STACK_VAR(tmp16,"tmp16");
								HX_STACK_LINE(6392)
								::zpp_nape::util::ZNPList_ZPP_Arbiter _this = tmp16;		HX_STACK_VAR(_this,"_this");
								HX_STACK_LINE(6392)
								{
									HX_STACK_LINE(6392)
									::zpp_nape::util::ZNPNode_ZPP_Arbiter pre = null();		HX_STACK_VAR(pre,"pre");
									HX_STACK_LINE(6392)
									::zpp_nape::util::ZNPNode_ZPP_Arbiter cur = _this->head;		HX_STACK_VAR(cur,"cur");
									HX_STACK_LINE(6392)
									bool ret1 = false;		HX_STACK_VAR(ret1,"ret1");
									HX_STACK_LINE(6392)
									while((true)){
										HX_STACK_LINE(6392)
										bool tmp17 = (cur != null());		HX_STACK_VAR(tmp17,"tmp17");
										HX_STACK_LINE(6392)
										bool tmp18 = !(tmp17);		HX_STACK_VAR(tmp18,"tmp18");
										HX_STACK_LINE(6392)
										if ((tmp18)){
											HX_STACK_LINE(6392)
											break;
										}
										HX_STACK_LINE(6392)
										bool tmp19 = (cur->elt == xarb);		HX_STACK_VAR(tmp19,"tmp19");
										HX_STACK_LINE(6392)
										if ((tmp19)){
											HX_STACK_LINE(6392)
											{
												HX_STACK_LINE(6392)
												::zpp_nape::util::ZNPNode_ZPP_Arbiter old;		HX_STACK_VAR(old,"old");
												HX_STACK_LINE(6392)
												::zpp_nape::util::ZNPNode_ZPP_Arbiter ret2;		HX_STACK_VAR(ret2,"ret2");
												HX_STACK_LINE(6392)
												bool tmp20 = (pre == null());		HX_STACK_VAR(tmp20,"tmp20");
												HX_STACK_LINE(6392)
												if ((tmp20)){
													HX_STACK_LINE(6392)
													old = _this->head;
													HX_STACK_LINE(6392)
													ret2 = old->next;
													HX_STACK_LINE(6392)
													_this->head = ret2;
													HX_STACK_LINE(6392)
													bool tmp21 = (_this->head == null());		HX_STACK_VAR(tmp21,"tmp21");
													HX_STACK_LINE(6392)
													if ((tmp21)){
														HX_STACK_LINE(6392)
														_this->pushmod = true;
													}
												}
												else{
													HX_STACK_LINE(6392)
													old = pre->next;
													HX_STACK_LINE(6392)
													ret2 = old->next;
													HX_STACK_LINE(6392)
													pre->next = ret2;
													HX_STACK_LINE(6392)
													bool tmp21 = (ret2 == null());		HX_STACK_VAR(tmp21,"tmp21");
													HX_STACK_LINE(6392)
													if ((tmp21)){
														HX_STACK_LINE(6392)
														_this->pushmod = true;
													}
												}
												HX_STACK_LINE(6392)
												{
													HX_STACK_LINE(6392)
													::zpp_nape::util::ZNPNode_ZPP_Arbiter o = old;		HX_STACK_VAR(o,"o");
													HX_STACK_LINE(6392)
													o->elt = null();
													HX_STACK_LINE(6392)
													::zpp_nape::util::ZNPNode_ZPP_Arbiter tmp21 = ::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool;		HX_STACK_VAR(tmp21,"tmp21");
													HX_STACK_LINE(6392)
													o->next = tmp21;
													HX_STACK_LINE(6392)
													::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool = o;
												}
												HX_STACK_LINE(6392)
												_this->modified = true;
												HX_STACK_LINE(6392)
												(_this->length)--;
												HX_STACK_LINE(6392)
												_this->pushmod = true;
												HX_STACK_LINE(6392)
												ret2;
											}
											HX_STACK_LINE(6392)
											ret1 = true;
											HX_STACK_LINE(6392)
											break;
										}
										HX_STACK_LINE(6392)
										pre = cur;
										HX_STACK_LINE(6392)
										cur = cur->next;
									}
									HX_STACK_LINE(6392)
									ret1;
								}
							}
							HX_STACK_LINE(6392)
							bool tmp16 = true;		HX_STACK_VAR(tmp16,"tmp16");
							HX_STACK_LINE(6392)
							bool tmp17 = !(tmp16);		HX_STACK_VAR(tmp17,"tmp17");
							HX_STACK_LINE(6392)
							bool tmp18;		HX_STACK_VAR(tmp18,"tmp18");
							HX_STACK_LINE(6392)
							if ((tmp17)){
								HX_STACK_LINE(6392)
								tmp18 = (xarb->b1 == null());
							}
							else{
								HX_STACK_LINE(6392)
								tmp18 = true;
							}
							HX_STACK_LINE(6392)
							if ((tmp18)){
								HX_STACK_LINE(6392)
								::zpp_nape::util::ZNPList_ZPP_Arbiter tmp19 = xarb->b2->arbiters;		HX_STACK_VAR(tmp19,"tmp19");
								HX_STACK_LINE(6392)
								::zpp_nape::util::ZNPList_ZPP_Arbiter _this = tmp19;		HX_STACK_VAR(_this,"_this");
								HX_STACK_LINE(6392)
								{
									HX_STACK_LINE(6392)
									::zpp_nape::util::ZNPNode_ZPP_Arbiter pre = null();		HX_STACK_VAR(pre,"pre");
									HX_STACK_LINE(6392)
									::zpp_nape::util::ZNPNode_ZPP_Arbiter cur = _this->head;		HX_STACK_VAR(cur,"cur");
									HX_STACK_LINE(6392)
									bool ret1 = false;		HX_STACK_VAR(ret1,"ret1");
									HX_STACK_LINE(6392)
									while((true)){
										HX_STACK_LINE(6392)
										bool tmp20 = (cur != null());		HX_STACK_VAR(tmp20,"tmp20");
										HX_STACK_LINE(6392)
										bool tmp21 = !(tmp20);		HX_STACK_VAR(tmp21,"tmp21");
										HX_STACK_LINE(6392)
										if ((tmp21)){
											HX_STACK_LINE(6392)
											break;
										}
										HX_STACK_LINE(6392)
										bool tmp22 = (cur->elt == xarb);		HX_STACK_VAR(tmp22,"tmp22");
										HX_STACK_LINE(6392)
										if ((tmp22)){
											HX_STACK_LINE(6392)
											{
												HX_STACK_LINE(6392)
												::zpp_nape::util::ZNPNode_ZPP_Arbiter old;		HX_STACK_VAR(old,"old");
												HX_STACK_LINE(6392)
												::zpp_nape::util::ZNPNode_ZPP_Arbiter ret2;		HX_STACK_VAR(ret2,"ret2");
												HX_STACK_LINE(6392)
												bool tmp23 = (pre == null());		HX_STACK_VAR(tmp23,"tmp23");
												HX_STACK_LINE(6392)
												if ((tmp23)){
													HX_STACK_LINE(6392)
													old = _this->head;
													HX_STACK_LINE(6392)
													ret2 = old->next;
													HX_STACK_LINE(6392)
													_this->head = ret2;
													HX_STACK_LINE(6392)
													bool tmp24 = (_this->head == null());		HX_STACK_VAR(tmp24,"tmp24");
													HX_STACK_LINE(6392)
													if ((tmp24)){
														HX_STACK_LINE(6392)
														_this->pushmod = true;
													}
												}
												else{
													HX_STACK_LINE(6392)
													old = pre->next;
													HX_STACK_LINE(6392)
													ret2 = old->next;
													HX_STACK_LINE(6392)
													pre->next = ret2;
													HX_STACK_LINE(6392)
													bool tmp24 = (ret2 == null());		HX_STACK_VAR(tmp24,"tmp24");
													HX_STACK_LINE(6392)
													if ((tmp24)){
														HX_STACK_LINE(6392)
														_this->pushmod = true;
													}
												}
												HX_STACK_LINE(6392)
												{
													HX_STACK_LINE(6392)
													::zpp_nape::util::ZNPNode_ZPP_Arbiter o = old;		HX_STACK_VAR(o,"o");
													HX_STACK_LINE(6392)
													o->elt = null();
													HX_STACK_LINE(6392)
													::zpp_nape::util::ZNPNode_ZPP_Arbiter tmp24 = ::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool;		HX_STACK_VAR(tmp24,"tmp24");
													HX_STACK_LINE(6392)
													o->next = tmp24;
													HX_STACK_LINE(6392)
													::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool = o;
												}
												HX_STACK_LINE(6392)
												_this->modified = true;
												HX_STACK_LINE(6392)
												(_this->length)--;
												HX_STACK_LINE(6392)
												_this->pushmod = true;
												HX_STACK_LINE(6392)
												ret2;
											}
											HX_STACK_LINE(6392)
											ret1 = true;
											HX_STACK_LINE(6392)
											break;
										}
										HX_STACK_LINE(6392)
										pre = cur;
										HX_STACK_LINE(6392)
										cur = cur->next;
									}
									HX_STACK_LINE(6392)
									ret1;
								}
							}
							HX_STACK_LINE(6392)
							bool tmp19 = (xarb->pair != null());		HX_STACK_VAR(tmp19,"tmp19");
							HX_STACK_LINE(6392)
							if ((tmp19)){
								HX_STACK_LINE(6392)
								xarb->pair->arb = null();
								HX_STACK_LINE(6392)
								xarb->pair = null();
							}
							HX_STACK_LINE(6392)
							xarb->active = false;
							HX_STACK_LINE(6392)
							::zpp_nape::util::ZNPList_ZPP_FluidArbiter tmp20 = this->f_arbiters;		HX_STACK_VAR(tmp20,"tmp20");
							HX_STACK_LINE(6392)
							tmp20->modified = true;
						}
						HX_STACK_LINE(6393)
						{
							HX_STACK_LINE(6394)
							::zpp_nape::dynamics::ZPP_ColArbiter tmp13 = ::zpp_nape::dynamics::ZPP_ColArbiter_obj::zpp_pool;		HX_STACK_VAR(tmp13,"tmp13");
							HX_STACK_LINE(6394)
							bool tmp14 = (tmp13 == null());		HX_STACK_VAR(tmp14,"tmp14");
							HX_STACK_LINE(6394)
							if ((tmp14)){
								HX_STACK_LINE(6395)
								::zpp_nape::dynamics::ZPP_ColArbiter tmp15 = ::zpp_nape::dynamics::ZPP_ColArbiter_obj::__new();		HX_STACK_VAR(tmp15,"tmp15");
								HX_STACK_LINE(6395)
								arb = tmp15;
							}
							else{
								HX_STACK_LINE(6401)
								::zpp_nape::dynamics::ZPP_ColArbiter tmp15 = ::zpp_nape::dynamics::ZPP_ColArbiter_obj::zpp_pool;		HX_STACK_VAR(tmp15,"tmp15");
								HX_STACK_LINE(6401)
								arb = tmp15;
								HX_STACK_LINE(6402)
								::zpp_nape::dynamics::ZPP_ColArbiter_obj::zpp_pool = arb->next;
								HX_STACK_LINE(6403)
								arb->next = null();
							}
							HX_STACK_LINE(6408)
							Dynamic();
						}
						HX_STACK_LINE(6410)
						arb->intchange = true;
						HX_STACK_LINE(6411)
						arb->stat = stat;
						HX_STACK_LINE(6412)
						first = true;
						HX_STACK_LINE(6413)
						swapped = true;
					}
					else{
						HX_STACK_LINE(6416)
						arb = xarb->colarb;
						HX_STACK_LINE(6417)
						bool tmp13 = (sa != arb->s1);		HX_STACK_VAR(tmp13,"tmp13");
						HX_STACK_LINE(6417)
						reverse = tmp13;
						HX_STACK_LINE(6418)
						bool tmp14 = (arb->stat != stat);		HX_STACK_VAR(tmp14,"tmp14");
						HX_STACK_LINE(6418)
						if ((tmp14)){
							HX_STACK_LINE(6419)
							arb->stat = stat;
							HX_STACK_LINE(6420)
							bool tmp15 = arb->sleeping;		HX_STACK_VAR(tmp15,"tmp15");
							HX_STACK_LINE(6420)
							bool tmp16 = !(tmp15);		HX_STACK_VAR(tmp16,"tmp16");
							HX_STACK_LINE(6420)
							if ((tmp16)){
								HX_STACK_LINE(6421)
								bool tmp17 = stat;		HX_STACK_VAR(tmp17,"tmp17");
								HX_STACK_LINE(6421)
								::zpp_nape::util::ZNPList_ZPP_ColArbiter tmp18;		HX_STACK_VAR(tmp18,"tmp18");
								HX_STACK_LINE(6421)
								if ((tmp17)){
									HX_STACK_LINE(6421)
									tmp18 = this->c_arbiters_false;
								}
								else{
									HX_STACK_LINE(6421)
									tmp18 = this->c_arbiters_true;
								}
								HX_STACK_LINE(6421)
								::zpp_nape::dynamics::ZPP_ColArbiter tmp19 = arb;		HX_STACK_VAR(tmp19,"tmp19");
								HX_STACK_LINE(6421)
								tmp18->remove(tmp19);
								HX_STACK_LINE(6422)
								::zpp_nape::dynamics::ZPP_ColArbiter tmp20 = arb;		HX_STACK_VAR(tmp20,"tmp20");
								HX_STACK_LINE(6422)
								carbs->add(tmp20);
							}
						}
					}
				}
				HX_STACK_LINE(6427)
				::zpp_nape::dynamics::ZPP_Arbiter tmp12;		HX_STACK_VAR(tmp12,"tmp12");
				HX_STACK_LINE(6427)
				{
					HX_STACK_LINE(6428)
					int tmp13 = ::zpp_nape::util::ZPP_Flags_obj::id_InteractionType_COLLISION;		HX_STACK_VAR(tmp13,"tmp13");
					HX_STACK_LINE(6428)
					int inttype = tmp13;		HX_STACK_VAR(inttype,"inttype");
					HX_STACK_LINE(6429)
					bool tmp14 = first;		HX_STACK_VAR(tmp14,"tmp14");
					HX_STACK_LINE(6429)
					bool tmp15 = !(tmp14);		HX_STACK_VAR(tmp15,"tmp15");
					HX_STACK_LINE(6429)
					bool tmp16 = tmp15;		HX_STACK_VAR(tmp16,"tmp16");
					HX_STACK_LINE(6429)
					bool tmp17;		HX_STACK_VAR(tmp17,"tmp17");
					HX_STACK_LINE(6429)
					if ((tmp16)){
						HX_STACK_LINE(6429)
						int tmp18 = arb->stamp;		HX_STACK_VAR(tmp18,"tmp18");
						HX_STACK_LINE(6429)
						int tmp19 = this->stamp;		HX_STACK_VAR(tmp19,"tmp19");
						HX_STACK_LINE(6429)
						int tmp20 = tmp19;		HX_STACK_VAR(tmp20,"tmp20");
						HX_STACK_LINE(6429)
						int tmp21 = tmp20;		HX_STACK_VAR(tmp21,"tmp21");
						HX_STACK_LINE(6429)
						tmp17 = (tmp18 != tmp21);
					}
					else{
						HX_STACK_LINE(6429)
						tmp17 = true;
					}
					HX_STACK_LINE(6429)
					bool tmp18 = !(tmp17);		HX_STACK_VAR(tmp18,"tmp18");
					HX_STACK_LINE(6429)
					bool tmp19;		HX_STACK_VAR(tmp19,"tmp19");
					HX_STACK_LINE(6429)
					if ((tmp18)){
						HX_STACK_LINE(6429)
						tmp19 = continuous;
					}
					else{
						HX_STACK_LINE(6429)
						tmp19 = true;
					}
					HX_STACK_LINE(6429)
					if ((tmp19)){
						HX_STACK_LINE(6430)
						int tmp20 = this->stamp;		HX_STACK_VAR(tmp20,"tmp20");
						HX_STACK_LINE(6430)
						arb->stamp = tmp20;
						HX_STACK_LINE(6431)
						::zpp_nape::shape::ZPP_Shape tmp21 = sa;		HX_STACK_VAR(tmp21,"tmp21");
						HX_STACK_LINE(6431)
						::zpp_nape::shape::ZPP_Shape tmp22 = sb;		HX_STACK_VAR(tmp22,"tmp22");
						HX_STACK_LINE(6431)
						::zpp_nape::dynamics::ZPP_ColArbiter tmp23 = arb;		HX_STACK_VAR(tmp23,"tmp23");
						HX_STACK_LINE(6431)
						bool tmp24 = reverse;		HX_STACK_VAR(tmp24,"tmp24");
						HX_STACK_LINE(6431)
						bool tmp25 = ::zpp_nape::geom::ZPP_Collide_obj::contactCollide(tmp21,tmp22,tmp23,tmp24);		HX_STACK_VAR(tmp25,"tmp25");
						HX_STACK_LINE(6431)
						if ((tmp25)){
							HX_STACK_LINE(6432)
							bool tmp26 = first;		HX_STACK_VAR(tmp26,"tmp26");
							HX_STACK_LINE(6432)
							if ((tmp26)){
								HX_STACK_LINE(6433)
								{
									HX_STACK_LINE(6433)
									{
										HX_STACK_LINE(6433)
										arb->b1 = s1->body;
										HX_STACK_LINE(6433)
										arb->ws1 = s1;
										HX_STACK_LINE(6433)
										arb->b2 = s2->body;
										HX_STACK_LINE(6433)
										arb->ws2 = s2;
										HX_STACK_LINE(6433)
										arb->id = sa->id;
										HX_STACK_LINE(6433)
										arb->di = sb->id;
										HX_STACK_LINE(6433)
										{
											HX_STACK_LINE(6433)
											::zpp_nape::util::ZNPList_ZPP_Arbiter tmp27 = arb->b1->arbiters;		HX_STACK_VAR(tmp27,"tmp27");
											HX_STACK_LINE(6433)
											::zpp_nape::util::ZNPList_ZPP_Arbiter _this = tmp27;		HX_STACK_VAR(_this,"_this");
											HX_STACK_LINE(6433)
											::zpp_nape::util::ZNPNode_ZPP_Arbiter tmp28;		HX_STACK_VAR(tmp28,"tmp28");
											HX_STACK_LINE(6433)
											{
												HX_STACK_LINE(6433)
												::zpp_nape::util::ZNPNode_ZPP_Arbiter ret1;		HX_STACK_VAR(ret1,"ret1");
												HX_STACK_LINE(6433)
												{
													HX_STACK_LINE(6433)
													::zpp_nape::util::ZNPNode_ZPP_Arbiter tmp29 = ::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool;		HX_STACK_VAR(tmp29,"tmp29");
													HX_STACK_LINE(6433)
													bool tmp30 = (tmp29 == null());		HX_STACK_VAR(tmp30,"tmp30");
													HX_STACK_LINE(6433)
													if ((tmp30)){
														HX_STACK_LINE(6433)
														::zpp_nape::util::ZNPNode_ZPP_Arbiter tmp31 = ::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::__new();		HX_STACK_VAR(tmp31,"tmp31");
														HX_STACK_LINE(6433)
														ret1 = tmp31;
													}
													else{
														HX_STACK_LINE(6433)
														::zpp_nape::util::ZNPNode_ZPP_Arbiter tmp31 = ::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool;		HX_STACK_VAR(tmp31,"tmp31");
														HX_STACK_LINE(6433)
														ret1 = tmp31;
														HX_STACK_LINE(6433)
														::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool = ret1->next;
														HX_STACK_LINE(6433)
														ret1->next = null();
													}
													HX_STACK_LINE(6433)
													Dynamic();
												}
												HX_STACK_LINE(6433)
												ret1->elt = arb;
												HX_STACK_LINE(6433)
												tmp28 = ret1;
											}
											HX_STACK_LINE(6433)
											::zpp_nape::util::ZNPNode_ZPP_Arbiter temp = tmp28;		HX_STACK_VAR(temp,"temp");
											HX_STACK_LINE(6433)
											temp->next = _this->head;
											HX_STACK_LINE(6433)
											_this->head = temp;
											HX_STACK_LINE(6433)
											_this->modified = true;
											HX_STACK_LINE(6433)
											(_this->length)++;
											HX_STACK_LINE(6433)
											arb;
										}
										HX_STACK_LINE(6433)
										{
											HX_STACK_LINE(6433)
											::zpp_nape::util::ZNPList_ZPP_Arbiter tmp27 = arb->b2->arbiters;		HX_STACK_VAR(tmp27,"tmp27");
											HX_STACK_LINE(6433)
											::zpp_nape::util::ZNPList_ZPP_Arbiter _this = tmp27;		HX_STACK_VAR(_this,"_this");
											HX_STACK_LINE(6433)
											::zpp_nape::util::ZNPNode_ZPP_Arbiter tmp28;		HX_STACK_VAR(tmp28,"tmp28");
											HX_STACK_LINE(6433)
											{
												HX_STACK_LINE(6433)
												::zpp_nape::util::ZNPNode_ZPP_Arbiter ret1;		HX_STACK_VAR(ret1,"ret1");
												HX_STACK_LINE(6433)
												{
													HX_STACK_LINE(6433)
													::zpp_nape::util::ZNPNode_ZPP_Arbiter tmp29 = ::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool;		HX_STACK_VAR(tmp29,"tmp29");
													HX_STACK_LINE(6433)
													bool tmp30 = (tmp29 == null());		HX_STACK_VAR(tmp30,"tmp30");
													HX_STACK_LINE(6433)
													if ((tmp30)){
														HX_STACK_LINE(6433)
														::zpp_nape::util::ZNPNode_ZPP_Arbiter tmp31 = ::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::__new();		HX_STACK_VAR(tmp31,"tmp31");
														HX_STACK_LINE(6433)
														ret1 = tmp31;
													}
													else{
														HX_STACK_LINE(6433)
														::zpp_nape::util::ZNPNode_ZPP_Arbiter tmp31 = ::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool;		HX_STACK_VAR(tmp31,"tmp31");
														HX_STACK_LINE(6433)
														ret1 = tmp31;
														HX_STACK_LINE(6433)
														::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool = ret1->next;
														HX_STACK_LINE(6433)
														ret1->next = null();
													}
													HX_STACK_LINE(6433)
													Dynamic();
												}
												HX_STACK_LINE(6433)
												ret1->elt = arb;
												HX_STACK_LINE(6433)
												tmp28 = ret1;
											}
											HX_STACK_LINE(6433)
											::zpp_nape::util::ZNPNode_ZPP_Arbiter temp = tmp28;		HX_STACK_VAR(temp,"temp");
											HX_STACK_LINE(6433)
											temp->next = _this->head;
											HX_STACK_LINE(6433)
											_this->head = temp;
											HX_STACK_LINE(6433)
											_this->modified = true;
											HX_STACK_LINE(6433)
											(_this->length)++;
											HX_STACK_LINE(6433)
											arb;
										}
										HX_STACK_LINE(6433)
										arb->active = true;
										HX_STACK_LINE(6433)
										arb->present = (int)0;
										HX_STACK_LINE(6433)
										arb->cleared = false;
										HX_STACK_LINE(6433)
										arb->sleeping = false;
										HX_STACK_LINE(6433)
										arb->fresh = false;
										HX_STACK_LINE(6433)
										arb->presentable = false;
									}
									HX_STACK_LINE(6433)
									arb->s1 = s1;
									HX_STACK_LINE(6433)
									arb->s2 = s2;
									HX_STACK_LINE(6433)
									{
										HX_STACK_LINE(6433)
										bool tmp27 = arb->userdef_restitution;		HX_STACK_VAR(tmp27,"tmp27");
										HX_STACK_LINE(6433)
										bool tmp28 = !(tmp27);		HX_STACK_VAR(tmp28,"tmp28");
										HX_STACK_LINE(6433)
										if ((tmp28)){
											HX_STACK_LINE(6433)
											::zpp_nape::phys::ZPP_Material tmp29 = arb->s1->material;		HX_STACK_VAR(tmp29,"tmp29");
											HX_STACK_LINE(6433)
											Float tmp30 = tmp29->elasticity;		HX_STACK_VAR(tmp30,"tmp30");
											HX_STACK_LINE(6433)
											Float tmp31 = ::Math_obj::NEGATIVE_INFINITY;		HX_STACK_VAR(tmp31,"tmp31");
											HX_STACK_LINE(6433)
											bool tmp32 = (tmp30 <= tmp31);		HX_STACK_VAR(tmp32,"tmp32");
											HX_STACK_LINE(6433)
											bool tmp33 = !(tmp32);		HX_STACK_VAR(tmp33,"tmp33");
											HX_STACK_LINE(6433)
											bool tmp34;		HX_STACK_VAR(tmp34,"tmp34");
											HX_STACK_LINE(6433)
											if ((tmp33)){
												HX_STACK_LINE(6433)
												::zpp_nape::phys::ZPP_Material tmp35 = arb->s2->material;		HX_STACK_VAR(tmp35,"tmp35");
												HX_STACK_LINE(6433)
												::zpp_nape::phys::ZPP_Material tmp36 = tmp35;		HX_STACK_VAR(tmp36,"tmp36");
												HX_STACK_LINE(6433)
												Float tmp37 = tmp36->elasticity;		HX_STACK_VAR(tmp37,"tmp37");
												HX_STACK_LINE(6433)
												Float tmp38 = ::Math_obj::NEGATIVE_INFINITY;		HX_STACK_VAR(tmp38,"tmp38");
												HX_STACK_LINE(6433)
												Float tmp39 = tmp38;		HX_STACK_VAR(tmp39,"tmp39");
												HX_STACK_LINE(6433)
												tmp34 = (tmp37 <= tmp39);
											}
											else{
												HX_STACK_LINE(6433)
												tmp34 = true;
											}
											HX_STACK_LINE(6433)
											if ((tmp34)){
												HX_STACK_LINE(6433)
												arb->restitution = (int)0;
											}
											else{
												HX_STACK_LINE(6433)
												::zpp_nape::phys::ZPP_Material tmp35 = arb->s1->material;		HX_STACK_VAR(tmp35,"tmp35");
												HX_STACK_LINE(6433)
												Float tmp36 = tmp35->elasticity;		HX_STACK_VAR(tmp36,"tmp36");
												HX_STACK_LINE(6433)
												Float tmp37 = ::Math_obj::POSITIVE_INFINITY;		HX_STACK_VAR(tmp37,"tmp37");
												HX_STACK_LINE(6433)
												bool tmp38 = (tmp36 >= tmp37);		HX_STACK_VAR(tmp38,"tmp38");
												HX_STACK_LINE(6433)
												bool tmp39 = !(tmp38);		HX_STACK_VAR(tmp39,"tmp39");
												HX_STACK_LINE(6433)
												bool tmp40;		HX_STACK_VAR(tmp40,"tmp40");
												HX_STACK_LINE(6433)
												if ((tmp39)){
													HX_STACK_LINE(6433)
													::zpp_nape::phys::ZPP_Material tmp41 = arb->s2->material;		HX_STACK_VAR(tmp41,"tmp41");
													HX_STACK_LINE(6433)
													::zpp_nape::phys::ZPP_Material tmp42 = tmp41;		HX_STACK_VAR(tmp42,"tmp42");
													HX_STACK_LINE(6433)
													Float tmp43 = tmp42->elasticity;		HX_STACK_VAR(tmp43,"tmp43");
													HX_STACK_LINE(6433)
													Float tmp44 = ::Math_obj::POSITIVE_INFINITY;		HX_STACK_VAR(tmp44,"tmp44");
													HX_STACK_LINE(6433)
													Float tmp45 = tmp44;		HX_STACK_VAR(tmp45,"tmp45");
													HX_STACK_LINE(6433)
													tmp40 = (tmp43 >= tmp45);
												}
												else{
													HX_STACK_LINE(6433)
													tmp40 = true;
												}
												HX_STACK_LINE(6433)
												if ((tmp40)){
													HX_STACK_LINE(6433)
													arb->restitution = (int)1;
												}
												else{
													HX_STACK_LINE(6433)
													::zpp_nape::phys::ZPP_Material tmp41 = arb->s1->material;		HX_STACK_VAR(tmp41,"tmp41");
													HX_STACK_LINE(6433)
													Float tmp42 = tmp41->elasticity;		HX_STACK_VAR(tmp42,"tmp42");
													HX_STACK_LINE(6433)
													::zpp_nape::phys::ZPP_Material tmp43 = arb->s2->material;		HX_STACK_VAR(tmp43,"tmp43");
													HX_STACK_LINE(6433)
													Float tmp44 = tmp43->elasticity;		HX_STACK_VAR(tmp44,"tmp44");
													HX_STACK_LINE(6433)
													Float tmp45 = (tmp42 + tmp44);		HX_STACK_VAR(tmp45,"tmp45");
													HX_STACK_LINE(6433)
													Float tmp46 = (Float(tmp45) / Float((int)2));		HX_STACK_VAR(tmp46,"tmp46");
													HX_STACK_LINE(6433)
													arb->restitution = tmp46;
												}
											}
											HX_STACK_LINE(6433)
											bool tmp35 = (arb->restitution < (int)0);		HX_STACK_VAR(tmp35,"tmp35");
											HX_STACK_LINE(6433)
											if ((tmp35)){
												HX_STACK_LINE(6433)
												arb->restitution = (int)0;
											}
											HX_STACK_LINE(6433)
											bool tmp36 = (arb->restitution > (int)1);		HX_STACK_VAR(tmp36,"tmp36");
											HX_STACK_LINE(6433)
											if ((tmp36)){
												HX_STACK_LINE(6433)
												arb->restitution = (int)1;
											}
										}
										HX_STACK_LINE(6433)
										bool tmp29 = arb->userdef_dyn_fric;		HX_STACK_VAR(tmp29,"tmp29");
										HX_STACK_LINE(6433)
										bool tmp30 = !(tmp29);		HX_STACK_VAR(tmp30,"tmp30");
										HX_STACK_LINE(6433)
										if ((tmp30)){
											HX_STACK_LINE(6433)
											Float tmp31;		HX_STACK_VAR(tmp31,"tmp31");
											HX_STACK_LINE(6433)
											{
												HX_STACK_LINE(6433)
												::zpp_nape::phys::ZPP_Material tmp32 = arb->s1->material;		HX_STACK_VAR(tmp32,"tmp32");
												HX_STACK_LINE(6433)
												Float tmp33 = tmp32->dynamicFriction;		HX_STACK_VAR(tmp33,"tmp33");
												HX_STACK_LINE(6433)
												::zpp_nape::phys::ZPP_Material tmp34 = arb->s2->material;		HX_STACK_VAR(tmp34,"tmp34");
												HX_STACK_LINE(6433)
												Float tmp35 = tmp34->dynamicFriction;		HX_STACK_VAR(tmp35,"tmp35");
												HX_STACK_LINE(6433)
												Float tmp36 = (tmp33 * tmp35);		HX_STACK_VAR(tmp36,"tmp36");
												HX_STACK_LINE(6433)
												tmp31 = ::Math_obj::sqrt(tmp36);
											}
											HX_STACK_LINE(6433)
											arb->dyn_fric = tmp31;
										}
										HX_STACK_LINE(6433)
										bool tmp31 = arb->userdef_stat_fric;		HX_STACK_VAR(tmp31,"tmp31");
										HX_STACK_LINE(6433)
										bool tmp32 = !(tmp31);		HX_STACK_VAR(tmp32,"tmp32");
										HX_STACK_LINE(6433)
										if ((tmp32)){
											HX_STACK_LINE(6433)
											Float tmp33;		HX_STACK_VAR(tmp33,"tmp33");
											HX_STACK_LINE(6433)
											{
												HX_STACK_LINE(6433)
												::zpp_nape::phys::ZPP_Material tmp34 = arb->s1->material;		HX_STACK_VAR(tmp34,"tmp34");
												HX_STACK_LINE(6433)
												Float tmp35 = tmp34->staticFriction;		HX_STACK_VAR(tmp35,"tmp35");
												HX_STACK_LINE(6433)
												::zpp_nape::phys::ZPP_Material tmp36 = arb->s2->material;		HX_STACK_VAR(tmp36,"tmp36");
												HX_STACK_LINE(6433)
												Float tmp37 = tmp36->staticFriction;		HX_STACK_VAR(tmp37,"tmp37");
												HX_STACK_LINE(6433)
												Float tmp38 = (tmp35 * tmp37);		HX_STACK_VAR(tmp38,"tmp38");
												HX_STACK_LINE(6433)
												tmp33 = ::Math_obj::sqrt(tmp38);
											}
											HX_STACK_LINE(6433)
											arb->stat_fric = tmp33;
										}
										HX_STACK_LINE(6433)
										bool tmp33 = arb->userdef_rfric;		HX_STACK_VAR(tmp33,"tmp33");
										HX_STACK_LINE(6433)
										bool tmp34 = !(tmp33);		HX_STACK_VAR(tmp34,"tmp34");
										HX_STACK_LINE(6433)
										if ((tmp34)){
											HX_STACK_LINE(6433)
											Float tmp35;		HX_STACK_VAR(tmp35,"tmp35");
											HX_STACK_LINE(6433)
											{
												HX_STACK_LINE(6433)
												::zpp_nape::phys::ZPP_Material tmp36 = arb->s1->material;		HX_STACK_VAR(tmp36,"tmp36");
												HX_STACK_LINE(6433)
												Float tmp37 = tmp36->rollingFriction;		HX_STACK_VAR(tmp37,"tmp37");
												HX_STACK_LINE(6433)
												::zpp_nape::phys::ZPP_Material tmp38 = arb->s2->material;		HX_STACK_VAR(tmp38,"tmp38");
												HX_STACK_LINE(6433)
												Float tmp39 = tmp38->rollingFriction;		HX_STACK_VAR(tmp39,"tmp39");
												HX_STACK_LINE(6433)
												Float tmp40 = (tmp37 * tmp39);		HX_STACK_VAR(tmp40,"tmp40");
												HX_STACK_LINE(6433)
												tmp35 = ::Math_obj::sqrt(tmp40);
											}
											HX_STACK_LINE(6433)
											arb->rfric = tmp35;
										}
									}
								}
								HX_STACK_LINE(6434)
								{
									HX_STACK_LINE(6434)
									::zpp_nape::util::ZNPNode_ZPP_ColArbiter tmp27;		HX_STACK_VAR(tmp27,"tmp27");
									HX_STACK_LINE(6434)
									{
										HX_STACK_LINE(6434)
										::zpp_nape::util::ZNPNode_ZPP_ColArbiter ret1;		HX_STACK_VAR(ret1,"ret1");
										HX_STACK_LINE(6434)
										{
											HX_STACK_LINE(6434)
											::zpp_nape::util::ZNPNode_ZPP_ColArbiter tmp28 = ::zpp_nape::util::ZNPNode_ZPP_ColArbiter_obj::zpp_pool;		HX_STACK_VAR(tmp28,"tmp28");
											HX_STACK_LINE(6434)
											bool tmp29 = (tmp28 == null());		HX_STACK_VAR(tmp29,"tmp29");
											HX_STACK_LINE(6434)
											if ((tmp29)){
												HX_STACK_LINE(6434)
												::zpp_nape::util::ZNPNode_ZPP_ColArbiter tmp30 = ::zpp_nape::util::ZNPNode_ZPP_ColArbiter_obj::__new();		HX_STACK_VAR(tmp30,"tmp30");
												HX_STACK_LINE(6434)
												ret1 = tmp30;
											}
											else{
												HX_STACK_LINE(6434)
												::zpp_nape::util::ZNPNode_ZPP_ColArbiter tmp30 = ::zpp_nape::util::ZNPNode_ZPP_ColArbiter_obj::zpp_pool;		HX_STACK_VAR(tmp30,"tmp30");
												HX_STACK_LINE(6434)
												ret1 = tmp30;
												HX_STACK_LINE(6434)
												::zpp_nape::util::ZNPNode_ZPP_ColArbiter_obj::zpp_pool = ret1->next;
												HX_STACK_LINE(6434)
												ret1->next = null();
											}
											HX_STACK_LINE(6434)
											Dynamic();
										}
										HX_STACK_LINE(6434)
										ret1->elt = arb;
										HX_STACK_LINE(6434)
										tmp27 = ret1;
									}
									HX_STACK_LINE(6434)
									::zpp_nape::util::ZNPNode_ZPP_ColArbiter temp = tmp27;		HX_STACK_VAR(temp,"temp");
									HX_STACK_LINE(6434)
									temp->next = carbs->head;
									HX_STACK_LINE(6434)
									carbs->head = temp;
									HX_STACK_LINE(6434)
									carbs->modified = true;
									HX_STACK_LINE(6434)
									(carbs->length)++;
									HX_STACK_LINE(6434)
									arb;
								}
								HX_STACK_LINE(6435)
								bool tmp27 = swapped;		HX_STACK_VAR(tmp27,"tmp27");
								HX_STACK_LINE(6435)
								bool tmp28 = !(tmp27);		HX_STACK_VAR(tmp28,"tmp28");
								HX_STACK_LINE(6435)
								arb->fresh = tmp28;
							}
							else{
								HX_STACK_LINE(6438)
								int tmp27 = arb->up_stamp;		HX_STACK_VAR(tmp27,"tmp27");
								HX_STACK_LINE(6438)
								int tmp28 = this->stamp;		HX_STACK_VAR(tmp28,"tmp28");
								HX_STACK_LINE(6438)
								int tmp29 = (tmp28 - (int)1);		HX_STACK_VAR(tmp29,"tmp29");
								HX_STACK_LINE(6438)
								bool tmp30 = (tmp27 < tmp29);		HX_STACK_VAR(tmp30,"tmp30");
								HX_STACK_LINE(6438)
								bool tmp31 = !(tmp30);		HX_STACK_VAR(tmp31,"tmp31");
								HX_STACK_LINE(6438)
								bool tmp32;		HX_STACK_VAR(tmp32,"tmp32");
								HX_STACK_LINE(6438)
								if ((tmp31)){
									HX_STACK_LINE(6438)
									int tmp33 = arb->endGenerated;		HX_STACK_VAR(tmp33,"tmp33");
									HX_STACK_LINE(6438)
									int tmp34 = this->stamp;		HX_STACK_VAR(tmp34,"tmp34");
									HX_STACK_LINE(6438)
									int tmp35 = tmp34;		HX_STACK_VAR(tmp35,"tmp35");
									HX_STACK_LINE(6438)
									bool tmp36 = (tmp33 == tmp35);		HX_STACK_VAR(tmp36,"tmp36");
									HX_STACK_LINE(6438)
									bool tmp37 = tmp36;		HX_STACK_VAR(tmp37,"tmp37");
									HX_STACK_LINE(6438)
									bool tmp38 = tmp37;		HX_STACK_VAR(tmp38,"tmp38");
									HX_STACK_LINE(6438)
									if ((tmp38)){
										HX_STACK_LINE(6438)
										tmp32 = continuous;
									}
									else{
										HX_STACK_LINE(6438)
										tmp32 = false;
									}
								}
								else{
									HX_STACK_LINE(6438)
									tmp32 = true;
								}
								HX_STACK_LINE(6438)
								arb->fresh = tmp32;
							}
							HX_STACK_LINE(6440)
							arb->up_stamp = arb->stamp;
							HX_STACK_LINE(6441)
							bool tmp27 = arb->fresh;		HX_STACK_VAR(tmp27,"tmp27");
							HX_STACK_LINE(6441)
							bool tmp28 = !(tmp27);		HX_STACK_VAR(tmp28,"tmp28");
							HX_STACK_LINE(6441)
							bool tmp29;		HX_STACK_VAR(tmp29,"tmp29");
							HX_STACK_LINE(6441)
							if ((tmp28)){
								HX_STACK_LINE(6441)
								int tmp30 = arb->immState;		HX_STACK_VAR(tmp30,"tmp30");
								HX_STACK_LINE(6441)
								int tmp31 = ::zpp_nape::util::ZPP_Flags_obj::id_ImmState_ALWAYS;		HX_STACK_VAR(tmp31,"tmp31");
								HX_STACK_LINE(6441)
								int tmp32 = tmp31;		HX_STACK_VAR(tmp32,"tmp32");
								HX_STACK_LINE(6441)
								int tmp33 = (int(tmp30) & int(tmp32));		HX_STACK_VAR(tmp33,"tmp33");
								HX_STACK_LINE(6441)
								int tmp34 = tmp33;		HX_STACK_VAR(tmp34,"tmp34");
								HX_STACK_LINE(6441)
								tmp29 = (tmp34 == (int)0);
							}
							else{
								HX_STACK_LINE(6441)
								tmp29 = true;
							}
							HX_STACK_LINE(6441)
							if ((tmp29)){
								HX_STACK_LINE(6442)
								int tmp30 = ::zpp_nape::util::ZPP_Flags_obj::id_ImmState_ACCEPT;		HX_STACK_VAR(tmp30,"tmp30");
								HX_STACK_LINE(6442)
								arb->immState = tmp30;
								HX_STACK_LINE(6443)
								bool anyimpure = false;		HX_STACK_VAR(anyimpure,"anyimpure");
								HX_STACK_LINE(6444)
								int tmp31 = arb->ws1->id;		HX_STACK_VAR(tmp31,"tmp31");
								HX_STACK_LINE(6444)
								int tmp32 = arb->ws2->id;		HX_STACK_VAR(tmp32,"tmp32");
								HX_STACK_LINE(6444)
								bool tmp33 = (tmp31 > tmp32);		HX_STACK_VAR(tmp33,"tmp33");
								HX_STACK_LINE(6444)
								::zpp_nape::shape::ZPP_Shape tmp34;		HX_STACK_VAR(tmp34,"tmp34");
								HX_STACK_LINE(6444)
								if ((tmp33)){
									HX_STACK_LINE(6444)
									tmp34 = arb->ws2;
								}
								else{
									HX_STACK_LINE(6444)
									tmp34 = arb->ws1;
								}
								HX_STACK_LINE(6444)
								::zpp_nape::shape::ZPP_Shape arbs1 = tmp34;		HX_STACK_VAR(arbs1,"arbs1");
								HX_STACK_LINE(6445)
								int tmp35 = arb->ws1->id;		HX_STACK_VAR(tmp35,"tmp35");
								HX_STACK_LINE(6445)
								int tmp36 = arb->ws2->id;		HX_STACK_VAR(tmp36,"tmp36");
								HX_STACK_LINE(6445)
								bool tmp37 = (tmp35 > tmp36);		HX_STACK_VAR(tmp37,"tmp37");
								HX_STACK_LINE(6445)
								::zpp_nape::shape::ZPP_Shape tmp38;		HX_STACK_VAR(tmp38,"tmp38");
								HX_STACK_LINE(6445)
								if ((tmp37)){
									HX_STACK_LINE(6445)
									tmp38 = arb->ws1;
								}
								else{
									HX_STACK_LINE(6445)
									tmp38 = arb->ws2;
								}
								HX_STACK_LINE(6445)
								::zpp_nape::shape::ZPP_Shape arbs2 = tmp38;		HX_STACK_VAR(arbs2,"arbs2");
								HX_STACK_LINE(6446)
								{
									HX_STACK_LINE(6446)
									{
										HX_STACK_LINE(6446)
										::zpp_nape::util::ZNPList_ZPP_Interactor tmp39 = this->mrca1;		HX_STACK_VAR(tmp39,"tmp39");
										HX_STACK_LINE(6446)
										::zpp_nape::util::ZNPList_ZPP_Interactor _this = tmp39;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(6446)
										{
											HX_STACK_LINE(6446)
											while((true)){
												HX_STACK_LINE(6446)
												bool tmp40 = (_this->head == null());		HX_STACK_VAR(tmp40,"tmp40");
												HX_STACK_LINE(6446)
												bool tmp41 = !(tmp40);		HX_STACK_VAR(tmp41,"tmp41");
												HX_STACK_LINE(6446)
												bool tmp42 = !(tmp41);		HX_STACK_VAR(tmp42,"tmp42");
												HX_STACK_LINE(6446)
												if ((tmp42)){
													HX_STACK_LINE(6446)
													break;
												}
												HX_STACK_LINE(6446)
												::zpp_nape::util::ZNPNode_ZPP_Interactor ret1 = _this->head;		HX_STACK_VAR(ret1,"ret1");
												HX_STACK_LINE(6446)
												_this->head = ret1->next;
												HX_STACK_LINE(6446)
												{
													HX_STACK_LINE(6446)
													::zpp_nape::util::ZNPNode_ZPP_Interactor o = ret1;		HX_STACK_VAR(o,"o");
													HX_STACK_LINE(6446)
													o->elt = null();
													HX_STACK_LINE(6446)
													::zpp_nape::util::ZNPNode_ZPP_Interactor tmp43 = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool;		HX_STACK_VAR(tmp43,"tmp43");
													HX_STACK_LINE(6446)
													o->next = tmp43;
													HX_STACK_LINE(6446)
													::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool = o;
												}
												HX_STACK_LINE(6446)
												bool tmp43 = (_this->head == null());		HX_STACK_VAR(tmp43,"tmp43");
												HX_STACK_LINE(6446)
												if ((tmp43)){
													HX_STACK_LINE(6446)
													_this->pushmod = true;
												}
												HX_STACK_LINE(6446)
												_this->modified = true;
												HX_STACK_LINE(6446)
												(_this->length)--;
											}
											HX_STACK_LINE(6446)
											_this->pushmod = true;
										}
									}
									HX_STACK_LINE(6446)
									{
										HX_STACK_LINE(6446)
										::zpp_nape::util::ZNPList_ZPP_Interactor tmp39 = this->mrca2;		HX_STACK_VAR(tmp39,"tmp39");
										HX_STACK_LINE(6446)
										::zpp_nape::util::ZNPList_ZPP_Interactor _this = tmp39;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(6446)
										{
											HX_STACK_LINE(6446)
											while((true)){
												HX_STACK_LINE(6446)
												bool tmp40 = (_this->head == null());		HX_STACK_VAR(tmp40,"tmp40");
												HX_STACK_LINE(6446)
												bool tmp41 = !(tmp40);		HX_STACK_VAR(tmp41,"tmp41");
												HX_STACK_LINE(6446)
												bool tmp42 = !(tmp41);		HX_STACK_VAR(tmp42,"tmp42");
												HX_STACK_LINE(6446)
												if ((tmp42)){
													HX_STACK_LINE(6446)
													break;
												}
												HX_STACK_LINE(6446)
												::zpp_nape::util::ZNPNode_ZPP_Interactor ret1 = _this->head;		HX_STACK_VAR(ret1,"ret1");
												HX_STACK_LINE(6446)
												_this->head = ret1->next;
												HX_STACK_LINE(6446)
												{
													HX_STACK_LINE(6446)
													::zpp_nape::util::ZNPNode_ZPP_Interactor o = ret1;		HX_STACK_VAR(o,"o");
													HX_STACK_LINE(6446)
													o->elt = null();
													HX_STACK_LINE(6446)
													::zpp_nape::util::ZNPNode_ZPP_Interactor tmp43 = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool;		HX_STACK_VAR(tmp43,"tmp43");
													HX_STACK_LINE(6446)
													o->next = tmp43;
													HX_STACK_LINE(6446)
													::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool = o;
												}
												HX_STACK_LINE(6446)
												bool tmp43 = (_this->head == null());		HX_STACK_VAR(tmp43,"tmp43");
												HX_STACK_LINE(6446)
												if ((tmp43)){
													HX_STACK_LINE(6446)
													_this->pushmod = true;
												}
												HX_STACK_LINE(6446)
												_this->modified = true;
												HX_STACK_LINE(6446)
												(_this->length)--;
											}
											HX_STACK_LINE(6446)
											_this->pushmod = true;
										}
									}
									HX_STACK_LINE(6446)
									bool tmp39 = (arbs1->cbSet != null());		HX_STACK_VAR(tmp39,"tmp39");
									HX_STACK_LINE(6446)
									if ((tmp39)){
										HX_STACK_LINE(6446)
										::zpp_nape::util::ZNPList_ZPP_Interactor tmp40 = this->mrca1;		HX_STACK_VAR(tmp40,"tmp40");
										HX_STACK_LINE(6446)
										::zpp_nape::util::ZNPList_ZPP_Interactor _this = tmp40;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(6446)
										::zpp_nape::util::ZNPNode_ZPP_Interactor tmp41;		HX_STACK_VAR(tmp41,"tmp41");
										HX_STACK_LINE(6446)
										{
											HX_STACK_LINE(6446)
											::zpp_nape::util::ZNPNode_ZPP_Interactor ret1;		HX_STACK_VAR(ret1,"ret1");
											HX_STACK_LINE(6446)
											{
												HX_STACK_LINE(6446)
												::zpp_nape::util::ZNPNode_ZPP_Interactor tmp42 = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool;		HX_STACK_VAR(tmp42,"tmp42");
												HX_STACK_LINE(6446)
												bool tmp43 = (tmp42 == null());		HX_STACK_VAR(tmp43,"tmp43");
												HX_STACK_LINE(6446)
												if ((tmp43)){
													HX_STACK_LINE(6446)
													::zpp_nape::util::ZNPNode_ZPP_Interactor tmp44 = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::__new();		HX_STACK_VAR(tmp44,"tmp44");
													HX_STACK_LINE(6446)
													ret1 = tmp44;
												}
												else{
													HX_STACK_LINE(6446)
													::zpp_nape::util::ZNPNode_ZPP_Interactor tmp44 = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool;		HX_STACK_VAR(tmp44,"tmp44");
													HX_STACK_LINE(6446)
													ret1 = tmp44;
													HX_STACK_LINE(6446)
													::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool = ret1->next;
													HX_STACK_LINE(6446)
													ret1->next = null();
												}
												HX_STACK_LINE(6446)
												Dynamic();
											}
											HX_STACK_LINE(6446)
											ret1->elt = arbs1;
											HX_STACK_LINE(6446)
											tmp41 = ret1;
										}
										HX_STACK_LINE(6446)
										::zpp_nape::util::ZNPNode_ZPP_Interactor temp = tmp41;		HX_STACK_VAR(temp,"temp");
										HX_STACK_LINE(6446)
										temp->next = _this->head;
										HX_STACK_LINE(6446)
										_this->head = temp;
										HX_STACK_LINE(6446)
										_this->modified = true;
										HX_STACK_LINE(6446)
										(_this->length)++;
										HX_STACK_LINE(6446)
										arbs1;
									}
									HX_STACK_LINE(6446)
									::zpp_nape::callbacks::ZPP_CbSet tmp40 = arbs1->body->cbSet;		HX_STACK_VAR(tmp40,"tmp40");
									HX_STACK_LINE(6446)
									bool tmp41 = (tmp40 != null());		HX_STACK_VAR(tmp41,"tmp41");
									HX_STACK_LINE(6446)
									if ((tmp41)){
										HX_STACK_LINE(6446)
										::zpp_nape::util::ZNPList_ZPP_Interactor tmp42 = this->mrca1;		HX_STACK_VAR(tmp42,"tmp42");
										HX_STACK_LINE(6446)
										::zpp_nape::util::ZNPList_ZPP_Interactor _this = tmp42;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(6446)
										::zpp_nape::phys::ZPP_Interactor o = arbs1->body;		HX_STACK_VAR(o,"o");
										HX_STACK_LINE(6446)
										::zpp_nape::util::ZNPNode_ZPP_Interactor tmp43;		HX_STACK_VAR(tmp43,"tmp43");
										HX_STACK_LINE(6446)
										{
											HX_STACK_LINE(6446)
											::zpp_nape::util::ZNPNode_ZPP_Interactor ret1;		HX_STACK_VAR(ret1,"ret1");
											HX_STACK_LINE(6446)
											{
												HX_STACK_LINE(6446)
												::zpp_nape::util::ZNPNode_ZPP_Interactor tmp44 = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool;		HX_STACK_VAR(tmp44,"tmp44");
												HX_STACK_LINE(6446)
												bool tmp45 = (tmp44 == null());		HX_STACK_VAR(tmp45,"tmp45");
												HX_STACK_LINE(6446)
												if ((tmp45)){
													HX_STACK_LINE(6446)
													::zpp_nape::util::ZNPNode_ZPP_Interactor tmp46 = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::__new();		HX_STACK_VAR(tmp46,"tmp46");
													HX_STACK_LINE(6446)
													ret1 = tmp46;
												}
												else{
													HX_STACK_LINE(6446)
													::zpp_nape::util::ZNPNode_ZPP_Interactor tmp46 = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool;		HX_STACK_VAR(tmp46,"tmp46");
													HX_STACK_LINE(6446)
													ret1 = tmp46;
													HX_STACK_LINE(6446)
													::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool = ret1->next;
													HX_STACK_LINE(6446)
													ret1->next = null();
												}
												HX_STACK_LINE(6446)
												Dynamic();
											}
											HX_STACK_LINE(6446)
											ret1->elt = o;
											HX_STACK_LINE(6446)
											tmp43 = ret1;
										}
										HX_STACK_LINE(6446)
										::zpp_nape::util::ZNPNode_ZPP_Interactor temp = tmp43;		HX_STACK_VAR(temp,"temp");
										HX_STACK_LINE(6446)
										temp->next = _this->head;
										HX_STACK_LINE(6446)
										_this->head = temp;
										HX_STACK_LINE(6446)
										_this->modified = true;
										HX_STACK_LINE(6446)
										(_this->length)++;
										HX_STACK_LINE(6446)
										o;
									}
									HX_STACK_LINE(6446)
									bool tmp42 = (arbs2->cbSet != null());		HX_STACK_VAR(tmp42,"tmp42");
									HX_STACK_LINE(6446)
									if ((tmp42)){
										HX_STACK_LINE(6446)
										::zpp_nape::util::ZNPList_ZPP_Interactor tmp43 = this->mrca2;		HX_STACK_VAR(tmp43,"tmp43");
										HX_STACK_LINE(6446)
										::zpp_nape::util::ZNPList_ZPP_Interactor _this = tmp43;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(6446)
										::zpp_nape::util::ZNPNode_ZPP_Interactor tmp44;		HX_STACK_VAR(tmp44,"tmp44");
										HX_STACK_LINE(6446)
										{
											HX_STACK_LINE(6446)
											::zpp_nape::util::ZNPNode_ZPP_Interactor ret1;		HX_STACK_VAR(ret1,"ret1");
											HX_STACK_LINE(6446)
											{
												HX_STACK_LINE(6446)
												::zpp_nape::util::ZNPNode_ZPP_Interactor tmp45 = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool;		HX_STACK_VAR(tmp45,"tmp45");
												HX_STACK_LINE(6446)
												bool tmp46 = (tmp45 == null());		HX_STACK_VAR(tmp46,"tmp46");
												HX_STACK_LINE(6446)
												if ((tmp46)){
													HX_STACK_LINE(6446)
													::zpp_nape::util::ZNPNode_ZPP_Interactor tmp47 = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::__new();		HX_STACK_VAR(tmp47,"tmp47");
													HX_STACK_LINE(6446)
													ret1 = tmp47;
												}
												else{
													HX_STACK_LINE(6446)
													::zpp_nape::util::ZNPNode_ZPP_Interactor tmp47 = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool;		HX_STACK_VAR(tmp47,"tmp47");
													HX_STACK_LINE(6446)
													ret1 = tmp47;
													HX_STACK_LINE(6446)
													::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool = ret1->next;
													HX_STACK_LINE(6446)
													ret1->next = null();
												}
												HX_STACK_LINE(6446)
												Dynamic();
											}
											HX_STACK_LINE(6446)
											ret1->elt = arbs2;
											HX_STACK_LINE(6446)
											tmp44 = ret1;
										}
										HX_STACK_LINE(6446)
										::zpp_nape::util::ZNPNode_ZPP_Interactor temp = tmp44;		HX_STACK_VAR(temp,"temp");
										HX_STACK_LINE(6446)
										temp->next = _this->head;
										HX_STACK_LINE(6446)
										_this->head = temp;
										HX_STACK_LINE(6446)
										_this->modified = true;
										HX_STACK_LINE(6446)
										(_this->length)++;
										HX_STACK_LINE(6446)
										arbs2;
									}
									HX_STACK_LINE(6446)
									::zpp_nape::callbacks::ZPP_CbSet tmp43 = arbs2->body->cbSet;		HX_STACK_VAR(tmp43,"tmp43");
									HX_STACK_LINE(6446)
									bool tmp44 = (tmp43 != null());		HX_STACK_VAR(tmp44,"tmp44");
									HX_STACK_LINE(6446)
									if ((tmp44)){
										HX_STACK_LINE(6446)
										::zpp_nape::util::ZNPList_ZPP_Interactor tmp45 = this->mrca2;		HX_STACK_VAR(tmp45,"tmp45");
										HX_STACK_LINE(6446)
										::zpp_nape::util::ZNPList_ZPP_Interactor _this = tmp45;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(6446)
										::zpp_nape::phys::ZPP_Interactor o = arbs2->body;		HX_STACK_VAR(o,"o");
										HX_STACK_LINE(6446)
										::zpp_nape::util::ZNPNode_ZPP_Interactor tmp46;		HX_STACK_VAR(tmp46,"tmp46");
										HX_STACK_LINE(6446)
										{
											HX_STACK_LINE(6446)
											::zpp_nape::util::ZNPNode_ZPP_Interactor ret1;		HX_STACK_VAR(ret1,"ret1");
											HX_STACK_LINE(6446)
											{
												HX_STACK_LINE(6446)
												::zpp_nape::util::ZNPNode_ZPP_Interactor tmp47 = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool;		HX_STACK_VAR(tmp47,"tmp47");
												HX_STACK_LINE(6446)
												bool tmp48 = (tmp47 == null());		HX_STACK_VAR(tmp48,"tmp48");
												HX_STACK_LINE(6446)
												if ((tmp48)){
													HX_STACK_LINE(6446)
													::zpp_nape::util::ZNPNode_ZPP_Interactor tmp49 = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::__new();		HX_STACK_VAR(tmp49,"tmp49");
													HX_STACK_LINE(6446)
													ret1 = tmp49;
												}
												else{
													HX_STACK_LINE(6446)
													::zpp_nape::util::ZNPNode_ZPP_Interactor tmp49 = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool;		HX_STACK_VAR(tmp49,"tmp49");
													HX_STACK_LINE(6446)
													ret1 = tmp49;
													HX_STACK_LINE(6446)
													::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool = ret1->next;
													HX_STACK_LINE(6446)
													ret1->next = null();
												}
												HX_STACK_LINE(6446)
												Dynamic();
											}
											HX_STACK_LINE(6446)
											ret1->elt = o;
											HX_STACK_LINE(6446)
											tmp46 = ret1;
										}
										HX_STACK_LINE(6446)
										::zpp_nape::util::ZNPNode_ZPP_Interactor temp = tmp46;		HX_STACK_VAR(temp,"temp");
										HX_STACK_LINE(6446)
										temp->next = _this->head;
										HX_STACK_LINE(6446)
										_this->head = temp;
										HX_STACK_LINE(6446)
										_this->modified = true;
										HX_STACK_LINE(6446)
										(_this->length)++;
										HX_STACK_LINE(6446)
										o;
									}
									HX_STACK_LINE(6446)
									::zpp_nape::phys::ZPP_Compound tmp45 = arbs1->body->compound;		HX_STACK_VAR(tmp45,"tmp45");
									HX_STACK_LINE(6446)
									::zpp_nape::phys::ZPP_Compound c1 = tmp45;		HX_STACK_VAR(c1,"c1");
									HX_STACK_LINE(6446)
									::zpp_nape::phys::ZPP_Compound tmp46 = arbs2->body->compound;		HX_STACK_VAR(tmp46,"tmp46");
									HX_STACK_LINE(6446)
									::zpp_nape::phys::ZPP_Compound c2 = tmp46;		HX_STACK_VAR(c2,"c2");
									HX_STACK_LINE(6446)
									while((true)){
										HX_STACK_LINE(6446)
										bool tmp47 = (c1 != c2);		HX_STACK_VAR(tmp47,"tmp47");
										HX_STACK_LINE(6446)
										bool tmp48 = !(tmp47);		HX_STACK_VAR(tmp48,"tmp48");
										HX_STACK_LINE(6446)
										if ((tmp48)){
											HX_STACK_LINE(6446)
											break;
										}
										HX_STACK_LINE(6446)
										bool tmp49 = (c1 == null());		HX_STACK_VAR(tmp49,"tmp49");
										HX_STACK_LINE(6446)
										int tmp50;		HX_STACK_VAR(tmp50,"tmp50");
										HX_STACK_LINE(6446)
										if ((tmp49)){
											HX_STACK_LINE(6446)
											tmp50 = (int)0;
										}
										else{
											HX_STACK_LINE(6446)
											tmp50 = c1->depth;
										}
										HX_STACK_LINE(6446)
										int d1 = tmp50;		HX_STACK_VAR(d1,"d1");
										HX_STACK_LINE(6446)
										bool tmp51 = (c2 == null());		HX_STACK_VAR(tmp51,"tmp51");
										HX_STACK_LINE(6446)
										int tmp52;		HX_STACK_VAR(tmp52,"tmp52");
										HX_STACK_LINE(6446)
										if ((tmp51)){
											HX_STACK_LINE(6446)
											tmp52 = (int)0;
										}
										else{
											HX_STACK_LINE(6446)
											tmp52 = c2->depth;
										}
										HX_STACK_LINE(6446)
										int d2 = tmp52;		HX_STACK_VAR(d2,"d2");
										HX_STACK_LINE(6446)
										bool tmp53 = (d1 < d2);		HX_STACK_VAR(tmp53,"tmp53");
										HX_STACK_LINE(6446)
										if ((tmp53)){
											HX_STACK_LINE(6446)
											bool tmp54 = (c2->cbSet != null());		HX_STACK_VAR(tmp54,"tmp54");
											HX_STACK_LINE(6446)
											if ((tmp54)){
												HX_STACK_LINE(6446)
												::zpp_nape::util::ZNPList_ZPP_Interactor tmp55 = this->mrca2;		HX_STACK_VAR(tmp55,"tmp55");
												HX_STACK_LINE(6446)
												::zpp_nape::util::ZNPList_ZPP_Interactor _this = tmp55;		HX_STACK_VAR(_this,"_this");
												HX_STACK_LINE(6446)
												::zpp_nape::util::ZNPNode_ZPP_Interactor tmp56;		HX_STACK_VAR(tmp56,"tmp56");
												HX_STACK_LINE(6446)
												{
													HX_STACK_LINE(6446)
													::zpp_nape::util::ZNPNode_ZPP_Interactor ret1;		HX_STACK_VAR(ret1,"ret1");
													HX_STACK_LINE(6446)
													{
														HX_STACK_LINE(6446)
														::zpp_nape::util::ZNPNode_ZPP_Interactor tmp57 = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool;		HX_STACK_VAR(tmp57,"tmp57");
														HX_STACK_LINE(6446)
														bool tmp58 = (tmp57 == null());		HX_STACK_VAR(tmp58,"tmp58");
														HX_STACK_LINE(6446)
														if ((tmp58)){
															HX_STACK_LINE(6446)
															::zpp_nape::util::ZNPNode_ZPP_Interactor tmp59 = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::__new();		HX_STACK_VAR(tmp59,"tmp59");
															HX_STACK_LINE(6446)
															ret1 = tmp59;
														}
														else{
															HX_STACK_LINE(6446)
															::zpp_nape::util::ZNPNode_ZPP_Interactor tmp59 = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool;		HX_STACK_VAR(tmp59,"tmp59");
															HX_STACK_LINE(6446)
															ret1 = tmp59;
															HX_STACK_LINE(6446)
															::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool = ret1->next;
															HX_STACK_LINE(6446)
															ret1->next = null();
														}
														HX_STACK_LINE(6446)
														Dynamic();
													}
													HX_STACK_LINE(6446)
													ret1->elt = c2;
													HX_STACK_LINE(6446)
													tmp56 = ret1;
												}
												HX_STACK_LINE(6446)
												::zpp_nape::util::ZNPNode_ZPP_Interactor temp = tmp56;		HX_STACK_VAR(temp,"temp");
												HX_STACK_LINE(6446)
												temp->next = _this->head;
												HX_STACK_LINE(6446)
												_this->head = temp;
												HX_STACK_LINE(6446)
												_this->modified = true;
												HX_STACK_LINE(6446)
												(_this->length)++;
												HX_STACK_LINE(6446)
												c2;
											}
											HX_STACK_LINE(6446)
											c2 = c2->compound;
										}
										else{
											HX_STACK_LINE(6446)
											bool tmp54 = (c1->cbSet != null());		HX_STACK_VAR(tmp54,"tmp54");
											HX_STACK_LINE(6446)
											if ((tmp54)){
												HX_STACK_LINE(6446)
												::zpp_nape::util::ZNPList_ZPP_Interactor tmp55 = this->mrca1;		HX_STACK_VAR(tmp55,"tmp55");
												HX_STACK_LINE(6446)
												::zpp_nape::util::ZNPList_ZPP_Interactor _this = tmp55;		HX_STACK_VAR(_this,"_this");
												HX_STACK_LINE(6446)
												::zpp_nape::util::ZNPNode_ZPP_Interactor tmp56;		HX_STACK_VAR(tmp56,"tmp56");
												HX_STACK_LINE(6446)
												{
													HX_STACK_LINE(6446)
													::zpp_nape::util::ZNPNode_ZPP_Interactor ret1;		HX_STACK_VAR(ret1,"ret1");
													HX_STACK_LINE(6446)
													{
														HX_STACK_LINE(6446)
														::zpp_nape::util::ZNPNode_ZPP_Interactor tmp57 = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool;		HX_STACK_VAR(tmp57,"tmp57");
														HX_STACK_LINE(6446)
														bool tmp58 = (tmp57 == null());		HX_STACK_VAR(tmp58,"tmp58");
														HX_STACK_LINE(6446)
														if ((tmp58)){
															HX_STACK_LINE(6446)
															::zpp_nape::util::ZNPNode_ZPP_Interactor tmp59 = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::__new();		HX_STACK_VAR(tmp59,"tmp59");
															HX_STACK_LINE(6446)
															ret1 = tmp59;
														}
														else{
															HX_STACK_LINE(6446)
															::zpp_nape::util::ZNPNode_ZPP_Interactor tmp59 = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool;		HX_STACK_VAR(tmp59,"tmp59");
															HX_STACK_LINE(6446)
															ret1 = tmp59;
															HX_STACK_LINE(6446)
															::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool = ret1->next;
															HX_STACK_LINE(6446)
															ret1->next = null();
														}
														HX_STACK_LINE(6446)
														Dynamic();
													}
													HX_STACK_LINE(6446)
													ret1->elt = c1;
													HX_STACK_LINE(6446)
													tmp56 = ret1;
												}
												HX_STACK_LINE(6446)
												::zpp_nape::util::ZNPNode_ZPP_Interactor temp = tmp56;		HX_STACK_VAR(temp,"temp");
												HX_STACK_LINE(6446)
												temp->next = _this->head;
												HX_STACK_LINE(6446)
												_this->head = temp;
												HX_STACK_LINE(6446)
												_this->modified = true;
												HX_STACK_LINE(6446)
												(_this->length)++;
												HX_STACK_LINE(6446)
												c1;
											}
											HX_STACK_LINE(6446)
											c1 = c1->compound;
										}
									}
								}
								HX_STACK_LINE(6447)
								{
									HX_STACK_LINE(6448)
									::zpp_nape::util::ZNPList_ZPP_Interactor tmp39 = this->mrca1;		HX_STACK_VAR(tmp39,"tmp39");
									HX_STACK_LINE(6448)
									::zpp_nape::util::ZNPNode_ZPP_Interactor cx_ite = tmp39->head;		HX_STACK_VAR(cx_ite,"cx_ite");
									HX_STACK_LINE(6449)
									while((true)){
										HX_STACK_LINE(6449)
										bool tmp40 = (cx_ite != null());		HX_STACK_VAR(tmp40,"tmp40");
										HX_STACK_LINE(6449)
										bool tmp41 = !(tmp40);		HX_STACK_VAR(tmp41,"tmp41");
										HX_STACK_LINE(6449)
										if ((tmp41)){
											HX_STACK_LINE(6449)
											break;
										}
										HX_STACK_LINE(6450)
										::zpp_nape::phys::ZPP_Interactor i1 = cx_ite->elt;		HX_STACK_VAR(i1,"i1");
										HX_STACK_LINE(6452)
										{
											HX_STACK_LINE(6453)
											::zpp_nape::util::ZNPList_ZPP_Interactor tmp42 = this->mrca2;		HX_STACK_VAR(tmp42,"tmp42");
											HX_STACK_LINE(6453)
											::zpp_nape::util::ZNPNode_ZPP_Interactor cx_ite1 = tmp42->head;		HX_STACK_VAR(cx_ite1,"cx_ite1");
											HX_STACK_LINE(6454)
											while((true)){
												HX_STACK_LINE(6454)
												bool tmp43 = (cx_ite1 != null());		HX_STACK_VAR(tmp43,"tmp43");
												HX_STACK_LINE(6454)
												bool tmp44 = !(tmp43);		HX_STACK_VAR(tmp44,"tmp44");
												HX_STACK_LINE(6454)
												if ((tmp44)){
													HX_STACK_LINE(6454)
													break;
												}
												HX_STACK_LINE(6455)
												::zpp_nape::phys::ZPP_Interactor i2 = cx_ite1->elt;		HX_STACK_VAR(i2,"i2");
												HX_STACK_LINE(6456)
												{
													HX_STACK_LINE(6457)
													::zpp_nape::callbacks::ZPP_CbSet cb1 = i1->cbSet;		HX_STACK_VAR(cb1,"cb1");
													HX_STACK_LINE(6458)
													::zpp_nape::callbacks::ZPP_CbSet cb2 = i2->cbSet;		HX_STACK_VAR(cb2,"cb2");
													HX_STACK_LINE(6467)
													bool tmp45;		HX_STACK_VAR(tmp45,"tmp45");
													HX_STACK_LINE(6467)
													{
														HX_STACK_LINE(6467)
														::zpp_nape::callbacks::ZPP_CbSetPair tmp46;		HX_STACK_VAR(tmp46,"tmp46");
														HX_STACK_LINE(6467)
														{
															HX_STACK_LINE(6467)
															::zpp_nape::callbacks::ZPP_CbSetPair ret1 = null();		HX_STACK_VAR(ret1,"ret1");
															HX_STACK_LINE(6467)
															int tmp47 = cb1->cbpairs->length;		HX_STACK_VAR(tmp47,"tmp47");
															HX_STACK_LINE(6467)
															int tmp48 = cb2->cbpairs->length;		HX_STACK_VAR(tmp48,"tmp48");
															HX_STACK_LINE(6467)
															bool tmp49 = (tmp47 < tmp48);		HX_STACK_VAR(tmp49,"tmp49");
															HX_STACK_LINE(6467)
															::zpp_nape::util::ZNPList_ZPP_CbSetPair tmp50;		HX_STACK_VAR(tmp50,"tmp50");
															HX_STACK_LINE(6467)
															if ((tmp49)){
																HX_STACK_LINE(6467)
																tmp50 = cb1->cbpairs;
															}
															else{
																HX_STACK_LINE(6467)
																tmp50 = cb2->cbpairs;
															}
															HX_STACK_LINE(6467)
															::zpp_nape::util::ZNPList_ZPP_CbSetPair pairs = tmp50;		HX_STACK_VAR(pairs,"pairs");
															HX_STACK_LINE(6467)
															{
																HX_STACK_LINE(6467)
																::zpp_nape::util::ZNPNode_ZPP_CbSetPair cx_ite2 = pairs->head;		HX_STACK_VAR(cx_ite2,"cx_ite2");
																HX_STACK_LINE(6467)
																while((true)){
																	HX_STACK_LINE(6467)
																	bool tmp51 = (cx_ite2 != null());		HX_STACK_VAR(tmp51,"tmp51");
																	HX_STACK_LINE(6467)
																	bool tmp52 = !(tmp51);		HX_STACK_VAR(tmp52,"tmp52");
																	HX_STACK_LINE(6467)
																	if ((tmp52)){
																		HX_STACK_LINE(6467)
																		break;
																	}
																	HX_STACK_LINE(6467)
																	::zpp_nape::callbacks::ZPP_CbSetPair p = cx_ite2->elt;		HX_STACK_VAR(p,"p");
																	HX_STACK_LINE(6467)
																	{
																		HX_STACK_LINE(6467)
																		bool tmp53 = (p->a == cb1);		HX_STACK_VAR(tmp53,"tmp53");
																		HX_STACK_LINE(6467)
																		bool tmp54 = tmp53;		HX_STACK_VAR(tmp54,"tmp54");
																		HX_STACK_LINE(6467)
																		bool tmp55;		HX_STACK_VAR(tmp55,"tmp55");
																		HX_STACK_LINE(6467)
																		if ((tmp54)){
																			HX_STACK_LINE(6467)
																			tmp55 = (p->b == cb2);
																		}
																		else{
																			HX_STACK_LINE(6467)
																			tmp55 = false;
																		}
																		HX_STACK_LINE(6467)
																		bool tmp56 = !(tmp55);		HX_STACK_VAR(tmp56,"tmp56");
																		HX_STACK_LINE(6467)
																		bool tmp57;		HX_STACK_VAR(tmp57,"tmp57");
																		HX_STACK_LINE(6467)
																		if ((tmp56)){
																			HX_STACK_LINE(6467)
																			bool tmp58 = (p->a == cb2);		HX_STACK_VAR(tmp58,"tmp58");
																			HX_STACK_LINE(6467)
																			bool tmp59 = tmp58;		HX_STACK_VAR(tmp59,"tmp59");
																			HX_STACK_LINE(6467)
																			bool tmp60 = tmp59;		HX_STACK_VAR(tmp60,"tmp60");
																			HX_STACK_LINE(6467)
																			if ((tmp60)){
																				HX_STACK_LINE(6467)
																				tmp57 = (p->b == cb1);
																			}
																			else{
																				HX_STACK_LINE(6467)
																				tmp57 = false;
																			}
																		}
																		else{
																			HX_STACK_LINE(6467)
																			tmp57 = true;
																		}
																		HX_STACK_LINE(6467)
																		if ((tmp57)){
																			HX_STACK_LINE(6467)
																			ret1 = p;
																			HX_STACK_LINE(6467)
																			break;
																		}
																	}
																	HX_STACK_LINE(6467)
																	cx_ite2 = cx_ite2->next;
																}
															}
															HX_STACK_LINE(6467)
															bool tmp51 = (ret1 == null());		HX_STACK_VAR(tmp51,"tmp51");
															HX_STACK_LINE(6467)
															if ((tmp51)){
																HX_STACK_LINE(6467)
																::zpp_nape::callbacks::ZPP_CbSetPair tmp52;		HX_STACK_VAR(tmp52,"tmp52");
																HX_STACK_LINE(6467)
																{
																	HX_STACK_LINE(6467)
																	::zpp_nape::callbacks::ZPP_CbSetPair ret2;		HX_STACK_VAR(ret2,"ret2");
																	HX_STACK_LINE(6467)
																	{
																		HX_STACK_LINE(6467)
																		::zpp_nape::callbacks::ZPP_CbSetPair tmp53 = ::zpp_nape::callbacks::ZPP_CbSetPair_obj::zpp_pool;		HX_STACK_VAR(tmp53,"tmp53");
																		HX_STACK_LINE(6467)
																		bool tmp54 = (tmp53 == null());		HX_STACK_VAR(tmp54,"tmp54");
																		HX_STACK_LINE(6467)
																		if ((tmp54)){
																			HX_STACK_LINE(6467)
																			::zpp_nape::callbacks::ZPP_CbSetPair tmp55 = ::zpp_nape::callbacks::ZPP_CbSetPair_obj::__new();		HX_STACK_VAR(tmp55,"tmp55");
																			HX_STACK_LINE(6467)
																			ret2 = tmp55;
																		}
																		else{
																			HX_STACK_LINE(6467)
																			::zpp_nape::callbacks::ZPP_CbSetPair tmp55 = ::zpp_nape::callbacks::ZPP_CbSetPair_obj::zpp_pool;		HX_STACK_VAR(tmp55,"tmp55");
																			HX_STACK_LINE(6467)
																			ret2 = tmp55;
																			HX_STACK_LINE(6467)
																			::zpp_nape::callbacks::ZPP_CbSetPair_obj::zpp_pool = ret2->next;
																			HX_STACK_LINE(6467)
																			ret2->next = null();
																		}
																		HX_STACK_LINE(6467)
																		ret2->zip_listeners = true;
																	}
																	HX_STACK_LINE(6467)
																	::zpp_nape::callbacks::ZPP_CbSet tmp53 = cb1;		HX_STACK_VAR(tmp53,"tmp53");
																	HX_STACK_LINE(6467)
																	::zpp_nape::callbacks::ZPP_CbSet tmp54 = cb2;		HX_STACK_VAR(tmp54,"tmp54");
																	HX_STACK_LINE(6467)
																	bool tmp55 = ::zpp_nape::callbacks::ZPP_CbSet_obj::setlt(tmp53,tmp54);		HX_STACK_VAR(tmp55,"tmp55");
																	HX_STACK_LINE(6467)
																	if ((tmp55)){
																		HX_STACK_LINE(6467)
																		ret2->a = cb1;
																		HX_STACK_LINE(6467)
																		ret2->b = cb2;
																	}
																	else{
																		HX_STACK_LINE(6467)
																		ret2->a = cb2;
																		HX_STACK_LINE(6467)
																		ret2->b = cb1;
																	}
																	HX_STACK_LINE(6467)
																	tmp52 = ret2;
																}
																HX_STACK_LINE(6467)
																ret1 = tmp52;
																HX_STACK_LINE(6467)
																::zpp_nape::callbacks::ZPP_CbSetPair tmp53 = ret1;		HX_STACK_VAR(tmp53,"tmp53");
																HX_STACK_LINE(6467)
																cb1->cbpairs->add(tmp53);
																HX_STACK_LINE(6467)
																bool tmp54 = (cb2 != cb1);		HX_STACK_VAR(tmp54,"tmp54");
																HX_STACK_LINE(6467)
																if ((tmp54)){
																	HX_STACK_LINE(6467)
																	::zpp_nape::callbacks::ZPP_CbSetPair tmp55 = ret1;		HX_STACK_VAR(tmp55,"tmp55");
																	HX_STACK_LINE(6467)
																	cb2->cbpairs->add(tmp55);
																}
															}
															HX_STACK_LINE(6467)
															{
																HX_STACK_LINE(6467)
																bool tmp52 = ret1->zip_listeners;		HX_STACK_VAR(tmp52,"tmp52");
																HX_STACK_LINE(6467)
																if ((tmp52)){
																	HX_STACK_LINE(6467)
																	ret1->zip_listeners = false;
																	HX_STACK_LINE(6467)
																	ret1->__validate();
																}
															}
															HX_STACK_LINE(6467)
															tmp46 = ret1;
														}
														HX_STACK_LINE(6467)
														::zpp_nape::callbacks::ZPP_CbSetPair _this = tmp46;		HX_STACK_VAR(_this,"_this");
														HX_STACK_LINE(6467)
														::zpp_nape::util::ZNPNode_ZPP_InteractionListener tmp47 = _this->listeners->head;		HX_STACK_VAR(tmp47,"tmp47");
														HX_STACK_LINE(6467)
														tmp45 = (tmp47 == null());
													}
													HX_STACK_LINE(6467)
													if ((tmp45)){
														HX_STACK_LINE(6468)
														cx_ite1 = cx_ite1->next;
														HX_STACK_LINE(6469)
														continue;
													}
													HX_STACK_LINE(6471)
													::zpp_nape::space::ZPP_CallbackSet callbackset = null();		HX_STACK_VAR(callbackset,"callbackset");
													HX_STACK_LINE(6472)
													::zpp_nape::space::ZPP_CallbackSet ncallbackset = null();		HX_STACK_VAR(ncallbackset,"ncallbackset");
													HX_STACK_LINE(6473)
													{
														HX_STACK_LINE(6473)
														::zpp_nape::util::ZNPList_ZPP_InteractionListener tmp46 = this->prelisteners;		HX_STACK_VAR(tmp46,"tmp46");
														HX_STACK_LINE(6473)
														::zpp_nape::util::ZNPList_ZPP_InteractionListener _this = tmp46;		HX_STACK_VAR(_this,"_this");
														HX_STACK_LINE(6473)
														{
															HX_STACK_LINE(6473)
															while((true)){
																HX_STACK_LINE(6473)
																bool tmp47 = (_this->head == null());		HX_STACK_VAR(tmp47,"tmp47");
																HX_STACK_LINE(6473)
																bool tmp48 = !(tmp47);		HX_STACK_VAR(tmp48,"tmp48");
																HX_STACK_LINE(6473)
																bool tmp49 = !(tmp48);		HX_STACK_VAR(tmp49,"tmp49");
																HX_STACK_LINE(6473)
																if ((tmp49)){
																	HX_STACK_LINE(6473)
																	break;
																}
																HX_STACK_LINE(6473)
																::zpp_nape::util::ZNPNode_ZPP_InteractionListener ret1 = _this->head;		HX_STACK_VAR(ret1,"ret1");
																HX_STACK_LINE(6473)
																_this->head = ret1->next;
																HX_STACK_LINE(6473)
																{
																	HX_STACK_LINE(6473)
																	::zpp_nape::util::ZNPNode_ZPP_InteractionListener o = ret1;		HX_STACK_VAR(o,"o");
																	HX_STACK_LINE(6473)
																	o->elt = null();
																	HX_STACK_LINE(6473)
																	::zpp_nape::util::ZNPNode_ZPP_InteractionListener tmp50 = ::zpp_nape::util::ZNPNode_ZPP_InteractionListener_obj::zpp_pool;		HX_STACK_VAR(tmp50,"tmp50");
																	HX_STACK_LINE(6473)
																	o->next = tmp50;
																	HX_STACK_LINE(6473)
																	::zpp_nape::util::ZNPNode_ZPP_InteractionListener_obj::zpp_pool = o;
																}
																HX_STACK_LINE(6473)
																bool tmp50 = (_this->head == null());		HX_STACK_VAR(tmp50,"tmp50");
																HX_STACK_LINE(6473)
																if ((tmp50)){
																	HX_STACK_LINE(6473)
																	_this->pushmod = true;
																}
																HX_STACK_LINE(6473)
																_this->modified = true;
																HX_STACK_LINE(6473)
																(_this->length)--;
															}
															HX_STACK_LINE(6473)
															_this->pushmod = true;
														}
													}
													HX_STACK_LINE(6474)
													::zpp_nape::util::ZNPNode_ZPP_InteractionListener lite = null();		HX_STACK_VAR(lite,"lite");
													HX_STACK_LINE(6475)
													{
														HX_STACK_LINE(6475)
														int tmp46 = ::zpp_nape::util::ZPP_Flags_obj::id_CbEvent_PRE;		HX_STACK_VAR(tmp46,"tmp46");
														HX_STACK_LINE(6475)
														int event = tmp46;		HX_STACK_VAR(event,"event");
														HX_STACK_LINE(6475)
														{
															HX_STACK_LINE(6475)
															::zpp_nape::callbacks::ZPP_CbSetPair tmp47;		HX_STACK_VAR(tmp47,"tmp47");
															HX_STACK_LINE(6475)
															{
																HX_STACK_LINE(6475)
																::zpp_nape::callbacks::ZPP_CbSetPair ret1 = null();		HX_STACK_VAR(ret1,"ret1");
																HX_STACK_LINE(6475)
																int tmp48 = cb1->cbpairs->length;		HX_STACK_VAR(tmp48,"tmp48");
																HX_STACK_LINE(6475)
																int tmp49 = cb2->cbpairs->length;		HX_STACK_VAR(tmp49,"tmp49");
																HX_STACK_LINE(6475)
																bool tmp50 = (tmp48 < tmp49);		HX_STACK_VAR(tmp50,"tmp50");
																HX_STACK_LINE(6475)
																::zpp_nape::util::ZNPList_ZPP_CbSetPair tmp51;		HX_STACK_VAR(tmp51,"tmp51");
																HX_STACK_LINE(6475)
																if ((tmp50)){
																	HX_STACK_LINE(6475)
																	tmp51 = cb1->cbpairs;
																}
																else{
																	HX_STACK_LINE(6475)
																	tmp51 = cb2->cbpairs;
																}
																HX_STACK_LINE(6475)
																::zpp_nape::util::ZNPList_ZPP_CbSetPair pairs = tmp51;		HX_STACK_VAR(pairs,"pairs");
																HX_STACK_LINE(6475)
																{
																	HX_STACK_LINE(6475)
																	::zpp_nape::util::ZNPNode_ZPP_CbSetPair cx_ite2 = pairs->head;		HX_STACK_VAR(cx_ite2,"cx_ite2");
																	HX_STACK_LINE(6475)
																	while((true)){
																		HX_STACK_LINE(6475)
																		bool tmp52 = (cx_ite2 != null());		HX_STACK_VAR(tmp52,"tmp52");
																		HX_STACK_LINE(6475)
																		bool tmp53 = !(tmp52);		HX_STACK_VAR(tmp53,"tmp53");
																		HX_STACK_LINE(6475)
																		if ((tmp53)){
																			HX_STACK_LINE(6475)
																			break;
																		}
																		HX_STACK_LINE(6475)
																		::zpp_nape::callbacks::ZPP_CbSetPair p = cx_ite2->elt;		HX_STACK_VAR(p,"p");
																		HX_STACK_LINE(6475)
																		{
																			HX_STACK_LINE(6475)
																			bool tmp54 = (p->a == cb1);		HX_STACK_VAR(tmp54,"tmp54");
																			HX_STACK_LINE(6475)
																			bool tmp55 = tmp54;		HX_STACK_VAR(tmp55,"tmp55");
																			HX_STACK_LINE(6475)
																			bool tmp56;		HX_STACK_VAR(tmp56,"tmp56");
																			HX_STACK_LINE(6475)
																			if ((tmp55)){
																				HX_STACK_LINE(6475)
																				tmp56 = (p->b == cb2);
																			}
																			else{
																				HX_STACK_LINE(6475)
																				tmp56 = false;
																			}
																			HX_STACK_LINE(6475)
																			bool tmp57 = !(tmp56);		HX_STACK_VAR(tmp57,"tmp57");
																			HX_STACK_LINE(6475)
																			bool tmp58;		HX_STACK_VAR(tmp58,"tmp58");
																			HX_STACK_LINE(6475)
																			if ((tmp57)){
																				HX_STACK_LINE(6475)
																				bool tmp59 = (p->a == cb2);		HX_STACK_VAR(tmp59,"tmp59");
																				HX_STACK_LINE(6475)
																				bool tmp60 = tmp59;		HX_STACK_VAR(tmp60,"tmp60");
																				HX_STACK_LINE(6475)
																				bool tmp61 = tmp60;		HX_STACK_VAR(tmp61,"tmp61");
																				HX_STACK_LINE(6475)
																				if ((tmp61)){
																					HX_STACK_LINE(6475)
																					tmp58 = (p->b == cb1);
																				}
																				else{
																					HX_STACK_LINE(6475)
																					tmp58 = false;
																				}
																			}
																			else{
																				HX_STACK_LINE(6475)
																				tmp58 = true;
																			}
																			HX_STACK_LINE(6475)
																			if ((tmp58)){
																				HX_STACK_LINE(6475)
																				ret1 = p;
																				HX_STACK_LINE(6475)
																				break;
																			}
																		}
																		HX_STACK_LINE(6475)
																		cx_ite2 = cx_ite2->next;
																	}
																}
																HX_STACK_LINE(6475)
																bool tmp52 = (ret1 == null());		HX_STACK_VAR(tmp52,"tmp52");
																HX_STACK_LINE(6475)
																if ((tmp52)){
																	HX_STACK_LINE(6475)
																	::zpp_nape::callbacks::ZPP_CbSetPair tmp53;		HX_STACK_VAR(tmp53,"tmp53");
																	HX_STACK_LINE(6475)
																	{
																		HX_STACK_LINE(6475)
																		::zpp_nape::callbacks::ZPP_CbSetPair ret2;		HX_STACK_VAR(ret2,"ret2");
																		HX_STACK_LINE(6475)
																		{
																			HX_STACK_LINE(6475)
																			::zpp_nape::callbacks::ZPP_CbSetPair tmp54 = ::zpp_nape::callbacks::ZPP_CbSetPair_obj::zpp_pool;		HX_STACK_VAR(tmp54,"tmp54");
																			HX_STACK_LINE(6475)
																			bool tmp55 = (tmp54 == null());		HX_STACK_VAR(tmp55,"tmp55");
																			HX_STACK_LINE(6475)
																			if ((tmp55)){
																				HX_STACK_LINE(6475)
																				::zpp_nape::callbacks::ZPP_CbSetPair tmp56 = ::zpp_nape::callbacks::ZPP_CbSetPair_obj::__new();		HX_STACK_VAR(tmp56,"tmp56");
																				HX_STACK_LINE(6475)
																				ret2 = tmp56;
																			}
																			else{
																				HX_STACK_LINE(6475)
																				::zpp_nape::callbacks::ZPP_CbSetPair tmp56 = ::zpp_nape::callbacks::ZPP_CbSetPair_obj::zpp_pool;		HX_STACK_VAR(tmp56,"tmp56");
																				HX_STACK_LINE(6475)
																				ret2 = tmp56;
																				HX_STACK_LINE(6475)
																				::zpp_nape::callbacks::ZPP_CbSetPair_obj::zpp_pool = ret2->next;
																				HX_STACK_LINE(6475)
																				ret2->next = null();
																			}
																			HX_STACK_LINE(6475)
																			ret2->zip_listeners = true;
																		}
																		HX_STACK_LINE(6475)
																		::zpp_nape::callbacks::ZPP_CbSet tmp54 = cb1;		HX_STACK_VAR(tmp54,"tmp54");
																		HX_STACK_LINE(6475)
																		::zpp_nape::callbacks::ZPP_CbSet tmp55 = cb2;		HX_STACK_VAR(tmp55,"tmp55");
																		HX_STACK_LINE(6475)
																		bool tmp56 = ::zpp_nape::callbacks::ZPP_CbSet_obj::setlt(tmp54,tmp55);		HX_STACK_VAR(tmp56,"tmp56");
																		HX_STACK_LINE(6475)
																		if ((tmp56)){
																			HX_STACK_LINE(6475)
																			ret2->a = cb1;
																			HX_STACK_LINE(6475)
																			ret2->b = cb2;
																		}
																		else{
																			HX_STACK_LINE(6475)
																			ret2->a = cb2;
																			HX_STACK_LINE(6475)
																			ret2->b = cb1;
																		}
																		HX_STACK_LINE(6475)
																		tmp53 = ret2;
																	}
																	HX_STACK_LINE(6475)
																	ret1 = tmp53;
																	HX_STACK_LINE(6475)
																	::zpp_nape::callbacks::ZPP_CbSetPair tmp54 = ret1;		HX_STACK_VAR(tmp54,"tmp54");
																	HX_STACK_LINE(6475)
																	cb1->cbpairs->add(tmp54);
																	HX_STACK_LINE(6475)
																	bool tmp55 = (cb2 != cb1);		HX_STACK_VAR(tmp55,"tmp55");
																	HX_STACK_LINE(6475)
																	if ((tmp55)){
																		HX_STACK_LINE(6475)
																		::zpp_nape::callbacks::ZPP_CbSetPair tmp56 = ret1;		HX_STACK_VAR(tmp56,"tmp56");
																		HX_STACK_LINE(6475)
																		cb2->cbpairs->add(tmp56);
																	}
																}
																HX_STACK_LINE(6475)
																{
																	HX_STACK_LINE(6475)
																	bool tmp53 = ret1->zip_listeners;		HX_STACK_VAR(tmp53,"tmp53");
																	HX_STACK_LINE(6475)
																	if ((tmp53)){
																		HX_STACK_LINE(6475)
																		ret1->zip_listeners = false;
																		HX_STACK_LINE(6475)
																		ret1->__validate();
																	}
																}
																HX_STACK_LINE(6475)
																tmp47 = ret1;
															}
															HX_STACK_LINE(6475)
															::zpp_nape::callbacks::ZPP_CbSetPair _this = tmp47;		HX_STACK_VAR(_this,"_this");
															HX_STACK_LINE(6475)
															{
																HX_STACK_LINE(6475)
																::zpp_nape::util::ZNPNode_ZPP_InteractionListener tmp48 = _this->listeners->head;		HX_STACK_VAR(tmp48,"tmp48");
																HX_STACK_LINE(6475)
																::zpp_nape::util::ZNPNode_ZPP_InteractionListener cx_ite2 = tmp48;		HX_STACK_VAR(cx_ite2,"cx_ite2");
																HX_STACK_LINE(6475)
																while((true)){
																	HX_STACK_LINE(6475)
																	bool tmp49 = (cx_ite2 != null());		HX_STACK_VAR(tmp49,"tmp49");
																	HX_STACK_LINE(6475)
																	bool tmp50 = !(tmp49);		HX_STACK_VAR(tmp50,"tmp50");
																	HX_STACK_LINE(6475)
																	if ((tmp50)){
																		HX_STACK_LINE(6475)
																		break;
																	}
																	HX_STACK_LINE(6475)
																	::zpp_nape::callbacks::ZPP_InteractionListener x = cx_ite2->elt;		HX_STACK_VAR(x,"x");
																	HX_STACK_LINE(6475)
																	{
																		HX_STACK_LINE(6475)
																		bool tmp51 = (x->event == event);		HX_STACK_VAR(tmp51,"tmp51");
																		HX_STACK_LINE(6475)
																		if ((tmp51)){
																			HX_STACK_LINE(6475)
																			::zpp_nape::callbacks::ZPP_InteractionListener tmp52 = x;		HX_STACK_VAR(tmp52,"tmp52");
																			HX_STACK_LINE(6476)
																			{
																				HX_STACK_LINE(6476)
																				int tmp53 = (int(tmp52->itype) & int(inttype));		HX_STACK_VAR(tmp53,"tmp53");
																				HX_STACK_LINE(6476)
																				bool tmp54 = (tmp53 != (int)0);		HX_STACK_VAR(tmp54,"tmp54");
																				HX_STACK_LINE(6476)
																				if ((tmp54)){
																					HX_STACK_LINE(6477)
																					::zpp_nape::util::ZNPNode_ZPP_InteractionListener tmp55;		HX_STACK_VAR(tmp55,"tmp55");
																					HX_STACK_LINE(6477)
																					{
																						HX_STACK_LINE(6477)
																						::zpp_nape::util::ZNPList_ZPP_InteractionListener _this1 = _g->prelisteners;		HX_STACK_VAR(_this1,"_this1");
																						HX_STACK_LINE(6477)
																						::zpp_nape::util::ZNPNode_ZPP_InteractionListener tmp56;		HX_STACK_VAR(tmp56,"tmp56");
																						HX_STACK_LINE(6477)
																						{
																							HX_STACK_LINE(6477)
																							::zpp_nape::util::ZNPNode_ZPP_InteractionListener ret1;		HX_STACK_VAR(ret1,"ret1");
																							HX_STACK_LINE(6477)
																							{
																								HX_STACK_LINE(6477)
																								::zpp_nape::util::ZNPNode_ZPP_InteractionListener tmp57 = ::zpp_nape::util::ZNPNode_ZPP_InteractionListener_obj::zpp_pool;		HX_STACK_VAR(tmp57,"tmp57");
																								HX_STACK_LINE(6477)
																								bool tmp58 = (tmp57 == null());		HX_STACK_VAR(tmp58,"tmp58");
																								HX_STACK_LINE(6477)
																								if ((tmp58)){
																									HX_STACK_LINE(6477)
																									::zpp_nape::util::ZNPNode_ZPP_InteractionListener tmp59 = ::zpp_nape::util::ZNPNode_ZPP_InteractionListener_obj::__new();		HX_STACK_VAR(tmp59,"tmp59");
																									HX_STACK_LINE(6477)
																									ret1 = tmp59;
																								}
																								else{
																									HX_STACK_LINE(6477)
																									::zpp_nape::util::ZNPNode_ZPP_InteractionListener tmp59 = ::zpp_nape::util::ZNPNode_ZPP_InteractionListener_obj::zpp_pool;		HX_STACK_VAR(tmp59,"tmp59");
																									HX_STACK_LINE(6477)
																									ret1 = tmp59;
																									HX_STACK_LINE(6477)
																									::zpp_nape::util::ZNPNode_ZPP_InteractionListener_obj::zpp_pool = ret1->next;
																									HX_STACK_LINE(6477)
																									ret1->next = null();
																								}
																								HX_STACK_LINE(6477)
																								Dynamic();
																							}
																							HX_STACK_LINE(6477)
																							ret1->elt = tmp52;
																							HX_STACK_LINE(6477)
																							tmp56 = ret1;
																						}
																						HX_STACK_LINE(6477)
																						::zpp_nape::util::ZNPNode_ZPP_InteractionListener temp = tmp56;		HX_STACK_VAR(temp,"temp");
																						HX_STACK_LINE(6477)
																						bool tmp57 = (lite == null());		HX_STACK_VAR(tmp57,"tmp57");
																						HX_STACK_LINE(6477)
																						if ((tmp57)){
																							HX_STACK_LINE(6477)
																							temp->next = _this1->head;
																							HX_STACK_LINE(6477)
																							_this1->head = temp;
																						}
																						else{
																							HX_STACK_LINE(6477)
																							temp->next = lite->next;
																							HX_STACK_LINE(6477)
																							lite->next = temp;
																						}
																						HX_STACK_LINE(6477)
																						bool tmp58 = _this1->modified = true;		HX_STACK_VAR(tmp58,"tmp58");
																						HX_STACK_LINE(6477)
																						_this1->pushmod = tmp58;
																						HX_STACK_LINE(6477)
																						(_this1->length)++;
																						HX_STACK_LINE(6477)
																						tmp55 = temp;
																					}
																					HX_STACK_LINE(6477)
																					lite = tmp55;
																					HX_STACK_LINE(6478)
																					bool tmp56 = anyimpure;		HX_STACK_VAR(tmp56,"tmp56");
																					HX_STACK_LINE(6478)
																					bool tmp57 = !(tmp56);		HX_STACK_VAR(tmp57,"tmp57");
																					HX_STACK_LINE(6478)
																					bool tmp58;		HX_STACK_VAR(tmp58,"tmp58");
																					HX_STACK_LINE(6478)
																					if ((tmp57)){
																						HX_STACK_LINE(6478)
																						bool tmp59 = tmp52->pure;		HX_STACK_VAR(tmp59,"tmp59");
																						HX_STACK_LINE(6478)
																						bool tmp60 = tmp59;		HX_STACK_VAR(tmp60,"tmp60");
																						HX_STACK_LINE(6478)
																						tmp58 = !(tmp60);
																					}
																					else{
																						HX_STACK_LINE(6478)
																						tmp58 = true;
																					}
																					HX_STACK_LINE(6478)
																					anyimpure = tmp58;
																				}
																			}
																		}
																	}
																	HX_STACK_LINE(6475)
																	cx_ite2 = cx_ite2->next;
																}
															}
														}
													}
													HX_STACK_LINE(6481)
													::zpp_nape::util::ZNPList_ZPP_InteractionListener tmp46 = this->prelisteners;		HX_STACK_VAR(tmp46,"tmp46");
													HX_STACK_LINE(6481)
													::zpp_nape::util::ZNPNode_ZPP_InteractionListener tmp47 = tmp46->head;		HX_STACK_VAR(tmp47,"tmp47");
													HX_STACK_LINE(6481)
													bool tmp48 = (tmp47 == null());		HX_STACK_VAR(tmp48,"tmp48");
													HX_STACK_LINE(6481)
													if ((tmp48)){
														HX_STACK_LINE(6482)
														cx_ite1 = cx_ite1->next;
														HX_STACK_LINE(6483)
														continue;
													}
													HX_STACK_LINE(6485)
													::zpp_nape::phys::ZPP_Interactor tmp49 = i1;		HX_STACK_VAR(tmp49,"tmp49");
													HX_STACK_LINE(6485)
													::zpp_nape::phys::ZPP_Interactor tmp50 = i2;		HX_STACK_VAR(tmp50,"tmp50");
													HX_STACK_LINE(6485)
													::zpp_nape::space::ZPP_CallbackSet tmp51 = ::zpp_nape::phys::ZPP_Interactor_obj::get(tmp49,tmp50);		HX_STACK_VAR(tmp51,"tmp51");
													HX_STACK_LINE(6485)
													callbackset = tmp51;
													HX_STACK_LINE(6486)
													bool tmp52 = (callbackset == null());		HX_STACK_VAR(tmp52,"tmp52");
													HX_STACK_LINE(6486)
													if ((tmp52)){
														HX_STACK_LINE(6487)
														::zpp_nape::phys::ZPP_Interactor tmp53 = i1;		HX_STACK_VAR(tmp53,"tmp53");
														HX_STACK_LINE(6487)
														::zpp_nape::phys::ZPP_Interactor tmp54 = i2;		HX_STACK_VAR(tmp54,"tmp54");
														HX_STACK_LINE(6487)
														::zpp_nape::space::ZPP_CallbackSet tmp55 = ::zpp_nape::space::ZPP_CallbackSet_obj::get(tmp53,tmp54);		HX_STACK_VAR(tmp55,"tmp55");
														HX_STACK_LINE(6487)
														ncallbackset = tmp55;
														HX_STACK_LINE(6488)
														::zpp_nape::space::ZPP_CallbackSet tmp56 = ncallbackset;		HX_STACK_VAR(tmp56,"tmp56");
														HX_STACK_LINE(6488)
														this->add_callbackset(tmp56);
													}
													HX_STACK_LINE(6490)
													bool tmp53 = (callbackset == null());		HX_STACK_VAR(tmp53,"tmp53");
													HX_STACK_LINE(6490)
													bool tmp54 = !(tmp53);		HX_STACK_VAR(tmp54,"tmp54");
													HX_STACK_LINE(6490)
													bool tmp55;		HX_STACK_VAR(tmp55,"tmp55");
													HX_STACK_LINE(6490)
													if ((tmp54)){
														HX_STACK_LINE(6490)
														int tmp56 = callbackset->COLLISIONstamp;		HX_STACK_VAR(tmp56,"tmp56");
														HX_STACK_LINE(6490)
														int tmp57 = this->stamp;		HX_STACK_VAR(tmp57,"tmp57");
														HX_STACK_LINE(6490)
														int tmp58 = tmp57;		HX_STACK_VAR(tmp58,"tmp58");
														HX_STACK_LINE(6490)
														bool tmp59 = (tmp56 != tmp58);		HX_STACK_VAR(tmp59,"tmp59");
														HX_STACK_LINE(6490)
														bool tmp60 = tmp59;		HX_STACK_VAR(tmp60,"tmp60");
														HX_STACK_LINE(6490)
														bool tmp61 = tmp60;		HX_STACK_VAR(tmp61,"tmp61");
														HX_STACK_LINE(6490)
														bool tmp62 = !(tmp61);		HX_STACK_VAR(tmp62,"tmp62");
														HX_STACK_LINE(6490)
														bool tmp63 = tmp62;		HX_STACK_VAR(tmp63,"tmp63");
														HX_STACK_LINE(6490)
														bool tmp64 = tmp63;		HX_STACK_VAR(tmp64,"tmp64");
														HX_STACK_LINE(6490)
														bool tmp65;		HX_STACK_VAR(tmp65,"tmp65");
														HX_STACK_LINE(6490)
														bool tmp66 = tmp64;		HX_STACK_VAR(tmp66,"tmp66");
														HX_STACK_LINE(6490)
														if ((tmp66)){
															HX_STACK_LINE(6490)
															tmp65 = continuous;
														}
														else{
															HX_STACK_LINE(6490)
															tmp65 = true;
														}
														HX_STACK_LINE(6490)
														bool tmp67 = tmp65;		HX_STACK_VAR(tmp67,"tmp67");
														HX_STACK_LINE(6490)
														if ((tmp67)){
															HX_STACK_LINE(6490)
															int tmp68 = callbackset->COLLISIONstate;		HX_STACK_VAR(tmp68,"tmp68");
															HX_STACK_LINE(6490)
															int tmp69 = ::zpp_nape::util::ZPP_Flags_obj::id_ImmState_ALWAYS;		HX_STACK_VAR(tmp69,"tmp69");
															HX_STACK_LINE(6490)
															int tmp70 = tmp69;		HX_STACK_VAR(tmp70,"tmp70");
															HX_STACK_LINE(6490)
															int tmp71 = tmp70;		HX_STACK_VAR(tmp71,"tmp71");
															HX_STACK_LINE(6490)
															int tmp72 = (int(tmp68) & int(tmp71));		HX_STACK_VAR(tmp72,"tmp72");
															HX_STACK_LINE(6490)
															int tmp73 = tmp72;		HX_STACK_VAR(tmp73,"tmp73");
															HX_STACK_LINE(6490)
															int tmp74 = tmp73;		HX_STACK_VAR(tmp74,"tmp74");
															HX_STACK_LINE(6490)
															tmp55 = (tmp74 == (int)0);
														}
														else{
															HX_STACK_LINE(6490)
															tmp55 = false;
														}
													}
													else{
														HX_STACK_LINE(6490)
														tmp55 = true;
													}
													HX_STACK_LINE(6490)
													if ((tmp55)){
														HX_STACK_LINE(6491)
														bool tmp56 = (ncallbackset != null());		HX_STACK_VAR(tmp56,"tmp56");
														HX_STACK_LINE(6491)
														if ((tmp56)){
															HX_STACK_LINE(6491)
															callbackset = ncallbackset;
														}
														HX_STACK_LINE(6492)
														bool tmp57 = (callbackset != null());		HX_STACK_VAR(tmp57,"tmp57");
														HX_STACK_LINE(6492)
														if ((tmp57)){
															HX_STACK_LINE(6494)
															::zpp_nape::util::ZNPList_ZPP_InteractionListener tmp58 = this->prelisteners;		HX_STACK_VAR(tmp58,"tmp58");
															HX_STACK_LINE(6494)
															::zpp_nape::util::ZNPNode_ZPP_InteractionListener cx_ite2 = tmp58->head;		HX_STACK_VAR(cx_ite2,"cx_ite2");
															HX_STACK_LINE(6495)
															while((true)){
																HX_STACK_LINE(6495)
																bool tmp59 = (cx_ite2 != null());		HX_STACK_VAR(tmp59,"tmp59");
																HX_STACK_LINE(6495)
																bool tmp60 = !(tmp59);		HX_STACK_VAR(tmp60,"tmp60");
																HX_STACK_LINE(6495)
																if ((tmp60)){
																	HX_STACK_LINE(6495)
																	break;
																}
																HX_STACK_LINE(6496)
																::zpp_nape::callbacks::ZPP_InteractionListener listener = cx_ite2->elt;		HX_STACK_VAR(listener,"listener");
																HX_STACK_LINE(6497)
																{
																	HX_STACK_LINE(6498)
																	int tmp61 = listener->itype;		HX_STACK_VAR(tmp61,"tmp61");
																	HX_STACK_LINE(6498)
																	int tmp62 = ::zpp_nape::util::ZPP_Flags_obj::id_InteractionType_ANY;		HX_STACK_VAR(tmp62,"tmp62");
																	HX_STACK_LINE(6498)
																	bool tmp63 = (tmp61 == tmp62);		HX_STACK_VAR(tmp63,"tmp63");
																	HX_STACK_LINE(6498)
																	if ((tmp63)){
																		HX_STACK_LINE(6499)
																		int tmp64 = this->stamp;		HX_STACK_VAR(tmp64,"tmp64");
																		HX_STACK_LINE(6499)
																		callbackset->COLLISIONstamp = tmp64;
																		HX_STACK_LINE(6500)
																		int tmp65 = this->stamp;		HX_STACK_VAR(tmp65,"tmp65");
																		HX_STACK_LINE(6500)
																		callbackset->SENSORstamp = tmp65;
																		HX_STACK_LINE(6501)
																		int tmp66 = this->stamp;		HX_STACK_VAR(tmp66,"tmp66");
																		HX_STACK_LINE(6501)
																		callbackset->FLUIDstamp = tmp66;
																	}
																	else{
																		HX_STACK_LINE(6503)
																		int tmp64 = this->stamp;		HX_STACK_VAR(tmp64,"tmp64");
																		HX_STACK_LINE(6503)
																		callbackset->COLLISIONstamp = tmp64;
																	}
																}
																HX_STACK_LINE(6505)
																cx_ite2 = cx_ite2->next;
															}
														}
														HX_STACK_LINE(6510)
														{
															HX_STACK_LINE(6510)
															arb->_mutable = true;
															HX_STACK_LINE(6510)
															bool tmp58 = (arb->wrap_normal != null());		HX_STACK_VAR(tmp58,"tmp58");
															HX_STACK_LINE(6510)
															if ((tmp58)){
																HX_STACK_LINE(6510)
																::zpp_nape::geom::ZPP_Vec2 tmp59 = arb->wrap_normal->zpp_inner;		HX_STACK_VAR(tmp59,"tmp59");
																HX_STACK_LINE(6510)
																tmp59->_immutable = false;
															}
															HX_STACK_LINE(6510)
															bool tmp59 = (arb->wrap_contacts != null());		HX_STACK_VAR(tmp59,"tmp59");
															HX_STACK_LINE(6510)
															if ((tmp59)){
																HX_STACK_LINE(6510)
																::zpp_nape::util::ZPP_ContactList tmp60 = arb->wrap_contacts->zpp_inner;		HX_STACK_VAR(tmp60,"tmp60");
																HX_STACK_LINE(6510)
																tmp60->immutable = false;
															}
														}
														HX_STACK_LINE(6512)
														bool pact = arb->active;		HX_STACK_VAR(pact,"pact");
														HX_STACK_LINE(6513)
														arb->active = true;
														HX_STACK_LINE(6514)
														bool emptycontacts = false;		HX_STACK_VAR(emptycontacts,"emptycontacts");
														HX_STACK_LINE(6515)
														{
															HX_STACK_LINE(6515)
															bool fst = true;		HX_STACK_VAR(fst,"fst");
															HX_STACK_LINE(6515)
															::zpp_nape::dynamics::ZPP_Contact pre = null();		HX_STACK_VAR(pre,"pre");
															HX_STACK_LINE(6515)
															::zpp_nape::dynamics::ZPP_IContact prei = null();		HX_STACK_VAR(prei,"prei");
															HX_STACK_LINE(6515)
															::zpp_nape::dynamics::ZPP_IContact tmp58 = arb->innards->next;		HX_STACK_VAR(tmp58,"tmp58");
															HX_STACK_LINE(6515)
															::zpp_nape::dynamics::ZPP_IContact cx_itei = tmp58;		HX_STACK_VAR(cx_itei,"cx_itei");
															HX_STACK_LINE(6515)
															arb->hc2 = false;
															HX_STACK_LINE(6515)
															{
																HX_STACK_LINE(6515)
																::zpp_nape::dynamics::ZPP_Contact tmp59 = arb->contacts->next;		HX_STACK_VAR(tmp59,"tmp59");
																HX_STACK_LINE(6515)
																::zpp_nape::dynamics::ZPP_Contact cx_ite2 = tmp59;		HX_STACK_VAR(cx_ite2,"cx_ite2");
																HX_STACK_LINE(6515)
																while((true)){
																	HX_STACK_LINE(6515)
																	bool tmp60 = (cx_ite2 != null());		HX_STACK_VAR(tmp60,"tmp60");
																	HX_STACK_LINE(6515)
																	bool tmp61 = !(tmp60);		HX_STACK_VAR(tmp61,"tmp61");
																	HX_STACK_LINE(6515)
																	if ((tmp61)){
																		HX_STACK_LINE(6515)
																		break;
																	}
																	HX_STACK_LINE(6515)
																	::zpp_nape::dynamics::ZPP_Contact c = cx_ite2;		HX_STACK_VAR(c,"c");
																	HX_STACK_LINE(6515)
																	{
																		HX_STACK_LINE(6515)
																		int tmp62 = c->stamp;		HX_STACK_VAR(tmp62,"tmp62");
																		HX_STACK_LINE(6515)
																		int tmp63 = ::nape::Config_obj::arbiterExpirationDelay;		HX_STACK_VAR(tmp63,"tmp63");
																		HX_STACK_LINE(6515)
																		int tmp64 = (tmp62 + tmp63);		HX_STACK_VAR(tmp64,"tmp64");
																		HX_STACK_LINE(6515)
																		int tmp65 = arb->stamp;		HX_STACK_VAR(tmp65,"tmp65");
																		HX_STACK_LINE(6515)
																		bool tmp66 = (tmp64 < tmp65);		HX_STACK_VAR(tmp66,"tmp66");
																		HX_STACK_LINE(6515)
																		if ((tmp66)){
																			HX_STACK_LINE(6515)
																			::zpp_nape::dynamics::ZPP_Contact tmp67;		HX_STACK_VAR(tmp67,"tmp67");
																			HX_STACK_LINE(6515)
																			{
																				HX_STACK_LINE(6515)
																				::zpp_nape::dynamics::ZPP_Contact _this = arb->contacts;		HX_STACK_VAR(_this,"_this");
																				HX_STACK_LINE(6515)
																				::zpp_nape::dynamics::ZPP_Contact old;		HX_STACK_VAR(old,"old");
																				HX_STACK_LINE(6515)
																				::zpp_nape::dynamics::ZPP_Contact ret1;		HX_STACK_VAR(ret1,"ret1");
																				HX_STACK_LINE(6515)
																				bool tmp68 = (pre == null());		HX_STACK_VAR(tmp68,"tmp68");
																				HX_STACK_LINE(6515)
																				if ((tmp68)){
																					HX_STACK_LINE(6515)
																					old = _this->next;
																					HX_STACK_LINE(6515)
																					ret1 = old->next;
																					HX_STACK_LINE(6515)
																					_this->next = ret1;
																					HX_STACK_LINE(6515)
																					bool tmp69 = (_this->next == null());		HX_STACK_VAR(tmp69,"tmp69");
																					HX_STACK_LINE(6515)
																					if ((tmp69)){
																						HX_STACK_LINE(6515)
																						_this->pushmod = true;
																					}
																				}
																				else{
																					HX_STACK_LINE(6515)
																					old = pre->next;
																					HX_STACK_LINE(6515)
																					ret1 = old->next;
																					HX_STACK_LINE(6515)
																					pre->next = ret1;
																					HX_STACK_LINE(6515)
																					bool tmp69 = (ret1 == null());		HX_STACK_VAR(tmp69,"tmp69");
																					HX_STACK_LINE(6515)
																					if ((tmp69)){
																						HX_STACK_LINE(6515)
																						_this->pushmod = true;
																					}
																				}
																				HX_STACK_LINE(6515)
																				old->_inuse = false;
																				HX_STACK_LINE(6515)
																				_this->modified = true;
																				HX_STACK_LINE(6515)
																				(_this->length)--;
																				HX_STACK_LINE(6515)
																				_this->pushmod = true;
																				HX_STACK_LINE(6515)
																				tmp67 = ret1;
																			}
																			HX_STACK_LINE(6515)
																			cx_ite2 = tmp67;
																			HX_STACK_LINE(6515)
																			::zpp_nape::dynamics::ZPP_IContact tmp68;		HX_STACK_VAR(tmp68,"tmp68");
																			HX_STACK_LINE(6515)
																			{
																				HX_STACK_LINE(6515)
																				::zpp_nape::dynamics::ZPP_IContact _this = arb->innards;		HX_STACK_VAR(_this,"_this");
																				HX_STACK_LINE(6515)
																				::zpp_nape::dynamics::ZPP_IContact old;		HX_STACK_VAR(old,"old");
																				HX_STACK_LINE(6515)
																				::zpp_nape::dynamics::ZPP_IContact ret1;		HX_STACK_VAR(ret1,"ret1");
																				HX_STACK_LINE(6515)
																				bool tmp69 = (prei == null());		HX_STACK_VAR(tmp69,"tmp69");
																				HX_STACK_LINE(6515)
																				if ((tmp69)){
																					HX_STACK_LINE(6515)
																					old = _this->next;
																					HX_STACK_LINE(6515)
																					ret1 = old->next;
																					HX_STACK_LINE(6515)
																					_this->next = ret1;
																					HX_STACK_LINE(6515)
																					bool tmp70 = (_this->next == null());		HX_STACK_VAR(tmp70,"tmp70");
																					HX_STACK_LINE(6515)
																					if ((tmp70)){
																						HX_STACK_LINE(6515)
																						_this->pushmod = true;
																					}
																				}
																				else{
																					HX_STACK_LINE(6515)
																					old = prei->next;
																					HX_STACK_LINE(6515)
																					ret1 = old->next;
																					HX_STACK_LINE(6515)
																					prei->next = ret1;
																					HX_STACK_LINE(6515)
																					bool tmp70 = (ret1 == null());		HX_STACK_VAR(tmp70,"tmp70");
																					HX_STACK_LINE(6515)
																					if ((tmp70)){
																						HX_STACK_LINE(6515)
																						_this->pushmod = true;
																					}
																				}
																				HX_STACK_LINE(6515)
																				old->_inuse = false;
																				HX_STACK_LINE(6515)
																				_this->modified = true;
																				HX_STACK_LINE(6515)
																				(_this->length)--;
																				HX_STACK_LINE(6515)
																				_this->pushmod = true;
																				HX_STACK_LINE(6515)
																				tmp68 = ret1;
																			}
																			HX_STACK_LINE(6515)
																			cx_itei = tmp68;
																			HX_STACK_LINE(6515)
																			{
																				HX_STACK_LINE(6515)
																				::zpp_nape::dynamics::ZPP_Contact o = c;		HX_STACK_VAR(o,"o");
																				HX_STACK_LINE(6515)
																				o->arbiter = null();
																				HX_STACK_LINE(6515)
																				::zpp_nape::dynamics::ZPP_Contact tmp69 = ::zpp_nape::dynamics::ZPP_Contact_obj::zpp_pool;		HX_STACK_VAR(tmp69,"tmp69");
																				HX_STACK_LINE(6515)
																				o->next = tmp69;
																				HX_STACK_LINE(6515)
																				::zpp_nape::dynamics::ZPP_Contact_obj::zpp_pool = o;
																			}
																			HX_STACK_LINE(6515)
																			continue;
																		}
																		HX_STACK_LINE(6515)
																		::zpp_nape::dynamics::ZPP_IContact ci = c->inner;		HX_STACK_VAR(ci,"ci");
																		HX_STACK_LINE(6515)
																		bool pact1 = c->active;		HX_STACK_VAR(pact1,"pact1");
																		HX_STACK_LINE(6515)
																		bool tmp67 = (c->stamp == arb->stamp);		HX_STACK_VAR(tmp67,"tmp67");
																		HX_STACK_LINE(6515)
																		c->active = tmp67;
																		HX_STACK_LINE(6515)
																		bool tmp68 = c->active;		HX_STACK_VAR(tmp68,"tmp68");
																		HX_STACK_LINE(6515)
																		if ((tmp68)){
																			HX_STACK_LINE(6515)
																			bool tmp69 = fst;		HX_STACK_VAR(tmp69,"tmp69");
																			HX_STACK_LINE(6515)
																			if ((tmp69)){
																				HX_STACK_LINE(6515)
																				fst = false;
																				HX_STACK_LINE(6515)
																				arb->c1 = ci;
																				HX_STACK_LINE(6515)
																				arb->oc1 = c;
																			}
																			else{
																				HX_STACK_LINE(6515)
																				arb->hc2 = true;
																				HX_STACK_LINE(6515)
																				arb->c2 = ci;
																				HX_STACK_LINE(6515)
																				arb->oc2 = c;
																			}
																		}
																		HX_STACK_LINE(6515)
																		bool tmp69 = (pact1 != c->active);		HX_STACK_VAR(tmp69,"tmp69");
																		HX_STACK_LINE(6515)
																		if ((tmp69)){
																			HX_STACK_LINE(6515)
																			arb->contacts->modified = true;
																		}
																		HX_STACK_LINE(6515)
																		pre = cx_ite2;
																		HX_STACK_LINE(6515)
																		prei = cx_itei;
																		HX_STACK_LINE(6515)
																		cx_itei = cx_itei->next;
																	}
																	HX_STACK_LINE(6515)
																	cx_ite2 = cx_ite2->next;
																}
															}
															HX_STACK_LINE(6515)
															bool tmp59 = arb->hc2;		HX_STACK_VAR(tmp59,"tmp59");
															HX_STACK_LINE(6515)
															if ((tmp59)){
																HX_STACK_LINE(6515)
																arb->hpc2 = true;
																HX_STACK_LINE(6515)
																bool tmp60 = arb->oc1->posOnly;		HX_STACK_VAR(tmp60,"tmp60");
																HX_STACK_LINE(6515)
																if ((tmp60)){
																	HX_STACK_LINE(6515)
																	::zpp_nape::dynamics::ZPP_IContact tmp61 = arb->c1;		HX_STACK_VAR(tmp61,"tmp61");
																	HX_STACK_LINE(6515)
																	arb->c1 = arb->c2;
																	HX_STACK_LINE(6515)
																	arb->c2 = tmp61;
																	HX_STACK_LINE(6515)
																	::zpp_nape::dynamics::ZPP_Contact tmp210 = arb->oc1;		HX_STACK_VAR(tmp210,"tmp210");
																	HX_STACK_LINE(6515)
																	arb->oc1 = arb->oc2;
																	HX_STACK_LINE(6515)
																	arb->oc2 = tmp210;
																	HX_STACK_LINE(6515)
																	arb->hc2 = false;
																}
																else{
																	HX_STACK_LINE(6515)
																	bool tmp61 = arb->oc2->posOnly;		HX_STACK_VAR(tmp61,"tmp61");
																	HX_STACK_LINE(6515)
																	if ((tmp61)){
																		HX_STACK_LINE(6515)
																		arb->hc2 = false;
																	}
																}
																HX_STACK_LINE(6515)
																bool tmp61 = arb->oc1->posOnly;		HX_STACK_VAR(tmp61,"tmp61");
																HX_STACK_LINE(6515)
																if ((tmp61)){
																	HX_STACK_LINE(6515)
																	fst = true;
																}
															}
															else{
																HX_STACK_LINE(6515)
																arb->hpc2 = false;
															}
															HX_STACK_LINE(6515)
															fst;
														}
														HX_STACK_LINE(6517)
														::nape::callbacks::PreCallback tmp58 = this->precb;		HX_STACK_VAR(tmp58,"tmp58");
														HX_STACK_LINE(6517)
														tmp58->zpp_inner->pre_arbiter = arb;
														HX_STACK_LINE(6518)
														::nape::callbacks::PreCallback tmp59 = this->precb;		HX_STACK_VAR(tmp59,"tmp59");
														HX_STACK_LINE(6518)
														tmp59->zpp_inner->set = callbackset;
														HX_STACK_LINE(6519)
														{
															HX_STACK_LINE(6520)
															::zpp_nape::util::ZNPList_ZPP_InteractionListener tmp60 = this->prelisteners;		HX_STACK_VAR(tmp60,"tmp60");
															HX_STACK_LINE(6520)
															::zpp_nape::util::ZNPNode_ZPP_InteractionListener cx_ite2 = tmp60->head;		HX_STACK_VAR(cx_ite2,"cx_ite2");
															HX_STACK_LINE(6521)
															while((true)){
																HX_STACK_LINE(6521)
																bool tmp61 = (cx_ite2 != null());		HX_STACK_VAR(tmp61,"tmp61");
																HX_STACK_LINE(6521)
																bool tmp62 = !(tmp61);		HX_STACK_VAR(tmp62,"tmp62");
																HX_STACK_LINE(6521)
																if ((tmp62)){
																	HX_STACK_LINE(6521)
																	break;
																}
																HX_STACK_LINE(6522)
																::zpp_nape::callbacks::ZPP_InteractionListener listener = cx_ite2->elt;		HX_STACK_VAR(listener,"listener");
																HX_STACK_LINE(6523)
																{
																	HX_STACK_LINE(6524)
																	::nape::callbacks::PreCallback tmp63 = this->precb;		HX_STACK_VAR(tmp63,"tmp63");
																	HX_STACK_LINE(6524)
																	tmp63->zpp_inner->listener = listener;
																	HX_STACK_LINE(6551)
																	{
																		HX_STACK_LINE(6551)
																		::nape::callbacks::PreCallback tmp64 = this->precb;		HX_STACK_VAR(tmp64,"tmp64");
																		HX_STACK_LINE(6551)
																		::zpp_nape::callbacks::ZPP_Callback cb = tmp64->zpp_inner;		HX_STACK_VAR(cb,"cb");
																		HX_STACK_LINE(6551)
																		::zpp_nape::phys::ZPP_Interactor o1 = callbackset->int1;		HX_STACK_VAR(o1,"o1");
																		HX_STACK_LINE(6551)
																		::zpp_nape::phys::ZPP_Interactor o2 = callbackset->int2;		HX_STACK_VAR(o2,"o2");
																		HX_STACK_LINE(6551)
																		bool tmp65;		HX_STACK_VAR(tmp65,"tmp65");
																		HX_STACK_LINE(6551)
																		{
																			HX_STACK_LINE(6551)
																			::zpp_nape::callbacks::ZPP_OptionType _this = listener->options1;		HX_STACK_VAR(_this,"_this");
																			HX_STACK_LINE(6551)
																			::zpp_nape::util::ZNPList_ZPP_CbType xs = o1->cbTypes;		HX_STACK_VAR(xs,"xs");
																			HX_STACK_LINE(6551)
																			::zpp_nape::util::ZNPList_ZPP_CbType tmp66 = xs;		HX_STACK_VAR(tmp66,"tmp66");
																			HX_STACK_LINE(6551)
																			::zpp_nape::util::ZNPList_ZPP_CbType tmp67 = _this->includes;		HX_STACK_VAR(tmp67,"tmp67");
																			HX_STACK_LINE(6551)
																			::zpp_nape::util::ZNPList_ZPP_CbType tmp68 = tmp66;		HX_STACK_VAR(tmp68,"tmp68");
																			HX_STACK_LINE(6551)
																			::zpp_nape::util::ZNPList_ZPP_CbType tmp69 = tmp67;		HX_STACK_VAR(tmp69,"tmp69");
																			HX_STACK_LINE(6551)
																			::zpp_nape::util::ZNPList_ZPP_CbType tmp70 = tmp68;		HX_STACK_VAR(tmp70,"tmp70");
																			HX_STACK_LINE(6551)
																			::zpp_nape::util::ZNPList_ZPP_CbType tmp71 = tmp69;		HX_STACK_VAR(tmp71,"tmp71");
																			HX_STACK_LINE(6551)
																			bool tmp72 = _this->nonemptyintersection(tmp70,tmp71);		HX_STACK_VAR(tmp72,"tmp72");
																			HX_STACK_LINE(6551)
																			bool tmp73 = tmp72;		HX_STACK_VAR(tmp73,"tmp73");
																			HX_STACK_LINE(6551)
																			bool tmp74 = tmp73;		HX_STACK_VAR(tmp74,"tmp74");
																			HX_STACK_LINE(6551)
																			if ((tmp74)){
																				HX_STACK_LINE(6551)
																				::zpp_nape::util::ZNPList_ZPP_CbType tmp75 = xs;		HX_STACK_VAR(tmp75,"tmp75");
																				HX_STACK_LINE(6551)
																				::zpp_nape::util::ZNPList_ZPP_CbType tmp76 = _this->excludes;		HX_STACK_VAR(tmp76,"tmp76");
																				HX_STACK_LINE(6551)
																				::zpp_nape::util::ZNPList_ZPP_CbType tmp77 = tmp75;		HX_STACK_VAR(tmp77,"tmp77");
																				HX_STACK_LINE(6551)
																				::zpp_nape::util::ZNPList_ZPP_CbType tmp78 = tmp76;		HX_STACK_VAR(tmp78,"tmp78");
																				HX_STACK_LINE(6551)
																				::zpp_nape::util::ZNPList_ZPP_CbType tmp79 = tmp77;		HX_STACK_VAR(tmp79,"tmp79");
																				HX_STACK_LINE(6551)
																				::zpp_nape::util::ZNPList_ZPP_CbType tmp80 = tmp78;		HX_STACK_VAR(tmp80,"tmp80");
																				HX_STACK_LINE(6551)
																				bool tmp81 = _this->nonemptyintersection(tmp79,tmp80);		HX_STACK_VAR(tmp81,"tmp81");
																				HX_STACK_LINE(6551)
																				bool tmp82 = tmp81;		HX_STACK_VAR(tmp82,"tmp82");
																				HX_STACK_LINE(6551)
																				bool tmp83 = tmp82;		HX_STACK_VAR(tmp83,"tmp83");
																				HX_STACK_LINE(6551)
																				bool tmp84 = tmp83;		HX_STACK_VAR(tmp84,"tmp84");
																				HX_STACK_LINE(6551)
																				bool tmp85 = tmp84;		HX_STACK_VAR(tmp85,"tmp85");
																				HX_STACK_LINE(6551)
																				tmp65 = !(tmp85);
																			}
																			else{
																				HX_STACK_LINE(6551)
																				tmp65 = false;
																			}
																		}
																		HX_STACK_LINE(6551)
																		bool tmp66;		HX_STACK_VAR(tmp66,"tmp66");
																		HX_STACK_LINE(6551)
																		if ((tmp65)){
																			HX_STACK_LINE(6551)
																			::zpp_nape::callbacks::ZPP_OptionType _this = listener->options2;		HX_STACK_VAR(_this,"_this");
																			HX_STACK_LINE(6551)
																			::zpp_nape::util::ZNPList_ZPP_CbType xs = o2->cbTypes;		HX_STACK_VAR(xs,"xs");
																			HX_STACK_LINE(6551)
																			::zpp_nape::util::ZNPList_ZPP_CbType tmp67 = xs;		HX_STACK_VAR(tmp67,"tmp67");
																			HX_STACK_LINE(6551)
																			::zpp_nape::util::ZNPList_ZPP_CbType tmp68 = _this->includes;		HX_STACK_VAR(tmp68,"tmp68");
																			HX_STACK_LINE(6551)
																			::zpp_nape::util::ZNPList_ZPP_CbType tmp69 = tmp67;		HX_STACK_VAR(tmp69,"tmp69");
																			HX_STACK_LINE(6551)
																			::zpp_nape::util::ZNPList_ZPP_CbType tmp70 = tmp68;		HX_STACK_VAR(tmp70,"tmp70");
																			HX_STACK_LINE(6551)
																			::zpp_nape::util::ZNPList_ZPP_CbType tmp71 = tmp69;		HX_STACK_VAR(tmp71,"tmp71");
																			HX_STACK_LINE(6551)
																			::zpp_nape::util::ZNPList_ZPP_CbType tmp72 = tmp70;		HX_STACK_VAR(tmp72,"tmp72");
																			HX_STACK_LINE(6551)
																			bool tmp73 = _this->nonemptyintersection(tmp71,tmp72);		HX_STACK_VAR(tmp73,"tmp73");
																			HX_STACK_LINE(6551)
																			bool tmp74 = tmp73;		HX_STACK_VAR(tmp74,"tmp74");
																			HX_STACK_LINE(6551)
																			bool tmp75 = tmp74;		HX_STACK_VAR(tmp75,"tmp75");
																			HX_STACK_LINE(6551)
																			if ((tmp75)){
																				HX_STACK_LINE(6551)
																				::zpp_nape::util::ZNPList_ZPP_CbType tmp76 = xs;		HX_STACK_VAR(tmp76,"tmp76");
																				HX_STACK_LINE(6551)
																				::zpp_nape::util::ZNPList_ZPP_CbType tmp77 = _this->excludes;		HX_STACK_VAR(tmp77,"tmp77");
																				HX_STACK_LINE(6551)
																				::zpp_nape::util::ZNPList_ZPP_CbType tmp78 = tmp76;		HX_STACK_VAR(tmp78,"tmp78");
																				HX_STACK_LINE(6551)
																				::zpp_nape::util::ZNPList_ZPP_CbType tmp79 = tmp77;		HX_STACK_VAR(tmp79,"tmp79");
																				HX_STACK_LINE(6551)
																				::zpp_nape::util::ZNPList_ZPP_CbType tmp80 = tmp78;		HX_STACK_VAR(tmp80,"tmp80");
																				HX_STACK_LINE(6551)
																				::zpp_nape::util::ZNPList_ZPP_CbType tmp81 = tmp79;		HX_STACK_VAR(tmp81,"tmp81");
																				HX_STACK_LINE(6551)
																				bool tmp82 = _this->nonemptyintersection(tmp80,tmp81);		HX_STACK_VAR(tmp82,"tmp82");
																				HX_STACK_LINE(6551)
																				bool tmp83 = tmp82;		HX_STACK_VAR(tmp83,"tmp83");
																				HX_STACK_LINE(6551)
																				bool tmp84 = tmp83;		HX_STACK_VAR(tmp84,"tmp84");
																				HX_STACK_LINE(6551)
																				bool tmp85 = tmp84;		HX_STACK_VAR(tmp85,"tmp85");
																				HX_STACK_LINE(6551)
																				bool tmp86 = tmp85;		HX_STACK_VAR(tmp86,"tmp86");
																				HX_STACK_LINE(6551)
																				tmp66 = !(tmp86);
																			}
																			else{
																				HX_STACK_LINE(6551)
																				tmp66 = false;
																			}
																		}
																		else{
																			HX_STACK_LINE(6551)
																			tmp66 = false;
																		}
																		HX_STACK_LINE(6551)
																		if ((tmp66)){
																			HX_STACK_LINE(6551)
																			cb->int1 = o1;
																			HX_STACK_LINE(6551)
																			cb->int2 = o2;
																		}
																		else{
																			HX_STACK_LINE(6551)
																			cb->int1 = o2;
																			HX_STACK_LINE(6551)
																			cb->int2 = o1;
																		}
																	}
																	HX_STACK_LINE(6552)
																	::zpp_nape::phys::ZPP_Interactor tmp64 = i1;		HX_STACK_VAR(tmp64,"tmp64");
																	HX_STACK_LINE(6552)
																	::nape::callbacks::PreCallback tmp65 = this->precb;		HX_STACK_VAR(tmp65,"tmp65");
																	HX_STACK_LINE(6552)
																	::zpp_nape::phys::ZPP_Interactor tmp66 = tmp65->zpp_inner->int1;		HX_STACK_VAR(tmp66,"tmp66");
																	HX_STACK_LINE(6552)
																	bool tmp67 = (tmp64 != tmp66);		HX_STACK_VAR(tmp67,"tmp67");
																	HX_STACK_LINE(6552)
																	::nape::callbacks::PreCallback tmp68 = this->precb;		HX_STACK_VAR(tmp68,"tmp68");
																	HX_STACK_LINE(6552)
																	tmp68->zpp_inner->pre_swapped = tmp67;
																	HX_STACK_LINE(6553)
																	::nape::callbacks::PreCallback tmp69 = this->precb;		HX_STACK_VAR(tmp69,"tmp69");
																	HX_STACK_LINE(6553)
																	::nape::callbacks::PreFlag tmp70 = listener->handlerp(tmp69);		HX_STACK_VAR(tmp70,"tmp70");
																	HX_STACK_LINE(6553)
																	::nape::callbacks::PreFlag ret1 = tmp70;		HX_STACK_VAR(ret1,"ret1");
																	HX_STACK_LINE(6554)
																	bool tmp71 = (ret1 != null());		HX_STACK_VAR(tmp71,"tmp71");
																	HX_STACK_LINE(6554)
																	if ((tmp71)){
																		HX_STACK_LINE(6555)
																		::nape::callbacks::PreFlag tmp72 = ret1;		HX_STACK_VAR(tmp72,"tmp72");
																		HX_STACK_LINE(6555)
																		::nape::callbacks::PreFlag tmp73;		HX_STACK_VAR(tmp73,"tmp73");
																		HX_STACK_LINE(6555)
																		{
																			HX_STACK_LINE(6555)
																			::nape::callbacks::PreFlag tmp74 = ::zpp_nape::util::ZPP_Flags_obj::PreFlag_ACCEPT;		HX_STACK_VAR(tmp74,"tmp74");
																			HX_STACK_LINE(6555)
																			bool tmp75 = (tmp74 == null());		HX_STACK_VAR(tmp75,"tmp75");
																			HX_STACK_LINE(6555)
																			if ((tmp75)){
																				HX_STACK_LINE(6555)
																				::zpp_nape::util::ZPP_Flags_obj::internal = true;
																				HX_STACK_LINE(6555)
																				::nape::callbacks::PreFlag tmp76 = ::nape::callbacks::PreFlag_obj::__new();		HX_STACK_VAR(tmp76,"tmp76");
																				HX_STACK_LINE(6555)
																				::zpp_nape::util::ZPP_Flags_obj::PreFlag_ACCEPT = tmp76;
																				HX_STACK_LINE(6555)
																				::zpp_nape::util::ZPP_Flags_obj::internal = false;
																			}
																			HX_STACK_LINE(6555)
																			tmp73 = ::zpp_nape::util::ZPP_Flags_obj::PreFlag_ACCEPT;
																		}
																		HX_STACK_LINE(6555)
																		bool tmp74 = (tmp72 == tmp73);		HX_STACK_VAR(tmp74,"tmp74");
																		HX_STACK_LINE(6555)
																		int tmp75;		HX_STACK_VAR(tmp75,"tmp75");
																		HX_STACK_LINE(6555)
																		if ((tmp74)){
																			HX_STACK_LINE(6555)
																			int tmp76 = ::zpp_nape::util::ZPP_Flags_obj::id_ImmState_ACCEPT;		HX_STACK_VAR(tmp76,"tmp76");
																			HX_STACK_LINE(6555)
																			int tmp77 = ::zpp_nape::util::ZPP_Flags_obj::id_ImmState_ALWAYS;		HX_STACK_VAR(tmp77,"tmp77");
																			HX_STACK_LINE(6555)
																			tmp75 = (int(tmp76) | int(tmp77));
																		}
																		else{
																			HX_STACK_LINE(6555)
																			::nape::callbacks::PreFlag tmp76 = ret1;		HX_STACK_VAR(tmp76,"tmp76");
																			HX_STACK_LINE(6555)
																			::nape::callbacks::PreFlag tmp77;		HX_STACK_VAR(tmp77,"tmp77");
																			HX_STACK_LINE(6555)
																			{
																				HX_STACK_LINE(6555)
																				::nape::callbacks::PreFlag tmp78 = ::zpp_nape::util::ZPP_Flags_obj::PreFlag_ACCEPT_ONCE;		HX_STACK_VAR(tmp78,"tmp78");
																				HX_STACK_LINE(6555)
																				bool tmp79 = (tmp78 == null());		HX_STACK_VAR(tmp79,"tmp79");
																				HX_STACK_LINE(6555)
																				if ((tmp79)){
																					HX_STACK_LINE(6555)
																					::zpp_nape::util::ZPP_Flags_obj::internal = true;
																					HX_STACK_LINE(6555)
																					::nape::callbacks::PreFlag tmp80 = ::nape::callbacks::PreFlag_obj::__new();		HX_STACK_VAR(tmp80,"tmp80");
																					HX_STACK_LINE(6555)
																					::zpp_nape::util::ZPP_Flags_obj::PreFlag_ACCEPT_ONCE = tmp80;
																					HX_STACK_LINE(6555)
																					::zpp_nape::util::ZPP_Flags_obj::internal = false;
																				}
																				HX_STACK_LINE(6555)
																				tmp77 = ::zpp_nape::util::ZPP_Flags_obj::PreFlag_ACCEPT_ONCE;
																			}
																			HX_STACK_LINE(6555)
																			bool tmp78 = (tmp76 == tmp77);		HX_STACK_VAR(tmp78,"tmp78");
																			HX_STACK_LINE(6555)
																			if ((tmp78)){
																				HX_STACK_LINE(6555)
																				tmp75 = ::zpp_nape::util::ZPP_Flags_obj::id_ImmState_ACCEPT;
																			}
																			else{
																				HX_STACK_LINE(6555)
																				::nape::callbacks::PreFlag tmp79 = ret1;		HX_STACK_VAR(tmp79,"tmp79");
																				HX_STACK_LINE(6555)
																				::nape::callbacks::PreFlag tmp80;		HX_STACK_VAR(tmp80,"tmp80");
																				HX_STACK_LINE(6555)
																				{
																					HX_STACK_LINE(6555)
																					::nape::callbacks::PreFlag tmp81 = ::zpp_nape::util::ZPP_Flags_obj::PreFlag_IGNORE;		HX_STACK_VAR(tmp81,"tmp81");
																					HX_STACK_LINE(6555)
																					bool tmp82 = (tmp81 == null());		HX_STACK_VAR(tmp82,"tmp82");
																					HX_STACK_LINE(6555)
																					if ((tmp82)){
																						HX_STACK_LINE(6555)
																						::zpp_nape::util::ZPP_Flags_obj::internal = true;
																						HX_STACK_LINE(6555)
																						::nape::callbacks::PreFlag tmp83 = ::nape::callbacks::PreFlag_obj::__new();		HX_STACK_VAR(tmp83,"tmp83");
																						HX_STACK_LINE(6555)
																						::zpp_nape::util::ZPP_Flags_obj::PreFlag_IGNORE = tmp83;
																						HX_STACK_LINE(6555)
																						::zpp_nape::util::ZPP_Flags_obj::internal = false;
																					}
																					HX_STACK_LINE(6555)
																					tmp80 = ::zpp_nape::util::ZPP_Flags_obj::PreFlag_IGNORE;
																				}
																				HX_STACK_LINE(6555)
																				bool tmp81 = (tmp79 == tmp80);		HX_STACK_VAR(tmp81,"tmp81");
																				HX_STACK_LINE(6555)
																				if ((tmp81)){
																					HX_STACK_LINE(6555)
																					int tmp82 = ::zpp_nape::util::ZPP_Flags_obj::id_ImmState_IGNORE;		HX_STACK_VAR(tmp82,"tmp82");
																					HX_STACK_LINE(6555)
																					int tmp83 = ::zpp_nape::util::ZPP_Flags_obj::id_ImmState_ALWAYS;		HX_STACK_VAR(tmp83,"tmp83");
																					HX_STACK_LINE(6555)
																					tmp75 = (int(tmp82) | int(tmp83));
																				}
																				else{
																					HX_STACK_LINE(6555)
																					tmp75 = ::zpp_nape::util::ZPP_Flags_obj::id_ImmState_IGNORE;
																				}
																			}
																		}
																		HX_STACK_LINE(6555)
																		arb->immState = tmp75;
																	}
																}
																HX_STACK_LINE(6558)
																cx_ite2 = cx_ite2->next;
															}
														}
														HX_STACK_LINE(6562)
														{
															HX_STACK_LINE(6562)
															arb->_mutable = false;
															HX_STACK_LINE(6562)
															bool tmp60 = (arb->wrap_normal != null());		HX_STACK_VAR(tmp60,"tmp60");
															HX_STACK_LINE(6562)
															if ((tmp60)){
																HX_STACK_LINE(6562)
																::zpp_nape::geom::ZPP_Vec2 tmp61 = arb->wrap_normal->zpp_inner;		HX_STACK_VAR(tmp61,"tmp61");
																HX_STACK_LINE(6562)
																tmp61->_immutable = true;
															}
															HX_STACK_LINE(6562)
															bool tmp61 = (arb->wrap_contacts != null());		HX_STACK_VAR(tmp61,"tmp61");
															HX_STACK_LINE(6562)
															if ((tmp61)){
																HX_STACK_LINE(6562)
																::zpp_nape::util::ZPP_ContactList tmp62 = arb->wrap_contacts->zpp_inner;		HX_STACK_VAR(tmp62,"tmp62");
																HX_STACK_LINE(6562)
																tmp62->immutable = true;
															}
														}
														HX_STACK_LINE(6564)
														arb->active = pact;
														HX_STACK_LINE(6565)
														bool tmp60 = (callbackset != null());		HX_STACK_VAR(tmp60,"tmp60");
														HX_STACK_LINE(6565)
														if ((tmp60)){
															HX_STACK_LINE(6567)
															::zpp_nape::util::ZNPList_ZPP_InteractionListener tmp61 = this->prelisteners;		HX_STACK_VAR(tmp61,"tmp61");
															HX_STACK_LINE(6567)
															::zpp_nape::util::ZNPNode_ZPP_InteractionListener cx_ite2 = tmp61->head;		HX_STACK_VAR(cx_ite2,"cx_ite2");
															HX_STACK_LINE(6568)
															while((true)){
																HX_STACK_LINE(6568)
																bool tmp62 = (cx_ite2 != null());		HX_STACK_VAR(tmp62,"tmp62");
																HX_STACK_LINE(6568)
																bool tmp63 = !(tmp62);		HX_STACK_VAR(tmp63,"tmp63");
																HX_STACK_LINE(6568)
																if ((tmp63)){
																	HX_STACK_LINE(6568)
																	break;
																}
																HX_STACK_LINE(6569)
																::zpp_nape::callbacks::ZPP_InteractionListener listener = cx_ite2->elt;		HX_STACK_VAR(listener,"listener");
																HX_STACK_LINE(6570)
																{
																	HX_STACK_LINE(6571)
																	int tmp64 = listener->itype;		HX_STACK_VAR(tmp64,"tmp64");
																	HX_STACK_LINE(6571)
																	int tmp65 = ::zpp_nape::util::ZPP_Flags_obj::id_InteractionType_ANY;		HX_STACK_VAR(tmp65,"tmp65");
																	HX_STACK_LINE(6571)
																	bool tmp66 = (tmp64 == tmp65);		HX_STACK_VAR(tmp66,"tmp66");
																	HX_STACK_LINE(6571)
																	if ((tmp66)){
																		HX_STACK_LINE(6572)
																		callbackset->COLLISIONstate = arb->immState;
																		HX_STACK_LINE(6573)
																		callbackset->SENSORstate = arb->immState;
																		HX_STACK_LINE(6574)
																		callbackset->FLUIDstate = arb->immState;
																	}
																	else{
																		HX_STACK_LINE(6576)
																		callbackset->COLLISIONstate = arb->immState;
																	}
																}
																HX_STACK_LINE(6578)
																cx_ite2 = cx_ite2->next;
															}
														}
													}
													else{
														HX_STACK_LINE(6583)
														bool tmp56 = (callbackset == null());		HX_STACK_VAR(tmp56,"tmp56");
														HX_STACK_LINE(6583)
														if ((tmp56)){
															HX_STACK_LINE(6584)
															int tmp57 = arb->immState;		HX_STACK_VAR(tmp57,"tmp57");
															HX_STACK_LINE(6584)
															int tmp58 = ::zpp_nape::util::ZPP_Flags_obj::id_ImmState_ALWAYS;		HX_STACK_VAR(tmp58,"tmp58");
															HX_STACK_LINE(6584)
															int tmp59 = (int(tmp57) & int(tmp58));		HX_STACK_VAR(tmp59,"tmp59");
															HX_STACK_LINE(6584)
															bool tmp60 = (tmp59 == (int)0);		HX_STACK_VAR(tmp60,"tmp60");
															HX_STACK_LINE(6584)
															if ((tmp60)){
																HX_STACK_LINE(6584)
																int tmp61 = ::zpp_nape::util::ZPP_Flags_obj::id_ImmState_ACCEPT;		HX_STACK_VAR(tmp61,"tmp61");
																HX_STACK_LINE(6584)
																arb->immState = tmp61;
															}
														}
														else{
															HX_STACK_LINE(6586)
															arb->immState = callbackset->COLLISIONstate;
														}
													}
												}
												HX_STACK_LINE(6588)
												cx_ite1 = cx_ite1->next;
											}
										}
										HX_STACK_LINE(6592)
										cx_ite = cx_ite->next;
									}
								}
								HX_STACK_LINE(6595)
								bool tmp39 = anyimpure;		HX_STACK_VAR(tmp39,"tmp39");
								HX_STACK_LINE(6595)
								bool tmp40;		HX_STACK_VAR(tmp40,"tmp40");
								HX_STACK_LINE(6595)
								if ((tmp39)){
									HX_STACK_LINE(6595)
									int tmp41 = arb->immState;		HX_STACK_VAR(tmp41,"tmp41");
									HX_STACK_LINE(6595)
									int tmp42 = ::zpp_nape::util::ZPP_Flags_obj::id_ImmState_ALWAYS;		HX_STACK_VAR(tmp42,"tmp42");
									HX_STACK_LINE(6595)
									int tmp43 = tmp42;		HX_STACK_VAR(tmp43,"tmp43");
									HX_STACK_LINE(6595)
									int tmp44 = (int(tmp41) & int(tmp43));		HX_STACK_VAR(tmp44,"tmp44");
									HX_STACK_LINE(6595)
									int tmp45 = tmp44;		HX_STACK_VAR(tmp45,"tmp45");
									HX_STACK_LINE(6595)
									tmp40 = (tmp45 == (int)0);
								}
								else{
									HX_STACK_LINE(6595)
									tmp40 = false;
								}
								HX_STACK_LINE(6595)
								if ((tmp40)){
									HX_STACK_LINE(6597)
									int tmp41 = arb->b1->type;		HX_STACK_VAR(tmp41,"tmp41");
									HX_STACK_LINE(6597)
									int tmp42 = ::zpp_nape::util::ZPP_Flags_obj::id_BodyType_DYNAMIC;		HX_STACK_VAR(tmp42,"tmp42");
									HX_STACK_LINE(6597)
									bool tmp43 = (tmp41 == tmp42);		HX_STACK_VAR(tmp43,"tmp43");
									HX_STACK_LINE(6597)
									if ((tmp43)){
										HX_STACK_LINE(6598)
										::zpp_nape::phys::ZPP_Body o = arb->b1;		HX_STACK_VAR(o,"o");
										HX_STACK_LINE(6607)
										bool tmp44 = o->world;		HX_STACK_VAR(tmp44,"tmp44");
										HX_STACK_LINE(6607)
										bool tmp45 = !(tmp44);		HX_STACK_VAR(tmp45,"tmp45");
										HX_STACK_LINE(6607)
										if ((tmp45)){
											HX_STACK_LINE(6616)
											int tmp46 = this->stamp;		HX_STACK_VAR(tmp46,"tmp46");
											HX_STACK_LINE(6616)
											bool tmp47 = this->midstep;		HX_STACK_VAR(tmp47,"tmp47");
											HX_STACK_LINE(6616)
											int tmp48;		HX_STACK_VAR(tmp48,"tmp48");
											HX_STACK_LINE(6616)
											if ((tmp47)){
												HX_STACK_LINE(6616)
												tmp48 = (int)0;
											}
											else{
												HX_STACK_LINE(6616)
												tmp48 = (int)1;
											}
											HX_STACK_LINE(6616)
											int tmp49 = (tmp46 + tmp48);		HX_STACK_VAR(tmp49,"tmp49");
											HX_STACK_LINE(6616)
											o->component->waket = tmp49;
											HX_STACK_LINE(6617)
											int tmp50 = o->type;		HX_STACK_VAR(tmp50,"tmp50");
											HX_STACK_LINE(6617)
											int tmp51 = ::zpp_nape::util::ZPP_Flags_obj::id_BodyType_KINEMATIC;		HX_STACK_VAR(tmp51,"tmp51");
											HX_STACK_LINE(6617)
											bool tmp52 = (tmp50 == tmp51);		HX_STACK_VAR(tmp52,"tmp52");
											HX_STACK_LINE(6617)
											if ((tmp52)){
												HX_STACK_LINE(6617)
												o->kinematicDelaySleep = true;
											}
											HX_STACK_LINE(6618)
											bool tmp53 = o->component->sleeping;		HX_STACK_VAR(tmp53,"tmp53");
											HX_STACK_LINE(6618)
											if ((tmp53)){
												HX_STACK_LINE(6619)
												::zpp_nape::phys::ZPP_Body tmp54 = o;		HX_STACK_VAR(tmp54,"tmp54");
												HX_STACK_LINE(6619)
												this->really_wake(tmp54,false);
											}
										}
									}
									HX_STACK_LINE(6623)
									int tmp44 = arb->b1->type;		HX_STACK_VAR(tmp44,"tmp44");
									HX_STACK_LINE(6623)
									int tmp45 = ::zpp_nape::util::ZPP_Flags_obj::id_BodyType_DYNAMIC;		HX_STACK_VAR(tmp45,"tmp45");
									HX_STACK_LINE(6623)
									bool tmp46 = (tmp44 == tmp45);		HX_STACK_VAR(tmp46,"tmp46");
									HX_STACK_LINE(6623)
									if ((tmp46)){
										HX_STACK_LINE(6624)
										::zpp_nape::phys::ZPP_Body o = arb->b2;		HX_STACK_VAR(o,"o");
										HX_STACK_LINE(6633)
										bool tmp47 = o->world;		HX_STACK_VAR(tmp47,"tmp47");
										HX_STACK_LINE(6633)
										bool tmp48 = !(tmp47);		HX_STACK_VAR(tmp48,"tmp48");
										HX_STACK_LINE(6633)
										if ((tmp48)){
											HX_STACK_LINE(6642)
											int tmp49 = this->stamp;		HX_STACK_VAR(tmp49,"tmp49");
											HX_STACK_LINE(6642)
											bool tmp50 = this->midstep;		HX_STACK_VAR(tmp50,"tmp50");
											HX_STACK_LINE(6642)
											int tmp51;		HX_STACK_VAR(tmp51,"tmp51");
											HX_STACK_LINE(6642)
											if ((tmp50)){
												HX_STACK_LINE(6642)
												tmp51 = (int)0;
											}
											else{
												HX_STACK_LINE(6642)
												tmp51 = (int)1;
											}
											HX_STACK_LINE(6642)
											int tmp52 = (tmp49 + tmp51);		HX_STACK_VAR(tmp52,"tmp52");
											HX_STACK_LINE(6642)
											o->component->waket = tmp52;
											HX_STACK_LINE(6643)
											int tmp53 = o->type;		HX_STACK_VAR(tmp53,"tmp53");
											HX_STACK_LINE(6643)
											int tmp54 = ::zpp_nape::util::ZPP_Flags_obj::id_BodyType_KINEMATIC;		HX_STACK_VAR(tmp54,"tmp54");
											HX_STACK_LINE(6643)
											bool tmp55 = (tmp53 == tmp54);		HX_STACK_VAR(tmp55,"tmp55");
											HX_STACK_LINE(6643)
											if ((tmp55)){
												HX_STACK_LINE(6643)
												o->kinematicDelaySleep = true;
											}
											HX_STACK_LINE(6644)
											bool tmp56 = o->component->sleeping;		HX_STACK_VAR(tmp56,"tmp56");
											HX_STACK_LINE(6644)
											if ((tmp56)){
												HX_STACK_LINE(6645)
												::zpp_nape::phys::ZPP_Body tmp57 = o;		HX_STACK_VAR(tmp57,"tmp57");
												HX_STACK_LINE(6645)
												this->really_wake(tmp57,false);
											}
										}
									}
								}
							}
							HX_STACK_LINE(6706)
							bool tmp30;		HX_STACK_VAR(tmp30,"tmp30");
							HX_STACK_LINE(6706)
							{
								HX_STACK_LINE(6706)
								int tmp31 = arb->immState;		HX_STACK_VAR(tmp31,"tmp31");
								HX_STACK_LINE(6706)
								int tmp32 = ::zpp_nape::util::ZPP_Flags_obj::id_ImmState_ACCEPT;		HX_STACK_VAR(tmp32,"tmp32");
								HX_STACK_LINE(6706)
								int tmp33 = tmp32;		HX_STACK_VAR(tmp33,"tmp33");
								HX_STACK_LINE(6706)
								int tmp34 = (int(tmp31) & int(tmp33));		HX_STACK_VAR(tmp34,"tmp34");
								HX_STACK_LINE(6706)
								int tmp35 = tmp34;		HX_STACK_VAR(tmp35,"tmp35");
								HX_STACK_LINE(6706)
								tmp30 = (tmp35 != (int)0);
							}
							HX_STACK_LINE(6706)
							if ((tmp30)){
								HX_STACK_LINE(6707)
								int tmp31 = arb->b1->type;		HX_STACK_VAR(tmp31,"tmp31");
								HX_STACK_LINE(6707)
								int tmp32 = ::zpp_nape::util::ZPP_Flags_obj::id_BodyType_DYNAMIC;		HX_STACK_VAR(tmp32,"tmp32");
								HX_STACK_LINE(6707)
								bool tmp33 = (tmp31 == tmp32);		HX_STACK_VAR(tmp33,"tmp33");
								HX_STACK_LINE(6707)
								bool tmp34;		HX_STACK_VAR(tmp34,"tmp34");
								HX_STACK_LINE(6707)
								if ((tmp33)){
									HX_STACK_LINE(6707)
									::zpp_nape::space::ZPP_Component tmp35 = arb->b1->component;		HX_STACK_VAR(tmp35,"tmp35");
									HX_STACK_LINE(6707)
									::zpp_nape::space::ZPP_Component tmp36 = tmp35;		HX_STACK_VAR(tmp36,"tmp36");
									HX_STACK_LINE(6707)
									tmp34 = tmp36->sleeping;
								}
								else{
									HX_STACK_LINE(6707)
									tmp34 = false;
								}
								HX_STACK_LINE(6707)
								if ((tmp34)){
									HX_STACK_LINE(6708)
									::zpp_nape::phys::ZPP_Body o = arb->b1;		HX_STACK_VAR(o,"o");
									HX_STACK_LINE(6717)
									bool tmp35 = o->world;		HX_STACK_VAR(tmp35,"tmp35");
									HX_STACK_LINE(6717)
									bool tmp36 = !(tmp35);		HX_STACK_VAR(tmp36,"tmp36");
									HX_STACK_LINE(6717)
									if ((tmp36)){
										HX_STACK_LINE(6726)
										int tmp37 = this->stamp;		HX_STACK_VAR(tmp37,"tmp37");
										HX_STACK_LINE(6726)
										bool tmp38 = this->midstep;		HX_STACK_VAR(tmp38,"tmp38");
										HX_STACK_LINE(6726)
										int tmp39;		HX_STACK_VAR(tmp39,"tmp39");
										HX_STACK_LINE(6726)
										if ((tmp38)){
											HX_STACK_LINE(6726)
											tmp39 = (int)0;
										}
										else{
											HX_STACK_LINE(6726)
											tmp39 = (int)1;
										}
										HX_STACK_LINE(6726)
										int tmp40 = (tmp37 + tmp39);		HX_STACK_VAR(tmp40,"tmp40");
										HX_STACK_LINE(6726)
										o->component->waket = tmp40;
										HX_STACK_LINE(6727)
										int tmp41 = o->type;		HX_STACK_VAR(tmp41,"tmp41");
										HX_STACK_LINE(6727)
										int tmp42 = ::zpp_nape::util::ZPP_Flags_obj::id_BodyType_KINEMATIC;		HX_STACK_VAR(tmp42,"tmp42");
										HX_STACK_LINE(6727)
										bool tmp43 = (tmp41 == tmp42);		HX_STACK_VAR(tmp43,"tmp43");
										HX_STACK_LINE(6727)
										if ((tmp43)){
											HX_STACK_LINE(6727)
											o->kinematicDelaySleep = true;
										}
										HX_STACK_LINE(6728)
										bool tmp44 = o->component->sleeping;		HX_STACK_VAR(tmp44,"tmp44");
										HX_STACK_LINE(6728)
										if ((tmp44)){
											HX_STACK_LINE(6729)
											::zpp_nape::phys::ZPP_Body tmp45 = o;		HX_STACK_VAR(tmp45,"tmp45");
											HX_STACK_LINE(6729)
											this->really_wake(tmp45,false);
										}
									}
								}
								HX_STACK_LINE(6733)
								int tmp35 = arb->b2->type;		HX_STACK_VAR(tmp35,"tmp35");
								HX_STACK_LINE(6733)
								int tmp36 = ::zpp_nape::util::ZPP_Flags_obj::id_BodyType_DYNAMIC;		HX_STACK_VAR(tmp36,"tmp36");
								HX_STACK_LINE(6733)
								bool tmp37 = (tmp35 == tmp36);		HX_STACK_VAR(tmp37,"tmp37");
								HX_STACK_LINE(6733)
								bool tmp38;		HX_STACK_VAR(tmp38,"tmp38");
								HX_STACK_LINE(6733)
								if ((tmp37)){
									HX_STACK_LINE(6733)
									::zpp_nape::space::ZPP_Component tmp39 = arb->b2->component;		HX_STACK_VAR(tmp39,"tmp39");
									HX_STACK_LINE(6733)
									::zpp_nape::space::ZPP_Component tmp40 = tmp39;		HX_STACK_VAR(tmp40,"tmp40");
									HX_STACK_LINE(6733)
									tmp38 = tmp40->sleeping;
								}
								else{
									HX_STACK_LINE(6733)
									tmp38 = false;
								}
								HX_STACK_LINE(6733)
								if ((tmp38)){
									HX_STACK_LINE(6734)
									::zpp_nape::phys::ZPP_Body o = arb->b2;		HX_STACK_VAR(o,"o");
									HX_STACK_LINE(6743)
									bool tmp39 = o->world;		HX_STACK_VAR(tmp39,"tmp39");
									HX_STACK_LINE(6743)
									bool tmp40 = !(tmp39);		HX_STACK_VAR(tmp40,"tmp40");
									HX_STACK_LINE(6743)
									if ((tmp40)){
										HX_STACK_LINE(6752)
										int tmp41 = this->stamp;		HX_STACK_VAR(tmp41,"tmp41");
										HX_STACK_LINE(6752)
										bool tmp42 = this->midstep;		HX_STACK_VAR(tmp42,"tmp42");
										HX_STACK_LINE(6752)
										int tmp43;		HX_STACK_VAR(tmp43,"tmp43");
										HX_STACK_LINE(6752)
										if ((tmp42)){
											HX_STACK_LINE(6752)
											tmp43 = (int)0;
										}
										else{
											HX_STACK_LINE(6752)
											tmp43 = (int)1;
										}
										HX_STACK_LINE(6752)
										int tmp44 = (tmp41 + tmp43);		HX_STACK_VAR(tmp44,"tmp44");
										HX_STACK_LINE(6752)
										o->component->waket = tmp44;
										HX_STACK_LINE(6753)
										int tmp45 = o->type;		HX_STACK_VAR(tmp45,"tmp45");
										HX_STACK_LINE(6753)
										int tmp46 = ::zpp_nape::util::ZPP_Flags_obj::id_BodyType_KINEMATIC;		HX_STACK_VAR(tmp46,"tmp46");
										HX_STACK_LINE(6753)
										bool tmp47 = (tmp45 == tmp46);		HX_STACK_VAR(tmp47,"tmp47");
										HX_STACK_LINE(6753)
										if ((tmp47)){
											HX_STACK_LINE(6753)
											o->kinematicDelaySleep = true;
										}
										HX_STACK_LINE(6754)
										bool tmp48 = o->component->sleeping;		HX_STACK_VAR(tmp48,"tmp48");
										HX_STACK_LINE(6754)
										if ((tmp48)){
											HX_STACK_LINE(6755)
											::zpp_nape::phys::ZPP_Body tmp49 = o;		HX_STACK_VAR(tmp49,"tmp49");
											HX_STACK_LINE(6755)
											this->really_wake(tmp49,false);
										}
									}
								}
							}
							HX_STACK_LINE(6760)
							bool tmp31 = arb->sleeping;		HX_STACK_VAR(tmp31,"tmp31");
							HX_STACK_LINE(6760)
							if ((tmp31)){
								HX_STACK_LINE(6761)
								arb->sleeping = false;
								HX_STACK_LINE(6762)
								{
									HX_STACK_LINE(6762)
									::zpp_nape::util::ZNPNode_ZPP_ColArbiter tmp32;		HX_STACK_VAR(tmp32,"tmp32");
									HX_STACK_LINE(6762)
									{
										HX_STACK_LINE(6762)
										::zpp_nape::util::ZNPNode_ZPP_ColArbiter ret1;		HX_STACK_VAR(ret1,"ret1");
										HX_STACK_LINE(6762)
										{
											HX_STACK_LINE(6762)
											::zpp_nape::util::ZNPNode_ZPP_ColArbiter tmp33 = ::zpp_nape::util::ZNPNode_ZPP_ColArbiter_obj::zpp_pool;		HX_STACK_VAR(tmp33,"tmp33");
											HX_STACK_LINE(6762)
											bool tmp34 = (tmp33 == null());		HX_STACK_VAR(tmp34,"tmp34");
											HX_STACK_LINE(6762)
											if ((tmp34)){
												HX_STACK_LINE(6762)
												::zpp_nape::util::ZNPNode_ZPP_ColArbiter tmp35 = ::zpp_nape::util::ZNPNode_ZPP_ColArbiter_obj::__new();		HX_STACK_VAR(tmp35,"tmp35");
												HX_STACK_LINE(6762)
												ret1 = tmp35;
											}
											else{
												HX_STACK_LINE(6762)
												::zpp_nape::util::ZNPNode_ZPP_ColArbiter tmp35 = ::zpp_nape::util::ZNPNode_ZPP_ColArbiter_obj::zpp_pool;		HX_STACK_VAR(tmp35,"tmp35");
												HX_STACK_LINE(6762)
												ret1 = tmp35;
												HX_STACK_LINE(6762)
												::zpp_nape::util::ZNPNode_ZPP_ColArbiter_obj::zpp_pool = ret1->next;
												HX_STACK_LINE(6762)
												ret1->next = null();
											}
											HX_STACK_LINE(6762)
											Dynamic();
										}
										HX_STACK_LINE(6762)
										ret1->elt = arb;
										HX_STACK_LINE(6762)
										tmp32 = ret1;
									}
									HX_STACK_LINE(6762)
									::zpp_nape::util::ZNPNode_ZPP_ColArbiter temp = tmp32;		HX_STACK_VAR(temp,"temp");
									HX_STACK_LINE(6762)
									temp->next = carbs->head;
									HX_STACK_LINE(6762)
									carbs->head = temp;
									HX_STACK_LINE(6762)
									carbs->modified = true;
									HX_STACK_LINE(6762)
									(carbs->length)++;
									HX_STACK_LINE(6762)
									arb;
								}
							}
							HX_STACK_LINE(6764)
							tmp12 = arb;
						}
						else{
							HX_STACK_LINE(6766)
							bool tmp26 = first;		HX_STACK_VAR(tmp26,"tmp26");
							HX_STACK_LINE(6766)
							if ((tmp26)){
								HX_STACK_LINE(6767)
								{
									HX_STACK_LINE(6768)
									::zpp_nape::dynamics::ZPP_ColArbiter o = arb;		HX_STACK_VAR(o,"o");
									HX_STACK_LINE(6777)
									{
										HX_STACK_LINE(6777)
										o->userdef_dyn_fric = false;
										HX_STACK_LINE(6777)
										o->userdef_stat_fric = false;
										HX_STACK_LINE(6777)
										o->userdef_restitution = false;
										HX_STACK_LINE(6777)
										o->userdef_rfric = false;
										HX_STACK_LINE(6777)
										::zpp_nape::shape::ZPP_Edge tmp27 = o->__ref_edge2 = null();		HX_STACK_VAR(tmp27,"tmp27");
										HX_STACK_LINE(6777)
										o->__ref_edge1 = tmp27;
									}
									HX_STACK_LINE(6778)
									::zpp_nape::dynamics::ZPP_ColArbiter tmp27 = ::zpp_nape::dynamics::ZPP_ColArbiter_obj::zpp_pool;		HX_STACK_VAR(tmp27,"tmp27");
									HX_STACK_LINE(6778)
									o->next = tmp27;
									HX_STACK_LINE(6779)
									::zpp_nape::dynamics::ZPP_ColArbiter_obj::zpp_pool = o;
								}
								HX_STACK_LINE(6784)
								tmp12 = null();
							}
							else{
								HX_STACK_LINE(6786)
								tmp12 = arb;
							}
						}
					}
					else{
						HX_STACK_LINE(6788)
						tmp12 = arb;
					}
				}
				HX_STACK_LINE(6427)
				ret = tmp12;
			}
			else{
				HX_STACK_LINE(6792)
				bool tmp6 = (in_arb == null());		HX_STACK_VAR(tmp6,"tmp6");
				HX_STACK_LINE(6792)
				::zpp_nape::dynamics::ZPP_Arbiter tmp7;		HX_STACK_VAR(tmp7,"tmp7");
				HX_STACK_LINE(6792)
				if ((tmp6)){
					HX_STACK_LINE(6793)
					::zpp_nape::dynamics::ZPP_Arbiter ret1 = null();		HX_STACK_VAR(ret1,"ret1");
					HX_STACK_LINE(6794)
					int tmp8 = b1->arbiters->length;		HX_STACK_VAR(tmp8,"tmp8");
					HX_STACK_LINE(6794)
					int tmp9 = b2->arbiters->length;		HX_STACK_VAR(tmp9,"tmp9");
					HX_STACK_LINE(6794)
					bool tmp10 = (tmp8 < tmp9);		HX_STACK_VAR(tmp10,"tmp10");
					HX_STACK_LINE(6794)
					::zpp_nape::phys::ZPP_Body tmp11;		HX_STACK_VAR(tmp11,"tmp11");
					HX_STACK_LINE(6794)
					if ((tmp10)){
						HX_STACK_LINE(6794)
						tmp11 = b1;
					}
					else{
						HX_STACK_LINE(6794)
						tmp11 = b2;
					}
					HX_STACK_LINE(6794)
					::zpp_nape::phys::ZPP_Body b = tmp11;		HX_STACK_VAR(b,"b");
					HX_STACK_LINE(6795)
					{
						HX_STACK_LINE(6796)
						::zpp_nape::util::ZNPNode_ZPP_Arbiter tmp12 = b->arbiters->head;		HX_STACK_VAR(tmp12,"tmp12");
						HX_STACK_LINE(6796)
						::zpp_nape::util::ZNPNode_ZPP_Arbiter cx_ite = tmp12;		HX_STACK_VAR(cx_ite,"cx_ite");
						HX_STACK_LINE(6797)
						while((true)){
							HX_STACK_LINE(6797)
							bool tmp13 = (cx_ite != null());		HX_STACK_VAR(tmp13,"tmp13");
							HX_STACK_LINE(6797)
							bool tmp14 = !(tmp13);		HX_STACK_VAR(tmp14,"tmp14");
							HX_STACK_LINE(6797)
							if ((tmp14)){
								HX_STACK_LINE(6797)
								break;
							}
							HX_STACK_LINE(6798)
							::zpp_nape::dynamics::ZPP_Arbiter arb = cx_ite->elt;		HX_STACK_VAR(arb,"arb");
							HX_STACK_LINE(6799)
							{
								HX_STACK_LINE(6808)
								bool tmp15 = (arb->id == sa->id);		HX_STACK_VAR(tmp15,"tmp15");
								HX_STACK_LINE(6808)
								bool tmp16;		HX_STACK_VAR(tmp16,"tmp16");
								HX_STACK_LINE(6808)
								if ((tmp15)){
									HX_STACK_LINE(6808)
									tmp16 = (arb->di == sb->id);
								}
								else{
									HX_STACK_LINE(6808)
									tmp16 = false;
								}
								HX_STACK_LINE(6808)
								if ((tmp16)){
									HX_STACK_LINE(6809)
									ret1 = arb;
									HX_STACK_LINE(6810)
									break;
								}
							}
							HX_STACK_LINE(6813)
							cx_ite = cx_ite->next;
						}
					}
					HX_STACK_LINE(6816)
					tmp7 = ret1;
				}
				else{
					HX_STACK_LINE(6817)
					tmp7 = in_arb;
				}
				HX_STACK_LINE(6792)
				::zpp_nape::dynamics::ZPP_Arbiter xarb = tmp7;		HX_STACK_VAR(xarb,"xarb");
				HX_STACK_LINE(6818)
				bool tmp8 = (xarb == null());		HX_STACK_VAR(tmp8,"tmp8");
				HX_STACK_LINE(6818)
				bool first = tmp8;		HX_STACK_VAR(first,"first");
				HX_STACK_LINE(6819)
				::zpp_nape::dynamics::ZPP_SensorArbiter arb;		HX_STACK_VAR(arb,"arb");
				HX_STACK_LINE(6820)
				bool swapped = false;		HX_STACK_VAR(swapped,"swapped");
				HX_STACK_LINE(6821)
				bool tmp9 = first;		HX_STACK_VAR(tmp9,"tmp9");
				HX_STACK_LINE(6821)
				if ((tmp9)){
					HX_STACK_LINE(6822)
					::zpp_nape::dynamics::ZPP_SensorArbiter tmp10 = ::zpp_nape::dynamics::ZPP_SensorArbiter_obj::zpp_pool;		HX_STACK_VAR(tmp10,"tmp10");
					HX_STACK_LINE(6822)
					bool tmp11 = (tmp10 == null());		HX_STACK_VAR(tmp11,"tmp11");
					HX_STACK_LINE(6822)
					if ((tmp11)){
						HX_STACK_LINE(6823)
						::zpp_nape::dynamics::ZPP_SensorArbiter tmp12 = ::zpp_nape::dynamics::ZPP_SensorArbiter_obj::__new();		HX_STACK_VAR(tmp12,"tmp12");
						HX_STACK_LINE(6823)
						arb = tmp12;
					}
					else{
						HX_STACK_LINE(6829)
						::zpp_nape::dynamics::ZPP_SensorArbiter tmp12 = ::zpp_nape::dynamics::ZPP_SensorArbiter_obj::zpp_pool;		HX_STACK_VAR(tmp12,"tmp12");
						HX_STACK_LINE(6829)
						arb = tmp12;
						HX_STACK_LINE(6830)
						::zpp_nape::dynamics::ZPP_SensorArbiter_obj::zpp_pool = arb->next;
						HX_STACK_LINE(6831)
						arb->next = null();
					}
					HX_STACK_LINE(6836)
					Dynamic();
				}
				else{
					HX_STACK_LINE(6839)
					bool tmp10 = (xarb->sensorarb == null());		HX_STACK_VAR(tmp10,"tmp10");
					HX_STACK_LINE(6839)
					if ((tmp10)){
						HX_STACK_LINE(6840)
						{
							HX_STACK_LINE(6840)
							xarb->cleared = true;
							HX_STACK_LINE(6840)
							bool tmp11 = true;		HX_STACK_VAR(tmp11,"tmp11");
							HX_STACK_LINE(6840)
							bool tmp12 = !(tmp11);		HX_STACK_VAR(tmp12,"tmp12");
							HX_STACK_LINE(6840)
							bool tmp13;		HX_STACK_VAR(tmp13,"tmp13");
							HX_STACK_LINE(6840)
							if ((tmp12)){
								HX_STACK_LINE(6840)
								tmp13 = (xarb->b2 == null());
							}
							else{
								HX_STACK_LINE(6840)
								tmp13 = true;
							}
							HX_STACK_LINE(6840)
							if ((tmp13)){
								HX_STACK_LINE(6840)
								::zpp_nape::util::ZNPList_ZPP_Arbiter tmp14 = xarb->b1->arbiters;		HX_STACK_VAR(tmp14,"tmp14");
								HX_STACK_LINE(6840)
								::zpp_nape::util::ZNPList_ZPP_Arbiter _this = tmp14;		HX_STACK_VAR(_this,"_this");
								HX_STACK_LINE(6840)
								{
									HX_STACK_LINE(6840)
									::zpp_nape::util::ZNPNode_ZPP_Arbiter pre = null();		HX_STACK_VAR(pre,"pre");
									HX_STACK_LINE(6840)
									::zpp_nape::util::ZNPNode_ZPP_Arbiter cur = _this->head;		HX_STACK_VAR(cur,"cur");
									HX_STACK_LINE(6840)
									bool ret1 = false;		HX_STACK_VAR(ret1,"ret1");
									HX_STACK_LINE(6840)
									while((true)){
										HX_STACK_LINE(6840)
										bool tmp15 = (cur != null());		HX_STACK_VAR(tmp15,"tmp15");
										HX_STACK_LINE(6840)
										bool tmp16 = !(tmp15);		HX_STACK_VAR(tmp16,"tmp16");
										HX_STACK_LINE(6840)
										if ((tmp16)){
											HX_STACK_LINE(6840)
											break;
										}
										HX_STACK_LINE(6840)
										bool tmp17 = (cur->elt == xarb);		HX_STACK_VAR(tmp17,"tmp17");
										HX_STACK_LINE(6840)
										if ((tmp17)){
											HX_STACK_LINE(6840)
											{
												HX_STACK_LINE(6840)
												::zpp_nape::util::ZNPNode_ZPP_Arbiter old;		HX_STACK_VAR(old,"old");
												HX_STACK_LINE(6840)
												::zpp_nape::util::ZNPNode_ZPP_Arbiter ret2;		HX_STACK_VAR(ret2,"ret2");
												HX_STACK_LINE(6840)
												bool tmp18 = (pre == null());		HX_STACK_VAR(tmp18,"tmp18");
												HX_STACK_LINE(6840)
												if ((tmp18)){
													HX_STACK_LINE(6840)
													old = _this->head;
													HX_STACK_LINE(6840)
													ret2 = old->next;
													HX_STACK_LINE(6840)
													_this->head = ret2;
													HX_STACK_LINE(6840)
													bool tmp19 = (_this->head == null());		HX_STACK_VAR(tmp19,"tmp19");
													HX_STACK_LINE(6840)
													if ((tmp19)){
														HX_STACK_LINE(6840)
														_this->pushmod = true;
													}
												}
												else{
													HX_STACK_LINE(6840)
													old = pre->next;
													HX_STACK_LINE(6840)
													ret2 = old->next;
													HX_STACK_LINE(6840)
													pre->next = ret2;
													HX_STACK_LINE(6840)
													bool tmp19 = (ret2 == null());		HX_STACK_VAR(tmp19,"tmp19");
													HX_STACK_LINE(6840)
													if ((tmp19)){
														HX_STACK_LINE(6840)
														_this->pushmod = true;
													}
												}
												HX_STACK_LINE(6840)
												{
													HX_STACK_LINE(6840)
													::zpp_nape::util::ZNPNode_ZPP_Arbiter o = old;		HX_STACK_VAR(o,"o");
													HX_STACK_LINE(6840)
													o->elt = null();
													HX_STACK_LINE(6840)
													::zpp_nape::util::ZNPNode_ZPP_Arbiter tmp19 = ::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool;		HX_STACK_VAR(tmp19,"tmp19");
													HX_STACK_LINE(6840)
													o->next = tmp19;
													HX_STACK_LINE(6840)
													::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool = o;
												}
												HX_STACK_LINE(6840)
												_this->modified = true;
												HX_STACK_LINE(6840)
												(_this->length)--;
												HX_STACK_LINE(6840)
												_this->pushmod = true;
												HX_STACK_LINE(6840)
												ret2;
											}
											HX_STACK_LINE(6840)
											ret1 = true;
											HX_STACK_LINE(6840)
											break;
										}
										HX_STACK_LINE(6840)
										pre = cur;
										HX_STACK_LINE(6840)
										cur = cur->next;
									}
									HX_STACK_LINE(6840)
									ret1;
								}
							}
							HX_STACK_LINE(6840)
							bool tmp14 = true;		HX_STACK_VAR(tmp14,"tmp14");
							HX_STACK_LINE(6840)
							bool tmp15 = !(tmp14);		HX_STACK_VAR(tmp15,"tmp15");
							HX_STACK_LINE(6840)
							bool tmp16;		HX_STACK_VAR(tmp16,"tmp16");
							HX_STACK_LINE(6840)
							if ((tmp15)){
								HX_STACK_LINE(6840)
								tmp16 = (xarb->b1 == null());
							}
							else{
								HX_STACK_LINE(6840)
								tmp16 = true;
							}
							HX_STACK_LINE(6840)
							if ((tmp16)){
								HX_STACK_LINE(6840)
								::zpp_nape::util::ZNPList_ZPP_Arbiter tmp17 = xarb->b2->arbiters;		HX_STACK_VAR(tmp17,"tmp17");
								HX_STACK_LINE(6840)
								::zpp_nape::util::ZNPList_ZPP_Arbiter _this = tmp17;		HX_STACK_VAR(_this,"_this");
								HX_STACK_LINE(6840)
								{
									HX_STACK_LINE(6840)
									::zpp_nape::util::ZNPNode_ZPP_Arbiter pre = null();		HX_STACK_VAR(pre,"pre");
									HX_STACK_LINE(6840)
									::zpp_nape::util::ZNPNode_ZPP_Arbiter cur = _this->head;		HX_STACK_VAR(cur,"cur");
									HX_STACK_LINE(6840)
									bool ret1 = false;		HX_STACK_VAR(ret1,"ret1");
									HX_STACK_LINE(6840)
									while((true)){
										HX_STACK_LINE(6840)
										bool tmp18 = (cur != null());		HX_STACK_VAR(tmp18,"tmp18");
										HX_STACK_LINE(6840)
										bool tmp19 = !(tmp18);		HX_STACK_VAR(tmp19,"tmp19");
										HX_STACK_LINE(6840)
										if ((tmp19)){
											HX_STACK_LINE(6840)
											break;
										}
										HX_STACK_LINE(6840)
										bool tmp20 = (cur->elt == xarb);		HX_STACK_VAR(tmp20,"tmp20");
										HX_STACK_LINE(6840)
										if ((tmp20)){
											HX_STACK_LINE(6840)
											{
												HX_STACK_LINE(6840)
												::zpp_nape::util::ZNPNode_ZPP_Arbiter old;		HX_STACK_VAR(old,"old");
												HX_STACK_LINE(6840)
												::zpp_nape::util::ZNPNode_ZPP_Arbiter ret2;		HX_STACK_VAR(ret2,"ret2");
												HX_STACK_LINE(6840)
												bool tmp21 = (pre == null());		HX_STACK_VAR(tmp21,"tmp21");
												HX_STACK_LINE(6840)
												if ((tmp21)){
													HX_STACK_LINE(6840)
													old = _this->head;
													HX_STACK_LINE(6840)
													ret2 = old->next;
													HX_STACK_LINE(6840)
													_this->head = ret2;
													HX_STACK_LINE(6840)
													bool tmp22 = (_this->head == null());		HX_STACK_VAR(tmp22,"tmp22");
													HX_STACK_LINE(6840)
													if ((tmp22)){
														HX_STACK_LINE(6840)
														_this->pushmod = true;
													}
												}
												else{
													HX_STACK_LINE(6840)
													old = pre->next;
													HX_STACK_LINE(6840)
													ret2 = old->next;
													HX_STACK_LINE(6840)
													pre->next = ret2;
													HX_STACK_LINE(6840)
													bool tmp22 = (ret2 == null());		HX_STACK_VAR(tmp22,"tmp22");
													HX_STACK_LINE(6840)
													if ((tmp22)){
														HX_STACK_LINE(6840)
														_this->pushmod = true;
													}
												}
												HX_STACK_LINE(6840)
												{
													HX_STACK_LINE(6840)
													::zpp_nape::util::ZNPNode_ZPP_Arbiter o = old;		HX_STACK_VAR(o,"o");
													HX_STACK_LINE(6840)
													o->elt = null();
													HX_STACK_LINE(6840)
													::zpp_nape::util::ZNPNode_ZPP_Arbiter tmp22 = ::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool;		HX_STACK_VAR(tmp22,"tmp22");
													HX_STACK_LINE(6840)
													o->next = tmp22;
													HX_STACK_LINE(6840)
													::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool = o;
												}
												HX_STACK_LINE(6840)
												_this->modified = true;
												HX_STACK_LINE(6840)
												(_this->length)--;
												HX_STACK_LINE(6840)
												_this->pushmod = true;
												HX_STACK_LINE(6840)
												ret2;
											}
											HX_STACK_LINE(6840)
											ret1 = true;
											HX_STACK_LINE(6840)
											break;
										}
										HX_STACK_LINE(6840)
										pre = cur;
										HX_STACK_LINE(6840)
										cur = cur->next;
									}
									HX_STACK_LINE(6840)
									ret1;
								}
							}
							HX_STACK_LINE(6840)
							bool tmp17 = (xarb->pair != null());		HX_STACK_VAR(tmp17,"tmp17");
							HX_STACK_LINE(6840)
							if ((tmp17)){
								HX_STACK_LINE(6840)
								xarb->pair->arb = null();
								HX_STACK_LINE(6840)
								xarb->pair = null();
							}
							HX_STACK_LINE(6840)
							xarb->active = false;
							HX_STACK_LINE(6840)
							::zpp_nape::util::ZNPList_ZPP_FluidArbiter tmp18 = this->f_arbiters;		HX_STACK_VAR(tmp18,"tmp18");
							HX_STACK_LINE(6840)
							tmp18->modified = true;
						}
						HX_STACK_LINE(6841)
						{
							HX_STACK_LINE(6842)
							::zpp_nape::dynamics::ZPP_SensorArbiter tmp11 = ::zpp_nape::dynamics::ZPP_SensorArbiter_obj::zpp_pool;		HX_STACK_VAR(tmp11,"tmp11");
							HX_STACK_LINE(6842)
							bool tmp12 = (tmp11 == null());		HX_STACK_VAR(tmp12,"tmp12");
							HX_STACK_LINE(6842)
							if ((tmp12)){
								HX_STACK_LINE(6843)
								::zpp_nape::dynamics::ZPP_SensorArbiter tmp13 = ::zpp_nape::dynamics::ZPP_SensorArbiter_obj::__new();		HX_STACK_VAR(tmp13,"tmp13");
								HX_STACK_LINE(6843)
								arb = tmp13;
							}
							else{
								HX_STACK_LINE(6849)
								::zpp_nape::dynamics::ZPP_SensorArbiter tmp13 = ::zpp_nape::dynamics::ZPP_SensorArbiter_obj::zpp_pool;		HX_STACK_VAR(tmp13,"tmp13");
								HX_STACK_LINE(6849)
								arb = tmp13;
								HX_STACK_LINE(6850)
								::zpp_nape::dynamics::ZPP_SensorArbiter_obj::zpp_pool = arb->next;
								HX_STACK_LINE(6851)
								arb->next = null();
							}
							HX_STACK_LINE(6856)
							Dynamic();
						}
						HX_STACK_LINE(6858)
						arb->intchange = true;
						HX_STACK_LINE(6859)
						first = true;
						HX_STACK_LINE(6860)
						swapped = true;
					}
					else{
						HX_STACK_LINE(6862)
						arb = xarb->sensorarb;
					}
				}
				HX_STACK_LINE(6864)
				::zpp_nape::dynamics::ZPP_Arbiter tmp10;		HX_STACK_VAR(tmp10,"tmp10");
				HX_STACK_LINE(6864)
				{
					HX_STACK_LINE(6865)
					int tmp11 = ::zpp_nape::util::ZPP_Flags_obj::id_InteractionType_SENSOR;		HX_STACK_VAR(tmp11,"tmp11");
					HX_STACK_LINE(6865)
					int inttype = tmp11;		HX_STACK_VAR(inttype,"inttype");
					HX_STACK_LINE(6866)
					bool tmp12 = first;		HX_STACK_VAR(tmp12,"tmp12");
					HX_STACK_LINE(6866)
					bool tmp13 = !(tmp12);		HX_STACK_VAR(tmp13,"tmp13");
					HX_STACK_LINE(6866)
					bool tmp14 = tmp13;		HX_STACK_VAR(tmp14,"tmp14");
					HX_STACK_LINE(6866)
					bool tmp15;		HX_STACK_VAR(tmp15,"tmp15");
					HX_STACK_LINE(6866)
					if ((tmp14)){
						HX_STACK_LINE(6866)
						int tmp16 = arb->stamp;		HX_STACK_VAR(tmp16,"tmp16");
						HX_STACK_LINE(6866)
						int tmp17 = this->stamp;		HX_STACK_VAR(tmp17,"tmp17");
						HX_STACK_LINE(6866)
						int tmp18 = tmp17;		HX_STACK_VAR(tmp18,"tmp18");
						HX_STACK_LINE(6866)
						int tmp19 = tmp18;		HX_STACK_VAR(tmp19,"tmp19");
						HX_STACK_LINE(6866)
						tmp15 = (tmp16 != tmp19);
					}
					else{
						HX_STACK_LINE(6866)
						tmp15 = true;
					}
					HX_STACK_LINE(6866)
					bool tmp16 = !(tmp15);		HX_STACK_VAR(tmp16,"tmp16");
					HX_STACK_LINE(6866)
					bool tmp17;		HX_STACK_VAR(tmp17,"tmp17");
					HX_STACK_LINE(6866)
					if ((tmp16)){
						HX_STACK_LINE(6866)
						tmp17 = continuous;
					}
					else{
						HX_STACK_LINE(6866)
						tmp17 = true;
					}
					HX_STACK_LINE(6866)
					if ((tmp17)){
						HX_STACK_LINE(6867)
						int tmp18 = this->stamp;		HX_STACK_VAR(tmp18,"tmp18");
						HX_STACK_LINE(6867)
						arb->stamp = tmp18;
						HX_STACK_LINE(6868)
						::zpp_nape::shape::ZPP_Shape tmp19 = sa;		HX_STACK_VAR(tmp19,"tmp19");
						HX_STACK_LINE(6868)
						::zpp_nape::shape::ZPP_Shape tmp20 = sb;		HX_STACK_VAR(tmp20,"tmp20");
						HX_STACK_LINE(6868)
						bool tmp21 = ::zpp_nape::geom::ZPP_Collide_obj::testCollide(tmp19,tmp20);		HX_STACK_VAR(tmp21,"tmp21");
						HX_STACK_LINE(6868)
						if ((tmp21)){
							HX_STACK_LINE(6869)
							bool tmp22 = first;		HX_STACK_VAR(tmp22,"tmp22");
							HX_STACK_LINE(6869)
							if ((tmp22)){
								HX_STACK_LINE(6870)
								{
									HX_STACK_LINE(6870)
									arb->b1 = s1->body;
									HX_STACK_LINE(6870)
									arb->ws1 = s1;
									HX_STACK_LINE(6870)
									arb->b2 = s2->body;
									HX_STACK_LINE(6870)
									arb->ws2 = s2;
									HX_STACK_LINE(6870)
									arb->id = sa->id;
									HX_STACK_LINE(6870)
									arb->di = sb->id;
									HX_STACK_LINE(6870)
									{
										HX_STACK_LINE(6870)
										::zpp_nape::util::ZNPList_ZPP_Arbiter tmp23 = arb->b1->arbiters;		HX_STACK_VAR(tmp23,"tmp23");
										HX_STACK_LINE(6870)
										::zpp_nape::util::ZNPList_ZPP_Arbiter _this = tmp23;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(6870)
										::zpp_nape::util::ZNPNode_ZPP_Arbiter tmp24;		HX_STACK_VAR(tmp24,"tmp24");
										HX_STACK_LINE(6870)
										{
											HX_STACK_LINE(6870)
											::zpp_nape::util::ZNPNode_ZPP_Arbiter ret1;		HX_STACK_VAR(ret1,"ret1");
											HX_STACK_LINE(6870)
											{
												HX_STACK_LINE(6870)
												::zpp_nape::util::ZNPNode_ZPP_Arbiter tmp25 = ::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool;		HX_STACK_VAR(tmp25,"tmp25");
												HX_STACK_LINE(6870)
												bool tmp26 = (tmp25 == null());		HX_STACK_VAR(tmp26,"tmp26");
												HX_STACK_LINE(6870)
												if ((tmp26)){
													HX_STACK_LINE(6870)
													::zpp_nape::util::ZNPNode_ZPP_Arbiter tmp27 = ::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::__new();		HX_STACK_VAR(tmp27,"tmp27");
													HX_STACK_LINE(6870)
													ret1 = tmp27;
												}
												else{
													HX_STACK_LINE(6870)
													::zpp_nape::util::ZNPNode_ZPP_Arbiter tmp27 = ::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool;		HX_STACK_VAR(tmp27,"tmp27");
													HX_STACK_LINE(6870)
													ret1 = tmp27;
													HX_STACK_LINE(6870)
													::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool = ret1->next;
													HX_STACK_LINE(6870)
													ret1->next = null();
												}
												HX_STACK_LINE(6870)
												Dynamic();
											}
											HX_STACK_LINE(6870)
											ret1->elt = arb;
											HX_STACK_LINE(6870)
											tmp24 = ret1;
										}
										HX_STACK_LINE(6870)
										::zpp_nape::util::ZNPNode_ZPP_Arbiter temp = tmp24;		HX_STACK_VAR(temp,"temp");
										HX_STACK_LINE(6870)
										temp->next = _this->head;
										HX_STACK_LINE(6870)
										_this->head = temp;
										HX_STACK_LINE(6870)
										_this->modified = true;
										HX_STACK_LINE(6870)
										(_this->length)++;
										HX_STACK_LINE(6870)
										arb;
									}
									HX_STACK_LINE(6870)
									{
										HX_STACK_LINE(6870)
										::zpp_nape::util::ZNPList_ZPP_Arbiter tmp23 = arb->b2->arbiters;		HX_STACK_VAR(tmp23,"tmp23");
										HX_STACK_LINE(6870)
										::zpp_nape::util::ZNPList_ZPP_Arbiter _this = tmp23;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(6870)
										::zpp_nape::util::ZNPNode_ZPP_Arbiter tmp24;		HX_STACK_VAR(tmp24,"tmp24");
										HX_STACK_LINE(6870)
										{
											HX_STACK_LINE(6870)
											::zpp_nape::util::ZNPNode_ZPP_Arbiter ret1;		HX_STACK_VAR(ret1,"ret1");
											HX_STACK_LINE(6870)
											{
												HX_STACK_LINE(6870)
												::zpp_nape::util::ZNPNode_ZPP_Arbiter tmp25 = ::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool;		HX_STACK_VAR(tmp25,"tmp25");
												HX_STACK_LINE(6870)
												bool tmp26 = (tmp25 == null());		HX_STACK_VAR(tmp26,"tmp26");
												HX_STACK_LINE(6870)
												if ((tmp26)){
													HX_STACK_LINE(6870)
													::zpp_nape::util::ZNPNode_ZPP_Arbiter tmp27 = ::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::__new();		HX_STACK_VAR(tmp27,"tmp27");
													HX_STACK_LINE(6870)
													ret1 = tmp27;
												}
												else{
													HX_STACK_LINE(6870)
													::zpp_nape::util::ZNPNode_ZPP_Arbiter tmp27 = ::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool;		HX_STACK_VAR(tmp27,"tmp27");
													HX_STACK_LINE(6870)
													ret1 = tmp27;
													HX_STACK_LINE(6870)
													::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool = ret1->next;
													HX_STACK_LINE(6870)
													ret1->next = null();
												}
												HX_STACK_LINE(6870)
												Dynamic();
											}
											HX_STACK_LINE(6870)
											ret1->elt = arb;
											HX_STACK_LINE(6870)
											tmp24 = ret1;
										}
										HX_STACK_LINE(6870)
										::zpp_nape::util::ZNPNode_ZPP_Arbiter temp = tmp24;		HX_STACK_VAR(temp,"temp");
										HX_STACK_LINE(6870)
										temp->next = _this->head;
										HX_STACK_LINE(6870)
										_this->head = temp;
										HX_STACK_LINE(6870)
										_this->modified = true;
										HX_STACK_LINE(6870)
										(_this->length)++;
										HX_STACK_LINE(6870)
										arb;
									}
									HX_STACK_LINE(6870)
									arb->active = true;
									HX_STACK_LINE(6870)
									arb->present = (int)0;
									HX_STACK_LINE(6870)
									arb->cleared = false;
									HX_STACK_LINE(6870)
									arb->sleeping = false;
									HX_STACK_LINE(6870)
									arb->fresh = false;
									HX_STACK_LINE(6870)
									arb->presentable = false;
								}
								HX_STACK_LINE(6871)
								{
									HX_STACK_LINE(6871)
									::zpp_nape::util::ZNPList_ZPP_SensorArbiter tmp23 = this->s_arbiters;		HX_STACK_VAR(tmp23,"tmp23");
									HX_STACK_LINE(6871)
									::zpp_nape::util::ZNPList_ZPP_SensorArbiter _this = tmp23;		HX_STACK_VAR(_this,"_this");
									HX_STACK_LINE(6871)
									::zpp_nape::util::ZNPNode_ZPP_SensorArbiter tmp24;		HX_STACK_VAR(tmp24,"tmp24");
									HX_STACK_LINE(6871)
									{
										HX_STACK_LINE(6871)
										::zpp_nape::util::ZNPNode_ZPP_SensorArbiter ret1;		HX_STACK_VAR(ret1,"ret1");
										HX_STACK_LINE(6871)
										{
											HX_STACK_LINE(6871)
											::zpp_nape::util::ZNPNode_ZPP_SensorArbiter tmp25 = ::zpp_nape::util::ZNPNode_ZPP_SensorArbiter_obj::zpp_pool;		HX_STACK_VAR(tmp25,"tmp25");
											HX_STACK_LINE(6871)
											bool tmp26 = (tmp25 == null());		HX_STACK_VAR(tmp26,"tmp26");
											HX_STACK_LINE(6871)
											if ((tmp26)){
												HX_STACK_LINE(6871)
												::zpp_nape::util::ZNPNode_ZPP_SensorArbiter tmp27 = ::zpp_nape::util::ZNPNode_ZPP_SensorArbiter_obj::__new();		HX_STACK_VAR(tmp27,"tmp27");
												HX_STACK_LINE(6871)
												ret1 = tmp27;
											}
											else{
												HX_STACK_LINE(6871)
												::zpp_nape::util::ZNPNode_ZPP_SensorArbiter tmp27 = ::zpp_nape::util::ZNPNode_ZPP_SensorArbiter_obj::zpp_pool;		HX_STACK_VAR(tmp27,"tmp27");
												HX_STACK_LINE(6871)
												ret1 = tmp27;
												HX_STACK_LINE(6871)
												::zpp_nape::util::ZNPNode_ZPP_SensorArbiter_obj::zpp_pool = ret1->next;
												HX_STACK_LINE(6871)
												ret1->next = null();
											}
											HX_STACK_LINE(6871)
											Dynamic();
										}
										HX_STACK_LINE(6871)
										ret1->elt = arb;
										HX_STACK_LINE(6871)
										tmp24 = ret1;
									}
									HX_STACK_LINE(6871)
									::zpp_nape::util::ZNPNode_ZPP_SensorArbiter temp = tmp24;		HX_STACK_VAR(temp,"temp");
									HX_STACK_LINE(6871)
									temp->next = _this->head;
									HX_STACK_LINE(6871)
									_this->head = temp;
									HX_STACK_LINE(6871)
									_this->modified = true;
									HX_STACK_LINE(6871)
									(_this->length)++;
									HX_STACK_LINE(6871)
									arb;
								}
								HX_STACK_LINE(6872)
								bool tmp23 = swapped;		HX_STACK_VAR(tmp23,"tmp23");
								HX_STACK_LINE(6872)
								bool tmp24 = !(tmp23);		HX_STACK_VAR(tmp24,"tmp24");
								HX_STACK_LINE(6872)
								arb->fresh = tmp24;
							}
							else{
								HX_STACK_LINE(6875)
								int tmp23 = arb->up_stamp;		HX_STACK_VAR(tmp23,"tmp23");
								HX_STACK_LINE(6875)
								int tmp24 = this->stamp;		HX_STACK_VAR(tmp24,"tmp24");
								HX_STACK_LINE(6875)
								int tmp25 = (tmp24 - (int)1);		HX_STACK_VAR(tmp25,"tmp25");
								HX_STACK_LINE(6875)
								bool tmp26 = (tmp23 < tmp25);		HX_STACK_VAR(tmp26,"tmp26");
								HX_STACK_LINE(6875)
								bool tmp27 = !(tmp26);		HX_STACK_VAR(tmp27,"tmp27");
								HX_STACK_LINE(6875)
								bool tmp28;		HX_STACK_VAR(tmp28,"tmp28");
								HX_STACK_LINE(6875)
								if ((tmp27)){
									HX_STACK_LINE(6875)
									int tmp29 = arb->endGenerated;		HX_STACK_VAR(tmp29,"tmp29");
									HX_STACK_LINE(6875)
									int tmp30 = this->stamp;		HX_STACK_VAR(tmp30,"tmp30");
									HX_STACK_LINE(6875)
									int tmp31 = tmp30;		HX_STACK_VAR(tmp31,"tmp31");
									HX_STACK_LINE(6875)
									bool tmp32 = (tmp29 == tmp31);		HX_STACK_VAR(tmp32,"tmp32");
									HX_STACK_LINE(6875)
									bool tmp33 = tmp32;		HX_STACK_VAR(tmp33,"tmp33");
									HX_STACK_LINE(6875)
									bool tmp34 = tmp33;		HX_STACK_VAR(tmp34,"tmp34");
									HX_STACK_LINE(6875)
									if ((tmp34)){
										HX_STACK_LINE(6875)
										tmp28 = continuous;
									}
									else{
										HX_STACK_LINE(6875)
										tmp28 = false;
									}
								}
								else{
									HX_STACK_LINE(6875)
									tmp28 = true;
								}
								HX_STACK_LINE(6875)
								arb->fresh = tmp28;
							}
							HX_STACK_LINE(6877)
							arb->up_stamp = arb->stamp;
							HX_STACK_LINE(6878)
							bool tmp23 = arb->fresh;		HX_STACK_VAR(tmp23,"tmp23");
							HX_STACK_LINE(6878)
							bool tmp24 = !(tmp23);		HX_STACK_VAR(tmp24,"tmp24");
							HX_STACK_LINE(6878)
							bool tmp25;		HX_STACK_VAR(tmp25,"tmp25");
							HX_STACK_LINE(6878)
							if ((tmp24)){
								HX_STACK_LINE(6878)
								int tmp26 = arb->immState;		HX_STACK_VAR(tmp26,"tmp26");
								HX_STACK_LINE(6878)
								int tmp27 = ::zpp_nape::util::ZPP_Flags_obj::id_ImmState_ALWAYS;		HX_STACK_VAR(tmp27,"tmp27");
								HX_STACK_LINE(6878)
								int tmp28 = tmp27;		HX_STACK_VAR(tmp28,"tmp28");
								HX_STACK_LINE(6878)
								int tmp29 = (int(tmp26) & int(tmp28));		HX_STACK_VAR(tmp29,"tmp29");
								HX_STACK_LINE(6878)
								int tmp30 = tmp29;		HX_STACK_VAR(tmp30,"tmp30");
								HX_STACK_LINE(6878)
								tmp25 = (tmp30 == (int)0);
							}
							else{
								HX_STACK_LINE(6878)
								tmp25 = true;
							}
							HX_STACK_LINE(6878)
							if ((tmp25)){
								HX_STACK_LINE(6879)
								int tmp26 = ::zpp_nape::util::ZPP_Flags_obj::id_ImmState_ACCEPT;		HX_STACK_VAR(tmp26,"tmp26");
								HX_STACK_LINE(6879)
								arb->immState = tmp26;
								HX_STACK_LINE(6880)
								bool anyimpure = false;		HX_STACK_VAR(anyimpure,"anyimpure");
								HX_STACK_LINE(6881)
								int tmp27 = arb->ws1->id;		HX_STACK_VAR(tmp27,"tmp27");
								HX_STACK_LINE(6881)
								int tmp28 = arb->ws2->id;		HX_STACK_VAR(tmp28,"tmp28");
								HX_STACK_LINE(6881)
								bool tmp29 = (tmp27 > tmp28);		HX_STACK_VAR(tmp29,"tmp29");
								HX_STACK_LINE(6881)
								::zpp_nape::shape::ZPP_Shape tmp30;		HX_STACK_VAR(tmp30,"tmp30");
								HX_STACK_LINE(6881)
								if ((tmp29)){
									HX_STACK_LINE(6881)
									tmp30 = arb->ws2;
								}
								else{
									HX_STACK_LINE(6881)
									tmp30 = arb->ws1;
								}
								HX_STACK_LINE(6881)
								::zpp_nape::shape::ZPP_Shape arbs1 = tmp30;		HX_STACK_VAR(arbs1,"arbs1");
								HX_STACK_LINE(6882)
								int tmp31 = arb->ws1->id;		HX_STACK_VAR(tmp31,"tmp31");
								HX_STACK_LINE(6882)
								int tmp32 = arb->ws2->id;		HX_STACK_VAR(tmp32,"tmp32");
								HX_STACK_LINE(6882)
								bool tmp33 = (tmp31 > tmp32);		HX_STACK_VAR(tmp33,"tmp33");
								HX_STACK_LINE(6882)
								::zpp_nape::shape::ZPP_Shape tmp34;		HX_STACK_VAR(tmp34,"tmp34");
								HX_STACK_LINE(6882)
								if ((tmp33)){
									HX_STACK_LINE(6882)
									tmp34 = arb->ws1;
								}
								else{
									HX_STACK_LINE(6882)
									tmp34 = arb->ws2;
								}
								HX_STACK_LINE(6882)
								::zpp_nape::shape::ZPP_Shape arbs2 = tmp34;		HX_STACK_VAR(arbs2,"arbs2");
								HX_STACK_LINE(6883)
								{
									HX_STACK_LINE(6883)
									{
										HX_STACK_LINE(6883)
										::zpp_nape::util::ZNPList_ZPP_Interactor tmp35 = this->mrca1;		HX_STACK_VAR(tmp35,"tmp35");
										HX_STACK_LINE(6883)
										::zpp_nape::util::ZNPList_ZPP_Interactor _this = tmp35;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(6883)
										{
											HX_STACK_LINE(6883)
											while((true)){
												HX_STACK_LINE(6883)
												bool tmp36 = (_this->head == null());		HX_STACK_VAR(tmp36,"tmp36");
												HX_STACK_LINE(6883)
												bool tmp37 = !(tmp36);		HX_STACK_VAR(tmp37,"tmp37");
												HX_STACK_LINE(6883)
												bool tmp38 = !(tmp37);		HX_STACK_VAR(tmp38,"tmp38");
												HX_STACK_LINE(6883)
												if ((tmp38)){
													HX_STACK_LINE(6883)
													break;
												}
												HX_STACK_LINE(6883)
												::zpp_nape::util::ZNPNode_ZPP_Interactor ret1 = _this->head;		HX_STACK_VAR(ret1,"ret1");
												HX_STACK_LINE(6883)
												_this->head = ret1->next;
												HX_STACK_LINE(6883)
												{
													HX_STACK_LINE(6883)
													::zpp_nape::util::ZNPNode_ZPP_Interactor o = ret1;		HX_STACK_VAR(o,"o");
													HX_STACK_LINE(6883)
													o->elt = null();
													HX_STACK_LINE(6883)
													::zpp_nape::util::ZNPNode_ZPP_Interactor tmp39 = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool;		HX_STACK_VAR(tmp39,"tmp39");
													HX_STACK_LINE(6883)
													o->next = tmp39;
													HX_STACK_LINE(6883)
													::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool = o;
												}
												HX_STACK_LINE(6883)
												bool tmp39 = (_this->head == null());		HX_STACK_VAR(tmp39,"tmp39");
												HX_STACK_LINE(6883)
												if ((tmp39)){
													HX_STACK_LINE(6883)
													_this->pushmod = true;
												}
												HX_STACK_LINE(6883)
												_this->modified = true;
												HX_STACK_LINE(6883)
												(_this->length)--;
											}
											HX_STACK_LINE(6883)
											_this->pushmod = true;
										}
									}
									HX_STACK_LINE(6883)
									{
										HX_STACK_LINE(6883)
										::zpp_nape::util::ZNPList_ZPP_Interactor tmp35 = this->mrca2;		HX_STACK_VAR(tmp35,"tmp35");
										HX_STACK_LINE(6883)
										::zpp_nape::util::ZNPList_ZPP_Interactor _this = tmp35;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(6883)
										{
											HX_STACK_LINE(6883)
											while((true)){
												HX_STACK_LINE(6883)
												bool tmp36 = (_this->head == null());		HX_STACK_VAR(tmp36,"tmp36");
												HX_STACK_LINE(6883)
												bool tmp37 = !(tmp36);		HX_STACK_VAR(tmp37,"tmp37");
												HX_STACK_LINE(6883)
												bool tmp38 = !(tmp37);		HX_STACK_VAR(tmp38,"tmp38");
												HX_STACK_LINE(6883)
												if ((tmp38)){
													HX_STACK_LINE(6883)
													break;
												}
												HX_STACK_LINE(6883)
												::zpp_nape::util::ZNPNode_ZPP_Interactor ret1 = _this->head;		HX_STACK_VAR(ret1,"ret1");
												HX_STACK_LINE(6883)
												_this->head = ret1->next;
												HX_STACK_LINE(6883)
												{
													HX_STACK_LINE(6883)
													::zpp_nape::util::ZNPNode_ZPP_Interactor o = ret1;		HX_STACK_VAR(o,"o");
													HX_STACK_LINE(6883)
													o->elt = null();
													HX_STACK_LINE(6883)
													::zpp_nape::util::ZNPNode_ZPP_Interactor tmp39 = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool;		HX_STACK_VAR(tmp39,"tmp39");
													HX_STACK_LINE(6883)
													o->next = tmp39;
													HX_STACK_LINE(6883)
													::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool = o;
												}
												HX_STACK_LINE(6883)
												bool tmp39 = (_this->head == null());		HX_STACK_VAR(tmp39,"tmp39");
												HX_STACK_LINE(6883)
												if ((tmp39)){
													HX_STACK_LINE(6883)
													_this->pushmod = true;
												}
												HX_STACK_LINE(6883)
												_this->modified = true;
												HX_STACK_LINE(6883)
												(_this->length)--;
											}
											HX_STACK_LINE(6883)
											_this->pushmod = true;
										}
									}
									HX_STACK_LINE(6883)
									bool tmp35 = (arbs1->cbSet != null());		HX_STACK_VAR(tmp35,"tmp35");
									HX_STACK_LINE(6883)
									if ((tmp35)){
										HX_STACK_LINE(6883)
										::zpp_nape::util::ZNPList_ZPP_Interactor tmp36 = this->mrca1;		HX_STACK_VAR(tmp36,"tmp36");
										HX_STACK_LINE(6883)
										::zpp_nape::util::ZNPList_ZPP_Interactor _this = tmp36;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(6883)
										::zpp_nape::util::ZNPNode_ZPP_Interactor tmp37;		HX_STACK_VAR(tmp37,"tmp37");
										HX_STACK_LINE(6883)
										{
											HX_STACK_LINE(6883)
											::zpp_nape::util::ZNPNode_ZPP_Interactor ret1;		HX_STACK_VAR(ret1,"ret1");
											HX_STACK_LINE(6883)
											{
												HX_STACK_LINE(6883)
												::zpp_nape::util::ZNPNode_ZPP_Interactor tmp38 = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool;		HX_STACK_VAR(tmp38,"tmp38");
												HX_STACK_LINE(6883)
												bool tmp39 = (tmp38 == null());		HX_STACK_VAR(tmp39,"tmp39");
												HX_STACK_LINE(6883)
												if ((tmp39)){
													HX_STACK_LINE(6883)
													::zpp_nape::util::ZNPNode_ZPP_Interactor tmp40 = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::__new();		HX_STACK_VAR(tmp40,"tmp40");
													HX_STACK_LINE(6883)
													ret1 = tmp40;
												}
												else{
													HX_STACK_LINE(6883)
													::zpp_nape::util::ZNPNode_ZPP_Interactor tmp40 = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool;		HX_STACK_VAR(tmp40,"tmp40");
													HX_STACK_LINE(6883)
													ret1 = tmp40;
													HX_STACK_LINE(6883)
													::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool = ret1->next;
													HX_STACK_LINE(6883)
													ret1->next = null();
												}
												HX_STACK_LINE(6883)
												Dynamic();
											}
											HX_STACK_LINE(6883)
											ret1->elt = arbs1;
											HX_STACK_LINE(6883)
											tmp37 = ret1;
										}
										HX_STACK_LINE(6883)
										::zpp_nape::util::ZNPNode_ZPP_Interactor temp = tmp37;		HX_STACK_VAR(temp,"temp");
										HX_STACK_LINE(6883)
										temp->next = _this->head;
										HX_STACK_LINE(6883)
										_this->head = temp;
										HX_STACK_LINE(6883)
										_this->modified = true;
										HX_STACK_LINE(6883)
										(_this->length)++;
										HX_STACK_LINE(6883)
										arbs1;
									}
									HX_STACK_LINE(6883)
									::zpp_nape::callbacks::ZPP_CbSet tmp36 = arbs1->body->cbSet;		HX_STACK_VAR(tmp36,"tmp36");
									HX_STACK_LINE(6883)
									bool tmp37 = (tmp36 != null());		HX_STACK_VAR(tmp37,"tmp37");
									HX_STACK_LINE(6883)
									if ((tmp37)){
										HX_STACK_LINE(6883)
										::zpp_nape::util::ZNPList_ZPP_Interactor tmp38 = this->mrca1;		HX_STACK_VAR(tmp38,"tmp38");
										HX_STACK_LINE(6883)
										::zpp_nape::util::ZNPList_ZPP_Interactor _this = tmp38;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(6883)
										::zpp_nape::phys::ZPP_Interactor o = arbs1->body;		HX_STACK_VAR(o,"o");
										HX_STACK_LINE(6883)
										::zpp_nape::util::ZNPNode_ZPP_Interactor tmp39;		HX_STACK_VAR(tmp39,"tmp39");
										HX_STACK_LINE(6883)
										{
											HX_STACK_LINE(6883)
											::zpp_nape::util::ZNPNode_ZPP_Interactor ret1;		HX_STACK_VAR(ret1,"ret1");
											HX_STACK_LINE(6883)
											{
												HX_STACK_LINE(6883)
												::zpp_nape::util::ZNPNode_ZPP_Interactor tmp40 = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool;		HX_STACK_VAR(tmp40,"tmp40");
												HX_STACK_LINE(6883)
												bool tmp41 = (tmp40 == null());		HX_STACK_VAR(tmp41,"tmp41");
												HX_STACK_LINE(6883)
												if ((tmp41)){
													HX_STACK_LINE(6883)
													::zpp_nape::util::ZNPNode_ZPP_Interactor tmp42 = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::__new();		HX_STACK_VAR(tmp42,"tmp42");
													HX_STACK_LINE(6883)
													ret1 = tmp42;
												}
												else{
													HX_STACK_LINE(6883)
													::zpp_nape::util::ZNPNode_ZPP_Interactor tmp42 = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool;		HX_STACK_VAR(tmp42,"tmp42");
													HX_STACK_LINE(6883)
													ret1 = tmp42;
													HX_STACK_LINE(6883)
													::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool = ret1->next;
													HX_STACK_LINE(6883)
													ret1->next = null();
												}
												HX_STACK_LINE(6883)
												Dynamic();
											}
											HX_STACK_LINE(6883)
											ret1->elt = o;
											HX_STACK_LINE(6883)
											tmp39 = ret1;
										}
										HX_STACK_LINE(6883)
										::zpp_nape::util::ZNPNode_ZPP_Interactor temp = tmp39;		HX_STACK_VAR(temp,"temp");
										HX_STACK_LINE(6883)
										temp->next = _this->head;
										HX_STACK_LINE(6883)
										_this->head = temp;
										HX_STACK_LINE(6883)
										_this->modified = true;
										HX_STACK_LINE(6883)
										(_this->length)++;
										HX_STACK_LINE(6883)
										o;
									}
									HX_STACK_LINE(6883)
									bool tmp38 = (arbs2->cbSet != null());		HX_STACK_VAR(tmp38,"tmp38");
									HX_STACK_LINE(6883)
									if ((tmp38)){
										HX_STACK_LINE(6883)
										::zpp_nape::util::ZNPList_ZPP_Interactor tmp39 = this->mrca2;		HX_STACK_VAR(tmp39,"tmp39");
										HX_STACK_LINE(6883)
										::zpp_nape::util::ZNPList_ZPP_Interactor _this = tmp39;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(6883)
										::zpp_nape::util::ZNPNode_ZPP_Interactor tmp40;		HX_STACK_VAR(tmp40,"tmp40");
										HX_STACK_LINE(6883)
										{
											HX_STACK_LINE(6883)
											::zpp_nape::util::ZNPNode_ZPP_Interactor ret1;		HX_STACK_VAR(ret1,"ret1");
											HX_STACK_LINE(6883)
											{
												HX_STACK_LINE(6883)
												::zpp_nape::util::ZNPNode_ZPP_Interactor tmp41 = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool;		HX_STACK_VAR(tmp41,"tmp41");
												HX_STACK_LINE(6883)
												bool tmp42 = (tmp41 == null());		HX_STACK_VAR(tmp42,"tmp42");
												HX_STACK_LINE(6883)
												if ((tmp42)){
													HX_STACK_LINE(6883)
													::zpp_nape::util::ZNPNode_ZPP_Interactor tmp43 = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::__new();		HX_STACK_VAR(tmp43,"tmp43");
													HX_STACK_LINE(6883)
													ret1 = tmp43;
												}
												else{
													HX_STACK_LINE(6883)
													::zpp_nape::util::ZNPNode_ZPP_Interactor tmp43 = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool;		HX_STACK_VAR(tmp43,"tmp43");
													HX_STACK_LINE(6883)
													ret1 = tmp43;
													HX_STACK_LINE(6883)
													::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool = ret1->next;
													HX_STACK_LINE(6883)
													ret1->next = null();
												}
												HX_STACK_LINE(6883)
												Dynamic();
											}
											HX_STACK_LINE(6883)
											ret1->elt = arbs2;
											HX_STACK_LINE(6883)
											tmp40 = ret1;
										}
										HX_STACK_LINE(6883)
										::zpp_nape::util::ZNPNode_ZPP_Interactor temp = tmp40;		HX_STACK_VAR(temp,"temp");
										HX_STACK_LINE(6883)
										temp->next = _this->head;
										HX_STACK_LINE(6883)
										_this->head = temp;
										HX_STACK_LINE(6883)
										_this->modified = true;
										HX_STACK_LINE(6883)
										(_this->length)++;
										HX_STACK_LINE(6883)
										arbs2;
									}
									HX_STACK_LINE(6883)
									::zpp_nape::callbacks::ZPP_CbSet tmp39 = arbs2->body->cbSet;		HX_STACK_VAR(tmp39,"tmp39");
									HX_STACK_LINE(6883)
									bool tmp40 = (tmp39 != null());		HX_STACK_VAR(tmp40,"tmp40");
									HX_STACK_LINE(6883)
									if ((tmp40)){
										HX_STACK_LINE(6883)
										::zpp_nape::util::ZNPList_ZPP_Interactor tmp41 = this->mrca2;		HX_STACK_VAR(tmp41,"tmp41");
										HX_STACK_LINE(6883)
										::zpp_nape::util::ZNPList_ZPP_Interactor _this = tmp41;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(6883)
										::zpp_nape::phys::ZPP_Interactor o = arbs2->body;		HX_STACK_VAR(o,"o");
										HX_STACK_LINE(6883)
										::zpp_nape::util::ZNPNode_ZPP_Interactor tmp42;		HX_STACK_VAR(tmp42,"tmp42");
										HX_STACK_LINE(6883)
										{
											HX_STACK_LINE(6883)
											::zpp_nape::util::ZNPNode_ZPP_Interactor ret1;		HX_STACK_VAR(ret1,"ret1");
											HX_STACK_LINE(6883)
											{
												HX_STACK_LINE(6883)
												::zpp_nape::util::ZNPNode_ZPP_Interactor tmp43 = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool;		HX_STACK_VAR(tmp43,"tmp43");
												HX_STACK_LINE(6883)
												bool tmp44 = (tmp43 == null());		HX_STACK_VAR(tmp44,"tmp44");
												HX_STACK_LINE(6883)
												if ((tmp44)){
													HX_STACK_LINE(6883)
													::zpp_nape::util::ZNPNode_ZPP_Interactor tmp45 = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::__new();		HX_STACK_VAR(tmp45,"tmp45");
													HX_STACK_LINE(6883)
													ret1 = tmp45;
												}
												else{
													HX_STACK_LINE(6883)
													::zpp_nape::util::ZNPNode_ZPP_Interactor tmp45 = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool;		HX_STACK_VAR(tmp45,"tmp45");
													HX_STACK_LINE(6883)
													ret1 = tmp45;
													HX_STACK_LINE(6883)
													::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool = ret1->next;
													HX_STACK_LINE(6883)
													ret1->next = null();
												}
												HX_STACK_LINE(6883)
												Dynamic();
											}
											HX_STACK_LINE(6883)
											ret1->elt = o;
											HX_STACK_LINE(6883)
											tmp42 = ret1;
										}
										HX_STACK_LINE(6883)
										::zpp_nape::util::ZNPNode_ZPP_Interactor temp = tmp42;		HX_STACK_VAR(temp,"temp");
										HX_STACK_LINE(6883)
										temp->next = _this->head;
										HX_STACK_LINE(6883)
										_this->head = temp;
										HX_STACK_LINE(6883)
										_this->modified = true;
										HX_STACK_LINE(6883)
										(_this->length)++;
										HX_STACK_LINE(6883)
										o;
									}
									HX_STACK_LINE(6883)
									::zpp_nape::phys::ZPP_Compound tmp41 = arbs1->body->compound;		HX_STACK_VAR(tmp41,"tmp41");
									HX_STACK_LINE(6883)
									::zpp_nape::phys::ZPP_Compound c1 = tmp41;		HX_STACK_VAR(c1,"c1");
									HX_STACK_LINE(6883)
									::zpp_nape::phys::ZPP_Compound tmp42 = arbs2->body->compound;		HX_STACK_VAR(tmp42,"tmp42");
									HX_STACK_LINE(6883)
									::zpp_nape::phys::ZPP_Compound c2 = tmp42;		HX_STACK_VAR(c2,"c2");
									HX_STACK_LINE(6883)
									while((true)){
										HX_STACK_LINE(6883)
										bool tmp43 = (c1 != c2);		HX_STACK_VAR(tmp43,"tmp43");
										HX_STACK_LINE(6883)
										bool tmp44 = !(tmp43);		HX_STACK_VAR(tmp44,"tmp44");
										HX_STACK_LINE(6883)
										if ((tmp44)){
											HX_STACK_LINE(6883)
											break;
										}
										HX_STACK_LINE(6883)
										bool tmp45 = (c1 == null());		HX_STACK_VAR(tmp45,"tmp45");
										HX_STACK_LINE(6883)
										int tmp46;		HX_STACK_VAR(tmp46,"tmp46");
										HX_STACK_LINE(6883)
										if ((tmp45)){
											HX_STACK_LINE(6883)
											tmp46 = (int)0;
										}
										else{
											HX_STACK_LINE(6883)
											tmp46 = c1->depth;
										}
										HX_STACK_LINE(6883)
										int d1 = tmp46;		HX_STACK_VAR(d1,"d1");
										HX_STACK_LINE(6883)
										bool tmp47 = (c2 == null());		HX_STACK_VAR(tmp47,"tmp47");
										HX_STACK_LINE(6883)
										int tmp48;		HX_STACK_VAR(tmp48,"tmp48");
										HX_STACK_LINE(6883)
										if ((tmp47)){
											HX_STACK_LINE(6883)
											tmp48 = (int)0;
										}
										else{
											HX_STACK_LINE(6883)
											tmp48 = c2->depth;
										}
										HX_STACK_LINE(6883)
										int d2 = tmp48;		HX_STACK_VAR(d2,"d2");
										HX_STACK_LINE(6883)
										bool tmp49 = (d1 < d2);		HX_STACK_VAR(tmp49,"tmp49");
										HX_STACK_LINE(6883)
										if ((tmp49)){
											HX_STACK_LINE(6883)
											bool tmp50 = (c2->cbSet != null());		HX_STACK_VAR(tmp50,"tmp50");
											HX_STACK_LINE(6883)
											if ((tmp50)){
												HX_STACK_LINE(6883)
												::zpp_nape::util::ZNPList_ZPP_Interactor tmp51 = this->mrca2;		HX_STACK_VAR(tmp51,"tmp51");
												HX_STACK_LINE(6883)
												::zpp_nape::util::ZNPList_ZPP_Interactor _this = tmp51;		HX_STACK_VAR(_this,"_this");
												HX_STACK_LINE(6883)
												::zpp_nape::util::ZNPNode_ZPP_Interactor tmp52;		HX_STACK_VAR(tmp52,"tmp52");
												HX_STACK_LINE(6883)
												{
													HX_STACK_LINE(6883)
													::zpp_nape::util::ZNPNode_ZPP_Interactor ret1;		HX_STACK_VAR(ret1,"ret1");
													HX_STACK_LINE(6883)
													{
														HX_STACK_LINE(6883)
														::zpp_nape::util::ZNPNode_ZPP_Interactor tmp53 = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool;		HX_STACK_VAR(tmp53,"tmp53");
														HX_STACK_LINE(6883)
														bool tmp54 = (tmp53 == null());		HX_STACK_VAR(tmp54,"tmp54");
														HX_STACK_LINE(6883)
														if ((tmp54)){
															HX_STACK_LINE(6883)
															::zpp_nape::util::ZNPNode_ZPP_Interactor tmp55 = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::__new();		HX_STACK_VAR(tmp55,"tmp55");
															HX_STACK_LINE(6883)
															ret1 = tmp55;
														}
														else{
															HX_STACK_LINE(6883)
															::zpp_nape::util::ZNPNode_ZPP_Interactor tmp55 = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool;		HX_STACK_VAR(tmp55,"tmp55");
															HX_STACK_LINE(6883)
															ret1 = tmp55;
															HX_STACK_LINE(6883)
															::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool = ret1->next;
															HX_STACK_LINE(6883)
															ret1->next = null();
														}
														HX_STACK_LINE(6883)
														Dynamic();
													}
													HX_STACK_LINE(6883)
													ret1->elt = c2;
													HX_STACK_LINE(6883)
													tmp52 = ret1;
												}
												HX_STACK_LINE(6883)
												::zpp_nape::util::ZNPNode_ZPP_Interactor temp = tmp52;		HX_STACK_VAR(temp,"temp");
												HX_STACK_LINE(6883)
												temp->next = _this->head;
												HX_STACK_LINE(6883)
												_this->head = temp;
												HX_STACK_LINE(6883)
												_this->modified = true;
												HX_STACK_LINE(6883)
												(_this->length)++;
												HX_STACK_LINE(6883)
												c2;
											}
											HX_STACK_LINE(6883)
											c2 = c2->compound;
										}
										else{
											HX_STACK_LINE(6883)
											bool tmp50 = (c1->cbSet != null());		HX_STACK_VAR(tmp50,"tmp50");
											HX_STACK_LINE(6883)
											if ((tmp50)){
												HX_STACK_LINE(6883)
												::zpp_nape::util::ZNPList_ZPP_Interactor tmp51 = this->mrca1;		HX_STACK_VAR(tmp51,"tmp51");
												HX_STACK_LINE(6883)
												::zpp_nape::util::ZNPList_ZPP_Interactor _this = tmp51;		HX_STACK_VAR(_this,"_this");
												HX_STACK_LINE(6883)
												::zpp_nape::util::ZNPNode_ZPP_Interactor tmp52;		HX_STACK_VAR(tmp52,"tmp52");
												HX_STACK_LINE(6883)
												{
													HX_STACK_LINE(6883)
													::zpp_nape::util::ZNPNode_ZPP_Interactor ret1;		HX_STACK_VAR(ret1,"ret1");
													HX_STACK_LINE(6883)
													{
														HX_STACK_LINE(6883)
														::zpp_nape::util::ZNPNode_ZPP_Interactor tmp53 = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool;		HX_STACK_VAR(tmp53,"tmp53");
														HX_STACK_LINE(6883)
														bool tmp54 = (tmp53 == null());		HX_STACK_VAR(tmp54,"tmp54");
														HX_STACK_LINE(6883)
														if ((tmp54)){
															HX_STACK_LINE(6883)
															::zpp_nape::util::ZNPNode_ZPP_Interactor tmp55 = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::__new();		HX_STACK_VAR(tmp55,"tmp55");
															HX_STACK_LINE(6883)
															ret1 = tmp55;
														}
														else{
															HX_STACK_LINE(6883)
															::zpp_nape::util::ZNPNode_ZPP_Interactor tmp55 = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool;		HX_STACK_VAR(tmp55,"tmp55");
															HX_STACK_LINE(6883)
															ret1 = tmp55;
															HX_STACK_LINE(6883)
															::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool = ret1->next;
															HX_STACK_LINE(6883)
															ret1->next = null();
														}
														HX_STACK_LINE(6883)
														Dynamic();
													}
													HX_STACK_LINE(6883)
													ret1->elt = c1;
													HX_STACK_LINE(6883)
													tmp52 = ret1;
												}
												HX_STACK_LINE(6883)
												::zpp_nape::util::ZNPNode_ZPP_Interactor temp = tmp52;		HX_STACK_VAR(temp,"temp");
												HX_STACK_LINE(6883)
												temp->next = _this->head;
												HX_STACK_LINE(6883)
												_this->head = temp;
												HX_STACK_LINE(6883)
												_this->modified = true;
												HX_STACK_LINE(6883)
												(_this->length)++;
												HX_STACK_LINE(6883)
												c1;
											}
											HX_STACK_LINE(6883)
											c1 = c1->compound;
										}
									}
								}
								HX_STACK_LINE(6884)
								{
									HX_STACK_LINE(6885)
									::zpp_nape::util::ZNPList_ZPP_Interactor tmp35 = this->mrca1;		HX_STACK_VAR(tmp35,"tmp35");
									HX_STACK_LINE(6885)
									::zpp_nape::util::ZNPNode_ZPP_Interactor cx_ite = tmp35->head;		HX_STACK_VAR(cx_ite,"cx_ite");
									HX_STACK_LINE(6886)
									while((true)){
										HX_STACK_LINE(6886)
										bool tmp36 = (cx_ite != null());		HX_STACK_VAR(tmp36,"tmp36");
										HX_STACK_LINE(6886)
										bool tmp37 = !(tmp36);		HX_STACK_VAR(tmp37,"tmp37");
										HX_STACK_LINE(6886)
										if ((tmp37)){
											HX_STACK_LINE(6886)
											break;
										}
										HX_STACK_LINE(6887)
										::zpp_nape::phys::ZPP_Interactor i1 = cx_ite->elt;		HX_STACK_VAR(i1,"i1");
										HX_STACK_LINE(6889)
										{
											HX_STACK_LINE(6890)
											::zpp_nape::util::ZNPList_ZPP_Interactor tmp38 = this->mrca2;		HX_STACK_VAR(tmp38,"tmp38");
											HX_STACK_LINE(6890)
											::zpp_nape::util::ZNPNode_ZPP_Interactor cx_ite1 = tmp38->head;		HX_STACK_VAR(cx_ite1,"cx_ite1");
											HX_STACK_LINE(6891)
											while((true)){
												HX_STACK_LINE(6891)
												bool tmp39 = (cx_ite1 != null());		HX_STACK_VAR(tmp39,"tmp39");
												HX_STACK_LINE(6891)
												bool tmp40 = !(tmp39);		HX_STACK_VAR(tmp40,"tmp40");
												HX_STACK_LINE(6891)
												if ((tmp40)){
													HX_STACK_LINE(6891)
													break;
												}
												HX_STACK_LINE(6892)
												::zpp_nape::phys::ZPP_Interactor i2 = cx_ite1->elt;		HX_STACK_VAR(i2,"i2");
												HX_STACK_LINE(6893)
												{
													HX_STACK_LINE(6894)
													::zpp_nape::callbacks::ZPP_CbSet cb1 = i1->cbSet;		HX_STACK_VAR(cb1,"cb1");
													HX_STACK_LINE(6895)
													::zpp_nape::callbacks::ZPP_CbSet cb2 = i2->cbSet;		HX_STACK_VAR(cb2,"cb2");
													HX_STACK_LINE(6904)
													bool tmp41;		HX_STACK_VAR(tmp41,"tmp41");
													HX_STACK_LINE(6904)
													{
														HX_STACK_LINE(6904)
														::zpp_nape::callbacks::ZPP_CbSetPair tmp42;		HX_STACK_VAR(tmp42,"tmp42");
														HX_STACK_LINE(6904)
														{
															HX_STACK_LINE(6904)
															::zpp_nape::callbacks::ZPP_CbSetPair ret1 = null();		HX_STACK_VAR(ret1,"ret1");
															HX_STACK_LINE(6904)
															int tmp43 = cb1->cbpairs->length;		HX_STACK_VAR(tmp43,"tmp43");
															HX_STACK_LINE(6904)
															int tmp44 = cb2->cbpairs->length;		HX_STACK_VAR(tmp44,"tmp44");
															HX_STACK_LINE(6904)
															bool tmp45 = (tmp43 < tmp44);		HX_STACK_VAR(tmp45,"tmp45");
															HX_STACK_LINE(6904)
															::zpp_nape::util::ZNPList_ZPP_CbSetPair tmp46;		HX_STACK_VAR(tmp46,"tmp46");
															HX_STACK_LINE(6904)
															if ((tmp45)){
																HX_STACK_LINE(6904)
																tmp46 = cb1->cbpairs;
															}
															else{
																HX_STACK_LINE(6904)
																tmp46 = cb2->cbpairs;
															}
															HX_STACK_LINE(6904)
															::zpp_nape::util::ZNPList_ZPP_CbSetPair pairs = tmp46;		HX_STACK_VAR(pairs,"pairs");
															HX_STACK_LINE(6904)
															{
																HX_STACK_LINE(6904)
																::zpp_nape::util::ZNPNode_ZPP_CbSetPair cx_ite2 = pairs->head;		HX_STACK_VAR(cx_ite2,"cx_ite2");
																HX_STACK_LINE(6904)
																while((true)){
																	HX_STACK_LINE(6904)
																	bool tmp47 = (cx_ite2 != null());		HX_STACK_VAR(tmp47,"tmp47");
																	HX_STACK_LINE(6904)
																	bool tmp48 = !(tmp47);		HX_STACK_VAR(tmp48,"tmp48");
																	HX_STACK_LINE(6904)
																	if ((tmp48)){
																		HX_STACK_LINE(6904)
																		break;
																	}
																	HX_STACK_LINE(6904)
																	::zpp_nape::callbacks::ZPP_CbSetPair p = cx_ite2->elt;		HX_STACK_VAR(p,"p");
																	HX_STACK_LINE(6904)
																	{
																		HX_STACK_LINE(6904)
																		bool tmp49 = (p->a == cb1);		HX_STACK_VAR(tmp49,"tmp49");
																		HX_STACK_LINE(6904)
																		bool tmp50 = tmp49;		HX_STACK_VAR(tmp50,"tmp50");
																		HX_STACK_LINE(6904)
																		bool tmp51;		HX_STACK_VAR(tmp51,"tmp51");
																		HX_STACK_LINE(6904)
																		if ((tmp50)){
																			HX_STACK_LINE(6904)
																			tmp51 = (p->b == cb2);
																		}
																		else{
																			HX_STACK_LINE(6904)
																			tmp51 = false;
																		}
																		HX_STACK_LINE(6904)
																		bool tmp52 = !(tmp51);		HX_STACK_VAR(tmp52,"tmp52");
																		HX_STACK_LINE(6904)
																		bool tmp53;		HX_STACK_VAR(tmp53,"tmp53");
																		HX_STACK_LINE(6904)
																		if ((tmp52)){
																			HX_STACK_LINE(6904)
																			bool tmp54 = (p->a == cb2);		HX_STACK_VAR(tmp54,"tmp54");
																			HX_STACK_LINE(6904)
																			bool tmp55 = tmp54;		HX_STACK_VAR(tmp55,"tmp55");
																			HX_STACK_LINE(6904)
																			bool tmp56 = tmp55;		HX_STACK_VAR(tmp56,"tmp56");
																			HX_STACK_LINE(6904)
																			if ((tmp56)){
																				HX_STACK_LINE(6904)
																				tmp53 = (p->b == cb1);
																			}
																			else{
																				HX_STACK_LINE(6904)
																				tmp53 = false;
																			}
																		}
																		else{
																			HX_STACK_LINE(6904)
																			tmp53 = true;
																		}
																		HX_STACK_LINE(6904)
																		if ((tmp53)){
																			HX_STACK_LINE(6904)
																			ret1 = p;
																			HX_STACK_LINE(6904)
																			break;
																		}
																	}
																	HX_STACK_LINE(6904)
																	cx_ite2 = cx_ite2->next;
																}
															}
															HX_STACK_LINE(6904)
															bool tmp47 = (ret1 == null());		HX_STACK_VAR(tmp47,"tmp47");
															HX_STACK_LINE(6904)
															if ((tmp47)){
																HX_STACK_LINE(6904)
																::zpp_nape::callbacks::ZPP_CbSetPair tmp48;		HX_STACK_VAR(tmp48,"tmp48");
																HX_STACK_LINE(6904)
																{
																	HX_STACK_LINE(6904)
																	::zpp_nape::callbacks::ZPP_CbSetPair ret2;		HX_STACK_VAR(ret2,"ret2");
																	HX_STACK_LINE(6904)
																	{
																		HX_STACK_LINE(6904)
																		::zpp_nape::callbacks::ZPP_CbSetPair tmp49 = ::zpp_nape::callbacks::ZPP_CbSetPair_obj::zpp_pool;		HX_STACK_VAR(tmp49,"tmp49");
																		HX_STACK_LINE(6904)
																		bool tmp50 = (tmp49 == null());		HX_STACK_VAR(tmp50,"tmp50");
																		HX_STACK_LINE(6904)
																		if ((tmp50)){
																			HX_STACK_LINE(6904)
																			::zpp_nape::callbacks::ZPP_CbSetPair tmp51 = ::zpp_nape::callbacks::ZPP_CbSetPair_obj::__new();		HX_STACK_VAR(tmp51,"tmp51");
																			HX_STACK_LINE(6904)
																			ret2 = tmp51;
																		}
																		else{
																			HX_STACK_LINE(6904)
																			::zpp_nape::callbacks::ZPP_CbSetPair tmp51 = ::zpp_nape::callbacks::ZPP_CbSetPair_obj::zpp_pool;		HX_STACK_VAR(tmp51,"tmp51");
																			HX_STACK_LINE(6904)
																			ret2 = tmp51;
																			HX_STACK_LINE(6904)
																			::zpp_nape::callbacks::ZPP_CbSetPair_obj::zpp_pool = ret2->next;
																			HX_STACK_LINE(6904)
																			ret2->next = null();
																		}
																		HX_STACK_LINE(6904)
																		ret2->zip_listeners = true;
																	}
																	HX_STACK_LINE(6904)
																	::zpp_nape::callbacks::ZPP_CbSet tmp49 = cb1;		HX_STACK_VAR(tmp49,"tmp49");
																	HX_STACK_LINE(6904)
																	::zpp_nape::callbacks::ZPP_CbSet tmp50 = cb2;		HX_STACK_VAR(tmp50,"tmp50");
																	HX_STACK_LINE(6904)
																	bool tmp51 = ::zpp_nape::callbacks::ZPP_CbSet_obj::setlt(tmp49,tmp50);		HX_STACK_VAR(tmp51,"tmp51");
																	HX_STACK_LINE(6904)
																	if ((tmp51)){
																		HX_STACK_LINE(6904)
																		ret2->a = cb1;
																		HX_STACK_LINE(6904)
																		ret2->b = cb2;
																	}
																	else{
																		HX_STACK_LINE(6904)
																		ret2->a = cb2;
																		HX_STACK_LINE(6904)
																		ret2->b = cb1;
																	}
																	HX_STACK_LINE(6904)
																	tmp48 = ret2;
																}
																HX_STACK_LINE(6904)
																ret1 = tmp48;
																HX_STACK_LINE(6904)
																::zpp_nape::callbacks::ZPP_CbSetPair tmp49 = ret1;		HX_STACK_VAR(tmp49,"tmp49");
																HX_STACK_LINE(6904)
																cb1->cbpairs->add(tmp49);
																HX_STACK_LINE(6904)
																bool tmp50 = (cb2 != cb1);		HX_STACK_VAR(tmp50,"tmp50");
																HX_STACK_LINE(6904)
																if ((tmp50)){
																	HX_STACK_LINE(6904)
																	::zpp_nape::callbacks::ZPP_CbSetPair tmp51 = ret1;		HX_STACK_VAR(tmp51,"tmp51");
																	HX_STACK_LINE(6904)
																	cb2->cbpairs->add(tmp51);
																}
															}
															HX_STACK_LINE(6904)
															{
																HX_STACK_LINE(6904)
																bool tmp48 = ret1->zip_listeners;		HX_STACK_VAR(tmp48,"tmp48");
																HX_STACK_LINE(6904)
																if ((tmp48)){
																	HX_STACK_LINE(6904)
																	ret1->zip_listeners = false;
																	HX_STACK_LINE(6904)
																	ret1->__validate();
																}
															}
															HX_STACK_LINE(6904)
															tmp42 = ret1;
														}
														HX_STACK_LINE(6904)
														::zpp_nape::callbacks::ZPP_CbSetPair _this = tmp42;		HX_STACK_VAR(_this,"_this");
														HX_STACK_LINE(6904)
														::zpp_nape::util::ZNPNode_ZPP_InteractionListener tmp43 = _this->listeners->head;		HX_STACK_VAR(tmp43,"tmp43");
														HX_STACK_LINE(6904)
														tmp41 = (tmp43 == null());
													}
													HX_STACK_LINE(6904)
													if ((tmp41)){
														HX_STACK_LINE(6905)
														cx_ite1 = cx_ite1->next;
														HX_STACK_LINE(6906)
														continue;
													}
													HX_STACK_LINE(6908)
													::zpp_nape::space::ZPP_CallbackSet callbackset = null();		HX_STACK_VAR(callbackset,"callbackset");
													HX_STACK_LINE(6909)
													::zpp_nape::space::ZPP_CallbackSet ncallbackset = null();		HX_STACK_VAR(ncallbackset,"ncallbackset");
													HX_STACK_LINE(6910)
													{
														HX_STACK_LINE(6910)
														::zpp_nape::util::ZNPList_ZPP_InteractionListener tmp42 = this->prelisteners;		HX_STACK_VAR(tmp42,"tmp42");
														HX_STACK_LINE(6910)
														::zpp_nape::util::ZNPList_ZPP_InteractionListener _this = tmp42;		HX_STACK_VAR(_this,"_this");
														HX_STACK_LINE(6910)
														{
															HX_STACK_LINE(6910)
															while((true)){
																HX_STACK_LINE(6910)
																bool tmp43 = (_this->head == null());		HX_STACK_VAR(tmp43,"tmp43");
																HX_STACK_LINE(6910)
																bool tmp44 = !(tmp43);		HX_STACK_VAR(tmp44,"tmp44");
																HX_STACK_LINE(6910)
																bool tmp45 = !(tmp44);		HX_STACK_VAR(tmp45,"tmp45");
																HX_STACK_LINE(6910)
																if ((tmp45)){
																	HX_STACK_LINE(6910)
																	break;
																}
																HX_STACK_LINE(6910)
																::zpp_nape::util::ZNPNode_ZPP_InteractionListener ret1 = _this->head;		HX_STACK_VAR(ret1,"ret1");
																HX_STACK_LINE(6910)
																_this->head = ret1->next;
																HX_STACK_LINE(6910)
																{
																	HX_STACK_LINE(6910)
																	::zpp_nape::util::ZNPNode_ZPP_InteractionListener o = ret1;		HX_STACK_VAR(o,"o");
																	HX_STACK_LINE(6910)
																	o->elt = null();
																	HX_STACK_LINE(6910)
																	::zpp_nape::util::ZNPNode_ZPP_InteractionListener tmp46 = ::zpp_nape::util::ZNPNode_ZPP_InteractionListener_obj::zpp_pool;		HX_STACK_VAR(tmp46,"tmp46");
																	HX_STACK_LINE(6910)
																	o->next = tmp46;
																	HX_STACK_LINE(6910)
																	::zpp_nape::util::ZNPNode_ZPP_InteractionListener_obj::zpp_pool = o;
																}
																HX_STACK_LINE(6910)
																bool tmp46 = (_this->head == null());		HX_STACK_VAR(tmp46,"tmp46");
																HX_STACK_LINE(6910)
																if ((tmp46)){
																	HX_STACK_LINE(6910)
																	_this->pushmod = true;
																}
																HX_STACK_LINE(6910)
																_this->modified = true;
																HX_STACK_LINE(6910)
																(_this->length)--;
															}
															HX_STACK_LINE(6910)
															_this->pushmod = true;
														}
													}
													HX_STACK_LINE(6911)
													::zpp_nape::util::ZNPNode_ZPP_InteractionListener lite = null();		HX_STACK_VAR(lite,"lite");
													HX_STACK_LINE(6912)
													{
														HX_STACK_LINE(6912)
														int tmp42 = ::zpp_nape::util::ZPP_Flags_obj::id_CbEvent_PRE;		HX_STACK_VAR(tmp42,"tmp42");
														HX_STACK_LINE(6912)
														int event = tmp42;		HX_STACK_VAR(event,"event");
														HX_STACK_LINE(6912)
														{
															HX_STACK_LINE(6912)
															::zpp_nape::callbacks::ZPP_CbSetPair tmp43;		HX_STACK_VAR(tmp43,"tmp43");
															HX_STACK_LINE(6912)
															{
																HX_STACK_LINE(6912)
																::zpp_nape::callbacks::ZPP_CbSetPair ret1 = null();		HX_STACK_VAR(ret1,"ret1");
																HX_STACK_LINE(6912)
																int tmp44 = cb1->cbpairs->length;		HX_STACK_VAR(tmp44,"tmp44");
																HX_STACK_LINE(6912)
																int tmp45 = cb2->cbpairs->length;		HX_STACK_VAR(tmp45,"tmp45");
																HX_STACK_LINE(6912)
																bool tmp46 = (tmp44 < tmp45);		HX_STACK_VAR(tmp46,"tmp46");
																HX_STACK_LINE(6912)
																::zpp_nape::util::ZNPList_ZPP_CbSetPair tmp47;		HX_STACK_VAR(tmp47,"tmp47");
																HX_STACK_LINE(6912)
																if ((tmp46)){
																	HX_STACK_LINE(6912)
																	tmp47 = cb1->cbpairs;
																}
																else{
																	HX_STACK_LINE(6912)
																	tmp47 = cb2->cbpairs;
																}
																HX_STACK_LINE(6912)
																::zpp_nape::util::ZNPList_ZPP_CbSetPair pairs = tmp47;		HX_STACK_VAR(pairs,"pairs");
																HX_STACK_LINE(6912)
																{
																	HX_STACK_LINE(6912)
																	::zpp_nape::util::ZNPNode_ZPP_CbSetPair cx_ite2 = pairs->head;		HX_STACK_VAR(cx_ite2,"cx_ite2");
																	HX_STACK_LINE(6912)
																	while((true)){
																		HX_STACK_LINE(6912)
																		bool tmp48 = (cx_ite2 != null());		HX_STACK_VAR(tmp48,"tmp48");
																		HX_STACK_LINE(6912)
																		bool tmp49 = !(tmp48);		HX_STACK_VAR(tmp49,"tmp49");
																		HX_STACK_LINE(6912)
																		if ((tmp49)){
																			HX_STACK_LINE(6912)
																			break;
																		}
																		HX_STACK_LINE(6912)
																		::zpp_nape::callbacks::ZPP_CbSetPair p = cx_ite2->elt;		HX_STACK_VAR(p,"p");
																		HX_STACK_LINE(6912)
																		{
																			HX_STACK_LINE(6912)
																			bool tmp50 = (p->a == cb1);		HX_STACK_VAR(tmp50,"tmp50");
																			HX_STACK_LINE(6912)
																			bool tmp51 = tmp50;		HX_STACK_VAR(tmp51,"tmp51");
																			HX_STACK_LINE(6912)
																			bool tmp52;		HX_STACK_VAR(tmp52,"tmp52");
																			HX_STACK_LINE(6912)
																			if ((tmp51)){
																				HX_STACK_LINE(6912)
																				tmp52 = (p->b == cb2);
																			}
																			else{
																				HX_STACK_LINE(6912)
																				tmp52 = false;
																			}
																			HX_STACK_LINE(6912)
																			bool tmp53 = !(tmp52);		HX_STACK_VAR(tmp53,"tmp53");
																			HX_STACK_LINE(6912)
																			bool tmp54;		HX_STACK_VAR(tmp54,"tmp54");
																			HX_STACK_LINE(6912)
																			if ((tmp53)){
																				HX_STACK_LINE(6912)
																				bool tmp55 = (p->a == cb2);		HX_STACK_VAR(tmp55,"tmp55");
																				HX_STACK_LINE(6912)
																				bool tmp56 = tmp55;		HX_STACK_VAR(tmp56,"tmp56");
																				HX_STACK_LINE(6912)
																				bool tmp57 = tmp56;		HX_STACK_VAR(tmp57,"tmp57");
																				HX_STACK_LINE(6912)
																				if ((tmp57)){
																					HX_STACK_LINE(6912)
																					tmp54 = (p->b == cb1);
																				}
																				else{
																					HX_STACK_LINE(6912)
																					tmp54 = false;
																				}
																			}
																			else{
																				HX_STACK_LINE(6912)
																				tmp54 = true;
																			}
																			HX_STACK_LINE(6912)
																			if ((tmp54)){
																				HX_STACK_LINE(6912)
																				ret1 = p;
																				HX_STACK_LINE(6912)
																				break;
																			}
																		}
																		HX_STACK_LINE(6912)
																		cx_ite2 = cx_ite2->next;
																	}
																}
																HX_STACK_LINE(6912)
																bool tmp48 = (ret1 == null());		HX_STACK_VAR(tmp48,"tmp48");
																HX_STACK_LINE(6912)
																if ((tmp48)){
																	HX_STACK_LINE(6912)
																	::zpp_nape::callbacks::ZPP_CbSetPair tmp49;		HX_STACK_VAR(tmp49,"tmp49");
																	HX_STACK_LINE(6912)
																	{
																		HX_STACK_LINE(6912)
																		::zpp_nape::callbacks::ZPP_CbSetPair ret2;		HX_STACK_VAR(ret2,"ret2");
																		HX_STACK_LINE(6912)
																		{
																			HX_STACK_LINE(6912)
																			::zpp_nape::callbacks::ZPP_CbSetPair tmp50 = ::zpp_nape::callbacks::ZPP_CbSetPair_obj::zpp_pool;		HX_STACK_VAR(tmp50,"tmp50");
																			HX_STACK_LINE(6912)
																			bool tmp51 = (tmp50 == null());		HX_STACK_VAR(tmp51,"tmp51");
																			HX_STACK_LINE(6912)
																			if ((tmp51)){
																				HX_STACK_LINE(6912)
																				::zpp_nape::callbacks::ZPP_CbSetPair tmp52 = ::zpp_nape::callbacks::ZPP_CbSetPair_obj::__new();		HX_STACK_VAR(tmp52,"tmp52");
																				HX_STACK_LINE(6912)
																				ret2 = tmp52;
																			}
																			else{
																				HX_STACK_LINE(6912)
																				::zpp_nape::callbacks::ZPP_CbSetPair tmp52 = ::zpp_nape::callbacks::ZPP_CbSetPair_obj::zpp_pool;		HX_STACK_VAR(tmp52,"tmp52");
																				HX_STACK_LINE(6912)
																				ret2 = tmp52;
																				HX_STACK_LINE(6912)
																				::zpp_nape::callbacks::ZPP_CbSetPair_obj::zpp_pool = ret2->next;
																				HX_STACK_LINE(6912)
																				ret2->next = null();
																			}
																			HX_STACK_LINE(6912)
																			ret2->zip_listeners = true;
																		}
																		HX_STACK_LINE(6912)
																		::zpp_nape::callbacks::ZPP_CbSet tmp50 = cb1;		HX_STACK_VAR(tmp50,"tmp50");
																		HX_STACK_LINE(6912)
																		::zpp_nape::callbacks::ZPP_CbSet tmp51 = cb2;		HX_STACK_VAR(tmp51,"tmp51");
																		HX_STACK_LINE(6912)
																		bool tmp52 = ::zpp_nape::callbacks::ZPP_CbSet_obj::setlt(tmp50,tmp51);		HX_STACK_VAR(tmp52,"tmp52");
																		HX_STACK_LINE(6912)
																		if ((tmp52)){
																			HX_STACK_LINE(6912)
																			ret2->a = cb1;
																			HX_STACK_LINE(6912)
																			ret2->b = cb2;
																		}
																		else{
																			HX_STACK_LINE(6912)
																			ret2->a = cb2;
																			HX_STACK_LINE(6912)
																			ret2->b = cb1;
																		}
																		HX_STACK_LINE(6912)
																		tmp49 = ret2;
																	}
																	HX_STACK_LINE(6912)
																	ret1 = tmp49;
																	HX_STACK_LINE(6912)
																	::zpp_nape::callbacks::ZPP_CbSetPair tmp50 = ret1;		HX_STACK_VAR(tmp50,"tmp50");
																	HX_STACK_LINE(6912)
																	cb1->cbpairs->add(tmp50);
																	HX_STACK_LINE(6912)
																	bool tmp51 = (cb2 != cb1);		HX_STACK_VAR(tmp51,"tmp51");
																	HX_STACK_LINE(6912)
																	if ((tmp51)){
																		HX_STACK_LINE(6912)
																		::zpp_nape::callbacks::ZPP_CbSetPair tmp52 = ret1;		HX_STACK_VAR(tmp52,"tmp52");
																		HX_STACK_LINE(6912)
																		cb2->cbpairs->add(tmp52);
																	}
																}
																HX_STACK_LINE(6912)
																{
																	HX_STACK_LINE(6912)
																	bool tmp49 = ret1->zip_listeners;		HX_STACK_VAR(tmp49,"tmp49");
																	HX_STACK_LINE(6912)
																	if ((tmp49)){
																		HX_STACK_LINE(6912)
																		ret1->zip_listeners = false;
																		HX_STACK_LINE(6912)
																		ret1->__validate();
																	}
																}
																HX_STACK_LINE(6912)
																tmp43 = ret1;
															}
															HX_STACK_LINE(6912)
															::zpp_nape::callbacks::ZPP_CbSetPair _this = tmp43;		HX_STACK_VAR(_this,"_this");
															HX_STACK_LINE(6912)
															{
																HX_STACK_LINE(6912)
																::zpp_nape::util::ZNPNode_ZPP_InteractionListener tmp44 = _this->listeners->head;		HX_STACK_VAR(tmp44,"tmp44");
																HX_STACK_LINE(6912)
																::zpp_nape::util::ZNPNode_ZPP_InteractionListener cx_ite2 = tmp44;		HX_STACK_VAR(cx_ite2,"cx_ite2");
																HX_STACK_LINE(6912)
																while((true)){
																	HX_STACK_LINE(6912)
																	bool tmp45 = (cx_ite2 != null());		HX_STACK_VAR(tmp45,"tmp45");
																	HX_STACK_LINE(6912)
																	bool tmp46 = !(tmp45);		HX_STACK_VAR(tmp46,"tmp46");
																	HX_STACK_LINE(6912)
																	if ((tmp46)){
																		HX_STACK_LINE(6912)
																		break;
																	}
																	HX_STACK_LINE(6912)
																	::zpp_nape::callbacks::ZPP_InteractionListener x = cx_ite2->elt;		HX_STACK_VAR(x,"x");
																	HX_STACK_LINE(6912)
																	{
																		HX_STACK_LINE(6912)
																		bool tmp47 = (x->event == event);		HX_STACK_VAR(tmp47,"tmp47");
																		HX_STACK_LINE(6912)
																		if ((tmp47)){
																			HX_STACK_LINE(6912)
																			::zpp_nape::callbacks::ZPP_InteractionListener tmp48 = x;		HX_STACK_VAR(tmp48,"tmp48");
																			HX_STACK_LINE(6913)
																			{
																				HX_STACK_LINE(6913)
																				int tmp49 = (int(tmp48->itype) & int(inttype));		HX_STACK_VAR(tmp49,"tmp49");
																				HX_STACK_LINE(6913)
																				bool tmp50 = (tmp49 != (int)0);		HX_STACK_VAR(tmp50,"tmp50");
																				HX_STACK_LINE(6913)
																				if ((tmp50)){
																					HX_STACK_LINE(6914)
																					::zpp_nape::util::ZNPNode_ZPP_InteractionListener tmp51;		HX_STACK_VAR(tmp51,"tmp51");
																					HX_STACK_LINE(6914)
																					{
																						HX_STACK_LINE(6914)
																						::zpp_nape::util::ZNPList_ZPP_InteractionListener _this1 = _g->prelisteners;		HX_STACK_VAR(_this1,"_this1");
																						HX_STACK_LINE(6914)
																						::zpp_nape::util::ZNPNode_ZPP_InteractionListener tmp52;		HX_STACK_VAR(tmp52,"tmp52");
																						HX_STACK_LINE(6914)
																						{
																							HX_STACK_LINE(6914)
																							::zpp_nape::util::ZNPNode_ZPP_InteractionListener ret1;		HX_STACK_VAR(ret1,"ret1");
																							HX_STACK_LINE(6914)
																							{
																								HX_STACK_LINE(6914)
																								::zpp_nape::util::ZNPNode_ZPP_InteractionListener tmp53 = ::zpp_nape::util::ZNPNode_ZPP_InteractionListener_obj::zpp_pool;		HX_STACK_VAR(tmp53,"tmp53");
																								HX_STACK_LINE(6914)
																								bool tmp54 = (tmp53 == null());		HX_STACK_VAR(tmp54,"tmp54");
																								HX_STACK_LINE(6914)
																								if ((tmp54)){
																									HX_STACK_LINE(6914)
																									::zpp_nape::util::ZNPNode_ZPP_InteractionListener tmp55 = ::zpp_nape::util::ZNPNode_ZPP_InteractionListener_obj::__new();		HX_STACK_VAR(tmp55,"tmp55");
																									HX_STACK_LINE(6914)
																									ret1 = tmp55;
																								}
																								else{
																									HX_STACK_LINE(6914)
																									::zpp_nape::util::ZNPNode_ZPP_InteractionListener tmp55 = ::zpp_nape::util::ZNPNode_ZPP_InteractionListener_obj::zpp_pool;		HX_STACK_VAR(tmp55,"tmp55");
																									HX_STACK_LINE(6914)
																									ret1 = tmp55;
																									HX_STACK_LINE(6914)
																									::zpp_nape::util::ZNPNode_ZPP_InteractionListener_obj::zpp_pool = ret1->next;
																									HX_STACK_LINE(6914)
																									ret1->next = null();
																								}
																								HX_STACK_LINE(6914)
																								Dynamic();
																							}
																							HX_STACK_LINE(6914)
																							ret1->elt = tmp48;
																							HX_STACK_LINE(6914)
																							tmp52 = ret1;
																						}
																						HX_STACK_LINE(6914)
																						::zpp_nape::util::ZNPNode_ZPP_InteractionListener temp = tmp52;		HX_STACK_VAR(temp,"temp");
																						HX_STACK_LINE(6914)
																						bool tmp53 = (lite == null());		HX_STACK_VAR(tmp53,"tmp53");
																						HX_STACK_LINE(6914)
																						if ((tmp53)){
																							HX_STACK_LINE(6914)
																							temp->next = _this1->head;
																							HX_STACK_LINE(6914)
																							_this1->head = temp;
																						}
																						else{
																							HX_STACK_LINE(6914)
																							temp->next = lite->next;
																							HX_STACK_LINE(6914)
																							lite->next = temp;
																						}
																						HX_STACK_LINE(6914)
																						bool tmp54 = _this1->modified = true;		HX_STACK_VAR(tmp54,"tmp54");
																						HX_STACK_LINE(6914)
																						_this1->pushmod = tmp54;
																						HX_STACK_LINE(6914)
																						(_this1->length)++;
																						HX_STACK_LINE(6914)
																						tmp51 = temp;
																					}
																					HX_STACK_LINE(6914)
																					lite = tmp51;
																					HX_STACK_LINE(6915)
																					bool tmp52 = anyimpure;		HX_STACK_VAR(tmp52,"tmp52");
																					HX_STACK_LINE(6915)
																					bool tmp53 = !(tmp52);		HX_STACK_VAR(tmp53,"tmp53");
																					HX_STACK_LINE(6915)
																					bool tmp54;		HX_STACK_VAR(tmp54,"tmp54");
																					HX_STACK_LINE(6915)
																					if ((tmp53)){
																						HX_STACK_LINE(6915)
																						bool tmp55 = tmp48->pure;		HX_STACK_VAR(tmp55,"tmp55");
																						HX_STACK_LINE(6915)
																						bool tmp56 = tmp55;		HX_STACK_VAR(tmp56,"tmp56");
																						HX_STACK_LINE(6915)
																						tmp54 = !(tmp56);
																					}
																					else{
																						HX_STACK_LINE(6915)
																						tmp54 = true;
																					}
																					HX_STACK_LINE(6915)
																					anyimpure = tmp54;
																				}
																			}
																		}
																	}
																	HX_STACK_LINE(6912)
																	cx_ite2 = cx_ite2->next;
																}
															}
														}
													}
													HX_STACK_LINE(6918)
													::zpp_nape::util::ZNPList_ZPP_InteractionListener tmp42 = this->prelisteners;		HX_STACK_VAR(tmp42,"tmp42");
													HX_STACK_LINE(6918)
													::zpp_nape::util::ZNPNode_ZPP_InteractionListener tmp43 = tmp42->head;		HX_STACK_VAR(tmp43,"tmp43");
													HX_STACK_LINE(6918)
													bool tmp44 = (tmp43 == null());		HX_STACK_VAR(tmp44,"tmp44");
													HX_STACK_LINE(6918)
													if ((tmp44)){
														HX_STACK_LINE(6919)
														cx_ite1 = cx_ite1->next;
														HX_STACK_LINE(6920)
														continue;
													}
													HX_STACK_LINE(6922)
													::zpp_nape::phys::ZPP_Interactor tmp45 = i1;		HX_STACK_VAR(tmp45,"tmp45");
													HX_STACK_LINE(6922)
													::zpp_nape::phys::ZPP_Interactor tmp46 = i2;		HX_STACK_VAR(tmp46,"tmp46");
													HX_STACK_LINE(6922)
													::zpp_nape::space::ZPP_CallbackSet tmp47 = ::zpp_nape::phys::ZPP_Interactor_obj::get(tmp45,tmp46);		HX_STACK_VAR(tmp47,"tmp47");
													HX_STACK_LINE(6922)
													callbackset = tmp47;
													HX_STACK_LINE(6923)
													bool tmp48 = (callbackset == null());		HX_STACK_VAR(tmp48,"tmp48");
													HX_STACK_LINE(6923)
													if ((tmp48)){
														HX_STACK_LINE(6924)
														::zpp_nape::phys::ZPP_Interactor tmp49 = i1;		HX_STACK_VAR(tmp49,"tmp49");
														HX_STACK_LINE(6924)
														::zpp_nape::phys::ZPP_Interactor tmp50 = i2;		HX_STACK_VAR(tmp50,"tmp50");
														HX_STACK_LINE(6924)
														::zpp_nape::space::ZPP_CallbackSet tmp51 = ::zpp_nape::space::ZPP_CallbackSet_obj::get(tmp49,tmp50);		HX_STACK_VAR(tmp51,"tmp51");
														HX_STACK_LINE(6924)
														ncallbackset = tmp51;
														HX_STACK_LINE(6925)
														::zpp_nape::space::ZPP_CallbackSet tmp52 = ncallbackset;		HX_STACK_VAR(tmp52,"tmp52");
														HX_STACK_LINE(6925)
														this->add_callbackset(tmp52);
													}
													HX_STACK_LINE(6927)
													bool tmp49 = (callbackset == null());		HX_STACK_VAR(tmp49,"tmp49");
													HX_STACK_LINE(6927)
													bool tmp50 = !(tmp49);		HX_STACK_VAR(tmp50,"tmp50");
													HX_STACK_LINE(6927)
													bool tmp51;		HX_STACK_VAR(tmp51,"tmp51");
													HX_STACK_LINE(6927)
													if ((tmp50)){
														HX_STACK_LINE(6927)
														int tmp52 = callbackset->SENSORstamp;		HX_STACK_VAR(tmp52,"tmp52");
														HX_STACK_LINE(6927)
														int tmp53 = this->stamp;		HX_STACK_VAR(tmp53,"tmp53");
														HX_STACK_LINE(6927)
														int tmp54 = tmp53;		HX_STACK_VAR(tmp54,"tmp54");
														HX_STACK_LINE(6927)
														bool tmp55 = (tmp52 != tmp54);		HX_STACK_VAR(tmp55,"tmp55");
														HX_STACK_LINE(6927)
														bool tmp56 = tmp55;		HX_STACK_VAR(tmp56,"tmp56");
														HX_STACK_LINE(6927)
														bool tmp57 = tmp56;		HX_STACK_VAR(tmp57,"tmp57");
														HX_STACK_LINE(6927)
														bool tmp58 = !(tmp57);		HX_STACK_VAR(tmp58,"tmp58");
														HX_STACK_LINE(6927)
														bool tmp59 = tmp58;		HX_STACK_VAR(tmp59,"tmp59");
														HX_STACK_LINE(6927)
														bool tmp60 = tmp59;		HX_STACK_VAR(tmp60,"tmp60");
														HX_STACK_LINE(6927)
														bool tmp61;		HX_STACK_VAR(tmp61,"tmp61");
														HX_STACK_LINE(6927)
														bool tmp62 = tmp60;		HX_STACK_VAR(tmp62,"tmp62");
														HX_STACK_LINE(6927)
														if ((tmp62)){
															HX_STACK_LINE(6927)
															tmp61 = continuous;
														}
														else{
															HX_STACK_LINE(6927)
															tmp61 = true;
														}
														HX_STACK_LINE(6927)
														bool tmp63 = tmp61;		HX_STACK_VAR(tmp63,"tmp63");
														HX_STACK_LINE(6927)
														if ((tmp63)){
															HX_STACK_LINE(6927)
															int tmp64 = callbackset->SENSORstate;		HX_STACK_VAR(tmp64,"tmp64");
															HX_STACK_LINE(6927)
															int tmp65 = ::zpp_nape::util::ZPP_Flags_obj::id_ImmState_ALWAYS;		HX_STACK_VAR(tmp65,"tmp65");
															HX_STACK_LINE(6927)
															int tmp66 = tmp65;		HX_STACK_VAR(tmp66,"tmp66");
															HX_STACK_LINE(6927)
															int tmp67 = tmp66;		HX_STACK_VAR(tmp67,"tmp67");
															HX_STACK_LINE(6927)
															int tmp68 = (int(tmp64) & int(tmp67));		HX_STACK_VAR(tmp68,"tmp68");
															HX_STACK_LINE(6927)
															int tmp69 = tmp68;		HX_STACK_VAR(tmp69,"tmp69");
															HX_STACK_LINE(6927)
															int tmp70 = tmp69;		HX_STACK_VAR(tmp70,"tmp70");
															HX_STACK_LINE(6927)
															tmp51 = (tmp70 == (int)0);
														}
														else{
															HX_STACK_LINE(6927)
															tmp51 = false;
														}
													}
													else{
														HX_STACK_LINE(6927)
														tmp51 = true;
													}
													HX_STACK_LINE(6927)
													if ((tmp51)){
														HX_STACK_LINE(6928)
														bool tmp52 = (ncallbackset != null());		HX_STACK_VAR(tmp52,"tmp52");
														HX_STACK_LINE(6928)
														if ((tmp52)){
															HX_STACK_LINE(6928)
															callbackset = ncallbackset;
														}
														HX_STACK_LINE(6929)
														bool tmp53 = (callbackset != null());		HX_STACK_VAR(tmp53,"tmp53");
														HX_STACK_LINE(6929)
														if ((tmp53)){
															HX_STACK_LINE(6931)
															::zpp_nape::util::ZNPList_ZPP_InteractionListener tmp54 = this->prelisteners;		HX_STACK_VAR(tmp54,"tmp54");
															HX_STACK_LINE(6931)
															::zpp_nape::util::ZNPNode_ZPP_InteractionListener cx_ite2 = tmp54->head;		HX_STACK_VAR(cx_ite2,"cx_ite2");
															HX_STACK_LINE(6932)
															while((true)){
																HX_STACK_LINE(6932)
																bool tmp55 = (cx_ite2 != null());		HX_STACK_VAR(tmp55,"tmp55");
																HX_STACK_LINE(6932)
																bool tmp56 = !(tmp55);		HX_STACK_VAR(tmp56,"tmp56");
																HX_STACK_LINE(6932)
																if ((tmp56)){
																	HX_STACK_LINE(6932)
																	break;
																}
																HX_STACK_LINE(6933)
																::zpp_nape::callbacks::ZPP_InteractionListener listener = cx_ite2->elt;		HX_STACK_VAR(listener,"listener");
																HX_STACK_LINE(6934)
																{
																	HX_STACK_LINE(6935)
																	int tmp57 = listener->itype;		HX_STACK_VAR(tmp57,"tmp57");
																	HX_STACK_LINE(6935)
																	int tmp58 = ::zpp_nape::util::ZPP_Flags_obj::id_InteractionType_ANY;		HX_STACK_VAR(tmp58,"tmp58");
																	HX_STACK_LINE(6935)
																	bool tmp59 = (tmp57 == tmp58);		HX_STACK_VAR(tmp59,"tmp59");
																	HX_STACK_LINE(6935)
																	if ((tmp59)){
																		HX_STACK_LINE(6936)
																		int tmp60 = this->stamp;		HX_STACK_VAR(tmp60,"tmp60");
																		HX_STACK_LINE(6936)
																		callbackset->COLLISIONstamp = tmp60;
																		HX_STACK_LINE(6937)
																		int tmp61 = this->stamp;		HX_STACK_VAR(tmp61,"tmp61");
																		HX_STACK_LINE(6937)
																		callbackset->SENSORstamp = tmp61;
																		HX_STACK_LINE(6938)
																		int tmp62 = this->stamp;		HX_STACK_VAR(tmp62,"tmp62");
																		HX_STACK_LINE(6938)
																		callbackset->FLUIDstamp = tmp62;
																	}
																	else{
																		HX_STACK_LINE(6940)
																		int tmp60 = this->stamp;		HX_STACK_VAR(tmp60,"tmp60");
																		HX_STACK_LINE(6940)
																		callbackset->SENSORstamp = tmp60;
																	}
																}
																HX_STACK_LINE(6942)
																cx_ite2 = cx_ite2->next;
															}
														}
														HX_STACK_LINE(6949)
														bool pact = arb->active;		HX_STACK_VAR(pact,"pact");
														HX_STACK_LINE(6950)
														arb->active = true;
														HX_STACK_LINE(6951)
														bool emptycontacts = false;		HX_STACK_VAR(emptycontacts,"emptycontacts");
														HX_STACK_LINE(6954)
														::nape::callbacks::PreCallback tmp54 = this->precb;		HX_STACK_VAR(tmp54,"tmp54");
														HX_STACK_LINE(6954)
														tmp54->zpp_inner->pre_arbiter = arb;
														HX_STACK_LINE(6955)
														::nape::callbacks::PreCallback tmp55 = this->precb;		HX_STACK_VAR(tmp55,"tmp55");
														HX_STACK_LINE(6955)
														tmp55->zpp_inner->set = callbackset;
														HX_STACK_LINE(6956)
														{
															HX_STACK_LINE(6957)
															::zpp_nape::util::ZNPList_ZPP_InteractionListener tmp56 = this->prelisteners;		HX_STACK_VAR(tmp56,"tmp56");
															HX_STACK_LINE(6957)
															::zpp_nape::util::ZNPNode_ZPP_InteractionListener cx_ite2 = tmp56->head;		HX_STACK_VAR(cx_ite2,"cx_ite2");
															HX_STACK_LINE(6958)
															while((true)){
																HX_STACK_LINE(6958)
																bool tmp57 = (cx_ite2 != null());		HX_STACK_VAR(tmp57,"tmp57");
																HX_STACK_LINE(6958)
																bool tmp58 = !(tmp57);		HX_STACK_VAR(tmp58,"tmp58");
																HX_STACK_LINE(6958)
																if ((tmp58)){
																	HX_STACK_LINE(6958)
																	break;
																}
																HX_STACK_LINE(6959)
																::zpp_nape::callbacks::ZPP_InteractionListener listener = cx_ite2->elt;		HX_STACK_VAR(listener,"listener");
																HX_STACK_LINE(6960)
																{
																	HX_STACK_LINE(6961)
																	::nape::callbacks::PreCallback tmp59 = this->precb;		HX_STACK_VAR(tmp59,"tmp59");
																	HX_STACK_LINE(6961)
																	tmp59->zpp_inner->listener = listener;
																	HX_STACK_LINE(6988)
																	{
																		HX_STACK_LINE(6988)
																		::nape::callbacks::PreCallback tmp60 = this->precb;		HX_STACK_VAR(tmp60,"tmp60");
																		HX_STACK_LINE(6988)
																		::zpp_nape::callbacks::ZPP_Callback cb = tmp60->zpp_inner;		HX_STACK_VAR(cb,"cb");
																		HX_STACK_LINE(6988)
																		::zpp_nape::phys::ZPP_Interactor o1 = callbackset->int1;		HX_STACK_VAR(o1,"o1");
																		HX_STACK_LINE(6988)
																		::zpp_nape::phys::ZPP_Interactor o2 = callbackset->int2;		HX_STACK_VAR(o2,"o2");
																		HX_STACK_LINE(6988)
																		bool tmp61;		HX_STACK_VAR(tmp61,"tmp61");
																		HX_STACK_LINE(6988)
																		{
																			HX_STACK_LINE(6988)
																			::zpp_nape::callbacks::ZPP_OptionType _this = listener->options1;		HX_STACK_VAR(_this,"_this");
																			HX_STACK_LINE(6988)
																			::zpp_nape::util::ZNPList_ZPP_CbType xs = o1->cbTypes;		HX_STACK_VAR(xs,"xs");
																			HX_STACK_LINE(6988)
																			::zpp_nape::util::ZNPList_ZPP_CbType tmp62 = xs;		HX_STACK_VAR(tmp62,"tmp62");
																			HX_STACK_LINE(6988)
																			::zpp_nape::util::ZNPList_ZPP_CbType tmp63 = _this->includes;		HX_STACK_VAR(tmp63,"tmp63");
																			HX_STACK_LINE(6988)
																			::zpp_nape::util::ZNPList_ZPP_CbType tmp64 = tmp62;		HX_STACK_VAR(tmp64,"tmp64");
																			HX_STACK_LINE(6988)
																			::zpp_nape::util::ZNPList_ZPP_CbType tmp65 = tmp63;		HX_STACK_VAR(tmp65,"tmp65");
																			HX_STACK_LINE(6988)
																			::zpp_nape::util::ZNPList_ZPP_CbType tmp66 = tmp64;		HX_STACK_VAR(tmp66,"tmp66");
																			HX_STACK_LINE(6988)
																			::zpp_nape::util::ZNPList_ZPP_CbType tmp67 = tmp65;		HX_STACK_VAR(tmp67,"tmp67");
																			HX_STACK_LINE(6988)
																			bool tmp68 = _this->nonemptyintersection(tmp66,tmp67);		HX_STACK_VAR(tmp68,"tmp68");
																			HX_STACK_LINE(6988)
																			bool tmp69 = tmp68;		HX_STACK_VAR(tmp69,"tmp69");
																			HX_STACK_LINE(6988)
																			bool tmp70 = tmp69;		HX_STACK_VAR(tmp70,"tmp70");
																			HX_STACK_LINE(6988)
																			if ((tmp70)){
																				HX_STACK_LINE(6988)
																				::zpp_nape::util::ZNPList_ZPP_CbType tmp71 = xs;		HX_STACK_VAR(tmp71,"tmp71");
																				HX_STACK_LINE(6988)
																				::zpp_nape::util::ZNPList_ZPP_CbType tmp72 = _this->excludes;		HX_STACK_VAR(tmp72,"tmp72");
																				HX_STACK_LINE(6988)
																				::zpp_nape::util::ZNPList_ZPP_CbType tmp73 = tmp71;		HX_STACK_VAR(tmp73,"tmp73");
																				HX_STACK_LINE(6988)
																				::zpp_nape::util::ZNPList_ZPP_CbType tmp74 = tmp72;		HX_STACK_VAR(tmp74,"tmp74");
																				HX_STACK_LINE(6988)
																				::zpp_nape::util::ZNPList_ZPP_CbType tmp75 = tmp73;		HX_STACK_VAR(tmp75,"tmp75");
																				HX_STACK_LINE(6988)
																				::zpp_nape::util::ZNPList_ZPP_CbType tmp76 = tmp74;		HX_STACK_VAR(tmp76,"tmp76");
																				HX_STACK_LINE(6988)
																				bool tmp77 = _this->nonemptyintersection(tmp75,tmp76);		HX_STACK_VAR(tmp77,"tmp77");
																				HX_STACK_LINE(6988)
																				bool tmp78 = tmp77;		HX_STACK_VAR(tmp78,"tmp78");
																				HX_STACK_LINE(6988)
																				bool tmp79 = tmp78;		HX_STACK_VAR(tmp79,"tmp79");
																				HX_STACK_LINE(6988)
																				bool tmp80 = tmp79;		HX_STACK_VAR(tmp80,"tmp80");
																				HX_STACK_LINE(6988)
																				bool tmp81 = tmp80;		HX_STACK_VAR(tmp81,"tmp81");
																				HX_STACK_LINE(6988)
																				tmp61 = !(tmp81);
																			}
																			else{
																				HX_STACK_LINE(6988)
																				tmp61 = false;
																			}
																		}
																		HX_STACK_LINE(6988)
																		bool tmp62;		HX_STACK_VAR(tmp62,"tmp62");
																		HX_STACK_LINE(6988)
																		if ((tmp61)){
																			HX_STACK_LINE(6988)
																			::zpp_nape::callbacks::ZPP_OptionType _this = listener->options2;		HX_STACK_VAR(_this,"_this");
																			HX_STACK_LINE(6988)
																			::zpp_nape::util::ZNPList_ZPP_CbType xs = o2->cbTypes;		HX_STACK_VAR(xs,"xs");
																			HX_STACK_LINE(6988)
																			::zpp_nape::util::ZNPList_ZPP_CbType tmp63 = xs;		HX_STACK_VAR(tmp63,"tmp63");
																			HX_STACK_LINE(6988)
																			::zpp_nape::util::ZNPList_ZPP_CbType tmp64 = _this->includes;		HX_STACK_VAR(tmp64,"tmp64");
																			HX_STACK_LINE(6988)
																			::zpp_nape::util::ZNPList_ZPP_CbType tmp65 = tmp63;		HX_STACK_VAR(tmp65,"tmp65");
																			HX_STACK_LINE(6988)
																			::zpp_nape::util::ZNPList_ZPP_CbType tmp66 = tmp64;		HX_STACK_VAR(tmp66,"tmp66");
																			HX_STACK_LINE(6988)
																			::zpp_nape::util::ZNPList_ZPP_CbType tmp67 = tmp65;		HX_STACK_VAR(tmp67,"tmp67");
																			HX_STACK_LINE(6988)
																			::zpp_nape::util::ZNPList_ZPP_CbType tmp68 = tmp66;		HX_STACK_VAR(tmp68,"tmp68");
																			HX_STACK_LINE(6988)
																			bool tmp69 = _this->nonemptyintersection(tmp67,tmp68);		HX_STACK_VAR(tmp69,"tmp69");
																			HX_STACK_LINE(6988)
																			bool tmp70 = tmp69;		HX_STACK_VAR(tmp70,"tmp70");
																			HX_STACK_LINE(6988)
																			bool tmp71 = tmp70;		HX_STACK_VAR(tmp71,"tmp71");
																			HX_STACK_LINE(6988)
																			if ((tmp71)){
																				HX_STACK_LINE(6988)
																				::zpp_nape::util::ZNPList_ZPP_CbType tmp72 = xs;		HX_STACK_VAR(tmp72,"tmp72");
																				HX_STACK_LINE(6988)
																				::zpp_nape::util::ZNPList_ZPP_CbType tmp73 = _this->excludes;		HX_STACK_VAR(tmp73,"tmp73");
																				HX_STACK_LINE(6988)
																				::zpp_nape::util::ZNPList_ZPP_CbType tmp74 = tmp72;		HX_STACK_VAR(tmp74,"tmp74");
																				HX_STACK_LINE(6988)
																				::zpp_nape::util::ZNPList_ZPP_CbType tmp75 = tmp73;		HX_STACK_VAR(tmp75,"tmp75");
																				HX_STACK_LINE(6988)
																				::zpp_nape::util::ZNPList_ZPP_CbType tmp76 = tmp74;		HX_STACK_VAR(tmp76,"tmp76");
																				HX_STACK_LINE(6988)
																				::zpp_nape::util::ZNPList_ZPP_CbType tmp77 = tmp75;		HX_STACK_VAR(tmp77,"tmp77");
																				HX_STACK_LINE(6988)
																				bool tmp78 = _this->nonemptyintersection(tmp76,tmp77);		HX_STACK_VAR(tmp78,"tmp78");
																				HX_STACK_LINE(6988)
																				bool tmp79 = tmp78;		HX_STACK_VAR(tmp79,"tmp79");
																				HX_STACK_LINE(6988)
																				bool tmp80 = tmp79;		HX_STACK_VAR(tmp80,"tmp80");
																				HX_STACK_LINE(6988)
																				bool tmp81 = tmp80;		HX_STACK_VAR(tmp81,"tmp81");
																				HX_STACK_LINE(6988)
																				bool tmp82 = tmp81;		HX_STACK_VAR(tmp82,"tmp82");
																				HX_STACK_LINE(6988)
																				tmp62 = !(tmp82);
																			}
																			else{
																				HX_STACK_LINE(6988)
																				tmp62 = false;
																			}
																		}
																		else{
																			HX_STACK_LINE(6988)
																			tmp62 = false;
																		}
																		HX_STACK_LINE(6988)
																		if ((tmp62)){
																			HX_STACK_LINE(6988)
																			cb->int1 = o1;
																			HX_STACK_LINE(6988)
																			cb->int2 = o2;
																		}
																		else{
																			HX_STACK_LINE(6988)
																			cb->int1 = o2;
																			HX_STACK_LINE(6988)
																			cb->int2 = o1;
																		}
																	}
																	HX_STACK_LINE(6989)
																	::zpp_nape::phys::ZPP_Interactor tmp60 = i1;		HX_STACK_VAR(tmp60,"tmp60");
																	HX_STACK_LINE(6989)
																	::nape::callbacks::PreCallback tmp61 = this->precb;		HX_STACK_VAR(tmp61,"tmp61");
																	HX_STACK_LINE(6989)
																	::zpp_nape::phys::ZPP_Interactor tmp62 = tmp61->zpp_inner->int1;		HX_STACK_VAR(tmp62,"tmp62");
																	HX_STACK_LINE(6989)
																	bool tmp63 = (tmp60 != tmp62);		HX_STACK_VAR(tmp63,"tmp63");
																	HX_STACK_LINE(6989)
																	::nape::callbacks::PreCallback tmp64 = this->precb;		HX_STACK_VAR(tmp64,"tmp64");
																	HX_STACK_LINE(6989)
																	tmp64->zpp_inner->pre_swapped = tmp63;
																	HX_STACK_LINE(6990)
																	::nape::callbacks::PreCallback tmp65 = this->precb;		HX_STACK_VAR(tmp65,"tmp65");
																	HX_STACK_LINE(6990)
																	::nape::callbacks::PreFlag tmp66 = listener->handlerp(tmp65);		HX_STACK_VAR(tmp66,"tmp66");
																	HX_STACK_LINE(6990)
																	::nape::callbacks::PreFlag ret1 = tmp66;		HX_STACK_VAR(ret1,"ret1");
																	HX_STACK_LINE(6991)
																	bool tmp67 = (ret1 != null());		HX_STACK_VAR(tmp67,"tmp67");
																	HX_STACK_LINE(6991)
																	if ((tmp67)){
																		HX_STACK_LINE(6992)
																		::nape::callbacks::PreFlag tmp68 = ret1;		HX_STACK_VAR(tmp68,"tmp68");
																		HX_STACK_LINE(6992)
																		::nape::callbacks::PreFlag tmp69;		HX_STACK_VAR(tmp69,"tmp69");
																		HX_STACK_LINE(6992)
																		{
																			HX_STACK_LINE(6992)
																			::nape::callbacks::PreFlag tmp70 = ::zpp_nape::util::ZPP_Flags_obj::PreFlag_ACCEPT;		HX_STACK_VAR(tmp70,"tmp70");
																			HX_STACK_LINE(6992)
																			bool tmp71 = (tmp70 == null());		HX_STACK_VAR(tmp71,"tmp71");
																			HX_STACK_LINE(6992)
																			if ((tmp71)){
																				HX_STACK_LINE(6992)
																				::zpp_nape::util::ZPP_Flags_obj::internal = true;
																				HX_STACK_LINE(6992)
																				::nape::callbacks::PreFlag tmp72 = ::nape::callbacks::PreFlag_obj::__new();		HX_STACK_VAR(tmp72,"tmp72");
																				HX_STACK_LINE(6992)
																				::zpp_nape::util::ZPP_Flags_obj::PreFlag_ACCEPT = tmp72;
																				HX_STACK_LINE(6992)
																				::zpp_nape::util::ZPP_Flags_obj::internal = false;
																			}
																			HX_STACK_LINE(6992)
																			tmp69 = ::zpp_nape::util::ZPP_Flags_obj::PreFlag_ACCEPT;
																		}
																		HX_STACK_LINE(6992)
																		bool tmp70 = (tmp68 == tmp69);		HX_STACK_VAR(tmp70,"tmp70");
																		HX_STACK_LINE(6992)
																		int tmp71;		HX_STACK_VAR(tmp71,"tmp71");
																		HX_STACK_LINE(6992)
																		if ((tmp70)){
																			HX_STACK_LINE(6992)
																			int tmp72 = ::zpp_nape::util::ZPP_Flags_obj::id_ImmState_ACCEPT;		HX_STACK_VAR(tmp72,"tmp72");
																			HX_STACK_LINE(6992)
																			int tmp73 = ::zpp_nape::util::ZPP_Flags_obj::id_ImmState_ALWAYS;		HX_STACK_VAR(tmp73,"tmp73");
																			HX_STACK_LINE(6992)
																			tmp71 = (int(tmp72) | int(tmp73));
																		}
																		else{
																			HX_STACK_LINE(6992)
																			::nape::callbacks::PreFlag tmp72 = ret1;		HX_STACK_VAR(tmp72,"tmp72");
																			HX_STACK_LINE(6992)
																			::nape::callbacks::PreFlag tmp73;		HX_STACK_VAR(tmp73,"tmp73");
																			HX_STACK_LINE(6992)
																			{
																				HX_STACK_LINE(6992)
																				::nape::callbacks::PreFlag tmp74 = ::zpp_nape::util::ZPP_Flags_obj::PreFlag_ACCEPT_ONCE;		HX_STACK_VAR(tmp74,"tmp74");
																				HX_STACK_LINE(6992)
																				bool tmp75 = (tmp74 == null());		HX_STACK_VAR(tmp75,"tmp75");
																				HX_STACK_LINE(6992)
																				if ((tmp75)){
																					HX_STACK_LINE(6992)
																					::zpp_nape::util::ZPP_Flags_obj::internal = true;
																					HX_STACK_LINE(6992)
																					::nape::callbacks::PreFlag tmp76 = ::nape::callbacks::PreFlag_obj::__new();		HX_STACK_VAR(tmp76,"tmp76");
																					HX_STACK_LINE(6992)
																					::zpp_nape::util::ZPP_Flags_obj::PreFlag_ACCEPT_ONCE = tmp76;
																					HX_STACK_LINE(6992)
																					::zpp_nape::util::ZPP_Flags_obj::internal = false;
																				}
																				HX_STACK_LINE(6992)
																				tmp73 = ::zpp_nape::util::ZPP_Flags_obj::PreFlag_ACCEPT_ONCE;
																			}
																			HX_STACK_LINE(6992)
																			bool tmp74 = (tmp72 == tmp73);		HX_STACK_VAR(tmp74,"tmp74");
																			HX_STACK_LINE(6992)
																			if ((tmp74)){
																				HX_STACK_LINE(6992)
																				tmp71 = ::zpp_nape::util::ZPP_Flags_obj::id_ImmState_ACCEPT;
																			}
																			else{
																				HX_STACK_LINE(6992)
																				::nape::callbacks::PreFlag tmp75 = ret1;		HX_STACK_VAR(tmp75,"tmp75");
																				HX_STACK_LINE(6992)
																				::nape::callbacks::PreFlag tmp76;		HX_STACK_VAR(tmp76,"tmp76");
																				HX_STACK_LINE(6992)
																				{
																					HX_STACK_LINE(6992)
																					::nape::callbacks::PreFlag tmp77 = ::zpp_nape::util::ZPP_Flags_obj::PreFlag_IGNORE;		HX_STACK_VAR(tmp77,"tmp77");
																					HX_STACK_LINE(6992)
																					bool tmp78 = (tmp77 == null());		HX_STACK_VAR(tmp78,"tmp78");
																					HX_STACK_LINE(6992)
																					if ((tmp78)){
																						HX_STACK_LINE(6992)
																						::zpp_nape::util::ZPP_Flags_obj::internal = true;
																						HX_STACK_LINE(6992)
																						::nape::callbacks::PreFlag tmp79 = ::nape::callbacks::PreFlag_obj::__new();		HX_STACK_VAR(tmp79,"tmp79");
																						HX_STACK_LINE(6992)
																						::zpp_nape::util::ZPP_Flags_obj::PreFlag_IGNORE = tmp79;
																						HX_STACK_LINE(6992)
																						::zpp_nape::util::ZPP_Flags_obj::internal = false;
																					}
																					HX_STACK_LINE(6992)
																					tmp76 = ::zpp_nape::util::ZPP_Flags_obj::PreFlag_IGNORE;
																				}
																				HX_STACK_LINE(6992)
																				bool tmp77 = (tmp75 == tmp76);		HX_STACK_VAR(tmp77,"tmp77");
																				HX_STACK_LINE(6992)
																				if ((tmp77)){
																					HX_STACK_LINE(6992)
																					int tmp78 = ::zpp_nape::util::ZPP_Flags_obj::id_ImmState_IGNORE;		HX_STACK_VAR(tmp78,"tmp78");
																					HX_STACK_LINE(6992)
																					int tmp79 = ::zpp_nape::util::ZPP_Flags_obj::id_ImmState_ALWAYS;		HX_STACK_VAR(tmp79,"tmp79");
																					HX_STACK_LINE(6992)
																					tmp71 = (int(tmp78) | int(tmp79));
																				}
																				else{
																					HX_STACK_LINE(6992)
																					tmp71 = ::zpp_nape::util::ZPP_Flags_obj::id_ImmState_IGNORE;
																				}
																			}
																		}
																		HX_STACK_LINE(6992)
																		arb->immState = tmp71;
																	}
																}
																HX_STACK_LINE(6995)
																cx_ite2 = cx_ite2->next;
															}
														}
														HX_STACK_LINE(7001)
														arb->active = pact;
														HX_STACK_LINE(7002)
														bool tmp56 = (callbackset != null());		HX_STACK_VAR(tmp56,"tmp56");
														HX_STACK_LINE(7002)
														if ((tmp56)){
															HX_STACK_LINE(7004)
															::zpp_nape::util::ZNPList_ZPP_InteractionListener tmp57 = this->prelisteners;		HX_STACK_VAR(tmp57,"tmp57");
															HX_STACK_LINE(7004)
															::zpp_nape::util::ZNPNode_ZPP_InteractionListener cx_ite2 = tmp57->head;		HX_STACK_VAR(cx_ite2,"cx_ite2");
															HX_STACK_LINE(7005)
															while((true)){
																HX_STACK_LINE(7005)
																bool tmp58 = (cx_ite2 != null());		HX_STACK_VAR(tmp58,"tmp58");
																HX_STACK_LINE(7005)
																bool tmp59 = !(tmp58);		HX_STACK_VAR(tmp59,"tmp59");
																HX_STACK_LINE(7005)
																if ((tmp59)){
																	HX_STACK_LINE(7005)
																	break;
																}
																HX_STACK_LINE(7006)
																::zpp_nape::callbacks::ZPP_InteractionListener listener = cx_ite2->elt;		HX_STACK_VAR(listener,"listener");
																HX_STACK_LINE(7007)
																{
																	HX_STACK_LINE(7008)
																	int tmp60 = listener->itype;		HX_STACK_VAR(tmp60,"tmp60");
																	HX_STACK_LINE(7008)
																	int tmp61 = ::zpp_nape::util::ZPP_Flags_obj::id_InteractionType_ANY;		HX_STACK_VAR(tmp61,"tmp61");
																	HX_STACK_LINE(7008)
																	bool tmp62 = (tmp60 == tmp61);		HX_STACK_VAR(tmp62,"tmp62");
																	HX_STACK_LINE(7008)
																	if ((tmp62)){
																		HX_STACK_LINE(7009)
																		callbackset->COLLISIONstate = arb->immState;
																		HX_STACK_LINE(7010)
																		callbackset->SENSORstate = arb->immState;
																		HX_STACK_LINE(7011)
																		callbackset->FLUIDstate = arb->immState;
																	}
																	else{
																		HX_STACK_LINE(7013)
																		callbackset->SENSORstate = arb->immState;
																	}
																}
																HX_STACK_LINE(7015)
																cx_ite2 = cx_ite2->next;
															}
														}
													}
													else{
														HX_STACK_LINE(7020)
														bool tmp52 = (callbackset == null());		HX_STACK_VAR(tmp52,"tmp52");
														HX_STACK_LINE(7020)
														if ((tmp52)){
															HX_STACK_LINE(7021)
															int tmp53 = arb->immState;		HX_STACK_VAR(tmp53,"tmp53");
															HX_STACK_LINE(7021)
															int tmp54 = ::zpp_nape::util::ZPP_Flags_obj::id_ImmState_ALWAYS;		HX_STACK_VAR(tmp54,"tmp54");
															HX_STACK_LINE(7021)
															int tmp55 = (int(tmp53) & int(tmp54));		HX_STACK_VAR(tmp55,"tmp55");
															HX_STACK_LINE(7021)
															bool tmp56 = (tmp55 == (int)0);		HX_STACK_VAR(tmp56,"tmp56");
															HX_STACK_LINE(7021)
															if ((tmp56)){
																HX_STACK_LINE(7021)
																int tmp57 = ::zpp_nape::util::ZPP_Flags_obj::id_ImmState_ACCEPT;		HX_STACK_VAR(tmp57,"tmp57");
																HX_STACK_LINE(7021)
																arb->immState = tmp57;
															}
														}
														else{
															HX_STACK_LINE(7023)
															arb->immState = callbackset->SENSORstate;
														}
													}
												}
												HX_STACK_LINE(7025)
												cx_ite1 = cx_ite1->next;
											}
										}
										HX_STACK_LINE(7029)
										cx_ite = cx_ite->next;
									}
								}
								HX_STACK_LINE(7032)
								bool tmp35 = anyimpure;		HX_STACK_VAR(tmp35,"tmp35");
								HX_STACK_LINE(7032)
								bool tmp36;		HX_STACK_VAR(tmp36,"tmp36");
								HX_STACK_LINE(7032)
								if ((tmp35)){
									HX_STACK_LINE(7032)
									int tmp37 = arb->immState;		HX_STACK_VAR(tmp37,"tmp37");
									HX_STACK_LINE(7032)
									int tmp38 = ::zpp_nape::util::ZPP_Flags_obj::id_ImmState_ALWAYS;		HX_STACK_VAR(tmp38,"tmp38");
									HX_STACK_LINE(7032)
									int tmp39 = tmp38;		HX_STACK_VAR(tmp39,"tmp39");
									HX_STACK_LINE(7032)
									int tmp40 = (int(tmp37) & int(tmp39));		HX_STACK_VAR(tmp40,"tmp40");
									HX_STACK_LINE(7032)
									int tmp41 = tmp40;		HX_STACK_VAR(tmp41,"tmp41");
									HX_STACK_LINE(7032)
									tmp36 = (tmp41 == (int)0);
								}
								else{
									HX_STACK_LINE(7032)
									tmp36 = false;
								}
								HX_STACK_LINE(7032)
								if ((tmp36)){
									HX_STACK_LINE(7088)
									int tmp37 = arb->b1->type;		HX_STACK_VAR(tmp37,"tmp37");
									HX_STACK_LINE(7088)
									int tmp38 = ::zpp_nape::util::ZPP_Flags_obj::id_BodyType_STATIC;		HX_STACK_VAR(tmp38,"tmp38");
									HX_STACK_LINE(7088)
									bool tmp39 = (tmp37 == tmp38);		HX_STACK_VAR(tmp39,"tmp39");
									HX_STACK_LINE(7088)
									bool tmp40 = !(tmp39);		HX_STACK_VAR(tmp40,"tmp40");
									HX_STACK_LINE(7088)
									if ((tmp40)){
										HX_STACK_LINE(7089)
										::zpp_nape::phys::ZPP_Body o = arb->b1;		HX_STACK_VAR(o,"o");
										HX_STACK_LINE(7098)
										bool tmp41 = o->world;		HX_STACK_VAR(tmp41,"tmp41");
										HX_STACK_LINE(7098)
										bool tmp42 = !(tmp41);		HX_STACK_VAR(tmp42,"tmp42");
										HX_STACK_LINE(7098)
										if ((tmp42)){
											HX_STACK_LINE(7107)
											int tmp43 = this->stamp;		HX_STACK_VAR(tmp43,"tmp43");
											HX_STACK_LINE(7107)
											bool tmp44 = this->midstep;		HX_STACK_VAR(tmp44,"tmp44");
											HX_STACK_LINE(7107)
											int tmp45;		HX_STACK_VAR(tmp45,"tmp45");
											HX_STACK_LINE(7107)
											if ((tmp44)){
												HX_STACK_LINE(7107)
												tmp45 = (int)0;
											}
											else{
												HX_STACK_LINE(7107)
												tmp45 = (int)1;
											}
											HX_STACK_LINE(7107)
											int tmp46 = (tmp43 + tmp45);		HX_STACK_VAR(tmp46,"tmp46");
											HX_STACK_LINE(7107)
											o->component->waket = tmp46;
											HX_STACK_LINE(7108)
											int tmp47 = o->type;		HX_STACK_VAR(tmp47,"tmp47");
											HX_STACK_LINE(7108)
											int tmp48 = ::zpp_nape::util::ZPP_Flags_obj::id_BodyType_KINEMATIC;		HX_STACK_VAR(tmp48,"tmp48");
											HX_STACK_LINE(7108)
											bool tmp49 = (tmp47 == tmp48);		HX_STACK_VAR(tmp49,"tmp49");
											HX_STACK_LINE(7108)
											if ((tmp49)){
												HX_STACK_LINE(7108)
												o->kinematicDelaySleep = true;
											}
											HX_STACK_LINE(7109)
											bool tmp50 = o->component->sleeping;		HX_STACK_VAR(tmp50,"tmp50");
											HX_STACK_LINE(7109)
											if ((tmp50)){
												HX_STACK_LINE(7110)
												::zpp_nape::phys::ZPP_Body tmp51 = o;		HX_STACK_VAR(tmp51,"tmp51");
												HX_STACK_LINE(7110)
												this->really_wake(tmp51,false);
											}
										}
									}
									HX_STACK_LINE(7114)
									int tmp41 = arb->b2->type;		HX_STACK_VAR(tmp41,"tmp41");
									HX_STACK_LINE(7114)
									int tmp42 = ::zpp_nape::util::ZPP_Flags_obj::id_BodyType_STATIC;		HX_STACK_VAR(tmp42,"tmp42");
									HX_STACK_LINE(7114)
									bool tmp43 = (tmp41 == tmp42);		HX_STACK_VAR(tmp43,"tmp43");
									HX_STACK_LINE(7114)
									bool tmp44 = !(tmp43);		HX_STACK_VAR(tmp44,"tmp44");
									HX_STACK_LINE(7114)
									if ((tmp44)){
										HX_STACK_LINE(7115)
										::zpp_nape::phys::ZPP_Body o = arb->b2;		HX_STACK_VAR(o,"o");
										HX_STACK_LINE(7124)
										bool tmp45 = o->world;		HX_STACK_VAR(tmp45,"tmp45");
										HX_STACK_LINE(7124)
										bool tmp46 = !(tmp45);		HX_STACK_VAR(tmp46,"tmp46");
										HX_STACK_LINE(7124)
										if ((tmp46)){
											HX_STACK_LINE(7133)
											int tmp47 = this->stamp;		HX_STACK_VAR(tmp47,"tmp47");
											HX_STACK_LINE(7133)
											bool tmp48 = this->midstep;		HX_STACK_VAR(tmp48,"tmp48");
											HX_STACK_LINE(7133)
											int tmp49;		HX_STACK_VAR(tmp49,"tmp49");
											HX_STACK_LINE(7133)
											if ((tmp48)){
												HX_STACK_LINE(7133)
												tmp49 = (int)0;
											}
											else{
												HX_STACK_LINE(7133)
												tmp49 = (int)1;
											}
											HX_STACK_LINE(7133)
											int tmp50 = (tmp47 + tmp49);		HX_STACK_VAR(tmp50,"tmp50");
											HX_STACK_LINE(7133)
											o->component->waket = tmp50;
											HX_STACK_LINE(7134)
											int tmp51 = o->type;		HX_STACK_VAR(tmp51,"tmp51");
											HX_STACK_LINE(7134)
											int tmp52 = ::zpp_nape::util::ZPP_Flags_obj::id_BodyType_KINEMATIC;		HX_STACK_VAR(tmp52,"tmp52");
											HX_STACK_LINE(7134)
											bool tmp53 = (tmp51 == tmp52);		HX_STACK_VAR(tmp53,"tmp53");
											HX_STACK_LINE(7134)
											if ((tmp53)){
												HX_STACK_LINE(7134)
												o->kinematicDelaySleep = true;
											}
											HX_STACK_LINE(7135)
											bool tmp54 = o->component->sleeping;		HX_STACK_VAR(tmp54,"tmp54");
											HX_STACK_LINE(7135)
											if ((tmp54)){
												HX_STACK_LINE(7136)
												::zpp_nape::phys::ZPP_Body tmp55 = o;		HX_STACK_VAR(tmp55,"tmp55");
												HX_STACK_LINE(7136)
												this->really_wake(tmp55,false);
											}
										}
									}
								}
							}
							HX_STACK_LINE(7143)
							bool tmp26;		HX_STACK_VAR(tmp26,"tmp26");
							HX_STACK_LINE(7143)
							tmp26 = false;
							HX_STACK_LINE(7143)
							if ((tmp26)){
								HX_STACK_LINE(7144)
								int tmp27 = arb->b1->type;		HX_STACK_VAR(tmp27,"tmp27");
								HX_STACK_LINE(7144)
								int tmp28 = ::zpp_nape::util::ZPP_Flags_obj::id_BodyType_DYNAMIC;		HX_STACK_VAR(tmp28,"tmp28");
								HX_STACK_LINE(7144)
								bool tmp29 = (tmp27 == tmp28);		HX_STACK_VAR(tmp29,"tmp29");
								HX_STACK_LINE(7144)
								bool tmp30;		HX_STACK_VAR(tmp30,"tmp30");
								HX_STACK_LINE(7144)
								if ((tmp29)){
									HX_STACK_LINE(7144)
									::zpp_nape::space::ZPP_Component tmp31 = arb->b1->component;		HX_STACK_VAR(tmp31,"tmp31");
									HX_STACK_LINE(7144)
									::zpp_nape::space::ZPP_Component tmp32 = tmp31;		HX_STACK_VAR(tmp32,"tmp32");
									HX_STACK_LINE(7144)
									tmp30 = tmp32->sleeping;
								}
								else{
									HX_STACK_LINE(7144)
									tmp30 = false;
								}
								HX_STACK_LINE(7144)
								if ((tmp30)){
									HX_STACK_LINE(7145)
									::zpp_nape::phys::ZPP_Body o = arb->b1;		HX_STACK_VAR(o,"o");
									HX_STACK_LINE(7154)
									bool tmp31 = o->world;		HX_STACK_VAR(tmp31,"tmp31");
									HX_STACK_LINE(7154)
									bool tmp32 = !(tmp31);		HX_STACK_VAR(tmp32,"tmp32");
									HX_STACK_LINE(7154)
									if ((tmp32)){
										HX_STACK_LINE(7163)
										int tmp33 = this->stamp;		HX_STACK_VAR(tmp33,"tmp33");
										HX_STACK_LINE(7163)
										bool tmp34 = this->midstep;		HX_STACK_VAR(tmp34,"tmp34");
										HX_STACK_LINE(7163)
										int tmp35;		HX_STACK_VAR(tmp35,"tmp35");
										HX_STACK_LINE(7163)
										if ((tmp34)){
											HX_STACK_LINE(7163)
											tmp35 = (int)0;
										}
										else{
											HX_STACK_LINE(7163)
											tmp35 = (int)1;
										}
										HX_STACK_LINE(7163)
										int tmp36 = (tmp33 + tmp35);		HX_STACK_VAR(tmp36,"tmp36");
										HX_STACK_LINE(7163)
										o->component->waket = tmp36;
										HX_STACK_LINE(7164)
										int tmp37 = o->type;		HX_STACK_VAR(tmp37,"tmp37");
										HX_STACK_LINE(7164)
										int tmp38 = ::zpp_nape::util::ZPP_Flags_obj::id_BodyType_KINEMATIC;		HX_STACK_VAR(tmp38,"tmp38");
										HX_STACK_LINE(7164)
										bool tmp39 = (tmp37 == tmp38);		HX_STACK_VAR(tmp39,"tmp39");
										HX_STACK_LINE(7164)
										if ((tmp39)){
											HX_STACK_LINE(7164)
											o->kinematicDelaySleep = true;
										}
										HX_STACK_LINE(7165)
										bool tmp40 = o->component->sleeping;		HX_STACK_VAR(tmp40,"tmp40");
										HX_STACK_LINE(7165)
										if ((tmp40)){
											HX_STACK_LINE(7166)
											::zpp_nape::phys::ZPP_Body tmp41 = o;		HX_STACK_VAR(tmp41,"tmp41");
											HX_STACK_LINE(7166)
											this->really_wake(tmp41,false);
										}
									}
								}
								HX_STACK_LINE(7170)
								int tmp31 = arb->b2->type;		HX_STACK_VAR(tmp31,"tmp31");
								HX_STACK_LINE(7170)
								int tmp32 = ::zpp_nape::util::ZPP_Flags_obj::id_BodyType_DYNAMIC;		HX_STACK_VAR(tmp32,"tmp32");
								HX_STACK_LINE(7170)
								bool tmp33 = (tmp31 == tmp32);		HX_STACK_VAR(tmp33,"tmp33");
								HX_STACK_LINE(7170)
								bool tmp34;		HX_STACK_VAR(tmp34,"tmp34");
								HX_STACK_LINE(7170)
								if ((tmp33)){
									HX_STACK_LINE(7170)
									::zpp_nape::space::ZPP_Component tmp35 = arb->b2->component;		HX_STACK_VAR(tmp35,"tmp35");
									HX_STACK_LINE(7170)
									::zpp_nape::space::ZPP_Component tmp36 = tmp35;		HX_STACK_VAR(tmp36,"tmp36");
									HX_STACK_LINE(7170)
									tmp34 = tmp36->sleeping;
								}
								else{
									HX_STACK_LINE(7170)
									tmp34 = false;
								}
								HX_STACK_LINE(7170)
								if ((tmp34)){
									HX_STACK_LINE(7171)
									::zpp_nape::phys::ZPP_Body o = arb->b2;		HX_STACK_VAR(o,"o");
									HX_STACK_LINE(7180)
									bool tmp35 = o->world;		HX_STACK_VAR(tmp35,"tmp35");
									HX_STACK_LINE(7180)
									bool tmp36 = !(tmp35);		HX_STACK_VAR(tmp36,"tmp36");
									HX_STACK_LINE(7180)
									if ((tmp36)){
										HX_STACK_LINE(7189)
										int tmp37 = this->stamp;		HX_STACK_VAR(tmp37,"tmp37");
										HX_STACK_LINE(7189)
										bool tmp38 = this->midstep;		HX_STACK_VAR(tmp38,"tmp38");
										HX_STACK_LINE(7189)
										int tmp39;		HX_STACK_VAR(tmp39,"tmp39");
										HX_STACK_LINE(7189)
										if ((tmp38)){
											HX_STACK_LINE(7189)
											tmp39 = (int)0;
										}
										else{
											HX_STACK_LINE(7189)
											tmp39 = (int)1;
										}
										HX_STACK_LINE(7189)
										int tmp40 = (tmp37 + tmp39);		HX_STACK_VAR(tmp40,"tmp40");
										HX_STACK_LINE(7189)
										o->component->waket = tmp40;
										HX_STACK_LINE(7190)
										int tmp41 = o->type;		HX_STACK_VAR(tmp41,"tmp41");
										HX_STACK_LINE(7190)
										int tmp42 = ::zpp_nape::util::ZPP_Flags_obj::id_BodyType_KINEMATIC;		HX_STACK_VAR(tmp42,"tmp42");
										HX_STACK_LINE(7190)
										bool tmp43 = (tmp41 == tmp42);		HX_STACK_VAR(tmp43,"tmp43");
										HX_STACK_LINE(7190)
										if ((tmp43)){
											HX_STACK_LINE(7190)
											o->kinematicDelaySleep = true;
										}
										HX_STACK_LINE(7191)
										bool tmp44 = o->component->sleeping;		HX_STACK_VAR(tmp44,"tmp44");
										HX_STACK_LINE(7191)
										if ((tmp44)){
											HX_STACK_LINE(7192)
											::zpp_nape::phys::ZPP_Body tmp45 = o;		HX_STACK_VAR(tmp45,"tmp45");
											HX_STACK_LINE(7192)
											this->really_wake(tmp45,false);
										}
									}
								}
							}
							HX_STACK_LINE(7197)
							bool tmp27 = arb->sleeping;		HX_STACK_VAR(tmp27,"tmp27");
							HX_STACK_LINE(7197)
							if ((tmp27)){
								HX_STACK_LINE(7198)
								arb->sleeping = false;
								HX_STACK_LINE(7199)
								{
									HX_STACK_LINE(7199)
									::zpp_nape::util::ZNPList_ZPP_SensorArbiter tmp28 = this->s_arbiters;		HX_STACK_VAR(tmp28,"tmp28");
									HX_STACK_LINE(7199)
									::zpp_nape::util::ZNPList_ZPP_SensorArbiter _this = tmp28;		HX_STACK_VAR(_this,"_this");
									HX_STACK_LINE(7199)
									::zpp_nape::util::ZNPNode_ZPP_SensorArbiter tmp29;		HX_STACK_VAR(tmp29,"tmp29");
									HX_STACK_LINE(7199)
									{
										HX_STACK_LINE(7199)
										::zpp_nape::util::ZNPNode_ZPP_SensorArbiter ret1;		HX_STACK_VAR(ret1,"ret1");
										HX_STACK_LINE(7199)
										{
											HX_STACK_LINE(7199)
											::zpp_nape::util::ZNPNode_ZPP_SensorArbiter tmp30 = ::zpp_nape::util::ZNPNode_ZPP_SensorArbiter_obj::zpp_pool;		HX_STACK_VAR(tmp30,"tmp30");
											HX_STACK_LINE(7199)
											bool tmp31 = (tmp30 == null());		HX_STACK_VAR(tmp31,"tmp31");
											HX_STACK_LINE(7199)
											if ((tmp31)){
												HX_STACK_LINE(7199)
												::zpp_nape::util::ZNPNode_ZPP_SensorArbiter tmp32 = ::zpp_nape::util::ZNPNode_ZPP_SensorArbiter_obj::__new();		HX_STACK_VAR(tmp32,"tmp32");
												HX_STACK_LINE(7199)
												ret1 = tmp32;
											}
											else{
												HX_STACK_LINE(7199)
												::zpp_nape::util::ZNPNode_ZPP_SensorArbiter tmp32 = ::zpp_nape::util::ZNPNode_ZPP_SensorArbiter_obj::zpp_pool;		HX_STACK_VAR(tmp32,"tmp32");
												HX_STACK_LINE(7199)
												ret1 = tmp32;
												HX_STACK_LINE(7199)
												::zpp_nape::util::ZNPNode_ZPP_SensorArbiter_obj::zpp_pool = ret1->next;
												HX_STACK_LINE(7199)
												ret1->next = null();
											}
											HX_STACK_LINE(7199)
											Dynamic();
										}
										HX_STACK_LINE(7199)
										ret1->elt = arb;
										HX_STACK_LINE(7199)
										tmp29 = ret1;
									}
									HX_STACK_LINE(7199)
									::zpp_nape::util::ZNPNode_ZPP_SensorArbiter temp = tmp29;		HX_STACK_VAR(temp,"temp");
									HX_STACK_LINE(7199)
									temp->next = _this->head;
									HX_STACK_LINE(7199)
									_this->head = temp;
									HX_STACK_LINE(7199)
									_this->modified = true;
									HX_STACK_LINE(7199)
									(_this->length)++;
									HX_STACK_LINE(7199)
									arb;
								}
							}
							HX_STACK_LINE(7201)
							tmp10 = arb;
						}
						else{
							HX_STACK_LINE(7203)
							bool tmp22 = first;		HX_STACK_VAR(tmp22,"tmp22");
							HX_STACK_LINE(7203)
							if ((tmp22)){
								HX_STACK_LINE(7204)
								{
									HX_STACK_LINE(7205)
									::zpp_nape::dynamics::ZPP_SensorArbiter o = arb;		HX_STACK_VAR(o,"o");
									HX_STACK_LINE(7215)
									::zpp_nape::dynamics::ZPP_SensorArbiter tmp23 = ::zpp_nape::dynamics::ZPP_SensorArbiter_obj::zpp_pool;		HX_STACK_VAR(tmp23,"tmp23");
									HX_STACK_LINE(7215)
									o->next = tmp23;
									HX_STACK_LINE(7216)
									::zpp_nape::dynamics::ZPP_SensorArbiter_obj::zpp_pool = o;
								}
								HX_STACK_LINE(7221)
								tmp10 = null();
							}
							else{
								HX_STACK_LINE(7223)
								tmp10 = arb;
							}
						}
					}
					else{
						HX_STACK_LINE(7225)
						tmp10 = arb;
					}
				}
				HX_STACK_LINE(6864)
				ret = tmp10;
			}
		}
	}
	HX_STACK_LINE(7231)
	::zpp_nape::dynamics::ZPP_Arbiter tmp2 = ret;		HX_STACK_VAR(tmp2,"tmp2");
	HX_STACK_LINE(7231)
	return tmp2;
}


HX_DEFINE_DYNAMIC_FUNC5(ZPP_Space_obj,narrowPhase,return )

Void ZPP_Space_obj::MRCA_chains( ::zpp_nape::shape::ZPP_Shape s1,::zpp_nape::shape::ZPP_Shape s2){
{
		HX_STACK_FRAME("zpp_nape.space.ZPP_Space","MRCA_chains",0xd89fbf58,"zpp_nape.space.ZPP_Space.MRCA_chains","zpp_nape/space/Space.hx",7236,0x2b65ed03)
		HX_STACK_THIS(this)
		HX_STACK_ARG(s1,"s1")
		HX_STACK_ARG(s2,"s2")
		HX_STACK_LINE(7236)
		{
			HX_STACK_LINE(7236)
			::zpp_nape::util::ZNPList_ZPP_Interactor tmp = this->mrca1;		HX_STACK_VAR(tmp,"tmp");
			HX_STACK_LINE(7236)
			::zpp_nape::util::ZNPList_ZPP_Interactor _this = tmp;		HX_STACK_VAR(_this,"_this");
			HX_STACK_LINE(7236)
			{
				HX_STACK_LINE(7236)
				while((true)){
					HX_STACK_LINE(7236)
					bool tmp1 = (_this->head == null());		HX_STACK_VAR(tmp1,"tmp1");
					HX_STACK_LINE(7236)
					bool tmp2 = !(tmp1);		HX_STACK_VAR(tmp2,"tmp2");
					HX_STACK_LINE(7236)
					bool tmp3 = !(tmp2);		HX_STACK_VAR(tmp3,"tmp3");
					HX_STACK_LINE(7236)
					if ((tmp3)){
						HX_STACK_LINE(7236)
						break;
					}
					HX_STACK_LINE(7236)
					::zpp_nape::util::ZNPNode_ZPP_Interactor ret = _this->head;		HX_STACK_VAR(ret,"ret");
					HX_STACK_LINE(7236)
					_this->head = ret->next;
					HX_STACK_LINE(7236)
					{
						HX_STACK_LINE(7236)
						::zpp_nape::util::ZNPNode_ZPP_Interactor o = ret;		HX_STACK_VAR(o,"o");
						HX_STACK_LINE(7236)
						o->elt = null();
						HX_STACK_LINE(7236)
						::zpp_nape::util::ZNPNode_ZPP_Interactor tmp4 = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool;		HX_STACK_VAR(tmp4,"tmp4");
						HX_STACK_LINE(7236)
						o->next = tmp4;
						HX_STACK_LINE(7236)
						::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool = o;
					}
					HX_STACK_LINE(7236)
					bool tmp4 = (_this->head == null());		HX_STACK_VAR(tmp4,"tmp4");
					HX_STACK_LINE(7236)
					if ((tmp4)){
						HX_STACK_LINE(7236)
						_this->pushmod = true;
					}
					HX_STACK_LINE(7236)
					_this->modified = true;
					HX_STACK_LINE(7236)
					(_this->length)--;
				}
				HX_STACK_LINE(7236)
				_this->pushmod = true;
			}
		}
		HX_STACK_LINE(7236)
		{
			HX_STACK_LINE(7236)
			::zpp_nape::util::ZNPList_ZPP_Interactor tmp = this->mrca2;		HX_STACK_VAR(tmp,"tmp");
			HX_STACK_LINE(7236)
			::zpp_nape::util::ZNPList_ZPP_Interactor _this = tmp;		HX_STACK_VAR(_this,"_this");
			HX_STACK_LINE(7236)
			{
				HX_STACK_LINE(7236)
				while((true)){
					HX_STACK_LINE(7236)
					bool tmp1 = (_this->head == null());		HX_STACK_VAR(tmp1,"tmp1");
					HX_STACK_LINE(7236)
					bool tmp2 = !(tmp1);		HX_STACK_VAR(tmp2,"tmp2");
					HX_STACK_LINE(7236)
					bool tmp3 = !(tmp2);		HX_STACK_VAR(tmp3,"tmp3");
					HX_STACK_LINE(7236)
					if ((tmp3)){
						HX_STACK_LINE(7236)
						break;
					}
					HX_STACK_LINE(7236)
					::zpp_nape::util::ZNPNode_ZPP_Interactor ret = _this->head;		HX_STACK_VAR(ret,"ret");
					HX_STACK_LINE(7236)
					_this->head = ret->next;
					HX_STACK_LINE(7236)
					{
						HX_STACK_LINE(7236)
						::zpp_nape::util::ZNPNode_ZPP_Interactor o = ret;		HX_STACK_VAR(o,"o");
						HX_STACK_LINE(7236)
						o->elt = null();
						HX_STACK_LINE(7236)
						::zpp_nape::util::ZNPNode_ZPP_Interactor tmp4 = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool;		HX_STACK_VAR(tmp4,"tmp4");
						HX_STACK_LINE(7236)
						o->next = tmp4;
						HX_STACK_LINE(7236)
						::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool = o;
					}
					HX_STACK_LINE(7236)
					bool tmp4 = (_this->head == null());		HX_STACK_VAR(tmp4,"tmp4");
					HX_STACK_LINE(7236)
					if ((tmp4)){
						HX_STACK_LINE(7236)
						_this->pushmod = true;
					}
					HX_STACK_LINE(7236)
					_this->modified = true;
					HX_STACK_LINE(7236)
					(_this->length)--;
				}
				HX_STACK_LINE(7236)
				_this->pushmod = true;
			}
		}
		HX_STACK_LINE(7236)
		bool tmp = (s1->cbSet != null());		HX_STACK_VAR(tmp,"tmp");
		HX_STACK_LINE(7236)
		if ((tmp)){
			HX_STACK_LINE(7236)
			::zpp_nape::util::ZNPList_ZPP_Interactor tmp1 = this->mrca1;		HX_STACK_VAR(tmp1,"tmp1");
			HX_STACK_LINE(7236)
			::zpp_nape::util::ZNPList_ZPP_Interactor _this = tmp1;		HX_STACK_VAR(_this,"_this");
			HX_STACK_LINE(7236)
			::zpp_nape::util::ZNPNode_ZPP_Interactor tmp2;		HX_STACK_VAR(tmp2,"tmp2");
			HX_STACK_LINE(7236)
			{
				HX_STACK_LINE(7236)
				::zpp_nape::util::ZNPNode_ZPP_Interactor ret;		HX_STACK_VAR(ret,"ret");
				HX_STACK_LINE(7236)
				{
					HX_STACK_LINE(7236)
					::zpp_nape::util::ZNPNode_ZPP_Interactor tmp3 = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool;		HX_STACK_VAR(tmp3,"tmp3");
					HX_STACK_LINE(7236)
					bool tmp4 = (tmp3 == null());		HX_STACK_VAR(tmp4,"tmp4");
					HX_STACK_LINE(7236)
					if ((tmp4)){
						HX_STACK_LINE(7236)
						::zpp_nape::util::ZNPNode_ZPP_Interactor tmp5 = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::__new();		HX_STACK_VAR(tmp5,"tmp5");
						HX_STACK_LINE(7236)
						ret = tmp5;
					}
					else{
						HX_STACK_LINE(7236)
						::zpp_nape::util::ZNPNode_ZPP_Interactor tmp5 = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool;		HX_STACK_VAR(tmp5,"tmp5");
						HX_STACK_LINE(7236)
						ret = tmp5;
						HX_STACK_LINE(7236)
						::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool = ret->next;
						HX_STACK_LINE(7236)
						ret->next = null();
					}
					HX_STACK_LINE(7236)
					Dynamic();
				}
				HX_STACK_LINE(7236)
				ret->elt = s1;
				HX_STACK_LINE(7236)
				tmp2 = ret;
			}
			HX_STACK_LINE(7236)
			::zpp_nape::util::ZNPNode_ZPP_Interactor temp = tmp2;		HX_STACK_VAR(temp,"temp");
			HX_STACK_LINE(7236)
			temp->next = _this->head;
			HX_STACK_LINE(7236)
			_this->head = temp;
			HX_STACK_LINE(7236)
			_this->modified = true;
			HX_STACK_LINE(7236)
			(_this->length)++;
			HX_STACK_LINE(7236)
			s1;
		}
		HX_STACK_LINE(7236)
		::zpp_nape::callbacks::ZPP_CbSet tmp1 = s1->body->cbSet;		HX_STACK_VAR(tmp1,"tmp1");
		HX_STACK_LINE(7236)
		bool tmp2 = (tmp1 != null());		HX_STACK_VAR(tmp2,"tmp2");
		HX_STACK_LINE(7236)
		if ((tmp2)){
			HX_STACK_LINE(7236)
			::zpp_nape::util::ZNPList_ZPP_Interactor tmp3 = this->mrca1;		HX_STACK_VAR(tmp3,"tmp3");
			HX_STACK_LINE(7236)
			::zpp_nape::util::ZNPList_ZPP_Interactor _this = tmp3;		HX_STACK_VAR(_this,"_this");
			HX_STACK_LINE(7236)
			::zpp_nape::phys::ZPP_Interactor o = s1->body;		HX_STACK_VAR(o,"o");
			HX_STACK_LINE(7236)
			::zpp_nape::util::ZNPNode_ZPP_Interactor tmp4;		HX_STACK_VAR(tmp4,"tmp4");
			HX_STACK_LINE(7236)
			{
				HX_STACK_LINE(7236)
				::zpp_nape::util::ZNPNode_ZPP_Interactor ret;		HX_STACK_VAR(ret,"ret");
				HX_STACK_LINE(7236)
				{
					HX_STACK_LINE(7236)
					::zpp_nape::util::ZNPNode_ZPP_Interactor tmp5 = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool;		HX_STACK_VAR(tmp5,"tmp5");
					HX_STACK_LINE(7236)
					bool tmp6 = (tmp5 == null());		HX_STACK_VAR(tmp6,"tmp6");
					HX_STACK_LINE(7236)
					if ((tmp6)){
						HX_STACK_LINE(7236)
						::zpp_nape::util::ZNPNode_ZPP_Interactor tmp7 = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::__new();		HX_STACK_VAR(tmp7,"tmp7");
						HX_STACK_LINE(7236)
						ret = tmp7;
					}
					else{
						HX_STACK_LINE(7236)
						::zpp_nape::util::ZNPNode_ZPP_Interactor tmp7 = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool;		HX_STACK_VAR(tmp7,"tmp7");
						HX_STACK_LINE(7236)
						ret = tmp7;
						HX_STACK_LINE(7236)
						::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool = ret->next;
						HX_STACK_LINE(7236)
						ret->next = null();
					}
					HX_STACK_LINE(7236)
					Dynamic();
				}
				HX_STACK_LINE(7236)
				ret->elt = o;
				HX_STACK_LINE(7236)
				tmp4 = ret;
			}
			HX_STACK_LINE(7236)
			::zpp_nape::util::ZNPNode_ZPP_Interactor temp = tmp4;		HX_STACK_VAR(temp,"temp");
			HX_STACK_LINE(7236)
			temp->next = _this->head;
			HX_STACK_LINE(7236)
			_this->head = temp;
			HX_STACK_LINE(7236)
			_this->modified = true;
			HX_STACK_LINE(7236)
			(_this->length)++;
			HX_STACK_LINE(7236)
			o;
		}
		HX_STACK_LINE(7236)
		bool tmp3 = (s2->cbSet != null());		HX_STACK_VAR(tmp3,"tmp3");
		HX_STACK_LINE(7236)
		if ((tmp3)){
			HX_STACK_LINE(7236)
			::zpp_nape::util::ZNPList_ZPP_Interactor tmp4 = this->mrca2;		HX_STACK_VAR(tmp4,"tmp4");
			HX_STACK_LINE(7236)
			::zpp_nape::util::ZNPList_ZPP_Interactor _this = tmp4;		HX_STACK_VAR(_this,"_this");
			HX_STACK_LINE(7236)
			::zpp_nape::util::ZNPNode_ZPP_Interactor tmp5;		HX_STACK_VAR(tmp5,"tmp5");
			HX_STACK_LINE(7236)
			{
				HX_STACK_LINE(7236)
				::zpp_nape::util::ZNPNode_ZPP_Interactor ret;		HX_STACK_VAR(ret,"ret");
				HX_STACK_LINE(7236)
				{
					HX_STACK_LINE(7236)
					::zpp_nape::util::ZNPNode_ZPP_Interactor tmp6 = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool;		HX_STACK_VAR(tmp6,"tmp6");
					HX_STACK_LINE(7236)
					bool tmp7 = (tmp6 == null());		HX_STACK_VAR(tmp7,"tmp7");
					HX_STACK_LINE(7236)
					if ((tmp7)){
						HX_STACK_LINE(7236)
						::zpp_nape::util::ZNPNode_ZPP_Interactor tmp8 = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::__new();		HX_STACK_VAR(tmp8,"tmp8");
						HX_STACK_LINE(7236)
						ret = tmp8;
					}
					else{
						HX_STACK_LINE(7236)
						::zpp_nape::util::ZNPNode_ZPP_Interactor tmp8 = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool;		HX_STACK_VAR(tmp8,"tmp8");
						HX_STACK_LINE(7236)
						ret = tmp8;
						HX_STACK_LINE(7236)
						::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool = ret->next;
						HX_STACK_LINE(7236)
						ret->next = null();
					}
					HX_STACK_LINE(7236)
					Dynamic();
				}
				HX_STACK_LINE(7236)
				ret->elt = s2;
				HX_STACK_LINE(7236)
				tmp5 = ret;
			}
			HX_STACK_LINE(7236)
			::zpp_nape::util::ZNPNode_ZPP_Interactor temp = tmp5;		HX_STACK_VAR(temp,"temp");
			HX_STACK_LINE(7236)
			temp->next = _this->head;
			HX_STACK_LINE(7236)
			_this->head = temp;
			HX_STACK_LINE(7236)
			_this->modified = true;
			HX_STACK_LINE(7236)
			(_this->length)++;
			HX_STACK_LINE(7236)
			s2;
		}
		HX_STACK_LINE(7236)
		::zpp_nape::callbacks::ZPP_CbSet tmp4 = s2->body->cbSet;		HX_STACK_VAR(tmp4,"tmp4");
		HX_STACK_LINE(7236)
		bool tmp5 = (tmp4 != null());		HX_STACK_VAR(tmp5,"tmp5");
		HX_STACK_LINE(7236)
		if ((tmp5)){
			HX_STACK_LINE(7236)
			::zpp_nape::util::ZNPList_ZPP_Interactor tmp6 = this->mrca2;		HX_STACK_VAR(tmp6,"tmp6");
			HX_STACK_LINE(7236)
			::zpp_nape::util::ZNPList_ZPP_Interactor _this = tmp6;		HX_STACK_VAR(_this,"_this");
			HX_STACK_LINE(7236)
			::zpp_nape::phys::ZPP_Interactor o = s2->body;		HX_STACK_VAR(o,"o");
			HX_STACK_LINE(7236)
			::zpp_nape::util::ZNPNode_ZPP_Interactor tmp7;		HX_STACK_VAR(tmp7,"tmp7");
			HX_STACK_LINE(7236)
			{
				HX_STACK_LINE(7236)
				::zpp_nape::util::ZNPNode_ZPP_Interactor ret;		HX_STACK_VAR(ret,"ret");
				HX_STACK_LINE(7236)
				{
					HX_STACK_LINE(7236)
					::zpp_nape::util::ZNPNode_ZPP_Interactor tmp8 = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool;		HX_STACK_VAR(tmp8,"tmp8");
					HX_STACK_LINE(7236)
					bool tmp9 = (tmp8 == null());		HX_STACK_VAR(tmp9,"tmp9");
					HX_STACK_LINE(7236)
					if ((tmp9)){
						HX_STACK_LINE(7236)
						::zpp_nape::util::ZNPNode_ZPP_Interactor tmp10 = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::__new();		HX_STACK_VAR(tmp10,"tmp10");
						HX_STACK_LINE(7236)
						ret = tmp10;
					}
					else{
						HX_STACK_LINE(7236)
						::zpp_nape::util::ZNPNode_ZPP_Interactor tmp10 = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool;		HX_STACK_VAR(tmp10,"tmp10");
						HX_STACK_LINE(7236)
						ret = tmp10;
						HX_STACK_LINE(7236)
						::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool = ret->next;
						HX_STACK_LINE(7236)
						ret->next = null();
					}
					HX_STACK_LINE(7236)
					Dynamic();
				}
				HX_STACK_LINE(7236)
				ret->elt = o;
				HX_STACK_LINE(7236)
				tmp7 = ret;
			}
			HX_STACK_LINE(7236)
			::zpp_nape::util::ZNPNode_ZPP_Interactor temp = tmp7;		HX_STACK_VAR(temp,"temp");
			HX_STACK_LINE(7236)
			temp->next = _this->head;
			HX_STACK_LINE(7236)
			_this->head = temp;
			HX_STACK_LINE(7236)
			_this->modified = true;
			HX_STACK_LINE(7236)
			(_this->length)++;
			HX_STACK_LINE(7236)
			o;
		}
		HX_STACK_LINE(7236)
		::zpp_nape::phys::ZPP_Compound tmp6 = s1->body->compound;		HX_STACK_VAR(tmp6,"tmp6");
		HX_STACK_LINE(7236)
		::zpp_nape::phys::ZPP_Compound c1 = tmp6;		HX_STACK_VAR(c1,"c1");
		HX_STACK_LINE(7236)
		::zpp_nape::phys::ZPP_Compound tmp7 = s2->body->compound;		HX_STACK_VAR(tmp7,"tmp7");
		HX_STACK_LINE(7236)
		::zpp_nape::phys::ZPP_Compound c2 = tmp7;		HX_STACK_VAR(c2,"c2");
		HX_STACK_LINE(7236)
		while((true)){
			HX_STACK_LINE(7236)
			bool tmp8 = (c1 != c2);		HX_STACK_VAR(tmp8,"tmp8");
			HX_STACK_LINE(7236)
			bool tmp9 = !(tmp8);		HX_STACK_VAR(tmp9,"tmp9");
			HX_STACK_LINE(7236)
			if ((tmp9)){
				HX_STACK_LINE(7236)
				break;
			}
			HX_STACK_LINE(7236)
			bool tmp10 = (c1 == null());		HX_STACK_VAR(tmp10,"tmp10");
			HX_STACK_LINE(7236)
			int tmp11;		HX_STACK_VAR(tmp11,"tmp11");
			HX_STACK_LINE(7236)
			if ((tmp10)){
				HX_STACK_LINE(7236)
				tmp11 = (int)0;
			}
			else{
				HX_STACK_LINE(7236)
				tmp11 = c1->depth;
			}
			HX_STACK_LINE(7236)
			int d1 = tmp11;		HX_STACK_VAR(d1,"d1");
			HX_STACK_LINE(7236)
			bool tmp12 = (c2 == null());		HX_STACK_VAR(tmp12,"tmp12");
			HX_STACK_LINE(7236)
			int tmp13;		HX_STACK_VAR(tmp13,"tmp13");
			HX_STACK_LINE(7236)
			if ((tmp12)){
				HX_STACK_LINE(7236)
				tmp13 = (int)0;
			}
			else{
				HX_STACK_LINE(7236)
				tmp13 = c2->depth;
			}
			HX_STACK_LINE(7236)
			int d2 = tmp13;		HX_STACK_VAR(d2,"d2");
			HX_STACK_LINE(7236)
			bool tmp14 = (d1 < d2);		HX_STACK_VAR(tmp14,"tmp14");
			HX_STACK_LINE(7236)
			if ((tmp14)){
				HX_STACK_LINE(7236)
				bool tmp15 = (c2->cbSet != null());		HX_STACK_VAR(tmp15,"tmp15");
				HX_STACK_LINE(7236)
				if ((tmp15)){
					HX_STACK_LINE(7236)
					::zpp_nape::util::ZNPList_ZPP_Interactor tmp16 = this->mrca2;		HX_STACK_VAR(tmp16,"tmp16");
					HX_STACK_LINE(7236)
					::zpp_nape::util::ZNPList_ZPP_Interactor _this = tmp16;		HX_STACK_VAR(_this,"_this");
					HX_STACK_LINE(7236)
					::zpp_nape::util::ZNPNode_ZPP_Interactor tmp17;		HX_STACK_VAR(tmp17,"tmp17");
					HX_STACK_LINE(7236)
					{
						HX_STACK_LINE(7236)
						::zpp_nape::util::ZNPNode_ZPP_Interactor ret;		HX_STACK_VAR(ret,"ret");
						HX_STACK_LINE(7236)
						{
							HX_STACK_LINE(7236)
							::zpp_nape::util::ZNPNode_ZPP_Interactor tmp18 = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool;		HX_STACK_VAR(tmp18,"tmp18");
							HX_STACK_LINE(7236)
							bool tmp19 = (tmp18 == null());		HX_STACK_VAR(tmp19,"tmp19");
							HX_STACK_LINE(7236)
							if ((tmp19)){
								HX_STACK_LINE(7236)
								::zpp_nape::util::ZNPNode_ZPP_Interactor tmp20 = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::__new();		HX_STACK_VAR(tmp20,"tmp20");
								HX_STACK_LINE(7236)
								ret = tmp20;
							}
							else{
								HX_STACK_LINE(7236)
								::zpp_nape::util::ZNPNode_ZPP_Interactor tmp20 = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool;		HX_STACK_VAR(tmp20,"tmp20");
								HX_STACK_LINE(7236)
								ret = tmp20;
								HX_STACK_LINE(7236)
								::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool = ret->next;
								HX_STACK_LINE(7236)
								ret->next = null();
							}
							HX_STACK_LINE(7236)
							Dynamic();
						}
						HX_STACK_LINE(7236)
						ret->elt = c2;
						HX_STACK_LINE(7236)
						tmp17 = ret;
					}
					HX_STACK_LINE(7236)
					::zpp_nape::util::ZNPNode_ZPP_Interactor temp = tmp17;		HX_STACK_VAR(temp,"temp");
					HX_STACK_LINE(7236)
					temp->next = _this->head;
					HX_STACK_LINE(7236)
					_this->head = temp;
					HX_STACK_LINE(7236)
					_this->modified = true;
					HX_STACK_LINE(7236)
					(_this->length)++;
					HX_STACK_LINE(7236)
					c2;
				}
				HX_STACK_LINE(7236)
				c2 = c2->compound;
			}
			else{
				HX_STACK_LINE(7236)
				bool tmp15 = (c1->cbSet != null());		HX_STACK_VAR(tmp15,"tmp15");
				HX_STACK_LINE(7236)
				if ((tmp15)){
					HX_STACK_LINE(7236)
					::zpp_nape::util::ZNPList_ZPP_Interactor tmp16 = this->mrca1;		HX_STACK_VAR(tmp16,"tmp16");
					HX_STACK_LINE(7236)
					::zpp_nape::util::ZNPList_ZPP_Interactor _this = tmp16;		HX_STACK_VAR(_this,"_this");
					HX_STACK_LINE(7236)
					::zpp_nape::util::ZNPNode_ZPP_Interactor tmp17;		HX_STACK_VAR(tmp17,"tmp17");
					HX_STACK_LINE(7236)
					{
						HX_STACK_LINE(7236)
						::zpp_nape::util::ZNPNode_ZPP_Interactor ret;		HX_STACK_VAR(ret,"ret");
						HX_STACK_LINE(7236)
						{
							HX_STACK_LINE(7236)
							::zpp_nape::util::ZNPNode_ZPP_Interactor tmp18 = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool;		HX_STACK_VAR(tmp18,"tmp18");
							HX_STACK_LINE(7236)
							bool tmp19 = (tmp18 == null());		HX_STACK_VAR(tmp19,"tmp19");
							HX_STACK_LINE(7236)
							if ((tmp19)){
								HX_STACK_LINE(7236)
								::zpp_nape::util::ZNPNode_ZPP_Interactor tmp20 = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::__new();		HX_STACK_VAR(tmp20,"tmp20");
								HX_STACK_LINE(7236)
								ret = tmp20;
							}
							else{
								HX_STACK_LINE(7236)
								::zpp_nape::util::ZNPNode_ZPP_Interactor tmp20 = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool;		HX_STACK_VAR(tmp20,"tmp20");
								HX_STACK_LINE(7236)
								ret = tmp20;
								HX_STACK_LINE(7236)
								::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool = ret->next;
								HX_STACK_LINE(7236)
								ret->next = null();
							}
							HX_STACK_LINE(7236)
							Dynamic();
						}
						HX_STACK_LINE(7236)
						ret->elt = c1;
						HX_STACK_LINE(7236)
						tmp17 = ret;
					}
					HX_STACK_LINE(7236)
					::zpp_nape::util::ZNPNode_ZPP_Interactor temp = tmp17;		HX_STACK_VAR(temp,"temp");
					HX_STACK_LINE(7236)
					temp->next = _this->head;
					HX_STACK_LINE(7236)
					_this->head = temp;
					HX_STACK_LINE(7236)
					_this->modified = true;
					HX_STACK_LINE(7236)
					(_this->length)++;
					HX_STACK_LINE(7236)
					c1;
				}
				HX_STACK_LINE(7236)
				c1 = c1->compound;
			}
		}
	}
return null();
}


HX_DEFINE_DYNAMIC_FUNC2(ZPP_Space_obj,MRCA_chains,(void))

Void ZPP_Space_obj::inlined_MRCA_chains( ::zpp_nape::shape::ZPP_Shape s1,::zpp_nape::shape::ZPP_Shape s2){
{
		HX_STACK_FRAME("zpp_nape.space.ZPP_Space","inlined_MRCA_chains",0xfc72bfc4,"zpp_nape.space.ZPP_Space.inlined_MRCA_chains","zpp_nape/space/Space.hx",7240,0x2b65ed03)
		HX_STACK_THIS(this)
		HX_STACK_ARG(s1,"s1")
		HX_STACK_ARG(s2,"s2")
		HX_STACK_LINE(7249)
		{
			HX_STACK_LINE(7249)
			::zpp_nape::util::ZNPList_ZPP_Interactor tmp = this->mrca1;		HX_STACK_VAR(tmp,"tmp");
			HX_STACK_LINE(7249)
			::zpp_nape::util::ZNPList_ZPP_Interactor _this = tmp;		HX_STACK_VAR(_this,"_this");
			HX_STACK_LINE(7249)
			{
				HX_STACK_LINE(7249)
				while((true)){
					HX_STACK_LINE(7249)
					bool tmp1 = (_this->head == null());		HX_STACK_VAR(tmp1,"tmp1");
					HX_STACK_LINE(7249)
					bool tmp2 = !(tmp1);		HX_STACK_VAR(tmp2,"tmp2");
					HX_STACK_LINE(7249)
					bool tmp3 = !(tmp2);		HX_STACK_VAR(tmp3,"tmp3");
					HX_STACK_LINE(7249)
					if ((tmp3)){
						HX_STACK_LINE(7249)
						break;
					}
					HX_STACK_LINE(7249)
					::zpp_nape::util::ZNPNode_ZPP_Interactor ret = _this->head;		HX_STACK_VAR(ret,"ret");
					HX_STACK_LINE(7249)
					_this->head = ret->next;
					HX_STACK_LINE(7249)
					{
						HX_STACK_LINE(7249)
						::zpp_nape::util::ZNPNode_ZPP_Interactor o = ret;		HX_STACK_VAR(o,"o");
						HX_STACK_LINE(7249)
						o->elt = null();
						HX_STACK_LINE(7249)
						::zpp_nape::util::ZNPNode_ZPP_Interactor tmp4 = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool;		HX_STACK_VAR(tmp4,"tmp4");
						HX_STACK_LINE(7249)
						o->next = tmp4;
						HX_STACK_LINE(7249)
						::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool = o;
					}
					HX_STACK_LINE(7249)
					bool tmp4 = (_this->head == null());		HX_STACK_VAR(tmp4,"tmp4");
					HX_STACK_LINE(7249)
					if ((tmp4)){
						HX_STACK_LINE(7249)
						_this->pushmod = true;
					}
					HX_STACK_LINE(7249)
					_this->modified = true;
					HX_STACK_LINE(7249)
					(_this->length)--;
				}
				HX_STACK_LINE(7249)
				_this->pushmod = true;
			}
		}
		HX_STACK_LINE(7250)
		{
			HX_STACK_LINE(7250)
			::zpp_nape::util::ZNPList_ZPP_Interactor tmp = this->mrca2;		HX_STACK_VAR(tmp,"tmp");
			HX_STACK_LINE(7250)
			::zpp_nape::util::ZNPList_ZPP_Interactor _this = tmp;		HX_STACK_VAR(_this,"_this");
			HX_STACK_LINE(7250)
			{
				HX_STACK_LINE(7250)
				while((true)){
					HX_STACK_LINE(7250)
					bool tmp1 = (_this->head == null());		HX_STACK_VAR(tmp1,"tmp1");
					HX_STACK_LINE(7250)
					bool tmp2 = !(tmp1);		HX_STACK_VAR(tmp2,"tmp2");
					HX_STACK_LINE(7250)
					bool tmp3 = !(tmp2);		HX_STACK_VAR(tmp3,"tmp3");
					HX_STACK_LINE(7250)
					if ((tmp3)){
						HX_STACK_LINE(7250)
						break;
					}
					HX_STACK_LINE(7250)
					::zpp_nape::util::ZNPNode_ZPP_Interactor ret = _this->head;		HX_STACK_VAR(ret,"ret");
					HX_STACK_LINE(7250)
					_this->head = ret->next;
					HX_STACK_LINE(7250)
					{
						HX_STACK_LINE(7250)
						::zpp_nape::util::ZNPNode_ZPP_Interactor o = ret;		HX_STACK_VAR(o,"o");
						HX_STACK_LINE(7250)
						o->elt = null();
						HX_STACK_LINE(7250)
						::zpp_nape::util::ZNPNode_ZPP_Interactor tmp4 = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool;		HX_STACK_VAR(tmp4,"tmp4");
						HX_STACK_LINE(7250)
						o->next = tmp4;
						HX_STACK_LINE(7250)
						::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool = o;
					}
					HX_STACK_LINE(7250)
					bool tmp4 = (_this->head == null());		HX_STACK_VAR(tmp4,"tmp4");
					HX_STACK_LINE(7250)
					if ((tmp4)){
						HX_STACK_LINE(7250)
						_this->pushmod = true;
					}
					HX_STACK_LINE(7250)
					_this->modified = true;
					HX_STACK_LINE(7250)
					(_this->length)--;
				}
				HX_STACK_LINE(7250)
				_this->pushmod = true;
			}
		}
		HX_STACK_LINE(7251)
		bool tmp = (s1->cbSet != null());		HX_STACK_VAR(tmp,"tmp");
		HX_STACK_LINE(7251)
		if ((tmp)){
			HX_STACK_LINE(7251)
			::zpp_nape::util::ZNPList_ZPP_Interactor tmp1 = this->mrca1;		HX_STACK_VAR(tmp1,"tmp1");
			HX_STACK_LINE(7251)
			::zpp_nape::util::ZNPList_ZPP_Interactor _this = tmp1;		HX_STACK_VAR(_this,"_this");
			HX_STACK_LINE(7251)
			::zpp_nape::util::ZNPNode_ZPP_Interactor tmp2;		HX_STACK_VAR(tmp2,"tmp2");
			HX_STACK_LINE(7251)
			{
				HX_STACK_LINE(7251)
				::zpp_nape::util::ZNPNode_ZPP_Interactor ret;		HX_STACK_VAR(ret,"ret");
				HX_STACK_LINE(7251)
				{
					HX_STACK_LINE(7251)
					::zpp_nape::util::ZNPNode_ZPP_Interactor tmp3 = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool;		HX_STACK_VAR(tmp3,"tmp3");
					HX_STACK_LINE(7251)
					bool tmp4 = (tmp3 == null());		HX_STACK_VAR(tmp4,"tmp4");
					HX_STACK_LINE(7251)
					if ((tmp4)){
						HX_STACK_LINE(7251)
						::zpp_nape::util::ZNPNode_ZPP_Interactor tmp5 = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::__new();		HX_STACK_VAR(tmp5,"tmp5");
						HX_STACK_LINE(7251)
						ret = tmp5;
					}
					else{
						HX_STACK_LINE(7251)
						::zpp_nape::util::ZNPNode_ZPP_Interactor tmp5 = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool;		HX_STACK_VAR(tmp5,"tmp5");
						HX_STACK_LINE(7251)
						ret = tmp5;
						HX_STACK_LINE(7251)
						::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool = ret->next;
						HX_STACK_LINE(7251)
						ret->next = null();
					}
					HX_STACK_LINE(7251)
					Dynamic();
				}
				HX_STACK_LINE(7251)
				ret->elt = s1;
				HX_STACK_LINE(7251)
				tmp2 = ret;
			}
			HX_STACK_LINE(7251)
			::zpp_nape::util::ZNPNode_ZPP_Interactor temp = tmp2;		HX_STACK_VAR(temp,"temp");
			HX_STACK_LINE(7251)
			temp->next = _this->head;
			HX_STACK_LINE(7251)
			_this->head = temp;
			HX_STACK_LINE(7251)
			_this->modified = true;
			HX_STACK_LINE(7251)
			(_this->length)++;
			HX_STACK_LINE(7251)
			s1;
		}
		HX_STACK_LINE(7252)
		::zpp_nape::callbacks::ZPP_CbSet tmp1 = s1->body->cbSet;		HX_STACK_VAR(tmp1,"tmp1");
		HX_STACK_LINE(7252)
		bool tmp2 = (tmp1 != null());		HX_STACK_VAR(tmp2,"tmp2");
		HX_STACK_LINE(7252)
		if ((tmp2)){
			HX_STACK_LINE(7252)
			::zpp_nape::util::ZNPList_ZPP_Interactor tmp3 = this->mrca1;		HX_STACK_VAR(tmp3,"tmp3");
			HX_STACK_LINE(7252)
			::zpp_nape::util::ZNPList_ZPP_Interactor _this = tmp3;		HX_STACK_VAR(_this,"_this");
			HX_STACK_LINE(7252)
			::zpp_nape::phys::ZPP_Interactor o = s1->body;		HX_STACK_VAR(o,"o");
			HX_STACK_LINE(7252)
			::zpp_nape::util::ZNPNode_ZPP_Interactor tmp4;		HX_STACK_VAR(tmp4,"tmp4");
			HX_STACK_LINE(7252)
			{
				HX_STACK_LINE(7252)
				::zpp_nape::util::ZNPNode_ZPP_Interactor ret;		HX_STACK_VAR(ret,"ret");
				HX_STACK_LINE(7252)
				{
					HX_STACK_LINE(7252)
					::zpp_nape::util::ZNPNode_ZPP_Interactor tmp5 = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool;		HX_STACK_VAR(tmp5,"tmp5");
					HX_STACK_LINE(7252)
					bool tmp6 = (tmp5 == null());		HX_STACK_VAR(tmp6,"tmp6");
					HX_STACK_LINE(7252)
					if ((tmp6)){
						HX_STACK_LINE(7252)
						::zpp_nape::util::ZNPNode_ZPP_Interactor tmp7 = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::__new();		HX_STACK_VAR(tmp7,"tmp7");
						HX_STACK_LINE(7252)
						ret = tmp7;
					}
					else{
						HX_STACK_LINE(7252)
						::zpp_nape::util::ZNPNode_ZPP_Interactor tmp7 = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool;		HX_STACK_VAR(tmp7,"tmp7");
						HX_STACK_LINE(7252)
						ret = tmp7;
						HX_STACK_LINE(7252)
						::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool = ret->next;
						HX_STACK_LINE(7252)
						ret->next = null();
					}
					HX_STACK_LINE(7252)
					Dynamic();
				}
				HX_STACK_LINE(7252)
				ret->elt = o;
				HX_STACK_LINE(7252)
				tmp4 = ret;
			}
			HX_STACK_LINE(7252)
			::zpp_nape::util::ZNPNode_ZPP_Interactor temp = tmp4;		HX_STACK_VAR(temp,"temp");
			HX_STACK_LINE(7252)
			temp->next = _this->head;
			HX_STACK_LINE(7252)
			_this->head = temp;
			HX_STACK_LINE(7252)
			_this->modified = true;
			HX_STACK_LINE(7252)
			(_this->length)++;
			HX_STACK_LINE(7252)
			o;
		}
		HX_STACK_LINE(7253)
		bool tmp3 = (s2->cbSet != null());		HX_STACK_VAR(tmp3,"tmp3");
		HX_STACK_LINE(7253)
		if ((tmp3)){
			HX_STACK_LINE(7253)
			::zpp_nape::util::ZNPList_ZPP_Interactor tmp4 = this->mrca2;		HX_STACK_VAR(tmp4,"tmp4");
			HX_STACK_LINE(7253)
			::zpp_nape::util::ZNPList_ZPP_Interactor _this = tmp4;		HX_STACK_VAR(_this,"_this");
			HX_STACK_LINE(7253)
			::zpp_nape::util::ZNPNode_ZPP_Interactor tmp5;		HX_STACK_VAR(tmp5,"tmp5");
			HX_STACK_LINE(7253)
			{
				HX_STACK_LINE(7253)
				::zpp_nape::util::ZNPNode_ZPP_Interactor ret;		HX_STACK_VAR(ret,"ret");
				HX_STACK_LINE(7253)
				{
					HX_STACK_LINE(7253)
					::zpp_nape::util::ZNPNode_ZPP_Interactor tmp6 = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool;		HX_STACK_VAR(tmp6,"tmp6");
					HX_STACK_LINE(7253)
					bool tmp7 = (tmp6 == null());		HX_STACK_VAR(tmp7,"tmp7");
					HX_STACK_LINE(7253)
					if ((tmp7)){
						HX_STACK_LINE(7253)
						::zpp_nape::util::ZNPNode_ZPP_Interactor tmp8 = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::__new();		HX_STACK_VAR(tmp8,"tmp8");
						HX_STACK_LINE(7253)
						ret = tmp8;
					}
					else{
						HX_STACK_LINE(7253)
						::zpp_nape::util::ZNPNode_ZPP_Interactor tmp8 = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool;		HX_STACK_VAR(tmp8,"tmp8");
						HX_STACK_LINE(7253)
						ret = tmp8;
						HX_STACK_LINE(7253)
						::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool = ret->next;
						HX_STACK_LINE(7253)
						ret->next = null();
					}
					HX_STACK_LINE(7253)
					Dynamic();
				}
				HX_STACK_LINE(7253)
				ret->elt = s2;
				HX_STACK_LINE(7253)
				tmp5 = ret;
			}
			HX_STACK_LINE(7253)
			::zpp_nape::util::ZNPNode_ZPP_Interactor temp = tmp5;		HX_STACK_VAR(temp,"temp");
			HX_STACK_LINE(7253)
			temp->next = _this->head;
			HX_STACK_LINE(7253)
			_this->head = temp;
			HX_STACK_LINE(7253)
			_this->modified = true;
			HX_STACK_LINE(7253)
			(_this->length)++;
			HX_STACK_LINE(7253)
			s2;
		}
		HX_STACK_LINE(7254)
		::zpp_nape::callbacks::ZPP_CbSet tmp4 = s2->body->cbSet;		HX_STACK_VAR(tmp4,"tmp4");
		HX_STACK_LINE(7254)
		bool tmp5 = (tmp4 != null());		HX_STACK_VAR(tmp5,"tmp5");
		HX_STACK_LINE(7254)
		if ((tmp5)){
			HX_STACK_LINE(7254)
			::zpp_nape::util::ZNPList_ZPP_Interactor tmp6 = this->mrca2;		HX_STACK_VAR(tmp6,"tmp6");
			HX_STACK_LINE(7254)
			::zpp_nape::util::ZNPList_ZPP_Interactor _this = tmp6;		HX_STACK_VAR(_this,"_this");
			HX_STACK_LINE(7254)
			::zpp_nape::phys::ZPP_Interactor o = s2->body;		HX_STACK_VAR(o,"o");
			HX_STACK_LINE(7254)
			::zpp_nape::util::ZNPNode_ZPP_Interactor tmp7;		HX_STACK_VAR(tmp7,"tmp7");
			HX_STACK_LINE(7254)
			{
				HX_STACK_LINE(7254)
				::zpp_nape::util::ZNPNode_ZPP_Interactor ret;		HX_STACK_VAR(ret,"ret");
				HX_STACK_LINE(7254)
				{
					HX_STACK_LINE(7254)
					::zpp_nape::util::ZNPNode_ZPP_Interactor tmp8 = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool;		HX_STACK_VAR(tmp8,"tmp8");
					HX_STACK_LINE(7254)
					bool tmp9 = (tmp8 == null());		HX_STACK_VAR(tmp9,"tmp9");
					HX_STACK_LINE(7254)
					if ((tmp9)){
						HX_STACK_LINE(7254)
						::zpp_nape::util::ZNPNode_ZPP_Interactor tmp10 = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::__new();		HX_STACK_VAR(tmp10,"tmp10");
						HX_STACK_LINE(7254)
						ret = tmp10;
					}
					else{
						HX_STACK_LINE(7254)
						::zpp_nape::util::ZNPNode_ZPP_Interactor tmp10 = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool;		HX_STACK_VAR(tmp10,"tmp10");
						HX_STACK_LINE(7254)
						ret = tmp10;
						HX_STACK_LINE(7254)
						::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool = ret->next;
						HX_STACK_LINE(7254)
						ret->next = null();
					}
					HX_STACK_LINE(7254)
					Dynamic();
				}
				HX_STACK_LINE(7254)
				ret->elt = o;
				HX_STACK_LINE(7254)
				tmp7 = ret;
			}
			HX_STACK_LINE(7254)
			::zpp_nape::util::ZNPNode_ZPP_Interactor temp = tmp7;		HX_STACK_VAR(temp,"temp");
			HX_STACK_LINE(7254)
			temp->next = _this->head;
			HX_STACK_LINE(7254)
			_this->head = temp;
			HX_STACK_LINE(7254)
			_this->modified = true;
			HX_STACK_LINE(7254)
			(_this->length)++;
			HX_STACK_LINE(7254)
			o;
		}
		HX_STACK_LINE(7255)
		::zpp_nape::phys::ZPP_Compound tmp6 = s1->body->compound;		HX_STACK_VAR(tmp6,"tmp6");
		HX_STACK_LINE(7255)
		::zpp_nape::phys::ZPP_Compound c1 = tmp6;		HX_STACK_VAR(c1,"c1");
		HX_STACK_LINE(7256)
		::zpp_nape::phys::ZPP_Compound tmp7 = s2->body->compound;		HX_STACK_VAR(tmp7,"tmp7");
		HX_STACK_LINE(7256)
		::zpp_nape::phys::ZPP_Compound c2 = tmp7;		HX_STACK_VAR(c2,"c2");
		HX_STACK_LINE(7257)
		while((true)){
			HX_STACK_LINE(7257)
			bool tmp8 = (c1 != c2);		HX_STACK_VAR(tmp8,"tmp8");
			HX_STACK_LINE(7257)
			bool tmp9 = !(tmp8);		HX_STACK_VAR(tmp9,"tmp9");
			HX_STACK_LINE(7257)
			if ((tmp9)){
				HX_STACK_LINE(7257)
				break;
			}
			HX_STACK_LINE(7258)
			bool tmp10 = (c1 == null());		HX_STACK_VAR(tmp10,"tmp10");
			HX_STACK_LINE(7258)
			int tmp11;		HX_STACK_VAR(tmp11,"tmp11");
			HX_STACK_LINE(7258)
			if ((tmp10)){
				HX_STACK_LINE(7258)
				tmp11 = (int)0;
			}
			else{
				HX_STACK_LINE(7258)
				tmp11 = c1->depth;
			}
			HX_STACK_LINE(7258)
			int d1 = tmp11;		HX_STACK_VAR(d1,"d1");
			HX_STACK_LINE(7259)
			bool tmp12 = (c2 == null());		HX_STACK_VAR(tmp12,"tmp12");
			HX_STACK_LINE(7259)
			int tmp13;		HX_STACK_VAR(tmp13,"tmp13");
			HX_STACK_LINE(7259)
			if ((tmp12)){
				HX_STACK_LINE(7259)
				tmp13 = (int)0;
			}
			else{
				HX_STACK_LINE(7259)
				tmp13 = c2->depth;
			}
			HX_STACK_LINE(7259)
			int d2 = tmp13;		HX_STACK_VAR(d2,"d2");
			HX_STACK_LINE(7260)
			bool tmp14 = (d1 < d2);		HX_STACK_VAR(tmp14,"tmp14");
			HX_STACK_LINE(7260)
			if ((tmp14)){
				HX_STACK_LINE(7261)
				bool tmp15 = (c2->cbSet != null());		HX_STACK_VAR(tmp15,"tmp15");
				HX_STACK_LINE(7261)
				if ((tmp15)){
					HX_STACK_LINE(7261)
					::zpp_nape::util::ZNPList_ZPP_Interactor tmp16 = this->mrca2;		HX_STACK_VAR(tmp16,"tmp16");
					HX_STACK_LINE(7261)
					::zpp_nape::util::ZNPList_ZPP_Interactor _this = tmp16;		HX_STACK_VAR(_this,"_this");
					HX_STACK_LINE(7261)
					::zpp_nape::util::ZNPNode_ZPP_Interactor tmp17;		HX_STACK_VAR(tmp17,"tmp17");
					HX_STACK_LINE(7261)
					{
						HX_STACK_LINE(7261)
						::zpp_nape::util::ZNPNode_ZPP_Interactor ret;		HX_STACK_VAR(ret,"ret");
						HX_STACK_LINE(7261)
						{
							HX_STACK_LINE(7261)
							::zpp_nape::util::ZNPNode_ZPP_Interactor tmp18 = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool;		HX_STACK_VAR(tmp18,"tmp18");
							HX_STACK_LINE(7261)
							bool tmp19 = (tmp18 == null());		HX_STACK_VAR(tmp19,"tmp19");
							HX_STACK_LINE(7261)
							if ((tmp19)){
								HX_STACK_LINE(7261)
								::zpp_nape::util::ZNPNode_ZPP_Interactor tmp20 = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::__new();		HX_STACK_VAR(tmp20,"tmp20");
								HX_STACK_LINE(7261)
								ret = tmp20;
							}
							else{
								HX_STACK_LINE(7261)
								::zpp_nape::util::ZNPNode_ZPP_Interactor tmp20 = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool;		HX_STACK_VAR(tmp20,"tmp20");
								HX_STACK_LINE(7261)
								ret = tmp20;
								HX_STACK_LINE(7261)
								::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool = ret->next;
								HX_STACK_LINE(7261)
								ret->next = null();
							}
							HX_STACK_LINE(7261)
							Dynamic();
						}
						HX_STACK_LINE(7261)
						ret->elt = c2;
						HX_STACK_LINE(7261)
						tmp17 = ret;
					}
					HX_STACK_LINE(7261)
					::zpp_nape::util::ZNPNode_ZPP_Interactor temp = tmp17;		HX_STACK_VAR(temp,"temp");
					HX_STACK_LINE(7261)
					temp->next = _this->head;
					HX_STACK_LINE(7261)
					_this->head = temp;
					HX_STACK_LINE(7261)
					_this->modified = true;
					HX_STACK_LINE(7261)
					(_this->length)++;
					HX_STACK_LINE(7261)
					c2;
				}
				HX_STACK_LINE(7262)
				c2 = c2->compound;
			}
			else{
				HX_STACK_LINE(7265)
				bool tmp15 = (c1->cbSet != null());		HX_STACK_VAR(tmp15,"tmp15");
				HX_STACK_LINE(7265)
				if ((tmp15)){
					HX_STACK_LINE(7265)
					::zpp_nape::util::ZNPList_ZPP_Interactor tmp16 = this->mrca1;		HX_STACK_VAR(tmp16,"tmp16");
					HX_STACK_LINE(7265)
					::zpp_nape::util::ZNPList_ZPP_Interactor _this = tmp16;		HX_STACK_VAR(_this,"_this");
					HX_STACK_LINE(7265)
					::zpp_nape::util::ZNPNode_ZPP_Interactor tmp17;		HX_STACK_VAR(tmp17,"tmp17");
					HX_STACK_LINE(7265)
					{
						HX_STACK_LINE(7265)
						::zpp_nape::util::ZNPNode_ZPP_Interactor ret;		HX_STACK_VAR(ret,"ret");
						HX_STACK_LINE(7265)
						{
							HX_STACK_LINE(7265)
							::zpp_nape::util::ZNPNode_ZPP_Interactor tmp18 = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool;		HX_STACK_VAR(tmp18,"tmp18");
							HX_STACK_LINE(7265)
							bool tmp19 = (tmp18 == null());		HX_STACK_VAR(tmp19,"tmp19");
							HX_STACK_LINE(7265)
							if ((tmp19)){
								HX_STACK_LINE(7265)
								::zpp_nape::util::ZNPNode_ZPP_Interactor tmp20 = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::__new();		HX_STACK_VAR(tmp20,"tmp20");
								HX_STACK_LINE(7265)
								ret = tmp20;
							}
							else{
								HX_STACK_LINE(7265)
								::zpp_nape::util::ZNPNode_ZPP_Interactor tmp20 = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool;		HX_STACK_VAR(tmp20,"tmp20");
								HX_STACK_LINE(7265)
								ret = tmp20;
								HX_STACK_LINE(7265)
								::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool = ret->next;
								HX_STACK_LINE(7265)
								ret->next = null();
							}
							HX_STACK_LINE(7265)
							Dynamic();
						}
						HX_STACK_LINE(7265)
						ret->elt = c1;
						HX_STACK_LINE(7265)
						tmp17 = ret;
					}
					HX_STACK_LINE(7265)
					::zpp_nape::util::ZNPNode_ZPP_Interactor temp = tmp17;		HX_STACK_VAR(temp,"temp");
					HX_STACK_LINE(7265)
					temp->next = _this->head;
					HX_STACK_LINE(7265)
					_this->head = temp;
					HX_STACK_LINE(7265)
					_this->modified = true;
					HX_STACK_LINE(7265)
					(_this->length)++;
					HX_STACK_LINE(7265)
					c1;
				}
				HX_STACK_LINE(7266)
				c1 = c1->compound;
			}
		}
	}
return null();
}


HX_DEFINE_DYNAMIC_FUNC2(ZPP_Space_obj,inlined_MRCA_chains,(void))


ZPP_Space_obj::ZPP_Space_obj()
{
}

void ZPP_Space_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(ZPP_Space);
	HX_MARK_MEMBER_NAME(outer,"outer");
	HX_MARK_MEMBER_NAME(userData,"userData");
	HX_MARK_MEMBER_NAME(gravityx,"gravityx");
	HX_MARK_MEMBER_NAME(gravityy,"gravityy");
	HX_MARK_MEMBER_NAME(wrap_gravity,"wrap_gravity");
	HX_MARK_MEMBER_NAME(bodies,"bodies");
	HX_MARK_MEMBER_NAME(wrap_bodies,"wrap_bodies");
	HX_MARK_MEMBER_NAME(compounds,"compounds");
	HX_MARK_MEMBER_NAME(wrap_compounds,"wrap_compounds");
	HX_MARK_MEMBER_NAME(constraints,"constraints");
	HX_MARK_MEMBER_NAME(wrap_constraints,"wrap_constraints");
	HX_MARK_MEMBER_NAME(kinematics,"kinematics");
	HX_MARK_MEMBER_NAME(bphase,"bphase");
	HX_MARK_MEMBER_NAME(__static,"__static");
	HX_MARK_MEMBER_NAME(global_lin_drag,"global_lin_drag");
	HX_MARK_MEMBER_NAME(global_ang_drag,"global_ang_drag");
	HX_MARK_MEMBER_NAME(stamp,"stamp");
	HX_MARK_MEMBER_NAME(midstep,"midstep");
	HX_MARK_MEMBER_NAME(time,"time");
	HX_MARK_MEMBER_NAME(sortcontacts,"sortcontacts");
	HX_MARK_MEMBER_NAME(c_arbiters_true,"c_arbiters_true");
	HX_MARK_MEMBER_NAME(c_arbiters_false,"c_arbiters_false");
	HX_MARK_MEMBER_NAME(f_arbiters,"f_arbiters");
	HX_MARK_MEMBER_NAME(s_arbiters,"s_arbiters");
	HX_MARK_MEMBER_NAME(wrap_arbiters,"wrap_arbiters");
	HX_MARK_MEMBER_NAME(live,"live");
	HX_MARK_MEMBER_NAME(wrap_live,"wrap_live");
	HX_MARK_MEMBER_NAME(live_constraints,"live_constraints");
	HX_MARK_MEMBER_NAME(wrap_livecon,"wrap_livecon");
	HX_MARK_MEMBER_NAME(staticsleep,"staticsleep");
	HX_MARK_MEMBER_NAME(islands,"islands");
	HX_MARK_MEMBER_NAME(listeners,"listeners");
	HX_MARK_MEMBER_NAME(wrap_listeners,"wrap_listeners");
	HX_MARK_MEMBER_NAME(callbacks,"callbacks");
	HX_MARK_MEMBER_NAME(callbackset_list,"callbackset_list");
	HX_MARK_MEMBER_NAME(cbsets,"cbsets");
	HX_MARK_MEMBER_NAME(convexShapeList,"convexShapeList");
	HX_MARK_MEMBER_NAME(pre_dt,"pre_dt");
	HX_MARK_MEMBER_NAME(toiEvents,"toiEvents");
	HX_MARK_MEMBER_NAME(continuous,"continuous");
	HX_MARK_MEMBER_NAME(precb,"precb");
	HX_MARK_MEMBER_NAME(prelisteners,"prelisteners");
	HX_MARK_MEMBER_NAME(mrca1,"mrca1");
	HX_MARK_MEMBER_NAME(mrca2,"mrca2");
	HX_MARK_END_CLASS();
}

void ZPP_Space_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(outer,"outer");
	HX_VISIT_MEMBER_NAME(userData,"userData");
	HX_VISIT_MEMBER_NAME(gravityx,"gravityx");
	HX_VISIT_MEMBER_NAME(gravityy,"gravityy");
	HX_VISIT_MEMBER_NAME(wrap_gravity,"wrap_gravity");
	HX_VISIT_MEMBER_NAME(bodies,"bodies");
	HX_VISIT_MEMBER_NAME(wrap_bodies,"wrap_bodies");
	HX_VISIT_MEMBER_NAME(compounds,"compounds");
	HX_VISIT_MEMBER_NAME(wrap_compounds,"wrap_compounds");
	HX_VISIT_MEMBER_NAME(constraints,"constraints");
	HX_VISIT_MEMBER_NAME(wrap_constraints,"wrap_constraints");
	HX_VISIT_MEMBER_NAME(kinematics,"kinematics");
	HX_VISIT_MEMBER_NAME(bphase,"bphase");
	HX_VISIT_MEMBER_NAME(__static,"__static");
	HX_VISIT_MEMBER_NAME(global_lin_drag,"global_lin_drag");
	HX_VISIT_MEMBER_NAME(global_ang_drag,"global_ang_drag");
	HX_VISIT_MEMBER_NAME(stamp,"stamp");
	HX_VISIT_MEMBER_NAME(midstep,"midstep");
	HX_VISIT_MEMBER_NAME(time,"time");
	HX_VISIT_MEMBER_NAME(sortcontacts,"sortcontacts");
	HX_VISIT_MEMBER_NAME(c_arbiters_true,"c_arbiters_true");
	HX_VISIT_MEMBER_NAME(c_arbiters_false,"c_arbiters_false");
	HX_VISIT_MEMBER_NAME(f_arbiters,"f_arbiters");
	HX_VISIT_MEMBER_NAME(s_arbiters,"s_arbiters");
	HX_VISIT_MEMBER_NAME(wrap_arbiters,"wrap_arbiters");
	HX_VISIT_MEMBER_NAME(live,"live");
	HX_VISIT_MEMBER_NAME(wrap_live,"wrap_live");
	HX_VISIT_MEMBER_NAME(live_constraints,"live_constraints");
	HX_VISIT_MEMBER_NAME(wrap_livecon,"wrap_livecon");
	HX_VISIT_MEMBER_NAME(staticsleep,"staticsleep");
	HX_VISIT_MEMBER_NAME(islands,"islands");
	HX_VISIT_MEMBER_NAME(listeners,"listeners");
	HX_VISIT_MEMBER_NAME(wrap_listeners,"wrap_listeners");
	HX_VISIT_MEMBER_NAME(callbacks,"callbacks");
	HX_VISIT_MEMBER_NAME(callbackset_list,"callbackset_list");
	HX_VISIT_MEMBER_NAME(cbsets,"cbsets");
	HX_VISIT_MEMBER_NAME(convexShapeList,"convexShapeList");
	HX_VISIT_MEMBER_NAME(pre_dt,"pre_dt");
	HX_VISIT_MEMBER_NAME(toiEvents,"toiEvents");
	HX_VISIT_MEMBER_NAME(continuous,"continuous");
	HX_VISIT_MEMBER_NAME(precb,"precb");
	HX_VISIT_MEMBER_NAME(prelisteners,"prelisteners");
	HX_VISIT_MEMBER_NAME(mrca1,"mrca1");
	HX_VISIT_MEMBER_NAME(mrca2,"mrca2");
}

Dynamic ZPP_Space_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"time") ) { return time; }
		if (HX_FIELD_EQ(inName,"live") ) { return live; }
		if (HX_FIELD_EQ(inName,"step") ) { return step_dyn(); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"outer") ) { return outer; }
		if (HX_FIELD_EQ(inName,"stamp") ) { return stamp; }
		if (HX_FIELD_EQ(inName,"clear") ) { return clear_dyn(); }
		if (HX_FIELD_EQ(inName,"precb") ) { return precb; }
		if (HX_FIELD_EQ(inName,"mrca1") ) { return mrca1; }
		if (HX_FIELD_EQ(inName,"mrca2") ) { return mrca2; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"bodies") ) { return bodies; }
		if (HX_FIELD_EQ(inName,"bphase") ) { return bphase; }
		if (HX_FIELD_EQ(inName,"cbsets") ) { return cbsets; }
		if (HX_FIELD_EQ(inName,"pre_dt") ) { return pre_dt; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"midstep") ) { return midstep; }
		if (HX_FIELD_EQ(inName,"islands") ) { return islands; }
		if (HX_FIELD_EQ(inName,"addBody") ) { return addBody_dyn(); }
		if (HX_FIELD_EQ(inName,"remBody") ) { return remBody_dyn(); }
		if (HX_FIELD_EQ(inName,"rayCast") ) { return rayCast_dyn(); }
		if (HX_FIELD_EQ(inName,"prestep") ) { return prestep_dyn(); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"userData") ) { return userData; }
		if (HX_FIELD_EQ(inName,"gravityx") ) { return gravityx; }
		if (HX_FIELD_EQ(inName,"gravityy") ) { return gravityy; }
		if (HX_FIELD_EQ(inName,"__static") ) { return __static; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"compounds") ) { return compounds; }
		if (HX_FIELD_EQ(inName,"wrap_live") ) { return wrap_live; }
		if (HX_FIELD_EQ(inName,"listeners") ) { return listeners; }
		if (HX_FIELD_EQ(inName,"callbacks") ) { return callbacks; }
		if (HX_FIELD_EQ(inName,"toiEvents") ) { return toiEvents; }
		if (HX_FIELD_EQ(inName,"doForests") ) { return doForests_dyn(); }
		if (HX_FIELD_EQ(inName,"updateVel") ) { return updateVel_dyn(); }
		if (HX_FIELD_EQ(inName,"updatePos") ) { return updatePos_dyn(); }
		if (HX_FIELD_EQ(inName,"warmStart") ) { return warmStart_dyn(); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"getgravity") ) { return getgravity_dyn(); }
		if (HX_FIELD_EQ(inName,"kinematics") ) { return kinematics; }
		if (HX_FIELD_EQ(inName,"f_arbiters") ) { return f_arbiters; }
		if (HX_FIELD_EQ(inName,"s_arbiters") ) { return s_arbiters; }
		if (HX_FIELD_EQ(inName,"convexCast") ) { return convexCast_dyn(); }
		if (HX_FIELD_EQ(inName,"bodyCbWake") ) { return bodyCbWake_dyn(); }
		if (HX_FIELD_EQ(inName,"wakeIsland") ) { return wakeIsland_dyn(); }
		if (HX_FIELD_EQ(inName,"validation") ) { return validation_dyn(); }
		if (HX_FIELD_EQ(inName,"continuous") ) { return continuous; }
		if (HX_FIELD_EQ(inName,"presteparb") ) { return presteparb_dyn(); }
		if (HX_FIELD_EQ(inName,"iterateVel") ) { return iterateVel_dyn(); }
		if (HX_FIELD_EQ(inName,"iteratePos") ) { return iteratePos_dyn(); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"wrap_bodies") ) { return wrap_bodies; }
		if (HX_FIELD_EQ(inName,"constraints") ) { return constraints; }
		if (HX_FIELD_EQ(inName,"staticsleep") ) { return staticsleep; }
		if (HX_FIELD_EQ(inName,"addListener") ) { return addListener_dyn(); }
		if (HX_FIELD_EQ(inName,"remListener") ) { return remListener_dyn(); }
		if (HX_FIELD_EQ(inName,"added_shape") ) { return added_shape_dyn(); }
		if (HX_FIELD_EQ(inName,"addCompound") ) { return addCompound_dyn(); }
		if (HX_FIELD_EQ(inName,"remCompound") ) { return remCompound_dyn(); }
		if (HX_FIELD_EQ(inName,"prepareCast") ) { return prepareCast_dyn(); }
		if (HX_FIELD_EQ(inName,"bodyCbSleep") ) { return bodyCbSleep_dyn(); }
		if (HX_FIELD_EQ(inName,"really_wake") ) { return really_wake_dyn(); }
		if (HX_FIELD_EQ(inName,"narrowPhase") ) { return narrowPhase_dyn(); }
		if (HX_FIELD_EQ(inName,"MRCA_chains") ) { return MRCA_chains_dyn(); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"wrap_gravity") ) { return wrap_gravity; }
		if (HX_FIELD_EQ(inName,"sortcontacts") ) { return sortcontacts; }
		if (HX_FIELD_EQ(inName,"wrap_livecon") ) { return wrap_livecon; }
		if (HX_FIELD_EQ(inName,"bodies_adder") ) { return bodies_adder_dyn(); }
		if (HX_FIELD_EQ(inName,"transmitType") ) { return transmitType_dyn(); }
		if (HX_FIELD_EQ(inName,"shapesInAABB") ) { return shapesInAABB_dyn(); }
		if (HX_FIELD_EQ(inName,"bodiesInAABB") ) { return bodiesInAABB_dyn(); }
		if (HX_FIELD_EQ(inName,"rayMultiCast") ) { return rayMultiCast_dyn(); }
		if (HX_FIELD_EQ(inName,"wakeCompound") ) { return wakeCompound_dyn(); }
		if (HX_FIELD_EQ(inName,"group_ignore") ) { return group_ignore_dyn(); }
		if (HX_FIELD_EQ(inName,"prelisteners") ) { return prelisteners; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"wrap_arbiters") ) { return wrap_arbiters; }
		if (HX_FIELD_EQ(inName,"bodies_subber") ) { return bodies_subber_dyn(); }
		if (HX_FIELD_EQ(inName,"removed_shape") ) { return removed_shape_dyn(); }
		if (HX_FIELD_EQ(inName,"addConstraint") ) { return addConstraint_dyn(); }
		if (HX_FIELD_EQ(inName,"remConstraint") ) { return remConstraint_dyn(); }
		if (HX_FIELD_EQ(inName,"shapesInShape") ) { return shapesInShape_dyn(); }
		if (HX_FIELD_EQ(inName,"bodiesInShape") ) { return bodiesInShape_dyn(); }
		if (HX_FIELD_EQ(inName,"push_callback") ) { return push_callback_dyn(); }
		if (HX_FIELD_EQ(inName,"sleepArbiters") ) { return sleepArbiters_dyn(); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"wrap_compounds") ) { return wrap_compounds; }
		if (HX_FIELD_EQ(inName,"wrap_listeners") ) { return wrap_listeners; }
		if (HX_FIELD_EQ(inName,"shapesInCircle") ) { return shapesInCircle_dyn(); }
		if (HX_FIELD_EQ(inName,"bodiesInCircle") ) { return bodiesInCircle_dyn(); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"global_lin_drag") ) { return global_lin_drag; }
		if (HX_FIELD_EQ(inName,"global_ang_drag") ) { return global_ang_drag; }
		if (HX_FIELD_EQ(inName,"c_arbiters_true") ) { return c_arbiters_true; }
		if (HX_FIELD_EQ(inName,"compounds_adder") ) { return compounds_adder_dyn(); }
		if (HX_FIELD_EQ(inName,"listeners_adder") ) { return listeners_adder_dyn(); }
		if (HX_FIELD_EQ(inName,"revoke_listener") ) { return revoke_listener_dyn(); }
		if (HX_FIELD_EQ(inName,"add_callbackset") ) { return add_callbackset_dyn(); }
		if (HX_FIELD_EQ(inName,"convexShapeList") ) { return convexShapeList; }
		if (HX_FIELD_EQ(inName,"convexMultiCast") ) { return convexMultiCast_dyn(); }
		if (HX_FIELD_EQ(inName,"continuousEvent") ) { return continuousEvent_dyn(); }
		if (HX_FIELD_EQ(inName,"wake_constraint") ) { return wake_constraint_dyn(); }
		if (HX_FIELD_EQ(inName,"interactionType") ) { return interactionType_dyn(); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"gravity_validate") ) { return gravity_validate_dyn(); }
		if (HX_FIELD_EQ(inName,"wrap_constraints") ) { return wrap_constraints; }
		if (HX_FIELD_EQ(inName,"c_arbiters_false") ) { return c_arbiters_false; }
		if (HX_FIELD_EQ(inName,"live_constraints") ) { return live_constraints; }
		if (HX_FIELD_EQ(inName,"callbackset_list") ) { return callbackset_list; }
		if (HX_FIELD_EQ(inName,"compounds_subber") ) { return compounds_subber_dyn(); }
		if (HX_FIELD_EQ(inName,"listeners_subber") ) { return listeners_subber_dyn(); }
		if (HX_FIELD_EQ(inName,"shapesUnderPoint") ) { return shapesUnderPoint_dyn(); }
		if (HX_FIELD_EQ(inName,"bodiesUnderPoint") ) { return bodiesUnderPoint_dyn(); }
		if (HX_FIELD_EQ(inName,"constraintCbWake") ) { return constraintCbWake_dyn(); }
		if (HX_FIELD_EQ(inName,"nullListenerType") ) { return nullListenerType_dyn(); }
		if (HX_FIELD_EQ(inName,"non_inlined_wake") ) { return non_inlined_wake_dyn(); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"bodies_modifiable") ) { return bodies_modifiable_dyn(); }
		if (HX_FIELD_EQ(inName,"constraints_adder") ) { return constraints_adder_dyn(); }
		if (HX_FIELD_EQ(inName,"unrevoke_listener") ) { return unrevoke_listener_dyn(); }
		if (HX_FIELD_EQ(inName,"constraintCbSleep") ) { return constraintCbSleep_dyn(); }
		if (HX_FIELD_EQ(inName,"constraintCbBreak") ) { return constraintCbBreak_dyn(); }
		if (HX_FIELD_EQ(inName,"freshListenerType") ) { return freshListenerType_dyn(); }
		if (HX_FIELD_EQ(inName,"static_validation") ) { return static_validation_dyn(); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"gravity_invalidate") ) { return gravity_invalidate_dyn(); }
		if (HX_FIELD_EQ(inName,"constraints_subber") ) { return constraints_subber_dyn(); }
		if (HX_FIELD_EQ(inName,"remove_callbackset") ) { return remove_callbackset_dyn(); }
		if (HX_FIELD_EQ(inName,"nullInteractorType") ) { return nullInteractorType_dyn(); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"freshInteractorType") ) { return freshInteractorType_dyn(); }
		if (HX_FIELD_EQ(inName,"inlined_MRCA_chains") ) { return inlined_MRCA_chains_dyn(); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"compounds_modifiable") ) { return compounds_modifiable_dyn(); }
		if (HX_FIELD_EQ(inName,"listeners_modifiable") ) { return listeners_modifiable_dyn(); }
		if (HX_FIELD_EQ(inName,"continuousCollisions") ) { return continuousCollisions_dyn(); }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"constraints_modifiable") ) { return constraints_modifiable_dyn(); }
	}
	return super::__Field(inName,inCallProp);
}

Dynamic ZPP_Space_obj::__SetField(const ::String &inName,const Dynamic &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"time") ) { time=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"live") ) { live=inValue.Cast< ::zpp_nape::util::ZNPList_ZPP_Body >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"outer") ) { outer=inValue.Cast< ::nape::space::Space >(); return inValue; }
		if (HX_FIELD_EQ(inName,"stamp") ) { stamp=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"precb") ) { precb=inValue.Cast< ::nape::callbacks::PreCallback >(); return inValue; }
		if (HX_FIELD_EQ(inName,"mrca1") ) { mrca1=inValue.Cast< ::zpp_nape::util::ZNPList_ZPP_Interactor >(); return inValue; }
		if (HX_FIELD_EQ(inName,"mrca2") ) { mrca2=inValue.Cast< ::zpp_nape::util::ZNPList_ZPP_Interactor >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"bodies") ) { bodies=inValue.Cast< ::zpp_nape::util::ZNPList_ZPP_Body >(); return inValue; }
		if (HX_FIELD_EQ(inName,"bphase") ) { bphase=inValue.Cast< ::zpp_nape::space::ZPP_Broadphase >(); return inValue; }
		if (HX_FIELD_EQ(inName,"cbsets") ) { cbsets=inValue.Cast< ::zpp_nape::space::ZPP_CbSetManager >(); return inValue; }
		if (HX_FIELD_EQ(inName,"pre_dt") ) { pre_dt=inValue.Cast< Float >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"midstep") ) { midstep=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"islands") ) { islands=inValue.Cast< ::zpp_nape::space::ZPP_Island >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"userData") ) { userData=inValue.Cast< Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"gravityx") ) { gravityx=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"gravityy") ) { gravityy=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__static") ) { __static=inValue.Cast< ::nape::phys::Body >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"compounds") ) { compounds=inValue.Cast< ::zpp_nape::util::ZNPList_ZPP_Compound >(); return inValue; }
		if (HX_FIELD_EQ(inName,"wrap_live") ) { wrap_live=inValue.Cast< ::nape::phys::BodyList >(); return inValue; }
		if (HX_FIELD_EQ(inName,"listeners") ) { listeners=inValue.Cast< ::zpp_nape::util::ZNPList_ZPP_Listener >(); return inValue; }
		if (HX_FIELD_EQ(inName,"callbacks") ) { callbacks=inValue.Cast< ::zpp_nape::callbacks::ZPP_Callback >(); return inValue; }
		if (HX_FIELD_EQ(inName,"toiEvents") ) { toiEvents=inValue.Cast< ::zpp_nape::util::ZNPList_ZPP_ToiEvent >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"kinematics") ) { kinematics=inValue.Cast< ::zpp_nape::util::ZNPList_ZPP_Body >(); return inValue; }
		if (HX_FIELD_EQ(inName,"f_arbiters") ) { f_arbiters=inValue.Cast< ::zpp_nape::util::ZNPList_ZPP_FluidArbiter >(); return inValue; }
		if (HX_FIELD_EQ(inName,"s_arbiters") ) { s_arbiters=inValue.Cast< ::zpp_nape::util::ZNPList_ZPP_SensorArbiter >(); return inValue; }
		if (HX_FIELD_EQ(inName,"continuous") ) { continuous=inValue.Cast< bool >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"wrap_bodies") ) { wrap_bodies=inValue.Cast< ::nape::phys::BodyList >(); return inValue; }
		if (HX_FIELD_EQ(inName,"constraints") ) { constraints=inValue.Cast< ::zpp_nape::util::ZNPList_ZPP_Constraint >(); return inValue; }
		if (HX_FIELD_EQ(inName,"staticsleep") ) { staticsleep=inValue.Cast< ::zpp_nape::util::ZNPList_ZPP_Body >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"wrap_gravity") ) { wrap_gravity=inValue.Cast< ::nape::geom::Vec2 >(); return inValue; }
		if (HX_FIELD_EQ(inName,"sortcontacts") ) { sortcontacts=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"wrap_livecon") ) { wrap_livecon=inValue.Cast< ::nape::constraint::ConstraintList >(); return inValue; }
		if (HX_FIELD_EQ(inName,"prelisteners") ) { prelisteners=inValue.Cast< ::zpp_nape::util::ZNPList_ZPP_InteractionListener >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"wrap_arbiters") ) { wrap_arbiters=inValue.Cast< ::nape::dynamics::ArbiterList >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"wrap_compounds") ) { wrap_compounds=inValue.Cast< ::nape::phys::CompoundList >(); return inValue; }
		if (HX_FIELD_EQ(inName,"wrap_listeners") ) { wrap_listeners=inValue.Cast< ::nape::callbacks::ListenerList >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"global_lin_drag") ) { global_lin_drag=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"global_ang_drag") ) { global_ang_drag=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"c_arbiters_true") ) { c_arbiters_true=inValue.Cast< ::zpp_nape::util::ZNPList_ZPP_ColArbiter >(); return inValue; }
		if (HX_FIELD_EQ(inName,"convexShapeList") ) { convexShapeList=inValue.Cast< ::nape::shape::ShapeList >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"wrap_constraints") ) { wrap_constraints=inValue.Cast< ::nape::constraint::ConstraintList >(); return inValue; }
		if (HX_FIELD_EQ(inName,"c_arbiters_false") ) { c_arbiters_false=inValue.Cast< ::zpp_nape::util::ZNPList_ZPP_ColArbiter >(); return inValue; }
		if (HX_FIELD_EQ(inName,"live_constraints") ) { live_constraints=inValue.Cast< ::zpp_nape::util::ZNPList_ZPP_Constraint >(); return inValue; }
		if (HX_FIELD_EQ(inName,"callbackset_list") ) { callbackset_list=inValue.Cast< ::zpp_nape::space::ZPP_CallbackSet >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool ZPP_Space_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	return false;
}

void ZPP_Space_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("outer","\x7b","\xb8","\x28","\x37"));
	outFields->push(HX_HCSTRING("userData","\x15","\x96","\x28","\x05"));
	outFields->push(HX_HCSTRING("gravityx","\x6a","\x16","\x81","\x87"));
	outFields->push(HX_HCSTRING("gravityy","\x6b","\x16","\x81","\x87"));
	outFields->push(HX_HCSTRING("wrap_gravity","\x99","\xdb","\x94","\xca"));
	outFields->push(HX_HCSTRING("bodies","\x80","\x1b","\xdd","\x5a"));
	outFields->push(HX_HCSTRING("wrap_bodies","\x95","\x20","\x6c","\x45"));
	outFields->push(HX_HCSTRING("compounds","\xa8","\x3a","\xfb","\x13"));
	outFields->push(HX_HCSTRING("wrap_compounds","\xb3","\xd0","\xbe","\x48"));
	outFields->push(HX_HCSTRING("constraints","\x76","\x51","\xb4","\x17"));
	outFields->push(HX_HCSTRING("wrap_constraints","\x41","\xc0","\x11","\xb5"));
	outFields->push(HX_HCSTRING("kinematics","\xce","\x6b","\x8a","\x9b"));
	outFields->push(HX_HCSTRING("bphase","\x99","\x84","\xe2","\xf0"));
	outFields->push(HX_HCSTRING("__static","\xce","\x47","\x2b","\xae"));
	outFields->push(HX_HCSTRING("global_lin_drag","\x7e","\xd4","\xba","\xd7"));
	outFields->push(HX_HCSTRING("global_ang_drag","\x55","\xb8","\xfb","\x65"));
	outFields->push(HX_HCSTRING("stamp","\x03","\x70","\x0b","\x84"));
	outFields->push(HX_HCSTRING("midstep","\xd4","\x5c","\x8a","\x90"));
	outFields->push(HX_HCSTRING("time","\x0d","\xcc","\xfc","\x4c"));
	outFields->push(HX_HCSTRING("sortcontacts","\x31","\x87","\x72","\xcc"));
	outFields->push(HX_HCSTRING("c_arbiters_true","\x67","\x0e","\x78","\x6a"));
	outFields->push(HX_HCSTRING("c_arbiters_false","\x6a","\x04","\xb5","\xa3"));
	outFields->push(HX_HCSTRING("f_arbiters","\xa3","\xe6","\xf3","\x06"));
	outFields->push(HX_HCSTRING("s_arbiters","\xf6","\xfc","\xbb","\xca"));
	outFields->push(HX_HCSTRING("wrap_arbiters","\xbf","\x60","\xdc","\x11"));
	outFields->push(HX_HCSTRING("live","\xec","\x1e","\xb3","\x47"));
	outFields->push(HX_HCSTRING("wrap_live","\xc1","\x44","\x0d","\x0b"));
	outFields->push(HX_HCSTRING("live_constraints","\x63","\xd0","\x19","\xe2"));
	outFields->push(HX_HCSTRING("wrap_livecon","\x21","\xea","\x72","\x0d"));
	outFields->push(HX_HCSTRING("staticsleep","\xa9","\x29","\x64","\x00"));
	outFields->push(HX_HCSTRING("islands","\xfe","\x5b","\x10","\x79"));
	outFields->push(HX_HCSTRING("listeners","\x7f","\x65","\x8e","\xf3"));
	outFields->push(HX_HCSTRING("wrap_listeners","\x8a","\xfb","\x51","\x28"));
	outFields->push(HX_HCSTRING("callbacks","\x0e","\xf3","\xbf","\xa6"));
	outFields->push(HX_HCSTRING("callbackset_list","\x20","\x98","\x58","\x06"));
	outFields->push(HX_HCSTRING("cbsets","\xb0","\x24","\xea","\x4e"));
	outFields->push(HX_HCSTRING("convexShapeList","\xb8","\x93","\x73","\xcc"));
	outFields->push(HX_HCSTRING("pre_dt","\x6c","\x85","\xb1","\xae"));
	outFields->push(HX_HCSTRING("toiEvents","\x47","\x88","\x8f","\x3b"));
	outFields->push(HX_HCSTRING("continuous","\x0f","\x05","\x17","\xde"));
	outFields->push(HX_HCSTRING("precb","\x82","\x45","\x88","\xc8"));
	outFields->push(HX_HCSTRING("prelisteners","\xfc","\x68","\xbb","\xf7"));
	outFields->push(HX_HCSTRING("mrca1","\x8e","\x01","\x53","\x0e"));
	outFields->push(HX_HCSTRING("mrca2","\x8f","\x01","\x53","\x0e"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo sMemberStorageInfo[] = {
	{hx::fsObject /*::nape::space::Space*/ ,(int)offsetof(ZPP_Space_obj,outer),HX_HCSTRING("outer","\x7b","\xb8","\x28","\x37")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(ZPP_Space_obj,userData),HX_HCSTRING("userData","\x15","\x96","\x28","\x05")},
	{hx::fsFloat,(int)offsetof(ZPP_Space_obj,gravityx),HX_HCSTRING("gravityx","\x6a","\x16","\x81","\x87")},
	{hx::fsFloat,(int)offsetof(ZPP_Space_obj,gravityy),HX_HCSTRING("gravityy","\x6b","\x16","\x81","\x87")},
	{hx::fsObject /*::nape::geom::Vec2*/ ,(int)offsetof(ZPP_Space_obj,wrap_gravity),HX_HCSTRING("wrap_gravity","\x99","\xdb","\x94","\xca")},
	{hx::fsObject /*::zpp_nape::util::ZNPList_ZPP_Body*/ ,(int)offsetof(ZPP_Space_obj,bodies),HX_HCSTRING("bodies","\x80","\x1b","\xdd","\x5a")},
	{hx::fsObject /*::nape::phys::BodyList*/ ,(int)offsetof(ZPP_Space_obj,wrap_bodies),HX_HCSTRING("wrap_bodies","\x95","\x20","\x6c","\x45")},
	{hx::fsObject /*::zpp_nape::util::ZNPList_ZPP_Compound*/ ,(int)offsetof(ZPP_Space_obj,compounds),HX_HCSTRING("compounds","\xa8","\x3a","\xfb","\x13")},
	{hx::fsObject /*::nape::phys::CompoundList*/ ,(int)offsetof(ZPP_Space_obj,wrap_compounds),HX_HCSTRING("wrap_compounds","\xb3","\xd0","\xbe","\x48")},
	{hx::fsObject /*::zpp_nape::util::ZNPList_ZPP_Constraint*/ ,(int)offsetof(ZPP_Space_obj,constraints),HX_HCSTRING("constraints","\x76","\x51","\xb4","\x17")},
	{hx::fsObject /*::nape::constraint::ConstraintList*/ ,(int)offsetof(ZPP_Space_obj,wrap_constraints),HX_HCSTRING("wrap_constraints","\x41","\xc0","\x11","\xb5")},
	{hx::fsObject /*::zpp_nape::util::ZNPList_ZPP_Body*/ ,(int)offsetof(ZPP_Space_obj,kinematics),HX_HCSTRING("kinematics","\xce","\x6b","\x8a","\x9b")},
	{hx::fsObject /*::zpp_nape::space::ZPP_Broadphase*/ ,(int)offsetof(ZPP_Space_obj,bphase),HX_HCSTRING("bphase","\x99","\x84","\xe2","\xf0")},
	{hx::fsObject /*::nape::phys::Body*/ ,(int)offsetof(ZPP_Space_obj,__static),HX_HCSTRING("__static","\xce","\x47","\x2b","\xae")},
	{hx::fsFloat,(int)offsetof(ZPP_Space_obj,global_lin_drag),HX_HCSTRING("global_lin_drag","\x7e","\xd4","\xba","\xd7")},
	{hx::fsFloat,(int)offsetof(ZPP_Space_obj,global_ang_drag),HX_HCSTRING("global_ang_drag","\x55","\xb8","\xfb","\x65")},
	{hx::fsInt,(int)offsetof(ZPP_Space_obj,stamp),HX_HCSTRING("stamp","\x03","\x70","\x0b","\x84")},
	{hx::fsBool,(int)offsetof(ZPP_Space_obj,midstep),HX_HCSTRING("midstep","\xd4","\x5c","\x8a","\x90")},
	{hx::fsFloat,(int)offsetof(ZPP_Space_obj,time),HX_HCSTRING("time","\x0d","\xcc","\xfc","\x4c")},
	{hx::fsBool,(int)offsetof(ZPP_Space_obj,sortcontacts),HX_HCSTRING("sortcontacts","\x31","\x87","\x72","\xcc")},
	{hx::fsObject /*::zpp_nape::util::ZNPList_ZPP_ColArbiter*/ ,(int)offsetof(ZPP_Space_obj,c_arbiters_true),HX_HCSTRING("c_arbiters_true","\x67","\x0e","\x78","\x6a")},
	{hx::fsObject /*::zpp_nape::util::ZNPList_ZPP_ColArbiter*/ ,(int)offsetof(ZPP_Space_obj,c_arbiters_false),HX_HCSTRING("c_arbiters_false","\x6a","\x04","\xb5","\xa3")},
	{hx::fsObject /*::zpp_nape::util::ZNPList_ZPP_FluidArbiter*/ ,(int)offsetof(ZPP_Space_obj,f_arbiters),HX_HCSTRING("f_arbiters","\xa3","\xe6","\xf3","\x06")},
	{hx::fsObject /*::zpp_nape::util::ZNPList_ZPP_SensorArbiter*/ ,(int)offsetof(ZPP_Space_obj,s_arbiters),HX_HCSTRING("s_arbiters","\xf6","\xfc","\xbb","\xca")},
	{hx::fsObject /*::nape::dynamics::ArbiterList*/ ,(int)offsetof(ZPP_Space_obj,wrap_arbiters),HX_HCSTRING("wrap_arbiters","\xbf","\x60","\xdc","\x11")},
	{hx::fsObject /*::zpp_nape::util::ZNPList_ZPP_Body*/ ,(int)offsetof(ZPP_Space_obj,live),HX_HCSTRING("live","\xec","\x1e","\xb3","\x47")},
	{hx::fsObject /*::nape::phys::BodyList*/ ,(int)offsetof(ZPP_Space_obj,wrap_live),HX_HCSTRING("wrap_live","\xc1","\x44","\x0d","\x0b")},
	{hx::fsObject /*::zpp_nape::util::ZNPList_ZPP_Constraint*/ ,(int)offsetof(ZPP_Space_obj,live_constraints),HX_HCSTRING("live_constraints","\x63","\xd0","\x19","\xe2")},
	{hx::fsObject /*::nape::constraint::ConstraintList*/ ,(int)offsetof(ZPP_Space_obj,wrap_livecon),HX_HCSTRING("wrap_livecon","\x21","\xea","\x72","\x0d")},
	{hx::fsObject /*::zpp_nape::util::ZNPList_ZPP_Body*/ ,(int)offsetof(ZPP_Space_obj,staticsleep),HX_HCSTRING("staticsleep","\xa9","\x29","\x64","\x00")},
	{hx::fsObject /*::zpp_nape::space::ZPP_Island*/ ,(int)offsetof(ZPP_Space_obj,islands),HX_HCSTRING("islands","\xfe","\x5b","\x10","\x79")},
	{hx::fsObject /*::zpp_nape::util::ZNPList_ZPP_Listener*/ ,(int)offsetof(ZPP_Space_obj,listeners),HX_HCSTRING("listeners","\x7f","\x65","\x8e","\xf3")},
	{hx::fsObject /*::nape::callbacks::ListenerList*/ ,(int)offsetof(ZPP_Space_obj,wrap_listeners),HX_HCSTRING("wrap_listeners","\x8a","\xfb","\x51","\x28")},
	{hx::fsObject /*::zpp_nape::callbacks::ZPP_Callback*/ ,(int)offsetof(ZPP_Space_obj,callbacks),HX_HCSTRING("callbacks","\x0e","\xf3","\xbf","\xa6")},
	{hx::fsObject /*::zpp_nape::space::ZPP_CallbackSet*/ ,(int)offsetof(ZPP_Space_obj,callbackset_list),HX_HCSTRING("callbackset_list","\x20","\x98","\x58","\x06")},
	{hx::fsObject /*::zpp_nape::space::ZPP_CbSetManager*/ ,(int)offsetof(ZPP_Space_obj,cbsets),HX_HCSTRING("cbsets","\xb0","\x24","\xea","\x4e")},
	{hx::fsObject /*::nape::shape::ShapeList*/ ,(int)offsetof(ZPP_Space_obj,convexShapeList),HX_HCSTRING("convexShapeList","\xb8","\x93","\x73","\xcc")},
	{hx::fsFloat,(int)offsetof(ZPP_Space_obj,pre_dt),HX_HCSTRING("pre_dt","\x6c","\x85","\xb1","\xae")},
	{hx::fsObject /*::zpp_nape::util::ZNPList_ZPP_ToiEvent*/ ,(int)offsetof(ZPP_Space_obj,toiEvents),HX_HCSTRING("toiEvents","\x47","\x88","\x8f","\x3b")},
	{hx::fsBool,(int)offsetof(ZPP_Space_obj,continuous),HX_HCSTRING("continuous","\x0f","\x05","\x17","\xde")},
	{hx::fsObject /*::nape::callbacks::PreCallback*/ ,(int)offsetof(ZPP_Space_obj,precb),HX_HCSTRING("precb","\x82","\x45","\x88","\xc8")},
	{hx::fsObject /*::zpp_nape::util::ZNPList_ZPP_InteractionListener*/ ,(int)offsetof(ZPP_Space_obj,prelisteners),HX_HCSTRING("prelisteners","\xfc","\x68","\xbb","\xf7")},
	{hx::fsObject /*::zpp_nape::util::ZNPList_ZPP_Interactor*/ ,(int)offsetof(ZPP_Space_obj,mrca1),HX_HCSTRING("mrca1","\x8e","\x01","\x53","\x0e")},
	{hx::fsObject /*::zpp_nape::util::ZNPList_ZPP_Interactor*/ ,(int)offsetof(ZPP_Space_obj,mrca2),HX_HCSTRING("mrca2","\x8f","\x01","\x53","\x0e")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *sStaticStorageInfo = 0;
#endif

static ::String sMemberFields[] = {
	HX_HCSTRING("outer","\x7b","\xb8","\x28","\x37"),
	HX_HCSTRING("userData","\x15","\x96","\x28","\x05"),
	HX_HCSTRING("gravityx","\x6a","\x16","\x81","\x87"),
	HX_HCSTRING("gravityy","\x6b","\x16","\x81","\x87"),
	HX_HCSTRING("wrap_gravity","\x99","\xdb","\x94","\xca"),
	HX_HCSTRING("getgravity","\x78","\xcc","\x0f","\xfa"),
	HX_HCSTRING("gravity_invalidate","\x0c","\x9f","\x82","\xbd"),
	HX_HCSTRING("gravity_validate","\xe7","\x1f","\xcd","\xf2"),
	HX_HCSTRING("bodies","\x80","\x1b","\xdd","\x5a"),
	HX_HCSTRING("wrap_bodies","\x95","\x20","\x6c","\x45"),
	HX_HCSTRING("compounds","\xa8","\x3a","\xfb","\x13"),
	HX_HCSTRING("wrap_compounds","\xb3","\xd0","\xbe","\x48"),
	HX_HCSTRING("constraints","\x76","\x51","\xb4","\x17"),
	HX_HCSTRING("wrap_constraints","\x41","\xc0","\x11","\xb5"),
	HX_HCSTRING("kinematics","\xce","\x6b","\x8a","\x9b"),
	HX_HCSTRING("bphase","\x99","\x84","\xe2","\xf0"),
	HX_HCSTRING("__static","\xce","\x47","\x2b","\xae"),
	HX_HCSTRING("global_lin_drag","\x7e","\xd4","\xba","\xd7"),
	HX_HCSTRING("global_ang_drag","\x55","\xb8","\xfb","\x65"),
	HX_HCSTRING("stamp","\x03","\x70","\x0b","\x84"),
	HX_HCSTRING("midstep","\xd4","\x5c","\x8a","\x90"),
	HX_HCSTRING("time","\x0d","\xcc","\xfc","\x4c"),
	HX_HCSTRING("sortcontacts","\x31","\x87","\x72","\xcc"),
	HX_HCSTRING("c_arbiters_true","\x67","\x0e","\x78","\x6a"),
	HX_HCSTRING("c_arbiters_false","\x6a","\x04","\xb5","\xa3"),
	HX_HCSTRING("f_arbiters","\xa3","\xe6","\xf3","\x06"),
	HX_HCSTRING("s_arbiters","\xf6","\xfc","\xbb","\xca"),
	HX_HCSTRING("wrap_arbiters","\xbf","\x60","\xdc","\x11"),
	HX_HCSTRING("live","\xec","\x1e","\xb3","\x47"),
	HX_HCSTRING("wrap_live","\xc1","\x44","\x0d","\x0b"),
	HX_HCSTRING("live_constraints","\x63","\xd0","\x19","\xe2"),
	HX_HCSTRING("wrap_livecon","\x21","\xea","\x72","\x0d"),
	HX_HCSTRING("staticsleep","\xa9","\x29","\x64","\x00"),
	HX_HCSTRING("islands","\xfe","\x5b","\x10","\x79"),
	HX_HCSTRING("listeners","\x7f","\x65","\x8e","\xf3"),
	HX_HCSTRING("wrap_listeners","\x8a","\xfb","\x51","\x28"),
	HX_HCSTRING("callbacks","\x0e","\xf3","\xbf","\xa6"),
	HX_HCSTRING("callbackset_list","\x20","\x98","\x58","\x06"),
	HX_HCSTRING("cbsets","\xb0","\x24","\xea","\x4e"),
	HX_HCSTRING("clear","\x8d","\x71","\x5b","\x48"),
	HX_HCSTRING("bodies_adder","\x8f","\xd7","\x09","\x05"),
	HX_HCSTRING("bodies_subber","\xee","\x61","\x7a","\x5e"),
	HX_HCSTRING("bodies_modifiable","\xa3","\x60","\x59","\xa5"),
	HX_HCSTRING("compounds_adder","\xb7","\xc4","\x63","\x01"),
	HX_HCSTRING("compounds_subber","\xc6","\xf7","\xcf","\x30"),
	HX_HCSTRING("compounds_modifiable","\x7b","\xc2","\x2a","\xd9"),
	HX_HCSTRING("constraints_adder","\x05","\xea","\x56","\x64"),
	HX_HCSTRING("constraints_subber","\xb8","\x76","\x9d","\x62"),
	HX_HCSTRING("constraints_modifiable","\x6d","\xa2","\x87","\x49"),
	HX_HCSTRING("listeners_adder","\xce","\x2a","\x39","\xc3"),
	HX_HCSTRING("listeners_subber","\xcf","\xe5","\xb3","\x09"),
	HX_HCSTRING("listeners_modifiable","\x04","\xe9","\x38","\xec"),
	HX_HCSTRING("revoke_listener","\xcd","\x80","\x49","\x09"),
	HX_HCSTRING("unrevoke_listener","\x94","\x26","\x6a","\x79"),
	HX_HCSTRING("addListener","\xb5","\x37","\x8e","\x69"),
	HX_HCSTRING("remListener","\xee","\x7f","\x1a","\x23"),
	HX_HCSTRING("add_callbackset","\x9f","\x78","\x34","\xf1"),
	HX_HCSTRING("remove_callbackset","\x42","\x4b","\x1b","\xb7"),
	HX_HCSTRING("transmitType","\x4a","\x19","\xdf","\x11"),
	HX_HCSTRING("added_shape","\x22","\x0f","\xf8","\x9e"),
	HX_HCSTRING("removed_shape","\x02","\xc2","\xcf","\xc1"),
	HX_HCSTRING("addConstraint","\xde","\x49","\x15","\xc5"),
	HX_HCSTRING("remConstraint","\x57","\xd2","\x6e","\x30"),
	HX_HCSTRING("addCompound","\xac","\xfa","\x2b","\xb3"),
	HX_HCSTRING("remCompound","\xe5","\x42","\xb8","\x6c"),
	HX_HCSTRING("addBody","\x63","\xbd","\x58","\x7d"),
	HX_HCSTRING("remBody","\x1c","\x35","\x3c","\xd5"),
	HX_HCSTRING("shapesUnderPoint","\xea","\xec","\xbc","\x47"),
	HX_HCSTRING("bodiesUnderPoint","\xb8","\x1b","\x30","\x80"),
	HX_HCSTRING("shapesInAABB","\xd7","\x1c","\x84","\xf9"),
	HX_HCSTRING("bodiesInAABB","\xa5","\x4c","\x28","\x9e"),
	HX_HCSTRING("shapesInCircle","\x27","\xd4","\xf7","\x6c"),
	HX_HCSTRING("bodiesInCircle","\x75","\x13","\xe2","\xa6"),
	HX_HCSTRING("shapesInShape","\xea","\x90","\x2a","\xd1"),
	HX_HCSTRING("bodiesInShape","\x5c","\x35","\x30","\x3c"),
	HX_HCSTRING("rayCast","\xc9","\x5d","\x3c","\x25"),
	HX_HCSTRING("rayMultiCast","\x8e","\x02","\x7d","\x23"),
	HX_HCSTRING("convexShapeList","\xb8","\x93","\x73","\xcc"),
	HX_HCSTRING("convexCast","\xc6","\x01","\xbf","\x38"),
	HX_HCSTRING("prepareCast","\xe6","\xab","\x25","\xec"),
	HX_HCSTRING("convexMultiCast","\x71","\xc9","\xd5","\x6c"),
	HX_HCSTRING("push_callback","\x0a","\x74","\x7b","\x59"),
	HX_HCSTRING("pre_dt","\x6c","\x85","\xb1","\xae"),
	HX_HCSTRING("step","\x4c","\xe7","\x5b","\x4c"),
	HX_HCSTRING("toiEvents","\x47","\x88","\x8f","\x3b"),
	HX_HCSTRING("continuousCollisions","\xb0","\x4d","\xc1","\xd4"),
	HX_HCSTRING("continuousEvent","\x8b","\x7c","\xa3","\x7f"),
	HX_HCSTRING("bodyCbWake","\xa5","\xae","\x81","\x83"),
	HX_HCSTRING("bodyCbSleep","\x76","\x9b","\x9d","\x47"),
	HX_HCSTRING("constraintCbWake","\xa0","\xb2","\x11","\x08"),
	HX_HCSTRING("constraintCbSleep","\x1b","\x13","\x11","\xc1"),
	HX_HCSTRING("constraintCbBreak","\xc3","\x7a","\x38","\xfb"),
	HX_HCSTRING("nullListenerType","\x75","\x82","\xa7","\x3f"),
	HX_HCSTRING("nullInteractorType","\x9a","\x76","\x84","\x83"),
	HX_HCSTRING("freshListenerType","\xdc","\x28","\x8f","\x75"),
	HX_HCSTRING("freshInteractorType","\xc1","\xc4","\x6f","\xbf"),
	HX_HCSTRING("wakeCompound","\xaf","\x9f","\x22","\x58"),
	HX_HCSTRING("wakeIsland","\x19","\x22","\xf3","\x4e"),
	HX_HCSTRING("non_inlined_wake","\xea","\x75","\x91","\xad"),
	HX_HCSTRING("really_wake","\xb8","\x36","\x6e","\x3d"),
	HX_HCSTRING("wake_constraint","\xd8","\x5b","\xf4","\x49"),
	HX_HCSTRING("doForests","\xab","\x5c","\x70","\xda"),
	HX_HCSTRING("sleepArbiters","\xa1","\x14","\x5e","\x0c"),
	HX_HCSTRING("static_validation","\x6a","\xff","\xac","\x7c"),
	HX_HCSTRING("validation","\x39","\x0c","\xed","\xe1"),
	HX_HCSTRING("updateVel","\xd4","\xbf","\xe6","\x82"),
	HX_HCSTRING("updatePos","\x0b","\x3b","\xe2","\x82"),
	HX_HCSTRING("continuous","\x0f","\x05","\x17","\xde"),
	HX_HCSTRING("presteparb","\xc2","\xe8","\x50","\x22"),
	HX_HCSTRING("prestep","\xef","\x94","\xe7","\x39"),
	HX_HCSTRING("warmStart","\xdd","\x27","\x03","\xeb"),
	HX_HCSTRING("iterateVel","\x83","\x18","\x82","\x5f"),
	HX_HCSTRING("iteratePos","\xba","\x93","\x7d","\x5f"),
	HX_HCSTRING("group_ignore","\x52","\x8d","\x01","\xa7"),
	HX_HCSTRING("interactionType","\xac","\xa7","\xc8","\x08"),
	HX_HCSTRING("precb","\x82","\x45","\x88","\xc8"),
	HX_HCSTRING("prelisteners","\xfc","\x68","\xbb","\xf7"),
	HX_HCSTRING("narrowPhase","\xa0","\x1b","\x1e","\x95"),
	HX_HCSTRING("mrca1","\x8e","\x01","\x53","\x0e"),
	HX_HCSTRING("mrca2","\x8f","\x01","\x53","\x0e"),
	HX_HCSTRING("MRCA_chains","\x0e","\xfb","\xa3","\x3b"),
	HX_HCSTRING("inlined_MRCA_chains","\x7a","\xa1","\x4a","\x9e"),
	::String(null()) };

static void sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(ZPP_Space_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(ZPP_Space_obj::__mClass,"__mClass");
};

#endif

hx::Class ZPP_Space_obj::__mClass;

void ZPP_Space_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("zpp_nape.space.ZPP_Space","\xb8","\x5d","\xa4","\x56");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &ZPP_Space_obj::__SetStatic;
	__mClass->mMarkFunc = sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(sMemberFields);
	__mClass->mCanCast = hx::TCanCast< ZPP_Space_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = sStaticStorageInfo;
#endif
	hx::RegisterClass(__mClass->mName, __mClass);
}

} // end namespace zpp_nape
} // end namespace space
